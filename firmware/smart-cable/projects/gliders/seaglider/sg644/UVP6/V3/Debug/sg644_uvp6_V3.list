
sg644_uvp6_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014cc0  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff8  08014eb0  08014eb0  00024eb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015ea8  08015ea8  000303f8  2**0
                  CONTENTS
  4 .ARM          00000008  08015ea8  08015ea8  00025ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015eb0  08015eb0  000303f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015eb0  08015eb0  00025eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015eb4  08015eb4  00025eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003f8  20000000  08015eb8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c860  200003f8  080162b0  000303f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000cc58  080162b0  0003cc58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000303f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025fe7  00000000  00000000  00030421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056e2  00000000  00000000  00056408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e20  00000000  00000000  0005baf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c08  00000000  00000000  0005d910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211de  00000000  00000000  0005f518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027563  00000000  00000000  000806f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9072  00000000  00000000  000a7c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150ccb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000093b8  00000000  00000000  00150d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200003f8 	.word	0x200003f8
 800020c:	00000000 	.word	0x00000000
 8000210:	08014e98 	.word	0x08014e98

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200003fc 	.word	0x200003fc
 800022c:	08014e98 	.word	0x08014e98

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_frsub>:
 8000c48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c4c:	e002      	b.n	8000c54 <__addsf3>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_fsub>:
 8000c50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c54 <__addsf3>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	bf1f      	itttt	ne
 8000c58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c5c:	ea92 0f03 	teqne	r2, r3
 8000c60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c68:	d06a      	beq.n	8000d40 <__addsf3+0xec>
 8000c6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c72:	bfc1      	itttt	gt
 8000c74:	18d2      	addgt	r2, r2, r3
 8000c76:	4041      	eorgt	r1, r0
 8000c78:	4048      	eorgt	r0, r1
 8000c7a:	4041      	eorgt	r1, r0
 8000c7c:	bfb8      	it	lt
 8000c7e:	425b      	neglt	r3, r3
 8000c80:	2b19      	cmp	r3, #25
 8000c82:	bf88      	it	hi
 8000c84:	4770      	bxhi	lr
 8000c86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4249      	negne	r1, r1
 8000ca6:	ea92 0f03 	teq	r2, r3
 8000caa:	d03f      	beq.n	8000d2c <__addsf3+0xd8>
 8000cac:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cb4:	eb10 000c 	adds.w	r0, r0, ip
 8000cb8:	f1c3 0320 	rsb	r3, r3, #32
 8000cbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__addsf3+0x78>
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ccc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cd0:	d313      	bcc.n	8000cfa <__addsf3+0xa6>
 8000cd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cd6:	d306      	bcc.n	8000ce6 <__addsf3+0x92>
 8000cd8:	0840      	lsrs	r0, r0, #1
 8000cda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cde:	f102 0201 	add.w	r2, r2, #1
 8000ce2:	2afe      	cmp	r2, #254	; 0xfe
 8000ce4:	d251      	bcs.n	8000d8a <__addsf3+0x136>
 8000ce6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	ea40 0003 	orr.w	r0, r0, r3
 8000cf8:	4770      	bx	lr
 8000cfa:	0049      	lsls	r1, r1, #1
 8000cfc:	eb40 0000 	adc.w	r0, r0, r0
 8000d00:	3a01      	subs	r2, #1
 8000d02:	bf28      	it	cs
 8000d04:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d08:	d2ed      	bcs.n	8000ce6 <__addsf3+0x92>
 8000d0a:	fab0 fc80 	clz	ip, r0
 8000d0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d12:	ebb2 020c 	subs.w	r2, r2, ip
 8000d16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d1a:	bfaa      	itet	ge
 8000d1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d20:	4252      	neglt	r2, r2
 8000d22:	4318      	orrge	r0, r3
 8000d24:	bfbc      	itt	lt
 8000d26:	40d0      	lsrlt	r0, r2
 8000d28:	4318      	orrlt	r0, r3
 8000d2a:	4770      	bx	lr
 8000d2c:	f092 0f00 	teq	r2, #0
 8000d30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d34:	bf06      	itte	eq
 8000d36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d3a:	3201      	addeq	r2, #1
 8000d3c:	3b01      	subne	r3, #1
 8000d3e:	e7b5      	b.n	8000cac <__addsf3+0x58>
 8000d40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d48:	bf18      	it	ne
 8000d4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d4e:	d021      	beq.n	8000d94 <__addsf3+0x140>
 8000d50:	ea92 0f03 	teq	r2, r3
 8000d54:	d004      	beq.n	8000d60 <__addsf3+0x10c>
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	bf08      	it	eq
 8000d5c:	4608      	moveq	r0, r1
 8000d5e:	4770      	bx	lr
 8000d60:	ea90 0f01 	teq	r0, r1
 8000d64:	bf1c      	itt	ne
 8000d66:	2000      	movne	r0, #0
 8000d68:	4770      	bxne	lr
 8000d6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d6e:	d104      	bne.n	8000d7a <__addsf3+0x126>
 8000d70:	0040      	lsls	r0, r0, #1
 8000d72:	bf28      	it	cs
 8000d74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d78:	4770      	bx	lr
 8000d7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d7e:	bf3c      	itt	cc
 8000d80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d84:	4770      	bxcc	lr
 8000d86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d98:	bf16      	itet	ne
 8000d9a:	4608      	movne	r0, r1
 8000d9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000da0:	4601      	movne	r1, r0
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	bf06      	itte	eq
 8000da6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000daa:	ea90 0f01 	teqeq	r0, r1
 8000dae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_ui2f>:
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e004      	b.n	8000dc4 <__aeabi_i2f+0x8>
 8000dba:	bf00      	nop

08000dbc <__aeabi_i2f>:
 8000dbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dc0:	bf48      	it	mi
 8000dc2:	4240      	negmi	r0, r0
 8000dc4:	ea5f 0c00 	movs.w	ip, r0
 8000dc8:	bf08      	it	eq
 8000dca:	4770      	bxeq	lr
 8000dcc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	e01c      	b.n	8000e12 <__aeabi_l2f+0x2a>

08000dd8 <__aeabi_ul2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e00a      	b.n	8000dfc <__aeabi_l2f+0x14>
 8000de6:	bf00      	nop

08000de8 <__aeabi_l2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000df4:	d502      	bpl.n	8000dfc <__aeabi_l2f+0x14>
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	ea5f 0c01 	movs.w	ip, r1
 8000e00:	bf02      	ittt	eq
 8000e02:	4684      	moveq	ip, r0
 8000e04:	4601      	moveq	r1, r0
 8000e06:	2000      	moveq	r0, #0
 8000e08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e0c:	bf08      	it	eq
 8000e0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e16:	fabc f28c 	clz	r2, ip
 8000e1a:	3a08      	subs	r2, #8
 8000e1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e20:	db10      	blt.n	8000e44 <__aeabi_l2f+0x5c>
 8000e22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e34:	fa20 f202 	lsr.w	r2, r0, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f102 0220 	add.w	r2, r2, #32
 8000e48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e4c:	f1c2 0220 	rsb	r2, r2, #32
 8000e50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e54:	fa21 f202 	lsr.w	r2, r1, r2
 8000e58:	eb43 0002 	adc.w	r0, r3, r2
 8000e5c:	bf08      	it	eq
 8000e5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e62:	4770      	bx	lr

08000e64 <__aeabi_fmul>:
 8000e64:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e6c:	bf1e      	ittt	ne
 8000e6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e72:	ea92 0f0c 	teqne	r2, ip
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d06f      	beq.n	8000f5c <__aeabi_fmul+0xf8>
 8000e7c:	441a      	add	r2, r3
 8000e7e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e82:	0240      	lsls	r0, r0, #9
 8000e84:	bf18      	it	ne
 8000e86:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e8a:	d01e      	beq.n	8000eca <__aeabi_fmul+0x66>
 8000e8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e90:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e94:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e98:	fba0 3101 	umull	r3, r1, r0, r1
 8000e9c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ea4:	bf3e      	ittt	cc
 8000ea6:	0049      	lslcc	r1, r1, #1
 8000ea8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	ea40 0001 	orr.w	r0, r0, r1
 8000eb2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eb6:	2afd      	cmp	r2, #253	; 0xfd
 8000eb8:	d81d      	bhi.n	8000ef6 <__aeabi_fmul+0x92>
 8000eba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ebe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ec2:	bf08      	it	eq
 8000ec4:	f020 0001 	biceq.w	r0, r0, #1
 8000ec8:	4770      	bx	lr
 8000eca:	f090 0f00 	teq	r0, #0
 8000ece:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed2:	bf08      	it	eq
 8000ed4:	0249      	lsleq	r1, r1, #9
 8000ed6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eda:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ede:	3a7f      	subs	r2, #127	; 0x7f
 8000ee0:	bfc2      	ittt	gt
 8000ee2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eea:	4770      	bxgt	lr
 8000eec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	3a01      	subs	r2, #1
 8000ef6:	dc5d      	bgt.n	8000fb4 <__aeabi_fmul+0x150>
 8000ef8:	f112 0f19 	cmn.w	r2, #25
 8000efc:	bfdc      	itt	le
 8000efe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000f02:	4770      	bxle	lr
 8000f04:	f1c2 0200 	rsb	r2, r2, #0
 8000f08:	0041      	lsls	r1, r0, #1
 8000f0a:	fa21 f102 	lsr.w	r1, r1, r2
 8000f0e:	f1c2 0220 	rsb	r2, r2, #32
 8000f12:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f16:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f1a:	f140 0000 	adc.w	r0, r0, #0
 8000f1e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f22:	bf08      	it	eq
 8000f24:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f28:	4770      	bx	lr
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fmul+0xce>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fmul+0xe6>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e78f      	b.n	8000e7c <__aeabi_fmul+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	bf18      	it	ne
 8000f66:	ea93 0f0c 	teqne	r3, ip
 8000f6a:	d00a      	beq.n	8000f82 <__aeabi_fmul+0x11e>
 8000f6c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f70:	bf18      	it	ne
 8000f72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	d1d8      	bne.n	8000f2a <__aeabi_fmul+0xc6>
 8000f78:	ea80 0001 	eor.w	r0, r0, r1
 8000f7c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f80:	4770      	bx	lr
 8000f82:	f090 0f00 	teq	r0, #0
 8000f86:	bf17      	itett	ne
 8000f88:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f8c:	4608      	moveq	r0, r1
 8000f8e:	f091 0f00 	teqne	r1, #0
 8000f92:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f96:	d014      	beq.n	8000fc2 <__aeabi_fmul+0x15e>
 8000f98:	ea92 0f0c 	teq	r2, ip
 8000f9c:	d101      	bne.n	8000fa2 <__aeabi_fmul+0x13e>
 8000f9e:	0242      	lsls	r2, r0, #9
 8000fa0:	d10f      	bne.n	8000fc2 <__aeabi_fmul+0x15e>
 8000fa2:	ea93 0f0c 	teq	r3, ip
 8000fa6:	d103      	bne.n	8000fb0 <__aeabi_fmul+0x14c>
 8000fa8:	024b      	lsls	r3, r1, #9
 8000faa:	bf18      	it	ne
 8000fac:	4608      	movne	r0, r1
 8000fae:	d108      	bne.n	8000fc2 <__aeabi_fmul+0x15e>
 8000fb0:	ea80 0001 	eor.w	r0, r0, r1
 8000fb4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fc0:	4770      	bx	lr
 8000fc2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fc6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fca:	4770      	bx	lr

08000fcc <__aeabi_fdiv>:
 8000fcc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fd0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fd4:	bf1e      	ittt	ne
 8000fd6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fda:	ea92 0f0c 	teqne	r2, ip
 8000fde:	ea93 0f0c 	teqne	r3, ip
 8000fe2:	d069      	beq.n	80010b8 <__aeabi_fdiv+0xec>
 8000fe4:	eba2 0203 	sub.w	r2, r2, r3
 8000fe8:	ea80 0c01 	eor.w	ip, r0, r1
 8000fec:	0249      	lsls	r1, r1, #9
 8000fee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ff2:	d037      	beq.n	8001064 <__aeabi_fdiv+0x98>
 8000ff4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ffc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001000:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001004:	428b      	cmp	r3, r1
 8001006:	bf38      	it	cc
 8001008:	005b      	lslcc	r3, r3, #1
 800100a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800100e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001012:	428b      	cmp	r3, r1
 8001014:	bf24      	itt	cs
 8001016:	1a5b      	subcs	r3, r3, r1
 8001018:	ea40 000c 	orrcs.w	r0, r0, ip
 800101c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001020:	bf24      	itt	cs
 8001022:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001026:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800102a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800102e:	bf24      	itt	cs
 8001030:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001034:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001038:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800103c:	bf24      	itt	cs
 800103e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001042:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001046:	011b      	lsls	r3, r3, #4
 8001048:	bf18      	it	ne
 800104a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800104e:	d1e0      	bne.n	8001012 <__aeabi_fdiv+0x46>
 8001050:	2afd      	cmp	r2, #253	; 0xfd
 8001052:	f63f af50 	bhi.w	8000ef6 <__aeabi_fmul+0x92>
 8001056:	428b      	cmp	r3, r1
 8001058:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800105c:	bf08      	it	eq
 800105e:	f020 0001 	biceq.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001068:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800106c:	327f      	adds	r2, #127	; 0x7f
 800106e:	bfc2      	ittt	gt
 8001070:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001074:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001078:	4770      	bxgt	lr
 800107a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800107e:	f04f 0300 	mov.w	r3, #0
 8001082:	3a01      	subs	r2, #1
 8001084:	e737      	b.n	8000ef6 <__aeabi_fmul+0x92>
 8001086:	f092 0f00 	teq	r2, #0
 800108a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800108e:	bf02      	ittt	eq
 8001090:	0040      	lsleq	r0, r0, #1
 8001092:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001096:	3a01      	subeq	r2, #1
 8001098:	d0f9      	beq.n	800108e <__aeabi_fdiv+0xc2>
 800109a:	ea40 000c 	orr.w	r0, r0, ip
 800109e:	f093 0f00 	teq	r3, #0
 80010a2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80010a6:	bf02      	ittt	eq
 80010a8:	0049      	lsleq	r1, r1, #1
 80010aa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010ae:	3b01      	subeq	r3, #1
 80010b0:	d0f9      	beq.n	80010a6 <__aeabi_fdiv+0xda>
 80010b2:	ea41 010c 	orr.w	r1, r1, ip
 80010b6:	e795      	b.n	8000fe4 <__aeabi_fdiv+0x18>
 80010b8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010bc:	ea92 0f0c 	teq	r2, ip
 80010c0:	d108      	bne.n	80010d4 <__aeabi_fdiv+0x108>
 80010c2:	0242      	lsls	r2, r0, #9
 80010c4:	f47f af7d 	bne.w	8000fc2 <__aeabi_fmul+0x15e>
 80010c8:	ea93 0f0c 	teq	r3, ip
 80010cc:	f47f af70 	bne.w	8000fb0 <__aeabi_fmul+0x14c>
 80010d0:	4608      	mov	r0, r1
 80010d2:	e776      	b.n	8000fc2 <__aeabi_fmul+0x15e>
 80010d4:	ea93 0f0c 	teq	r3, ip
 80010d8:	d104      	bne.n	80010e4 <__aeabi_fdiv+0x118>
 80010da:	024b      	lsls	r3, r1, #9
 80010dc:	f43f af4c 	beq.w	8000f78 <__aeabi_fmul+0x114>
 80010e0:	4608      	mov	r0, r1
 80010e2:	e76e      	b.n	8000fc2 <__aeabi_fmul+0x15e>
 80010e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e8:	bf18      	it	ne
 80010ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010ee:	d1ca      	bne.n	8001086 <__aeabi_fdiv+0xba>
 80010f0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010f4:	f47f af5c 	bne.w	8000fb0 <__aeabi_fmul+0x14c>
 80010f8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010fc:	f47f af3c 	bne.w	8000f78 <__aeabi_fmul+0x114>
 8001100:	e75f      	b.n	8000fc2 <__aeabi_fmul+0x15e>
 8001102:	bf00      	nop

08001104 <__gesf2>:
 8001104:	f04f 3cff 	mov.w	ip, #4294967295
 8001108:	e006      	b.n	8001118 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__lesf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	e002      	b.n	8001118 <__cmpsf2+0x4>
 8001112:	bf00      	nop

08001114 <__cmpsf2>:
 8001114:	f04f 0c01 	mov.w	ip, #1
 8001118:	f84d cd04 	str.w	ip, [sp, #-4]!
 800111c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001120:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001124:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001128:	bf18      	it	ne
 800112a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800112e:	d011      	beq.n	8001154 <__cmpsf2+0x40>
 8001130:	b001      	add	sp, #4
 8001132:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001136:	bf18      	it	ne
 8001138:	ea90 0f01 	teqne	r0, r1
 800113c:	bf58      	it	pl
 800113e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001142:	bf88      	it	hi
 8001144:	17c8      	asrhi	r0, r1, #31
 8001146:	bf38      	it	cc
 8001148:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800114c:	bf18      	it	ne
 800114e:	f040 0001 	orrne.w	r0, r0, #1
 8001152:	4770      	bx	lr
 8001154:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001158:	d102      	bne.n	8001160 <__cmpsf2+0x4c>
 800115a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800115e:	d105      	bne.n	800116c <__cmpsf2+0x58>
 8001160:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001164:	d1e4      	bne.n	8001130 <__cmpsf2+0x1c>
 8001166:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800116a:	d0e1      	beq.n	8001130 <__cmpsf2+0x1c>
 800116c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop

08001174 <__aeabi_cfrcmple>:
 8001174:	4684      	mov	ip, r0
 8001176:	4608      	mov	r0, r1
 8001178:	4661      	mov	r1, ip
 800117a:	e7ff      	b.n	800117c <__aeabi_cfcmpeq>

0800117c <__aeabi_cfcmpeq>:
 800117c:	b50f      	push	{r0, r1, r2, r3, lr}
 800117e:	f7ff ffc9 	bl	8001114 <__cmpsf2>
 8001182:	2800      	cmp	r0, #0
 8001184:	bf48      	it	mi
 8001186:	f110 0f00 	cmnmi.w	r0, #0
 800118a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800118c <__aeabi_fcmpeq>:
 800118c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001190:	f7ff fff4 	bl	800117c <__aeabi_cfcmpeq>
 8001194:	bf0c      	ite	eq
 8001196:	2001      	moveq	r0, #1
 8001198:	2000      	movne	r0, #0
 800119a:	f85d fb08 	ldr.w	pc, [sp], #8
 800119e:	bf00      	nop

080011a0 <__aeabi_fcmplt>:
 80011a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a4:	f7ff ffea 	bl	800117c <__aeabi_cfcmpeq>
 80011a8:	bf34      	ite	cc
 80011aa:	2001      	movcc	r0, #1
 80011ac:	2000      	movcs	r0, #0
 80011ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80011b2:	bf00      	nop

080011b4 <__aeabi_fcmple>:
 80011b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b8:	f7ff ffe0 	bl	800117c <__aeabi_cfcmpeq>
 80011bc:	bf94      	ite	ls
 80011be:	2001      	movls	r0, #1
 80011c0:	2000      	movhi	r0, #0
 80011c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011c6:	bf00      	nop

080011c8 <__aeabi_fcmpge>:
 80011c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011cc:	f7ff ffd2 	bl	8001174 <__aeabi_cfrcmple>
 80011d0:	bf94      	ite	ls
 80011d2:	2001      	movls	r0, #1
 80011d4:	2000      	movhi	r0, #0
 80011d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011da:	bf00      	nop

080011dc <__aeabi_fcmpgt>:
 80011dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011e0:	f7ff ffc8 	bl	8001174 <__aeabi_cfrcmple>
 80011e4:	bf34      	ite	cc
 80011e6:	2001      	movcc	r0, #1
 80011e8:	2000      	movcs	r0, #0
 80011ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ee:	bf00      	nop

080011f0 <__aeabi_fcmpun>:
 80011f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011fc:	d102      	bne.n	8001204 <__aeabi_fcmpun+0x14>
 80011fe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001202:	d108      	bne.n	8001216 <__aeabi_fcmpun+0x26>
 8001204:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001208:	d102      	bne.n	8001210 <__aeabi_fcmpun+0x20>
 800120a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800120e:	d102      	bne.n	8001216 <__aeabi_fcmpun+0x26>
 8001210:	f04f 0000 	mov.w	r0, #0
 8001214:	4770      	bx	lr
 8001216:	f04f 0001 	mov.w	r0, #1
 800121a:	4770      	bx	lr

0800121c <__aeabi_uldivmod>:
 800121c:	b953      	cbnz	r3, 8001234 <__aeabi_uldivmod+0x18>
 800121e:	b94a      	cbnz	r2, 8001234 <__aeabi_uldivmod+0x18>
 8001220:	2900      	cmp	r1, #0
 8001222:	bf08      	it	eq
 8001224:	2800      	cmpeq	r0, #0
 8001226:	bf1c      	itt	ne
 8001228:	f04f 31ff 	movne.w	r1, #4294967295
 800122c:	f04f 30ff 	movne.w	r0, #4294967295
 8001230:	f000 b9ae 	b.w	8001590 <__aeabi_idiv0>
 8001234:	f1ad 0c08 	sub.w	ip, sp, #8
 8001238:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800123c:	f000 f83e 	bl	80012bc <__udivmoddi4>
 8001240:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001244:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001248:	b004      	add	sp, #16
 800124a:	4770      	bx	lr

0800124c <__aeabi_d2lz>:
 800124c:	b538      	push	{r3, r4, r5, lr}
 800124e:	4605      	mov	r5, r0
 8001250:	460c      	mov	r4, r1
 8001252:	2200      	movs	r2, #0
 8001254:	2300      	movs	r3, #0
 8001256:	4628      	mov	r0, r5
 8001258:	4621      	mov	r1, r4
 800125a:	f7ff fc1f 	bl	8000a9c <__aeabi_dcmplt>
 800125e:	b928      	cbnz	r0, 800126c <__aeabi_d2lz+0x20>
 8001260:	4628      	mov	r0, r5
 8001262:	4621      	mov	r1, r4
 8001264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001268:	f000 b80a 	b.w	8001280 <__aeabi_d2ulz>
 800126c:	4628      	mov	r0, r5
 800126e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001272:	f000 f805 	bl	8001280 <__aeabi_d2ulz>
 8001276:	4240      	negs	r0, r0
 8001278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800127c:	bd38      	pop	{r3, r4, r5, pc}
 800127e:	bf00      	nop

08001280 <__aeabi_d2ulz>:
 8001280:	b5d0      	push	{r4, r6, r7, lr}
 8001282:	2200      	movs	r2, #0
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <__aeabi_d2ulz+0x34>)
 8001286:	4606      	mov	r6, r0
 8001288:	460f      	mov	r7, r1
 800128a:	f7ff f995 	bl	80005b8 <__aeabi_dmul>
 800128e:	f7ff fc6b 	bl	8000b68 <__aeabi_d2uiz>
 8001292:	4604      	mov	r4, r0
 8001294:	f7ff f916 	bl	80004c4 <__aeabi_ui2d>
 8001298:	2200      	movs	r2, #0
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <__aeabi_d2ulz+0x38>)
 800129c:	f7ff f98c 	bl	80005b8 <__aeabi_dmul>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4630      	mov	r0, r6
 80012a6:	4639      	mov	r1, r7
 80012a8:	f7fe ffce 	bl	8000248 <__aeabi_dsub>
 80012ac:	f7ff fc5c 	bl	8000b68 <__aeabi_d2uiz>
 80012b0:	4621      	mov	r1, r4
 80012b2:	bdd0      	pop	{r4, r6, r7, pc}
 80012b4:	3df00000 	.word	0x3df00000
 80012b8:	41f00000 	.word	0x41f00000

080012bc <__udivmoddi4>:
 80012bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012c0:	9e08      	ldr	r6, [sp, #32]
 80012c2:	460d      	mov	r5, r1
 80012c4:	4604      	mov	r4, r0
 80012c6:	4688      	mov	r8, r1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d14d      	bne.n	8001368 <__udivmoddi4+0xac>
 80012cc:	428a      	cmp	r2, r1
 80012ce:	4694      	mov	ip, r2
 80012d0:	d968      	bls.n	80013a4 <__udivmoddi4+0xe8>
 80012d2:	fab2 f282 	clz	r2, r2
 80012d6:	b152      	cbz	r2, 80012ee <__udivmoddi4+0x32>
 80012d8:	fa01 f302 	lsl.w	r3, r1, r2
 80012dc:	f1c2 0120 	rsb	r1, r2, #32
 80012e0:	fa20 f101 	lsr.w	r1, r0, r1
 80012e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80012e8:	ea41 0803 	orr.w	r8, r1, r3
 80012ec:	4094      	lsls	r4, r2
 80012ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80012f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80012f6:	fa1f fe8c 	uxth.w	lr, ip
 80012fa:	fb01 8817 	mls	r8, r1, r7, r8
 80012fe:	fb07 f00e 	mul.w	r0, r7, lr
 8001302:	0c23      	lsrs	r3, r4, #16
 8001304:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001308:	4298      	cmp	r0, r3
 800130a:	d90a      	bls.n	8001322 <__udivmoddi4+0x66>
 800130c:	eb1c 0303 	adds.w	r3, ip, r3
 8001310:	f107 35ff 	add.w	r5, r7, #4294967295
 8001314:	f080 811e 	bcs.w	8001554 <__udivmoddi4+0x298>
 8001318:	4298      	cmp	r0, r3
 800131a:	f240 811b 	bls.w	8001554 <__udivmoddi4+0x298>
 800131e:	3f02      	subs	r7, #2
 8001320:	4463      	add	r3, ip
 8001322:	1a1b      	subs	r3, r3, r0
 8001324:	fbb3 f0f1 	udiv	r0, r3, r1
 8001328:	fb01 3310 	mls	r3, r1, r0, r3
 800132c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001330:	b2a4      	uxth	r4, r4
 8001332:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001336:	45a6      	cmp	lr, r4
 8001338:	d90a      	bls.n	8001350 <__udivmoddi4+0x94>
 800133a:	eb1c 0404 	adds.w	r4, ip, r4
 800133e:	f100 33ff 	add.w	r3, r0, #4294967295
 8001342:	f080 8109 	bcs.w	8001558 <__udivmoddi4+0x29c>
 8001346:	45a6      	cmp	lr, r4
 8001348:	f240 8106 	bls.w	8001558 <__udivmoddi4+0x29c>
 800134c:	4464      	add	r4, ip
 800134e:	3802      	subs	r0, #2
 8001350:	2100      	movs	r1, #0
 8001352:	eba4 040e 	sub.w	r4, r4, lr
 8001356:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800135a:	b11e      	cbz	r6, 8001364 <__udivmoddi4+0xa8>
 800135c:	2300      	movs	r3, #0
 800135e:	40d4      	lsrs	r4, r2
 8001360:	e9c6 4300 	strd	r4, r3, [r6]
 8001364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001368:	428b      	cmp	r3, r1
 800136a:	d908      	bls.n	800137e <__udivmoddi4+0xc2>
 800136c:	2e00      	cmp	r6, #0
 800136e:	f000 80ee 	beq.w	800154e <__udivmoddi4+0x292>
 8001372:	2100      	movs	r1, #0
 8001374:	e9c6 0500 	strd	r0, r5, [r6]
 8001378:	4608      	mov	r0, r1
 800137a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800137e:	fab3 f183 	clz	r1, r3
 8001382:	2900      	cmp	r1, #0
 8001384:	d14a      	bne.n	800141c <__udivmoddi4+0x160>
 8001386:	42ab      	cmp	r3, r5
 8001388:	d302      	bcc.n	8001390 <__udivmoddi4+0xd4>
 800138a:	4282      	cmp	r2, r0
 800138c:	f200 80fc 	bhi.w	8001588 <__udivmoddi4+0x2cc>
 8001390:	1a84      	subs	r4, r0, r2
 8001392:	eb65 0303 	sbc.w	r3, r5, r3
 8001396:	2001      	movs	r0, #1
 8001398:	4698      	mov	r8, r3
 800139a:	2e00      	cmp	r6, #0
 800139c:	d0e2      	beq.n	8001364 <__udivmoddi4+0xa8>
 800139e:	e9c6 4800 	strd	r4, r8, [r6]
 80013a2:	e7df      	b.n	8001364 <__udivmoddi4+0xa8>
 80013a4:	b902      	cbnz	r2, 80013a8 <__udivmoddi4+0xec>
 80013a6:	deff      	udf	#255	; 0xff
 80013a8:	fab2 f282 	clz	r2, r2
 80013ac:	2a00      	cmp	r2, #0
 80013ae:	f040 8091 	bne.w	80014d4 <__udivmoddi4+0x218>
 80013b2:	eba1 000c 	sub.w	r0, r1, ip
 80013b6:	2101      	movs	r1, #1
 80013b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013bc:	fa1f fe8c 	uxth.w	lr, ip
 80013c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80013c4:	fb07 0013 	mls	r0, r7, r3, r0
 80013c8:	0c25      	lsrs	r5, r4, #16
 80013ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80013ce:	fb0e f003 	mul.w	r0, lr, r3
 80013d2:	42a8      	cmp	r0, r5
 80013d4:	d908      	bls.n	80013e8 <__udivmoddi4+0x12c>
 80013d6:	eb1c 0505 	adds.w	r5, ip, r5
 80013da:	f103 38ff 	add.w	r8, r3, #4294967295
 80013de:	d202      	bcs.n	80013e6 <__udivmoddi4+0x12a>
 80013e0:	42a8      	cmp	r0, r5
 80013e2:	f200 80ce 	bhi.w	8001582 <__udivmoddi4+0x2c6>
 80013e6:	4643      	mov	r3, r8
 80013e8:	1a2d      	subs	r5, r5, r0
 80013ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80013ee:	fb07 5510 	mls	r5, r7, r0, r5
 80013f2:	fb0e fe00 	mul.w	lr, lr, r0
 80013f6:	b2a4      	uxth	r4, r4
 80013f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80013fc:	45a6      	cmp	lr, r4
 80013fe:	d908      	bls.n	8001412 <__udivmoddi4+0x156>
 8001400:	eb1c 0404 	adds.w	r4, ip, r4
 8001404:	f100 35ff 	add.w	r5, r0, #4294967295
 8001408:	d202      	bcs.n	8001410 <__udivmoddi4+0x154>
 800140a:	45a6      	cmp	lr, r4
 800140c:	f200 80b6 	bhi.w	800157c <__udivmoddi4+0x2c0>
 8001410:	4628      	mov	r0, r5
 8001412:	eba4 040e 	sub.w	r4, r4, lr
 8001416:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800141a:	e79e      	b.n	800135a <__udivmoddi4+0x9e>
 800141c:	f1c1 0720 	rsb	r7, r1, #32
 8001420:	408b      	lsls	r3, r1
 8001422:	fa22 fc07 	lsr.w	ip, r2, r7
 8001426:	ea4c 0c03 	orr.w	ip, ip, r3
 800142a:	fa25 fa07 	lsr.w	sl, r5, r7
 800142e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001432:	fbba f8f9 	udiv	r8, sl, r9
 8001436:	fa20 f307 	lsr.w	r3, r0, r7
 800143a:	fb09 aa18 	mls	sl, r9, r8, sl
 800143e:	408d      	lsls	r5, r1
 8001440:	fa1f fe8c 	uxth.w	lr, ip
 8001444:	431d      	orrs	r5, r3
 8001446:	fa00 f301 	lsl.w	r3, r0, r1
 800144a:	fb08 f00e 	mul.w	r0, r8, lr
 800144e:	0c2c      	lsrs	r4, r5, #16
 8001450:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001454:	42a0      	cmp	r0, r4
 8001456:	fa02 f201 	lsl.w	r2, r2, r1
 800145a:	d90b      	bls.n	8001474 <__udivmoddi4+0x1b8>
 800145c:	eb1c 0404 	adds.w	r4, ip, r4
 8001460:	f108 3aff 	add.w	sl, r8, #4294967295
 8001464:	f080 8088 	bcs.w	8001578 <__udivmoddi4+0x2bc>
 8001468:	42a0      	cmp	r0, r4
 800146a:	f240 8085 	bls.w	8001578 <__udivmoddi4+0x2bc>
 800146e:	f1a8 0802 	sub.w	r8, r8, #2
 8001472:	4464      	add	r4, ip
 8001474:	1a24      	subs	r4, r4, r0
 8001476:	fbb4 f0f9 	udiv	r0, r4, r9
 800147a:	fb09 4410 	mls	r4, r9, r0, r4
 800147e:	fb00 fe0e 	mul.w	lr, r0, lr
 8001482:	b2ad      	uxth	r5, r5
 8001484:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001488:	45a6      	cmp	lr, r4
 800148a:	d908      	bls.n	800149e <__udivmoddi4+0x1e2>
 800148c:	eb1c 0404 	adds.w	r4, ip, r4
 8001490:	f100 35ff 	add.w	r5, r0, #4294967295
 8001494:	d26c      	bcs.n	8001570 <__udivmoddi4+0x2b4>
 8001496:	45a6      	cmp	lr, r4
 8001498:	d96a      	bls.n	8001570 <__udivmoddi4+0x2b4>
 800149a:	3802      	subs	r0, #2
 800149c:	4464      	add	r4, ip
 800149e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80014a2:	fba0 9502 	umull	r9, r5, r0, r2
 80014a6:	eba4 040e 	sub.w	r4, r4, lr
 80014aa:	42ac      	cmp	r4, r5
 80014ac:	46c8      	mov	r8, r9
 80014ae:	46ae      	mov	lr, r5
 80014b0:	d356      	bcc.n	8001560 <__udivmoddi4+0x2a4>
 80014b2:	d053      	beq.n	800155c <__udivmoddi4+0x2a0>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d069      	beq.n	800158c <__udivmoddi4+0x2d0>
 80014b8:	ebb3 0208 	subs.w	r2, r3, r8
 80014bc:	eb64 040e 	sbc.w	r4, r4, lr
 80014c0:	fa22 f301 	lsr.w	r3, r2, r1
 80014c4:	fa04 f707 	lsl.w	r7, r4, r7
 80014c8:	431f      	orrs	r7, r3
 80014ca:	40cc      	lsrs	r4, r1
 80014cc:	e9c6 7400 	strd	r7, r4, [r6]
 80014d0:	2100      	movs	r1, #0
 80014d2:	e747      	b.n	8001364 <__udivmoddi4+0xa8>
 80014d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80014d8:	f1c2 0120 	rsb	r1, r2, #32
 80014dc:	fa25 f301 	lsr.w	r3, r5, r1
 80014e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80014e4:	fa20 f101 	lsr.w	r1, r0, r1
 80014e8:	4095      	lsls	r5, r2
 80014ea:	430d      	orrs	r5, r1
 80014ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80014f0:	fb07 3311 	mls	r3, r7, r1, r3
 80014f4:	fa1f fe8c 	uxth.w	lr, ip
 80014f8:	0c28      	lsrs	r0, r5, #16
 80014fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80014fe:	fb01 f30e 	mul.w	r3, r1, lr
 8001502:	4283      	cmp	r3, r0
 8001504:	fa04 f402 	lsl.w	r4, r4, r2
 8001508:	d908      	bls.n	800151c <__udivmoddi4+0x260>
 800150a:	eb1c 0000 	adds.w	r0, ip, r0
 800150e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001512:	d22f      	bcs.n	8001574 <__udivmoddi4+0x2b8>
 8001514:	4283      	cmp	r3, r0
 8001516:	d92d      	bls.n	8001574 <__udivmoddi4+0x2b8>
 8001518:	3902      	subs	r1, #2
 800151a:	4460      	add	r0, ip
 800151c:	1ac0      	subs	r0, r0, r3
 800151e:	fbb0 f3f7 	udiv	r3, r0, r7
 8001522:	fb07 0013 	mls	r0, r7, r3, r0
 8001526:	b2ad      	uxth	r5, r5
 8001528:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800152c:	fb03 f00e 	mul.w	r0, r3, lr
 8001530:	42a8      	cmp	r0, r5
 8001532:	d908      	bls.n	8001546 <__udivmoddi4+0x28a>
 8001534:	eb1c 0505 	adds.w	r5, ip, r5
 8001538:	f103 38ff 	add.w	r8, r3, #4294967295
 800153c:	d216      	bcs.n	800156c <__udivmoddi4+0x2b0>
 800153e:	42a8      	cmp	r0, r5
 8001540:	d914      	bls.n	800156c <__udivmoddi4+0x2b0>
 8001542:	3b02      	subs	r3, #2
 8001544:	4465      	add	r5, ip
 8001546:	1a28      	subs	r0, r5, r0
 8001548:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800154c:	e738      	b.n	80013c0 <__udivmoddi4+0x104>
 800154e:	4631      	mov	r1, r6
 8001550:	4630      	mov	r0, r6
 8001552:	e707      	b.n	8001364 <__udivmoddi4+0xa8>
 8001554:	462f      	mov	r7, r5
 8001556:	e6e4      	b.n	8001322 <__udivmoddi4+0x66>
 8001558:	4618      	mov	r0, r3
 800155a:	e6f9      	b.n	8001350 <__udivmoddi4+0x94>
 800155c:	454b      	cmp	r3, r9
 800155e:	d2a9      	bcs.n	80014b4 <__udivmoddi4+0x1f8>
 8001560:	ebb9 0802 	subs.w	r8, r9, r2
 8001564:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001568:	3801      	subs	r0, #1
 800156a:	e7a3      	b.n	80014b4 <__udivmoddi4+0x1f8>
 800156c:	4643      	mov	r3, r8
 800156e:	e7ea      	b.n	8001546 <__udivmoddi4+0x28a>
 8001570:	4628      	mov	r0, r5
 8001572:	e794      	b.n	800149e <__udivmoddi4+0x1e2>
 8001574:	4641      	mov	r1, r8
 8001576:	e7d1      	b.n	800151c <__udivmoddi4+0x260>
 8001578:	46d0      	mov	r8, sl
 800157a:	e77b      	b.n	8001474 <__udivmoddi4+0x1b8>
 800157c:	4464      	add	r4, ip
 800157e:	3802      	subs	r0, #2
 8001580:	e747      	b.n	8001412 <__udivmoddi4+0x156>
 8001582:	3b02      	subs	r3, #2
 8001584:	4465      	add	r5, ip
 8001586:	e72f      	b.n	80013e8 <__udivmoddi4+0x12c>
 8001588:	4608      	mov	r0, r1
 800158a:	e706      	b.n	800139a <__udivmoddi4+0xde>
 800158c:	4631      	mov	r1, r6
 800158e:	e6e9      	b.n	8001364 <__udivmoddi4+0xa8>

08001590 <__aeabi_idiv0>:
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop

08001594 <uvp6_init>:
int (*uvp6_functions[UVP6_MSG_NUM_OF_FUNCTIONS])(uvp6* uvp6_obj,uint8_t* msg);
char*  uvp6_messages_strings[UVP6_MSG_NUM_OF_FUNCTIONS];
const char* uvp6_commands_strings[]={"$start:ACQ_CSCS_002H","$stop;\n","$stop;\n","$start:ACQ_CSCS_052L"};

void uvp6_init(uvp6* uvp6_obj,osMessageQId events_q_Handle)
{
 8001594:	b5b0      	push	{r4, r5, r7, lr}
 8001596:	b092      	sub	sp, #72	; 0x48
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
	uvp6_messages_init(uvp6_obj);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f9ec 	bl	800197c <uvp6_messages_init>

	uvp6_obj->power_status=UVP6_POWER_IS_UNKNOWN;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2202      	movs	r2, #2
 80015a8:	735a      	strb	r2, [r3, #13]

	//osMessageQDef(uvp6_events_q, 20, uint8_t);
	//uvp6_obj->events_q= osMessageCreate(osMessageQ(uvp6_events_q), NULL);

	uvp6_obj->events_q = events_q_Handle;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	609a      	str	r2, [r3, #8]

	osMessageQDef(uvp6_media_rx_q, 20, uint16_t);
 80015b0:	4b18      	ldr	r3, [pc, #96]	; (8001614 <uvp6_init+0x80>)
 80015b2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80015b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uvp6_obj->media_rx_messages_q= osMessageCreate(osMessageQ(uvp6_media_rx_q), NULL);
 80015bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f00c f836 	bl	800d634 <osMessageCreate>
 80015c8:	4602      	mov	r2, r0
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	601a      	str	r2, [r3, #0]

	osMessageQDef(uvp6_media_tx_q, 400, uint8_t);
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <uvp6_init+0x84>)
 80015d0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80015d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uvp6_obj->media_tx_q = osMessageCreate(osMessageQ(uvp6_media_tx_q), NULL);
 80015da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f00c f827 	bl	800d634 <osMessageCreate>
 80015e6:	4602      	mov	r2, r0
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	605a      	str	r2, [r3, #4]


	osThreadDef(uvp6_task, uvp6_loop, osPriorityNormal, 0, 512);
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <uvp6_init+0x88>)
 80015ee:	f107 040c 	add.w	r4, r7, #12
 80015f2:	461d      	mov	r5, r3
 80015f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(uvp6_task), uvp6_obj);
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	4618      	mov	r0, r3
 8001608:	f00b fefd 	bl	800d406 <osThreadCreate>
}
 800160c:	bf00      	nop
 800160e:	3748      	adds	r7, #72	; 0x48
 8001610:	46bd      	mov	sp, r7
 8001612:	bdb0      	pop	{r4, r5, r7, pc}
 8001614:	08014ef4 	.word	0x08014ef4
 8001618:	08014f04 	.word	0x08014f04
 800161c:	08014f14 	.word	0x08014f14

08001620 <uvp6_media_process_byte>:

void uvp6_media_process_byte(uvp6* uvp6_obj,uint8_t rx_byte)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	70fb      	strb	r3, [r7, #3]
	if(uvp6_obj->media_status==UVP6_MEDIA_READY)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7b9b      	ldrb	r3, [r3, #14]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d160      	bne.n	80016f6 <uvp6_media_process_byte+0xd6>
	{
		uvp6_obj->rx_buffer[uvp6_obj->rx_buffer_indx]=rx_byte;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f8b3 38c1 	ldrh.w	r3, [r3, #2241]	; 0x8c1
 800163a:	b29b      	uxth	r3, r3
 800163c:	461a      	mov	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	78fa      	ldrb	r2, [r7, #3]
 8001644:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
		if(rx_byte=='\n')
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	2b0a      	cmp	r3, #10
 800164c:	d134      	bne.n	80016b8 <uvp6_media_process_byte+0x98>
		{
			uvp6_obj->rx_buffer[uvp6_obj->rx_buffer_indx]=0x00;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f8b3 38c1 	ldrh.w	r3, [r3, #2241]	; 0x8c1
 8001654:	b29b      	uxth	r3, r3
 8001656:	461a      	mov	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4413      	add	r3, r2
 800165c:	2200      	movs	r2, #0
 800165e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			osMessagePut(uvp6_obj->media_rx_messages_q,uvp6_obj->rx_buffer_new_string_indx,1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f8b3 38c3 	ldrh.w	r3, [r3, #2243]	; 0x8c3
 800166c:	b29b      	uxth	r3, r3
 800166e:	2201      	movs	r2, #1
 8001670:	4619      	mov	r1, r3
 8001672:	f00c f807 	bl	800d684 <osMessagePut>
			if(uvp6_obj->rx_buffer_indx>UVP6_RX_BUFFER_THR) uvp6_obj->rx_buffer_indx=0;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f8b3 38c1 	ldrh.w	r3, [r3, #2241]	; 0x8c1
 800167c:	b29b      	uxth	r3, r3
 800167e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001682:	4293      	cmp	r3, r2
 8001684:	d907      	bls.n	8001696 <uvp6_media_process_byte+0x76>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 28c1 	strb.w	r2, [r3, #2241]	; 0x8c1
 800168e:	2200      	movs	r2, #0
 8001690:	f883 28c2 	strb.w	r2, [r3, #2242]	; 0x8c2
 8001694:	e008      	b.n	80016a8 <uvp6_media_process_byte+0x88>
			else  uvp6_obj->rx_buffer_indx++;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f8b3 38c1 	ldrh.w	r3, [r3, #2241]	; 0x8c1
 800169c:	b29b      	uxth	r3, r3
 800169e:	3301      	adds	r3, #1
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f8a3 28c1 	strh.w	r2, [r3, #2241]	; 0x8c1
			uvp6_obj->rx_buffer_new_string_indx=uvp6_obj->rx_buffer_indx;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f8b3 38c1 	ldrh.w	r3, [r3, #2241]	; 0x8c1
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f8a3 28c3 	strh.w	r2, [r3, #2243]	; 0x8c3
 80016b6:	e008      	b.n	80016ca <uvp6_media_process_byte+0xaa>
		}
		else uvp6_obj->rx_buffer_indx++;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f8b3 38c1 	ldrh.w	r3, [r3, #2241]	; 0x8c1
 80016be:	b29b      	uxth	r3, r3
 80016c0:	3301      	adds	r3, #1
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f8a3 28c1 	strh.w	r2, [r3, #2241]	; 0x8c1
		if(uvp6_obj->rx_buffer_indx==UVP6_RX_BUFFER_SIZE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f8b3 38c1 	ldrh.w	r3, [r3, #2241]	; 0x8c1
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016d6:	d11c      	bne.n	8001712 <uvp6_media_process_byte+0xf2>
		{
			uvp6_obj->rx_buffer_indx=0;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 28c1 	strb.w	r2, [r3, #2241]	; 0x8c1
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 28c2 	strb.w	r2, [r3, #2242]	; 0x8c2
			uvp6_obj->rx_buffer_new_string_indx=uvp6_obj->rx_buffer_indx;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f8b3 38c1 	ldrh.w	r3, [r3, #2241]	; 0x8c1
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f8a3 28c3 	strh.w	r2, [r3, #2243]	; 0x8c3
	else
	{
		uvp6_obj->rx_buffer_indx=0;
		uvp6_obj->rx_buffer_new_string_indx=uvp6_obj->rx_buffer_indx;
	}
}
 80016f4:	e00d      	b.n	8001712 <uvp6_media_process_byte+0xf2>
		uvp6_obj->rx_buffer_indx=0;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 28c1 	strb.w	r2, [r3, #2241]	; 0x8c1
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 28c2 	strb.w	r2, [r3, #2242]	; 0x8c2
		uvp6_obj->rx_buffer_new_string_indx=uvp6_obj->rx_buffer_indx;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f8b3 38c1 	ldrh.w	r3, [r3, #2241]	; 0x8c1
 800170a:	b29a      	uxth	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f8a3 28c3 	strh.w	r2, [r3, #2243]	; 0x8c3
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <uvp6_loop>:

void uvp6_loop(uvp6* uvp6_obj)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 uint16_t msg_indx;
 for(;;)
 {
	if(xQueueReceive(uvp6_obj->media_rx_messages_q,&msg_indx,0))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f107 010a 	add.w	r1, r7, #10
 800172a:	2200      	movs	r2, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f00c fc6d 	bl	800e00c <xQueueReceive>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <uvp6_loop+0x30>
	{
		uint8_t* msg=uvp6_obj->rx_buffer+msg_indx;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	33c1      	adds	r3, #193	; 0xc1
 800173c:	897a      	ldrh	r2, [r7, #10]
 800173e:	4413      	add	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
		uvp6_parse_message(uvp6_obj,msg);
 8001742:	68f9      	ldr	r1, [r7, #12]
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f8c9 	bl	80018dc <uvp6_parse_message>
	}
	osDelay(1);
 800174a:	2001      	movs	r0, #1
 800174c:	f00b fea7 	bl	800d49e <osDelay>
	if(xQueueReceive(uvp6_obj->media_rx_messages_q,&msg_indx,0))
 8001750:	e7e7      	b.n	8001722 <uvp6_loop+0x8>

08001752 <uvp6_media_get_byte>:

}


uint8_t uvp6_media_get_byte(uvp6* uvp6_obj,uint8_t* tx_byte)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
	osEvent res=osMessageGet(uvp6_obj->media_tx_q,0);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6859      	ldr	r1, [r3, #4]
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	2200      	movs	r2, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f00b ffcc 	bl	800d704 <osMessageGet>
	if(res.status==osEventMessage)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b10      	cmp	r3, #16
 8001770:	d105      	bne.n	800177e <uvp6_media_get_byte+0x2c>
     {
		*tx_byte=res.value.v;
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	701a      	strb	r2, [r3, #0]
		return UVP6_F_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	e000      	b.n	8001780 <uvp6_media_get_byte+0x2e>
     }
   return UVP6_F_ERR;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <uvp6_send_cmd>:


void uvp6_send_cmd(uvp6* uvp6_obj,uint8_t cmd_id,void* arg)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b092      	sub	sp, #72	; 0x48
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	460b      	mov	r3, r1
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	72fb      	strb	r3, [r7, #11]
 char tmp_cmd[40];
 switch(cmd_id)
 8001796:	7afb      	ldrb	r3, [r7, #11]
 8001798:	2b03      	cmp	r3, #3
 800179a:	d041      	beq.n	8001820 <uvp6_send_cmd+0x98>
 800179c:	2b03      	cmp	r3, #3
 800179e:	f300 8094 	bgt.w	80018ca <uvp6_send_cmd+0x142>
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d002      	beq.n	80017ac <uvp6_send_cmd+0x24>
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d074      	beq.n	8001894 <uvp6_send_cmd+0x10c>
	   }

	 break;
 }

}
 80017aa:	e08e      	b.n	80018ca <uvp6_send_cmd+0x142>
       tmp_cmd[0]=0x00;
 80017ac:	2300      	movs	r3, #0
 80017ae:	753b      	strb	r3, [r7, #20]
       strcat(tmp_cmd,uvp6_commands_strings[UVP6_CMD_START_H_ACQ]);
 80017b0:	4b48      	ldr	r3, [pc, #288]	; (80018d4 <uvp6_send_cmd+0x14c>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4611      	mov	r1, r2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f00f feb1 	bl	8011522 <strcat>
       strcat(tmp_cmd,(char*)arg);
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f00f feab 	bl	8011522 <strcat>
       strcat(tmp_cmd,";\n");
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fd2d 	bl	8000230 <strlen>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461a      	mov	r2, r3
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4413      	add	r3, r2
 80017e0:	4a3d      	ldr	r2, [pc, #244]	; (80018d8 <uvp6_send_cmd+0x150>)
 80017e2:	8811      	ldrh	r1, [r2, #0]
 80017e4:	7892      	ldrb	r2, [r2, #2]
 80017e6:	8019      	strh	r1, [r3, #0]
 80017e8:	709a      	strb	r2, [r3, #2]
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	647b      	str	r3, [r7, #68]	; 0x44
 80017ee:	e00d      	b.n	800180c <uvp6_send_cmd+0x84>
  		   osMessagePut(uvp6_obj->media_tx_q,tmp_cmd[i],0);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6858      	ldr	r0, [r3, #4]
 80017f4:	f107 0214 	add.w	r2, r7, #20
 80017f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017fa:	4413      	add	r3, r2
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2200      	movs	r2, #0
 8001800:	4619      	mov	r1, r3
 8001802:	f00b ff3f 	bl	800d684 <osMessagePut>
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 8001806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001808:	3301      	adds	r3, #1
 800180a:	647b      	str	r3, [r7, #68]	; 0x44
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fd0d 	bl	8000230 <strlen>
 8001816:	4602      	mov	r2, r0
 8001818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800181a:	429a      	cmp	r2, r3
 800181c:	d8e8      	bhi.n	80017f0 <uvp6_send_cmd+0x68>
	 break;
 800181e:	e054      	b.n	80018ca <uvp6_send_cmd+0x142>
       tmp_cmd[0]=0x00;
 8001820:	2300      	movs	r3, #0
 8001822:	753b      	strb	r3, [r7, #20]
       strcat(tmp_cmd,uvp6_commands_strings[UVP6_CMD_START_L_ACQ]);
 8001824:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <uvp6_send_cmd+0x14c>)
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f00f fe77 	bl	8011522 <strcat>
       strcat(tmp_cmd,(char*)arg);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4618      	mov	r0, r3
 800183c:	f00f fe71 	bl	8011522 <strcat>
       strcat(tmp_cmd,";\n");
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fcf3 	bl	8000230 <strlen>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4413      	add	r3, r2
 8001854:	4a20      	ldr	r2, [pc, #128]	; (80018d8 <uvp6_send_cmd+0x150>)
 8001856:	8811      	ldrh	r1, [r2, #0]
 8001858:	7892      	ldrb	r2, [r2, #2]
 800185a:	8019      	strh	r1, [r3, #0]
 800185c:	709a      	strb	r2, [r3, #2]
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 800185e:	2300      	movs	r3, #0
 8001860:	643b      	str	r3, [r7, #64]	; 0x40
 8001862:	e00d      	b.n	8001880 <uvp6_send_cmd+0xf8>
  		   osMessagePut(uvp6_obj->media_tx_q,tmp_cmd[i],0);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6858      	ldr	r0, [r3, #4]
 8001868:	f107 0214 	add.w	r2, r7, #20
 800186c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800186e:	4413      	add	r3, r2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2200      	movs	r2, #0
 8001874:	4619      	mov	r1, r3
 8001876:	f00b ff05 	bl	800d684 <osMessagePut>
  	   for(int i=0;i<strlen(tmp_cmd);i++)
 800187a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800187c:	3301      	adds	r3, #1
 800187e:	643b      	str	r3, [r7, #64]	; 0x40
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fcd3 	bl	8000230 <strlen>
 800188a:	4602      	mov	r2, r0
 800188c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800188e:	429a      	cmp	r2, r3
 8001890:	d8e8      	bhi.n	8001864 <uvp6_send_cmd+0xdc>
	 break;
 8001892:	e01a      	b.n	80018ca <uvp6_send_cmd+0x142>
	   for(int i=0;i<strlen(uvp6_commands_strings[UVP6_CMD_STOP_ACQ]);i++)
 8001894:	2300      	movs	r3, #0
 8001896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001898:	e00d      	b.n	80018b6 <uvp6_send_cmd+0x12e>
		   osMessagePut(uvp6_obj->media_tx_q,*(uvp6_commands_strings[UVP6_CMD_STOP_ACQ]+i),0);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6858      	ldr	r0, [r3, #4]
 800189e:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <uvp6_send_cmd+0x14c>)
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018a4:	4413      	add	r3, r2
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2200      	movs	r2, #0
 80018aa:	4619      	mov	r1, r3
 80018ac:	f00b feea 	bl	800d684 <osMessagePut>
	   for(int i=0;i<strlen(uvp6_commands_strings[UVP6_CMD_STOP_ACQ]);i++)
 80018b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018b2:	3301      	adds	r3, #1
 80018b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <uvp6_send_cmd+0x14c>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fcb8 	bl	8000230 <strlen>
 80018c0:	4602      	mov	r2, r0
 80018c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d8e8      	bhi.n	800189a <uvp6_send_cmd+0x112>
	 break;
 80018c8:	bf00      	nop
}
 80018ca:	bf00      	nop
 80018cc:	3748      	adds	r7, #72	; 0x48
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000000 	.word	0x20000000
 80018d8:	08014f30 	.word	0x08014f30

080018dc <uvp6_parse_message>:
}



int uvp6_parse_message(uvp6* uvp6_obj,uint8_t* msg)
{
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg,":,;");//header
 80018e6:	4922      	ldr	r1, [pc, #136]	; (8001970 <uvp6_parse_message+0x94>)
 80018e8:	6838      	ldr	r0, [r7, #0]
 80018ea:	f010 fca3 	bl	8012234 <strtok>
 80018ee:	6138      	str	r0, [r7, #16]
	uint8_t* tmp_ptr;
	for(int i=0;i<UVP6_MSG_NUM_OF_FUNCTIONS;i++)
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	e033      	b.n	800195e <uvp6_parse_message+0x82>
	{
	   if(strlen(pch)==strlen(uvp6_messages_strings[i]))
 80018f6:	6938      	ldr	r0, [r7, #16]
 80018f8:	f7fe fc9a 	bl	8000230 <strlen>
 80018fc:	4604      	mov	r4, r0
 80018fe:	4a1d      	ldr	r2, [pc, #116]	; (8001974 <uvp6_parse_message+0x98>)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe fc92 	bl	8000230 <strlen>
 800190c:	4603      	mov	r3, r0
 800190e:	429c      	cmp	r4, r3
 8001910:	d122      	bne.n	8001958 <uvp6_parse_message+0x7c>
	   {
		  tmp_ptr=0;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
		  tmp_ptr=strstr(pch,uvp6_messages_strings[i]);
 8001916:	4a17      	ldr	r2, [pc, #92]	; (8001974 <uvp6_parse_message+0x98>)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191e:	4619      	mov	r1, r3
 8001920:	6938      	ldr	r0, [r7, #16]
 8001922:	f00f fe15 	bl	8011550 <strstr>
 8001926:	60f8      	str	r0, [r7, #12]
		  if(tmp_ptr)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d014      	beq.n	8001958 <uvp6_parse_message+0x7c>
		   {
			 if(uvp6_functions[i](uvp6_obj,msg+strlen(tmp_ptr)+1)==UVP6_F_OK) return UVP6_F_OK;
 800192e:	4a12      	ldr	r2, [pc, #72]	; (8001978 <uvp6_parse_message+0x9c>)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f7fe fc7a 	bl	8000230 <strlen>
 800193c:	4603      	mov	r3, r0
 800193e:	3301      	adds	r3, #1
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	4413      	add	r3, r2
 8001944:	4619      	mov	r1, r3
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	47a0      	blx	r4
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <uvp6_parse_message+0x78>
 8001950:	2300      	movs	r3, #0
 8001952:	e008      	b.n	8001966 <uvp6_parse_message+0x8a>
	         else return UVP6_F_ERR;
 8001954:	2301      	movs	r3, #1
 8001956:	e006      	b.n	8001966 <uvp6_parse_message+0x8a>
	for(int i=0;i<UVP6_MSG_NUM_OF_FUNCTIONS;i++)
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3301      	adds	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2b06      	cmp	r3, #6
 8001962:	ddc8      	ble.n	80018f6 <uvp6_parse_message+0x1a>
		   }
		}
	 }
	 return UVP6_F_ERR;
 8001964:	2301      	movs	r3, #1

}
 8001966:	4618      	mov	r0, r3
 8001968:	371c      	adds	r7, #28
 800196a:	46bd      	mov	sp, r7
 800196c:	bd90      	pop	{r4, r7, pc}
 800196e:	bf00      	nop
 8001970:	08014f34 	.word	0x08014f34
 8001974:	20000430 	.word	0x20000430
 8001978:	20000414 	.word	0x20000414

0800197c <uvp6_messages_init>:

void uvp6_messages_init(uvp6* uvp6_obj)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

	uvp6_functions[UVP6_MSG_HW_CONF] = UVP6_MSG_HW_CONF_f;
 8001984:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <uvp6_messages_init+0x68>)
 8001986:	4a18      	ldr	r2, [pc, #96]	; (80019e8 <uvp6_messages_init+0x6c>)
 8001988:	601a      	str	r2, [r3, #0]
	uvp6_functions[UVP6_MSG_BLACK_DATA] = UVP6_MSG_BLACK_DATA_f;
 800198a:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <uvp6_messages_init+0x68>)
 800198c:	4a17      	ldr	r2, [pc, #92]	; (80019ec <uvp6_messages_init+0x70>)
 800198e:	605a      	str	r2, [r3, #4]
	uvp6_functions[UVP6_MSG_LPM_DATA] = UVP6_MSG_LPM_DATA_f;
 8001990:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <uvp6_messages_init+0x68>)
 8001992:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <uvp6_messages_init+0x74>)
 8001994:	609a      	str	r2, [r3, #8]
	uvp6_functions[UVP6_MSG_ACQ_CONF] = UVP6_MSG_ACQ_CONF_f;
 8001996:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <uvp6_messages_init+0x68>)
 8001998:	4a16      	ldr	r2, [pc, #88]	; (80019f4 <uvp6_messages_init+0x78>)
 800199a:	60da      	str	r2, [r3, #12]
	uvp6_functions[UVP6_MSG_START_ACK] = UVP6_MSG_START_ACK_f;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <uvp6_messages_init+0x68>)
 800199e:	4a16      	ldr	r2, [pc, #88]	; (80019f8 <uvp6_messages_init+0x7c>)
 80019a0:	611a      	str	r2, [r3, #16]
	uvp6_functions[UVP6_MSG_START_ERR] = UVP6_MSG_START_ERR_f;
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <uvp6_messages_init+0x68>)
 80019a4:	4a15      	ldr	r2, [pc, #84]	; (80019fc <uvp6_messages_init+0x80>)
 80019a6:	615a      	str	r2, [r3, #20]
	uvp6_functions[UVP6_MSG_STOP_ACK] = UVP6_MSG_STOP_ACK_f;
 80019a8:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <uvp6_messages_init+0x68>)
 80019aa:	4a15      	ldr	r2, [pc, #84]	; (8001a00 <uvp6_messages_init+0x84>)
 80019ac:	619a      	str	r2, [r3, #24]

	uvp6_messages_strings[UVP6_MSG_HW_CONF] = "HW_CONF";
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <uvp6_messages_init+0x88>)
 80019b0:	4a15      	ldr	r2, [pc, #84]	; (8001a08 <uvp6_messages_init+0x8c>)
 80019b2:	601a      	str	r2, [r3, #0]
	uvp6_messages_strings[UVP6_MSG_BLACK_DATA] = "BLACK_DATA";
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <uvp6_messages_init+0x88>)
 80019b6:	4a15      	ldr	r2, [pc, #84]	; (8001a0c <uvp6_messages_init+0x90>)
 80019b8:	605a      	str	r2, [r3, #4]
	uvp6_messages_strings[UVP6_MSG_LPM_DATA] = "LPM_DATA";
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <uvp6_messages_init+0x88>)
 80019bc:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <uvp6_messages_init+0x94>)
 80019be:	609a      	str	r2, [r3, #8]
	uvp6_messages_strings[UVP6_MSG_ACQ_CONF] = "ACQ_CONF";
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <uvp6_messages_init+0x88>)
 80019c2:	4a14      	ldr	r2, [pc, #80]	; (8001a14 <uvp6_messages_init+0x98>)
 80019c4:	60da      	str	r2, [r3, #12]
	uvp6_messages_strings[UVP6_MSG_START_ACK] = "$startack";
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <uvp6_messages_init+0x88>)
 80019c8:	4a13      	ldr	r2, [pc, #76]	; (8001a18 <uvp6_messages_init+0x9c>)
 80019ca:	611a      	str	r2, [r3, #16]
	uvp6_messages_strings[UVP6_MSG_START_ERR] = "$starterr";
 80019cc:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <uvp6_messages_init+0x88>)
 80019ce:	4a13      	ldr	r2, [pc, #76]	; (8001a1c <uvp6_messages_init+0xa0>)
 80019d0:	615a      	str	r2, [r3, #20]
	uvp6_messages_strings[UVP6_MSG_STOP_ACK] = "$stopack";
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <uvp6_messages_init+0x88>)
 80019d4:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <uvp6_messages_init+0xa4>)
 80019d6:	619a      	str	r2, [r3, #24]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000414 	.word	0x20000414
 80019e8:	08001a25 	.word	0x08001a25
 80019ec:	08001a49 	.word	0x08001a49
 80019f0:	08001a61 	.word	0x08001a61
 80019f4:	08001b79 	.word	0x08001b79
 80019f8:	08001b9d 	.word	0x08001b9d
 80019fc:	08001bc1 	.word	0x08001bc1
 8001a00:	08001c09 	.word	0x08001c09
 8001a04:	20000430 	.word	0x20000430
 8001a08:	08014f38 	.word	0x08014f38
 8001a0c:	08014f40 	.word	0x08014f40
 8001a10:	08014f4c 	.word	0x08014f4c
 8001a14:	08014f58 	.word	0x08014f58
 8001a18:	08014f64 	.word	0x08014f64
 8001a1c:	08014f70 	.word	0x08014f70
 8001a20:	08014f7c 	.word	0x08014f7c

08001a24 <UVP6_MSG_HW_CONF_f>:


int UVP6_MSG_HW_CONF_f(uvp6* uvp6_obj,uint8_t* msg)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
   osMessagePut(uvp6_obj->events_q,UVP6_EVNT_BOOTED,1);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f00b fe23 	bl	800d684 <osMessagePut>
   return UVP6_F_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <UVP6_MSG_BLACK_DATA_f>:
int UVP6_MSG_BLACK_DATA_f(uvp6* uvp6_obj,uint8_t* msg)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
	return UVP6_F_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
	...

08001a60 <UVP6_MSG_LPM_DATA_f>:
int UVP6_MSG_LPM_DATA_f(uvp6* uvp6_obj,uint8_t* msg)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg,",");//pressure
 8001a6a:	4941      	ldr	r1, [pc, #260]	; (8001b70 <UVP6_MSG_LPM_DATA_f+0x110>)
 8001a6c:	6838      	ldr	r0, [r7, #0]
 8001a6e:	f010 fbe1 	bl	8012234 <strtok>
 8001a72:	60f8      	str	r0, [r7, #12]
	uvp6_obj->lpm_data.pressure=strtof(pch,NULL);
 8001a74:	2100      	movs	r1, #0
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f010 fb8a 	bl	8012190 <strtof>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f8c3 200f 	str.w	r2, [r3, #15]
	pch = strtok (NULL,",");//date
 8001a84:	493a      	ldr	r1, [pc, #232]	; (8001b70 <UVP6_MSG_LPM_DATA_f+0x110>)
 8001a86:	2000      	movs	r0, #0
 8001a88:	f010 fbd4 	bl	8012234 <strtok>
 8001a8c:	60f8      	str	r0, [r7, #12]
	strcpy(uvp6_obj->lpm_data.date,pch);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3313      	adds	r3, #19
 8001a92:	68f9      	ldr	r1, [r7, #12]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f00f fd53 	bl	8011540 <strcpy>
	pch = strtok (NULL,",");//time
 8001a9a:	4935      	ldr	r1, [pc, #212]	; (8001b70 <UVP6_MSG_LPM_DATA_f+0x110>)
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f010 fbc9 	bl	8012234 <strtok>
 8001aa2:	60f8      	str	r0, [r7, #12]
	strcpy(uvp6_obj->lpm_data.time,pch);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	331d      	adds	r3, #29
 8001aa8:	68f9      	ldr	r1, [r7, #12]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f00f fd48 	bl	8011540 <strcpy>
	pch = strtok (NULL,",");//num_of_images
 8001ab0:	492f      	ldr	r1, [pc, #188]	; (8001b70 <UVP6_MSG_LPM_DATA_f+0x110>)
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f010 fbbe 	bl	8012234 <strtok>
 8001ab8:	60f8      	str	r0, [r7, #12]
	uvp6_obj->lpm_data.number_of_images=strtoul(pch,NULL,0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f010 fd0c 	bl	80124dc <strtoul>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24
	pch = strtok (NULL,",");//temperature
 8001aca:	4929      	ldr	r1, [pc, #164]	; (8001b70 <UVP6_MSG_LPM_DATA_f+0x110>)
 8001acc:	2000      	movs	r0, #0
 8001ace:	f010 fbb1 	bl	8012234 <strtok>
 8001ad2:	60f8      	str	r0, [r7, #12]
	uvp6_obj->lpm_data.temperature=strtof(pch,NULL);
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f010 fb5a 	bl	8012190 <strtof>
 8001adc:	4602      	mov	r2, r0
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	629a      	str	r2, [r3, #40]	; 0x28
	//data
	for(int i=0;i<UVP6_NUM_OF_CATEGORIES;i++)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	e016      	b.n	8001b16 <UVP6_MSG_LPM_DATA_f+0xb6>
	{
		if(pch = strtok (NULL,","))//data i
 8001ae8:	4921      	ldr	r1, [pc, #132]	; (8001b70 <UVP6_MSG_LPM_DATA_f+0x110>)
 8001aea:	2000      	movs	r0, #0
 8001aec:	f010 fba2 	bl	8012234 <strtok>
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00b      	beq.n	8001b10 <UVP6_MSG_LPM_DATA_f+0xb0>
		{
		 uvp6_obj->lpm_data.data[i]=strtoul(pch,NULL,0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2100      	movs	r1, #0
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f010 fced 	bl	80124dc <strtoul>
 8001b02:	4601      	mov	r1, r0
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	3308      	adds	r3, #8
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	60d9      	str	r1, [r3, #12]
	for(int i=0;i<UVP6_NUM_OF_CATEGORIES;i++)
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	3301      	adds	r3, #1
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	2b11      	cmp	r3, #17
 8001b1a:	dde5      	ble.n	8001ae8 <UVP6_MSG_LPM_DATA_f+0x88>
		}

	}
	//grey levels
	for(int i=0;i<UVP6_NUM_OF_CATEGORIES;i++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	e016      	b.n	8001b50 <UVP6_MSG_LPM_DATA_f+0xf0>
	{
		if(pch = strtok (NULL,",;"))//grey level i
 8001b22:	4914      	ldr	r1, [pc, #80]	; (8001b74 <UVP6_MSG_LPM_DATA_f+0x114>)
 8001b24:	2000      	movs	r0, #0
 8001b26:	f010 fb85 	bl	8012234 <strtok>
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00b      	beq.n	8001b4a <UVP6_MSG_LPM_DATA_f+0xea>
		{
		 uvp6_obj->lpm_data.grey_levels[i]=strtoul(pch,NULL,0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f010 fcd0 	bl	80124dc <strtoul>
 8001b3c:	4601      	mov	r1, r0
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	331a      	adds	r3, #26
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	60d9      	str	r1, [r3, #12]
	for(int i=0;i<UVP6_NUM_OF_CATEGORIES;i++)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	2b11      	cmp	r3, #17
 8001b54:	dde5      	ble.n	8001b22 <UVP6_MSG_LPM_DATA_f+0xc2>
		}
	}

	osMessagePut(uvp6_obj->events_q,UVP6_EVNT_LPM_DATA_RCVD,1);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f240 11f5 	movw	r1, #501	; 0x1f5
 8001b60:	4618      	mov	r0, r3
 8001b62:	f00b fd8f 	bl	800d684 <osMessagePut>
	return UVP6_F_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	08014f88 	.word	0x08014f88
 8001b74:	08014f8c 	.word	0x08014f8c

08001b78 <UVP6_MSG_ACQ_CONF_f>:

int UVP6_MSG_ACQ_CONF_f(uvp6* uvp6_obj,uint8_t* msg)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
	osMessagePut(uvp6_obj->events_q,UVP6_EVNT_ACQ_CONF_RCVD,1);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f240 11f7 	movw	r1, #503	; 0x1f7
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f00b fd79 	bl	800d684 <osMessagePut>
	//uvp6_obj->status=UVP6_IDLE;
	return UVP6_F_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <UVP6_MSG_START_ACK_f>:


int UVP6_MSG_START_ACK_f(uvp6* uvp6_obj,uint8_t* msg)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
	osMessagePut(uvp6_obj->events_q,UVP6_EVNT_START_ACK_RCVD,1);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f00b fd67 	bl	800d684 <osMessagePut>
	return UVP6_F_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <UVP6_MSG_START_ERR_f>:

int UVP6_MSG_START_ERR_f(uvp6* uvp6_obj,uint8_t* msg)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg,";");//error num
 8001bca:	490e      	ldr	r1, [pc, #56]	; (8001c04 <UVP6_MSG_START_ERR_f+0x44>)
 8001bcc:	6838      	ldr	r0, [r7, #0]
 8001bce:	f010 fb31 	bl	8012234 <strtok>
 8001bd2:	60f8      	str	r0, [r7, #12]
	uvp6_obj->start_error=strtol(pch,NULL,10);
 8001bd4:	220a      	movs	r2, #10
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f010 fc03 	bl	80123e4 <strtol>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461a      	mov	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	osMessagePut(uvp6_obj->events_q,UVP6_EVNT_START_ERR_RCVD,1);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f240 11f9 	movw	r1, #505	; 0x1f9
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f00b fd46 	bl	800d684 <osMessagePut>
	return UVP6_F_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	08014f90 	.word	0x08014f90

08001c08 <UVP6_MSG_STOP_ACK_f>:

int UVP6_MSG_STOP_ACK_f(uvp6* uvp6_obj,uint8_t* msg)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
	osMessagePut(uvp6_obj->events_q,UVP6_EVNT_STOP_ACK_RCVD,1);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f00b fd31 	bl	800d684 <osMessagePut>
	return UVP6_F_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <disp_proc_get_event>:
#define  GLIDER_UART             huart5
extern UART_HandleTypeDef huart5;
extern UART_HandleTypeDef huart1;

F_RES disp_proc_get_event(proc_dispatcher* self_object,uint32_t* event)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
	osEvent res=osMessageGet(self_object->events_q_Handle,1);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	2201      	movs	r2, #1
 8001c42:	4618      	mov	r0, r3
 8001c44:	f00b fd5e 	bl	800d704 <osMessageGet>
	if(res.status==osEventMessage){
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2b10      	cmp	r3, #16
 8001c4c:	d104      	bne.n	8001c58 <disp_proc_get_event+0x2c>
		*event=res.value.v;
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	601a      	str	r2, [r3, #0]
		return F_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	e004      	b.n	8001c62 <disp_proc_get_event+0x36>
	}
	else  if(res.status==osEventTimeout)return F_TIMEOUT;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b40      	cmp	r3, #64	; 0x40
 8001c5c:	d101      	bne.n	8001c62 <disp_proc_get_event+0x36>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e7ff      	b.n	8001c62 <disp_proc_get_event+0x36>
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <disp_proc_send_event>:

F_RES disp_proc_send_event(proc_dispatcher* self_object,osMessageQId out_Q,uint32_t event)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b084      	sub	sp, #16
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	60f8      	str	r0, [r7, #12]
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
	if(osMessagePut(out_Q,(uint32_t)event,1))
 8001c76:	2201      	movs	r2, #1
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	68b8      	ldr	r0, [r7, #8]
 8001c7c:	f00b fd02 	bl	800d684 <osMessagePut>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <disp_proc_send_event+0x20>
	{
     return F_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e000      	b.n	8001c8c <disp_proc_send_event+0x22>
	}
	return F_ERR;
 8001c8a:	2301      	movs	r3, #1
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <disp_proc_init>:




void disp_proc_init(proc_dispatcher* self_object,osMessageQId workers_cmd_q_Handle,osMessageQId events_q_Handle)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
	self_object->workers_cmd_q_Handle=workers_cmd_q_Handle;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	self_object->events_q_Handle=events_q_Handle;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	fsm_init();
 8001cb0:	f001 fd40 	bl	8003734 <fsm_init>
}
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <disp_proc_init_func>:

void disp_proc_init_func(proc_dispatcher* self_object,uint32_t proc_ID,void* func_ptr,
		osMessageQId inQ, proc_queue_gen_flag in_gen_flag , void* proc_self_object,uint32_t events_num,uint32_t* evnt)
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	603b      	str	r3, [r7, #0]

	if(in_gen_flag==PROC_CREATE_NEW_Q){
 8001cca:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d113      	bne.n	8001cfa <disp_proc_init_func+0x3e>
		osMessageQDef(proc_func_in_q, DISP_PROC_Q_LEN, uint32_t);
 8001cd2:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <disp_proc_init_func+0xac>)
 8001cd4:	f107 0410 	add.w	r4, r7, #16
 8001cd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		self_object->processes[proc_ID].proc_arg.inQ_handle = osMessageCreate(osMessageQ(proc_func_in_q), NULL);
 8001cde:	f107 0310 	add.w	r3, r7, #16
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f00b fca5 	bl	800d634 <osMessageCreate>
 8001cea:	4601      	mov	r1, r0
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	015b      	lsls	r3, r3, #5
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3308      	adds	r3, #8
 8001cf6:	6019      	str	r1, [r3, #0]
 8001cf8:	e006      	b.n	8001d08 <disp_proc_init_func+0x4c>
	}
	else{
		self_object->processes[proc_ID].proc_arg.inQ_handle = inQ;
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	015b      	lsls	r3, r3, #5
 8001d00:	4413      	add	r3, r2
 8001d02:	3308      	adds	r3, #8
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	601a      	str	r2, [r3, #0]
	}

	self_object->processes[proc_ID].proc_arg.outQ_handle = self_object->events_q_Handle;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8001d0e:	68f9      	ldr	r1, [r7, #12]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	015b      	lsls	r3, r3, #5
 8001d14:	440b      	add	r3, r1
 8001d16:	330c      	adds	r3, #12
 8001d18:	601a      	str	r2, [r3, #0]

	self_object->processes[proc_ID].proc_arg.func_self_object=proc_self_object;
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	015b      	lsls	r3, r3, #5
 8001d20:	4413      	add	r3, r2
 8001d22:	3304      	adds	r3, #4
 8001d24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d26:	601a      	str	r2, [r3, #0]
	self_object->processes[proc_ID].proc_func_ptr=func_ptr;
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	68f9      	ldr	r1, [r7, #12]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	015b      	lsls	r3, r3, #5
 8001d30:	440b      	add	r3, r1
 8001d32:	601a      	str	r2, [r3, #0]
	self_object->processes[proc_ID].events.size=events_num;
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	015b      	lsls	r3, r3, #5
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3318      	adds	r3, #24
 8001d3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d40:	601a      	str	r2, [r3, #0]
	self_object->processes[proc_ID].events.evnt=evnt;
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	015b      	lsls	r3, r3, #5
 8001d48:	4413      	add	r3, r2
 8001d4a:	331c      	adds	r3, #28
 8001d4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d4e:	601a      	str	r2, [r3, #0]
	self_object->processes[proc_ID].state=PROC_STOPPED;
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	015b      	lsls	r3, r3, #5
 8001d56:	4413      	add	r3, r2
 8001d58:	3314      	adds	r3, #20
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
}
 8001d5e:	bf00      	nop
 8001d60:	3724      	adds	r7, #36	; 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd90      	pop	{r4, r7, pc}
 8001d66:	bf00      	nop
 8001d68:	08014f94 	.word	0x08014f94

08001d6c <disp_proc_start>:

F_RES  disp_proc_start(proc_dispatcher* self_object,uint32_t proc_ID,void* func_args)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
	if(self_object->processes[proc_ID].state!=PROC_STARTED&&self_object->processes[proc_ID].state!=PROC_START_PENDING){
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	015b      	lsls	r3, r3, #5
 8001d7e:	4413      	add	r3, r2
 8001d80:	3314      	adds	r3, #20
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d01f      	beq.n	8001dc8 <disp_proc_start+0x5c>
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	015b      	lsls	r3, r3, #5
 8001d8e:	4413      	add	r3, r2
 8001d90:	3314      	adds	r3, #20
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d017      	beq.n	8001dc8 <disp_proc_start+0x5c>
	  self_object->processes[proc_ID].proc_arg.func_args=func_args;
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	015b      	lsls	r3, r3, #5
 8001d9e:	4413      	add	r3, r2
 8001da0:	3310      	adds	r3, #16
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	601a      	str	r2, [r3, #0]
	  self_object->processes[proc_ID].state=PROC_START_PENDING;
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	015b      	lsls	r3, r3, #5
 8001dac:	4413      	add	r3, r2
 8001dae:	3314      	adds	r3, #20
 8001db0:	2202      	movs	r2, #2
 8001db2:	701a      	strb	r2, [r3, #0]
	  osMessagePut(self_object->workers_cmd_q_Handle,proc_ID,1);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8001dba:	2201      	movs	r2, #1
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f00b fc60 	bl	800d684 <osMessagePut>
	  return F_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e000      	b.n	8001dca <disp_proc_start+0x5e>
	}
	return F_ERR;
 8001dc8:	2301      	movs	r3, #1
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <disp_proc_execute>:

void disp_proc_execute(proc_dispatcher* self_object,uint32_t proc_ID)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
	self_object->processes[proc_ID].state=PROC_STARTED;
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	015b      	lsls	r3, r3, #5
 8001de2:	4413      	add	r3, r2
 8001de4:	3314      	adds	r3, #20
 8001de6:	2201      	movs	r2, #1
 8001de8:	701a      	strb	r2, [r3, #0]
	self_object->processes[proc_ID].proc_func_ptr(&self_object->processes[proc_ID].proc_arg);
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	015b      	lsls	r3, r3, #5
 8001df0:	4413      	add	r3, r2
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	0152      	lsls	r2, r2, #5
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	440a      	add	r2, r1
 8001dfc:	3204      	adds	r2, #4
 8001dfe:	4610      	mov	r0, r2
 8001e00:	4798      	blx	r3
    //move dependent event from in to out here
	self_object->processes[proc_ID].state=PROC_STOPPED;
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	015b      	lsls	r3, r3, #5
 8001e08:	4413      	add	r3, r2
 8001e0a:	3314      	adds	r3, #20
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <disp_proc_set_EA_table>:

void disp_proc_set_EA_table(proc_dispatcher* self_object,EA_table_t*  EA_table)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
	self_object->EA_table=EA_table;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <disp_proc_loop>:

extern UART_HandleTypeDef huart5;
void disp_proc_loop(proc_dispatcher* self_object)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b09e      	sub	sp, #120	; 0x78
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
    uint32_t last_event;
    char tt[100];

    for(;;)
    {
     if(disp_proc_get_event(self_object,&last_event)==F_OK){
 8001e3c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e40:	4619      	mov	r1, r3
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff fef2 	bl	8001c2c <disp_proc_get_event>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f6      	bne.n	8001e3c <disp_proc_loop+0x8>

      for(int i=0;i<DISP_NUM_OF_PROCESSES;i++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	677b      	str	r3, [r7, #116]	; 0x74
 8001e52:	e021      	b.n	8001e98 <disp_proc_loop+0x64>
      {
        if(self_object->processes[i].state==PROC_STARTED){
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e58:	015b      	lsls	r3, r3, #5
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3314      	adds	r3, #20
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d116      	bne.n	8001e92 <disp_proc_loop+0x5e>
        	if(disp_proc_check_event(last_event,&self_object->processes[i].events)==F_OK){
 8001e64:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e68:	015b      	lsls	r3, r3, #5
 8001e6a:	3318      	adds	r3, #24
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4413      	add	r3, r2
 8001e70:	4619      	mov	r1, r3
 8001e72:	f000 f836 	bl	8001ee2 <disp_proc_check_event>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10a      	bne.n	8001e92 <disp_proc_loop+0x5e>
        		disp_proc_send_event(self_object,self_object->processes[i].proc_arg.inQ_handle,last_event);
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e80:	015b      	lsls	r3, r3, #5
 8001e82:	4413      	add	r3, r2
 8001e84:	3308      	adds	r3, #8
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff feec 	bl	8001c6a <disp_proc_send_event>
      for(int i=0;i<DISP_NUM_OF_PROCESSES;i++)
 8001e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e94:	3301      	adds	r3, #1
 8001e96:	677b      	str	r3, [r7, #116]	; 0x74
 8001e98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e9a:	2b0b      	cmp	r3, #11
 8001e9c:	ddda      	ble.n	8001e54 <disp_proc_loop+0x20>
        }
      }
      //EA table check
      //sprintf(tt,"Event:%d\n",last_event);
      //HAL_UART_Transmit(&huart5,tt,strlen(tt),100);
      for(int y=0;y<(self_object->EA_table->num_of_events);y++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	673b      	str	r3, [r7, #112]	; 0x70
 8001ea2:	e016      	b.n	8001ed2 <disp_proc_loop+0x9e>
      {
          //sprintf(tt,"Event:%d\n",self_object->EA_table->EAT[y].event);
          //HAL_UART_Transmit(&huart5,tt,strlen(tt),100);
    	  if(last_event==self_object->EA_table->EAT[y].event) {
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d108      	bne.n	8001ecc <disp_proc_loop+0x98>
    		  self_object->EA_table->EAT[y].action();
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4798      	blx	r3
      for(int y=0;y<(self_object->EA_table->num_of_events);y++)
 8001ecc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ece:	3301      	adds	r3, #1
 8001ed0:	673b      	str	r3, [r7, #112]	; 0x70
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d8e1      	bhi.n	8001ea4 <disp_proc_loop+0x70>
     if(disp_proc_get_event(self_object,&last_event)==F_OK){
 8001ee0:	e7ac      	b.n	8001e3c <disp_proc_loop+0x8>

08001ee2 <disp_proc_check_event>:
     }
    }
}

F_RES disp_proc_check_event(uint32_t event,proc_events_t* events)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	6039      	str	r1, [r7, #0]
	for(int i=0;i<events->size;i++){
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	e00d      	b.n	8001f0e <disp_proc_check_event+0x2c>
		if(events->evnt[i]==event) return F_OK;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d101      	bne.n	8001f08 <disp_proc_check_event+0x26>
 8001f04:	2300      	movs	r3, #0
 8001f06:	e008      	b.n	8001f1a <disp_proc_check_event+0x38>
	for(int i=0;i<events->size;i++){
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d8ec      	bhi.n	8001ef2 <disp_proc_check_event+0x10>
	}
	return F_ERR;
 8001f18:	2301      	movs	r3, #1
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <sd_storage_disk_init>:
#include "diskio.h"

extern ss_pp sd_cards_ss[SD_STORAGE_NUM_SLOTS];

F_RES sd_storage_disk_init(FATFS* fs,char* path)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
	if(f_mount(fs,path,1)==FR_OK) return F_OK;
 8001f2e:	2201      	movs	r2, #1
 8001f30:	6839      	ldr	r1, [r7, #0]
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f00a f89a 	bl	800c06c <f_mount>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <sd_storage_disk_init+0x1e>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e000      	b.n	8001f44 <sd_storage_disk_init+0x20>
	else return F_ERR;
 8001f42:	2301      	movs	r3, #1
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <sd_storage_init>:

F_RES sd_storage_init(sd_storage_t* self_object,osSemaphoreId microsd_media_sem)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08c      	sub	sp, #48	; 0x30
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  self_object->microsd_media_sem=microsd_media_sem;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  char tt[10];
  FRESULT res;
  DWORD fre_clust, fre_sect, tot_sect;
  FATFS*  fs;
  self_object->active_disk_indx=0;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
  self_object->num_of_discs=0;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
  self_object->status=STORAGE_NOT_INITTIALIZED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 224d 	strb.w	r2, [r3, #589]	; 0x24d

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8001f76:	2300      	movs	r3, #0
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f7a:	e093      	b.n	80020a4 <sd_storage_init+0x158>
  {
   sd_cards_ss[i].Stat=STA_NOINIT;
 8001f7c:	495e      	ldr	r1, [pc, #376]	; (80020f8 <sd_storage_init+0x1ac>)
 8001f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f80:	4613      	mov	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	3309      	adds	r3, #9
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
   self_object->disks[i].fs.fs_type=0;
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f94:	f44f 7111 	mov.w	r1, #580	; 0x244
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
   sprintf(tt,"%d:",i);
 8001fa2:	f107 0314 	add.w	r3, r7, #20
 8001fa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fa8:	4954      	ldr	r1, [pc, #336]	; (80020fc <sd_storage_init+0x1b0>)
 8001faa:	4618      	mov	r0, r3
 8001fac:	f00f fa56 	bl	801145c <siprintf>
   if(sd_storage_disk_init(&self_object->disks[i].fs,tt)==F_OK){
 8001fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb2:	f44f 7211 	mov.w	r2, #580	; 0x244
 8001fb6:	fb02 f303 	mul.w	r3, r2, r3
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f107 0214 	add.w	r2, r7, #20
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ffad 	bl	8001f24 <sd_storage_disk_init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d15b      	bne.n	8002088 <sd_storage_init+0x13c>
		  self_object->disks[i].status=DISK_PRESENT;
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd4:	f44f 7111 	mov.w	r1, #580	; 0x244
 8001fd8:	fb01 f303 	mul.w	r3, r1, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
		  self_object->num_of_discs++;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 324c 	ldrb.w	r3, [r3, #588]	; 0x24c
 8001fec:	3301      	adds	r3, #1
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
  		  if(f_getfree(tt, &fre_clust, &fs)==FR_OK){
 8001ff6:	f107 020c 	add.w	r2, r7, #12
 8001ffa:	f107 0110 	add.w	r1, r7, #16
 8001ffe:	f107 0314 	add.w	r3, r7, #20
 8002002:	4618      	mov	r0, r3
 8002004:	f00a ffaf 	bl	800cf66 <f_getfree>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d147      	bne.n	800209e <sd_storage_init+0x152>
		    tot_sect = (self_object->disks[i].fs.n_fatent - 2) * self_object->disks[i].fs.csize;
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002012:	f44f 7111 	mov.w	r1, #580	; 0x244
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	4413      	add	r3, r2
 800201c:	331c      	adds	r3, #28
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3b02      	subs	r3, #2
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002026:	f44f 7011 	mov.w	r0, #580	; 0x244
 800202a:	fb00 f202 	mul.w	r2, r0, r2
 800202e:	440a      	add	r2, r1
 8002030:	320a      	adds	r2, #10
 8002032:	8812      	ldrh	r2, [r2, #0]
 8002034:	fb02 f303 	mul.w	r3, r2, r3
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
			fre_sect = fre_clust * self_object->disks[i].fs.csize;
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203e:	f44f 7111 	mov.w	r1, #580	; 0x244
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	4413      	add	r3, r2
 8002048:	330a      	adds	r3, #10
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	fb02 f303 	mul.w	r3, r2, r3
 8002054:	623b      	str	r3, [r7, #32]
			self_object->disks[i].size=tot_sect/2;
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	085a      	lsrs	r2, r3, #1
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205e:	f44f 7011 	mov.w	r0, #580	; 0x244
 8002062:	fb00 f303 	mul.w	r3, r0, r3
 8002066:	440b      	add	r3, r1
 8002068:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800206c:	601a      	str	r2, [r3, #0]
			self_object->disks[i].free_space=fre_sect/2;
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	085a      	lsrs	r2, r3, #1
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002076:	f44f 7011 	mov.w	r0, #580	; 0x244
 800207a:	fb00 f303 	mul.w	r3, r0, r3
 800207e:	440b      	add	r3, r1
 8002080:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	e00a      	b.n	800209e <sd_storage_init+0x152>
		  }
   }
   else self_object->disks[i].status=DISK_ABSENT;
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208c:	f44f 7111 	mov.w	r1, #580	; 0x244
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	4413      	add	r3, r2
 8002096:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 800209e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a0:	3301      	adds	r3, #1
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f77f af68 	ble.w	8001f7c <sd_storage_init+0x30>
  }

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 80020ac:	2300      	movs	r3, #0
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80020b0:	e019      	b.n	80020e6 <sd_storage_init+0x19a>
  {
   if(self_object->disks[i].status==DISK_PRESENT){
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b6:	f44f 7111 	mov.w	r1, #580	; 0x244
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	4413      	add	r3, r2
 80020c0:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10a      	bne.n	80020e0 <sd_storage_init+0x194>
	   self_object->active_disk_indx=i;
 80020ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	   self_object->status=STORAGE_INITTIALIZED;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 224d 	strb.w	r2, [r3, #589]	; 0x24d
	   return F_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	e006      	b.n	80020ee <sd_storage_init+0x1a2>
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 80020e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e2:	3301      	adds	r3, #1
 80020e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80020e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	dde2      	ble.n	80020b2 <sd_storage_init+0x166>
   }
  }
  return F_ERR;
 80020ec:	2301      	movs	r3, #1
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3730      	adds	r7, #48	; 0x30
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200025d8 	.word	0x200025d8
 80020fc:	08014fa4 	.word	0x08014fa4

08002100 <sd_storage_link_ss>:

F_RES sd_storage_link_ss(sd_storage_t* self_object,uint8_t disk_num, uint16_t sd_ss_pin,GPIO_TypeDef* sd_ss_port)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	607b      	str	r3, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	72fb      	strb	r3, [r7, #11]
 800210e:	4613      	mov	r3, r2
 8002110:	813b      	strh	r3, [r7, #8]
	  sd_cards_ss[disk_num].sd_ss_pin=sd_ss_pin;
 8002112:	7afa      	ldrb	r2, [r7, #11]
 8002114:	4916      	ldr	r1, [pc, #88]	; (8002170 <sd_storage_link_ss+0x70>)
 8002116:	4613      	mov	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	893a      	ldrh	r2, [r7, #8]
 8002122:	801a      	strh	r2, [r3, #0]
	  sd_cards_ss[disk_num].sd_ss_port=sd_ss_port;
 8002124:	7afa      	ldrb	r2, [r7, #11]
 8002126:	4912      	ldr	r1, [pc, #72]	; (8002170 <sd_storage_link_ss+0x70>)
 8002128:	4613      	mov	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	3304      	adds	r3, #4
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	601a      	str	r2, [r3, #0]
	  sd_cards_ss[disk_num].Stat=STA_NOINIT;
 8002138:	7afa      	ldrb	r2, [r7, #11]
 800213a:	490d      	ldr	r1, [pc, #52]	; (8002170 <sd_storage_link_ss+0x70>)
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	3309      	adds	r3, #9
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
	  if(sd_ss_pin!=NULL&&sd_ss_port!=NULL) HAL_GPIO_WritePin(sd_ss_port, sd_ss_pin, GPIO_PIN_SET);
 800214c:	893b      	ldrh	r3, [r7, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d008      	beq.n	8002164 <sd_storage_link_ss+0x64>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <sd_storage_link_ss+0x64>
 8002158:	893b      	ldrh	r3, [r7, #8]
 800215a:	2201      	movs	r2, #1
 800215c:	4619      	mov	r1, r3
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f004 f892 	bl	8006288 <HAL_GPIO_WritePin>
	  return F_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200025d8 	.word	0x200025d8

08002174 <read_raw_data_crc16>:

F_RES read_raw_data_crc16(sd_storage_t* self_object,uint8_t* data,uint32_t size,char* filename)
{
 8002174:	b590      	push	{r4, r7, lr}
 8002176:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 800217a:	af00      	add	r7, sp, #0
 800217c:	f507 7426 	add.w	r4, r7, #664	; 0x298
 8002180:	f5a4 7423 	sub.w	r4, r4, #652	; 0x28c
 8002184:	6020      	str	r0, [r4, #0]
 8002186:	f507 7026 	add.w	r0, r7, #664	; 0x298
 800218a:	f5a0 7024 	sub.w	r0, r0, #656	; 0x290
 800218e:	6001      	str	r1, [r0, #0]
 8002190:	f507 7126 	add.w	r1, r7, #664	; 0x298
 8002194:	f5a1 7125 	sub.w	r1, r1, #660	; 0x294
 8002198:	600a      	str	r2, [r1, #0]
 800219a:	f507 7226 	add.w	r2, r7, #664	; 0x298
 800219e:	f5a2 7226 	sub.w	r2, r2, #664	; 0x298
 80021a2:	6013      	str	r3, [r2, #0]
	FIL data_file;
	int16_t CRC16_from_disk;
	uint32_t bytes_readed;
	char tmp_str[SD_FILENAME_LEN+2];
	osSemaphoreWait(self_object->microsd_media_sem, osWaitForever);
 80021a4:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80021a8:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 80021b2:	f04f 31ff 	mov.w	r1, #4294967295
 80021b6:	4618      	mov	r0, r3
 80021b8:	f00b f9b8 	bl	800d52c <osSemaphoreWait>
	sprintf(tmp_str,"%u:%s",(unsigned int)self_object->active_disk_indx,filename);
 80021bc:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80021c0:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 80021ca:	461a      	mov	r2, r3
 80021cc:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80021d0:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80021d4:	f107 0010 	add.w	r0, r7, #16
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4953      	ldr	r1, [pc, #332]	; (8002328 <read_raw_data_crc16+0x1b4>)
 80021dc:	f00f f93e 	bl	801145c <siprintf>
	if(f_open(&data_file,tmp_str,FA_READ)==FR_OK){
 80021e0:	f107 0110 	add.w	r1, r7, #16
 80021e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021e8:	2201      	movs	r2, #1
 80021ea:	4618      	mov	r0, r3
 80021ec:	f009 ff84 	bl	800c0f8 <f_open>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 8087 	bne.w	8002306 <read_raw_data_crc16+0x192>
	  if(f_read(&data_file,(uint8_t*)data,size,(UINT*)&bytes_readed)==FR_OK){
 80021f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021fc:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8002200:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 8002204:	f507 7126 	add.w	r1, r7, #664	; 0x298
 8002208:	f5a1 7124 	sub.w	r1, r1, #656	; 0x290
 800220c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	6809      	ldr	r1, [r1, #0]
 8002214:	f00a fa31 	bl	800c67a <f_read>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d167      	bne.n	80022ee <read_raw_data_crc16+0x17a>
	   if(bytes_readed!=size){
 800221e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002222:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f507 7226 	add.w	r2, r7, #664	; 0x298
 800222c:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d010      	beq.n	8002258 <read_raw_data_crc16+0xe4>
		   f_close(&data_file);
 8002236:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800223a:	4618      	mov	r0, r3
 800223c:	f00a fe69 	bl	800cf12 <f_close>
		   osSemaphoreRelease(self_object->microsd_media_sem);
 8002240:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002244:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800224e:	4618      	mov	r0, r3
 8002250:	f00b f9ba 	bl	800d5c8 <osSemaphoreRelease>
		   return F_ERR;
 8002254:	2301      	movs	r3, #1
 8002256:	e061      	b.n	800231c <read_raw_data_crc16+0x1a8>
	   }
	   if(f_read(&data_file,(uint8_t*)&CRC16_from_disk,2,(UINT*)&bytes_readed)==FR_OK) f_close(&data_file);
 8002258:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800225c:	f107 0136 	add.w	r1, r7, #54	; 0x36
 8002260:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002264:	2202      	movs	r2, #2
 8002266:	f00a fa08 	bl	800c67a <f_read>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d104      	bne.n	800227a <read_raw_data_crc16+0x106>
 8002270:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002274:	4618      	mov	r0, r3
 8002276:	f00a fe4c 	bl	800cf12 <f_close>
	   if(bytes_readed!=2)return F_ERR;
 800227a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800227e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d001      	beq.n	800228c <read_raw_data_crc16+0x118>
 8002288:	2301      	movs	r3, #1
 800228a:	e047      	b.n	800231c <read_raw_data_crc16+0x1a8>
	   int16_t CRC16_calculated=usMBCRC16((uint8_t*)data,size);
 800228c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002290:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8002294:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002298:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800229c:	6811      	ldr	r1, [r2, #0]
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	f001 ff52 	bl	8004148 <usMBCRC16>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f8a7 3296 	strh.w	r3, [r7, #662]	; 0x296
	   if(CRC16_calculated==CRC16_from_disk) {
 80022aa:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80022ae:	f2a3 2362 	subw	r3, r3, #610	; 0x262
 80022b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022b6:	f9b7 2296 	ldrsh.w	r2, [r7, #662]	; 0x296
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d10b      	bne.n	80022d6 <read_raw_data_crc16+0x162>
		  osSemaphoreRelease(self_object->microsd_media_sem);
 80022be:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80022c2:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 80022cc:	4618      	mov	r0, r3
 80022ce:	f00b f97b 	bl	800d5c8 <osSemaphoreRelease>
		  return F_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e022      	b.n	800231c <read_raw_data_crc16+0x1a8>
	   }
	   osSemaphoreRelease(self_object->microsd_media_sem);
 80022d6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80022da:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 80022e4:	4618      	mov	r0, r3
 80022e6:	f00b f96f 	bl	800d5c8 <osSemaphoreRelease>
	   return F_ERR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e016      	b.n	800231c <read_raw_data_crc16+0x1a8>
	  }
	  osSemaphoreRelease(self_object->microsd_media_sem);
 80022ee:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80022f2:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 80022fc:	4618      	mov	r0, r3
 80022fe:	f00b f963 	bl	800d5c8 <osSemaphoreRelease>
	  return F_ERR;
 8002302:	2301      	movs	r3, #1
 8002304:	e00a      	b.n	800231c <read_raw_data_crc16+0x1a8>
	}
	osSemaphoreRelease(self_object->microsd_media_sem);
 8002306:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800230a:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002314:	4618      	mov	r0, r3
 8002316:	f00b f957 	bl	800d5c8 <osSemaphoreRelease>
	return F_ERR;
 800231a:	2301      	movs	r3, #1
}
 800231c:	4618      	mov	r0, r3
 800231e:	f507 7727 	add.w	r7, r7, #668	; 0x29c
 8002322:	46bd      	mov	sp, r7
 8002324:	bd90      	pop	{r4, r7, pc}
 8002326:	bf00      	nop
 8002328:	08014fa8 	.word	0x08014fa8

0800232c <save_raw_data_crc16>:

F_RES save_raw_data_crc16(sd_storage_t* self_object,uint8_t* data,uint32_t size,char* filename)
{
 800232c:	b590      	push	{r4, r7, lr}
 800232e:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 8002332:	af00      	add	r7, sp, #0
 8002334:	f507 7426 	add.w	r4, r7, #664	; 0x298
 8002338:	f5a4 7423 	sub.w	r4, r4, #652	; 0x28c
 800233c:	6020      	str	r0, [r4, #0]
 800233e:	f507 7026 	add.w	r0, r7, #664	; 0x298
 8002342:	f5a0 7024 	sub.w	r0, r0, #656	; 0x290
 8002346:	6001      	str	r1, [r0, #0]
 8002348:	f507 7126 	add.w	r1, r7, #664	; 0x298
 800234c:	f5a1 7125 	sub.w	r1, r1, #660	; 0x294
 8002350:	600a      	str	r2, [r1, #0]
 8002352:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8002356:	f5a2 7226 	sub.w	r2, r2, #664	; 0x298
 800235a:	6013      	str	r3, [r2, #0]
	uint32_t byteswritten;
	FIL data_file;
	char tmp_str[SD_FILENAME_LEN+2];
	osSemaphoreWait(self_object->microsd_media_sem, osWaitForever);
 800235c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002360:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800236a:	f04f 31ff 	mov.w	r1, #4294967295
 800236e:	4618      	mov	r0, r3
 8002370:	f00b f8dc 	bl	800d52c <osSemaphoreWait>
	sprintf(tmp_str,"%u:%s",(unsigned int)self_object->active_disk_indx,filename);
 8002374:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002378:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8002382:	461a      	mov	r2, r3
 8002384:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002388:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800238c:	f107 0018 	add.w	r0, r7, #24
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4943      	ldr	r1, [pc, #268]	; (80024a0 <save_raw_data_crc16+0x174>)
 8002394:	f00f f862 	bl	801145c <siprintf>

	if(f_open(&data_file,tmp_str,FA_CREATE_ALWAYS|FA_WRITE)==FR_OK){
 8002398:	f107 0118 	add.w	r1, r7, #24
 800239c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023a0:	220a      	movs	r2, #10
 80023a2:	4618      	mov	r0, r3
 80023a4:	f009 fea8 	bl	800c0f8 <f_open>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d167      	bne.n	800247e <save_raw_data_crc16+0x152>
	  int16_t CRC16_calculated=usMBCRC16((uint8_t*)data,size);
 80023ae:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80023b2:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80023b6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80023ba:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80023be:	6811      	ldr	r1, [r2, #0]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	f001 fec1 	bl	8004148 <usMBCRC16>
 80023c6:	4603      	mov	r3, r0
 80023c8:	461a      	mov	r2, r3
 80023ca:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80023ce:	f2a3 2382 	subw	r3, r3, #642	; 0x282
 80023d2:	801a      	strh	r2, [r3, #0]
	  if(f_write(&data_file,(uint8_t*)data,size,(UINT*)&byteswritten)==FR_OK){
 80023d4:	f507 7325 	add.w	r3, r7, #660	; 0x294
 80023d8:	f507 7226 	add.w	r2, r7, #664	; 0x298
 80023dc:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 80023e0:	f507 7126 	add.w	r1, r7, #664	; 0x298
 80023e4:	f5a1 7124 	sub.w	r1, r1, #656	; 0x290
 80023e8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80023ec:	6812      	ldr	r2, [r2, #0]
 80023ee:	6809      	ldr	r1, [r1, #0]
 80023f0:	f00a fabd 	bl	800c96e <f_write>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d135      	bne.n	8002466 <save_raw_data_crc16+0x13a>
		  if(byteswritten==size){
 80023fa:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80023fe:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8002402:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d120      	bne.n	800244e <save_raw_data_crc16+0x122>
			if(f_write(&data_file,(uint8_t*)&CRC16_calculated,2,(UINT*)&byteswritten)==FR_OK){
 800240c:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8002410:	f107 0116 	add.w	r1, r7, #22
 8002414:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002418:	2202      	movs	r2, #2
 800241a:	f00a faa8 	bl	800c96e <f_write>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d114      	bne.n	800244e <save_raw_data_crc16+0x122>
			 if(byteswritten==2){
 8002424:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002428:	2b02      	cmp	r3, #2
 800242a:	d110      	bne.n	800244e <save_raw_data_crc16+0x122>
			  f_close(&data_file);
 800242c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002430:	4618      	mov	r0, r3
 8002432:	f00a fd6e 	bl	800cf12 <f_close>
			  osSemaphoreRelease(self_object->microsd_media_sem);
 8002436:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800243a:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002444:	4618      	mov	r0, r3
 8002446:	f00b f8bf 	bl	800d5c8 <osSemaphoreRelease>
			  return F_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	e022      	b.n	8002494 <save_raw_data_crc16+0x168>
			 }
			}
		  }
		  osSemaphoreRelease(self_object->microsd_media_sem);
 800244e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002452:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800245c:	4618      	mov	r0, r3
 800245e:	f00b f8b3 	bl	800d5c8 <osSemaphoreRelease>
		  return F_ERR;
 8002462:	2301      	movs	r3, #1
 8002464:	e016      	b.n	8002494 <save_raw_data_crc16+0x168>
	  }
	  osSemaphoreRelease(self_object->microsd_media_sem);
 8002466:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800246a:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002474:	4618      	mov	r0, r3
 8002476:	f00b f8a7 	bl	800d5c8 <osSemaphoreRelease>
	  return F_ERR;
 800247a:	2301      	movs	r3, #1
 800247c:	e00a      	b.n	8002494 <save_raw_data_crc16+0x168>
	}
	osSemaphoreRelease(self_object->microsd_media_sem);
 800247e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002482:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800248c:	4618      	mov	r0, r3
 800248e:	f00b f89b 	bl	800d5c8 <osSemaphoreRelease>
	return F_ERR;
 8002492:	2301      	movs	r3, #1
}
 8002494:	4618      	mov	r0, r3
 8002496:	f507 7727 	add.w	r7, r7, #668	; 0x29c
 800249a:	46bd      	mov	sp, r7
 800249c:	bd90      	pop	{r4, r7, pc}
 800249e:	bf00      	nop
 80024a0:	08014fa8 	.word	0x08014fa8

080024a4 <lpm_sum_messages>:
extern float bloc_GPS_lat;
extern float bloc_GPS_lon;


void lpm_sum_messages(uvp6* uvp6_obj,lpm_data_str* lpm_messages_buffer)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  lpm_messages_buffer->temperature+=uvp6_obj->lpm_data.temperature;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	f8d3 3019 	ldr.w	r3, [r3, #25]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80024b8:	4611      	mov	r1, r2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe fbca 	bl	8000c54 <__addsf3>
 80024c0:	4603      	mov	r3, r0
 80024c2:	461a      	mov	r2, r3
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	f8c3 2019 	str.w	r2, [r3, #25]
  lpm_messages_buffer->pressure+=uvp6_obj->lpm_data.pressure;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	f8d2 200f 	ldr.w	r2, [r2, #15]
 80024d4:	4611      	mov	r1, r2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe fbbc 	bl	8000c54 <__addsf3>
 80024dc:	4603      	mov	r3, r0
 80024de:	461a      	mov	r2, r3
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	601a      	str	r2, [r3, #0]
  lpm_messages_buffer->number_of_images+=uvp6_obj->lpm_data.number_of_images;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	f8d3 2015 	ldr.w	r2, [r3, #21]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	441a      	add	r2, r3
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	f8c3 2015 	str.w	r2, [r3, #21]
  for(int y=0;y<UVP6_NUM_OF_CATEGORIES;y++){
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	e034      	b.n	8002566 <lpm_sum_messages+0xc2>
	lpm_messages_buffer->data[y]+=uvp6_obj->lpm_data.data[y];
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	3306      	adds	r3, #6
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	3308      	adds	r3, #8
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	441a      	add	r2, r3
 8002518:	6839      	ldr	r1, [r7, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3306      	adds	r3, #6
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	f8c3 2005 	str.w	r2, [r3, #5]
	lpm_messages_buffer->grey_levels[y]+=(uvp6_obj->lpm_data.grey_levels[y]*uvp6_obj->lpm_data.data[y]);
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	3318      	adds	r3, #24
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	331a      	adds	r3, #26
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	68d9      	ldr	r1, [r3, #12]
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	3308      	adds	r3, #8
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4403      	add	r3, r0
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	441a      	add	r2, r3
 8002552:	6839      	ldr	r1, [r7, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	3318      	adds	r3, #24
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	f8c3 2005 	str.w	r2, [r3, #5]
  for(int y=0;y<UVP6_NUM_OF_CATEGORIES;y++){
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	3301      	adds	r3, #1
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2b11      	cmp	r3, #17
 800256a:	ddc7      	ble.n	80024fc <lpm_sum_messages+0x58>
  }
}
 800256c:	bf00      	nop
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <lpm_aggregate_messages>:

F_RES lpm_aggregate_messages(uvp6* uvp6_obj,lpm_data_str* lpm_messages_buffer,uint32_t* lpm_buffer_num_of_msgs)
{
 8002576:	b590      	push	{r4, r7, lr}
 8002578:	b087      	sub	sp, #28
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
   if(*lpm_buffer_num_of_msgs==0) return F_ERR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <lpm_aggregate_messages+0x18>
 800258a:	2301      	movs	r3, #1
 800258c:	e052      	b.n	8002634 <lpm_aggregate_messages+0xbe>
   lpm_messages_buffer->temperature=lpm_messages_buffer->temperature/(float)(*lpm_buffer_num_of_msgs);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f8d3 4019 	ldr.w	r4, [r3, #25]
 8002594:	4623      	mov	r3, r4
 8002596:	461c      	mov	r4, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7fe fc09 	bl	8000db4 <__aeabi_ui2f>
 80025a2:	4603      	mov	r3, r0
 80025a4:	4619      	mov	r1, r3
 80025a6:	4620      	mov	r0, r4
 80025a8:	f7fe fd10 	bl	8000fcc <__aeabi_fdiv>
 80025ac:	4603      	mov	r3, r0
 80025ae:	461a      	mov	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f8c3 2019 	str.w	r2, [r3, #25]
   lpm_messages_buffer->pressure=lpm_messages_buffer->pressure/(float)(*lpm_buffer_num_of_msgs);
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	681c      	ldr	r4, [r3, #0]
 80025ba:	4623      	mov	r3, r4
 80025bc:	461c      	mov	r4, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fbf6 	bl	8000db4 <__aeabi_ui2f>
 80025c8:	4603      	mov	r3, r0
 80025ca:	4619      	mov	r1, r3
 80025cc:	4620      	mov	r0, r4
 80025ce:	f7fe fcfd 	bl	8000fcc <__aeabi_fdiv>
 80025d2:	4603      	mov	r3, r0
 80025d4:	461a      	mov	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	601a      	str	r2, [r3, #0]
   for(int y=0;y<UVP6_NUM_OF_CATEGORIES;y++){
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	e022      	b.n	8002626 <lpm_aggregate_messages+0xb0>
	   if(lpm_messages_buffer->data[y]>0){
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	3306      	adds	r3, #6
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d016      	beq.n	8002620 <lpm_aggregate_messages+0xaa>
		   lpm_messages_buffer->grey_levels[y]=(lpm_messages_buffer->grey_levels[y]/lpm_messages_buffer->data[y]);
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	3318      	adds	r3, #24
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	3306      	adds	r3, #6
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800260e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002612:	68b9      	ldr	r1, [r7, #8]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	3318      	adds	r3, #24
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	f8c3 2005 	str.w	r2, [r3, #5]
   for(int y=0;y<UVP6_NUM_OF_CATEGORIES;y++){
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	3301      	adds	r3, #1
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2b11      	cmp	r3, #17
 800262a:	ddd9      	ble.n	80025e0 <lpm_aggregate_messages+0x6a>
	   }
   }
   *lpm_buffer_num_of_msgs=0;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
   return F_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	371c      	adds	r7, #28
 8002638:	46bd      	mov	sp, r7
 800263a:	bd90      	pop	{r4, r7, pc}

0800263c <lpm_aggregate_and_close_bloc>:

F_RES lpm_aggregate_and_close_bloc(uvp6* uvp6_obj,char* res,lpm_data_str* lpm_messages_buffer,uint32_t* lpm_buffer_num_of_msgs)
{
 800263c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002640:	b0d7      	sub	sp, #348	; 0x15c
 8002642:	af2e      	add	r7, sp, #184	; 0xb8
 8002644:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8002648:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800264c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002650:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  	if(lpm_aggregate_messages(uvp6_obj,lpm_messages_buffer,lpm_buffer_num_of_msgs)==F_OK){
 8002654:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002658:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800265c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002660:	f7ff ff89 	bl	8002576 <lpm_aggregate_messages>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	f040 814e 	bne.w	8002908 <lpm_aggregate_and_close_bloc+0x2cc>
	sprintf(res,"LPM_DATA,%s %s,%f,%f,%f,%u,%f,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u;\r\n",
						  lpm_messages_buffer->date,
 800266c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002670:	3304      	adds	r3, #4
 8002672:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						  lpm_messages_buffer->time,
 8002676:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800267a:	f103 010e 	add.w	r1, r3, #14
 800267e:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
						  lpm_messages_buffer->pressure,
 8002682:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002686:	681b      	ldr	r3, [r3, #0]
	sprintf(res,"LPM_DATA,%s %s,%f,%f,%f,%u,%f,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u;\r\n",
 8002688:	4618      	mov	r0, r3
 800268a:	f7fd ff3d 	bl	8000508 <__aeabi_f2d>
 800268e:	4680      	mov	r8, r0
 8002690:	4689      	mov	r9, r1
 8002692:	4ba0      	ldr	r3, [pc, #640]	; (8002914 <lpm_aggregate_and_close_bloc+0x2d8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fd ff36 	bl	8000508 <__aeabi_f2d>
 800269c:	4682      	mov	sl, r0
 800269e:	468b      	mov	fp, r1
 80026a0:	4b9d      	ldr	r3, [pc, #628]	; (8002918 <lpm_aggregate_and_close_bloc+0x2dc>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fd ff2f 	bl	8000508 <__aeabi_f2d>
 80026aa:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
 80026ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026b2:	f8d3 4015 	ldr.w	r4, [r3, #21]
 80026b6:	67fc      	str	r4, [r7, #124]	; 0x7c
						  bloc_GPS_lat,
						  bloc_GPS_lon,
						  lpm_messages_buffer->number_of_images,
						  lpm_messages_buffer->temperature,
 80026b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026bc:	f8d3 3019 	ldr.w	r3, [r3, #25]
	sprintf(res,"LPM_DATA,%s %s,%f,%f,%f,%u,%f,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u;\r\n",
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd ff21 	bl	8000508 <__aeabi_f2d>
 80026c6:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
 80026ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026ce:	f8d3 501d 	ldr.w	r5, [r3, #29]
 80026d2:	67bd      	str	r5, [r7, #120]	; 0x78
 80026d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026d8:	f8d3 6021 	ldr.w	r6, [r3, #33]	; 0x21
 80026dc:	66fe      	str	r6, [r7, #108]	; 0x6c
 80026de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026e2:	f8d3 c025 	ldr.w	ip, [r3, #37]	; 0x25
 80026e6:	f8c7 c068 	str.w	ip, [r7, #104]	; 0x68
 80026ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026ee:	f8d3 e029 	ldr.w	lr, [r3, #41]	; 0x29
 80026f2:	f8c7 e064 	str.w	lr, [r7, #100]	; 0x64
 80026f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026fa:	f8d3 202d 	ldr.w	r2, [r3, #45]	; 0x2d
 80026fe:	663a      	str	r2, [r7, #96]	; 0x60
 8002700:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002704:	f8d3 4031 	ldr.w	r4, [r3, #49]	; 0x31
 8002708:	65fc      	str	r4, [r7, #92]	; 0x5c
 800270a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800270e:	f8d3 5035 	ldr.w	r5, [r3, #53]	; 0x35
 8002712:	65bd      	str	r5, [r7, #88]	; 0x58
 8002714:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002718:	f8d3 6039 	ldr.w	r6, [r3, #57]	; 0x39
 800271c:	657e      	str	r6, [r7, #84]	; 0x54
 800271e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002722:	f8d3 c03d 	ldr.w	ip, [r3, #61]	; 0x3d
 8002726:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 800272a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800272e:	f8d3 e041 	ldr.w	lr, [r3, #65]	; 0x41
 8002732:	f8c7 e04c 	str.w	lr, [r7, #76]	; 0x4c
 8002736:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800273a:	f8d3 3045 	ldr.w	r3, [r3, #69]	; 0x45
 800273e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002740:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002744:	f8d3 2049 	ldr.w	r2, [r3, #73]	; 0x49
 8002748:	647a      	str	r2, [r7, #68]	; 0x44
 800274a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800274e:	f8d3 004d 	ldr.w	r0, [r3, #77]	; 0x4d
 8002752:	6438      	str	r0, [r7, #64]	; 0x40
 8002754:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002758:	f8d3 4051 	ldr.w	r4, [r3, #81]	; 0x51
 800275c:	63fc      	str	r4, [r7, #60]	; 0x3c
 800275e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002762:	f8d3 5055 	ldr.w	r5, [r3, #85]	; 0x55
 8002766:	63bd      	str	r5, [r7, #56]	; 0x38
 8002768:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800276c:	f8d3 6059 	ldr.w	r6, [r3, #89]	; 0x59
 8002770:	637e      	str	r6, [r7, #52]	; 0x34
 8002772:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002776:	f8d3 c05d 	ldr.w	ip, [r3, #93]	; 0x5d
 800277a:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
 800277e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002782:	f8d3 e061 	ldr.w	lr, [r3, #97]	; 0x61
 8002786:	f8c7 e02c 	str.w	lr, [r7, #44]	; 0x2c
 800278a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800278e:	f8d3 3065 	ldr.w	r3, [r3, #101]	; 0x65
 8002792:	62bb      	str	r3, [r7, #40]	; 0x28
 8002794:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002798:	f8d3 2069 	ldr.w	r2, [r3, #105]	; 0x69
 800279c:	627a      	str	r2, [r7, #36]	; 0x24
 800279e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027a2:	f8d3 106d 	ldr.w	r1, [r3, #109]	; 0x6d
 80027a6:	6239      	str	r1, [r7, #32]
 80027a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027ac:	f8d3 0071 	ldr.w	r0, [r3, #113]	; 0x71
 80027b0:	61f8      	str	r0, [r7, #28]
 80027b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027b6:	f8d3 4075 	ldr.w	r4, [r3, #117]	; 0x75
 80027ba:	61bc      	str	r4, [r7, #24]
 80027bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027c0:	f8d3 5079 	ldr.w	r5, [r3, #121]	; 0x79
 80027c4:	617d      	str	r5, [r7, #20]
 80027c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027ca:	f8d3 607d 	ldr.w	r6, [r3, #125]	; 0x7d
 80027ce:	613e      	str	r6, [r7, #16]
 80027d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027d4:	f8d3 c081 	ldr.w	ip, [r3, #129]	; 0x81
 80027d8:	f8c7 c00c 	str.w	ip, [r7, #12]
 80027dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027e0:	f8d3 e085 	ldr.w	lr, [r3, #133]	; 0x85
 80027e4:	f8c7 e008 	str.w	lr, [r7, #8]
 80027e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027ec:	f8d3 3089 	ldr.w	r3, [r3, #137]	; 0x89
 80027f0:	607b      	str	r3, [r7, #4]
 80027f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027f6:	f8d3 208d 	ldr.w	r2, [r3, #141]	; 0x8d
 80027fa:	603a      	str	r2, [r7, #0]
 80027fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002800:	f8d3 6091 	ldr.w	r6, [r3, #145]	; 0x91
 8002804:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002808:	f8d3 5095 	ldr.w	r5, [r3, #149]	; 0x95
 800280c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002810:	f8d3 4099 	ldr.w	r4, [r3, #153]	; 0x99
 8002814:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002818:	f8d3 009d 	ldr.w	r0, [r3, #157]	; 0x9d
 800281c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002820:	f8d3 10a1 	ldr.w	r1, [r3, #161]	; 0xa1
 8002824:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002828:	f8d3 20a5 	ldr.w	r2, [r3, #165]	; 0xa5
 800282c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002830:	f8d3 30a9 	ldr.w	r3, [r3, #169]	; 0xa9
 8002834:	932d      	str	r3, [sp, #180]	; 0xb4
 8002836:	922c      	str	r2, [sp, #176]	; 0xb0
 8002838:	912b      	str	r1, [sp, #172]	; 0xac
 800283a:	902a      	str	r0, [sp, #168]	; 0xa8
 800283c:	9429      	str	r4, [sp, #164]	; 0xa4
 800283e:	9528      	str	r5, [sp, #160]	; 0xa0
 8002840:	9627      	str	r6, [sp, #156]	; 0x9c
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	9226      	str	r2, [sp, #152]	; 0x98
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	9325      	str	r3, [sp, #148]	; 0x94
 800284a:	f8d7 e008 	ldr.w	lr, [r7, #8]
 800284e:	f8cd e090 	str.w	lr, [sp, #144]	; 0x90
 8002852:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 8002856:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
 800285a:	693e      	ldr	r6, [r7, #16]
 800285c:	9622      	str	r6, [sp, #136]	; 0x88
 800285e:	697d      	ldr	r5, [r7, #20]
 8002860:	9521      	str	r5, [sp, #132]	; 0x84
 8002862:	69bc      	ldr	r4, [r7, #24]
 8002864:	9420      	str	r4, [sp, #128]	; 0x80
 8002866:	69f8      	ldr	r0, [r7, #28]
 8002868:	901f      	str	r0, [sp, #124]	; 0x7c
 800286a:	6a39      	ldr	r1, [r7, #32]
 800286c:	911e      	str	r1, [sp, #120]	; 0x78
 800286e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002870:	921d      	str	r2, [sp, #116]	; 0x74
 8002872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002874:	931c      	str	r3, [sp, #112]	; 0x70
 8002876:	f8d7 e02c 	ldr.w	lr, [r7, #44]	; 0x2c
 800287a:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
 800287e:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
 8002882:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
 8002886:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 8002888:	9619      	str	r6, [sp, #100]	; 0x64
 800288a:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 800288c:	9518      	str	r5, [sp, #96]	; 0x60
 800288e:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8002890:	9417      	str	r4, [sp, #92]	; 0x5c
 8002892:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002894:	9016      	str	r0, [sp, #88]	; 0x58
 8002896:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002898:	9215      	str	r2, [sp, #84]	; 0x54
 800289a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800289c:	9314      	str	r3, [sp, #80]	; 0x50
 800289e:	f8d7 e04c 	ldr.w	lr, [r7, #76]	; 0x4c
 80028a2:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 80028a6:	f8d7 c050 	ldr.w	ip, [r7, #80]	; 0x50
 80028aa:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 80028ae:	6d7e      	ldr	r6, [r7, #84]	; 0x54
 80028b0:	9611      	str	r6, [sp, #68]	; 0x44
 80028b2:	6dbd      	ldr	r5, [r7, #88]	; 0x58
 80028b4:	9510      	str	r5, [sp, #64]	; 0x40
 80028b6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80028b8:	940f      	str	r4, [sp, #60]	; 0x3c
 80028ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028bc:	920e      	str	r2, [sp, #56]	; 0x38
 80028be:	f8d7 e064 	ldr.w	lr, [r7, #100]	; 0x64
 80028c2:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80028c6:	f8d7 c068 	ldr.w	ip, [r7, #104]	; 0x68
 80028ca:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80028ce:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 80028d0:	960b      	str	r6, [sp, #44]	; 0x2c
 80028d2:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 80028d4:	950a      	str	r5, [sp, #40]	; 0x28
 80028d6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80028da:	e9cd 1208 	strd	r1, r2, [sp, #32]
 80028de:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80028e0:	9406      	str	r4, [sp, #24]
 80028e2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80028e6:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80028ea:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80028ee:	e9cd 8900 	strd	r8, r9, [sp]
 80028f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028f6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80028fa:	4908      	ldr	r1, [pc, #32]	; (800291c <lpm_aggregate_and_close_bloc+0x2e0>)
 80028fc:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002900:	f00e fdac 	bl	801145c <siprintf>
						  lpm_messages_buffer->grey_levels[14],
						  lpm_messages_buffer->grey_levels[15],
						  lpm_messages_buffer->grey_levels[16],
						  lpm_messages_buffer->grey_levels[17]
    );
	return F_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	e000      	b.n	800290a <lpm_aggregate_and_close_bloc+0x2ce>
  }
  return F_ERR;
 8002908:	2301      	movs	r3, #1
}
 800290a:	4618      	mov	r0, r3
 800290c:	37a4      	adds	r7, #164	; 0xa4
 800290e:	46bd      	mov	sp, r7
 8002910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002914:	20001318 	.word	0x20001318
 8002918:	2000131c 	.word	0x2000131c
 800291c:	08014fb0 	.word	0x08014fb0

08002920 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4a06      	ldr	r2, [pc, #24]	; (8002948 <vApplicationGetIdleTaskMemory+0x28>)
 8002930:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	4a05      	ldr	r2, [pc, #20]	; (800294c <vApplicationGetIdleTaskMemory+0x2c>)
 8002936:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2280      	movs	r2, #128	; 0x80
 800293c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800293e:	bf00      	nop
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr
 8002948:	2000044c 	.word	0x2000044c
 800294c:	20000500 	.word	0x20000500

08002950 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4a07      	ldr	r2, [pc, #28]	; (800297c <vApplicationGetTimerTaskMemory+0x2c>)
 8002960:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	4a06      	ldr	r2, [pc, #24]	; (8002980 <vApplicationGetTimerTaskMemory+0x30>)
 8002966:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800296e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002970:	bf00      	nop
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20000700 	.word	0x20000700
 8002980:	200007b4 	.word	0x200007b4

08002984 <microsd_init_proc>:

uint32_t  microsd_init_events[]={0};
#define   microsd_init_events_num                                             0

void microsd_init_proc(proc_arg_t* proc_arg)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 MX_FATFS_Init();
 800298c:	f005 fdc8 	bl	8008520 <MX_FATFS_Init>
 sd_storage_link_ss(&microsd_storage,0,SS_SD1_Pin,GPIOA);
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <microsd_init_proc+0x54>)
 8002992:	2202      	movs	r2, #2
 8002994:	2100      	movs	r1, #0
 8002996:	4811      	ldr	r0, [pc, #68]	; (80029dc <microsd_init_proc+0x58>)
 8002998:	f7ff fbb2 	bl	8002100 <sd_storage_link_ss>

 while(sd_storage_init(&microsd_storage,microSD_semHandle)!=F_OK){
 800299c:	e009      	b.n	80029b2 <microsd_init_proc+0x2e>
  osDelay(500);
 800299e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029a2:	f00a fd7c 	bl	800d49e <osDelay>
  fsm_generate_event(proc_arg->outQ_handle,MICROSD_EVNT_STORAGE_NOT_INITIALIZED);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2165      	movs	r1, #101	; 0x65
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 ffa7 	bl	8003900 <fsm_generate_event>
 while(sd_storage_init(&microsd_storage,microSD_semHandle)!=F_OK){
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <microsd_init_proc+0x5c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4619      	mov	r1, r3
 80029b8:	4808      	ldr	r0, [pc, #32]	; (80029dc <microsd_init_proc+0x58>)
 80029ba:	f7ff fac7 	bl	8001f4c <sd_storage_init>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1ec      	bne.n	800299e <microsd_init_proc+0x1a>
 }
 fsm_generate_event(proc_arg->outQ_handle,MICROSD_EVNT_STORAGE_INITIALIZED);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2164      	movs	r1, #100	; 0x64
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 ff98 	bl	8003900 <fsm_generate_event>
}
 80029d0:	bf00      	nop
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40010800 	.word	0x40010800
 80029dc:	200021e0 	.word	0x200021e0
 80029e0:	200014d4 	.word	0x200014d4

080029e4 <load_settings_proc>:

uint32_t  load_settings_events[]={0};
#define   load_settings_events_num                                             0

void load_settings_proc(proc_arg_t* proc_arg)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  if(read_settings()==F_ERR){
 80029ec:	f002 fa3c 	bl	8004e68 <read_settings>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d10b      	bne.n	8002a0e <load_settings_proc+0x2a>
 	  set_default_settings();
 80029f6:	f002 fa2b 	bl	8004e50 <set_default_settings>
 	  save_settings();
 80029fa:	f002 fa4b 	bl	8004e94 <save_settings>
 	  fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_DEFAULT_SETTINGS_LOADED);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f240 112d 	movw	r1, #301	; 0x12d
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 ff7a 	bl	8003900 <fsm_generate_event>
  }
  else{
    fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_SETTINGS_LOADED);

  }
}
 8002a0c:	e006      	b.n	8002a1c <load_settings_proc+0x38>
    fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_SETTINGS_LOADED);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 ff72 	bl	8003900 <fsm_generate_event>
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <send_data_proc>:
uint32_t  send_data_events[]={
		                     };
#define   send_data_events_num                                             0

void send_data_proc(proc_arg_t* proc_arg)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b0ae      	sub	sp, #184	; 0xb8
 8002a28:	af02      	add	r7, sp, #8
 8002a2a:	6078      	str	r0, [r7, #4]
	char tmp_filename[50];
	uint8_t tx_buff[100];
	uint32_t bytesreaded;

	sprintf(tmp_filename,"Data:%s %u\r\n",
				DATA_FILE_PREFIX,(unsigned int)run_cfg.last_file_index);
 8002a2c:	4b3a      	ldr	r3, [pc, #232]	; (8002b18 <send_data_proc+0xf4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
	sprintf(tmp_filename,"Data:%s %u\r\n",
 8002a30:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8002a34:	4a39      	ldr	r2, [pc, #228]	; (8002b1c <send_data_proc+0xf8>)
 8002a36:	493a      	ldr	r1, [pc, #232]	; (8002b20 <send_data_proc+0xfc>)
 8002a38:	f00e fd10 	bl	801145c <siprintf>
	ptr1.start_addr=(uint8_t*)tmp_filename;
 8002a3c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002a40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	ptr1.size=strlen(tmp_filename);
 8002a44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fd fbf1 	bl	8000230 <strlen>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	seaglider_send_cmd(&glider1,SEAGLIDER_CMD_SEND_DATA,&ptr1);
 8002a54:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	4831      	ldr	r0, [pc, #196]	; (8002b24 <send_data_proc+0x100>)
 8002a5e:	f001 ff9f 	bl	80049a0 <seaglider_send_cmd>

	sprintf(tmp_filename,"%u:%s_%u%s",microsd_storage.active_disk_indx,
 8002a62:	4b31      	ldr	r3, [pc, #196]	; (8002b28 <send_data_proc+0x104>)
 8002a64:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8002a68:	4619      	mov	r1, r3
			DATA_FILE_PREFIX,(unsigned int)run_cfg.last_file_index,DATA_FILE_EXTENSION);
 8002a6a:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <send_data_proc+0xf4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
	sprintf(tmp_filename,"%u:%s_%u%s",microsd_storage.active_disk_indx,
 8002a6e:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8002a72:	4a2e      	ldr	r2, [pc, #184]	; (8002b2c <send_data_proc+0x108>)
 8002a74:	9201      	str	r2, [sp, #4]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	4b28      	ldr	r3, [pc, #160]	; (8002b1c <send_data_proc+0xf8>)
 8002a7a:	460a      	mov	r2, r1
 8002a7c:	492c      	ldr	r1, [pc, #176]	; (8002b30 <send_data_proc+0x10c>)
 8002a7e:	f00e fced 	bl	801145c <siprintf>

	osSemaphoreWait(microsd_storage.microsd_media_sem, osWaitForever);
 8002a82:	4b29      	ldr	r3, [pc, #164]	; (8002b28 <send_data_proc+0x104>)
 8002a84:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002a88:	f04f 31ff 	mov.w	r1, #4294967295
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f00a fd4d 	bl	800d52c <osSemaphoreWait>
	if(f_open(&data_file,tmp_filename,FA_READ)==FR_OK){
 8002a92:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002a96:	2201      	movs	r2, #1
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4826      	ldr	r0, [pc, #152]	; (8002b34 <send_data_proc+0x110>)
 8002a9c:	f009 fb2c 	bl	800c0f8 <f_open>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d123      	bne.n	8002aee <send_data_proc+0xca>

		do{
		   if(f_read(&data_file,tx_buff,50,(UINT*)&bytesreaded)==FR_OK){
 8002aa6:	f107 030c 	add.w	r3, r7, #12
 8002aaa:	f107 0110 	add.w	r1, r7, #16
 8002aae:	2232      	movs	r2, #50	; 0x32
 8002ab0:	4820      	ldr	r0, [pc, #128]	; (8002b34 <send_data_proc+0x110>)
 8002ab2:	f009 fde2 	bl	800c67a <f_read>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10d      	bne.n	8002ad8 <send_data_proc+0xb4>
		    ptr1.start_addr=tx_buff;
 8002abc:	f107 0310 	add.w	r3, r7, #16
 8002ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		    ptr1.size=bytesreaded;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		    seaglider_send_cmd(&glider1,SEAGLIDER_CMD_SEND_DATA,&ptr1);
 8002aca:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002ace:	461a      	mov	r2, r3
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	4814      	ldr	r0, [pc, #80]	; (8002b24 <send_data_proc+0x100>)
 8002ad4:	f001 ff64 	bl	80049a0 <seaglider_send_cmd>
		   }
		}while(bytesreaded==50);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b32      	cmp	r3, #50	; 0x32
 8002adc:	d0e3      	beq.n	8002aa6 <send_data_proc+0x82>
		fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_DATA_SENT);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f44f 7199 	mov.w	r1, #306	; 0x132
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 ff0a 	bl	8003900 <fsm_generate_event>
 8002aec:	e006      	b.n	8002afc <send_data_proc+0xd8>
	}
	else fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_DATA_CANT_BE_SENT);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f240 1133 	movw	r1, #307	; 0x133
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 ff02 	bl	8003900 <fsm_generate_event>
	f_close(&data_file);
 8002afc:	480d      	ldr	r0, [pc, #52]	; (8002b34 <send_data_proc+0x110>)
 8002afe:	f00a fa08 	bl	800cf12 <f_close>
	osSemaphoreRelease(microsd_storage.microsd_media_sem);
 8002b02:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <send_data_proc+0x104>)
 8002b04:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f00a fd5d 	bl	800d5c8 <osSemaphoreRelease>
}
 8002b0e:	bf00      	nop
 8002b10:	37b0      	adds	r7, #176	; 0xb0
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20002868 	.word	0x20002868
 8002b1c:	08015040 	.word	0x08015040
 8002b20:	08015048 	.word	0x08015048
 8002b24:	200014d8 	.word	0x200014d8
 8002b28:	200021e0 	.word	0x200021e0
 8002b2c:	08015064 	.word	0x08015064
 8002b30:	08015058 	.word	0x08015058
 8002b34:	20000bb8 	.word	0x20000bb8

08002b38 <open_files_proc>:
uint32_t  open_files_events[]={
		                      };
#define   open_files_events_num                                             0

void open_files_proc(proc_arg_t* proc_arg)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08c      	sub	sp, #48	; 0x30
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	6078      	str	r0, [r7, #4]
 char filename[30];
 uint32_t bytesreaded;

 osSemaphoreWait(microsd_storage.microsd_media_sem, osWaitForever);
 8002b40:	4b52      	ldr	r3, [pc, #328]	; (8002c8c <open_files_proc+0x154>)
 8002b42:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002b46:	f04f 31ff 	mov.w	r1, #4294967295
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f00a fcee 	bl	800d52c <osSemaphoreWait>
 if(glider1.dive_status==SEAGLIDER_STATUS_DIVE){
 8002b50:	4b4f      	ldr	r3, [pc, #316]	; (8002c90 <open_files_proc+0x158>)
 8002b52:	7cdb      	ldrb	r3, [r3, #19]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d15c      	bne.n	8002c12 <open_files_proc+0xda>

  run_cfg.last_file_index++;
 8002b58:	4b4e      	ldr	r3, [pc, #312]	; (8002c94 <open_files_proc+0x15c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	4a4d      	ldr	r2, [pc, #308]	; (8002c94 <open_files_proc+0x15c>)
 8002b60:	6013      	str	r3, [r2, #0]
  sprintf(filename,"%u:%s_%u%s",microsd_storage.active_disk_indx,
 8002b62:	4b4a      	ldr	r3, [pc, #296]	; (8002c8c <open_files_proc+0x154>)
 8002b64:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8002b68:	4619      	mov	r1, r3
		  DATA_FILE_PREFIX,(unsigned int)run_cfg.last_file_index,DATA_FILE_EXTENSION);
 8002b6a:	4b4a      	ldr	r3, [pc, #296]	; (8002c94 <open_files_proc+0x15c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
  sprintf(filename,"%u:%s_%u%s",microsd_storage.active_disk_indx,
 8002b6e:	f107 0008 	add.w	r0, r7, #8
 8002b72:	4a49      	ldr	r2, [pc, #292]	; (8002c98 <open_files_proc+0x160>)
 8002b74:	9201      	str	r2, [sp, #4]
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	4b48      	ldr	r3, [pc, #288]	; (8002c9c <open_files_proc+0x164>)
 8002b7a:	460a      	mov	r2, r1
 8002b7c:	4948      	ldr	r1, [pc, #288]	; (8002ca0 <open_files_proc+0x168>)
 8002b7e:	f00e fc6d 	bl	801145c <siprintf>
  if(f_open(&data_file,filename,FA_CREATE_ALWAYS|FA_WRITE)!=FR_OK){
 8002b82:	f107 0308 	add.w	r3, r7, #8
 8002b86:	220a      	movs	r2, #10
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4846      	ldr	r0, [pc, #280]	; (8002ca4 <open_files_proc+0x16c>)
 8002b8c:	f009 fab4 	bl	800c0f8 <f_open>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00d      	beq.n	8002bb2 <open_files_proc+0x7a>
	  fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_FILE_OPEN_ERR);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f240 113d 	movw	r1, #317	; 0x13d
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 feae 	bl	8003900 <fsm_generate_event>
	  osSemaphoreRelease(microsd_storage.microsd_media_sem);
 8002ba4:	4b39      	ldr	r3, [pc, #228]	; (8002c8c <open_files_proc+0x154>)
 8002ba6:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002baa:	4618      	mov	r0, r3
 8002bac:	f00a fd0c 	bl	800d5c8 <osSemaphoreRelease>
	  return;
 8002bb0:	e068      	b.n	8002c84 <open_files_proc+0x14c>
  }

  sprintf(filename,"%u:%s_%u%s",microsd_storage.active_disk_indx,
 8002bb2:	4b36      	ldr	r3, [pc, #216]	; (8002c8c <open_files_proc+0x154>)
 8002bb4:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8002bb8:	4619      	mov	r1, r3
		  ERR_FILE_PREFIX,(unsigned int)run_cfg.last_file_index,ERR_FILE_EXTENSION);
 8002bba:	4b36      	ldr	r3, [pc, #216]	; (8002c94 <open_files_proc+0x15c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
  sprintf(filename,"%u:%s_%u%s",microsd_storage.active_disk_indx,
 8002bbe:	f107 0008 	add.w	r0, r7, #8
 8002bc2:	4a39      	ldr	r2, [pc, #228]	; (8002ca8 <open_files_proc+0x170>)
 8002bc4:	9201      	str	r2, [sp, #4]
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	4b34      	ldr	r3, [pc, #208]	; (8002c9c <open_files_proc+0x164>)
 8002bca:	460a      	mov	r2, r1
 8002bcc:	4934      	ldr	r1, [pc, #208]	; (8002ca0 <open_files_proc+0x168>)
 8002bce:	f00e fc45 	bl	801145c <siprintf>
  if(f_open(&err_file,filename,FA_CREATE_ALWAYS|FA_WRITE)!=FR_OK){
 8002bd2:	f107 0308 	add.w	r3, r7, #8
 8002bd6:	220a      	movs	r2, #10
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4834      	ldr	r0, [pc, #208]	; (8002cac <open_files_proc+0x174>)
 8002bdc:	f009 fa8c 	bl	800c0f8 <f_open>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00d      	beq.n	8002c02 <open_files_proc+0xca>
	  fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_FILE_OPEN_ERR);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f240 113d 	movw	r1, #317	; 0x13d
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fe86 	bl	8003900 <fsm_generate_event>
	  osSemaphoreRelease(microsd_storage.microsd_media_sem);
 8002bf4:	4b25      	ldr	r3, [pc, #148]	; (8002c8c <open_files_proc+0x154>)
 8002bf6:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f00a fce4 	bl	800d5c8 <osSemaphoreRelease>
	  return;
 8002c00:	e040      	b.n	8002c84 <open_files_proc+0x14c>
  }

  fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_FILES_CREATED);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f44f 719c 	mov.w	r1, #312	; 0x138
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fe78 	bl	8003900 <fsm_generate_event>
 8002c10:	e032      	b.n	8002c78 <open_files_proc+0x140>
 }
 else if(glider1.dive_status==SEAGLIDER_STATUS_CLIMB){
 8002c12:	4b1f      	ldr	r3, [pc, #124]	; (8002c90 <open_files_proc+0x158>)
 8002c14:	7cdb      	ldrb	r3, [r3, #19]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d12e      	bne.n	8002c78 <open_files_proc+0x140>

  sprintf(filename,"%u:%s_%u%s",microsd_storage.active_disk_indx,
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <open_files_proc+0x154>)
 8002c1c:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8002c20:	4619      	mov	r1, r3
		  DATA_FILE_PREFIX,(unsigned int)run_cfg.last_file_index,DATA_FILE_EXTENSION);
 8002c22:	4b1c      	ldr	r3, [pc, #112]	; (8002c94 <open_files_proc+0x15c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
  sprintf(filename,"%u:%s_%u%s",microsd_storage.active_disk_indx,
 8002c26:	f107 0008 	add.w	r0, r7, #8
 8002c2a:	4a1b      	ldr	r2, [pc, #108]	; (8002c98 <open_files_proc+0x160>)
 8002c2c:	9201      	str	r2, [sp, #4]
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <open_files_proc+0x164>)
 8002c32:	460a      	mov	r2, r1
 8002c34:	491a      	ldr	r1, [pc, #104]	; (8002ca0 <open_files_proc+0x168>)
 8002c36:	f00e fc11 	bl	801145c <siprintf>
  if(f_open(&data_file,filename,FA_OPEN_APPEND|FA_WRITE)!=FR_OK) {
 8002c3a:	f107 0308 	add.w	r3, r7, #8
 8002c3e:	2232      	movs	r2, #50	; 0x32
 8002c40:	4619      	mov	r1, r3
 8002c42:	4818      	ldr	r0, [pc, #96]	; (8002ca4 <open_files_proc+0x16c>)
 8002c44:	f009 fa58 	bl	800c0f8 <f_open>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00d      	beq.n	8002c6a <open_files_proc+0x132>
	  fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_FILE_OPEN_ERR);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f240 113d 	movw	r1, #317	; 0x13d
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fe52 	bl	8003900 <fsm_generate_event>
	  osSemaphoreRelease(microsd_storage.microsd_media_sem);
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <open_files_proc+0x154>)
 8002c5e:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002c62:	4618      	mov	r0, r3
 8002c64:	f00a fcb0 	bl	800d5c8 <osSemaphoreRelease>
	  return;
 8002c68:	e00c      	b.n	8002c84 <open_files_proc+0x14c>
  }
  if(f_read(&err_file,(uint8_t*)&hydroc_sensor1.errors,sizeof(hydroc_sensor1.errors),(UINT*)&bytesreaded)==FR_OK){
  f_rewind(&err_file);}
  */

  fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_FILES_OPENED);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f240 1139 	movw	r1, #313	; 0x139
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 fe44 	bl	8003900 <fsm_generate_event>
 }
 osSemaphoreRelease(microsd_storage.microsd_media_sem);
 8002c78:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <open_files_proc+0x154>)
 8002c7a:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f00a fca2 	bl	800d5c8 <osSemaphoreRelease>
}
 8002c84:	3728      	adds	r7, #40	; 0x28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	200021e0 	.word	0x200021e0
 8002c90:	200014d8 	.word	0x200014d8
 8002c94:	20002868 	.word	0x20002868
 8002c98:	08015064 	.word	0x08015064
 8002c9c:	08015040 	.word	0x08015040
 8002ca0:	08015058 	.word	0x08015058
 8002ca4:	20000bb8 	.word	0x20000bb8
 8002ca8:	0801506c 	.word	0x0801506c
 8002cac:	20000e10 	.word	0x20000e10

08002cb0 <close_files_proc>:
uint32_t  close_files_events[]={
		                      };
#define   close_files_events_num                                             0

void close_files_proc(proc_arg_t* proc_arg)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 uint32_t byteswritten;

  osSemaphoreWait(microsd_storage.microsd_media_sem, osWaitForever);
 8002cb8:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <close_files_proc+0x44>)
 8002cba:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002cbe:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f00a fc32 	bl	800d52c <osSemaphoreWait>
  f_close(&data_file);
 8002cc8:	480b      	ldr	r0, [pc, #44]	; (8002cf8 <close_files_proc+0x48>)
 8002cca:	f00a f922 	bl	800cf12 <f_close>
  if(f_write(&err_file,(uint8_t*)&hydroc_sensor1.errors,sizeof(hydroc_sensor1.errors),(UINT*)&byteswritten)==FR_OK){
   f_close(&err_file);
  }
  */

  osSemaphoreRelease(microsd_storage.microsd_media_sem);
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <close_files_proc+0x44>)
 8002cd0:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f00a fc77 	bl	800d5c8 <osSemaphoreRelease>
  save_settings();
 8002cda:	f002 f8db 	bl	8004e94 <save_settings>
  fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_FILES_CLOSED);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fe0a 	bl	8003900 <fsm_generate_event>

}
 8002cec:	bf00      	nop
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	200021e0 	.word	0x200021e0
 8002cf8:	20000bb8 	.word	0x20000bb8

08002cfc <write_to_file_proc>:


uint32_t  write_to_file_events[]={};
#define   write_to_file_events_num                                 0
void write_to_file_proc(proc_arg_t* proc_arg)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
    FRESULT res;
	uint32_t byteswritten=0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60bb      	str	r3, [r7, #8]

  	res=f_write(&data_file,lmp_data_bloc_msg,strlen(lmp_data_bloc_msg),&byteswritten);
 8002d08:	4810      	ldr	r0, [pc, #64]	; (8002d4c <write_to_file_proc+0x50>)
 8002d0a:	f7fd fa91 	bl	8000230 <strlen>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	f107 0308 	add.w	r3, r7, #8
 8002d14:	490d      	ldr	r1, [pc, #52]	; (8002d4c <write_to_file_proc+0x50>)
 8002d16:	480e      	ldr	r0, [pc, #56]	; (8002d50 <write_to_file_proc+0x54>)
 8002d18:	f009 fe29 	bl	800c96e <f_write>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	73fb      	strb	r3, [r7, #15]


    if(res==FR_OK){
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d107      	bne.n	8002d36 <write_to_file_proc+0x3a>
    	fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_FILE_DATA_WRITTEN);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f240 1145 	movw	r1, #325	; 0x145
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fde6 	bl	8003900 <fsm_generate_event>
    else{
      	fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_FILE_WRITE_ERR);

    }

}
 8002d34:	e006      	b.n	8002d44 <write_to_file_proc+0x48>
      	fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_FILE_WRITE_ERR);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fdde 	bl	8003900 <fsm_generate_event>
}
 8002d44:	bf00      	nop
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	2000111c 	.word	0x2000111c
 8002d50:	20000bb8 	.word	0x20000bb8

08002d54 <uvp6_stop_proc>:
uint32_t  uvp6_stop_events[]={UVP6_EVNT_STOP_ACK_RCVD,
		                      UVP6_EVNT_START_ERR_RCVD};
#define   uvp6_stop_events_num                 2

void uvp6_stop_proc(proc_arg_t* proc_arg)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
	uvp6* uvp6_obj=proc_arg->func_self_object;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	613b      	str	r3, [r7, #16]
	uint8_t retry_timeout_num=UVP6_CONNECTION_RETRIES;
 8002d62:	230a      	movs	r3, #10
 8002d64:	75fb      	strb	r3, [r7, #23]
	uint8_t retry_busy_num=UVP6_CONNECTION_RETRIES;
 8002d66:	230a      	movs	r3, #10
 8002d68:	75bb      	strb	r3, [r7, #22]
	uint32_t in_event;
	F_RES    res;

	do{
	 uvp6_send_cmd(uvp6_obj,UVP6_CMD_STOP_ACQ,NULL);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	6938      	ldr	r0, [r7, #16]
 8002d70:	f7fe fd0a 	bl	8001788 <uvp6_send_cmd>
	 res=fsm_take_event(proc_arg->inQ_handle,&in_event,UVP6_RESPONSE_TIMEOUT);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f107 0108 	add.w	r1, r7, #8
 8002d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 fdcc 	bl	800391e <fsm_take_event>
 8002d86:	4603      	mov	r3, r0
 8002d88:	73fb      	strb	r3, [r7, #15]
	 if(res==F_OK){
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10e      	bne.n	8002dae <uvp6_stop_proc+0x5a>
		  if( in_event==UVP6_EVNT_STOP_ACK_RCVD)break;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8002d96:	d017      	beq.n	8002dc8 <uvp6_stop_proc+0x74>
		  else if( in_event==UVP6_EVNT_START_ERR_RCVD){
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f240 12f9 	movw	r2, #505	; 0x1f9
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d10b      	bne.n	8002dba <uvp6_stop_proc+0x66>
			  retry_busy_num--;
 8002da2:	7dbb      	ldrb	r3, [r7, #22]
 8002da4:	3b01      	subs	r3, #1
 8002da6:	75bb      	strb	r3, [r7, #22]
			  retry_timeout_num=UVP6_CONNECTION_RETRIES;
 8002da8:	230a      	movs	r3, #10
 8002daa:	75fb      	strb	r3, [r7, #23]
 8002dac:	e005      	b.n	8002dba <uvp6_stop_proc+0x66>
		  }
	 }
	 else if(res==F_TIMEOUT) retry_timeout_num--;
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d102      	bne.n	8002dba <uvp6_stop_proc+0x66>
 8002db4:	7dfb      	ldrb	r3, [r7, #23]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	75fb      	strb	r3, [r7, #23]
	}while(retry_timeout_num!=0 && retry_busy_num!=0);
 8002dba:	7dfb      	ldrb	r3, [r7, #23]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d004      	beq.n	8002dca <uvp6_stop_proc+0x76>
 8002dc0:	7dbb      	ldrb	r3, [r7, #22]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1d1      	bne.n	8002d6a <uvp6_stop_proc+0x16>
 8002dc6:	e000      	b.n	8002dca <uvp6_stop_proc+0x76>
		  if( in_event==UVP6_EVNT_STOP_ACK_RCVD)break;
 8002dc8:	bf00      	nop

	if(retry_busy_num==0){
 8002dca:	7dbb      	ldrb	r3, [r7, #22]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10d      	bne.n	8002dec <uvp6_stop_proc+0x98>
		fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_ERR_BUSY);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fd91 	bl	8003900 <fsm_generate_event>
		fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_UVP6_NOT_STOPPED);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 fd8a 	bl	8003900 <fsm_generate_event>
	}
	if(retry_timeout_num==0){
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10e      	bne.n	8002e10 <uvp6_stop_proc+0xbc>
		fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_ERR_NO_RESPONSE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f240 11fb 	movw	r1, #507	; 0x1fb
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fd80 	bl	8003900 <fsm_generate_event>
		fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_UVP6_NOT_STOPPED);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 fd79 	bl	8003900 <fsm_generate_event>
	}
	else fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_UVP6_STOPPED);
}
 8002e0e:	e006      	b.n	8002e1e <uvp6_stop_proc+0xca>
	else fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_UVP6_STOPPED);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f240 1143 	movw	r1, #323	; 0x143
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 fd71 	bl	8003900 <fsm_generate_event>
}
 8002e1e:	bf00      	nop
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <uvp6_startL_proc>:
uint32_t  uvp6_startL_events[]={UVP6_EVNT_START_ACK_RCVD,
		                        UVP6_EVNT_START_ERR_RCVD};
#define   uvp6_startL_events_num                     2

void uvp6_startL_proc(proc_arg_t* proc_arg)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b086      	sub	sp, #24
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
	uvp6* uvp6_obj=proc_arg->func_self_object;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	613b      	str	r3, [r7, #16]
	uint8_t retry_timeout_num=UVP6_CONNECTION_RETRIES;
 8002e34:	230a      	movs	r3, #10
 8002e36:	75fb      	strb	r3, [r7, #23]
	uint8_t retry_busy_num=UVP6_CONNECTION_RETRIES;
 8002e38:	230a      	movs	r3, #10
 8002e3a:	75bb      	strb	r3, [r7, #22]
	uint32_t in_event;
	F_RES    res;

	do{
	 uvp6_send_cmd(uvp6_obj,UVP6_CMD_START_L_ACQ,NULL);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2103      	movs	r1, #3
 8002e40:	6938      	ldr	r0, [r7, #16]
 8002e42:	f7fe fca1 	bl	8001788 <uvp6_send_cmd>
	 res=fsm_take_event(proc_arg->inQ_handle,&in_event,UVP6_RESPONSE_TIMEOUT);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f107 0108 	add.w	r1, r7, #8
 8002e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 fd63 	bl	800391e <fsm_take_event>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	73fb      	strb	r3, [r7, #15]
	 if(res==F_OK){
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10e      	bne.n	8002e80 <uvp6_startL_proc+0x5a>
		  if( in_event==UVP6_EVNT_START_ACK_RCVD)break;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8002e68:	d017      	beq.n	8002e9a <uvp6_startL_proc+0x74>
		  else if( in_event==UVP6_EVNT_START_ERR_RCVD){
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f240 12f9 	movw	r2, #505	; 0x1f9
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d10b      	bne.n	8002e8c <uvp6_startL_proc+0x66>
			  retry_busy_num--;
 8002e74:	7dbb      	ldrb	r3, [r7, #22]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	75bb      	strb	r3, [r7, #22]
			  retry_timeout_num=UVP6_CONNECTION_RETRIES;
 8002e7a:	230a      	movs	r3, #10
 8002e7c:	75fb      	strb	r3, [r7, #23]
 8002e7e:	e005      	b.n	8002e8c <uvp6_startL_proc+0x66>
			  // here should be more detailed evnt
		  }
	 }
	 else if(res==F_TIMEOUT) retry_timeout_num--;
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d102      	bne.n	8002e8c <uvp6_startL_proc+0x66>
 8002e86:	7dfb      	ldrb	r3, [r7, #23]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	75fb      	strb	r3, [r7, #23]
	}while(retry_timeout_num!=0 && retry_busy_num!=0);
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d004      	beq.n	8002e9c <uvp6_startL_proc+0x76>
 8002e92:	7dbb      	ldrb	r3, [r7, #22]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1d1      	bne.n	8002e3c <uvp6_startL_proc+0x16>
 8002e98:	e000      	b.n	8002e9c <uvp6_startL_proc+0x76>
		  if( in_event==UVP6_EVNT_START_ACK_RCVD)break;
 8002e9a:	bf00      	nop

	if(retry_busy_num==0){
 8002e9c:	7dbb      	ldrb	r3, [r7, #22]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10d      	bne.n	8002ebe <uvp6_startL_proc+0x98>
		fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_ERR_BUSY);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fd28 	bl	8003900 <fsm_generate_event>
		fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_UVP6_NOT_STARTED);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f240 1141 	movw	r1, #321	; 0x141
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 fd21 	bl	8003900 <fsm_generate_event>
	}
	if(retry_timeout_num==0){
 8002ebe:	7dfb      	ldrb	r3, [r7, #23]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10e      	bne.n	8002ee2 <uvp6_startL_proc+0xbc>
		fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_ERR_NO_RESPONSE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f240 11fb 	movw	r1, #507	; 0x1fb
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fd17 	bl	8003900 <fsm_generate_event>
		fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_UVP6_NOT_STARTED);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f240 1141 	movw	r1, #321	; 0x141
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fd10 	bl	8003900 <fsm_generate_event>
	}
	else fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_STARTED_LOW_PROFILE);
}
 8002ee0:	e006      	b.n	8002ef0 <uvp6_startL_proc+0xca>
	else fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_STARTED_LOW_PROFILE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f240 11fd 	movw	r1, #509	; 0x1fd
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fd08 	bl	8003900 <fsm_generate_event>
}
 8002ef0:	bf00      	nop
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <uvp6_startH_proc>:
uint32_t  uvp6_startH_events[]={UVP6_EVNT_START_ACK_RCVD,
		                        UVP6_EVNT_START_ERR_RCVD};
#define   uvp6_startH_events_num                      2

void uvp6_startH_proc(proc_arg_t* proc_arg)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
	uvp6* uvp6_obj=proc_arg->func_self_object;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	613b      	str	r3, [r7, #16]
	uint8_t retry_timeout_num=UVP6_CONNECTION_RETRIES;
 8002f06:	230a      	movs	r3, #10
 8002f08:	75fb      	strb	r3, [r7, #23]
	uint8_t retry_busy_num=UVP6_CONNECTION_RETRIES;
 8002f0a:	230a      	movs	r3, #10
 8002f0c:	75bb      	strb	r3, [r7, #22]
	uint32_t in_event;
	F_RES    res;

	do{
	 uvp6_send_cmd(uvp6_obj,UVP6_CMD_START_H_ACQ,NULL);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2100      	movs	r1, #0
 8002f12:	6938      	ldr	r0, [r7, #16]
 8002f14:	f7fe fc38 	bl	8001788 <uvp6_send_cmd>
	 res=fsm_take_event(proc_arg->inQ_handle,&in_event,UVP6_RESPONSE_TIMEOUT);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f107 0108 	add.w	r1, r7, #8
 8002f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 fcfa 	bl	800391e <fsm_take_event>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	73fb      	strb	r3, [r7, #15]
	 if(res==F_OK){
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10e      	bne.n	8002f52 <uvp6_startH_proc+0x5a>
		  if( in_event==UVP6_EVNT_START_ACK_RCVD)break;
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8002f3a:	d017      	beq.n	8002f6c <uvp6_startH_proc+0x74>
		  else if( in_event==UVP6_EVNT_START_ERR_RCVD){
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f240 12f9 	movw	r2, #505	; 0x1f9
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d10b      	bne.n	8002f5e <uvp6_startH_proc+0x66>
			  retry_busy_num--;
 8002f46:	7dbb      	ldrb	r3, [r7, #22]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	75bb      	strb	r3, [r7, #22]
			  retry_timeout_num=UVP6_CONNECTION_RETRIES;
 8002f4c:	230a      	movs	r3, #10
 8002f4e:	75fb      	strb	r3, [r7, #23]
 8002f50:	e005      	b.n	8002f5e <uvp6_startH_proc+0x66>
			  // here should be more detailed evnt
		  }
	 }
	 else if(res==F_TIMEOUT) retry_timeout_num--;
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d102      	bne.n	8002f5e <uvp6_startH_proc+0x66>
 8002f58:	7dfb      	ldrb	r3, [r7, #23]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	75fb      	strb	r3, [r7, #23]
	}while(retry_timeout_num!=0 && retry_busy_num!=0);
 8002f5e:	7dfb      	ldrb	r3, [r7, #23]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d004      	beq.n	8002f6e <uvp6_startH_proc+0x76>
 8002f64:	7dbb      	ldrb	r3, [r7, #22]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1d1      	bne.n	8002f0e <uvp6_startH_proc+0x16>
 8002f6a:	e000      	b.n	8002f6e <uvp6_startH_proc+0x76>
		  if( in_event==UVP6_EVNT_START_ACK_RCVD)break;
 8002f6c:	bf00      	nop

	if(retry_busy_num==0){
 8002f6e:	7dbb      	ldrb	r3, [r7, #22]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10d      	bne.n	8002f90 <uvp6_startH_proc+0x98>
		fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_ERR_BUSY);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fcbf 	bl	8003900 <fsm_generate_event>
		fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_UVP6_NOT_STARTED);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f240 1141 	movw	r1, #321	; 0x141
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fcb8 	bl	8003900 <fsm_generate_event>
	}
	if(retry_timeout_num==0){
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10e      	bne.n	8002fb4 <uvp6_startH_proc+0xbc>
		fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_ERR_NO_RESPONSE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f240 11fb 	movw	r1, #507	; 0x1fb
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fcae 	bl	8003900 <fsm_generate_event>
		fsm_generate_event(proc_arg->outQ_handle,FSM_EVNT_UVP6_NOT_STARTED);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f240 1141 	movw	r1, #321	; 0x141
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fca7 	bl	8003900 <fsm_generate_event>
	}
	else fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_STARTED_HIGH_PROFILE);
}
 8002fb2:	e006      	b.n	8002fc2 <uvp6_startH_proc+0xca>
	else fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_STARTED_HIGH_PROFILE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 fc9f 	bl	8003900 <fsm_generate_event>
}
 8002fc2:	bf00      	nop
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <uvp6_lpm_data_agg_proc>:
		                              UVP6_EVNT_LPM_DATA_BLOC_END_REACHED,
									  FSM_EVNT_READY_FOR_LPM_DATA};
#define   uvp6_lpm_data_agg_events_num                3

void uvp6_lpm_data_agg_proc(proc_arg_t* proc_arg)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
	uvp6* uvp6_obj=proc_arg->func_self_object;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	613b      	str	r3, [r7, #16]
	uint32_t in_event;

	while(1)
	{
	 if(fsm_take_event(proc_arg->inQ_handle,&in_event,osWaitForever)==F_OK){
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f107 010c 	add.w	r1, r7, #12
 8002fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fc99 	bl	800391e <fsm_take_event>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f3      	bne.n	8002fda <uvp6_lpm_data_agg_proc+0xe>
	   if(in_event==UVP6_EVNT_LPM_DATA_RCVD){
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f240 12f5 	movw	r2, #501	; 0x1f5
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d151      	bne.n	80030a0 <uvp6_lpm_data_agg_proc+0xd4>
		 lpm_buffer_num_of_msgs++;
 8002ffc:	4b41      	ldr	r3, [pc, #260]	; (8003104 <uvp6_lpm_data_agg_proc+0x138>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	3301      	adds	r3, #1
 8003002:	4a40      	ldr	r2, [pc, #256]	; (8003104 <uvp6_lpm_data_agg_proc+0x138>)
 8003004:	6013      	str	r3, [r2, #0]
		 if(lpm_buffer_num_of_msgs==1){
 8003006:	4b3f      	ldr	r3, [pc, #252]	; (8003104 <uvp6_lpm_data_agg_proc+0x138>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d129      	bne.n	8003062 <uvp6_lpm_data_agg_proc+0x96>
		   //bloc_GPS_lat=glider1.gps_lat;
		   //bloc_GPS_lon=glider1.gps_lon;
		   memcpy(&lpm_messages_buffer,&uvp6_obj->lpm_data,sizeof(uvp6_obj->lpm_data));
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	330f      	adds	r3, #15
 8003012:	4a3d      	ldr	r2, [pc, #244]	; (8003108 <uvp6_lpm_data_agg_proc+0x13c>)
 8003014:	4610      	mov	r0, r2
 8003016:	4619      	mov	r1, r3
 8003018:	23ad      	movs	r3, #173	; 0xad
 800301a:	461a      	mov	r2, r3
 800301c:	f00d fc52 	bl	80108c4 <memcpy>
		   for(int y=0;y<UVP6_NUM_OF_CATEGORIES;y++){
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	e019      	b.n	800305a <uvp6_lpm_data_agg_proc+0x8e>
			lpm_messages_buffer.grey_levels[y]=(lpm_messages_buffer.grey_levels[y]*lpm_messages_buffer.data[y]);
 8003026:	4a38      	ldr	r2, [pc, #224]	; (8003108 <uvp6_lpm_data_agg_proc+0x13c>)
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	3318      	adds	r3, #24
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8003034:	4934      	ldr	r1, [pc, #208]	; (8003108 <uvp6_lpm_data_agg_proc+0x13c>)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	3306      	adds	r3, #6
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8003042:	fb03 f202 	mul.w	r2, r3, r2
 8003046:	4930      	ldr	r1, [pc, #192]	; (8003108 <uvp6_lpm_data_agg_proc+0x13c>)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	3318      	adds	r3, #24
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	f8c3 2005 	str.w	r2, [r3, #5]
		   for(int y=0;y<UVP6_NUM_OF_CATEGORIES;y++){
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	3301      	adds	r3, #1
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b11      	cmp	r3, #17
 800305e:	dde2      	ble.n	8003026 <uvp6_lpm_data_agg_proc+0x5a>
 8003060:	e003      	b.n	800306a <uvp6_lpm_data_agg_proc+0x9e>
		   }
		 }
		 else lpm_sum_messages(uvp6_obj,&lpm_messages_buffer);
 8003062:	4929      	ldr	r1, [pc, #164]	; (8003108 <uvp6_lpm_data_agg_proc+0x13c>)
 8003064:	6938      	ldr	r0, [r7, #16]
 8003066:	f7ff fa1d 	bl	80024a4 <lpm_sum_messages>
		 if(lpm_bloc_depth_size==0.0){
 800306a:	4b28      	ldr	r3, [pc, #160]	; (800310c <uvp6_lpm_data_agg_proc+0x140>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f04f 0100 	mov.w	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe f88a 	bl	800118c <__aeabi_fcmpeq>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d041      	beq.n	8003102 <uvp6_lpm_data_agg_proc+0x136>
			if(lpm_aggregate_and_close_bloc(uvp6_obj,lmp_data_bloc_msg,&lpm_messages_buffer,&lpm_buffer_num_of_msgs)==F_OK){
 800307e:	4b21      	ldr	r3, [pc, #132]	; (8003104 <uvp6_lpm_data_agg_proc+0x138>)
 8003080:	4a21      	ldr	r2, [pc, #132]	; (8003108 <uvp6_lpm_data_agg_proc+0x13c>)
 8003082:	4923      	ldr	r1, [pc, #140]	; (8003110 <uvp6_lpm_data_agg_proc+0x144>)
 8003084:	6938      	ldr	r0, [r7, #16]
 8003086:	f7ff fad9 	bl	800263c <lpm_aggregate_and_close_bloc>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1a4      	bne.n	8002fda <uvp6_lpm_data_agg_proc+0xe>
			    fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_LPM_AGG_DATA_READY);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f240 2102 	movw	r1, #514	; 0x202
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fc31 	bl	8003900 <fsm_generate_event>
 800309e:	e79c      	b.n	8002fda <uvp6_lpm_data_agg_proc+0xe>
			}
		 }
	   }
	   else if(in_event==UVP6_EVNT_LPM_DATA_BLOC_END_REACHED){
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f240 2201 	movw	r2, #513	; 0x201
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d11c      	bne.n	80030e4 <uvp6_lpm_data_agg_proc+0x118>
		    if(lpm_buffer_num_of_msgs>0){
 80030aa:	4b16      	ldr	r3, [pc, #88]	; (8003104 <uvp6_lpm_data_agg_proc+0x138>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d010      	beq.n	80030d4 <uvp6_lpm_data_agg_proc+0x108>
			  if(lpm_aggregate_and_close_bloc(uvp6_obj,lmp_data_bloc_msg,&lpm_messages_buffer,&lpm_buffer_num_of_msgs)==F_OK){
 80030b2:	4b14      	ldr	r3, [pc, #80]	; (8003104 <uvp6_lpm_data_agg_proc+0x138>)
 80030b4:	4a14      	ldr	r2, [pc, #80]	; (8003108 <uvp6_lpm_data_agg_proc+0x13c>)
 80030b6:	4916      	ldr	r1, [pc, #88]	; (8003110 <uvp6_lpm_data_agg_proc+0x144>)
 80030b8:	6938      	ldr	r0, [r7, #16]
 80030ba:	f7ff fabf 	bl	800263c <lpm_aggregate_and_close_bloc>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d18a      	bne.n	8002fda <uvp6_lpm_data_agg_proc+0xe>
				fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_LPM_AGG_DATA_READY);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f240 2102 	movw	r1, #514	; 0x202
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fc17 	bl	8003900 <fsm_generate_event>
 80030d2:	e782      	b.n	8002fda <uvp6_lpm_data_agg_proc+0xe>
			  }
		    }
		    else fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_LPM_AGG_NOTHING_TO_SEND);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fc0f 	bl	8003900 <fsm_generate_event>
 80030e2:	e77a      	b.n	8002fda <uvp6_lpm_data_agg_proc+0xe>
	   }
	   else if(in_event==FSM_EVNT_READY_FOR_LPM_DATA){
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80030ea:	f47f af76 	bne.w	8002fda <uvp6_lpm_data_agg_proc+0xe>
		   lpm_buffer_num_of_msgs=0;
 80030ee:	4b05      	ldr	r3, [pc, #20]	; (8003104 <uvp6_lpm_data_agg_proc+0x138>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
		   fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_LPM_BUFFER_CLEARED);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f240 2103 	movw	r1, #515	; 0x203
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 fbff 	bl	8003900 <fsm_generate_event>
	 if(fsm_take_event(proc_arg->inQ_handle,&in_event,osWaitForever)==F_OK){
 8003102:	e76a      	b.n	8002fda <uvp6_lpm_data_agg_proc+0xe>
 8003104:	20001068 	.word	0x20001068
 8003108:	2000106c 	.word	0x2000106c
 800310c:	20001310 	.word	0x20001310
 8003110:	2000111c 	.word	0x2000111c

08003114 <seaglider_depth_analyzer_proc>:
		                                 UVP6_EVNT_LPM_AGG_DATA_READY,
										 UVP6_EVNT_LPM_BUFFER_CLEARED};
#define seaglider_depth_analyzer_events_num                      3


void seaglider_depth_analyzer_proc(proc_arg_t* proc_arg){
 8003114:	b590      	push	{r4, r7, lr}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

	seaglider* seaglider_obj=proc_arg->func_self_object;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	60fb      	str	r3, [r7, #12]
	uint32_t in_event;
	uvp6_sensor1.profile_zone=UVP6_PROFILE_H;
 8003122:	4b98      	ldr	r3, [pc, #608]	; (8003384 <seaglider_depth_analyzer_proc+0x270>)
 8003124:	2201      	movs	r2, #1
 8003126:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

	while(1)
	{
	 if(fsm_take_event(proc_arg->inQ_handle,&in_event,osWaitForever)==F_OK){
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f107 0108 	add.w	r1, r7, #8
 8003132:	f04f 32ff 	mov.w	r2, #4294967295
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fbf1 	bl	800391e <fsm_take_event>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f3      	bne.n	800312a <seaglider_depth_analyzer_proc+0x16>
	   if(in_event==SEAGLIDER_EVNT_DEPTH_RCVD){
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f240 225e 	movw	r2, #606	; 0x25e
 8003148:	4293      	cmp	r3, r2
 800314a:	f040 812f 	bne.w	80033ac <seaglider_depth_analyzer_proc+0x298>
		   if(seaglider_obj->prev_depth>UVP6_DEPTH_LH_PROFILE&&seaglider_obj->last_depth<=UVP6_DEPTH_LH_PROFILE){
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f8d3 3019 	ldr.w	r3, [r3, #25]
 8003154:	498c      	ldr	r1, [pc, #560]	; (8003388 <seaglider_depth_analyzer_proc+0x274>)
 8003156:	4618      	mov	r0, r3
 8003158:	f7fe f840 	bl	80011dc <__aeabi_fcmpgt>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d015      	beq.n	800318e <seaglider_depth_analyzer_proc+0x7a>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f8d3 3015 	ldr.w	r3, [r3, #21]
 8003168:	4987      	ldr	r1, [pc, #540]	; (8003388 <seaglider_depth_analyzer_proc+0x274>)
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe f822 	bl	80011b4 <__aeabi_fcmple>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00b      	beq.n	800318e <seaglider_depth_analyzer_proc+0x7a>
			   uvp6_sensor1.profile_zone=UVP6_PROFILE_H;
 8003176:	4b83      	ldr	r3, [pc, #524]	; (8003384 <seaglider_depth_analyzer_proc+0x270>)
 8003178:	2201      	movs	r2, #1
 800317a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
			   fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_DEPTH_LH_REACHED_FROM_BOTTOM);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f240 2106 	movw	r1, #518	; 0x206
 8003186:	4618      	mov	r0, r3
 8003188:	f000 fbba 	bl	8003900 <fsm_generate_event>
 800318c:	e01e      	b.n	80031cc <seaglider_depth_analyzer_proc+0xb8>
		   }

		   else if(seaglider_obj->prev_depth<UVP6_DEPTH_LH_PROFILE&&seaglider_obj->last_depth>=UVP6_DEPTH_LH_PROFILE){
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f8d3 3019 	ldr.w	r3, [r3, #25]
 8003194:	497c      	ldr	r1, [pc, #496]	; (8003388 <seaglider_depth_analyzer_proc+0x274>)
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe f802 	bl	80011a0 <__aeabi_fcmplt>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d014      	beq.n	80031cc <seaglider_depth_analyzer_proc+0xb8>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f8d3 3015 	ldr.w	r3, [r3, #21]
 80031a8:	4977      	ldr	r1, [pc, #476]	; (8003388 <seaglider_depth_analyzer_proc+0x274>)
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fe f80c 	bl	80011c8 <__aeabi_fcmpge>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <seaglider_depth_analyzer_proc+0xb8>
			   uvp6_sensor1.profile_zone=UVP6_PROFILE_L;
 80031b6:	4b73      	ldr	r3, [pc, #460]	; (8003384 <seaglider_depth_analyzer_proc+0x270>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
			   fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_DEPTH_LH_REACHED_FROM_TOP);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f240 2105 	movw	r1, #517	; 0x205
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fb9a 	bl	8003900 <fsm_generate_event>
		   }

          if(glider1.last_depth<lpm_bloc_depth_start){
 80031cc:	4b6f      	ldr	r3, [pc, #444]	; (800338c <seaglider_depth_analyzer_proc+0x278>)
 80031ce:	f8d3 3015 	ldr.w	r3, [r3, #21]
 80031d2:	4a6f      	ldr	r2, [pc, #444]	; (8003390 <seaglider_depth_analyzer_proc+0x27c>)
 80031d4:	6812      	ldr	r2, [r2, #0]
 80031d6:	4611      	mov	r1, r2
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd ffe1 	bl	80011a0 <__aeabi_fcmplt>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d066      	beq.n	80032b2 <seaglider_depth_analyzer_proc+0x19e>
            if(glider1.last_depth<(lpm_bloc_depth_start-lpm_bloc_depth_size)||glider1.last_depth<2.0){
 80031e4:	4b69      	ldr	r3, [pc, #420]	; (800338c <seaglider_depth_analyzer_proc+0x278>)
 80031e6:	f8d3 4015 	ldr.w	r4, [r3, #21]
 80031ea:	4623      	mov	r3, r4
 80031ec:	461c      	mov	r4, r3
 80031ee:	4b68      	ldr	r3, [pc, #416]	; (8003390 <seaglider_depth_analyzer_proc+0x27c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a68      	ldr	r2, [pc, #416]	; (8003394 <seaglider_depth_analyzer_proc+0x280>)
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	4611      	mov	r1, r2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fd fd29 	bl	8000c50 <__aeabi_fsub>
 80031fe:	4603      	mov	r3, r0
 8003200:	4619      	mov	r1, r3
 8003202:	4620      	mov	r0, r4
 8003204:	f7fd ffcc 	bl	80011a0 <__aeabi_fcmplt>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10b      	bne.n	8003226 <seaglider_depth_analyzer_proc+0x112>
 800320e:	4b5f      	ldr	r3, [pc, #380]	; (800338c <seaglider_depth_analyzer_proc+0x278>)
 8003210:	f8d3 3015 	ldr.w	r3, [r3, #21]
 8003214:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003218:	4618      	mov	r0, r3
 800321a:	f7fd ffc1 	bl	80011a0 <__aeabi_fcmplt>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 810c 	beq.w	800343e <seaglider_depth_analyzer_proc+0x32a>
              lpm_bloc_depth_start=glider1.last_depth;
 8003226:	4b59      	ldr	r3, [pc, #356]	; (800338c <seaglider_depth_analyzer_proc+0x278>)
 8003228:	f8d3 3015 	ldr.w	r3, [r3, #21]
 800322c:	4a58      	ldr	r2, [pc, #352]	; (8003390 <seaglider_depth_analyzer_proc+0x27c>)
 800322e:	6013      	str	r3, [r2, #0]

       	      if(lpm_bloc_depth_start>1000.0) lpm_bloc_depth_size=20.0;
 8003230:	4b57      	ldr	r3, [pc, #348]	; (8003390 <seaglider_depth_analyzer_proc+0x27c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4958      	ldr	r1, [pc, #352]	; (8003398 <seaglider_depth_analyzer_proc+0x284>)
 8003236:	4618      	mov	r0, r3
 8003238:	f7fd ffd0 	bl	80011dc <__aeabi_fcmpgt>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <seaglider_depth_analyzer_proc+0x136>
 8003242:	4b54      	ldr	r3, [pc, #336]	; (8003394 <seaglider_depth_analyzer_proc+0x280>)
 8003244:	4a55      	ldr	r2, [pc, #340]	; (800339c <seaglider_depth_analyzer_proc+0x288>)
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	e02b      	b.n	80032a2 <seaglider_depth_analyzer_proc+0x18e>
       	      else if(lpm_bloc_depth_start>500.0) lpm_bloc_depth_size=20.0;
 800324a:	4b51      	ldr	r3, [pc, #324]	; (8003390 <seaglider_depth_analyzer_proc+0x27c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4954      	ldr	r1, [pc, #336]	; (80033a0 <seaglider_depth_analyzer_proc+0x28c>)
 8003250:	4618      	mov	r0, r3
 8003252:	f7fd ffc3 	bl	80011dc <__aeabi_fcmpgt>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <seaglider_depth_analyzer_proc+0x150>
 800325c:	4b4d      	ldr	r3, [pc, #308]	; (8003394 <seaglider_depth_analyzer_proc+0x280>)
 800325e:	4a4f      	ldr	r2, [pc, #316]	; (800339c <seaglider_depth_analyzer_proc+0x288>)
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	e01e      	b.n	80032a2 <seaglider_depth_analyzer_proc+0x18e>
       	      else if(lpm_bloc_depth_start>100.0) lpm_bloc_depth_size=10.0;
 8003264:	4b4a      	ldr	r3, [pc, #296]	; (8003390 <seaglider_depth_analyzer_proc+0x27c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4947      	ldr	r1, [pc, #284]	; (8003388 <seaglider_depth_analyzer_proc+0x274>)
 800326a:	4618      	mov	r0, r3
 800326c:	f7fd ffb6 	bl	80011dc <__aeabi_fcmpgt>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <seaglider_depth_analyzer_proc+0x16a>
 8003276:	4b47      	ldr	r3, [pc, #284]	; (8003394 <seaglider_depth_analyzer_proc+0x280>)
 8003278:	4a4a      	ldr	r2, [pc, #296]	; (80033a4 <seaglider_depth_analyzer_proc+0x290>)
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	e011      	b.n	80032a2 <seaglider_depth_analyzer_proc+0x18e>
       	      else if(lpm_bloc_depth_start>2.0) lpm_bloc_depth_size=5.0;
 800327e:	4b44      	ldr	r3, [pc, #272]	; (8003390 <seaglider_depth_analyzer_proc+0x27c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd ffa8 	bl	80011dc <__aeabi_fcmpgt>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <seaglider_depth_analyzer_proc+0x186>
 8003292:	4b40      	ldr	r3, [pc, #256]	; (8003394 <seaglider_depth_analyzer_proc+0x280>)
 8003294:	4a44      	ldr	r2, [pc, #272]	; (80033a8 <seaglider_depth_analyzer_proc+0x294>)
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	e003      	b.n	80032a2 <seaglider_depth_analyzer_proc+0x18e>
       	      else lpm_bloc_depth_size=0.0;
 800329a:	4b3e      	ldr	r3, [pc, #248]	; (8003394 <seaglider_depth_analyzer_proc+0x280>)
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
       	      fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_LPM_DATA_BLOC_END_REACHED);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f240 2101 	movw	r1, #513	; 0x201
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 fb28 	bl	8003900 <fsm_generate_event>
 80032b0:	e73b      	b.n	800312a <seaglider_depth_analyzer_proc+0x16>
            }
          }
          else if (glider1.last_depth>lpm_bloc_depth_start){
 80032b2:	4b36      	ldr	r3, [pc, #216]	; (800338c <seaglider_depth_analyzer_proc+0x278>)
 80032b4:	f8d3 3015 	ldr.w	r3, [r3, #21]
 80032b8:	4a35      	ldr	r2, [pc, #212]	; (8003390 <seaglider_depth_analyzer_proc+0x27c>)
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	4611      	mov	r1, r2
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd ff8c 	bl	80011dc <__aeabi_fcmpgt>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 80b9 	beq.w	800343e <seaglider_depth_analyzer_proc+0x32a>
            if(glider1.last_depth>(lpm_bloc_depth_start+lpm_bloc_depth_size)){
 80032cc:	4b2f      	ldr	r3, [pc, #188]	; (800338c <seaglider_depth_analyzer_proc+0x278>)
 80032ce:	f8d3 4015 	ldr.w	r4, [r3, #21]
 80032d2:	4623      	mov	r3, r4
 80032d4:	461c      	mov	r4, r3
 80032d6:	4b2e      	ldr	r3, [pc, #184]	; (8003390 <seaglider_depth_analyzer_proc+0x27c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a2e      	ldr	r2, [pc, #184]	; (8003394 <seaglider_depth_analyzer_proc+0x280>)
 80032dc:	6812      	ldr	r2, [r2, #0]
 80032de:	4611      	mov	r1, r2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fd fcb7 	bl	8000c54 <__addsf3>
 80032e6:	4603      	mov	r3, r0
 80032e8:	4619      	mov	r1, r3
 80032ea:	4620      	mov	r0, r4
 80032ec:	f7fd ff76 	bl	80011dc <__aeabi_fcmpgt>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 80a3 	beq.w	800343e <seaglider_depth_analyzer_proc+0x32a>
              lpm_bloc_depth_start=glider1.last_depth;
 80032f8:	4b24      	ldr	r3, [pc, #144]	; (800338c <seaglider_depth_analyzer_proc+0x278>)
 80032fa:	f8d3 3015 	ldr.w	r3, [r3, #21]
 80032fe:	4a24      	ldr	r2, [pc, #144]	; (8003390 <seaglider_depth_analyzer_proc+0x27c>)
 8003300:	6013      	str	r3, [r2, #0]

       	      if(lpm_bloc_depth_start>1000.0) lpm_bloc_depth_size=20.0;
 8003302:	4b23      	ldr	r3, [pc, #140]	; (8003390 <seaglider_depth_analyzer_proc+0x27c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4924      	ldr	r1, [pc, #144]	; (8003398 <seaglider_depth_analyzer_proc+0x284>)
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd ff67 	bl	80011dc <__aeabi_fcmpgt>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <seaglider_depth_analyzer_proc+0x208>
 8003314:	4b1f      	ldr	r3, [pc, #124]	; (8003394 <seaglider_depth_analyzer_proc+0x280>)
 8003316:	4a21      	ldr	r2, [pc, #132]	; (800339c <seaglider_depth_analyzer_proc+0x288>)
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	e02b      	b.n	8003374 <seaglider_depth_analyzer_proc+0x260>
       	      else if(lpm_bloc_depth_start>500.0) lpm_bloc_depth_size=20.0;
 800331c:	4b1c      	ldr	r3, [pc, #112]	; (8003390 <seaglider_depth_analyzer_proc+0x27c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	491f      	ldr	r1, [pc, #124]	; (80033a0 <seaglider_depth_analyzer_proc+0x28c>)
 8003322:	4618      	mov	r0, r3
 8003324:	f7fd ff5a 	bl	80011dc <__aeabi_fcmpgt>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <seaglider_depth_analyzer_proc+0x222>
 800332e:	4b19      	ldr	r3, [pc, #100]	; (8003394 <seaglider_depth_analyzer_proc+0x280>)
 8003330:	4a1a      	ldr	r2, [pc, #104]	; (800339c <seaglider_depth_analyzer_proc+0x288>)
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	e01e      	b.n	8003374 <seaglider_depth_analyzer_proc+0x260>
       	      else if(lpm_bloc_depth_start>100.0) lpm_bloc_depth_size=10.0;
 8003336:	4b16      	ldr	r3, [pc, #88]	; (8003390 <seaglider_depth_analyzer_proc+0x27c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4913      	ldr	r1, [pc, #76]	; (8003388 <seaglider_depth_analyzer_proc+0x274>)
 800333c:	4618      	mov	r0, r3
 800333e:	f7fd ff4d 	bl	80011dc <__aeabi_fcmpgt>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <seaglider_depth_analyzer_proc+0x23c>
 8003348:	4b12      	ldr	r3, [pc, #72]	; (8003394 <seaglider_depth_analyzer_proc+0x280>)
 800334a:	4a16      	ldr	r2, [pc, #88]	; (80033a4 <seaglider_depth_analyzer_proc+0x290>)
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	e011      	b.n	8003374 <seaglider_depth_analyzer_proc+0x260>
       	      else if(lpm_bloc_depth_start>2.0) lpm_bloc_depth_size=5.0;
 8003350:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <seaglider_depth_analyzer_proc+0x27c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003358:	4618      	mov	r0, r3
 800335a:	f7fd ff3f 	bl	80011dc <__aeabi_fcmpgt>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <seaglider_depth_analyzer_proc+0x258>
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <seaglider_depth_analyzer_proc+0x280>)
 8003366:	4a10      	ldr	r2, [pc, #64]	; (80033a8 <seaglider_depth_analyzer_proc+0x294>)
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	e003      	b.n	8003374 <seaglider_depth_analyzer_proc+0x260>
       	      else lpm_bloc_depth_size=0.0;
 800336c:	4b09      	ldr	r3, [pc, #36]	; (8003394 <seaglider_depth_analyzer_proc+0x280>)
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
       	      fsm_generate_event(proc_arg->outQ_handle,UVP6_EVNT_LPM_DATA_BLOC_END_REACHED);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f240 2101 	movw	r1, #513	; 0x201
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fabf 	bl	8003900 <fsm_generate_event>
 8003382:	e6d2      	b.n	800312a <seaglider_depth_analyzer_proc+0x16>
 8003384:	20001918 	.word	0x20001918
 8003388:	42c80000 	.word	0x42c80000
 800338c:	200014d8 	.word	0x200014d8
 8003390:	20001314 	.word	0x20001314
 8003394:	20001310 	.word	0x20001310
 8003398:	447a0000 	.word	0x447a0000
 800339c:	41a00000 	.word	0x41a00000
 80033a0:	43fa0000 	.word	0x43fa0000
 80033a4:	41200000 	.word	0x41200000
 80033a8:	40a00000 	.word	0x40a00000
            }
          }

	   }
	   else if(in_event==UVP6_EVNT_LPM_AGG_DATA_READY ||in_event==UVP6_EVNT_LPM_BUFFER_CLEARED){
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f240 2202 	movw	r2, #514	; 0x202
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d005      	beq.n	80033c2 <seaglider_depth_analyzer_proc+0x2ae>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f240 2203 	movw	r2, #515	; 0x203
 80033bc:	4293      	cmp	r3, r2
 80033be:	f47f aeb4 	bne.w	800312a <seaglider_depth_analyzer_proc+0x16>
		   lpm_bloc_depth_start=glider1.last_depth;
 80033c2:	4b1f      	ldr	r3, [pc, #124]	; (8003440 <seaglider_depth_analyzer_proc+0x32c>)
 80033c4:	f8d3 3015 	ldr.w	r3, [r3, #21]
 80033c8:	4a1e      	ldr	r2, [pc, #120]	; (8003444 <seaglider_depth_analyzer_proc+0x330>)
 80033ca:	6013      	str	r3, [r2, #0]
		   if(lpm_bloc_depth_start>1000.0) lpm_bloc_depth_size=20.0;
 80033cc:	4b1d      	ldr	r3, [pc, #116]	; (8003444 <seaglider_depth_analyzer_proc+0x330>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	491d      	ldr	r1, [pc, #116]	; (8003448 <seaglider_depth_analyzer_proc+0x334>)
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fd ff02 	bl	80011dc <__aeabi_fcmpgt>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <seaglider_depth_analyzer_proc+0x2d2>
 80033de:	4b1b      	ldr	r3, [pc, #108]	; (800344c <seaglider_depth_analyzer_proc+0x338>)
 80033e0:	4a1b      	ldr	r2, [pc, #108]	; (8003450 <seaglider_depth_analyzer_proc+0x33c>)
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	e6a1      	b.n	800312a <seaglider_depth_analyzer_proc+0x16>
		   else if(lpm_bloc_depth_start>500.0) lpm_bloc_depth_size=20.0;
 80033e6:	4b17      	ldr	r3, [pc, #92]	; (8003444 <seaglider_depth_analyzer_proc+0x330>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	491a      	ldr	r1, [pc, #104]	; (8003454 <seaglider_depth_analyzer_proc+0x340>)
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fd fef5 	bl	80011dc <__aeabi_fcmpgt>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <seaglider_depth_analyzer_proc+0x2ec>
 80033f8:	4b14      	ldr	r3, [pc, #80]	; (800344c <seaglider_depth_analyzer_proc+0x338>)
 80033fa:	4a15      	ldr	r2, [pc, #84]	; (8003450 <seaglider_depth_analyzer_proc+0x33c>)
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	e694      	b.n	800312a <seaglider_depth_analyzer_proc+0x16>
		   else if(lpm_bloc_depth_start>100.0) lpm_bloc_depth_size=10.0;
 8003400:	4b10      	ldr	r3, [pc, #64]	; (8003444 <seaglider_depth_analyzer_proc+0x330>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4914      	ldr	r1, [pc, #80]	; (8003458 <seaglider_depth_analyzer_proc+0x344>)
 8003406:	4618      	mov	r0, r3
 8003408:	f7fd fee8 	bl	80011dc <__aeabi_fcmpgt>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <seaglider_depth_analyzer_proc+0x306>
 8003412:	4b0e      	ldr	r3, [pc, #56]	; (800344c <seaglider_depth_analyzer_proc+0x338>)
 8003414:	4a11      	ldr	r2, [pc, #68]	; (800345c <seaglider_depth_analyzer_proc+0x348>)
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	e687      	b.n	800312a <seaglider_depth_analyzer_proc+0x16>
		   else if(lpm_bloc_depth_start>2.0) lpm_bloc_depth_size=5.0;
 800341a:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <seaglider_depth_analyzer_proc+0x330>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003422:	4618      	mov	r0, r3
 8003424:	f7fd feda 	bl	80011dc <__aeabi_fcmpgt>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <seaglider_depth_analyzer_proc+0x322>
 800342e:	4b07      	ldr	r3, [pc, #28]	; (800344c <seaglider_depth_analyzer_proc+0x338>)
 8003430:	4a0b      	ldr	r2, [pc, #44]	; (8003460 <seaglider_depth_analyzer_proc+0x34c>)
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	e679      	b.n	800312a <seaglider_depth_analyzer_proc+0x16>
		   else lpm_bloc_depth_size=0.0;
 8003436:	4b05      	ldr	r3, [pc, #20]	; (800344c <seaglider_depth_analyzer_proc+0x338>)
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
	 if(fsm_take_event(proc_arg->inQ_handle,&in_event,osWaitForever)==F_OK){
 800343e:	e674      	b.n	800312a <seaglider_depth_analyzer_proc+0x16>
 8003440:	200014d8 	.word	0x200014d8
 8003444:	20001314 	.word	0x20001314
 8003448:	447a0000 	.word	0x447a0000
 800344c:	20001310 	.word	0x20001310
 8003450:	41a00000 	.word	0x41a00000
 8003454:	43fa0000 	.word	0x43fa0000
 8003458:	42c80000 	.word	0x42c80000
 800345c:	41200000 	.word	0x41200000
 8003460:	40a00000 	.word	0x40a00000

08003464 <seaglider_send_evnt_proc>:


                                       };
#define   seaglider_send_evnt_events_num                                 27
void seaglider_send_evnt_proc(proc_arg_t* proc_arg)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
	seaglider* glider_obj=proc_arg->func_self_object;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	617b      	str	r3, [r7, #20]
    uint32_t in_event;
    F_RES res;
    osDelay(100);
 8003472:	2064      	movs	r0, #100	; 0x64
 8003474:	f00a f813 	bl	800d49e <osDelay>
    while(1)
    {
  	 res=fsm_take_event(proc_arg->inQ_handle,&in_event,osWaitForever);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f107 010c 	add.w	r1, r7, #12
 8003480:	f04f 32ff 	mov.w	r2, #4294967295
 8003484:	4618      	mov	r0, r3
 8003486:	f000 fa4a 	bl	800391e <fsm_take_event>
 800348a:	4603      	mov	r3, r0
 800348c:	74fb      	strb	r3, [r7, #19]
     if(res==F_OK){
 800348e:	7cfb      	ldrb	r3, [r7, #19]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1f1      	bne.n	8003478 <seaglider_send_evnt_proc+0x14>
    	 seaglider_send_evnt(glider_obj,in_event);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4619      	mov	r1, r3
 8003498:	6978      	ldr	r0, [r7, #20]
 800349a:	f001 fa5b 	bl	8004954 <seaglider_send_evnt>
  	 res=fsm_take_event(proc_arg->inQ_handle,&in_event,osWaitForever);
 800349e:	e7eb      	b.n	8003478 <seaglider_send_evnt_proc+0x14>

080034a0 <init_act>:
//---------------- EA tables description END ----------------------


//-----------------BEGIN ACTION FUNCTIONS------------------------------
void  init_act()
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
	change_fsm_to_init();
 80034a4:	f000 f8c0 	bl	8003628 <change_fsm_to_init>
	if(disp_proc_start(&dispatcher1, REPORT_EVENT, NULL)==F_ERR){/*err processing*/}
 80034a8:	2200      	movs	r2, #0
 80034aa:	2101      	movs	r1, #1
 80034ac:	4807      	ldr	r0, [pc, #28]	; (80034cc <init_act+0x2c>)
 80034ae:	f7fe fc5d 	bl	8001d6c <disp_proc_start>
	if(disp_proc_start(&dispatcher1, SEAGLIDER_PROC_DEPTH_ANALYZER, NULL)==F_ERR){/*err processing*/}
 80034b2:	2200      	movs	r2, #0
 80034b4:	210a      	movs	r1, #10
 80034b6:	4805      	ldr	r0, [pc, #20]	; (80034cc <init_act+0x2c>)
 80034b8:	f7fe fc58 	bl	8001d6c <disp_proc_start>
	if(disp_proc_start(&dispatcher1, UVP6_PROC_LPM_DATA_AGG, NULL)==F_ERR){/*err processing*/}
 80034bc:	2200      	movs	r2, #0
 80034be:	2109      	movs	r1, #9
 80034c0:	4802      	ldr	r0, [pc, #8]	; (80034cc <init_act+0x2c>)
 80034c2:	f7fe fc53 	bl	8001d6c <disp_proc_start>
}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20002434 	.word	0x20002434

080034d0 <microsd_init>:

void microsd_init()
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
	if(disp_proc_start(&dispatcher1, MICROSD_INIT, NULL)==F_ERR){/*err processing*/}
 80034d4:	2200      	movs	r2, #0
 80034d6:	2100      	movs	r1, #0
 80034d8:	4802      	ldr	r0, [pc, #8]	; (80034e4 <microsd_init+0x14>)
 80034da:	f7fe fc47 	bl	8001d6c <disp_proc_start>
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20002434 	.word	0x20002434

080034e8 <send_prompt>:

void  send_prompt()
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  seaglider_send_cmd(&glider1,SEAGLIDER_CMD_PROMPT,NULL);
 80034ec:	2200      	movs	r2, #0
 80034ee:	2100      	movs	r1, #0
 80034f0:	4802      	ldr	r0, [pc, #8]	; (80034fc <send_prompt+0x14>)
 80034f2:	f001 fa55 	bl	80049a0 <seaglider_send_cmd>
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	200014d8 	.word	0x200014d8

08003500 <read_settings_from_microsd>:

void  read_settings_from_microsd()
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  if(disp_proc_start(&dispatcher1, LOAD_SETTINGS, NULL)==F_ERR){/*err processing*/}
 8003504:	2200      	movs	r2, #0
 8003506:	2102      	movs	r1, #2
 8003508:	4802      	ldr	r0, [pc, #8]	; (8003514 <read_settings_from_microsd+0x14>)
 800350a:	f7fe fc2f 	bl	8001d6c <disp_proc_start>
}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20002434 	.word	0x20002434

08003518 <upload_last_data>:

void upload_last_data()
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  if(disp_proc_start(&dispatcher1, SEND_DATA, NULL)==F_ERR){/*err processing*/}
 800351c:	2200      	movs	r2, #0
 800351e:	2103      	movs	r1, #3
 8003520:	4802      	ldr	r0, [pc, #8]	; (800352c <upload_last_data+0x14>)
 8003522:	f7fe fc23 	bl	8001d6c <disp_proc_start>
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20002434 	.word	0x20002434

08003530 <config_sensor>:

void config_sensor()
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
	if(uvp6_sensor1.profile_zone==UVP6_PROFILE_H){
 8003534:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <config_sensor+0x34>)
 8003536:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800353a:	2b01      	cmp	r3, #1
 800353c:	d105      	bne.n	800354a <config_sensor+0x1a>
	 if(disp_proc_start(&dispatcher1, UVP6_PROC_START_HIGH_PROFILE, NULL)==F_ERR){/*err processing*/}
 800353e:	2200      	movs	r2, #0
 8003540:	2108      	movs	r1, #8
 8003542:	4809      	ldr	r0, [pc, #36]	; (8003568 <config_sensor+0x38>)
 8003544:	f7fe fc12 	bl	8001d6c <disp_proc_start>
	}
	else if(uvp6_sensor1.profile_zone==UVP6_PROFILE_L){
	 if(disp_proc_start(&dispatcher1, UVP6_PROC_START_LOW_PROFILE, NULL)==F_ERR){/*err processing*/}
	}
}
 8003548:	e009      	b.n	800355e <config_sensor+0x2e>
	else if(uvp6_sensor1.profile_zone==UVP6_PROFILE_L){
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <config_sensor+0x34>)
 800354c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d104      	bne.n	800355e <config_sensor+0x2e>
	 if(disp_proc_start(&dispatcher1, UVP6_PROC_START_LOW_PROFILE, NULL)==F_ERR){/*err processing*/}
 8003554:	2200      	movs	r2, #0
 8003556:	2107      	movs	r1, #7
 8003558:	4803      	ldr	r0, [pc, #12]	; (8003568 <config_sensor+0x38>)
 800355a:	f7fe fc07 	bl	8001d6c <disp_proc_start>
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20001918 	.word	0x20001918
 8003568:	20002434 	.word	0x20002434

0800356c <clear_lpm_data>:
	disp_proc_set_EA_table(&dispatcher1,&fsm_S3_dive);
	fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_DIVE);
}

void clear_lpm_data()
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
	fsm_generate_event(dispatcher1.events_q_Handle,FSM_EVNT_READY_FOR_LPM_DATA);
 8003570:	4b04      	ldr	r3, [pc, #16]	; (8003584 <clear_lpm_data+0x18>)
 8003572:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8003576:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800357a:	4618      	mov	r0, r3
 800357c:	f000 f9c0 	bl	8003900 <fsm_generate_event>
}
 8003580:	bf00      	nop
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20002434 	.word	0x20002434

08003588 <save_data>:

void save_data()
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
	fsm_generate_event(dispatcher1.events_q_Handle,UVP6_EVNT_LPM_DATA_BLOC_END_REACHED);
 800358c:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <save_data+0x18>)
 800358e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8003592:	f240 2101 	movw	r1, #513	; 0x201
 8003596:	4618      	mov	r0, r3
 8003598:	f000 f9b2 	bl	8003900 <fsm_generate_event>
}
 800359c:	bf00      	nop
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	20002434 	.word	0x20002434

080035a4 <write_data>:

void write_data()
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
	if(disp_proc_start(&dispatcher1, FILE_WRITE, NULL)==F_ERR){/*err processing*/}
 80035a8:	2200      	movs	r2, #0
 80035aa:	210b      	movs	r1, #11
 80035ac:	4802      	ldr	r0, [pc, #8]	; (80035b8 <write_data+0x14>)
 80035ae:	f7fe fbdd 	bl	8001d6c <disp_proc_start>
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20002434 	.word	0x20002434

080035bc <uvp6_stop>:
void uvp6_stop()
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
	if(disp_proc_start(&dispatcher1, UVP6_PROC_STOP, NULL)==F_ERR){/*err processing*/}
 80035c0:	2200      	movs	r2, #0
 80035c2:	2106      	movs	r1, #6
 80035c4:	4802      	ldr	r0, [pc, #8]	; (80035d0 <uvp6_stop+0x14>)
 80035c6:	f7fe fbd1 	bl	8001d6c <disp_proc_start>
}
 80035ca:	bf00      	nop
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20002434 	.word	0x20002434

080035d4 <close_file>:

void close_file()
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
	if(disp_proc_start(&dispatcher1, CLOSE_FILES, NULL)==F_ERR){/*err processing*/}
 80035d8:	2200      	movs	r2, #0
 80035da:	2105      	movs	r1, #5
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <close_file+0x14>)
 80035de:	f7fe fbc5 	bl	8001d6c <disp_proc_start>
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20002434 	.word	0x20002434

080035ec <stop_and_report>:

void stop_and_report()
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
	fsm_generate_event(dispatcher1.events_q_Handle,FSM_EVNT_UVP6_ERR);
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <stop_and_report+0x34>)
 80035f2:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80035f6:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 f980 	bl	8003900 <fsm_generate_event>
	disp_proc_set_EA_table(&dispatcher1,&fsm_S1_idle);
 8003600:	4908      	ldr	r1, [pc, #32]	; (8003624 <stop_and_report+0x38>)
 8003602:	4807      	ldr	r0, [pc, #28]	; (8003620 <stop_and_report+0x34>)
 8003604:	f7fe fc08 	bl	8001e18 <disp_proc_set_EA_table>
	fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_IDLE);
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <stop_and_report+0x34>)
 800360a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800360e:	21c9      	movs	r1, #201	; 0xc9
 8003610:	4618      	mov	r0, r3
 8003612:	f000 f975 	bl	8003900 <fsm_generate_event>
	close_file();
 8003616:	f7ff ffdd 	bl	80035d4 <close_file>
}
 800361a:	bf00      	nop
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20002434 	.word	0x20002434
 8003624:	2000018c 	.word	0x2000018c

08003628 <change_fsm_to_init>:


void  change_fsm_to_init()
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  disp_proc_set_EA_table(&dispatcher1,&fsm_S0_init);
 800362c:	4906      	ldr	r1, [pc, #24]	; (8003648 <change_fsm_to_init+0x20>)
 800362e:	4807      	ldr	r0, [pc, #28]	; (800364c <change_fsm_to_init+0x24>)
 8003630:	f7fe fbf2 	bl	8001e18 <disp_proc_set_EA_table>
  fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_INIT);
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <change_fsm_to_init+0x24>)
 8003636:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800363a:	21c8      	movs	r1, #200	; 0xc8
 800363c:	4618      	mov	r0, r3
 800363e:	f000 f95f 	bl	8003900 <fsm_generate_event>
}
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	20000184 	.word	0x20000184
 800364c:	20002434 	.word	0x20002434

08003650 <change_fsm_from_init_to_idle>:

void  change_fsm_from_init_to_idle()
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  disp_proc_set_EA_table(&dispatcher1,&fsm_S1_idle);
 8003654:	4907      	ldr	r1, [pc, #28]	; (8003674 <change_fsm_from_init_to_idle+0x24>)
 8003656:	4808      	ldr	r0, [pc, #32]	; (8003678 <change_fsm_from_init_to_idle+0x28>)
 8003658:	f7fe fbde 	bl	8001e18 <disp_proc_set_EA_table>
  fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_IDLE);
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <change_fsm_from_init_to_idle+0x28>)
 800365e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8003662:	21c9      	movs	r1, #201	; 0xc9
 8003664:	4618      	mov	r0, r3
 8003666:	f000 f94b 	bl	8003900 <fsm_generate_event>
  send_prompt();
 800366a:	f7ff ff3d 	bl	80034e8 <send_prompt>
}
 800366e:	bf00      	nop
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	2000018c 	.word	0x2000018c
 8003678:	20002434 	.word	0x20002434

0800367c <change_fsm_from_idle_to_starting>:

void  change_fsm_from_idle_to_starting()
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  disp_proc_set_EA_table(&dispatcher1,&fsm_S2_starting);
 8003680:	4908      	ldr	r1, [pc, #32]	; (80036a4 <change_fsm_from_idle_to_starting+0x28>)
 8003682:	4809      	ldr	r0, [pc, #36]	; (80036a8 <change_fsm_from_idle_to_starting+0x2c>)
 8003684:	f7fe fbc8 	bl	8001e18 <disp_proc_set_EA_table>
  if(disp_proc_start(&dispatcher1, OPEN_FILES, NULL)==F_ERR){/*err processing*/}
 8003688:	2200      	movs	r2, #0
 800368a:	2104      	movs	r1, #4
 800368c:	4806      	ldr	r0, [pc, #24]	; (80036a8 <change_fsm_from_idle_to_starting+0x2c>)
 800368e:	f7fe fb6d 	bl	8001d6c <disp_proc_start>
  fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_STARTING);
 8003692:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <change_fsm_from_idle_to_starting+0x2c>)
 8003694:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8003698:	21ca      	movs	r1, #202	; 0xca
 800369a:	4618      	mov	r0, r3
 800369c:	f000 f930 	bl	8003900 <fsm_generate_event>
}
 80036a0:	bf00      	nop
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20000194 	.word	0x20000194
 80036a8:	20002434 	.word	0x20002434

080036ac <change_fsm_from_starting_to_dive>:

void  change_fsm_from_starting_to_dive()
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  disp_proc_set_EA_table(&dispatcher1,&fsm_S3_dive);
 80036b0:	4907      	ldr	r1, [pc, #28]	; (80036d0 <change_fsm_from_starting_to_dive+0x24>)
 80036b2:	4808      	ldr	r0, [pc, #32]	; (80036d4 <change_fsm_from_starting_to_dive+0x28>)
 80036b4:	f7fe fbb0 	bl	8001e18 <disp_proc_set_EA_table>
  fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_DIVE);
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <change_fsm_from_starting_to_dive+0x28>)
 80036ba:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80036be:	21cb      	movs	r1, #203	; 0xcb
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 f91d 	bl	8003900 <fsm_generate_event>
  send_prompt();
 80036c6:	f7ff ff0f 	bl	80034e8 <send_prompt>
}
 80036ca:	bf00      	nop
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	2000019c 	.word	0x2000019c
 80036d4:	20002434 	.word	0x20002434

080036d8 <change_fsm_from_dive_to_stopping>:

void  change_fsm_from_dive_to_stopping()
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  disp_proc_set_EA_table(&dispatcher1,&fsm_S4_stopping);
 80036dc:	4908      	ldr	r1, [pc, #32]	; (8003700 <change_fsm_from_dive_to_stopping+0x28>)
 80036de:	4809      	ldr	r0, [pc, #36]	; (8003704 <change_fsm_from_dive_to_stopping+0x2c>)
 80036e0:	f7fe fb9a 	bl	8001e18 <disp_proc_set_EA_table>
  if(disp_proc_start(&dispatcher1, UVP6_PROC_STOP, NULL)==F_ERR){/*err processing*/}
 80036e4:	2200      	movs	r2, #0
 80036e6:	2106      	movs	r1, #6
 80036e8:	4806      	ldr	r0, [pc, #24]	; (8003704 <change_fsm_from_dive_to_stopping+0x2c>)
 80036ea:	f7fe fb3f 	bl	8001d6c <disp_proc_start>
  fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_STOPPING);
 80036ee:	4b05      	ldr	r3, [pc, #20]	; (8003704 <change_fsm_from_dive_to_stopping+0x2c>)
 80036f0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80036f4:	21cc      	movs	r1, #204	; 0xcc
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 f902 	bl	8003900 <fsm_generate_event>
}
 80036fc:	bf00      	nop
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	200001a4 	.word	0x200001a4
 8003704:	20002434 	.word	0x20002434

08003708 <change_fsm_from_stopping_to_idle>:



void  change_fsm_from_stopping_to_idle()
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  disp_proc_set_EA_table(&dispatcher1,&fsm_S1_idle);
 800370c:	4907      	ldr	r1, [pc, #28]	; (800372c <change_fsm_from_stopping_to_idle+0x24>)
 800370e:	4808      	ldr	r0, [pc, #32]	; (8003730 <change_fsm_from_stopping_to_idle+0x28>)
 8003710:	f7fe fb82 	bl	8001e18 <disp_proc_set_EA_table>
  fsm_generate_event(dispatcher1.events_q_Handle,FSM_CHANGE_STATE_TO_IDLE);
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <change_fsm_from_stopping_to_idle+0x28>)
 8003716:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800371a:	21c9      	movs	r1, #201	; 0xc9
 800371c:	4618      	mov	r0, r3
 800371e:	f000 f8ef 	bl	8003900 <fsm_generate_event>
  send_prompt();
 8003722:	f7ff fee1 	bl	80034e8 <send_prompt>
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	2000018c 	.word	0x2000018c
 8003730:	20002434 	.word	0x20002434

08003734 <fsm_init>:

//----------------- END  ACTION FUNCTIONS------------------------------


void fsm_init()
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af04      	add	r7, sp, #16
	disp_proc_init_func(&dispatcher1, MICROSD_INIT,&microsd_init_proc,NULL,PROC_CREATE_NEW_Q,NULL,microsd_init_events_num,microsd_init_events);
 800373a:	4b56      	ldr	r3, [pc, #344]	; (8003894 <fsm_init+0x160>)
 800373c:	9303      	str	r3, [sp, #12]
 800373e:	2300      	movs	r3, #0
 8003740:	9302      	str	r3, [sp, #8]
 8003742:	2300      	movs	r3, #0
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	2300      	movs	r3, #0
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	2300      	movs	r3, #0
 800374c:	4a52      	ldr	r2, [pc, #328]	; (8003898 <fsm_init+0x164>)
 800374e:	2100      	movs	r1, #0
 8003750:	4852      	ldr	r0, [pc, #328]	; (800389c <fsm_init+0x168>)
 8003752:	f7fe fab3 	bl	8001cbc <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, REPORT_EVENT,&seaglider_send_evnt_proc,NULL,PROC_CREATE_NEW_Q,&glider1,seaglider_send_evnt_events_num,seaglider_send_evnt_events);
 8003756:	4b52      	ldr	r3, [pc, #328]	; (80038a0 <fsm_init+0x16c>)
 8003758:	9303      	str	r3, [sp, #12]
 800375a:	231b      	movs	r3, #27
 800375c:	9302      	str	r3, [sp, #8]
 800375e:	4b51      	ldr	r3, [pc, #324]	; (80038a4 <fsm_init+0x170>)
 8003760:	9301      	str	r3, [sp, #4]
 8003762:	2300      	movs	r3, #0
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	2300      	movs	r3, #0
 8003768:	4a4f      	ldr	r2, [pc, #316]	; (80038a8 <fsm_init+0x174>)
 800376a:	2101      	movs	r1, #1
 800376c:	484b      	ldr	r0, [pc, #300]	; (800389c <fsm_init+0x168>)
 800376e:	f7fe faa5 	bl	8001cbc <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, LOAD_SETTINGS,&load_settings_proc,NULL,PROC_CREATE_NEW_Q,&glider1,load_settings_events_num,load_settings_events);
 8003772:	4b4e      	ldr	r3, [pc, #312]	; (80038ac <fsm_init+0x178>)
 8003774:	9303      	str	r3, [sp, #12]
 8003776:	2300      	movs	r3, #0
 8003778:	9302      	str	r3, [sp, #8]
 800377a:	4b4a      	ldr	r3, [pc, #296]	; (80038a4 <fsm_init+0x170>)
 800377c:	9301      	str	r3, [sp, #4]
 800377e:	2300      	movs	r3, #0
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	2300      	movs	r3, #0
 8003784:	4a4a      	ldr	r2, [pc, #296]	; (80038b0 <fsm_init+0x17c>)
 8003786:	2102      	movs	r1, #2
 8003788:	4844      	ldr	r0, [pc, #272]	; (800389c <fsm_init+0x168>)
 800378a:	f7fe fa97 	bl	8001cbc <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, SEND_DATA,&send_data_proc,NULL,PROC_CREATE_NEW_Q,NULL,send_data_events_num,send_data_events);
 800378e:	4b49      	ldr	r3, [pc, #292]	; (80038b4 <fsm_init+0x180>)
 8003790:	9303      	str	r3, [sp, #12]
 8003792:	2300      	movs	r3, #0
 8003794:	9302      	str	r3, [sp, #8]
 8003796:	2300      	movs	r3, #0
 8003798:	9301      	str	r3, [sp, #4]
 800379a:	2300      	movs	r3, #0
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	2300      	movs	r3, #0
 80037a0:	4a45      	ldr	r2, [pc, #276]	; (80038b8 <fsm_init+0x184>)
 80037a2:	2103      	movs	r1, #3
 80037a4:	483d      	ldr	r0, [pc, #244]	; (800389c <fsm_init+0x168>)
 80037a6:	f7fe fa89 	bl	8001cbc <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, OPEN_FILES,&open_files_proc,NULL,PROC_CREATE_NEW_Q,NULL,open_files_events_num,open_files_events);
 80037aa:	4b44      	ldr	r3, [pc, #272]	; (80038bc <fsm_init+0x188>)
 80037ac:	9303      	str	r3, [sp, #12]
 80037ae:	2300      	movs	r3, #0
 80037b0:	9302      	str	r3, [sp, #8]
 80037b2:	2300      	movs	r3, #0
 80037b4:	9301      	str	r3, [sp, #4]
 80037b6:	2300      	movs	r3, #0
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	2300      	movs	r3, #0
 80037bc:	4a40      	ldr	r2, [pc, #256]	; (80038c0 <fsm_init+0x18c>)
 80037be:	2104      	movs	r1, #4
 80037c0:	4836      	ldr	r0, [pc, #216]	; (800389c <fsm_init+0x168>)
 80037c2:	f7fe fa7b 	bl	8001cbc <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, CLOSE_FILES,&close_files_proc,NULL,PROC_CREATE_NEW_Q,NULL,close_files_events_num,close_files_events);
 80037c6:	4b3f      	ldr	r3, [pc, #252]	; (80038c4 <fsm_init+0x190>)
 80037c8:	9303      	str	r3, [sp, #12]
 80037ca:	2300      	movs	r3, #0
 80037cc:	9302      	str	r3, [sp, #8]
 80037ce:	2300      	movs	r3, #0
 80037d0:	9301      	str	r3, [sp, #4]
 80037d2:	2300      	movs	r3, #0
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	2300      	movs	r3, #0
 80037d8:	4a3b      	ldr	r2, [pc, #236]	; (80038c8 <fsm_init+0x194>)
 80037da:	2105      	movs	r1, #5
 80037dc:	482f      	ldr	r0, [pc, #188]	; (800389c <fsm_init+0x168>)
 80037de:	f7fe fa6d 	bl	8001cbc <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, UVP6_PROC_STOP,&uvp6_stop_proc,NULL,PROC_CREATE_NEW_Q,&uvp6_sensor1,uvp6_stop_events_num,uvp6_stop_events);
 80037e2:	4b3a      	ldr	r3, [pc, #232]	; (80038cc <fsm_init+0x198>)
 80037e4:	9303      	str	r3, [sp, #12]
 80037e6:	2302      	movs	r3, #2
 80037e8:	9302      	str	r3, [sp, #8]
 80037ea:	4b39      	ldr	r3, [pc, #228]	; (80038d0 <fsm_init+0x19c>)
 80037ec:	9301      	str	r3, [sp, #4]
 80037ee:	2300      	movs	r3, #0
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	2300      	movs	r3, #0
 80037f4:	4a37      	ldr	r2, [pc, #220]	; (80038d4 <fsm_init+0x1a0>)
 80037f6:	2106      	movs	r1, #6
 80037f8:	4828      	ldr	r0, [pc, #160]	; (800389c <fsm_init+0x168>)
 80037fa:	f7fe fa5f 	bl	8001cbc <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, UVP6_PROC_START_LOW_PROFILE,&uvp6_startL_proc,NULL,PROC_CREATE_NEW_Q,&uvp6_sensor1,uvp6_startL_events_num,uvp6_startL_events);
 80037fe:	4b36      	ldr	r3, [pc, #216]	; (80038d8 <fsm_init+0x1a4>)
 8003800:	9303      	str	r3, [sp, #12]
 8003802:	2302      	movs	r3, #2
 8003804:	9302      	str	r3, [sp, #8]
 8003806:	4b32      	ldr	r3, [pc, #200]	; (80038d0 <fsm_init+0x19c>)
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	2300      	movs	r3, #0
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	2300      	movs	r3, #0
 8003810:	4a32      	ldr	r2, [pc, #200]	; (80038dc <fsm_init+0x1a8>)
 8003812:	2107      	movs	r1, #7
 8003814:	4821      	ldr	r0, [pc, #132]	; (800389c <fsm_init+0x168>)
 8003816:	f7fe fa51 	bl	8001cbc <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, UVP6_PROC_START_HIGH_PROFILE,&uvp6_startH_proc,NULL,PROC_CREATE_NEW_Q,&uvp6_sensor1,uvp6_startH_events_num,uvp6_startH_events);
 800381a:	4b31      	ldr	r3, [pc, #196]	; (80038e0 <fsm_init+0x1ac>)
 800381c:	9303      	str	r3, [sp, #12]
 800381e:	2302      	movs	r3, #2
 8003820:	9302      	str	r3, [sp, #8]
 8003822:	4b2b      	ldr	r3, [pc, #172]	; (80038d0 <fsm_init+0x19c>)
 8003824:	9301      	str	r3, [sp, #4]
 8003826:	2300      	movs	r3, #0
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	2300      	movs	r3, #0
 800382c:	4a2d      	ldr	r2, [pc, #180]	; (80038e4 <fsm_init+0x1b0>)
 800382e:	2108      	movs	r1, #8
 8003830:	481a      	ldr	r0, [pc, #104]	; (800389c <fsm_init+0x168>)
 8003832:	f7fe fa43 	bl	8001cbc <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, UVP6_PROC_LPM_DATA_AGG,&uvp6_lpm_data_agg_proc,NULL,PROC_CREATE_NEW_Q,&uvp6_sensor1,uvp6_lpm_data_agg_events_num,uvp6_lpm_data_agg_events);
 8003836:	4b2c      	ldr	r3, [pc, #176]	; (80038e8 <fsm_init+0x1b4>)
 8003838:	9303      	str	r3, [sp, #12]
 800383a:	2303      	movs	r3, #3
 800383c:	9302      	str	r3, [sp, #8]
 800383e:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <fsm_init+0x19c>)
 8003840:	9301      	str	r3, [sp, #4]
 8003842:	2300      	movs	r3, #0
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	2300      	movs	r3, #0
 8003848:	4a28      	ldr	r2, [pc, #160]	; (80038ec <fsm_init+0x1b8>)
 800384a:	2109      	movs	r1, #9
 800384c:	4813      	ldr	r0, [pc, #76]	; (800389c <fsm_init+0x168>)
 800384e:	f7fe fa35 	bl	8001cbc <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, SEAGLIDER_PROC_DEPTH_ANALYZER,&seaglider_depth_analyzer_proc,NULL,PROC_CREATE_NEW_Q,&glider1,seaglider_depth_analyzer_events_num,seaglider_depth_analyzer_events);
 8003852:	4b27      	ldr	r3, [pc, #156]	; (80038f0 <fsm_init+0x1bc>)
 8003854:	9303      	str	r3, [sp, #12]
 8003856:	2303      	movs	r3, #3
 8003858:	9302      	str	r3, [sp, #8]
 800385a:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <fsm_init+0x170>)
 800385c:	9301      	str	r3, [sp, #4]
 800385e:	2300      	movs	r3, #0
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	2300      	movs	r3, #0
 8003864:	4a23      	ldr	r2, [pc, #140]	; (80038f4 <fsm_init+0x1c0>)
 8003866:	210a      	movs	r1, #10
 8003868:	480c      	ldr	r0, [pc, #48]	; (800389c <fsm_init+0x168>)
 800386a:	f7fe fa27 	bl	8001cbc <disp_proc_init_func>
	disp_proc_init_func(&dispatcher1, FILE_WRITE,&write_to_file_proc,NULL,PROC_CREATE_NEW_Q,NULL,write_to_file_events_num,write_to_file_events);
 800386e:	4b22      	ldr	r3, [pc, #136]	; (80038f8 <fsm_init+0x1c4>)
 8003870:	9303      	str	r3, [sp, #12]
 8003872:	2300      	movs	r3, #0
 8003874:	9302      	str	r3, [sp, #8]
 8003876:	2300      	movs	r3, #0
 8003878:	9301      	str	r3, [sp, #4]
 800387a:	2300      	movs	r3, #0
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	2300      	movs	r3, #0
 8003880:	4a1e      	ldr	r2, [pc, #120]	; (80038fc <fsm_init+0x1c8>)
 8003882:	210b      	movs	r1, #11
 8003884:	4805      	ldr	r0, [pc, #20]	; (800389c <fsm_init+0x168>)
 8003886:	f7fe fa19 	bl	8001cbc <disp_proc_init_func>


	//start action
	init_act();
 800388a:	f7ff fe09 	bl	80034a0 <init_act>
}
 800388e:	bf00      	nop
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20001320 	.word	0x20001320
 8003898:	08002985 	.word	0x08002985
 800389c:	20002434 	.word	0x20002434
 80038a0:	20000040 	.word	0x20000040
 80038a4:	200014d8 	.word	0x200014d8
 80038a8:	08003465 	.word	0x08003465
 80038ac:	20001324 	.word	0x20001324
 80038b0:	080029e5 	.word	0x080029e5
 80038b4:	20001328 	.word	0x20001328
 80038b8:	08002a25 	.word	0x08002a25
 80038bc:	20001328 	.word	0x20001328
 80038c0:	08002b39 	.word	0x08002b39
 80038c4:	20001328 	.word	0x20001328
 80038c8:	08002cb1 	.word	0x08002cb1
 80038cc:	20000010 	.word	0x20000010
 80038d0:	20001918 	.word	0x20001918
 80038d4:	08002d55 	.word	0x08002d55
 80038d8:	20000018 	.word	0x20000018
 80038dc:	08002e27 	.word	0x08002e27
 80038e0:	20000020 	.word	0x20000020
 80038e4:	08002ef9 	.word	0x08002ef9
 80038e8:	20000028 	.word	0x20000028
 80038ec:	08002fcd 	.word	0x08002fcd
 80038f0:	20000034 	.word	0x20000034
 80038f4:	08003115 	.word	0x08003115
 80038f8:	20001328 	.word	0x20001328
 80038fc:	08002cfd 	.word	0x08002cfd

08003900 <fsm_generate_event>:

void fsm_generate_event(osMessageQId out_Q,uint32_t event)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
	osMessagePut(out_Q,event,osWaitForever);
 800390a:	f04f 32ff 	mov.w	r2, #4294967295
 800390e:	6839      	ldr	r1, [r7, #0]
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f009 feb7 	bl	800d684 <osMessagePut>
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <fsm_take_event>:

F_RES fsm_take_event(osMessageQId Q_handle,uint32_t* event,uint32_t wait_time)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b088      	sub	sp, #32
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	607a      	str	r2, [r7, #4]
	osEvent res;
	res=osMessageGet(Q_handle,wait_time);
 800392a:	f107 0314 	add.w	r3, r7, #20
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	68f9      	ldr	r1, [r7, #12]
 8003932:	4618      	mov	r0, r3
 8003934:	f009 fee6 	bl	800d704 <osMessageGet>
	if(res.status==osEventMessage){
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2b10      	cmp	r3, #16
 800393c:	d104      	bne.n	8003948 <fsm_take_event+0x2a>
		*event=res.value.v;
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	601a      	str	r2, [r3, #0]
		return F_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	e005      	b.n	8003954 <fsm_take_event+0x36>
	}
	else  if(res.status==osEventTimeout)return F_TIMEOUT;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2b40      	cmp	r3, #64	; 0x40
 800394c:	d101      	bne.n	8003952 <fsm_take_event+0x34>
 800394e:	2302      	movs	r3, #2
 8003950:	e000      	b.n	8003954 <fsm_take_event+0x36>
	return F_ERR;
 8003952:	2301      	movs	r3, #1
}
 8003954:	4618      	mov	r0, r3
 8003956:	3720      	adds	r7, #32
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800395c:	b5b0      	push	{r4, r5, r7, lr}
 800395e:	b0d2      	sub	sp, #328	; 0x148
 8003960:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003962:	f001 fdf5 	bl	8005550 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003966:	f000 f95d 	bl	8003c24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800396a:	f000 fa4d 	bl	8003e08 <MX_GPIO_Init>
  MX_DMA_Init();
 800396e:	f000 fa25 	bl	8003dbc <MX_DMA_Init>
  MX_SPI1_Init();
 8003972:	f000 f999 	bl	8003ca8 <MX_SPI1_Init>
  MX_UART5_Init();
 8003976:	f000 f9cd 	bl	8003d14 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800397a:	f000 f9f5 	bl	8003d68 <MX_USART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of seaglider_uart_q_sem */
  osSemaphoreDef(seaglider_uart_q_sem);
 800397e:	2300      	movs	r3, #0
 8003980:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003984:	2300      	movs	r3, #0
 8003986:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  seaglider_uart_q_semHandle = osSemaphoreCreate(osSemaphore(seaglider_uart_q_sem), 1);
 800398a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800398e:	2101      	movs	r1, #1
 8003990:	4618      	mov	r0, r3
 8003992:	f009 fd98 	bl	800d4c6 <osSemaphoreCreate>
 8003996:	4603      	mov	r3, r0
 8003998:	4a88      	ldr	r2, [pc, #544]	; (8003bbc <main+0x260>)
 800399a:	6013      	str	r3, [r2, #0]

  /* definition and creation of uvp6_uart_q_sem */
  osSemaphoreDef(uvp6_uart_q_sem);
 800399c:	2300      	movs	r3, #0
 800399e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80039a2:	2300      	movs	r3, #0
 80039a4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  uvp6_uart_q_semHandle = osSemaphoreCreate(osSemaphore(uvp6_uart_q_sem), 1);
 80039a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80039ac:	2101      	movs	r1, #1
 80039ae:	4618      	mov	r0, r3
 80039b0:	f009 fd89 	bl	800d4c6 <osSemaphoreCreate>
 80039b4:	4603      	mov	r3, r0
 80039b6:	4a82      	ldr	r2, [pc, #520]	; (8003bc0 <main+0x264>)
 80039b8:	6013      	str	r3, [r2, #0]

  /* definition and creation of seaglider_uart_media_sem */
  osSemaphoreDef(seaglider_uart_media_sem);
 80039ba:	2300      	movs	r3, #0
 80039bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80039c0:	2300      	movs	r3, #0
 80039c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  seaglider_uart_media_semHandle = osSemaphoreCreate(osSemaphore(seaglider_uart_media_sem), 1);
 80039c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039ca:	2101      	movs	r1, #1
 80039cc:	4618      	mov	r0, r3
 80039ce:	f009 fd7a 	bl	800d4c6 <osSemaphoreCreate>
 80039d2:	4603      	mov	r3, r0
 80039d4:	4a7b      	ldr	r2, [pc, #492]	; (8003bc4 <main+0x268>)
 80039d6:	6013      	str	r3, [r2, #0]

  /* definition and creation of uvp6_uart_media_sem */
  osSemaphoreDef(uvp6_uart_media_sem);
 80039d8:	2300      	movs	r3, #0
 80039da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80039de:	2300      	movs	r3, #0
 80039e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  uvp6_uart_media_semHandle = osSemaphoreCreate(osSemaphore(uvp6_uart_media_sem), 1);
 80039e4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80039e8:	2101      	movs	r1, #1
 80039ea:	4618      	mov	r0, r3
 80039ec:	f009 fd6b 	bl	800d4c6 <osSemaphoreCreate>
 80039f0:	4603      	mov	r3, r0
 80039f2:	4a75      	ldr	r2, [pc, #468]	; (8003bc8 <main+0x26c>)
 80039f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of microSD_sem */
  osSemaphoreDef(microSD_sem);
 80039f6:	2300      	movs	r3, #0
 80039f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80039fc:	2300      	movs	r3, #0
 80039fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  microSD_semHandle = osSemaphoreCreate(osSemaphore(microSD_sem), 1);
 8003a02:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003a06:	2101      	movs	r1, #1
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f009 fd5c 	bl	800d4c6 <osSemaphoreCreate>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	4a6e      	ldr	r2, [pc, #440]	; (8003bcc <main+0x270>)
 8003a12:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of worker_cmd_q */
  osMessageQDef(worker_cmd_q, 16, uint32_t);
 8003a14:	4b6e      	ldr	r3, [pc, #440]	; (8003bd0 <main+0x274>)
 8003a16:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8003a1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  worker_cmd_qHandle = osMessageCreate(osMessageQ(worker_cmd_q), NULL);
 8003a20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a24:	2100      	movs	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f009 fe04 	bl	800d634 <osMessageCreate>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	4a69      	ldr	r2, [pc, #420]	; (8003bd4 <main+0x278>)
 8003a30:	6013      	str	r3, [r2, #0]

  /* definition and creation of events_q */
  osMessageQDef(events_q, 16, uint32_t);
 8003a32:	4b67      	ldr	r3, [pc, #412]	; (8003bd0 <main+0x274>)
 8003a34:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8003a38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  events_qHandle = osMessageCreate(osMessageQ(events_q), NULL);
 8003a3e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003a42:	2100      	movs	r1, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f009 fdf5 	bl	800d634 <osMessageCreate>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	4a62      	ldr	r2, [pc, #392]	; (8003bd8 <main+0x27c>)
 8003a4e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8003a50:	4b62      	ldr	r3, [pc, #392]	; (8003bdc <main+0x280>)
 8003a52:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 8003a56:	461d      	mov	r5, r3
 8003a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003a60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003a64:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f009 fccb 	bl	800d406 <osThreadCreate>
 8003a70:	4603      	mov	r3, r0
 8003a72:	4a5b      	ldr	r2, [pc, #364]	; (8003be0 <main+0x284>)
 8003a74:	6013      	str	r3, [r2, #0]

  /* definition and creation of glider_uart_tx_ */
  osThreadDef(glider_uart_tx_, glider_uart_tx_f, osPriorityNormal, 0, 256);
 8003a76:	4b5b      	ldr	r3, [pc, #364]	; (8003be4 <main+0x288>)
 8003a78:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8003a7c:	461d      	mov	r5, r3
 8003a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003a86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  glider_uart_tx_Handle = osThreadCreate(osThread(glider_uart_tx_), NULL);
 8003a8a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003a8e:	2100      	movs	r1, #0
 8003a90:	4618      	mov	r0, r3
 8003a92:	f009 fcb8 	bl	800d406 <osThreadCreate>
 8003a96:	4603      	mov	r3, r0
 8003a98:	4a53      	ldr	r2, [pc, #332]	; (8003be8 <main+0x28c>)
 8003a9a:	6013      	str	r3, [r2, #0]

  /* definition and creation of worker1_t */
  osThreadDef(worker1_t, worker_f, osPriorityNormal, 0, 768);
 8003a9c:	4b53      	ldr	r3, [pc, #332]	; (8003bec <main+0x290>)
 8003a9e:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8003aa2:	461d      	mov	r5, r3
 8003aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003aa8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003aac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  worker1_tHandle = osThreadCreate(osThread(worker1_t), NULL);
 8003ab0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f009 fca5 	bl	800d406 <osThreadCreate>
 8003abc:	4603      	mov	r3, r0
 8003abe:	4a4c      	ldr	r2, [pc, #304]	; (8003bf0 <main+0x294>)
 8003ac0:	6013      	str	r3, [r2, #0]

  /* definition and creation of worker2_t */
  osThreadDef(worker2_t, worker_f, osPriorityNormal, 0, 768);
 8003ac2:	4b4c      	ldr	r3, [pc, #304]	; (8003bf4 <main+0x298>)
 8003ac4:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8003ac8:	461d      	mov	r5, r3
 8003aca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003acc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ace:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003ad2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  worker2_tHandle = osThreadCreate(osThread(worker2_t), NULL);
 8003ad6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003ada:	2100      	movs	r1, #0
 8003adc:	4618      	mov	r0, r3
 8003ade:	f009 fc92 	bl	800d406 <osThreadCreate>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	4a44      	ldr	r2, [pc, #272]	; (8003bf8 <main+0x29c>)
 8003ae6:	6013      	str	r3, [r2, #0]

  /* definition and creation of worker3_t */
  osThreadDef(worker3_t, worker_f, osPriorityNormal, 0, 768);
 8003ae8:	4b44      	ldr	r3, [pc, #272]	; (8003bfc <main+0x2a0>)
 8003aea:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8003aee:	461d      	mov	r5, r3
 8003af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003af4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003af8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  worker3_tHandle = osThreadCreate(osThread(worker3_t), NULL);
 8003afc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003b00:	2100      	movs	r1, #0
 8003b02:	4618      	mov	r0, r3
 8003b04:	f009 fc7f 	bl	800d406 <osThreadCreate>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	4a3d      	ldr	r2, [pc, #244]	; (8003c00 <main+0x2a4>)
 8003b0c:	6013      	str	r3, [r2, #0]

  /* definition and creation of worker4_t */
  osThreadDef(worker4_t, worker_f, osPriorityNormal, 0, 768);
 8003b0e:	4b3d      	ldr	r3, [pc, #244]	; (8003c04 <main+0x2a8>)
 8003b10:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8003b14:	461d      	mov	r5, r3
 8003b16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  worker4_tHandle = osThreadCreate(osThread(worker4_t), NULL);
 8003b22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b26:	2100      	movs	r1, #0
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f009 fc6c 	bl	800d406 <osThreadCreate>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	4a35      	ldr	r2, [pc, #212]	; (8003c08 <main+0x2ac>)
 8003b32:	6013      	str	r3, [r2, #0]

  /* definition and creation of sensor_uart_tx_ */
  osThreadDef(sensor_uart_tx_, sensor_uart_tx_f, osPriorityNormal, 0, 256);
 8003b34:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003b38:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b3c:	4a33      	ldr	r2, [pc, #204]	; (8003c0c <main+0x2b0>)
 8003b3e:	461c      	mov	r4, r3
 8003b40:	4615      	mov	r5, r2
 8003b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensor_uart_tx_Handle = osThreadCreate(osThread(sensor_uart_tx_), NULL);
 8003b4e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b52:	2100      	movs	r1, #0
 8003b54:	4618      	mov	r0, r3
 8003b56:	f009 fc56 	bl	800d406 <osThreadCreate>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	4a2c      	ldr	r2, [pc, #176]	; (8003c10 <main+0x2b4>)
 8003b5e:	6013      	str	r3, [r2, #0]

  /* definition and creation of worker5_t */
  osThreadDef(worker5_t, worker_f, osPriorityNormal, 0, 768);
 8003b60:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003b64:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b68:	4a2a      	ldr	r2, [pc, #168]	; (8003c14 <main+0x2b8>)
 8003b6a:	461c      	mov	r4, r3
 8003b6c:	4615      	mov	r5, r2
 8003b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  worker5_tHandle = osThreadCreate(osThread(worker5_t), NULL);
 8003b7a:	f107 0320 	add.w	r3, r7, #32
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f009 fc40 	bl	800d406 <osThreadCreate>
 8003b86:	4603      	mov	r3, r0
 8003b88:	4a23      	ldr	r2, [pc, #140]	; (8003c18 <main+0x2bc>)
 8003b8a:	6013      	str	r3, [r2, #0]

  /* definition and creation of worker6_t */
  osThreadDef(worker6_t, worker_f, osPriorityNormal, 0, 768);
 8003b8c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003b90:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003b94:	4a21      	ldr	r2, [pc, #132]	; (8003c1c <main+0x2c0>)
 8003b96:	461c      	mov	r4, r3
 8003b98:	4615      	mov	r5, r2
 8003b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003ba2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  worker6_tHandle = osThreadCreate(osThread(worker6_t), NULL);
 8003ba6:	1d3b      	adds	r3, r7, #4
 8003ba8:	2100      	movs	r1, #0
 8003baa:	4618      	mov	r0, r3
 8003bac:	f009 fc2b 	bl	800d406 <osThreadCreate>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	4a1b      	ldr	r2, [pc, #108]	; (8003c20 <main+0x2c4>)
 8003bb4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003bb6:	f009 fc1f 	bl	800d3f8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003bba:	e7fe      	b.n	8003bba <main+0x25e>
 8003bbc:	200014c4 	.word	0x200014c4
 8003bc0:	200014c8 	.word	0x200014c8
 8003bc4:	200014cc 	.word	0x200014cc
 8003bc8:	200014d0 	.word	0x200014d0
 8003bcc:	200014d4 	.word	0x200014d4
 8003bd0:	080150e8 	.word	0x080150e8
 8003bd4:	200014bc 	.word	0x200014bc
 8003bd8:	200014c0 	.word	0x200014c0
 8003bdc:	080150f8 	.word	0x080150f8
 8003be0:	20001498 	.word	0x20001498
 8003be4:	08015114 	.word	0x08015114
 8003be8:	2000149c 	.word	0x2000149c
 8003bec:	08015130 	.word	0x08015130
 8003bf0:	200014a0 	.word	0x200014a0
 8003bf4:	0801514c 	.word	0x0801514c
 8003bf8:	200014a4 	.word	0x200014a4
 8003bfc:	08015168 	.word	0x08015168
 8003c00:	200014a8 	.word	0x200014a8
 8003c04:	08015184 	.word	0x08015184
 8003c08:	200014ac 	.word	0x200014ac
 8003c0c:	080151a0 	.word	0x080151a0
 8003c10:	200014b0 	.word	0x200014b0
 8003c14:	080151bc 	.word	0x080151bc
 8003c18:	200014b4 	.word	0x200014b4
 8003c1c:	080151d8 	.word	0x080151d8
 8003c20:	200014b8 	.word	0x200014b8

08003c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b090      	sub	sp, #64	; 0x40
 8003c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c2a:	f107 0318 	add.w	r3, r7, #24
 8003c2e:	2228      	movs	r2, #40	; 0x28
 8003c30:	2100      	movs	r1, #0
 8003c32:	4618      	mov	r0, r3
 8003c34:	f00c fe54 	bl	80108e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c38:	1d3b      	adds	r3, r7, #4
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	605a      	str	r2, [r3, #4]
 8003c40:	609a      	str	r2, [r3, #8]
 8003c42:	60da      	str	r2, [r3, #12]
 8003c44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c46:	2302      	movs	r3, #2
 8003c48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c4e:	2310      	movs	r3, #16
 8003c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c52:	2302      	movs	r3, #2
 8003c54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8003c56:	2300      	movs	r3, #0
 8003c58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003c5a:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8003c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c60:	f107 0318 	add.w	r3, r7, #24
 8003c64:	4618      	mov	r0, r3
 8003c66:	f002 fb27 	bl	80062b8 <HAL_RCC_OscConfig>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8003c70:	f000 fa5a 	bl	8004128 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c74:	230f      	movs	r3, #15
 8003c76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003c8a:	1d3b      	adds	r3, r7, #4
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f002 fd94 	bl	80067bc <HAL_RCC_ClockConfig>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8003c9a:	f000 fa45 	bl	8004128 <Error_Handler>
  }
}
 8003c9e:	bf00      	nop
 8003ca0:	3740      	adds	r7, #64	; 0x40
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003cac:	4b17      	ldr	r3, [pc, #92]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003cae:	4a18      	ldr	r2, [pc, #96]	; (8003d10 <MX_SPI1_Init+0x68>)
 8003cb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003cb2:	4b16      	ldr	r3, [pc, #88]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003cb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003cb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003cba:	4b14      	ldr	r3, [pc, #80]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cc0:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cc6:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ccc:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cd2:	4b0e      	ldr	r3, [pc, #56]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003cda:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003cdc:	2208      	movs	r2, #8
 8003cde:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ce0:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ce6:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cec:	4b07      	ldr	r3, [pc, #28]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003cf2:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003cf4:	220a      	movs	r2, #10
 8003cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003cf8:	4804      	ldr	r0, [pc, #16]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003cfa:	f002 ff1f 	bl	8006b3c <HAL_SPI_Init>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003d04:	f000 fa10 	bl	8004128 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d08:	bf00      	nop
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20001328 	.word	0x20001328
 8003d10:	40013000 	.word	0x40013000

08003d14 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003d18:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <MX_UART5_Init+0x4c>)
 8003d1a:	4a12      	ldr	r2, [pc, #72]	; (8003d64 <MX_UART5_Init+0x50>)
 8003d1c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003d1e:	4b10      	ldr	r3, [pc, #64]	; (8003d60 <MX_UART5_Init+0x4c>)
 8003d20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d24:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003d26:	4b0e      	ldr	r3, [pc, #56]	; (8003d60 <MX_UART5_Init+0x4c>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003d2c:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <MX_UART5_Init+0x4c>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003d32:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <MX_UART5_Init+0x4c>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003d38:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <MX_UART5_Init+0x4c>)
 8003d3a:	220c      	movs	r2, #12
 8003d3c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d3e:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <MX_UART5_Init+0x4c>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d44:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <MX_UART5_Init+0x4c>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003d4a:	4805      	ldr	r0, [pc, #20]	; (8003d60 <MX_UART5_Init+0x4c>)
 8003d4c:	f003 fd44 	bl	80077d8 <HAL_UART_Init>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003d56:	f000 f9e7 	bl	8004128 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003d5a:	bf00      	nop
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20001408 	.word	0x20001408
 8003d64:	40005000 	.word	0x40005000

08003d68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d6c:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <MX_USART1_UART_Init+0x4c>)
 8003d6e:	4a12      	ldr	r2, [pc, #72]	; (8003db8 <MX_USART1_UART_Init+0x50>)
 8003d70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8003d72:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <MX_USART1_UART_Init+0x4c>)
 8003d74:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003d78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d7a:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <MX_USART1_UART_Init+0x4c>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d80:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <MX_USART1_UART_Init+0x4c>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d86:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <MX_USART1_UART_Init+0x4c>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d8c:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <MX_USART1_UART_Init+0x4c>)
 8003d8e:	220c      	movs	r2, #12
 8003d90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d92:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <MX_USART1_UART_Init+0x4c>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d98:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <MX_USART1_UART_Init+0x4c>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d9e:	4805      	ldr	r0, [pc, #20]	; (8003db4 <MX_USART1_UART_Init+0x4c>)
 8003da0:	f003 fd1a 	bl	80077d8 <HAL_UART_Init>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003daa:	f000 f9bd 	bl	8004128 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003dae:	bf00      	nop
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20001450 	.word	0x20001450
 8003db8:	40013800 	.word	0x40013800

08003dbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003dc2:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <MX_DMA_Init+0x48>)
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	4a0f      	ldr	r2, [pc, #60]	; (8003e04 <MX_DMA_Init+0x48>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	6153      	str	r3, [r2, #20]
 8003dce:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <MX_DMA_Init+0x48>)
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	607b      	str	r3, [r7, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2105      	movs	r1, #5
 8003dde:	200c      	movs	r0, #12
 8003de0:	f001 fc9d 	bl	800571e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003de4:	200c      	movs	r0, #12
 8003de6:	f001 fcb6 	bl	8005756 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8003dea:	2200      	movs	r2, #0
 8003dec:	2105      	movs	r1, #5
 8003dee:	200d      	movs	r0, #13
 8003df0:	f001 fc95 	bl	800571e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003df4:	200d      	movs	r0, #13
 8003df6:	f001 fcae 	bl	8005756 <HAL_NVIC_EnableIRQ>

}
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40021000 	.word	0x40021000

08003e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e0e:	f107 0310 	add.w	r3, r7, #16
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	605a      	str	r2, [r3, #4]
 8003e18:	609a      	str	r2, [r3, #8]
 8003e1a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e1c:	4b23      	ldr	r3, [pc, #140]	; (8003eac <MX_GPIO_Init+0xa4>)
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	4a22      	ldr	r2, [pc, #136]	; (8003eac <MX_GPIO_Init+0xa4>)
 8003e22:	f043 0320 	orr.w	r3, r3, #32
 8003e26:	6193      	str	r3, [r2, #24]
 8003e28:	4b20      	ldr	r3, [pc, #128]	; (8003eac <MX_GPIO_Init+0xa4>)
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e34:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <MX_GPIO_Init+0xa4>)
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	4a1c      	ldr	r2, [pc, #112]	; (8003eac <MX_GPIO_Init+0xa4>)
 8003e3a:	f043 0304 	orr.w	r3, r3, #4
 8003e3e:	6193      	str	r3, [r2, #24]
 8003e40:	4b1a      	ldr	r3, [pc, #104]	; (8003eac <MX_GPIO_Init+0xa4>)
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e4c:	4b17      	ldr	r3, [pc, #92]	; (8003eac <MX_GPIO_Init+0xa4>)
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	4a16      	ldr	r2, [pc, #88]	; (8003eac <MX_GPIO_Init+0xa4>)
 8003e52:	f043 0310 	orr.w	r3, r3, #16
 8003e56:	6193      	str	r3, [r2, #24]
 8003e58:	4b14      	ldr	r3, [pc, #80]	; (8003eac <MX_GPIO_Init+0xa4>)
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	607b      	str	r3, [r7, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e64:	4b11      	ldr	r3, [pc, #68]	; (8003eac <MX_GPIO_Init+0xa4>)
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	4a10      	ldr	r2, [pc, #64]	; (8003eac <MX_GPIO_Init+0xa4>)
 8003e6a:	f043 0308 	orr.w	r3, r3, #8
 8003e6e:	6193      	str	r3, [r2, #24]
 8003e70:	4b0e      	ldr	r3, [pc, #56]	; (8003eac <MX_GPIO_Init+0xa4>)
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_SD1_GPIO_Port, SS_SD1_Pin, GPIO_PIN_SET);
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	2102      	movs	r1, #2
 8003e80:	480b      	ldr	r0, [pc, #44]	; (8003eb0 <MX_GPIO_Init+0xa8>)
 8003e82:	f002 fa01 	bl	8006288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS_SD1_Pin */
  GPIO_InitStruct.Pin = SS_SD1_Pin;
 8003e86:	2302      	movs	r3, #2
 8003e88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e92:	2303      	movs	r3, #3
 8003e94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SS_SD1_GPIO_Port, &GPIO_InitStruct);
 8003e96:	f107 0310 	add.w	r3, r7, #16
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4804      	ldr	r0, [pc, #16]	; (8003eb0 <MX_GPIO_Init+0xa8>)
 8003e9e:	f002 f85f 	bl	8005f60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003ea2:	bf00      	nop
 8003ea4:	3720      	adds	r7, #32
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	40010800 	.word	0x40010800

08003eb4 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */
uint8_t tmp1;
uint8_t tmp2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 if(huart==&SENSOR_UART)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a11      	ldr	r2, [pc, #68]	; (8003f04 <HAL_UART_RxCpltCallback+0x50>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d10b      	bne.n	8003edc <HAL_UART_RxCpltCallback+0x28>
 {
	 uvp6_media_process_byte(&uvp6_sensor1,uvp6_sensor1.media_rx_byte);
 8003ec4:	4b10      	ldr	r3, [pc, #64]	; (8003f08 <HAL_UART_RxCpltCallback+0x54>)
 8003ec6:	7b1b      	ldrb	r3, [r3, #12]
 8003ec8:	4619      	mov	r1, r3
 8003eca:	480f      	ldr	r0, [pc, #60]	; (8003f08 <HAL_UART_RxCpltCallback+0x54>)
 8003ecc:	f7fd fba8 	bl	8001620 <uvp6_media_process_byte>
	 HAL_UART_Receive_IT(&SENSOR_UART,&(uvp6_sensor1.media_rx_byte),1);
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	490e      	ldr	r1, [pc, #56]	; (8003f0c <HAL_UART_RxCpltCallback+0x58>)
 8003ed4:	480b      	ldr	r0, [pc, #44]	; (8003f04 <HAL_UART_RxCpltCallback+0x50>)
 8003ed6:	f003 fd87 	bl	80079e8 <HAL_UART_Receive_IT>
 else if(huart==&GLIDER_UART)
 {
	 seaglider_media_process_byte(&glider1,glider1.media_rx_byte);
	 HAL_UART_Receive_IT(&GLIDER_UART,&(glider1.media_rx_byte),1);
 }
}
 8003eda:	e00e      	b.n	8003efa <HAL_UART_RxCpltCallback+0x46>
 else if(huart==&GLIDER_UART)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a0c      	ldr	r2, [pc, #48]	; (8003f10 <HAL_UART_RxCpltCallback+0x5c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d10a      	bne.n	8003efa <HAL_UART_RxCpltCallback+0x46>
	 seaglider_media_process_byte(&glider1,glider1.media_rx_byte);
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <HAL_UART_RxCpltCallback+0x60>)
 8003ee6:	7c1b      	ldrb	r3, [r3, #16]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	480a      	ldr	r0, [pc, #40]	; (8003f14 <HAL_UART_RxCpltCallback+0x60>)
 8003eec:	f000 fc97 	bl	800481e <seaglider_media_process_byte>
	 HAL_UART_Receive_IT(&GLIDER_UART,&(glider1.media_rx_byte),1);
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	4909      	ldr	r1, [pc, #36]	; (8003f18 <HAL_UART_RxCpltCallback+0x64>)
 8003ef4:	4806      	ldr	r0, [pc, #24]	; (8003f10 <HAL_UART_RxCpltCallback+0x5c>)
 8003ef6:	f003 fd77 	bl	80079e8 <HAL_UART_Receive_IT>
}
 8003efa:	bf00      	nop
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20001450 	.word	0x20001450
 8003f08:	20001918 	.word	0x20001918
 8003f0c:	20001924 	.word	0x20001924
 8003f10:	20001408 	.word	0x20001408
 8003f14:	200014d8 	.word	0x200014d8
 8003f18:	200014e8 	.word	0x200014e8

08003f1c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]

 if(huart==&SENSOR_UART)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a18      	ldr	r2, [pc, #96]	; (8003f88 <HAL_UART_TxCpltCallback+0x6c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d112      	bne.n	8003f52 <HAL_UART_TxCpltCallback+0x36>
 {
	 if(uvp6_media_get_byte(&uvp6_sensor1,&tmp2)==UVP6_F_OK)
 8003f2c:	4917      	ldr	r1, [pc, #92]	; (8003f8c <HAL_UART_TxCpltCallback+0x70>)
 8003f2e:	4818      	ldr	r0, [pc, #96]	; (8003f90 <HAL_UART_TxCpltCallback+0x74>)
 8003f30:	f7fd fc0f 	bl	8001752 <uvp6_media_get_byte>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d105      	bne.n	8003f46 <HAL_UART_TxCpltCallback+0x2a>
	 {
	    HAL_UART_Transmit_IT(&SENSOR_UART,&tmp2,1);
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	4913      	ldr	r1, [pc, #76]	; (8003f8c <HAL_UART_TxCpltCallback+0x70>)
 8003f3e:	4812      	ldr	r0, [pc, #72]	; (8003f88 <HAL_UART_TxCpltCallback+0x6c>)
 8003f40:	f003 fd1d 	bl	800797e <HAL_UART_Transmit_IT>
	 {
	    HAL_UART_Transmit_IT(&GLIDER_UART,&tmp1,1);
	 }
	 else osSemaphoreRelease(seaglider_uart_media_semHandle);
 }
}
 8003f44:	e01b      	b.n	8003f7e <HAL_UART_TxCpltCallback+0x62>
	 else osSemaphoreRelease(uvp6_uart_media_semHandle);
 8003f46:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <HAL_UART_TxCpltCallback+0x78>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f009 fb3c 	bl	800d5c8 <osSemaphoreRelease>
}
 8003f50:	e015      	b.n	8003f7e <HAL_UART_TxCpltCallback+0x62>
 else if(huart==&GLIDER_UART)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a10      	ldr	r2, [pc, #64]	; (8003f98 <HAL_UART_TxCpltCallback+0x7c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d111      	bne.n	8003f7e <HAL_UART_TxCpltCallback+0x62>
	 if(seaglider_media_get_byte(&glider1,&tmp1)==SEAGLIDER_F_OK)
 8003f5a:	4910      	ldr	r1, [pc, #64]	; (8003f9c <HAL_UART_TxCpltCallback+0x80>)
 8003f5c:	4810      	ldr	r0, [pc, #64]	; (8003fa0 <HAL_UART_TxCpltCallback+0x84>)
 8003f5e:	f000 fcde 	bl	800491e <seaglider_media_get_byte>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d105      	bne.n	8003f74 <HAL_UART_TxCpltCallback+0x58>
	    HAL_UART_Transmit_IT(&GLIDER_UART,&tmp1,1);
 8003f68:	2201      	movs	r2, #1
 8003f6a:	490c      	ldr	r1, [pc, #48]	; (8003f9c <HAL_UART_TxCpltCallback+0x80>)
 8003f6c:	480a      	ldr	r0, [pc, #40]	; (8003f98 <HAL_UART_TxCpltCallback+0x7c>)
 8003f6e:	f003 fd06 	bl	800797e <HAL_UART_Transmit_IT>
}
 8003f72:	e004      	b.n	8003f7e <HAL_UART_TxCpltCallback+0x62>
	 else osSemaphoreRelease(seaglider_uart_media_semHandle);
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_UART_TxCpltCallback+0x88>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f009 fb25 	bl	800d5c8 <osSemaphoreRelease>
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20001450 	.word	0x20001450
 8003f8c:	200025c9 	.word	0x200025c9
 8003f90:	20001918 	.word	0x20001918
 8003f94:	200014d0 	.word	0x200014d0
 8003f98:	20001408 	.word	0x20001408
 8003f9c:	200025c8 	.word	0x200025c8
 8003fa0:	200014d8 	.word	0x200014d8
 8003fa4:	200014cc 	.word	0x200014cc

08003fa8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  seaglider_init(&glider1,events_qHandle,seaglider_uart_q_semHandle);
 8003fb0:	4b13      	ldr	r3, [pc, #76]	; (8004000 <StartDefaultTask+0x58>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a13      	ldr	r2, [pc, #76]	; (8004004 <StartDefaultTask+0x5c>)
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4813      	ldr	r0, [pc, #76]	; (8004008 <StartDefaultTask+0x60>)
 8003fbc:	f000 fbbe 	bl	800473c <seaglider_init>
  HAL_UART_Receive_IT(&GLIDER_UART,&(glider1.media_rx_byte),1);
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	4912      	ldr	r1, [pc, #72]	; (800400c <StartDefaultTask+0x64>)
 8003fc4:	4812      	ldr	r0, [pc, #72]	; (8004010 <StartDefaultTask+0x68>)
 8003fc6:	f003 fd0f 	bl	80079e8 <HAL_UART_Receive_IT>

  uvp6_init(&uvp6_sensor1,events_qHandle);
 8003fca:	4b0d      	ldr	r3, [pc, #52]	; (8004000 <StartDefaultTask+0x58>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4810      	ldr	r0, [pc, #64]	; (8004014 <StartDefaultTask+0x6c>)
 8003fd2:	f7fd fadf 	bl	8001594 <uvp6_init>
  HAL_UART_Receive_IT(&SENSOR_UART,&(uvp6_sensor1.media_rx_byte),1);
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	490f      	ldr	r1, [pc, #60]	; (8004018 <StartDefaultTask+0x70>)
 8003fda:	4810      	ldr	r0, [pc, #64]	; (800401c <StartDefaultTask+0x74>)
 8003fdc:	f003 fd04 	bl	80079e8 <HAL_UART_Receive_IT>

  disp_proc_init(&dispatcher1,worker_cmd_qHandle,events_qHandle);
 8003fe0:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <StartDefaultTask+0x78>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a06      	ldr	r2, [pc, #24]	; (8004000 <StartDefaultTask+0x58>)
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	4619      	mov	r1, r3
 8003fea:	480e      	ldr	r0, [pc, #56]	; (8004024 <StartDefaultTask+0x7c>)
 8003fec:	f7fd fe52 	bl	8001c94 <disp_proc_init>
  disp_proc_loop(&dispatcher1);
 8003ff0:	480c      	ldr	r0, [pc, #48]	; (8004024 <StartDefaultTask+0x7c>)
 8003ff2:	f7fd ff1f 	bl	8001e34 <disp_proc_loop>

  /* USER CODE END 5 */
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	200014c0 	.word	0x200014c0
 8004004:	200014c4 	.word	0x200014c4
 8004008:	200014d8 	.word	0x200014d8
 800400c:	200014e8 	.word	0x200014e8
 8004010:	20001408 	.word	0x20001408
 8004014:	20001918 	.word	0x20001918
 8004018:	20001924 	.word	0x20001924
 800401c:	20001450 	.word	0x20001450
 8004020:	200014bc 	.word	0x200014bc
 8004024:	20002434 	.word	0x20002434

08004028 <glider_uart_tx_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_glider_uart_tx_f */
void glider_uart_tx_f(void const * argument)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN glider_uart_tx_f */
  /* Infinite loop */
  uint8_t tmp1;
  glider1.media_status=SEAGLIDER_MEDIA_READY;
 8004030:	4b11      	ldr	r3, [pc, #68]	; (8004078 <glider_uart_tx_f+0x50>)
 8004032:	220a      	movs	r2, #10
 8004034:	745a      	strb	r2, [r3, #17]
#ifdef DEBUG_MSG
  HAL_UART_Transmit_IT(&GLIDER_UART,"G",1);
#endif
  for(;;)
  {
	osSemaphoreWait(seaglider_uart_media_semHandle,osWaitForever);
 8004036:	4b11      	ldr	r3, [pc, #68]	; (800407c <glider_uart_tx_f+0x54>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f04f 31ff 	mov.w	r1, #4294967295
 800403e:	4618      	mov	r0, r3
 8004040:	f009 fa74 	bl	800d52c <osSemaphoreWait>
	if(seaglider_media_get_byte(&glider1,&tmp1)==SEAGLIDER_F_OK) HAL_UART_Transmit_IT(&GLIDER_UART,&tmp1,1);
 8004044:	f107 030f 	add.w	r3, r7, #15
 8004048:	4619      	mov	r1, r3
 800404a:	480b      	ldr	r0, [pc, #44]	; (8004078 <glider_uart_tx_f+0x50>)
 800404c:	f000 fc67 	bl	800491e <seaglider_media_get_byte>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d107      	bne.n	8004066 <glider_uart_tx_f+0x3e>
 8004056:	f107 030f 	add.w	r3, r7, #15
 800405a:	2201      	movs	r2, #1
 800405c:	4619      	mov	r1, r3
 800405e:	4808      	ldr	r0, [pc, #32]	; (8004080 <glider_uart_tx_f+0x58>)
 8004060:	f003 fc8d 	bl	800797e <HAL_UART_Transmit_IT>
 8004064:	e004      	b.n	8004070 <glider_uart_tx_f+0x48>
	else osSemaphoreRelease(seaglider_uart_media_semHandle);
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <glider_uart_tx_f+0x54>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f009 faac 	bl	800d5c8 <osSemaphoreRelease>
	osDelay(1);
 8004070:	2001      	movs	r0, #1
 8004072:	f009 fa14 	bl	800d49e <osDelay>
	osSemaphoreWait(seaglider_uart_media_semHandle,osWaitForever);
 8004076:	e7de      	b.n	8004036 <glider_uart_tx_f+0xe>
 8004078:	200014d8 	.word	0x200014d8
 800407c:	200014cc 	.word	0x200014cc
 8004080:	20001408 	.word	0x20001408

08004084 <worker_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_worker_f */
void worker_f(void const * argument)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN worker_f */
  /* Infinite loop */
  for(;;)
  {
		osEvent res=osMessageGet(worker_cmd_qHandle,osWaitForever);
 800408c:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <worker_f+0x2c>)
 800408e:	6819      	ldr	r1, [r3, #0]
 8004090:	f107 030c 	add.w	r3, r7, #12
 8004094:	f04f 32ff 	mov.w	r2, #4294967295
 8004098:	4618      	mov	r0, r3
 800409a:	f009 fb33 	bl	800d704 <osMessageGet>
		if(res.status==osEventMessage){
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2b10      	cmp	r3, #16
 80040a2:	d1f3      	bne.n	800408c <worker_f+0x8>
			disp_proc_execute(&dispatcher1,res.value.v);
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	4619      	mov	r1, r3
 80040a8:	4802      	ldr	r0, [pc, #8]	; (80040b4 <worker_f+0x30>)
 80040aa:	f7fd fe92 	bl	8001dd2 <disp_proc_execute>
  {
 80040ae:	e7ed      	b.n	800408c <worker_f+0x8>
 80040b0:	200014bc 	.word	0x200014bc
 80040b4:	20002434 	.word	0x20002434

080040b8 <sensor_uart_tx_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensor_uart_tx_f */
void sensor_uart_tx_f(void const * argument)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensor_uart_tx_f */
  /* Infinite loop */
  uint8_t tmp2;
  uvp6_sensor1.media_status=UVP6_MEDIA_READY;
 80040c0:	4b0e      	ldr	r3, [pc, #56]	; (80040fc <sensor_uart_tx_f+0x44>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	739a      	strb	r2, [r3, #14]
	HAL_UART_Transmit(&GLIDER_UART,"G",1,100);
  #endif

  for(;;)
  {
	   if(SENSOR_UART.gState!=HAL_UART_STATE_BUSY_TX)
 80040c6:	4b0e      	ldr	r3, [pc, #56]	; (8004100 <sensor_uart_tx_f+0x48>)
 80040c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b21      	cmp	r3, #33	; 0x21
 80040d0:	d00f      	beq.n	80040f2 <sensor_uart_tx_f+0x3a>
	   {
		if(uvp6_media_get_byte(&uvp6_sensor1,&tmp2)==UVP6_F_OK)
 80040d2:	f107 030f 	add.w	r3, r7, #15
 80040d6:	4619      	mov	r1, r3
 80040d8:	4808      	ldr	r0, [pc, #32]	; (80040fc <sensor_uart_tx_f+0x44>)
 80040da:	f7fd fb3a 	bl	8001752 <uvp6_media_get_byte>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d106      	bne.n	80040f2 <sensor_uart_tx_f+0x3a>
		{
		   HAL_UART_Transmit_IT(&SENSOR_UART,&tmp2,1);
 80040e4:	f107 030f 	add.w	r3, r7, #15
 80040e8:	2201      	movs	r2, #1
 80040ea:	4619      	mov	r1, r3
 80040ec:	4804      	ldr	r0, [pc, #16]	; (8004100 <sensor_uart_tx_f+0x48>)
 80040ee:	f003 fc46 	bl	800797e <HAL_UART_Transmit_IT>
		}
	   }
	osDelay(1);
 80040f2:	2001      	movs	r0, #1
 80040f4:	f009 f9d3 	bl	800d49e <osDelay>
	   if(SENSOR_UART.gState!=HAL_UART_STATE_BUSY_TX)
 80040f8:	e7e5      	b.n	80040c6 <sensor_uart_tx_f+0xe>
 80040fa:	bf00      	nop
 80040fc:	20001918 	.word	0x20001918
 8004100:	20001450 	.word	0x20001450

08004104 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a04      	ldr	r2, [pc, #16]	; (8004124 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d101      	bne.n	800411a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004116:	f001 fa31 	bl	800557c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800411a:	bf00      	nop
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40012c00 	.word	0x40012c00

08004128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800412c:	b672      	cpsid	i
}
 800412e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_UART_Transmit(&GLIDER_UART, "HW err", 6, 100);
 8004130:	2364      	movs	r3, #100	; 0x64
 8004132:	2206      	movs	r2, #6
 8004134:	4902      	ldr	r1, [pc, #8]	; (8004140 <Error_Handler+0x18>)
 8004136:	4803      	ldr	r0, [pc, #12]	; (8004144 <Error_Handler+0x1c>)
 8004138:	f003 fb9e 	bl	8007878 <HAL_UART_Transmit>
  while (1)
 800413c:	e7fe      	b.n	800413c <Error_Handler+0x14>
 800413e:	bf00      	nop
 8004140:	080151f4 	.word	0x080151f4
 8004144:	20001408 	.word	0x20001408

08004148 <usMBCRC16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
    0x41, 0x81, 0x80, 0x40
};

int16_t usMBCRC16( uint8_t * pucFrame, uint32_t usLen )
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
    int8_t           ucCRCHi = 0xFF;
 8004152:	23ff      	movs	r3, #255	; 0xff
 8004154:	73fb      	strb	r3, [r7, #15]
    int8_t           ucCRCLo = 0xFF;
 8004156:	23ff      	movs	r3, #255	; 0xff
 8004158:	73bb      	strb	r3, [r7, #14]
    int              iIndex;

    while( usLen-- )
 800415a:	e014      	b.n	8004186 <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 800415c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	1c59      	adds	r1, r3, #1
 8004164:	6079      	str	r1, [r7, #4]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	4053      	eors	r3, r2
 800416a:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( int8_t )( ucCRCHi ^ aucCRCHi[iIndex] );
 800416c:	4a0f      	ldr	r2, [pc, #60]	; (80041ac <usMBCRC16+0x64>)
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	4413      	add	r3, r2
 8004172:	f993 2000 	ldrsb.w	r2, [r3]
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	4053      	eors	r3, r2
 800417a:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 800417c:	4a0c      	ldr	r2, [pc, #48]	; (80041b0 <usMBCRC16+0x68>)
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	4413      	add	r3, r2
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	1e5a      	subs	r2, r3, #1
 800418a:	603a      	str	r2, [r7, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e5      	bne.n	800415c <usMBCRC16+0x14>
    }
    return ( int16_t )( ucCRCHi << 8 | ucCRCLo );
 8004190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004194:	021b      	lsls	r3, r3, #8
 8004196:	b21a      	sxth	r2, r3
 8004198:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800419c:	b21b      	sxth	r3, r3
 800419e:	4313      	orrs	r3, r2
 80041a0:	b21b      	sxth	r3, r3
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr
 80041ac:	08015340 	.word	0x08015340
 80041b0:	08015440 	.word	0x08015440

080041b4 <sd_ss_set_active>:
extern volatile uint16_t htim2;

uint8_t spi_rx_buffer[512];

void sd_ss_set_active(uint8_t drv)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	4603      	mov	r3, r0
 80041bc:	71fb      	strb	r3, [r7, #7]
  active_sd_ss_pin=sd_cards_ss[drv].sd_ss_pin;
 80041be:	79fa      	ldrb	r2, [r7, #7]
 80041c0:	4916      	ldr	r1, [pc, #88]	; (800421c <sd_ss_set_active+0x68>)
 80041c2:	4613      	mov	r3, r2
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	881a      	ldrh	r2, [r3, #0]
 80041ce:	4b14      	ldr	r3, [pc, #80]	; (8004220 <sd_ss_set_active+0x6c>)
 80041d0:	801a      	strh	r2, [r3, #0]
  active_sd_ss_port=sd_cards_ss[drv].sd_ss_port;
 80041d2:	79fa      	ldrb	r2, [r7, #7]
 80041d4:	4911      	ldr	r1, [pc, #68]	; (800421c <sd_ss_set_active+0x68>)
 80041d6:	4613      	mov	r3, r2
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	3304      	adds	r3, #4
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a0f      	ldr	r2, [pc, #60]	; (8004224 <sd_ss_set_active+0x70>)
 80041e6:	6013      	str	r3, [r2, #0]
  sdinfo=&sd_cards_ss[drv].sdinfo;
 80041e8:	79fa      	ldrb	r2, [r7, #7]
 80041ea:	4613      	mov	r3, r2
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	4413      	add	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	3308      	adds	r3, #8
 80041f4:	4a09      	ldr	r2, [pc, #36]	; (800421c <sd_ss_set_active+0x68>)
 80041f6:	4413      	add	r3, r2
 80041f8:	4a0b      	ldr	r2, [pc, #44]	; (8004228 <sd_ss_set_active+0x74>)
 80041fa:	6013      	str	r3, [r2, #0]
  Stat = &sd_cards_ss[drv].Stat;
 80041fc:	79fa      	ldrb	r2, [r7, #7]
 80041fe:	4613      	mov	r3, r2
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	4413      	add	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	3308      	adds	r3, #8
 8004208:	4a04      	ldr	r2, [pc, #16]	; (800421c <sd_ss_set_active+0x68>)
 800420a:	4413      	add	r3, r2
 800420c:	3301      	adds	r3, #1
 800420e:	4a07      	ldr	r2, [pc, #28]	; (800422c <sd_ss_set_active+0x78>)
 8004210:	6013      	str	r3, [r2, #0]
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr
 800421c:	200025d8 	.word	0x200025d8
 8004220:	200025d0 	.word	0x200025d0
 8004224:	200025d4 	.word	0x200025d4
 8004228:	200025cc 	.word	0x200025cc
 800422c:	200028cc 	.word	0x200028cc

08004230 <sd_ss_active_pin_down>:

void sd_ss_active_pin_down()
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_RESET);
 8004234:	4b04      	ldr	r3, [pc, #16]	; (8004248 <sd_ss_active_pin_down+0x18>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a04      	ldr	r2, [pc, #16]	; (800424c <sd_ss_active_pin_down+0x1c>)
 800423a:	8811      	ldrh	r1, [r2, #0]
 800423c:	2200      	movs	r2, #0
 800423e:	4618      	mov	r0, r3
 8004240:	f002 f822 	bl	8006288 <HAL_GPIO_WritePin>
}
 8004244:	bf00      	nop
 8004246:	bd80      	pop	{r7, pc}
 8004248:	200025d4 	.word	0x200025d4
 800424c:	200025d0 	.word	0x200025d0

08004250 <sd_ss_active_pin_up>:
void sd_ss_active_pin_up()
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_SET);
 8004254:	4b04      	ldr	r3, [pc, #16]	; (8004268 <sd_ss_active_pin_up+0x18>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a04      	ldr	r2, [pc, #16]	; (800426c <sd_ss_active_pin_up+0x1c>)
 800425a:	8811      	ldrh	r1, [r2, #0]
 800425c:	2201      	movs	r2, #1
 800425e:	4618      	mov	r0, r3
 8004260:	f002 f812 	bl	8006288 <HAL_GPIO_WritePin>
}
 8004264:	bf00      	nop
 8004266:	bd80      	pop	{r7, pc}
 8004268:	200025d4 	.word	0x200025d4
 800426c:	200025d0 	.word	0x200025d0

08004270 <SD_cmd>:


//-----------------------------------------------

static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	6039      	str	r1, [r7, #0]
 800427a:	71fb      	strb	r3, [r7, #7]
  uint8_t n, res;
  // ACMD<n> is the command sequense of CMD55-CMD<n>
  if (cmd & 0x80)
 800427c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004280:	2b00      	cmp	r3, #0
 8004282:	da0e      	bge.n	80042a2 <SD_cmd+0x32>
  {
    cmd &= 0x7F;
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800428a:	71fb      	strb	r3, [r7, #7]
    res = SD_cmd(CMD55, 0);
 800428c:	2100      	movs	r1, #0
 800428e:	2077      	movs	r0, #119	; 0x77
 8004290:	f7ff ffee 	bl	8004270 <SD_cmd>
 8004294:	4603      	mov	r3, r0
 8004296:	73bb      	strb	r3, [r7, #14]
    if (res > 1) return res;
 8004298:	7bbb      	ldrb	r3, [r7, #14]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d901      	bls.n	80042a2 <SD_cmd+0x32>
 800429e:	7bbb      	ldrb	r3, [r7, #14]
 80042a0:	e03b      	b.n	800431a <SD_cmd+0xaa>
  //SPI_ReceiveByte();

  //SS_SD_SELECT();
  //SPI_ReceiveByte();
  // Send a command packet
  SPI_SendByte(cmd); // Start + Command index
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 f961 	bl	800456c <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	0e1b      	lsrs	r3, r3, #24
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 f95b 	bl	800456c <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	0c1b      	lsrs	r3, r3, #16
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 f955 	bl	800456c <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	0a1b      	lsrs	r3, r3, #8
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 f94f 	bl	800456c <SPI_SendByte>
  SPI_SendByte((uint8_t)arg); // Argument[7..0]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 f94a 	bl	800456c <SPI_SendByte>

  n = 0x01; // Dummy CRC + Stop
 80042d8:	2301      	movs	r3, #1
 80042da:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 80042dc:	79fb      	ldrb	r3, [r7, #7]
 80042de:	2b40      	cmp	r3, #64	; 0x40
 80042e0:	d101      	bne.n	80042e6 <SD_cmd+0x76>
 80042e2:	2395      	movs	r3, #149	; 0x95
 80042e4:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	2b48      	cmp	r3, #72	; 0x48
 80042ea:	d101      	bne.n	80042f0 <SD_cmd+0x80>
 80042ec:	2387      	movs	r3, #135	; 0x87
 80042ee:	73fb      	strb	r3, [r7, #15]
  SPI_SendByte(n);
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f93a 	bl	800456c <SPI_SendByte>
  // Receive a command response
  n = 10; // Wait for a valid response in timeout of 10 attempts
 80042f8:	230a      	movs	r3, #10
 80042fa:	73fb      	strb	r3, [r7, #15]
  do {
    res = SPI_ReceiveByte();
 80042fc:	f000 f943 	bl	8004586 <SPI_ReceiveByte>
 8004300:	4603      	mov	r3, r0
 8004302:	73bb      	strb	r3, [r7, #14]
  } while ((res & 0x80) && --n);
 8004304:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004308:	2b00      	cmp	r3, #0
 800430a:	da05      	bge.n	8004318 <SD_cmd+0xa8>
 800430c:	7bfb      	ldrb	r3, [r7, #15]
 800430e:	3b01      	subs	r3, #1
 8004310:	73fb      	strb	r3, [r7, #15]
 8004312:	7bfb      	ldrb	r3, [r7, #15]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f1      	bne.n	80042fc <SD_cmd+0x8c>
  return res;
 8004318:	7bbb      	ldrb	r3, [r7, #14]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <sd_ini>:

uint8_t sd_ini(void)
{
 8004324:	b590      	push	{r4, r7, lr}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
	  uint8_t i, cmd;
	  uint8_t ocr[4];
	  int16_t tmr;

	  uint8_t n = 5;
 800432a:	2305      	movs	r3, #5
 800432c:	72fb      	strb	r3, [r7, #11]
	  uint8_t res;

	  //LD_OFF;
	  sdinfo->type = 0;
 800432e:	4b5d      	ldr	r3, [pc, #372]	; (80044a4 <sd_ini+0x180>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]

	  do {
	      res = SD_cmd(CMD0, 0);
 8004336:	2100      	movs	r1, #0
 8004338:	2040      	movs	r0, #64	; 0x40
 800433a:	f7ff ff99 	bl	8004270 <SD_cmd>
 800433e:	4603      	mov	r3, r0
 8004340:	72bb      	strb	r3, [r7, #10]
	  } while ((res != 1) && --n);
 8004342:	7abb      	ldrb	r3, [r7, #10]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d005      	beq.n	8004354 <sd_ini+0x30>
 8004348:	7afb      	ldrb	r3, [r7, #11]
 800434a:	3b01      	subs	r3, #1
 800434c:	72fb      	strb	r3, [r7, #11]
 800434e:	7afb      	ldrb	r3, [r7, #11]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1f0      	bne.n	8004336 <sd_ini+0x12>

	  if (res == 1) // Enter Idle state
 8004354:	7abb      	ldrb	r3, [r7, #10]
 8004356:	2b01      	cmp	r3, #1
 8004358:	f040 809f 	bne.w	800449a <sd_ini+0x176>
	  {
		  SPI_Release();
 800435c:	f000 f920 	bl	80045a0 <SPI_Release>
		  if (SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8004360:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004364:	2048      	movs	r0, #72	; 0x48
 8004366:	f7ff ff83 	bl	8004270 <SD_cmd>
 800436a:	4603      	mov	r3, r0
 800436c:	2b01      	cmp	r3, #1
 800436e:	d158      	bne.n	8004422 <sd_ini+0xfe>
		  {
			  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8004370:	2300      	movs	r3, #0
 8004372:	73fb      	strb	r3, [r7, #15]
 8004374:	e00c      	b.n	8004390 <sd_ini+0x6c>
 8004376:	7bfc      	ldrb	r4, [r7, #15]
 8004378:	f000 f905 	bl	8004586 <SPI_ReceiveByte>
 800437c:	4603      	mov	r3, r0
 800437e:	461a      	mov	r2, r3
 8004380:	f104 0310 	add.w	r3, r4, #16
 8004384:	443b      	add	r3, r7
 8004386:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800438a:	7bfb      	ldrb	r3, [r7, #15]
 800438c:	3301      	adds	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
 8004390:	7bfb      	ldrb	r3, [r7, #15]
 8004392:	2b03      	cmp	r3, #3
 8004394:	d9ef      	bls.n	8004376 <sd_ini+0x52>

			    // Get trailing return value of R7 resp
			    if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8004396:	79bb      	ldrb	r3, [r7, #6]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d17c      	bne.n	8004496 <sd_ini+0x172>
 800439c:	79fb      	ldrb	r3, [r7, #7]
 800439e:	2baa      	cmp	r3, #170	; 0xaa
 80043a0:	d179      	bne.n	8004496 <sd_ini+0x172>
			    {
			    	for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--)
 80043a2:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80043a6:	81bb      	strh	r3, [r7, #12]
 80043a8:	e005      	b.n	80043b6 <sd_ini+0x92>
 80043aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	81bb      	strh	r3, [r7, #12]
 80043b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d007      	beq.n	80043ce <sd_ini+0xaa>
 80043be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80043c2:	20e9      	movs	r0, #233	; 0xe9
 80043c4:	f7ff ff54 	bl	8004270 <SD_cmd>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1ed      	bne.n	80043aa <sd_ini+0x86>
			    	    ; // Wait for leaving idle state (ACMD41 with HCS bit)
			    	if (tmr && SD_cmd(CMD58, 0) == 0)
 80043ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d05f      	beq.n	8004496 <sd_ini+0x172>
 80043d6:	2100      	movs	r1, #0
 80043d8:	207a      	movs	r0, #122	; 0x7a
 80043da:	f7ff ff49 	bl	8004270 <SD_cmd>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d158      	bne.n	8004496 <sd_ini+0x172>
			    	 { // Check CCS bit in the OCR
			    	  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 80043e4:	2300      	movs	r3, #0
 80043e6:	73fb      	strb	r3, [r7, #15]
 80043e8:	e00c      	b.n	8004404 <sd_ini+0xe0>
 80043ea:	7bfc      	ldrb	r4, [r7, #15]
 80043ec:	f000 f8cb 	bl	8004586 <SPI_ReceiveByte>
 80043f0:	4603      	mov	r3, r0
 80043f2:	461a      	mov	r2, r3
 80043f4:	f104 0310 	add.w	r3, r4, #16
 80043f8:	443b      	add	r3, r7
 80043fa:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	3301      	adds	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	2b03      	cmp	r3, #3
 8004408:	d9ef      	bls.n	80043ea <sd_ini+0xc6>
			     	   sdinfo->type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 800440a:	793b      	ldrb	r3, [r7, #4]
 800440c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <sd_ini+0xf4>
 8004414:	220c      	movs	r2, #12
 8004416:	e000      	b.n	800441a <sd_ini+0xf6>
 8004418:	2204      	movs	r2, #4
 800441a:	4b22      	ldr	r3, [pc, #136]	; (80044a4 <sd_ini+0x180>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	701a      	strb	r2, [r3, #0]
 8004420:	e039      	b.n	8004496 <sd_ini+0x172>
			    	}
			    }
		  }
		  else //SDv1 or MMCv3
		  {
			  if (SD_cmd(ACMD41, 0) <= 1)
 8004422:	2100      	movs	r1, #0
 8004424:	20e9      	movs	r0, #233	; 0xe9
 8004426:	f7ff ff23 	bl	8004270 <SD_cmd>
 800442a:	4603      	mov	r3, r0
 800442c:	2b01      	cmp	r3, #1
 800442e:	d806      	bhi.n	800443e <sd_ini+0x11a>
			    {
			      sdinfo->type = CT_SD1; cmd = ACMD41; // SDv1
 8004430:	4b1c      	ldr	r3, [pc, #112]	; (80044a4 <sd_ini+0x180>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2202      	movs	r2, #2
 8004436:	701a      	strb	r2, [r3, #0]
 8004438:	23e9      	movs	r3, #233	; 0xe9
 800443a:	73bb      	strb	r3, [r7, #14]
 800443c:	e005      	b.n	800444a <sd_ini+0x126>
			    }
			    else
			    {
			      sdinfo->type = CT_MMC; cmd = CMD1; // MMCv3
 800443e:	4b19      	ldr	r3, [pc, #100]	; (80044a4 <sd_ini+0x180>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2201      	movs	r2, #1
 8004444:	701a      	strb	r2, [r3, #0]
 8004446:	2341      	movs	r3, #65	; 0x41
 8004448:	73bb      	strb	r3, [r7, #14]
			    }
			    for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 800444a:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800444e:	81bb      	strh	r3, [r7, #12]
 8004450:	e005      	b.n	800445e <sd_ini+0x13a>
 8004452:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004456:	b29b      	uxth	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	b29b      	uxth	r3, r3
 800445c:	81bb      	strh	r3, [r7, #12]
 800445e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d007      	beq.n	8004476 <sd_ini+0x152>
 8004466:	7bbb      	ldrb	r3, [r7, #14]
 8004468:	2100      	movs	r1, #0
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff ff00 	bl	8004270 <SD_cmd>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1ed      	bne.n	8004452 <sd_ini+0x12e>
			    if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8004476:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d007      	beq.n	800448e <sd_ini+0x16a>
 800447e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004482:	2050      	movs	r0, #80	; 0x50
 8004484:	f7ff fef4 	bl	8004270 <SD_cmd>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <sd_ini+0x172>
			    sdinfo->type = 0;
 800448e:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <sd_ini+0x180>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2200      	movs	r2, #0
 8004494:	701a      	strb	r2, [r3, #0]
		  }

		  return 0;
 8004496:	2300      	movs	r3, #0
 8004498:	e000      	b.n	800449c <sd_ini+0x178>
	  }

	  return 1;
 800449a:	2301      	movs	r3, #1

}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd90      	pop	{r4, r7, pc}
 80044a4:	200025cc 	.word	0x200025cc

080044a8 <Error>:

static void Error (void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  //LD_ON;
}
 80044ac:	bf00      	nop
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr

080044b4 <SPI_wait_ready>:

uint8_t SPI_wait_ready(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
  uint8_t res;
  uint16_t cnt;
  cnt=0;
 80044ba:	2300      	movs	r3, #0
 80044bc:	80fb      	strh	r3, [r7, #6]
  do {
    res=SPI_ReceiveByte();
 80044be:	f000 f862 	bl	8004586 <SPI_ReceiveByte>
 80044c2:	4603      	mov	r3, r0
 80044c4:	717b      	strb	r3, [r7, #5]
    cnt++;
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	3301      	adds	r3, #1
 80044ca:	80fb      	strh	r3, [r7, #6]
  } while ( (res!=0xFF)&&(cnt<0xFFFF) );
 80044cc:	797b      	ldrb	r3, [r7, #5]
 80044ce:	2bff      	cmp	r3, #255	; 0xff
 80044d0:	d004      	beq.n	80044dc <SPI_wait_ready+0x28>
 80044d2:	88fb      	ldrh	r3, [r7, #6]
 80044d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044d8:	4293      	cmp	r3, r2
 80044da:	d1f0      	bne.n	80044be <SPI_wait_ready+0xa>
  if (cnt>=0xFFFF) return 1;
 80044dc:	88fb      	ldrh	r3, [r7, #6]
 80044de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d101      	bne.n	80044ea <SPI_wait_ready+0x36>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <SPI_wait_ready+0x38>
  return res;
 80044ea:	797b      	ldrb	r3, [r7, #5]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <SPIx_Write_Multi>:
{
	if(HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_READY) return F_OK;
	else return F_ERR;
}
F_RES SPIx_Write_Multi(uint8_t* tx_buf,uint32_t size)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
	if(HAL_SPI_TransmitReceive(&hspi1, tx_buf, spi_rx_buffer, size,HAL_MAX_DELAY)==HAL_OK) return F_OK;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	b29b      	uxth	r3, r3
 8004502:	f04f 32ff 	mov.w	r2, #4294967295
 8004506:	9200      	str	r2, [sp, #0]
 8004508:	4a07      	ldr	r2, [pc, #28]	; (8004528 <SPIx_Write_Multi+0x34>)
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	4807      	ldr	r0, [pc, #28]	; (800452c <SPIx_Write_Multi+0x38>)
 800450e:	f002 fb99 	bl	8006c44 <HAL_SPI_TransmitReceive>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <SPIx_Write_Multi+0x28>
 8004518:	2300      	movs	r3, #0
 800451a:	e000      	b.n	800451e <SPIx_Write_Multi+0x2a>
		else return F_ERR;
 800451c:	2301      	movs	r3, #1
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	20002608 	.word	0x20002608
 800452c:	20001328 	.word	0x20001328

08004530 <SPIx_WriteRead>:
	if(HAL_SPI_Transmit_DMA(&hspi1, tx_buf, size)==HAL_OK) return F_OK;
	else return F_ERR;
}

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af02      	add	r7, sp, #8
 8004536:	4603      	mov	r3, r0
 8004538:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 800453a:	2300      	movs	r3, #0
 800453c:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 800453e:	f107 020f 	add.w	r2, r7, #15
 8004542:	1df9      	adds	r1, r7, #7
 8004544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	2301      	movs	r3, #1
 800454c:	4806      	ldr	r0, [pc, #24]	; (8004568 <SPIx_WriteRead+0x38>)
 800454e:	f002 fb79 	bl	8006c44 <HAL_SPI_TransmitReceive>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <SPIx_WriteRead+0x2c>
  {
    Error();
 8004558:	f7ff ffa6 	bl	80044a8 <Error>
  }
  return receivedbyte;
 800455c:	7bfb      	ldrb	r3, [r7, #15]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20001328 	.word	0x20001328

0800456c <SPI_SendByte>:

void SPI_SendByte(uint8_t bt)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(bt);
 8004576:	79fb      	ldrb	r3, [r7, #7]
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff ffd9 	bl	8004530 <SPIx_WriteRead>
}
 800457e:	bf00      	nop
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <SPI_ReceiveByte>:

uint8_t SPI_ReceiveByte(void)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b082      	sub	sp, #8
 800458a:	af00      	add	r7, sp, #0
  uint8_t bt = SPIx_WriteRead(0xFF);
 800458c:	20ff      	movs	r0, #255	; 0xff
 800458e:	f7ff ffcf 	bl	8004530 <SPIx_WriteRead>
 8004592:	4603      	mov	r3, r0
 8004594:	71fb      	strb	r3, [r7, #7]
  return bt;
 8004596:	79fb      	ldrb	r3, [r7, #7]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <SPI_Release>:
void SPI_Release(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 80045a4:	20ff      	movs	r0, #255	; 0xff
 80045a6:	f7ff ffc3 	bl	8004530 <SPIx_WriteRead>
}
 80045aa:	bf00      	nop
 80045ac:	bd80      	pop	{r7, pc}

080045ae <SD_Read_Block>:

uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)
{
 80045ae:	b590      	push	{r4, r7, lr}
 80045b0:	b085      	sub	sp, #20
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;

  result=SD_cmd (CMD17, lba);
 80045b8:	6839      	ldr	r1, [r7, #0]
 80045ba:	2051      	movs	r0, #81	; 0x51
 80045bc:	f7ff fe58 	bl	8004270 <SD_cmd>
 80045c0:	4603      	mov	r3, r0
 80045c2:	737b      	strb	r3, [r7, #13]
  if (result!=0x00){
 80045c4:	7b7b      	ldrb	r3, [r7, #13]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <SD_Read_Block+0x20>
	  return 5;
 80045ca:	2305      	movs	r3, #5
 80045cc:	e02f      	b.n	800462e <SD_Read_Block+0x80>
  }

  SPI_Release();
 80045ce:	f7ff ffe7 	bl	80045a0 <SPI_Release>
   cnt=0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	81fb      	strh	r3, [r7, #14]
   do{
     result=SPI_ReceiveByte();
 80045d6:	f7ff ffd6 	bl	8004586 <SPI_ReceiveByte>
 80045da:	4603      	mov	r3, r0
 80045dc:	737b      	strb	r3, [r7, #13]
     cnt++;
 80045de:	89fb      	ldrh	r3, [r7, #14]
 80045e0:	3301      	adds	r3, #1
 80045e2:	81fb      	strh	r3, [r7, #14]
   } while ( (result!=0xFE)&&(cnt<0xFFFF) );
 80045e4:	7b7b      	ldrb	r3, [r7, #13]
 80045e6:	2bfe      	cmp	r3, #254	; 0xfe
 80045e8:	d004      	beq.n	80045f4 <SD_Read_Block+0x46>
 80045ea:	89fb      	ldrh	r3, [r7, #14]
 80045ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d1f0      	bne.n	80045d6 <SD_Read_Block+0x28>
   if (cnt>=0xFFFF) {
 80045f4:	89fb      	ldrh	r3, [r7, #14]
 80045f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d101      	bne.n	8004602 <SD_Read_Block+0x54>
	   return 5;
 80045fe:	2305      	movs	r3, #5
 8004600:	e015      	b.n	800462e <SD_Read_Block+0x80>
   }
   for (cnt=0;cnt<512;cnt++) buff[cnt]=SPI_ReceiveByte();
 8004602:	2300      	movs	r3, #0
 8004604:	81fb      	strh	r3, [r7, #14]
 8004606:	e009      	b.n	800461c <SD_Read_Block+0x6e>
 8004608:	89fb      	ldrh	r3, [r7, #14]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	18d4      	adds	r4, r2, r3
 800460e:	f7ff ffba 	bl	8004586 <SPI_ReceiveByte>
 8004612:	4603      	mov	r3, r0
 8004614:	7023      	strb	r3, [r4, #0]
 8004616:	89fb      	ldrh	r3, [r7, #14]
 8004618:	3301      	adds	r3, #1
 800461a:	81fb      	strh	r3, [r7, #14]
 800461c:	89fb      	ldrh	r3, [r7, #14]
 800461e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004622:	d3f1      	bcc.n	8004608 <SD_Read_Block+0x5a>
   SPI_Release();
 8004624:	f7ff ffbc 	bl	80045a0 <SPI_Release>
   SPI_Release();
 8004628:	f7ff ffba 	bl	80045a0 <SPI_Release>



  return 0;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	bd90      	pop	{r4, r7, pc}
	...

08004638 <SD_Write_Blocks>:

uint8_t SD_Write_Blocks (uint8_t *buff, uint32_t lba,uint16_t count)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b088      	sub	sp, #32
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	4613      	mov	r3, r2
 8004644:	80fb      	strh	r3, [r7, #6]
  tick1=xTaskGetTickCount();
 8004646:	f00a fbc1 	bl	800edcc <xTaskGetTickCount>
 800464a:	4603      	mov	r3, r0
 800464c:	4a39      	ldr	r2, [pc, #228]	; (8004734 <SD_Write_Blocks+0xfc>)
 800464e:	6013      	str	r3, [r2, #0]
  uint8_t result;
  uint16_t cnt;


  result=SD_cmd(CMD25,lba);//CMD25
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	2059      	movs	r0, #89	; 0x59
 8004654:	f7ff fe0c 	bl	8004270 <SD_cmd>
 8004658:	4603      	mov	r3, r0
 800465a:	75fb      	strb	r3, [r7, #23]
  if (result!=0x00){
 800465c:	7dfb      	ldrb	r3, [r7, #23]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <SD_Write_Blocks+0x2e>
	  return 6;
 8004662:	2306      	movs	r3, #6
 8004664:	e061      	b.n	800472a <SD_Write_Blocks+0xf2>
  }
  SPI_Release();  //1byte gap
 8004666:	f7ff ff9b 	bl	80045a0 <SPI_Release>

  for(int i=0;i<count;i++){
 800466a:	2300      	movs	r3, #0
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	e035      	b.n	80046dc <SD_Write_Blocks+0xa4>
   SPI_SendByte (0xFC);//token CMD25
 8004670:	20fc      	movs	r0, #252	; 0xfc
 8004672:	f7ff ff7b 	bl	800456c <SPI_SendByte>

   SPIx_Write_Multi(buff,512);
 8004676:	f44f 7100 	mov.w	r1, #512	; 0x200
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f7ff ff3a 	bl	80044f4 <SPIx_Write_Multi>
   buff+=512;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004686:	60fb      	str	r3, [r7, #12]
   SPI_Release();   //CRC
 8004688:	f7ff ff8a 	bl	80045a0 <SPI_Release>
   SPI_Release();   //CRC
 800468c:	f7ff ff88 	bl	80045a0 <SPI_Release>


   result=SPI_ReceiveByte();
 8004690:	f7ff ff79 	bl	8004586 <SPI_ReceiveByte>
 8004694:	4603      	mov	r3, r0
 8004696:	75fb      	strb	r3, [r7, #23]
   if ((result&0x1F)!=0x05) {
 8004698:	7dfb      	ldrb	r3, [r7, #23]
 800469a:	f003 031f 	and.w	r3, r3, #31
 800469e:	2b05      	cmp	r3, #5
 80046a0:	d001      	beq.n	80046a6 <SD_Write_Blocks+0x6e>
	  return 6;
 80046a2:	2306      	movs	r3, #6
 80046a4:	e041      	b.n	800472a <SD_Write_Blocks+0xf2>
   }
   cnt=0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	83fb      	strh	r3, [r7, #30]
   do {
    result=SPI_ReceiveByte();
 80046aa:	f7ff ff6c 	bl	8004586 <SPI_ReceiveByte>
 80046ae:	4603      	mov	r3, r0
 80046b0:	75fb      	strb	r3, [r7, #23]
    cnt++;
 80046b2:	8bfb      	ldrh	r3, [r7, #30]
 80046b4:	3301      	adds	r3, #1
 80046b6:	83fb      	strh	r3, [r7, #30]
   } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 80046b8:	7dfb      	ldrb	r3, [r7, #23]
 80046ba:	2bff      	cmp	r3, #255	; 0xff
 80046bc:	d004      	beq.n	80046c8 <SD_Write_Blocks+0x90>
 80046be:	8bfb      	ldrh	r3, [r7, #30]
 80046c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d1f0      	bne.n	80046aa <SD_Write_Blocks+0x72>
   if (cnt>=0xFFFF) {
 80046c8:	8bfb      	ldrh	r3, [r7, #30]
 80046ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d101      	bne.n	80046d6 <SD_Write_Blocks+0x9e>
	  return 6;
 80046d2:	2306      	movs	r3, #6
 80046d4:	e029      	b.n	800472a <SD_Write_Blocks+0xf2>
  for(int i=0;i<count;i++){
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	3301      	adds	r3, #1
 80046da:	61bb      	str	r3, [r7, #24]
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	dbc5      	blt.n	8004670 <SD_Write_Blocks+0x38>
   }
  }

  SPI_SendByte (0xFD); //stop transaction token for CMD25
 80046e4:	20fd      	movs	r0, #253	; 0xfd
 80046e6:	f7ff ff41 	bl	800456c <SPI_SendByte>
  SPI_Release();       //1byte gap
 80046ea:	f7ff ff59 	bl	80045a0 <SPI_Release>
  cnt=0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	83fb      	strh	r3, [r7, #30]
  do {
	result=SPI_ReceiveByte();
 80046f2:	f7ff ff48 	bl	8004586 <SPI_ReceiveByte>
 80046f6:	4603      	mov	r3, r0
 80046f8:	75fb      	strb	r3, [r7, #23]
	cnt++;
 80046fa:	8bfb      	ldrh	r3, [r7, #30]
 80046fc:	3301      	adds	r3, #1
 80046fe:	83fb      	strh	r3, [r7, #30]
  } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 8004700:	7dfb      	ldrb	r3, [r7, #23]
 8004702:	2bff      	cmp	r3, #255	; 0xff
 8004704:	d004      	beq.n	8004710 <SD_Write_Blocks+0xd8>
 8004706:	8bfb      	ldrh	r3, [r7, #30]
 8004708:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800470c:	4293      	cmp	r3, r2
 800470e:	d1f0      	bne.n	80046f2 <SD_Write_Blocks+0xba>
  if (cnt>=0xFFFF) return 6;
 8004710:	8bfb      	ldrh	r3, [r7, #30]
 8004712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004716:	4293      	cmp	r3, r2
 8004718:	d101      	bne.n	800471e <SD_Write_Blocks+0xe6>
 800471a:	2306      	movs	r3, #6
 800471c:	e005      	b.n	800472a <SD_Write_Blocks+0xf2>
  tick2=xTaskGetTickCount();
 800471e:	f00a fb55 	bl	800edcc <xTaskGetTickCount>
 8004722:	4603      	mov	r3, r0
 8004724:	4a04      	ldr	r2, [pc, #16]	; (8004738 <SD_Write_Blocks+0x100>)
 8004726:	6013      	str	r3, [r2, #0]
  return 0;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3720      	adds	r7, #32
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	200025c0 	.word	0x200025c0
 8004738:	200025c4 	.word	0x200025c4

0800473c <seaglider_init>:

const char* seaglider_commands_strings[]={"UV>\r","DBG:"};


void seaglider_init(seaglider* seaglider_obj,osMessageQId events_q_Handle,osSemaphoreId out_q_sem)
{
 800473c:	b5b0      	push	{r4, r5, r7, lr}
 800473e:	b094      	sub	sp, #80	; 0x50
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
	seaglider_obj->last_depth=0.0;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f04f 0200 	mov.w	r2, #0
 800474e:	f8c3 2015 	str.w	r2, [r3, #21]
	seaglider_obj->prev_depth=0.0;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	f8c3 2019 	str.w	r2, [r3, #25]
	seaglider_obj->dive_status=SEAGLIDER_STATUS_UNKNOWN;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	74da      	strb	r2, [r3, #19]

	seaglider_obj->stop_pump_flag=SEAGLIDER_STOP_PUMP_FLAG_DEACTIVATED;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	751a      	strb	r2, [r3, #20]
	seaglider_messages_init(seaglider_obj);
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 f9a7 	bl	8004abc <seaglider_messages_init>

	seaglider_obj->events_q = events_q_Handle;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	609a      	str	r2, [r3, #8]
	seaglider_obj->out_q_sem=out_q_sem;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	60da      	str	r2, [r3, #12]

	//osMessageQDef(seaglider_events_q, 20, uint8_t);
	//seaglider_obj->events_q= osMessageCreate(osMessageQ(seaglider_events_q), NULL);

	osMessageQDef(seaglider_media_rx_q, 20, uint16_t);
 800477a:	4b19      	ldr	r3, [pc, #100]	; (80047e0 <seaglider_init+0xa4>)
 800477c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8004780:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004782:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	seaglider_obj->media_rx_messages_q= osMessageCreate(osMessageQ(seaglider_media_rx_q), NULL);
 8004786:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800478a:	2100      	movs	r1, #0
 800478c:	4618      	mov	r0, r3
 800478e:	f008 ff51 	bl	800d634 <osMessageCreate>
 8004792:	4602      	mov	r2, r0
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	601a      	str	r2, [r3, #0]

	osMessageQDef(seaglider_media_tx_q, 200, uint8_t);
 8004798:	4b12      	ldr	r3, [pc, #72]	; (80047e4 <seaglider_init+0xa8>)
 800479a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800479e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	seaglider_obj->media_tx_q = osMessageCreate(osMessageQ(seaglider_media_tx_q), NULL);
 80047a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047a8:	2100      	movs	r1, #0
 80047aa:	4618      	mov	r0, r3
 80047ac:	f008 ff42 	bl	800d634 <osMessageCreate>
 80047b0:	4602      	mov	r2, r0
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	605a      	str	r2, [r3, #4]

	osThreadDef(seaglider_task, seaglider_loop, osPriorityNormal, 0, 256);
 80047b6:	4b0c      	ldr	r3, [pc, #48]	; (80047e8 <seaglider_init+0xac>)
 80047b8:	f107 0414 	add.w	r4, r7, #20
 80047bc:	461d      	mov	r5, r3
 80047be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80047c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(seaglider_task), seaglider_obj);
 80047ca:	f107 0314 	add.w	r3, r7, #20
 80047ce:	68f9      	ldr	r1, [r7, #12]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f008 fe18 	bl	800d406 <osThreadCreate>


}
 80047d6:	bf00      	nop
 80047d8:	3750      	adds	r7, #80	; 0x50
 80047da:	46bd      	mov	sp, r7
 80047dc:	bdb0      	pop	{r4, r5, r7, pc}
 80047de:	bf00      	nop
 80047e0:	0801521c 	.word	0x0801521c
 80047e4:	0801522c 	.word	0x0801522c
 80047e8:	0801523c 	.word	0x0801523c

080047ec <seaglider_loop>:


void seaglider_loop(seaglider* seaglider_obj)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	 uint16_t msg_indx;
	 for(;;)
	 {
		if(xQueueReceive(seaglider_obj->media_rx_messages_q,&msg_indx,0))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f107 010a 	add.w	r1, r7, #10
 80047fc:	2200      	movs	r2, #0
 80047fe:	4618      	mov	r0, r3
 8004800:	f009 fc04 	bl	800e00c <xQueueReceive>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0f4      	beq.n	80047f4 <seaglider_loop+0x8>
		{   uint8_t* msg=seaglider_obj->rx_buffer+msg_indx;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	332d      	adds	r3, #45	; 0x2d
 800480e:	897a      	ldrh	r2, [r7, #10]
 8004810:	4413      	add	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
			seaglider_parse_message(seaglider_obj,msg);
 8004814:	68f9      	ldr	r1, [r7, #12]
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f91c 	bl	8004a54 <seaglider_parse_message>
		if(xQueueReceive(seaglider_obj->media_rx_messages_q,&msg_indx,0))
 800481c:	e7ea      	b.n	80047f4 <seaglider_loop+0x8>

0800481e <seaglider_media_process_byte>:

}


void seaglider_media_process_byte(seaglider* seaglider_obj,uint8_t rx_byte)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b082      	sub	sp, #8
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	460b      	mov	r3, r1
 8004828:	70fb      	strb	r3, [r7, #3]
	if(seaglider_obj->media_status==SEAGLIDER_MEDIA_READY && rx_byte!=0x00)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	7c5b      	ldrb	r3, [r3, #17]
 800482e:	2b0a      	cmp	r3, #10
 8004830:	d162      	bne.n	80048f8 <seaglider_media_process_byte+0xda>
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d05f      	beq.n	80048f8 <seaglider_media_process_byte+0xda>
	{
		seaglider_obj->rx_buffer[seaglider_obj->rx_buffer_indx]=rx_byte;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8b3 342d 	ldrh.w	r3, [r3, #1069]	; 0x42d
 800483e:	b29b      	uxth	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4413      	add	r3, r2
 8004846:	78fa      	ldrb	r2, [r7, #3]
 8004848:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		if(rx_byte=='\r')
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	2b0d      	cmp	r3, #13
 8004850:	d133      	bne.n	80048ba <seaglider_media_process_byte+0x9c>
		{
			seaglider_obj->rx_buffer[seaglider_obj->rx_buffer_indx]=0x00;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8b3 342d 	ldrh.w	r3, [r3, #1069]	; 0x42d
 8004858:	b29b      	uxth	r3, r3
 800485a:	461a      	mov	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4413      	add	r3, r2
 8004860:	2200      	movs	r2, #0
 8004862:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			osMessagePut(seaglider_obj->media_rx_messages_q,seaglider_obj->rx_buffer_new_string_indx,1);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8b3 342f 	ldrh.w	r3, [r3, #1071]	; 0x42f
 8004870:	b29b      	uxth	r3, r3
 8004872:	2201      	movs	r2, #1
 8004874:	4619      	mov	r1, r3
 8004876:	f008 ff05 	bl	800d684 <osMessagePut>
			if(seaglider_obj->rx_buffer_indx>SEAGLIDER_RX_BUFFER_THR) seaglider_obj->rx_buffer_indx=0;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8b3 342d 	ldrh.w	r3, [r3, #1069]	; 0x42d
 8004880:	b29b      	uxth	r3, r3
 8004882:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004886:	d907      	bls.n	8004898 <seaglider_media_process_byte+0x7a>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
 8004890:	2200      	movs	r2, #0
 8004892:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
 8004896:	e008      	b.n	80048aa <seaglider_media_process_byte+0x8c>
			else  seaglider_obj->rx_buffer_indx++;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8b3 342d 	ldrh.w	r3, [r3, #1069]	; 0x42d
 800489e:	b29b      	uxth	r3, r3
 80048a0:	3301      	adds	r3, #1
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8a3 242d 	strh.w	r2, [r3, #1069]	; 0x42d
			seaglider_obj->rx_buffer_new_string_indx=seaglider_obj->rx_buffer_indx;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8b3 342d 	ldrh.w	r3, [r3, #1069]	; 0x42d
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8a3 242f 	strh.w	r2, [r3, #1071]	; 0x42f
 80048b8:	e008      	b.n	80048cc <seaglider_media_process_byte+0xae>
		}
		else seaglider_obj->rx_buffer_indx++;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8b3 342d 	ldrh.w	r3, [r3, #1069]	; 0x42d
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	3301      	adds	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8a3 242d 	strh.w	r2, [r3, #1069]	; 0x42d
		if(seaglider_obj->rx_buffer_indx==SEAGLIDER_RX_BUFFER_SIZE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8b3 342d 	ldrh.w	r3, [r3, #1069]	; 0x42d
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d8:	d11d      	bne.n	8004916 <seaglider_media_process_byte+0xf8>
		{
			seaglider_obj->rx_buffer_indx=0;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
			seaglider_obj->rx_buffer_new_string_indx=seaglider_obj->rx_buffer_indx;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8b3 342d 	ldrh.w	r3, [r3, #1069]	; 0x42d
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8a3 242f 	strh.w	r2, [r3, #1071]	; 0x42f
		if(seaglider_obj->rx_buffer_indx==SEAGLIDER_RX_BUFFER_SIZE)
 80048f6:	e00e      	b.n	8004916 <seaglider_media_process_byte+0xf8>
		}
	}
	else
	{
		seaglider_obj->rx_buffer_indx=0;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
 8004900:	2200      	movs	r2, #0
 8004902:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
		seaglider_obj->rx_buffer_new_string_indx=seaglider_obj->rx_buffer_indx;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8b3 342d 	ldrh.w	r3, [r3, #1069]	; 0x42d
 800490c:	b29a      	uxth	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8a3 242f 	strh.w	r2, [r3, #1071]	; 0x42f
	}
}
 8004914:	bf00      	nop
 8004916:	bf00      	nop
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <seaglider_media_get_byte>:

uint8_t seaglider_media_get_byte(seaglider* seaglider_obj,uint8_t* tx_byte)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b086      	sub	sp, #24
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	6039      	str	r1, [r7, #0]
	osEvent res=osMessageGet(seaglider_obj->media_tx_q,0);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6859      	ldr	r1, [r3, #4]
 800492c:	f107 030c 	add.w	r3, r7, #12
 8004930:	2200      	movs	r2, #0
 8004932:	4618      	mov	r0, r3
 8004934:	f008 fee6 	bl	800d704 <osMessageGet>
	if(res.status==osEventMessage)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b10      	cmp	r3, #16
 800493c:	d105      	bne.n	800494a <seaglider_media_get_byte+0x2c>
    {
		*tx_byte=res.value.v;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	b2da      	uxtb	r2, r3
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	701a      	strb	r2, [r3, #0]
		return SEAGLIDER_F_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	e000      	b.n	800494c <seaglider_media_get_byte+0x2e>
    }
  return SEAGLIDER_F_ERR;
 800494a:	2301      	movs	r3, #1
}
 800494c:	4618      	mov	r0, r3
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <seaglider_send_evnt>:

void seaglider_send_evnt(seaglider* seaglider_obj,uint32_t event_id)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  char* snd_buffer=(char*)malloc(SEAGLIDER_SND_BUFFER_SIZE);
 800495e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004962:	f00b ff9f 	bl	80108a4 <malloc>
 8004966:	4603      	mov	r3, r0
 8004968:	60fb      	str	r3, [r7, #12]
  sprintf( snd_buffer,"%s%u",
 800496a:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <seaglider_send_evnt+0x44>)
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	490a      	ldr	r1, [pc, #40]	; (800499c <seaglider_send_evnt+0x48>)
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f00c fd72 	bl	801145c <siprintf>
		    seaglider_commands_strings[SEAGLIDER_MSG_EVNT],
			event_id
			);
  seaglider_schedule_for_tx(seaglider_obj,(uint8_t*)snd_buffer,strlen(snd_buffer));
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f7fb fc59 	bl	8000230 <strlen>
 800497e:	4603      	mov	r3, r0
 8004980:	461a      	mov	r2, r3
 8004982:	68f9      	ldr	r1, [r7, #12]
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f839 	bl	80049fc <seaglider_schedule_for_tx>
  free(snd_buffer);
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f00b ff92 	bl	80108b4 <free>
}
 8004990:	bf00      	nop
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	200001ac 	.word	0x200001ac
 800499c:	08015258 	.word	0x08015258

080049a0 <seaglider_send_cmd>:

void seaglider_send_cmd(seaglider* seaglider_obj,uint8_t cmd_id,void* arg)
{
 80049a0:	b590      	push	{r4, r7, lr}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	460b      	mov	r3, r1
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	72fb      	strb	r3, [r7, #11]
 memory_region_pointer* ptr1;
 switch(cmd_id)
 80049ae:	7afb      	ldrb	r3, [r7, #11]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <seaglider_send_cmd+0x1a>
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d00e      	beq.n	80049d6 <seaglider_send_cmd+0x36>
     case SEAGLIDER_CMD_SEND_DATA:
       ptr1=arg;
       seaglider_schedule_for_tx(seaglider_obj,(uint8_t*)ptr1->start_addr,ptr1->size);
     break;
 }
}
 80049b8:	e019      	b.n	80049ee <seaglider_send_cmd+0x4e>
       seaglider_schedule_for_tx(seaglider_obj,(uint8_t*)seaglider_commands_strings[SEAGLIDER_MSG_PROMPT],strlen(seaglider_commands_strings[SEAGLIDER_MSG_PROMPT]));
 80049ba:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <seaglider_send_cmd+0x58>)
 80049bc:	681c      	ldr	r4, [r3, #0]
 80049be:	4b0e      	ldr	r3, [pc, #56]	; (80049f8 <seaglider_send_cmd+0x58>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fb fc34 	bl	8000230 <strlen>
 80049c8:	4603      	mov	r3, r0
 80049ca:	461a      	mov	r2, r3
 80049cc:	4621      	mov	r1, r4
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 f814 	bl	80049fc <seaglider_schedule_for_tx>
	 break;
 80049d4:	e00b      	b.n	80049ee <seaglider_send_cmd+0x4e>
       ptr1=arg;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	617b      	str	r3, [r7, #20]
       seaglider_schedule_for_tx(seaglider_obj,(uint8_t*)ptr1->start_addr,ptr1->size);
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4619      	mov	r1, r3
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	461a      	mov	r2, r3
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 f808 	bl	80049fc <seaglider_schedule_for_tx>
     break;
 80049ec:	bf00      	nop
}
 80049ee:	bf00      	nop
 80049f0:	371c      	adds	r7, #28
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd90      	pop	{r4, r7, pc}
 80049f6:	bf00      	nop
 80049f8:	200001ac 	.word	0x200001ac

080049fc <seaglider_schedule_for_tx>:

void seaglider_schedule_for_tx(seaglider* seaglider_obj,uint8_t* message,uint32_t size)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 osSemaphoreWait(seaglider_obj->out_q_sem,osWaitForever);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a10:	4618      	mov	r0, r3
 8004a12:	f008 fd8b 	bl	800d52c <osSemaphoreWait>
 for(int i=0;i<size;i++)
 8004a16:	2300      	movs	r3, #0
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	e00d      	b.n	8004a38 <seaglider_schedule_for_tx+0x3c>
 {
   osMessagePut(seaglider_obj->media_tx_q,*(message+i),osWaitForever);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6858      	ldr	r0, [r3, #4]
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	4413      	add	r3, r2
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	f04f 32ff 	mov.w	r2, #4294967295
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	f008 fe29 	bl	800d684 <osMessagePut>
 for(int i=0;i<size;i++)
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	3301      	adds	r3, #1
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d8ed      	bhi.n	8004a1c <seaglider_schedule_for_tx+0x20>
 }
 osSemaphoreRelease(seaglider_obj->out_q_sem);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f008 fdbf 	bl	800d5c8 <osSemaphoreRelease>
}
 8004a4a:	bf00      	nop
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <seaglider_parse_message>:
 return SEAGLIDER_F_ERR;
}


int seaglider_parse_message(seaglider* seaglider_obj,uint8_t* msg)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
 uint8_t* tmp_ptr;
 for(int i=0;i<SEAGLIDER_MSG_NUM_OF_FUNCTIONS;i++)
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	e01e      	b.n	8004aa2 <seaglider_parse_message+0x4e>
 {
	  tmp_ptr=0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	60bb      	str	r3, [r7, #8]
	  tmp_ptr=strstr(msg,seaglider_messages_strings[i]);
 8004a68:	4a12      	ldr	r2, [pc, #72]	; (8004ab4 <seaglider_parse_message+0x60>)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a70:	4619      	mov	r1, r3
 8004a72:	6838      	ldr	r0, [r7, #0]
 8004a74:	f00c fd6c 	bl	8011550 <strstr>
 8004a78:	60b8      	str	r0, [r7, #8]
	  if(tmp_ptr)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00d      	beq.n	8004a9c <seaglider_parse_message+0x48>
		{
			if(seaglider_functions[i](seaglider_obj,msg)==SEAGLIDER_F_OK) return SEAGLIDER_F_OK;
 8004a80:	4a0d      	ldr	r2, [pc, #52]	; (8004ab8 <seaglider_parse_message+0x64>)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a88:	6839      	ldr	r1, [r7, #0]
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	4798      	blx	r3
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <seaglider_parse_message+0x44>
 8004a94:	2300      	movs	r3, #0
 8004a96:	e008      	b.n	8004aaa <seaglider_parse_message+0x56>
      else return SEAGLIDER_F_ERR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e006      	b.n	8004aaa <seaglider_parse_message+0x56>
 for(int i=0;i<SEAGLIDER_MSG_NUM_OF_FUNCTIONS;i++)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2b0b      	cmp	r3, #11
 8004aa6:	dddd      	ble.n	8004a64 <seaglider_parse_message+0x10>
		}

 }
 return SEAGLIDER_F_ERR;
 8004aa8:	2301      	movs	r3, #1
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20002838 	.word	0x20002838
 8004ab8:	20002808 	.word	0x20002808

08004abc <seaglider_messages_init>:

void seaglider_messages_init(seaglider* seaglider_obj)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
	seaglider_functions[SEAGLIDER_MSG_DEPTH] = SEAGLIDER_MSG_DEPTH_f;
 8004ac4:	4b26      	ldr	r3, [pc, #152]	; (8004b60 <seaglider_messages_init+0xa4>)
 8004ac6:	4a27      	ldr	r2, [pc, #156]	; (8004b64 <seaglider_messages_init+0xa8>)
 8004ac8:	601a      	str	r2, [r3, #0]
	seaglider_functions[SEAGLIDER_MSG_STOP] = SEAGLIDER_MSG_STOP_f;
 8004aca:	4b25      	ldr	r3, [pc, #148]	; (8004b60 <seaglider_messages_init+0xa4>)
 8004acc:	4a26      	ldr	r2, [pc, #152]	; (8004b68 <seaglider_messages_init+0xac>)
 8004ace:	605a      	str	r2, [r3, #4]
	seaglider_functions[SEAGLIDER_MSG_SEND_TXT_FILE] = SEAGLIDER_MSG_SEND_TXT_FILE_f;
 8004ad0:	4b23      	ldr	r3, [pc, #140]	; (8004b60 <seaglider_messages_init+0xa4>)
 8004ad2:	4a26      	ldr	r2, [pc, #152]	; (8004b6c <seaglider_messages_init+0xb0>)
 8004ad4:	609a      	str	r2, [r3, #8]
	seaglider_functions[SEAGLIDER_MSG_START] = SEAGLIDER_MSG_START_f;
 8004ad6:	4b22      	ldr	r3, [pc, #136]	; (8004b60 <seaglider_messages_init+0xa4>)
 8004ad8:	4a25      	ldr	r2, [pc, #148]	; (8004b70 <seaglider_messages_init+0xb4>)
 8004ada:	60da      	str	r2, [r3, #12]
	seaglider_functions[SEAGLIDER_MSG_SEND_INFO] =SEAGLIDER_MSG_SEND_INFO_f;
 8004adc:	4b20      	ldr	r3, [pc, #128]	; (8004b60 <seaglider_messages_init+0xa4>)
 8004ade:	4a25      	ldr	r2, [pc, #148]	; (8004b74 <seaglider_messages_init+0xb8>)
 8004ae0:	611a      	str	r2, [r3, #16]
	seaglider_functions[SEAGLIDER_MSG_RESET] =SEAGLIDER_MSG_RESET_f;
 8004ae2:	4b1f      	ldr	r3, [pc, #124]	; (8004b60 <seaglider_messages_init+0xa4>)
 8004ae4:	4a24      	ldr	r2, [pc, #144]	; (8004b78 <seaglider_messages_init+0xbc>)
 8004ae6:	615a      	str	r2, [r3, #20]
	seaglider_functions[SEAGLIDER_MSG_TEST] =SEAGLIDER_MSG_TEST_f;
 8004ae8:	4b1d      	ldr	r3, [pc, #116]	; (8004b60 <seaglider_messages_init+0xa4>)
 8004aea:	4a24      	ldr	r2, [pc, #144]	; (8004b7c <seaglider_messages_init+0xc0>)
 8004aec:	619a      	str	r2, [r3, #24]
	seaglider_functions[SEAGLIDER_MSG_CLOCK] =SEAGLIDER_MSG_CLOCK_f;
 8004aee:	4b1c      	ldr	r3, [pc, #112]	; (8004b60 <seaglider_messages_init+0xa4>)
 8004af0:	4a23      	ldr	r2, [pc, #140]	; (8004b80 <seaglider_messages_init+0xc4>)
 8004af2:	61da      	str	r2, [r3, #28]
	seaglider_functions[SEAGLIDER_MSG_WAKEUP] =SEAGLIDER_MSG_WAKEUP_f;
 8004af4:	4b1a      	ldr	r3, [pc, #104]	; (8004b60 <seaglider_messages_init+0xa4>)
 8004af6:	4a23      	ldr	r2, [pc, #140]	; (8004b84 <seaglider_messages_init+0xc8>)
 8004af8:	621a      	str	r2, [r3, #32]
	seaglider_functions[SEAGLIDER_MSG_CLEAR] =SEAGLIDER_MSG_CLEAR_f;
 8004afa:	4b19      	ldr	r3, [pc, #100]	; (8004b60 <seaglider_messages_init+0xa4>)
 8004afc:	4a22      	ldr	r2, [pc, #136]	; (8004b88 <seaglider_messages_init+0xcc>)
 8004afe:	625a      	str	r2, [r3, #36]	; 0x24
	seaglider_functions[SEAGLIDER_MSG_POFF] =SEAGLIDER_MSG_POFF_f;
 8004b00:	4b17      	ldr	r3, [pc, #92]	; (8004b60 <seaglider_messages_init+0xa4>)
 8004b02:	4a22      	ldr	r2, [pc, #136]	; (8004b8c <seaglider_messages_init+0xd0>)
 8004b04:	629a      	str	r2, [r3, #40]	; 0x28
	seaglider_functions[SEAGLIDER_MSG_ERRORS] =SEAGLIDER_MSG_ERRORS_f;
 8004b06:	4b16      	ldr	r3, [pc, #88]	; (8004b60 <seaglider_messages_init+0xa4>)
 8004b08:	4a21      	ldr	r2, [pc, #132]	; (8004b90 <seaglider_messages_init+0xd4>)
 8004b0a:	62da      	str	r2, [r3, #44]	; 0x2c

	seaglider_messages_strings[SEAGLIDER_MSG_DEPTH] = "DEPTH";
 8004b0c:	4b21      	ldr	r3, [pc, #132]	; (8004b94 <seaglider_messages_init+0xd8>)
 8004b0e:	4a22      	ldr	r2, [pc, #136]	; (8004b98 <seaglider_messages_init+0xdc>)
 8004b10:	601a      	str	r2, [r3, #0]
	seaglider_messages_strings[SEAGLIDER_MSG_STOP] = "STOP";
 8004b12:	4b20      	ldr	r3, [pc, #128]	; (8004b94 <seaglider_messages_init+0xd8>)
 8004b14:	4a21      	ldr	r2, [pc, #132]	; (8004b9c <seaglider_messages_init+0xe0>)
 8004b16:	605a      	str	r2, [r3, #4]
	seaglider_messages_strings[SEAGLIDER_MSG_SEND_TXT_FILE] = "SEND_TXT_FILE";
 8004b18:	4b1e      	ldr	r3, [pc, #120]	; (8004b94 <seaglider_messages_init+0xd8>)
 8004b1a:	4a21      	ldr	r2, [pc, #132]	; (8004ba0 <seaglider_messages_init+0xe4>)
 8004b1c:	609a      	str	r2, [r3, #8]
	seaglider_messages_strings[SEAGLIDER_MSG_START] = "START";
 8004b1e:	4b1d      	ldr	r3, [pc, #116]	; (8004b94 <seaglider_messages_init+0xd8>)
 8004b20:	4a20      	ldr	r2, [pc, #128]	; (8004ba4 <seaglider_messages_init+0xe8>)
 8004b22:	60da      	str	r2, [r3, #12]
	seaglider_messages_strings[SEAGLIDER_MSG_SEND_INFO] ="SEND_INFO";
 8004b24:	4b1b      	ldr	r3, [pc, #108]	; (8004b94 <seaglider_messages_init+0xd8>)
 8004b26:	4a20      	ldr	r2, [pc, #128]	; (8004ba8 <seaglider_messages_init+0xec>)
 8004b28:	611a      	str	r2, [r3, #16]
	seaglider_messages_strings[SEAGLIDER_MSG_RESET] ="RESET";
 8004b2a:	4b1a      	ldr	r3, [pc, #104]	; (8004b94 <seaglider_messages_init+0xd8>)
 8004b2c:	4a1f      	ldr	r2, [pc, #124]	; (8004bac <seaglider_messages_init+0xf0>)
 8004b2e:	615a      	str	r2, [r3, #20]
	seaglider_messages_strings[SEAGLIDER_MSG_TEST] ="TEST";
 8004b30:	4b18      	ldr	r3, [pc, #96]	; (8004b94 <seaglider_messages_init+0xd8>)
 8004b32:	4a1f      	ldr	r2, [pc, #124]	; (8004bb0 <seaglider_messages_init+0xf4>)
 8004b34:	619a      	str	r2, [r3, #24]
	seaglider_messages_strings[SEAGLIDER_MSG_CLOCK] ="CLOCK";
 8004b36:	4b17      	ldr	r3, [pc, #92]	; (8004b94 <seaglider_messages_init+0xd8>)
 8004b38:	4a1e      	ldr	r2, [pc, #120]	; (8004bb4 <seaglider_messages_init+0xf8>)
 8004b3a:	61da      	str	r2, [r3, #28]
	seaglider_messages_strings[SEAGLIDER_MSG_WAKEUP] ="WAKEUP";
 8004b3c:	4b15      	ldr	r3, [pc, #84]	; (8004b94 <seaglider_messages_init+0xd8>)
 8004b3e:	4a1e      	ldr	r2, [pc, #120]	; (8004bb8 <seaglider_messages_init+0xfc>)
 8004b40:	621a      	str	r2, [r3, #32]
	seaglider_messages_strings[SEAGLIDER_MSG_CLEAR] ="CLEAR";
 8004b42:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <seaglider_messages_init+0xd8>)
 8004b44:	4a1d      	ldr	r2, [pc, #116]	; (8004bbc <seaglider_messages_init+0x100>)
 8004b46:	625a      	str	r2, [r3, #36]	; 0x24
	seaglider_messages_strings[SEAGLIDER_MSG_POFF] ="POFF";
 8004b48:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <seaglider_messages_init+0xd8>)
 8004b4a:	4a1d      	ldr	r2, [pc, #116]	; (8004bc0 <seaglider_messages_init+0x104>)
 8004b4c:	629a      	str	r2, [r3, #40]	; 0x28
	seaglider_messages_strings[SEAGLIDER_MSG_ERRORS] ="ERRORS";
 8004b4e:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <seaglider_messages_init+0xd8>)
 8004b50:	4a1c      	ldr	r2, [pc, #112]	; (8004bc4 <seaglider_messages_init+0x108>)
 8004b52:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bc80      	pop	{r7}
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	20002808 	.word	0x20002808
 8004b64:	08004bc9 	.word	0x08004bc9
 8004b68:	08004c29 	.word	0x08004c29
 8004b6c:	08004ce9 	.word	0x08004ce9
 8004b70:	08004c89 	.word	0x08004c89
 8004b74:	08004d0d 	.word	0x08004d0d
 8004b78:	08004d23 	.word	0x08004d23
 8004b7c:	08004d39 	.word	0x08004d39
 8004b80:	08004d5d 	.word	0x08004d5d
 8004b84:	08004dc1 	.word	0x08004dc1
 8004b88:	08004de5 	.word	0x08004de5
 8004b8c:	08004e09 	.word	0x08004e09
 8004b90:	08004e2d 	.word	0x08004e2d
 8004b94:	20002838 	.word	0x20002838
 8004b98:	08015260 	.word	0x08015260
 8004b9c:	08015268 	.word	0x08015268
 8004ba0:	08015270 	.word	0x08015270
 8004ba4:	08015280 	.word	0x08015280
 8004ba8:	08015288 	.word	0x08015288
 8004bac:	08015294 	.word	0x08015294
 8004bb0:	0801529c 	.word	0x0801529c
 8004bb4:	080152a4 	.word	0x080152a4
 8004bb8:	080152ac 	.word	0x080152ac
 8004bbc:	080152b4 	.word	0x080152b4
 8004bc0:	080152bc 	.word	0x080152bc
 8004bc4:	080152c4 	.word	0x080152c4

08004bc8 <SEAGLIDER_MSG_DEPTH_f>:


int SEAGLIDER_MSG_DEPTH_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]

	char * pch;
	pch = strtok (msg,":");//header
 8004bd2:	4913      	ldr	r1, [pc, #76]	; (8004c20 <SEAGLIDER_MSG_DEPTH_f+0x58>)
 8004bd4:	6838      	ldr	r0, [r7, #0]
 8004bd6:	f00d fb2d 	bl	8012234 <strtok>
 8004bda:	60f8      	str	r0, [r7, #12]
	pch = strtok (NULL,",");//depth
 8004bdc:	4911      	ldr	r1, [pc, #68]	; (8004c24 <SEAGLIDER_MSG_DEPTH_f+0x5c>)
 8004bde:	2000      	movs	r0, #0
 8004be0:	f00d fb28 	bl	8012234 <strtok>
 8004be4:	60f8      	str	r0, [r7, #12]
	seaglider_obj->prev_depth=seaglider_obj->last_depth;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8d3 2015 	ldr.w	r2, [r3, #21]
 8004bec:	4613      	mov	r3, r2
 8004bee:	461a      	mov	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8c3 2019 	str.w	r2, [r3, #25]
	seaglider_obj->last_depth=strtof(pch,NULL);
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f00d fac9 	bl	8012190 <strtof>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f8c3 2015 	str.w	r2, [r3, #21]
	//pch = strtok (NULL,",");//date
	//memcpy(seaglider_obj->date,pch,8);
	//pch = strtok (NULL,",");//time
	//memcpy(seaglider_obj->time,pch,6);

	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_DEPTH_RCVD,1);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f240 215e 	movw	r1, #606	; 0x25e
 8004c10:	4618      	mov	r0, r3
 8004c12:	f008 fd37 	bl	800d684 <osMessagePut>
	return SEAGLIDER_F_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	080152cc 	.word	0x080152cc
 8004c24:	080152d0 	.word	0x080152d0

08004c28 <SEAGLIDER_MSG_STOP_f>:
int SEAGLIDER_MSG_STOP_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg,":");//header
 8004c32:	4913      	ldr	r1, [pc, #76]	; (8004c80 <SEAGLIDER_MSG_STOP_f+0x58>)
 8004c34:	6838      	ldr	r0, [r7, #0]
 8004c36:	f00d fafd 	bl	8012234 <strtok>
 8004c3a:	60f8      	str	r0, [r7, #12]
	pch = strtok (NULL,",");//dive-climb
 8004c3c:	4911      	ldr	r1, [pc, #68]	; (8004c84 <SEAGLIDER_MSG_STOP_f+0x5c>)
 8004c3e:	2000      	movs	r0, #0
 8004c40:	f00d faf8 	bl	8012234 <strtok>
 8004c44:	60f8      	str	r0, [r7, #12]
	if(*pch=='a'){
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	2b61      	cmp	r3, #97	; 0x61
 8004c4c:	d103      	bne.n	8004c56 <SEAGLIDER_MSG_STOP_f+0x2e>
	  seaglider_obj->dive_status=SEAGLIDER_STATUS_DIVE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	74da      	strb	r2, [r3, #19]
 8004c54:	e006      	b.n	8004c64 <SEAGLIDER_MSG_STOP_f+0x3c>
	}
	else if(*pch=='b'){
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b62      	cmp	r3, #98	; 0x62
 8004c5c:	d102      	bne.n	8004c64 <SEAGLIDER_MSG_STOP_f+0x3c>
	  seaglider_obj->dive_status=SEAGLIDER_STATUS_CLIMB;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2202      	movs	r2, #2
 8004c62:	74da      	strb	r2, [r3, #19]
	}
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_STOP_RCVD,1);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f240 2159 	movw	r1, #601	; 0x259
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f008 fd08 	bl	800d684 <osMessagePut>
	return SEAGLIDER_F_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	080152cc 	.word	0x080152cc
 8004c84:	080152d0 	.word	0x080152d0

08004c88 <SEAGLIDER_MSG_START_f>:
int SEAGLIDER_MSG_START_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg,":");//header
 8004c92:	4913      	ldr	r1, [pc, #76]	; (8004ce0 <SEAGLIDER_MSG_START_f+0x58>)
 8004c94:	6838      	ldr	r0, [r7, #0]
 8004c96:	f00d facd 	bl	8012234 <strtok>
 8004c9a:	60f8      	str	r0, [r7, #12]
	pch = strtok (NULL,",");//dive-climb
 8004c9c:	4911      	ldr	r1, [pc, #68]	; (8004ce4 <SEAGLIDER_MSG_START_f+0x5c>)
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	f00d fac8 	bl	8012234 <strtok>
 8004ca4:	60f8      	str	r0, [r7, #12]
	if(*pch=='a'){
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b61      	cmp	r3, #97	; 0x61
 8004cac:	d103      	bne.n	8004cb6 <SEAGLIDER_MSG_START_f+0x2e>
	  seaglider_obj->dive_status=SEAGLIDER_STATUS_DIVE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	74da      	strb	r2, [r3, #19]
 8004cb4:	e006      	b.n	8004cc4 <SEAGLIDER_MSG_START_f+0x3c>
	}
	else if(*pch=='b'){
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b62      	cmp	r3, #98	; 0x62
 8004cbc:	d102      	bne.n	8004cc4 <SEAGLIDER_MSG_START_f+0x3c>
	  seaglider_obj->dive_status=SEAGLIDER_STATUS_CLIMB;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	74da      	strb	r2, [r3, #19]
	}

	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_START_RCVD,1);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f44f 7116 	mov.w	r1, #600	; 0x258
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f008 fcd8 	bl	800d684 <osMessagePut>
	return SEAGLIDER_F_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	080152cc 	.word	0x080152cc
 8004ce4:	080152d0 	.word	0x080152d0

08004ce8 <SEAGLIDER_MSG_SEND_TXT_FILE_f>:
int SEAGLIDER_MSG_SEND_TXT_FILE_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_SEND_TXT_FILE_RCVD,1);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f240 215b 	movw	r1, #603	; 0x25b
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f008 fcc1 	bl	800d684 <osMessagePut>
	return SEAGLIDER_F_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <SEAGLIDER_MSG_SEND_INFO_f>:
int SEAGLIDER_MSG_SEND_INFO_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
	return SEAGLIDER_F_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bc80      	pop	{r7}
 8004d20:	4770      	bx	lr

08004d22 <SEAGLIDER_MSG_RESET_f>:
int SEAGLIDER_MSG_RESET_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	6039      	str	r1, [r7, #0]
	return SEAGLIDER_F_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <SEAGLIDER_MSG_TEST_f>:
int SEAGLIDER_MSG_TEST_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_TEST_RCVD,1);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f240 215a 	movw	r1, #602	; 0x25a
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f008 fc99 	bl	800d684 <osMessagePut>
	return SEAGLIDER_F_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <SEAGLIDER_MSG_CLOCK_f>:
int SEAGLIDER_MSG_CLOCK_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (msg,":");//header
 8004d66:	4915      	ldr	r1, [pc, #84]	; (8004dbc <SEAGLIDER_MSG_CLOCK_f+0x60>)
 8004d68:	6838      	ldr	r0, [r7, #0]
 8004d6a:	f00d fa63 	bl	8012234 <strtok>
 8004d6e:	60f8      	str	r0, [r7, #12]
	pch = strtok (NULL,":");//date
 8004d70:	4912      	ldr	r1, [pc, #72]	; (8004dbc <SEAGLIDER_MSG_CLOCK_f+0x60>)
 8004d72:	2000      	movs	r0, #0
 8004d74:	f00d fa5e 	bl	8012234 <strtok>
 8004d78:	60f8      	str	r0, [r7, #12]
	memcpy(seaglider_obj->date,pch,8);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	331d      	adds	r3, #29
 8004d7e:	2208      	movs	r2, #8
 8004d80:	68f9      	ldr	r1, [r7, #12]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f00b fd9e 	bl	80108c4 <memcpy>
	pch = strtok (NULL,":");//time
 8004d88:	490c      	ldr	r1, [pc, #48]	; (8004dbc <SEAGLIDER_MSG_CLOCK_f+0x60>)
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	f00d fa52 	bl	8012234 <strtok>
 8004d90:	60f8      	str	r0, [r7, #12]
	memcpy(seaglider_obj->time,pch,8);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3325      	adds	r3, #37	; 0x25
 8004d96:	2208      	movs	r2, #8
 8004d98:	68f9      	ldr	r1, [r7, #12]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f00b fd92 	bl	80108c4 <memcpy>

	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_CLOCK_RCVD,1);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8004daa:	4618      	mov	r0, r3
 8004dac:	f008 fc6a 	bl	800d684 <osMessagePut>
	return SEAGLIDER_F_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	080152cc 	.word	0x080152cc

08004dc0 <SEAGLIDER_MSG_WAKEUP_f>:

int SEAGLIDER_MSG_WAKEUP_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_WAKEUP_RCVD,1);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f240 215d 	movw	r1, #605	; 0x25d
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f008 fc55 	bl	800d684 <osMessagePut>
	return SEAGLIDER_F_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <SEAGLIDER_MSG_CLEAR_f>:

int SEAGLIDER_MSG_CLEAR_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_CLEAR_RCVD,1);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f240 215f 	movw	r1, #607	; 0x25f
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f008 fc43 	bl	800d684 <osMessagePut>
	return SEAGLIDER_F_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <SEAGLIDER_MSG_POFF_f>:

int SEAGLIDER_MSG_POFF_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_POFF_RCVD,1);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f44f 7118 	mov.w	r1, #608	; 0x260
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f008 fc31 	bl	800d684 <osMessagePut>
	return SEAGLIDER_F_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <SEAGLIDER_MSG_ERRORS_f>:
int SEAGLIDER_MSG_ERRORS_f(seaglider* seaglider_obj,uint8_t* msg)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
	osMessagePut(seaglider_obj->events_q,SEAGLIDER_EVNT_ERRORS_RCVD,1);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f240 2161 	movw	r1, #609	; 0x261
 8004e40:	4618      	mov	r0, r3
 8004e42:	f008 fc1f 	bl	800d684 <osMessagePut>
	return SEAGLIDER_F_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <set_default_settings>:
extern sd_storage_t microsd_storage;

settings_str run_cfg;

void set_default_settings()
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
	run_cfg.last_file_index=0;
 8004e54:	4b03      	ldr	r3, [pc, #12]	; (8004e64 <set_default_settings+0x14>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]
}
 8004e5a:	bf00      	nop
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bc80      	pop	{r7}
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	20002868 	.word	0x20002868

08004e68 <read_settings>:

F_RES read_settings()
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  if( read_raw_data_crc16(&microsd_storage,(uint8_t*)&run_cfg,sizeof(run_cfg),settings_filename)==F_OK){
 8004e6c:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <read_settings+0x20>)
 8004e6e:	2204      	movs	r2, #4
 8004e70:	4906      	ldr	r1, [pc, #24]	; (8004e8c <read_settings+0x24>)
 8004e72:	4807      	ldr	r0, [pc, #28]	; (8004e90 <read_settings+0x28>)
 8004e74:	f7fd f97e 	bl	8002174 <read_raw_data_crc16>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <read_settings+0x1a>
	return F_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	e000      	b.n	8004e84 <read_settings+0x1c>
  }
  return F_ERR;
 8004e82:	2301      	movs	r3, #1
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	200001b4 	.word	0x200001b4
 8004e8c:	20002868 	.word	0x20002868
 8004e90:	200021e0 	.word	0x200021e0

08004e94 <save_settings>:

F_RES save_settings()
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  if( save_raw_data_crc16(&microsd_storage,(uint8_t*)&run_cfg,sizeof(run_cfg),settings_filename)==F_OK){
 8004e98:	4b06      	ldr	r3, [pc, #24]	; (8004eb4 <save_settings+0x20>)
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	4906      	ldr	r1, [pc, #24]	; (8004eb8 <save_settings+0x24>)
 8004e9e:	4807      	ldr	r0, [pc, #28]	; (8004ebc <save_settings+0x28>)
 8004ea0:	f7fd fa44 	bl	800232c <save_raw_data_crc16>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <save_settings+0x1a>
	return F_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	e000      	b.n	8004eb0 <save_settings+0x1c>
  }
  return F_ERR;
 8004eae:	2301      	movs	r3, #1
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	200001b4 	.word	0x200001b4
 8004eb8:	20002868 	.word	0x20002868
 8004ebc:	200021e0 	.word	0x200021e0

08004ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004ec6:	4b18      	ldr	r3, [pc, #96]	; (8004f28 <HAL_MspInit+0x68>)
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	4a17      	ldr	r2, [pc, #92]	; (8004f28 <HAL_MspInit+0x68>)
 8004ecc:	f043 0301 	orr.w	r3, r3, #1
 8004ed0:	6193      	str	r3, [r2, #24]
 8004ed2:	4b15      	ldr	r3, [pc, #84]	; (8004f28 <HAL_MspInit+0x68>)
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	60bb      	str	r3, [r7, #8]
 8004edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ede:	4b12      	ldr	r3, [pc, #72]	; (8004f28 <HAL_MspInit+0x68>)
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	4a11      	ldr	r2, [pc, #68]	; (8004f28 <HAL_MspInit+0x68>)
 8004ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee8:	61d3      	str	r3, [r2, #28]
 8004eea:	4b0f      	ldr	r3, [pc, #60]	; (8004f28 <HAL_MspInit+0x68>)
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	607b      	str	r3, [r7, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	210f      	movs	r1, #15
 8004efa:	f06f 0001 	mvn.w	r0, #1
 8004efe:	f000 fc0e 	bl	800571e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004f02:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <HAL_MspInit+0x6c>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	4a04      	ldr	r2, [pc, #16]	; (8004f2c <HAL_MspInit+0x6c>)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f1e:	bf00      	nop
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	40010000 	.word	0x40010000

08004f30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08a      	sub	sp, #40	; 0x28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f38:	f107 0314 	add.w	r3, r7, #20
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	605a      	str	r2, [r3, #4]
 8004f42:	609a      	str	r2, [r3, #8]
 8004f44:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a4e      	ldr	r2, [pc, #312]	; (8005084 <HAL_SPI_MspInit+0x154>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	f040 8094 	bne.w	800507a <HAL_SPI_MspInit+0x14a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f52:	4b4d      	ldr	r3, [pc, #308]	; (8005088 <HAL_SPI_MspInit+0x158>)
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	4a4c      	ldr	r2, [pc, #304]	; (8005088 <HAL_SPI_MspInit+0x158>)
 8004f58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f5c:	6193      	str	r3, [r2, #24]
 8004f5e:	4b4a      	ldr	r3, [pc, #296]	; (8005088 <HAL_SPI_MspInit+0x158>)
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f6a:	4b47      	ldr	r3, [pc, #284]	; (8005088 <HAL_SPI_MspInit+0x158>)
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	4a46      	ldr	r2, [pc, #280]	; (8005088 <HAL_SPI_MspInit+0x158>)
 8004f70:	f043 0308 	orr.w	r3, r3, #8
 8004f74:	6193      	str	r3, [r2, #24]
 8004f76:	4b44      	ldr	r3, [pc, #272]	; (8005088 <HAL_SPI_MspInit+0x158>)
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004f82:	2328      	movs	r3, #40	; 0x28
 8004f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f86:	2302      	movs	r3, #2
 8004f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f8e:	f107 0314 	add.w	r3, r7, #20
 8004f92:	4619      	mov	r1, r3
 8004f94:	483d      	ldr	r0, [pc, #244]	; (800508c <HAL_SPI_MspInit+0x15c>)
 8004f96:	f000 ffe3 	bl	8005f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004f9a:	2310      	movs	r3, #16
 8004f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fa6:	f107 0314 	add.w	r3, r7, #20
 8004faa:	4619      	mov	r1, r3
 8004fac:	4837      	ldr	r0, [pc, #220]	; (800508c <HAL_SPI_MspInit+0x15c>)
 8004fae:	f000 ffd7 	bl	8005f60 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8004fb2:	4b37      	ldr	r3, [pc, #220]	; (8005090 <HAL_SPI_MspInit+0x160>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	f043 0301 	orr.w	r3, r3, #1
 8004fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc8:	4a31      	ldr	r2, [pc, #196]	; (8005090 <HAL_SPI_MspInit+0x160>)
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	6053      	str	r3, [r2, #4]

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8004fce:	4b31      	ldr	r3, [pc, #196]	; (8005094 <HAL_SPI_MspInit+0x164>)
 8004fd0:	4a31      	ldr	r2, [pc, #196]	; (8005098 <HAL_SPI_MspInit+0x168>)
 8004fd2:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004fd4:	4b2f      	ldr	r3, [pc, #188]	; (8005094 <HAL_SPI_MspInit+0x164>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fda:	4b2e      	ldr	r3, [pc, #184]	; (8005094 <HAL_SPI_MspInit+0x164>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004fe0:	4b2c      	ldr	r3, [pc, #176]	; (8005094 <HAL_SPI_MspInit+0x164>)
 8004fe2:	2280      	movs	r2, #128	; 0x80
 8004fe4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004fe6:	4b2b      	ldr	r3, [pc, #172]	; (8005094 <HAL_SPI_MspInit+0x164>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004fec:	4b29      	ldr	r3, [pc, #164]	; (8005094 <HAL_SPI_MspInit+0x164>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004ff2:	4b28      	ldr	r3, [pc, #160]	; (8005094 <HAL_SPI_MspInit+0x164>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004ff8:	4b26      	ldr	r3, [pc, #152]	; (8005094 <HAL_SPI_MspInit+0x164>)
 8004ffa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ffe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8005000:	4824      	ldr	r0, [pc, #144]	; (8005094 <HAL_SPI_MspInit+0x164>)
 8005002:	f000 fbb7 	bl	8005774 <HAL_DMA_Init>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <HAL_SPI_MspInit+0xe0>
    {
      Error_Handler();
 800500c:	f7ff f88c 	bl	8004128 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a20      	ldr	r2, [pc, #128]	; (8005094 <HAL_SPI_MspInit+0x164>)
 8005014:	64da      	str	r2, [r3, #76]	; 0x4c
 8005016:	4a1f      	ldr	r2, [pc, #124]	; (8005094 <HAL_SPI_MspInit+0x164>)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800501c:	4b1f      	ldr	r3, [pc, #124]	; (800509c <HAL_SPI_MspInit+0x16c>)
 800501e:	4a20      	ldr	r2, [pc, #128]	; (80050a0 <HAL_SPI_MspInit+0x170>)
 8005020:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005022:	4b1e      	ldr	r3, [pc, #120]	; (800509c <HAL_SPI_MspInit+0x16c>)
 8005024:	2210      	movs	r2, #16
 8005026:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005028:	4b1c      	ldr	r3, [pc, #112]	; (800509c <HAL_SPI_MspInit+0x16c>)
 800502a:	2200      	movs	r2, #0
 800502c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800502e:	4b1b      	ldr	r3, [pc, #108]	; (800509c <HAL_SPI_MspInit+0x16c>)
 8005030:	2280      	movs	r2, #128	; 0x80
 8005032:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005034:	4b19      	ldr	r3, [pc, #100]	; (800509c <HAL_SPI_MspInit+0x16c>)
 8005036:	2200      	movs	r2, #0
 8005038:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800503a:	4b18      	ldr	r3, [pc, #96]	; (800509c <HAL_SPI_MspInit+0x16c>)
 800503c:	2200      	movs	r2, #0
 800503e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8005040:	4b16      	ldr	r3, [pc, #88]	; (800509c <HAL_SPI_MspInit+0x16c>)
 8005042:	2200      	movs	r2, #0
 8005044:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005046:	4b15      	ldr	r3, [pc, #84]	; (800509c <HAL_SPI_MspInit+0x16c>)
 8005048:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800504c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800504e:	4813      	ldr	r0, [pc, #76]	; (800509c <HAL_SPI_MspInit+0x16c>)
 8005050:	f000 fb90 	bl	8005774 <HAL_DMA_Init>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_SPI_MspInit+0x12e>
    {
      Error_Handler();
 800505a:	f7ff f865 	bl	8004128 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a0e      	ldr	r2, [pc, #56]	; (800509c <HAL_SPI_MspInit+0x16c>)
 8005062:	649a      	str	r2, [r3, #72]	; 0x48
 8005064:	4a0d      	ldr	r2, [pc, #52]	; (800509c <HAL_SPI_MspInit+0x16c>)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800506a:	2200      	movs	r2, #0
 800506c:	2105      	movs	r1, #5
 800506e:	2023      	movs	r0, #35	; 0x23
 8005070:	f000 fb55 	bl	800571e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005074:	2023      	movs	r0, #35	; 0x23
 8005076:	f000 fb6e 	bl	8005756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800507a:	bf00      	nop
 800507c:	3728      	adds	r7, #40	; 0x28
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	40013000 	.word	0x40013000
 8005088:	40021000 	.word	0x40021000
 800508c:	40010c00 	.word	0x40010c00
 8005090:	40010000 	.word	0x40010000
 8005094:	20001380 	.word	0x20001380
 8005098:	4002001c 	.word	0x4002001c
 800509c:	200013c4 	.word	0x200013c4
 80050a0:	40020030 	.word	0x40020030

080050a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08c      	sub	sp, #48	; 0x30
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050ac:	f107 0320 	add.w	r3, r7, #32
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	605a      	str	r2, [r3, #4]
 80050b6:	609a      	str	r2, [r3, #8]
 80050b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART5)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a46      	ldr	r2, [pc, #280]	; (80051d8 <HAL_UART_MspInit+0x134>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d145      	bne.n	8005150 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80050c4:	4b45      	ldr	r3, [pc, #276]	; (80051dc <HAL_UART_MspInit+0x138>)
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	4a44      	ldr	r2, [pc, #272]	; (80051dc <HAL_UART_MspInit+0x138>)
 80050ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ce:	61d3      	str	r3, [r2, #28]
 80050d0:	4b42      	ldr	r3, [pc, #264]	; (80051dc <HAL_UART_MspInit+0x138>)
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050d8:	61fb      	str	r3, [r7, #28]
 80050da:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050dc:	4b3f      	ldr	r3, [pc, #252]	; (80051dc <HAL_UART_MspInit+0x138>)
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	4a3e      	ldr	r2, [pc, #248]	; (80051dc <HAL_UART_MspInit+0x138>)
 80050e2:	f043 0310 	orr.w	r3, r3, #16
 80050e6:	6193      	str	r3, [r2, #24]
 80050e8:	4b3c      	ldr	r3, [pc, #240]	; (80051dc <HAL_UART_MspInit+0x138>)
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	f003 0310 	and.w	r3, r3, #16
 80050f0:	61bb      	str	r3, [r7, #24]
 80050f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80050f4:	4b39      	ldr	r3, [pc, #228]	; (80051dc <HAL_UART_MspInit+0x138>)
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	4a38      	ldr	r2, [pc, #224]	; (80051dc <HAL_UART_MspInit+0x138>)
 80050fa:	f043 0320 	orr.w	r3, r3, #32
 80050fe:	6193      	str	r3, [r2, #24]
 8005100:	4b36      	ldr	r3, [pc, #216]	; (80051dc <HAL_UART_MspInit+0x138>)
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	f003 0320 	and.w	r3, r3, #32
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800510c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005112:	2302      	movs	r3, #2
 8005114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005116:	2303      	movs	r3, #3
 8005118:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800511a:	f107 0320 	add.w	r3, r7, #32
 800511e:	4619      	mov	r1, r3
 8005120:	482f      	ldr	r0, [pc, #188]	; (80051e0 <HAL_UART_MspInit+0x13c>)
 8005122:	f000 ff1d 	bl	8005f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005126:	2304      	movs	r3, #4
 8005128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800512a:	2300      	movs	r3, #0
 800512c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512e:	2300      	movs	r3, #0
 8005130:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005132:	f107 0320 	add.w	r3, r7, #32
 8005136:	4619      	mov	r1, r3
 8005138:	482a      	ldr	r0, [pc, #168]	; (80051e4 <HAL_UART_MspInit+0x140>)
 800513a:	f000 ff11 	bl	8005f60 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800513e:	2200      	movs	r2, #0
 8005140:	2105      	movs	r1, #5
 8005142:	2035      	movs	r0, #53	; 0x35
 8005144:	f000 faeb 	bl	800571e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8005148:	2035      	movs	r0, #53	; 0x35
 800514a:	f000 fb04 	bl	8005756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800514e:	e03e      	b.n	80051ce <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART1)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a24      	ldr	r2, [pc, #144]	; (80051e8 <HAL_UART_MspInit+0x144>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d139      	bne.n	80051ce <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART1_CLK_ENABLE();
 800515a:	4b20      	ldr	r3, [pc, #128]	; (80051dc <HAL_UART_MspInit+0x138>)
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	4a1f      	ldr	r2, [pc, #124]	; (80051dc <HAL_UART_MspInit+0x138>)
 8005160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005164:	6193      	str	r3, [r2, #24]
 8005166:	4b1d      	ldr	r3, [pc, #116]	; (80051dc <HAL_UART_MspInit+0x138>)
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800516e:	613b      	str	r3, [r7, #16]
 8005170:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005172:	4b1a      	ldr	r3, [pc, #104]	; (80051dc <HAL_UART_MspInit+0x138>)
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	4a19      	ldr	r2, [pc, #100]	; (80051dc <HAL_UART_MspInit+0x138>)
 8005178:	f043 0304 	orr.w	r3, r3, #4
 800517c:	6193      	str	r3, [r2, #24]
 800517e:	4b17      	ldr	r3, [pc, #92]	; (80051dc <HAL_UART_MspInit+0x138>)
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	f003 0304 	and.w	r3, r3, #4
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800518a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800518e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005190:	2302      	movs	r3, #2
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005194:	2303      	movs	r3, #3
 8005196:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005198:	f107 0320 	add.w	r3, r7, #32
 800519c:	4619      	mov	r1, r3
 800519e:	4813      	ldr	r0, [pc, #76]	; (80051ec <HAL_UART_MspInit+0x148>)
 80051a0:	f000 fede 	bl	8005f60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80051a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051aa:	2300      	movs	r3, #0
 80051ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051b2:	f107 0320 	add.w	r3, r7, #32
 80051b6:	4619      	mov	r1, r3
 80051b8:	480c      	ldr	r0, [pc, #48]	; (80051ec <HAL_UART_MspInit+0x148>)
 80051ba:	f000 fed1 	bl	8005f60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80051be:	2200      	movs	r2, #0
 80051c0:	2105      	movs	r1, #5
 80051c2:	2025      	movs	r0, #37	; 0x25
 80051c4:	f000 faab 	bl	800571e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80051c8:	2025      	movs	r0, #37	; 0x25
 80051ca:	f000 fac4 	bl	8005756 <HAL_NVIC_EnableIRQ>
}
 80051ce:	bf00      	nop
 80051d0:	3730      	adds	r7, #48	; 0x30
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	40005000 	.word	0x40005000
 80051dc:	40021000 	.word	0x40021000
 80051e0:	40011000 	.word	0x40011000
 80051e4:	40011400 	.word	0x40011400
 80051e8:	40013800 	.word	0x40013800
 80051ec:	40010800 	.word	0x40010800

080051f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08c      	sub	sp, #48	; 0x30
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8005200:	2300      	movs	r3, #0
 8005202:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005206:	4b2e      	ldr	r3, [pc, #184]	; (80052c0 <HAL_InitTick+0xd0>)
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	4a2d      	ldr	r2, [pc, #180]	; (80052c0 <HAL_InitTick+0xd0>)
 800520c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005210:	6193      	str	r3, [r2, #24]
 8005212:	4b2b      	ldr	r3, [pc, #172]	; (80052c0 <HAL_InitTick+0xd0>)
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800521a:	60bb      	str	r3, [r7, #8]
 800521c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800521e:	f107 020c 	add.w	r2, r7, #12
 8005222:	f107 0310 	add.w	r3, r7, #16
 8005226:	4611      	mov	r1, r2
 8005228:	4618      	mov	r0, r3
 800522a:	f001 fc39 	bl	8006aa0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800522e:	f001 fc23 	bl	8006a78 <HAL_RCC_GetPCLK2Freq>
 8005232:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005236:	4a23      	ldr	r2, [pc, #140]	; (80052c4 <HAL_InitTick+0xd4>)
 8005238:	fba2 2303 	umull	r2, r3, r2, r3
 800523c:	0c9b      	lsrs	r3, r3, #18
 800523e:	3b01      	subs	r3, #1
 8005240:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005242:	4b21      	ldr	r3, [pc, #132]	; (80052c8 <HAL_InitTick+0xd8>)
 8005244:	4a21      	ldr	r2, [pc, #132]	; (80052cc <HAL_InitTick+0xdc>)
 8005246:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005248:	4b1f      	ldr	r3, [pc, #124]	; (80052c8 <HAL_InitTick+0xd8>)
 800524a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800524e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005250:	4a1d      	ldr	r2, [pc, #116]	; (80052c8 <HAL_InitTick+0xd8>)
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005256:	4b1c      	ldr	r3, [pc, #112]	; (80052c8 <HAL_InitTick+0xd8>)
 8005258:	2200      	movs	r2, #0
 800525a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800525c:	4b1a      	ldr	r3, [pc, #104]	; (80052c8 <HAL_InitTick+0xd8>)
 800525e:	2200      	movs	r2, #0
 8005260:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005262:	4b19      	ldr	r3, [pc, #100]	; (80052c8 <HAL_InitTick+0xd8>)
 8005264:	2200      	movs	r2, #0
 8005266:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8005268:	4817      	ldr	r0, [pc, #92]	; (80052c8 <HAL_InitTick+0xd8>)
 800526a:	f002 f845 	bl	80072f8 <HAL_TIM_Base_Init>
 800526e:	4603      	mov	r3, r0
 8005270:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005274:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005278:	2b00      	cmp	r3, #0
 800527a:	d11b      	bne.n	80052b4 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800527c:	4812      	ldr	r0, [pc, #72]	; (80052c8 <HAL_InitTick+0xd8>)
 800527e:	f002 f893 	bl	80073a8 <HAL_TIM_Base_Start_IT>
 8005282:	4603      	mov	r3, r0
 8005284:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005288:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800528c:	2b00      	cmp	r3, #0
 800528e:	d111      	bne.n	80052b4 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8005290:	2019      	movs	r0, #25
 8005292:	f000 fa60 	bl	8005756 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b0f      	cmp	r3, #15
 800529a:	d808      	bhi.n	80052ae <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800529c:	2200      	movs	r2, #0
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	2019      	movs	r0, #25
 80052a2:	f000 fa3c 	bl	800571e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80052a6:	4a0a      	ldr	r2, [pc, #40]	; (80052d0 <HAL_InitTick+0xe0>)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6013      	str	r3, [r2, #0]
 80052ac:	e002      	b.n	80052b4 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80052b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3730      	adds	r7, #48	; 0x30
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40021000 	.word	0x40021000
 80052c4:	431bde83 	.word	0x431bde83
 80052c8:	2000286c 	.word	0x2000286c
 80052cc:	40012c00 	.word	0x40012c00
 80052d0:	200001c8 	.word	0x200001c8

080052d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80052d8:	e7fe      	b.n	80052d8 <NMI_Handler+0x4>

080052da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052da:	b480      	push	{r7}
 80052dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052de:	e7fe      	b.n	80052de <HardFault_Handler+0x4>

080052e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052e4:	e7fe      	b.n	80052e4 <MemManage_Handler+0x4>

080052e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052e6:	b480      	push	{r7}
 80052e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052ea:	e7fe      	b.n	80052ea <BusFault_Handler+0x4>

080052ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052f0:	e7fe      	b.n	80052f0 <UsageFault_Handler+0x4>

080052f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80052f2:	b480      	push	{r7}
 80052f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80052f6:	bf00      	nop
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bc80      	pop	{r7}
 80052fc:	4770      	bx	lr
	...

08005300 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8005304:	4802      	ldr	r0, [pc, #8]	; (8005310 <DMA1_Channel2_IRQHandler+0x10>)
 8005306:	f000 fbef 	bl	8005ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800530a:	bf00      	nop
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	20001380 	.word	0x20001380

08005314 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005318:	4802      	ldr	r0, [pc, #8]	; (8005324 <DMA1_Channel3_IRQHandler+0x10>)
 800531a:	f000 fbe5 	bl	8005ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800531e:	bf00      	nop
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	200013c4 	.word	0x200013c4

08005328 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800532c:	4802      	ldr	r0, [pc, #8]	; (8005338 <TIM1_UP_IRQHandler+0x10>)
 800532e:	f002 f89b 	bl	8007468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8005332:	bf00      	nop
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	2000286c 	.word	0x2000286c

0800533c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005340:	4802      	ldr	r0, [pc, #8]	; (800534c <SPI1_IRQHandler+0x10>)
 8005342:	f001 fe2f 	bl	8006fa4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005346:	bf00      	nop
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20001328 	.word	0x20001328

08005350 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005354:	4802      	ldr	r0, [pc, #8]	; (8005360 <USART1_IRQHandler+0x10>)
 8005356:	f002 fb6d 	bl	8007a34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800535a:	bf00      	nop
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20001450 	.word	0x20001450

08005364 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8005368:	4802      	ldr	r0, [pc, #8]	; (8005374 <UART5_IRQHandler+0x10>)
 800536a:	f002 fb63 	bl	8007a34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800536e:	bf00      	nop
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20001408 	.word	0x20001408

08005378 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
  return 1;
 800537c:	2301      	movs	r3, #1
}
 800537e:	4618      	mov	r0, r3
 8005380:	46bd      	mov	sp, r7
 8005382:	bc80      	pop	{r7}
 8005384:	4770      	bx	lr

08005386 <_kill>:

int _kill(int pid, int sig)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005390:	f00b f964 	bl	801065c <__errno>
 8005394:	4603      	mov	r3, r0
 8005396:	2216      	movs	r2, #22
 8005398:	601a      	str	r2, [r3, #0]
  return -1;
 800539a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <_exit>:

void _exit (int status)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b082      	sub	sp, #8
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80053ae:	f04f 31ff 	mov.w	r1, #4294967295
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff ffe7 	bl	8005386 <_kill>
  while (1) {}    /* Make sure we hang here */
 80053b8:	e7fe      	b.n	80053b8 <_exit+0x12>

080053ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b086      	sub	sp, #24
 80053be:	af00      	add	r7, sp, #0
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	e00a      	b.n	80053e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80053cc:	f3af 8000 	nop.w
 80053d0:	4601      	mov	r1, r0
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	60ba      	str	r2, [r7, #8]
 80053d8:	b2ca      	uxtb	r2, r1
 80053da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	3301      	adds	r3, #1
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	dbf0      	blt.n	80053cc <_read+0x12>
  }

  return len;
 80053ea:	687b      	ldr	r3, [r7, #4]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3718      	adds	r7, #24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005400:	2300      	movs	r3, #0
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	e009      	b.n	800541a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	60ba      	str	r2, [r7, #8]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	3301      	adds	r3, #1
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	429a      	cmp	r2, r3
 8005420:	dbf1      	blt.n	8005406 <_write+0x12>
  }
  return len;
 8005422:	687b      	ldr	r3, [r7, #4]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <_close>:

int _close(int file)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005434:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005438:	4618      	mov	r0, r3
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr

08005442 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005452:	605a      	str	r2, [r3, #4]
  return 0;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr

08005460 <_isatty>:

int _isatty(int file)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005468:	2301      	movs	r3, #1
}
 800546a:	4618      	mov	r0, r3
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	bc80      	pop	{r7}
 8005472:	4770      	bx	lr

08005474 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr

0800548c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005494:	4a14      	ldr	r2, [pc, #80]	; (80054e8 <_sbrk+0x5c>)
 8005496:	4b15      	ldr	r3, [pc, #84]	; (80054ec <_sbrk+0x60>)
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80054a0:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <_sbrk+0x64>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d102      	bne.n	80054ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80054a8:	4b11      	ldr	r3, [pc, #68]	; (80054f0 <_sbrk+0x64>)
 80054aa:	4a12      	ldr	r2, [pc, #72]	; (80054f4 <_sbrk+0x68>)
 80054ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80054ae:	4b10      	ldr	r3, [pc, #64]	; (80054f0 <_sbrk+0x64>)
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4413      	add	r3, r2
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d207      	bcs.n	80054cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80054bc:	f00b f8ce 	bl	801065c <__errno>
 80054c0:	4603      	mov	r3, r0
 80054c2:	220c      	movs	r2, #12
 80054c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80054c6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ca:	e009      	b.n	80054e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80054cc:	4b08      	ldr	r3, [pc, #32]	; (80054f0 <_sbrk+0x64>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80054d2:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <_sbrk+0x64>)
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4413      	add	r3, r2
 80054da:	4a05      	ldr	r2, [pc, #20]	; (80054f0 <_sbrk+0x64>)
 80054dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80054de:	68fb      	ldr	r3, [r7, #12]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	20010000 	.word	0x20010000
 80054ec:	00000400 	.word	0x00000400
 80054f0:	200028b4 	.word	0x200028b4
 80054f4:	2000cc58 	.word	0x2000cc58

080054f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80054fc:	bf00      	nop
 80054fe:	46bd      	mov	sp, r7
 8005500:	bc80      	pop	{r7}
 8005502:	4770      	bx	lr

08005504 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005504:	480c      	ldr	r0, [pc, #48]	; (8005538 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005506:	490d      	ldr	r1, [pc, #52]	; (800553c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005508:	4a0d      	ldr	r2, [pc, #52]	; (8005540 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800550a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800550c:	e002      	b.n	8005514 <LoopCopyDataInit>

0800550e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800550e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005512:	3304      	adds	r3, #4

08005514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005518:	d3f9      	bcc.n	800550e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800551a:	4a0a      	ldr	r2, [pc, #40]	; (8005544 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800551c:	4c0a      	ldr	r4, [pc, #40]	; (8005548 <LoopFillZerobss+0x22>)
  movs r3, #0
 800551e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005520:	e001      	b.n	8005526 <LoopFillZerobss>

08005522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005524:	3204      	adds	r2, #4

08005526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005528:	d3fb      	bcc.n	8005522 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800552a:	f7ff ffe5 	bl	80054f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800552e:	f00b f991 	bl	8010854 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005532:	f7fe fa13 	bl	800395c <main>
  bx lr
 8005536:	4770      	bx	lr
  ldr r0, =_sdata
 8005538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800553c:	200003f8 	.word	0x200003f8
  ldr r2, =_sidata
 8005540:	08015eb8 	.word	0x08015eb8
  ldr r2, =_sbss
 8005544:	200003f8 	.word	0x200003f8
  ldr r4, =_ebss
 8005548:	2000cc58 	.word	0x2000cc58

0800554c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800554c:	e7fe      	b.n	800554c <ADC1_2_IRQHandler>
	...

08005550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005554:	4b08      	ldr	r3, [pc, #32]	; (8005578 <HAL_Init+0x28>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a07      	ldr	r2, [pc, #28]	; (8005578 <HAL_Init+0x28>)
 800555a:	f043 0310 	orr.w	r3, r3, #16
 800555e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005560:	2003      	movs	r0, #3
 8005562:	f000 f8d1 	bl	8005708 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005566:	200f      	movs	r0, #15
 8005568:	f7ff fe42 	bl	80051f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800556c:	f7ff fca8 	bl	8004ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40022000 	.word	0x40022000

0800557c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005580:	4b05      	ldr	r3, [pc, #20]	; (8005598 <HAL_IncTick+0x1c>)
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	4b05      	ldr	r3, [pc, #20]	; (800559c <HAL_IncTick+0x20>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4413      	add	r3, r2
 800558c:	4a03      	ldr	r2, [pc, #12]	; (800559c <HAL_IncTick+0x20>)
 800558e:	6013      	str	r3, [r2, #0]
}
 8005590:	bf00      	nop
 8005592:	46bd      	mov	sp, r7
 8005594:	bc80      	pop	{r7}
 8005596:	4770      	bx	lr
 8005598:	200001cc 	.word	0x200001cc
 800559c:	200028b8 	.word	0x200028b8

080055a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055a0:	b480      	push	{r7}
 80055a2:	af00      	add	r7, sp, #0
  return uwTick;
 80055a4:	4b02      	ldr	r3, [pc, #8]	; (80055b0 <HAL_GetTick+0x10>)
 80055a6:	681b      	ldr	r3, [r3, #0]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr
 80055b0:	200028b8 	.word	0x200028b8

080055b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055c4:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <__NVIC_SetPriorityGrouping+0x44>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055d0:	4013      	ands	r3, r2
 80055d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055e6:	4a04      	ldr	r2, [pc, #16]	; (80055f8 <__NVIC_SetPriorityGrouping+0x44>)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	60d3      	str	r3, [r2, #12]
}
 80055ec:	bf00      	nop
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bc80      	pop	{r7}
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	e000ed00 	.word	0xe000ed00

080055fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005600:	4b04      	ldr	r3, [pc, #16]	; (8005614 <__NVIC_GetPriorityGrouping+0x18>)
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	0a1b      	lsrs	r3, r3, #8
 8005606:	f003 0307 	and.w	r3, r3, #7
}
 800560a:	4618      	mov	r0, r3
 800560c:	46bd      	mov	sp, r7
 800560e:	bc80      	pop	{r7}
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	e000ed00 	.word	0xe000ed00

08005618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	4603      	mov	r3, r0
 8005620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005626:	2b00      	cmp	r3, #0
 8005628:	db0b      	blt.n	8005642 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800562a:	79fb      	ldrb	r3, [r7, #7]
 800562c:	f003 021f 	and.w	r2, r3, #31
 8005630:	4906      	ldr	r1, [pc, #24]	; (800564c <__NVIC_EnableIRQ+0x34>)
 8005632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005636:	095b      	lsrs	r3, r3, #5
 8005638:	2001      	movs	r0, #1
 800563a:	fa00 f202 	lsl.w	r2, r0, r2
 800563e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr
 800564c:	e000e100 	.word	0xe000e100

08005650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	4603      	mov	r3, r0
 8005658:	6039      	str	r1, [r7, #0]
 800565a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800565c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005660:	2b00      	cmp	r3, #0
 8005662:	db0a      	blt.n	800567a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	b2da      	uxtb	r2, r3
 8005668:	490c      	ldr	r1, [pc, #48]	; (800569c <__NVIC_SetPriority+0x4c>)
 800566a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800566e:	0112      	lsls	r2, r2, #4
 8005670:	b2d2      	uxtb	r2, r2
 8005672:	440b      	add	r3, r1
 8005674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005678:	e00a      	b.n	8005690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	b2da      	uxtb	r2, r3
 800567e:	4908      	ldr	r1, [pc, #32]	; (80056a0 <__NVIC_SetPriority+0x50>)
 8005680:	79fb      	ldrb	r3, [r7, #7]
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	3b04      	subs	r3, #4
 8005688:	0112      	lsls	r2, r2, #4
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	440b      	add	r3, r1
 800568e:	761a      	strb	r2, [r3, #24]
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	bc80      	pop	{r7}
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	e000e100 	.word	0xe000e100
 80056a0:	e000ed00 	.word	0xe000ed00

080056a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b089      	sub	sp, #36	; 0x24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f003 0307 	and.w	r3, r3, #7
 80056b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	f1c3 0307 	rsb	r3, r3, #7
 80056be:	2b04      	cmp	r3, #4
 80056c0:	bf28      	it	cs
 80056c2:	2304      	movcs	r3, #4
 80056c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	3304      	adds	r3, #4
 80056ca:	2b06      	cmp	r3, #6
 80056cc:	d902      	bls.n	80056d4 <NVIC_EncodePriority+0x30>
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	3b03      	subs	r3, #3
 80056d2:	e000      	b.n	80056d6 <NVIC_EncodePriority+0x32>
 80056d4:	2300      	movs	r3, #0
 80056d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056d8:	f04f 32ff 	mov.w	r2, #4294967295
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	fa02 f303 	lsl.w	r3, r2, r3
 80056e2:	43da      	mvns	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	401a      	ands	r2, r3
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056ec:	f04f 31ff 	mov.w	r1, #4294967295
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	fa01 f303 	lsl.w	r3, r1, r3
 80056f6:	43d9      	mvns	r1, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056fc:	4313      	orrs	r3, r2
         );
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3724      	adds	r7, #36	; 0x24
 8005702:	46bd      	mov	sp, r7
 8005704:	bc80      	pop	{r7}
 8005706:	4770      	bx	lr

08005708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7ff ff4f 	bl	80055b4 <__NVIC_SetPriorityGrouping>
}
 8005716:	bf00      	nop
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800571e:	b580      	push	{r7, lr}
 8005720:	b086      	sub	sp, #24
 8005722:	af00      	add	r7, sp, #0
 8005724:	4603      	mov	r3, r0
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	607a      	str	r2, [r7, #4]
 800572a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800572c:	2300      	movs	r3, #0
 800572e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005730:	f7ff ff64 	bl	80055fc <__NVIC_GetPriorityGrouping>
 8005734:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	68b9      	ldr	r1, [r7, #8]
 800573a:	6978      	ldr	r0, [r7, #20]
 800573c:	f7ff ffb2 	bl	80056a4 <NVIC_EncodePriority>
 8005740:	4602      	mov	r2, r0
 8005742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005746:	4611      	mov	r1, r2
 8005748:	4618      	mov	r0, r3
 800574a:	f7ff ff81 	bl	8005650 <__NVIC_SetPriority>
}
 800574e:	bf00      	nop
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b082      	sub	sp, #8
 800575a:	af00      	add	r7, sp, #0
 800575c:	4603      	mov	r3, r0
 800575e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff ff57 	bl	8005618 <__NVIC_EnableIRQ>
}
 800576a:	bf00      	nop
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e059      	b.n	800583e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	4b2d      	ldr	r3, [pc, #180]	; (8005848 <HAL_DMA_Init+0xd4>)
 8005792:	429a      	cmp	r2, r3
 8005794:	d80f      	bhi.n	80057b6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	4b2b      	ldr	r3, [pc, #172]	; (800584c <HAL_DMA_Init+0xd8>)
 800579e:	4413      	add	r3, r2
 80057a0:	4a2b      	ldr	r2, [pc, #172]	; (8005850 <HAL_DMA_Init+0xdc>)
 80057a2:	fba2 2303 	umull	r2, r3, r2, r3
 80057a6:	091b      	lsrs	r3, r3, #4
 80057a8:	009a      	lsls	r2, r3, #2
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a28      	ldr	r2, [pc, #160]	; (8005854 <HAL_DMA_Init+0xe0>)
 80057b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80057b4:	e00e      	b.n	80057d4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	4b26      	ldr	r3, [pc, #152]	; (8005858 <HAL_DMA_Init+0xe4>)
 80057be:	4413      	add	r3, r2
 80057c0:	4a23      	ldr	r2, [pc, #140]	; (8005850 <HAL_DMA_Init+0xdc>)
 80057c2:	fba2 2303 	umull	r2, r3, r2, r3
 80057c6:	091b      	lsrs	r3, r3, #4
 80057c8:	009a      	lsls	r2, r3, #2
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a22      	ldr	r2, [pc, #136]	; (800585c <HAL_DMA_Init+0xe8>)
 80057d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80057ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80057ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80057f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005804:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005810:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr
 8005848:	40020407 	.word	0x40020407
 800584c:	bffdfff8 	.word	0xbffdfff8
 8005850:	cccccccd 	.word	0xcccccccd
 8005854:	40020000 	.word	0x40020000
 8005858:	bffdfbf8 	.word	0xbffdfbf8
 800585c:	40020400 	.word	0x40020400

08005860 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d008      	beq.n	800588a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2204      	movs	r2, #4
 800587c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e020      	b.n	80058cc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 020e 	bic.w	r2, r2, #14
 8005898:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0201 	bic.w	r2, r2, #1
 80058a8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b2:	2101      	movs	r1, #1
 80058b4:	fa01 f202 	lsl.w	r2, r1, r2
 80058b8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bc80      	pop	{r7}
 80058d4:	4770      	bx	lr
	...

080058d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058e0:	2300      	movs	r3, #0
 80058e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d005      	beq.n	80058fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2204      	movs	r2, #4
 80058f4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	73fb      	strb	r3, [r7, #15]
 80058fa:	e0d6      	b.n	8005aaa <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 020e 	bic.w	r2, r2, #14
 800590a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0201 	bic.w	r2, r2, #1
 800591a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	461a      	mov	r2, r3
 8005922:	4b64      	ldr	r3, [pc, #400]	; (8005ab4 <HAL_DMA_Abort_IT+0x1dc>)
 8005924:	429a      	cmp	r2, r3
 8005926:	d958      	bls.n	80059da <HAL_DMA_Abort_IT+0x102>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a62      	ldr	r2, [pc, #392]	; (8005ab8 <HAL_DMA_Abort_IT+0x1e0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d04f      	beq.n	80059d2 <HAL_DMA_Abort_IT+0xfa>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a61      	ldr	r2, [pc, #388]	; (8005abc <HAL_DMA_Abort_IT+0x1e4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d048      	beq.n	80059ce <HAL_DMA_Abort_IT+0xf6>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a5f      	ldr	r2, [pc, #380]	; (8005ac0 <HAL_DMA_Abort_IT+0x1e8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d040      	beq.n	80059c8 <HAL_DMA_Abort_IT+0xf0>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a5e      	ldr	r2, [pc, #376]	; (8005ac4 <HAL_DMA_Abort_IT+0x1ec>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d038      	beq.n	80059c2 <HAL_DMA_Abort_IT+0xea>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a5c      	ldr	r2, [pc, #368]	; (8005ac8 <HAL_DMA_Abort_IT+0x1f0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d030      	beq.n	80059bc <HAL_DMA_Abort_IT+0xe4>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a5b      	ldr	r2, [pc, #364]	; (8005acc <HAL_DMA_Abort_IT+0x1f4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d028      	beq.n	80059b6 <HAL_DMA_Abort_IT+0xde>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a52      	ldr	r2, [pc, #328]	; (8005ab4 <HAL_DMA_Abort_IT+0x1dc>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d020      	beq.n	80059b0 <HAL_DMA_Abort_IT+0xd8>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a57      	ldr	r2, [pc, #348]	; (8005ad0 <HAL_DMA_Abort_IT+0x1f8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d019      	beq.n	80059ac <HAL_DMA_Abort_IT+0xd4>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a55      	ldr	r2, [pc, #340]	; (8005ad4 <HAL_DMA_Abort_IT+0x1fc>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d012      	beq.n	80059a8 <HAL_DMA_Abort_IT+0xd0>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a54      	ldr	r2, [pc, #336]	; (8005ad8 <HAL_DMA_Abort_IT+0x200>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d00a      	beq.n	80059a2 <HAL_DMA_Abort_IT+0xca>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a52      	ldr	r2, [pc, #328]	; (8005adc <HAL_DMA_Abort_IT+0x204>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d102      	bne.n	800599c <HAL_DMA_Abort_IT+0xc4>
 8005996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800599a:	e01b      	b.n	80059d4 <HAL_DMA_Abort_IT+0xfc>
 800599c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059a0:	e018      	b.n	80059d4 <HAL_DMA_Abort_IT+0xfc>
 80059a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059a6:	e015      	b.n	80059d4 <HAL_DMA_Abort_IT+0xfc>
 80059a8:	2310      	movs	r3, #16
 80059aa:	e013      	b.n	80059d4 <HAL_DMA_Abort_IT+0xfc>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e011      	b.n	80059d4 <HAL_DMA_Abort_IT+0xfc>
 80059b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059b4:	e00e      	b.n	80059d4 <HAL_DMA_Abort_IT+0xfc>
 80059b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80059ba:	e00b      	b.n	80059d4 <HAL_DMA_Abort_IT+0xfc>
 80059bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059c0:	e008      	b.n	80059d4 <HAL_DMA_Abort_IT+0xfc>
 80059c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059c6:	e005      	b.n	80059d4 <HAL_DMA_Abort_IT+0xfc>
 80059c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059cc:	e002      	b.n	80059d4 <HAL_DMA_Abort_IT+0xfc>
 80059ce:	2310      	movs	r3, #16
 80059d0:	e000      	b.n	80059d4 <HAL_DMA_Abort_IT+0xfc>
 80059d2:	2301      	movs	r3, #1
 80059d4:	4a42      	ldr	r2, [pc, #264]	; (8005ae0 <HAL_DMA_Abort_IT+0x208>)
 80059d6:	6053      	str	r3, [r2, #4]
 80059d8:	e057      	b.n	8005a8a <HAL_DMA_Abort_IT+0x1b2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a36      	ldr	r2, [pc, #216]	; (8005ab8 <HAL_DMA_Abort_IT+0x1e0>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d04f      	beq.n	8005a84 <HAL_DMA_Abort_IT+0x1ac>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a34      	ldr	r2, [pc, #208]	; (8005abc <HAL_DMA_Abort_IT+0x1e4>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d048      	beq.n	8005a80 <HAL_DMA_Abort_IT+0x1a8>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a33      	ldr	r2, [pc, #204]	; (8005ac0 <HAL_DMA_Abort_IT+0x1e8>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d040      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x1a2>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a31      	ldr	r2, [pc, #196]	; (8005ac4 <HAL_DMA_Abort_IT+0x1ec>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d038      	beq.n	8005a74 <HAL_DMA_Abort_IT+0x19c>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a30      	ldr	r2, [pc, #192]	; (8005ac8 <HAL_DMA_Abort_IT+0x1f0>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d030      	beq.n	8005a6e <HAL_DMA_Abort_IT+0x196>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a2e      	ldr	r2, [pc, #184]	; (8005acc <HAL_DMA_Abort_IT+0x1f4>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d028      	beq.n	8005a68 <HAL_DMA_Abort_IT+0x190>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a26      	ldr	r2, [pc, #152]	; (8005ab4 <HAL_DMA_Abort_IT+0x1dc>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d020      	beq.n	8005a62 <HAL_DMA_Abort_IT+0x18a>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a2a      	ldr	r2, [pc, #168]	; (8005ad0 <HAL_DMA_Abort_IT+0x1f8>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d019      	beq.n	8005a5e <HAL_DMA_Abort_IT+0x186>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a29      	ldr	r2, [pc, #164]	; (8005ad4 <HAL_DMA_Abort_IT+0x1fc>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d012      	beq.n	8005a5a <HAL_DMA_Abort_IT+0x182>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a27      	ldr	r2, [pc, #156]	; (8005ad8 <HAL_DMA_Abort_IT+0x200>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00a      	beq.n	8005a54 <HAL_DMA_Abort_IT+0x17c>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a26      	ldr	r2, [pc, #152]	; (8005adc <HAL_DMA_Abort_IT+0x204>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d102      	bne.n	8005a4e <HAL_DMA_Abort_IT+0x176>
 8005a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a4c:	e01b      	b.n	8005a86 <HAL_DMA_Abort_IT+0x1ae>
 8005a4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a52:	e018      	b.n	8005a86 <HAL_DMA_Abort_IT+0x1ae>
 8005a54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a58:	e015      	b.n	8005a86 <HAL_DMA_Abort_IT+0x1ae>
 8005a5a:	2310      	movs	r3, #16
 8005a5c:	e013      	b.n	8005a86 <HAL_DMA_Abort_IT+0x1ae>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e011      	b.n	8005a86 <HAL_DMA_Abort_IT+0x1ae>
 8005a62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a66:	e00e      	b.n	8005a86 <HAL_DMA_Abort_IT+0x1ae>
 8005a68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005a6c:	e00b      	b.n	8005a86 <HAL_DMA_Abort_IT+0x1ae>
 8005a6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a72:	e008      	b.n	8005a86 <HAL_DMA_Abort_IT+0x1ae>
 8005a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a78:	e005      	b.n	8005a86 <HAL_DMA_Abort_IT+0x1ae>
 8005a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a7e:	e002      	b.n	8005a86 <HAL_DMA_Abort_IT+0x1ae>
 8005a80:	2310      	movs	r3, #16
 8005a82:	e000      	b.n	8005a86 <HAL_DMA_Abort_IT+0x1ae>
 8005a84:	2301      	movs	r3, #1
 8005a86:	4a17      	ldr	r2, [pc, #92]	; (8005ae4 <HAL_DMA_Abort_IT+0x20c>)
 8005a88:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	4798      	blx	r3
    } 
  }
  return status;
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	40020080 	.word	0x40020080
 8005ab8:	40020008 	.word	0x40020008
 8005abc:	4002001c 	.word	0x4002001c
 8005ac0:	40020030 	.word	0x40020030
 8005ac4:	40020044 	.word	0x40020044
 8005ac8:	40020058 	.word	0x40020058
 8005acc:	4002006c 	.word	0x4002006c
 8005ad0:	40020408 	.word	0x40020408
 8005ad4:	4002041c 	.word	0x4002041c
 8005ad8:	40020430 	.word	0x40020430
 8005adc:	40020444 	.word	0x40020444
 8005ae0:	40020400 	.word	0x40020400
 8005ae4:	40020000 	.word	0x40020000

08005ae8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b04:	2204      	movs	r2, #4
 8005b06:	409a      	lsls	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 80f1 	beq.w	8005cf4 <HAL_DMA_IRQHandler+0x20c>
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 80eb 	beq.w	8005cf4 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0320 	and.w	r3, r3, #32
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d107      	bne.n	8005b3c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0204 	bic.w	r2, r2, #4
 8005b3a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	461a      	mov	r2, r3
 8005b42:	4b5f      	ldr	r3, [pc, #380]	; (8005cc0 <HAL_DMA_IRQHandler+0x1d8>)
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d958      	bls.n	8005bfa <HAL_DMA_IRQHandler+0x112>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a5d      	ldr	r2, [pc, #372]	; (8005cc4 <HAL_DMA_IRQHandler+0x1dc>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d04f      	beq.n	8005bf2 <HAL_DMA_IRQHandler+0x10a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a5c      	ldr	r2, [pc, #368]	; (8005cc8 <HAL_DMA_IRQHandler+0x1e0>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d048      	beq.n	8005bee <HAL_DMA_IRQHandler+0x106>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a5a      	ldr	r2, [pc, #360]	; (8005ccc <HAL_DMA_IRQHandler+0x1e4>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d040      	beq.n	8005be8 <HAL_DMA_IRQHandler+0x100>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a59      	ldr	r2, [pc, #356]	; (8005cd0 <HAL_DMA_IRQHandler+0x1e8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d038      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xfa>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a57      	ldr	r2, [pc, #348]	; (8005cd4 <HAL_DMA_IRQHandler+0x1ec>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d030      	beq.n	8005bdc <HAL_DMA_IRQHandler+0xf4>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a56      	ldr	r2, [pc, #344]	; (8005cd8 <HAL_DMA_IRQHandler+0x1f0>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d028      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0xee>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a4d      	ldr	r2, [pc, #308]	; (8005cc0 <HAL_DMA_IRQHandler+0x1d8>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d020      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0xe8>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a52      	ldr	r2, [pc, #328]	; (8005cdc <HAL_DMA_IRQHandler+0x1f4>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d019      	beq.n	8005bcc <HAL_DMA_IRQHandler+0xe4>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a50      	ldr	r2, [pc, #320]	; (8005ce0 <HAL_DMA_IRQHandler+0x1f8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d012      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0xe0>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a4f      	ldr	r2, [pc, #316]	; (8005ce4 <HAL_DMA_IRQHandler+0x1fc>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d00a      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0xda>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a4d      	ldr	r2, [pc, #308]	; (8005ce8 <HAL_DMA_IRQHandler+0x200>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d102      	bne.n	8005bbc <HAL_DMA_IRQHandler+0xd4>
 8005bb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005bba:	e01b      	b.n	8005bf4 <HAL_DMA_IRQHandler+0x10c>
 8005bbc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005bc0:	e018      	b.n	8005bf4 <HAL_DMA_IRQHandler+0x10c>
 8005bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bc6:	e015      	b.n	8005bf4 <HAL_DMA_IRQHandler+0x10c>
 8005bc8:	2340      	movs	r3, #64	; 0x40
 8005bca:	e013      	b.n	8005bf4 <HAL_DMA_IRQHandler+0x10c>
 8005bcc:	2304      	movs	r3, #4
 8005bce:	e011      	b.n	8005bf4 <HAL_DMA_IRQHandler+0x10c>
 8005bd0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005bd4:	e00e      	b.n	8005bf4 <HAL_DMA_IRQHandler+0x10c>
 8005bd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005bda:	e00b      	b.n	8005bf4 <HAL_DMA_IRQHandler+0x10c>
 8005bdc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005be0:	e008      	b.n	8005bf4 <HAL_DMA_IRQHandler+0x10c>
 8005be2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005be6:	e005      	b.n	8005bf4 <HAL_DMA_IRQHandler+0x10c>
 8005be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bec:	e002      	b.n	8005bf4 <HAL_DMA_IRQHandler+0x10c>
 8005bee:	2340      	movs	r3, #64	; 0x40
 8005bf0:	e000      	b.n	8005bf4 <HAL_DMA_IRQHandler+0x10c>
 8005bf2:	2304      	movs	r3, #4
 8005bf4:	4a3d      	ldr	r2, [pc, #244]	; (8005cec <HAL_DMA_IRQHandler+0x204>)
 8005bf6:	6053      	str	r3, [r2, #4]
 8005bf8:	e057      	b.n	8005caa <HAL_DMA_IRQHandler+0x1c2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a31      	ldr	r2, [pc, #196]	; (8005cc4 <HAL_DMA_IRQHandler+0x1dc>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d04f      	beq.n	8005ca4 <HAL_DMA_IRQHandler+0x1bc>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a2f      	ldr	r2, [pc, #188]	; (8005cc8 <HAL_DMA_IRQHandler+0x1e0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d048      	beq.n	8005ca0 <HAL_DMA_IRQHandler+0x1b8>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a2e      	ldr	r2, [pc, #184]	; (8005ccc <HAL_DMA_IRQHandler+0x1e4>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d040      	beq.n	8005c9a <HAL_DMA_IRQHandler+0x1b2>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a2c      	ldr	r2, [pc, #176]	; (8005cd0 <HAL_DMA_IRQHandler+0x1e8>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d038      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x1ac>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a2b      	ldr	r2, [pc, #172]	; (8005cd4 <HAL_DMA_IRQHandler+0x1ec>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d030      	beq.n	8005c8e <HAL_DMA_IRQHandler+0x1a6>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a29      	ldr	r2, [pc, #164]	; (8005cd8 <HAL_DMA_IRQHandler+0x1f0>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d028      	beq.n	8005c88 <HAL_DMA_IRQHandler+0x1a0>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a21      	ldr	r2, [pc, #132]	; (8005cc0 <HAL_DMA_IRQHandler+0x1d8>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d020      	beq.n	8005c82 <HAL_DMA_IRQHandler+0x19a>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a25      	ldr	r2, [pc, #148]	; (8005cdc <HAL_DMA_IRQHandler+0x1f4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d019      	beq.n	8005c7e <HAL_DMA_IRQHandler+0x196>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a24      	ldr	r2, [pc, #144]	; (8005ce0 <HAL_DMA_IRQHandler+0x1f8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d012      	beq.n	8005c7a <HAL_DMA_IRQHandler+0x192>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a22      	ldr	r2, [pc, #136]	; (8005ce4 <HAL_DMA_IRQHandler+0x1fc>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00a      	beq.n	8005c74 <HAL_DMA_IRQHandler+0x18c>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a21      	ldr	r2, [pc, #132]	; (8005ce8 <HAL_DMA_IRQHandler+0x200>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d102      	bne.n	8005c6e <HAL_DMA_IRQHandler+0x186>
 8005c68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c6c:	e01b      	b.n	8005ca6 <HAL_DMA_IRQHandler+0x1be>
 8005c6e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005c72:	e018      	b.n	8005ca6 <HAL_DMA_IRQHandler+0x1be>
 8005c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c78:	e015      	b.n	8005ca6 <HAL_DMA_IRQHandler+0x1be>
 8005c7a:	2340      	movs	r3, #64	; 0x40
 8005c7c:	e013      	b.n	8005ca6 <HAL_DMA_IRQHandler+0x1be>
 8005c7e:	2304      	movs	r3, #4
 8005c80:	e011      	b.n	8005ca6 <HAL_DMA_IRQHandler+0x1be>
 8005c82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005c86:	e00e      	b.n	8005ca6 <HAL_DMA_IRQHandler+0x1be>
 8005c88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c8c:	e00b      	b.n	8005ca6 <HAL_DMA_IRQHandler+0x1be>
 8005c8e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005c92:	e008      	b.n	8005ca6 <HAL_DMA_IRQHandler+0x1be>
 8005c94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c98:	e005      	b.n	8005ca6 <HAL_DMA_IRQHandler+0x1be>
 8005c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c9e:	e002      	b.n	8005ca6 <HAL_DMA_IRQHandler+0x1be>
 8005ca0:	2340      	movs	r3, #64	; 0x40
 8005ca2:	e000      	b.n	8005ca6 <HAL_DMA_IRQHandler+0x1be>
 8005ca4:	2304      	movs	r3, #4
 8005ca6:	4a12      	ldr	r2, [pc, #72]	; (8005cf0 <HAL_DMA_IRQHandler+0x208>)
 8005ca8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 8136 	beq.w	8005f20 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005cbc:	e130      	b.n	8005f20 <HAL_DMA_IRQHandler+0x438>
 8005cbe:	bf00      	nop
 8005cc0:	40020080 	.word	0x40020080
 8005cc4:	40020008 	.word	0x40020008
 8005cc8:	4002001c 	.word	0x4002001c
 8005ccc:	40020030 	.word	0x40020030
 8005cd0:	40020044 	.word	0x40020044
 8005cd4:	40020058 	.word	0x40020058
 8005cd8:	4002006c 	.word	0x4002006c
 8005cdc:	40020408 	.word	0x40020408
 8005ce0:	4002041c 	.word	0x4002041c
 8005ce4:	40020430 	.word	0x40020430
 8005ce8:	40020444 	.word	0x40020444
 8005cec:	40020400 	.word	0x40020400
 8005cf0:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	409a      	lsls	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 80dd 	beq.w	8005ec0 <HAL_DMA_IRQHandler+0x3d8>
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 80d7 	beq.w	8005ec0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0320 	and.w	r3, r3, #32
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10b      	bne.n	8005d38 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 020a 	bic.w	r2, r2, #10
 8005d2e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	4b7b      	ldr	r3, [pc, #492]	; (8005f2c <HAL_DMA_IRQHandler+0x444>)
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d958      	bls.n	8005df6 <HAL_DMA_IRQHandler+0x30e>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a79      	ldr	r2, [pc, #484]	; (8005f30 <HAL_DMA_IRQHandler+0x448>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d04f      	beq.n	8005dee <HAL_DMA_IRQHandler+0x306>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a78      	ldr	r2, [pc, #480]	; (8005f34 <HAL_DMA_IRQHandler+0x44c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d048      	beq.n	8005dea <HAL_DMA_IRQHandler+0x302>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a76      	ldr	r2, [pc, #472]	; (8005f38 <HAL_DMA_IRQHandler+0x450>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d040      	beq.n	8005de4 <HAL_DMA_IRQHandler+0x2fc>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a75      	ldr	r2, [pc, #468]	; (8005f3c <HAL_DMA_IRQHandler+0x454>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d038      	beq.n	8005dde <HAL_DMA_IRQHandler+0x2f6>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a73      	ldr	r2, [pc, #460]	; (8005f40 <HAL_DMA_IRQHandler+0x458>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d030      	beq.n	8005dd8 <HAL_DMA_IRQHandler+0x2f0>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a72      	ldr	r2, [pc, #456]	; (8005f44 <HAL_DMA_IRQHandler+0x45c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d028      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0x2ea>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a69      	ldr	r2, [pc, #420]	; (8005f2c <HAL_DMA_IRQHandler+0x444>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d020      	beq.n	8005dcc <HAL_DMA_IRQHandler+0x2e4>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a6e      	ldr	r2, [pc, #440]	; (8005f48 <HAL_DMA_IRQHandler+0x460>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d019      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x2e0>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a6c      	ldr	r2, [pc, #432]	; (8005f4c <HAL_DMA_IRQHandler+0x464>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d012      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x2dc>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a6b      	ldr	r2, [pc, #428]	; (8005f50 <HAL_DMA_IRQHandler+0x468>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d00a      	beq.n	8005dbe <HAL_DMA_IRQHandler+0x2d6>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a69      	ldr	r2, [pc, #420]	; (8005f54 <HAL_DMA_IRQHandler+0x46c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d102      	bne.n	8005db8 <HAL_DMA_IRQHandler+0x2d0>
 8005db2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005db6:	e01b      	b.n	8005df0 <HAL_DMA_IRQHandler+0x308>
 8005db8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005dbc:	e018      	b.n	8005df0 <HAL_DMA_IRQHandler+0x308>
 8005dbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dc2:	e015      	b.n	8005df0 <HAL_DMA_IRQHandler+0x308>
 8005dc4:	2320      	movs	r3, #32
 8005dc6:	e013      	b.n	8005df0 <HAL_DMA_IRQHandler+0x308>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e011      	b.n	8005df0 <HAL_DMA_IRQHandler+0x308>
 8005dcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dd0:	e00e      	b.n	8005df0 <HAL_DMA_IRQHandler+0x308>
 8005dd2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005dd6:	e00b      	b.n	8005df0 <HAL_DMA_IRQHandler+0x308>
 8005dd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ddc:	e008      	b.n	8005df0 <HAL_DMA_IRQHandler+0x308>
 8005dde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005de2:	e005      	b.n	8005df0 <HAL_DMA_IRQHandler+0x308>
 8005de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005de8:	e002      	b.n	8005df0 <HAL_DMA_IRQHandler+0x308>
 8005dea:	2320      	movs	r3, #32
 8005dec:	e000      	b.n	8005df0 <HAL_DMA_IRQHandler+0x308>
 8005dee:	2302      	movs	r3, #2
 8005df0:	4a59      	ldr	r2, [pc, #356]	; (8005f58 <HAL_DMA_IRQHandler+0x470>)
 8005df2:	6053      	str	r3, [r2, #4]
 8005df4:	e057      	b.n	8005ea6 <HAL_DMA_IRQHandler+0x3be>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a4d      	ldr	r2, [pc, #308]	; (8005f30 <HAL_DMA_IRQHandler+0x448>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d04f      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x3b8>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a4b      	ldr	r2, [pc, #300]	; (8005f34 <HAL_DMA_IRQHandler+0x44c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d048      	beq.n	8005e9c <HAL_DMA_IRQHandler+0x3b4>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a4a      	ldr	r2, [pc, #296]	; (8005f38 <HAL_DMA_IRQHandler+0x450>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d040      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x3ae>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a48      	ldr	r2, [pc, #288]	; (8005f3c <HAL_DMA_IRQHandler+0x454>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d038      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x3a8>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a47      	ldr	r2, [pc, #284]	; (8005f40 <HAL_DMA_IRQHandler+0x458>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d030      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x3a2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a45      	ldr	r2, [pc, #276]	; (8005f44 <HAL_DMA_IRQHandler+0x45c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d028      	beq.n	8005e84 <HAL_DMA_IRQHandler+0x39c>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a3d      	ldr	r2, [pc, #244]	; (8005f2c <HAL_DMA_IRQHandler+0x444>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d020      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x396>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a41      	ldr	r2, [pc, #260]	; (8005f48 <HAL_DMA_IRQHandler+0x460>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d019      	beq.n	8005e7a <HAL_DMA_IRQHandler+0x392>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a40      	ldr	r2, [pc, #256]	; (8005f4c <HAL_DMA_IRQHandler+0x464>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d012      	beq.n	8005e76 <HAL_DMA_IRQHandler+0x38e>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a3e      	ldr	r2, [pc, #248]	; (8005f50 <HAL_DMA_IRQHandler+0x468>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00a      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x388>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a3d      	ldr	r2, [pc, #244]	; (8005f54 <HAL_DMA_IRQHandler+0x46c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d102      	bne.n	8005e6a <HAL_DMA_IRQHandler+0x382>
 8005e64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e68:	e01b      	b.n	8005ea2 <HAL_DMA_IRQHandler+0x3ba>
 8005e6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e6e:	e018      	b.n	8005ea2 <HAL_DMA_IRQHandler+0x3ba>
 8005e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e74:	e015      	b.n	8005ea2 <HAL_DMA_IRQHandler+0x3ba>
 8005e76:	2320      	movs	r3, #32
 8005e78:	e013      	b.n	8005ea2 <HAL_DMA_IRQHandler+0x3ba>
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	e011      	b.n	8005ea2 <HAL_DMA_IRQHandler+0x3ba>
 8005e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e82:	e00e      	b.n	8005ea2 <HAL_DMA_IRQHandler+0x3ba>
 8005e84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e88:	e00b      	b.n	8005ea2 <HAL_DMA_IRQHandler+0x3ba>
 8005e8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e8e:	e008      	b.n	8005ea2 <HAL_DMA_IRQHandler+0x3ba>
 8005e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e94:	e005      	b.n	8005ea2 <HAL_DMA_IRQHandler+0x3ba>
 8005e96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e9a:	e002      	b.n	8005ea2 <HAL_DMA_IRQHandler+0x3ba>
 8005e9c:	2320      	movs	r3, #32
 8005e9e:	e000      	b.n	8005ea2 <HAL_DMA_IRQHandler+0x3ba>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	4a2e      	ldr	r2, [pc, #184]	; (8005f5c <HAL_DMA_IRQHandler+0x474>)
 8005ea4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d034      	beq.n	8005f20 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005ebe:	e02f      	b.n	8005f20 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec4:	2208      	movs	r2, #8
 8005ec6:	409a      	lsls	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d028      	beq.n	8005f22 <HAL_DMA_IRQHandler+0x43a>
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f003 0308 	and.w	r3, r3, #8
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d023      	beq.n	8005f22 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 020e 	bic.w	r2, r2, #14
 8005ee8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8005ef8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d004      	beq.n	8005f22 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	4798      	blx	r3
    }
  }
  return;
 8005f20:	bf00      	nop
 8005f22:	bf00      	nop
}
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	40020080 	.word	0x40020080
 8005f30:	40020008 	.word	0x40020008
 8005f34:	4002001c 	.word	0x4002001c
 8005f38:	40020030 	.word	0x40020030
 8005f3c:	40020044 	.word	0x40020044
 8005f40:	40020058 	.word	0x40020058
 8005f44:	4002006c 	.word	0x4002006c
 8005f48:	40020408 	.word	0x40020408
 8005f4c:	4002041c 	.word	0x4002041c
 8005f50:	40020430 	.word	0x40020430
 8005f54:	40020444 	.word	0x40020444
 8005f58:	40020400 	.word	0x40020400
 8005f5c:	40020000 	.word	0x40020000

08005f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b08b      	sub	sp, #44	; 0x2c
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f72:	e179      	b.n	8006268 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005f74:	2201      	movs	r2, #1
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69fa      	ldr	r2, [r7, #28]
 8005f84:	4013      	ands	r3, r2
 8005f86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	f040 8168 	bne.w	8006262 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	4a96      	ldr	r2, [pc, #600]	; (80061f0 <HAL_GPIO_Init+0x290>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d05e      	beq.n	800605a <HAL_GPIO_Init+0xfa>
 8005f9c:	4a94      	ldr	r2, [pc, #592]	; (80061f0 <HAL_GPIO_Init+0x290>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d875      	bhi.n	800608e <HAL_GPIO_Init+0x12e>
 8005fa2:	4a94      	ldr	r2, [pc, #592]	; (80061f4 <HAL_GPIO_Init+0x294>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d058      	beq.n	800605a <HAL_GPIO_Init+0xfa>
 8005fa8:	4a92      	ldr	r2, [pc, #584]	; (80061f4 <HAL_GPIO_Init+0x294>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d86f      	bhi.n	800608e <HAL_GPIO_Init+0x12e>
 8005fae:	4a92      	ldr	r2, [pc, #584]	; (80061f8 <HAL_GPIO_Init+0x298>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d052      	beq.n	800605a <HAL_GPIO_Init+0xfa>
 8005fb4:	4a90      	ldr	r2, [pc, #576]	; (80061f8 <HAL_GPIO_Init+0x298>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d869      	bhi.n	800608e <HAL_GPIO_Init+0x12e>
 8005fba:	4a90      	ldr	r2, [pc, #576]	; (80061fc <HAL_GPIO_Init+0x29c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d04c      	beq.n	800605a <HAL_GPIO_Init+0xfa>
 8005fc0:	4a8e      	ldr	r2, [pc, #568]	; (80061fc <HAL_GPIO_Init+0x29c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d863      	bhi.n	800608e <HAL_GPIO_Init+0x12e>
 8005fc6:	4a8e      	ldr	r2, [pc, #568]	; (8006200 <HAL_GPIO_Init+0x2a0>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d046      	beq.n	800605a <HAL_GPIO_Init+0xfa>
 8005fcc:	4a8c      	ldr	r2, [pc, #560]	; (8006200 <HAL_GPIO_Init+0x2a0>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d85d      	bhi.n	800608e <HAL_GPIO_Init+0x12e>
 8005fd2:	2b12      	cmp	r3, #18
 8005fd4:	d82a      	bhi.n	800602c <HAL_GPIO_Init+0xcc>
 8005fd6:	2b12      	cmp	r3, #18
 8005fd8:	d859      	bhi.n	800608e <HAL_GPIO_Init+0x12e>
 8005fda:	a201      	add	r2, pc, #4	; (adr r2, 8005fe0 <HAL_GPIO_Init+0x80>)
 8005fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe0:	0800605b 	.word	0x0800605b
 8005fe4:	08006035 	.word	0x08006035
 8005fe8:	08006047 	.word	0x08006047
 8005fec:	08006089 	.word	0x08006089
 8005ff0:	0800608f 	.word	0x0800608f
 8005ff4:	0800608f 	.word	0x0800608f
 8005ff8:	0800608f 	.word	0x0800608f
 8005ffc:	0800608f 	.word	0x0800608f
 8006000:	0800608f 	.word	0x0800608f
 8006004:	0800608f 	.word	0x0800608f
 8006008:	0800608f 	.word	0x0800608f
 800600c:	0800608f 	.word	0x0800608f
 8006010:	0800608f 	.word	0x0800608f
 8006014:	0800608f 	.word	0x0800608f
 8006018:	0800608f 	.word	0x0800608f
 800601c:	0800608f 	.word	0x0800608f
 8006020:	0800608f 	.word	0x0800608f
 8006024:	0800603d 	.word	0x0800603d
 8006028:	08006051 	.word	0x08006051
 800602c:	4a75      	ldr	r2, [pc, #468]	; (8006204 <HAL_GPIO_Init+0x2a4>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d013      	beq.n	800605a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006032:	e02c      	b.n	800608e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	623b      	str	r3, [r7, #32]
          break;
 800603a:	e029      	b.n	8006090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	3304      	adds	r3, #4
 8006042:	623b      	str	r3, [r7, #32]
          break;
 8006044:	e024      	b.n	8006090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	3308      	adds	r3, #8
 800604c:	623b      	str	r3, [r7, #32]
          break;
 800604e:	e01f      	b.n	8006090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	330c      	adds	r3, #12
 8006056:	623b      	str	r3, [r7, #32]
          break;
 8006058:	e01a      	b.n	8006090 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d102      	bne.n	8006068 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006062:	2304      	movs	r3, #4
 8006064:	623b      	str	r3, [r7, #32]
          break;
 8006066:	e013      	b.n	8006090 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d105      	bne.n	800607c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006070:	2308      	movs	r3, #8
 8006072:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	69fa      	ldr	r2, [r7, #28]
 8006078:	611a      	str	r2, [r3, #16]
          break;
 800607a:	e009      	b.n	8006090 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800607c:	2308      	movs	r3, #8
 800607e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	69fa      	ldr	r2, [r7, #28]
 8006084:	615a      	str	r2, [r3, #20]
          break;
 8006086:	e003      	b.n	8006090 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006088:	2300      	movs	r3, #0
 800608a:	623b      	str	r3, [r7, #32]
          break;
 800608c:	e000      	b.n	8006090 <HAL_GPIO_Init+0x130>
          break;
 800608e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	2bff      	cmp	r3, #255	; 0xff
 8006094:	d801      	bhi.n	800609a <HAL_GPIO_Init+0x13a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	e001      	b.n	800609e <HAL_GPIO_Init+0x13e>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3304      	adds	r3, #4
 800609e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	2bff      	cmp	r3, #255	; 0xff
 80060a4:	d802      	bhi.n	80060ac <HAL_GPIO_Init+0x14c>
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	e002      	b.n	80060b2 <HAL_GPIO_Init+0x152>
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	3b08      	subs	r3, #8
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	210f      	movs	r1, #15
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	fa01 f303 	lsl.w	r3, r1, r3
 80060c0:	43db      	mvns	r3, r3
 80060c2:	401a      	ands	r2, r3
 80060c4:	6a39      	ldr	r1, [r7, #32]
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	fa01 f303 	lsl.w	r3, r1, r3
 80060cc:	431a      	orrs	r2, r3
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 80c1 	beq.w	8006262 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80060e0:	4b49      	ldr	r3, [pc, #292]	; (8006208 <HAL_GPIO_Init+0x2a8>)
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	4a48      	ldr	r2, [pc, #288]	; (8006208 <HAL_GPIO_Init+0x2a8>)
 80060e6:	f043 0301 	orr.w	r3, r3, #1
 80060ea:	6193      	str	r3, [r2, #24]
 80060ec:	4b46      	ldr	r3, [pc, #280]	; (8006208 <HAL_GPIO_Init+0x2a8>)
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	60bb      	str	r3, [r7, #8]
 80060f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80060f8:	4a44      	ldr	r2, [pc, #272]	; (800620c <HAL_GPIO_Init+0x2ac>)
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	089b      	lsrs	r3, r3, #2
 80060fe:	3302      	adds	r3, #2
 8006100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006104:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	f003 0303 	and.w	r3, r3, #3
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	220f      	movs	r2, #15
 8006110:	fa02 f303 	lsl.w	r3, r2, r3
 8006114:	43db      	mvns	r3, r3
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	4013      	ands	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a3c      	ldr	r2, [pc, #240]	; (8006210 <HAL_GPIO_Init+0x2b0>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d01f      	beq.n	8006164 <HAL_GPIO_Init+0x204>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a3b      	ldr	r2, [pc, #236]	; (8006214 <HAL_GPIO_Init+0x2b4>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d019      	beq.n	8006160 <HAL_GPIO_Init+0x200>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a3a      	ldr	r2, [pc, #232]	; (8006218 <HAL_GPIO_Init+0x2b8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d013      	beq.n	800615c <HAL_GPIO_Init+0x1fc>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a39      	ldr	r2, [pc, #228]	; (800621c <HAL_GPIO_Init+0x2bc>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d00d      	beq.n	8006158 <HAL_GPIO_Init+0x1f8>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a38      	ldr	r2, [pc, #224]	; (8006220 <HAL_GPIO_Init+0x2c0>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d007      	beq.n	8006154 <HAL_GPIO_Init+0x1f4>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a37      	ldr	r2, [pc, #220]	; (8006224 <HAL_GPIO_Init+0x2c4>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d101      	bne.n	8006150 <HAL_GPIO_Init+0x1f0>
 800614c:	2305      	movs	r3, #5
 800614e:	e00a      	b.n	8006166 <HAL_GPIO_Init+0x206>
 8006150:	2306      	movs	r3, #6
 8006152:	e008      	b.n	8006166 <HAL_GPIO_Init+0x206>
 8006154:	2304      	movs	r3, #4
 8006156:	e006      	b.n	8006166 <HAL_GPIO_Init+0x206>
 8006158:	2303      	movs	r3, #3
 800615a:	e004      	b.n	8006166 <HAL_GPIO_Init+0x206>
 800615c:	2302      	movs	r3, #2
 800615e:	e002      	b.n	8006166 <HAL_GPIO_Init+0x206>
 8006160:	2301      	movs	r3, #1
 8006162:	e000      	b.n	8006166 <HAL_GPIO_Init+0x206>
 8006164:	2300      	movs	r3, #0
 8006166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006168:	f002 0203 	and.w	r2, r2, #3
 800616c:	0092      	lsls	r2, r2, #2
 800616e:	4093      	lsls	r3, r2
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006176:	4925      	ldr	r1, [pc, #148]	; (800620c <HAL_GPIO_Init+0x2ac>)
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	089b      	lsrs	r3, r3, #2
 800617c:	3302      	adds	r3, #2
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d006      	beq.n	800619e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006190:	4b25      	ldr	r3, [pc, #148]	; (8006228 <HAL_GPIO_Init+0x2c8>)
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	4924      	ldr	r1, [pc, #144]	; (8006228 <HAL_GPIO_Init+0x2c8>)
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	4313      	orrs	r3, r2
 800619a:	608b      	str	r3, [r1, #8]
 800619c:	e006      	b.n	80061ac <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800619e:	4b22      	ldr	r3, [pc, #136]	; (8006228 <HAL_GPIO_Init+0x2c8>)
 80061a0:	689a      	ldr	r2, [r3, #8]
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	43db      	mvns	r3, r3
 80061a6:	4920      	ldr	r1, [pc, #128]	; (8006228 <HAL_GPIO_Init+0x2c8>)
 80061a8:	4013      	ands	r3, r2
 80061aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d006      	beq.n	80061c6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80061b8:	4b1b      	ldr	r3, [pc, #108]	; (8006228 <HAL_GPIO_Init+0x2c8>)
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	491a      	ldr	r1, [pc, #104]	; (8006228 <HAL_GPIO_Init+0x2c8>)
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	60cb      	str	r3, [r1, #12]
 80061c4:	e006      	b.n	80061d4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80061c6:	4b18      	ldr	r3, [pc, #96]	; (8006228 <HAL_GPIO_Init+0x2c8>)
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	43db      	mvns	r3, r3
 80061ce:	4916      	ldr	r1, [pc, #88]	; (8006228 <HAL_GPIO_Init+0x2c8>)
 80061d0:	4013      	ands	r3, r2
 80061d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d025      	beq.n	800622c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80061e0:	4b11      	ldr	r3, [pc, #68]	; (8006228 <HAL_GPIO_Init+0x2c8>)
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	4910      	ldr	r1, [pc, #64]	; (8006228 <HAL_GPIO_Init+0x2c8>)
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	604b      	str	r3, [r1, #4]
 80061ec:	e025      	b.n	800623a <HAL_GPIO_Init+0x2da>
 80061ee:	bf00      	nop
 80061f0:	10320000 	.word	0x10320000
 80061f4:	10310000 	.word	0x10310000
 80061f8:	10220000 	.word	0x10220000
 80061fc:	10210000 	.word	0x10210000
 8006200:	10120000 	.word	0x10120000
 8006204:	10110000 	.word	0x10110000
 8006208:	40021000 	.word	0x40021000
 800620c:	40010000 	.word	0x40010000
 8006210:	40010800 	.word	0x40010800
 8006214:	40010c00 	.word	0x40010c00
 8006218:	40011000 	.word	0x40011000
 800621c:	40011400 	.word	0x40011400
 8006220:	40011800 	.word	0x40011800
 8006224:	40011c00 	.word	0x40011c00
 8006228:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800622c:	4b15      	ldr	r3, [pc, #84]	; (8006284 <HAL_GPIO_Init+0x324>)
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	43db      	mvns	r3, r3
 8006234:	4913      	ldr	r1, [pc, #76]	; (8006284 <HAL_GPIO_Init+0x324>)
 8006236:	4013      	ands	r3, r2
 8006238:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d006      	beq.n	8006254 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006246:	4b0f      	ldr	r3, [pc, #60]	; (8006284 <HAL_GPIO_Init+0x324>)
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	490e      	ldr	r1, [pc, #56]	; (8006284 <HAL_GPIO_Init+0x324>)
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	4313      	orrs	r3, r2
 8006250:	600b      	str	r3, [r1, #0]
 8006252:	e006      	b.n	8006262 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006254:	4b0b      	ldr	r3, [pc, #44]	; (8006284 <HAL_GPIO_Init+0x324>)
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	43db      	mvns	r3, r3
 800625c:	4909      	ldr	r1, [pc, #36]	; (8006284 <HAL_GPIO_Init+0x324>)
 800625e:	4013      	ands	r3, r2
 8006260:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	3301      	adds	r3, #1
 8006266:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	fa22 f303 	lsr.w	r3, r2, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	f47f ae7e 	bne.w	8005f74 <HAL_GPIO_Init+0x14>
  }
}
 8006278:	bf00      	nop
 800627a:	bf00      	nop
 800627c:	372c      	adds	r7, #44	; 0x2c
 800627e:	46bd      	mov	sp, r7
 8006280:	bc80      	pop	{r7}
 8006282:	4770      	bx	lr
 8006284:	40010400 	.word	0x40010400

08006288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	807b      	strh	r3, [r7, #2]
 8006294:	4613      	mov	r3, r2
 8006296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006298:	787b      	ldrb	r3, [r7, #1]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800629e:	887a      	ldrh	r2, [r7, #2]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80062a4:	e003      	b.n	80062ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80062a6:	887b      	ldrh	r3, [r7, #2]
 80062a8:	041a      	lsls	r2, r3, #16
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	611a      	str	r2, [r3, #16]
}
 80062ae:	bf00      	nop
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bc80      	pop	{r7}
 80062b6:	4770      	bx	lr

080062b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e272      	b.n	80067b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 8087 	beq.w	80063e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80062d8:	4b92      	ldr	r3, [pc, #584]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f003 030c 	and.w	r3, r3, #12
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	d00c      	beq.n	80062fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80062e4:	4b8f      	ldr	r3, [pc, #572]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f003 030c 	and.w	r3, r3, #12
 80062ec:	2b08      	cmp	r3, #8
 80062ee:	d112      	bne.n	8006316 <HAL_RCC_OscConfig+0x5e>
 80062f0:	4b8c      	ldr	r3, [pc, #560]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062fc:	d10b      	bne.n	8006316 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062fe:	4b89      	ldr	r3, [pc, #548]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d06c      	beq.n	80063e4 <HAL_RCC_OscConfig+0x12c>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d168      	bne.n	80063e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e24c      	b.n	80067b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800631e:	d106      	bne.n	800632e <HAL_RCC_OscConfig+0x76>
 8006320:	4b80      	ldr	r3, [pc, #512]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a7f      	ldr	r2, [pc, #508]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 8006326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800632a:	6013      	str	r3, [r2, #0]
 800632c:	e02e      	b.n	800638c <HAL_RCC_OscConfig+0xd4>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10c      	bne.n	8006350 <HAL_RCC_OscConfig+0x98>
 8006336:	4b7b      	ldr	r3, [pc, #492]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a7a      	ldr	r2, [pc, #488]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 800633c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	4b78      	ldr	r3, [pc, #480]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a77      	ldr	r2, [pc, #476]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 8006348:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	e01d      	b.n	800638c <HAL_RCC_OscConfig+0xd4>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006358:	d10c      	bne.n	8006374 <HAL_RCC_OscConfig+0xbc>
 800635a:	4b72      	ldr	r3, [pc, #456]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a71      	ldr	r2, [pc, #452]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 8006360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	4b6f      	ldr	r3, [pc, #444]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a6e      	ldr	r2, [pc, #440]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 800636c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006370:	6013      	str	r3, [r2, #0]
 8006372:	e00b      	b.n	800638c <HAL_RCC_OscConfig+0xd4>
 8006374:	4b6b      	ldr	r3, [pc, #428]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a6a      	ldr	r2, [pc, #424]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 800637a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800637e:	6013      	str	r3, [r2, #0]
 8006380:	4b68      	ldr	r3, [pc, #416]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a67      	ldr	r2, [pc, #412]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 8006386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800638a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d013      	beq.n	80063bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006394:	f7ff f904 	bl	80055a0 <HAL_GetTick>
 8006398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800639a:	e008      	b.n	80063ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800639c:	f7ff f900 	bl	80055a0 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b64      	cmp	r3, #100	; 0x64
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e200      	b.n	80067b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ae:	4b5d      	ldr	r3, [pc, #372]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0f0      	beq.n	800639c <HAL_RCC_OscConfig+0xe4>
 80063ba:	e014      	b.n	80063e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063bc:	f7ff f8f0 	bl	80055a0 <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063c4:	f7ff f8ec 	bl	80055a0 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b64      	cmp	r3, #100	; 0x64
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e1ec      	b.n	80067b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063d6:	4b53      	ldr	r3, [pc, #332]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1f0      	bne.n	80063c4 <HAL_RCC_OscConfig+0x10c>
 80063e2:	e000      	b.n	80063e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d063      	beq.n	80064ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063f2:	4b4c      	ldr	r3, [pc, #304]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f003 030c 	and.w	r3, r3, #12
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00b      	beq.n	8006416 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80063fe:	4b49      	ldr	r3, [pc, #292]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f003 030c 	and.w	r3, r3, #12
 8006406:	2b08      	cmp	r3, #8
 8006408:	d11c      	bne.n	8006444 <HAL_RCC_OscConfig+0x18c>
 800640a:	4b46      	ldr	r3, [pc, #280]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d116      	bne.n	8006444 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006416:	4b43      	ldr	r3, [pc, #268]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d005      	beq.n	800642e <HAL_RCC_OscConfig+0x176>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d001      	beq.n	800642e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e1c0      	b.n	80067b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800642e:	4b3d      	ldr	r3, [pc, #244]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	4939      	ldr	r1, [pc, #228]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 800643e:	4313      	orrs	r3, r2
 8006440:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006442:	e03a      	b.n	80064ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d020      	beq.n	800648e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800644c:	4b36      	ldr	r3, [pc, #216]	; (8006528 <HAL_RCC_OscConfig+0x270>)
 800644e:	2201      	movs	r2, #1
 8006450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006452:	f7ff f8a5 	bl	80055a0 <HAL_GetTick>
 8006456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006458:	e008      	b.n	800646c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800645a:	f7ff f8a1 	bl	80055a0 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	2b02      	cmp	r3, #2
 8006466:	d901      	bls.n	800646c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e1a1      	b.n	80067b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800646c:	4b2d      	ldr	r3, [pc, #180]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0f0      	beq.n	800645a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006478:	4b2a      	ldr	r3, [pc, #168]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	4927      	ldr	r1, [pc, #156]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 8006488:	4313      	orrs	r3, r2
 800648a:	600b      	str	r3, [r1, #0]
 800648c:	e015      	b.n	80064ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800648e:	4b26      	ldr	r3, [pc, #152]	; (8006528 <HAL_RCC_OscConfig+0x270>)
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006494:	f7ff f884 	bl	80055a0 <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800649c:	f7ff f880 	bl	80055a0 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e180      	b.n	80067b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ae:	4b1d      	ldr	r3, [pc, #116]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1f0      	bne.n	800649c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0308 	and.w	r3, r3, #8
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d03a      	beq.n	800653c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d019      	beq.n	8006502 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064ce:	4b17      	ldr	r3, [pc, #92]	; (800652c <HAL_RCC_OscConfig+0x274>)
 80064d0:	2201      	movs	r2, #1
 80064d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064d4:	f7ff f864 	bl	80055a0 <HAL_GetTick>
 80064d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064da:	e008      	b.n	80064ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064dc:	f7ff f860 	bl	80055a0 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e160      	b.n	80067b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ee:	4b0d      	ldr	r3, [pc, #52]	; (8006524 <HAL_RCC_OscConfig+0x26c>)
 80064f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0f0      	beq.n	80064dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80064fa:	2001      	movs	r0, #1
 80064fc:	f000 fb00 	bl	8006b00 <RCC_Delay>
 8006500:	e01c      	b.n	800653c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006502:	4b0a      	ldr	r3, [pc, #40]	; (800652c <HAL_RCC_OscConfig+0x274>)
 8006504:	2200      	movs	r2, #0
 8006506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006508:	f7ff f84a 	bl	80055a0 <HAL_GetTick>
 800650c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800650e:	e00f      	b.n	8006530 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006510:	f7ff f846 	bl	80055a0 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d908      	bls.n	8006530 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e146      	b.n	80067b0 <HAL_RCC_OscConfig+0x4f8>
 8006522:	bf00      	nop
 8006524:	40021000 	.word	0x40021000
 8006528:	42420000 	.word	0x42420000
 800652c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006530:	4b92      	ldr	r3, [pc, #584]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1e9      	bne.n	8006510 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 80a6 	beq.w	8006696 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800654a:	2300      	movs	r3, #0
 800654c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800654e:	4b8b      	ldr	r3, [pc, #556]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10d      	bne.n	8006576 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800655a:	4b88      	ldr	r3, [pc, #544]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	4a87      	ldr	r2, [pc, #540]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 8006560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006564:	61d3      	str	r3, [r2, #28]
 8006566:	4b85      	ldr	r3, [pc, #532]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800656e:	60bb      	str	r3, [r7, #8]
 8006570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006572:	2301      	movs	r3, #1
 8006574:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006576:	4b82      	ldr	r3, [pc, #520]	; (8006780 <HAL_RCC_OscConfig+0x4c8>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657e:	2b00      	cmp	r3, #0
 8006580:	d118      	bne.n	80065b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006582:	4b7f      	ldr	r3, [pc, #508]	; (8006780 <HAL_RCC_OscConfig+0x4c8>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a7e      	ldr	r2, [pc, #504]	; (8006780 <HAL_RCC_OscConfig+0x4c8>)
 8006588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800658c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800658e:	f7ff f807 	bl	80055a0 <HAL_GetTick>
 8006592:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006594:	e008      	b.n	80065a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006596:	f7ff f803 	bl	80055a0 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b64      	cmp	r3, #100	; 0x64
 80065a2:	d901      	bls.n	80065a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e103      	b.n	80067b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065a8:	4b75      	ldr	r3, [pc, #468]	; (8006780 <HAL_RCC_OscConfig+0x4c8>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0f0      	beq.n	8006596 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d106      	bne.n	80065ca <HAL_RCC_OscConfig+0x312>
 80065bc:	4b6f      	ldr	r3, [pc, #444]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	4a6e      	ldr	r2, [pc, #440]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 80065c2:	f043 0301 	orr.w	r3, r3, #1
 80065c6:	6213      	str	r3, [r2, #32]
 80065c8:	e02d      	b.n	8006626 <HAL_RCC_OscConfig+0x36e>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10c      	bne.n	80065ec <HAL_RCC_OscConfig+0x334>
 80065d2:	4b6a      	ldr	r3, [pc, #424]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	4a69      	ldr	r2, [pc, #420]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 80065d8:	f023 0301 	bic.w	r3, r3, #1
 80065dc:	6213      	str	r3, [r2, #32]
 80065de:	4b67      	ldr	r3, [pc, #412]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	4a66      	ldr	r2, [pc, #408]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 80065e4:	f023 0304 	bic.w	r3, r3, #4
 80065e8:	6213      	str	r3, [r2, #32]
 80065ea:	e01c      	b.n	8006626 <HAL_RCC_OscConfig+0x36e>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	2b05      	cmp	r3, #5
 80065f2:	d10c      	bne.n	800660e <HAL_RCC_OscConfig+0x356>
 80065f4:	4b61      	ldr	r3, [pc, #388]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	4a60      	ldr	r2, [pc, #384]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 80065fa:	f043 0304 	orr.w	r3, r3, #4
 80065fe:	6213      	str	r3, [r2, #32]
 8006600:	4b5e      	ldr	r3, [pc, #376]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	4a5d      	ldr	r2, [pc, #372]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 8006606:	f043 0301 	orr.w	r3, r3, #1
 800660a:	6213      	str	r3, [r2, #32]
 800660c:	e00b      	b.n	8006626 <HAL_RCC_OscConfig+0x36e>
 800660e:	4b5b      	ldr	r3, [pc, #364]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	4a5a      	ldr	r2, [pc, #360]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 8006614:	f023 0301 	bic.w	r3, r3, #1
 8006618:	6213      	str	r3, [r2, #32]
 800661a:	4b58      	ldr	r3, [pc, #352]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	4a57      	ldr	r2, [pc, #348]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 8006620:	f023 0304 	bic.w	r3, r3, #4
 8006624:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d015      	beq.n	800665a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800662e:	f7fe ffb7 	bl	80055a0 <HAL_GetTick>
 8006632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006634:	e00a      	b.n	800664c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006636:	f7fe ffb3 	bl	80055a0 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	f241 3288 	movw	r2, #5000	; 0x1388
 8006644:	4293      	cmp	r3, r2
 8006646:	d901      	bls.n	800664c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e0b1      	b.n	80067b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800664c:	4b4b      	ldr	r3, [pc, #300]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0ee      	beq.n	8006636 <HAL_RCC_OscConfig+0x37e>
 8006658:	e014      	b.n	8006684 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800665a:	f7fe ffa1 	bl	80055a0 <HAL_GetTick>
 800665e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006660:	e00a      	b.n	8006678 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006662:	f7fe ff9d 	bl	80055a0 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006670:	4293      	cmp	r3, r2
 8006672:	d901      	bls.n	8006678 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e09b      	b.n	80067b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006678:	4b40      	ldr	r3, [pc, #256]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1ee      	bne.n	8006662 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006684:	7dfb      	ldrb	r3, [r7, #23]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d105      	bne.n	8006696 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800668a:	4b3c      	ldr	r3, [pc, #240]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	4a3b      	ldr	r2, [pc, #236]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 8006690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006694:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 8087 	beq.w	80067ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066a0:	4b36      	ldr	r3, [pc, #216]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f003 030c 	and.w	r3, r3, #12
 80066a8:	2b08      	cmp	r3, #8
 80066aa:	d061      	beq.n	8006770 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d146      	bne.n	8006742 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066b4:	4b33      	ldr	r3, [pc, #204]	; (8006784 <HAL_RCC_OscConfig+0x4cc>)
 80066b6:	2200      	movs	r2, #0
 80066b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066ba:	f7fe ff71 	bl	80055a0 <HAL_GetTick>
 80066be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066c0:	e008      	b.n	80066d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066c2:	f7fe ff6d 	bl	80055a0 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d901      	bls.n	80066d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e06d      	b.n	80067b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066d4:	4b29      	ldr	r3, [pc, #164]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1f0      	bne.n	80066c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e8:	d108      	bne.n	80066fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80066ea:	4b24      	ldr	r3, [pc, #144]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	4921      	ldr	r1, [pc, #132]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066fc:	4b1f      	ldr	r3, [pc, #124]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a19      	ldr	r1, [r3, #32]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	430b      	orrs	r3, r1
 800670e:	491b      	ldr	r1, [pc, #108]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 8006710:	4313      	orrs	r3, r2
 8006712:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006714:	4b1b      	ldr	r3, [pc, #108]	; (8006784 <HAL_RCC_OscConfig+0x4cc>)
 8006716:	2201      	movs	r2, #1
 8006718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800671a:	f7fe ff41 	bl	80055a0 <HAL_GetTick>
 800671e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006720:	e008      	b.n	8006734 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006722:	f7fe ff3d 	bl	80055a0 <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	2b02      	cmp	r3, #2
 800672e:	d901      	bls.n	8006734 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e03d      	b.n	80067b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006734:	4b11      	ldr	r3, [pc, #68]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0f0      	beq.n	8006722 <HAL_RCC_OscConfig+0x46a>
 8006740:	e035      	b.n	80067ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006742:	4b10      	ldr	r3, [pc, #64]	; (8006784 <HAL_RCC_OscConfig+0x4cc>)
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006748:	f7fe ff2a 	bl	80055a0 <HAL_GetTick>
 800674c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800674e:	e008      	b.n	8006762 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006750:	f7fe ff26 	bl	80055a0 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b02      	cmp	r3, #2
 800675c:	d901      	bls.n	8006762 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e026      	b.n	80067b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006762:	4b06      	ldr	r3, [pc, #24]	; (800677c <HAL_RCC_OscConfig+0x4c4>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1f0      	bne.n	8006750 <HAL_RCC_OscConfig+0x498>
 800676e:	e01e      	b.n	80067ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d107      	bne.n	8006788 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e019      	b.n	80067b0 <HAL_RCC_OscConfig+0x4f8>
 800677c:	40021000 	.word	0x40021000
 8006780:	40007000 	.word	0x40007000
 8006784:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006788:	4b0b      	ldr	r3, [pc, #44]	; (80067b8 <HAL_RCC_OscConfig+0x500>)
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	429a      	cmp	r2, r3
 800679a:	d106      	bne.n	80067aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d001      	beq.n	80067ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e000      	b.n	80067b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3718      	adds	r7, #24
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	40021000 	.word	0x40021000

080067bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e0d0      	b.n	8006972 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067d0:	4b6a      	ldr	r3, [pc, #424]	; (800697c <HAL_RCC_ClockConfig+0x1c0>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0307 	and.w	r3, r3, #7
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d910      	bls.n	8006800 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067de:	4b67      	ldr	r3, [pc, #412]	; (800697c <HAL_RCC_ClockConfig+0x1c0>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f023 0207 	bic.w	r2, r3, #7
 80067e6:	4965      	ldr	r1, [pc, #404]	; (800697c <HAL_RCC_ClockConfig+0x1c0>)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ee:	4b63      	ldr	r3, [pc, #396]	; (800697c <HAL_RCC_ClockConfig+0x1c0>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d001      	beq.n	8006800 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e0b8      	b.n	8006972 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0302 	and.w	r3, r3, #2
 8006808:	2b00      	cmp	r3, #0
 800680a:	d020      	beq.n	800684e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	d005      	beq.n	8006824 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006818:	4b59      	ldr	r3, [pc, #356]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	4a58      	ldr	r2, [pc, #352]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 800681e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006822:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0308 	and.w	r3, r3, #8
 800682c:	2b00      	cmp	r3, #0
 800682e:	d005      	beq.n	800683c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006830:	4b53      	ldr	r3, [pc, #332]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	4a52      	ldr	r2, [pc, #328]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 8006836:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800683a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800683c:	4b50      	ldr	r3, [pc, #320]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	494d      	ldr	r1, [pc, #308]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 800684a:	4313      	orrs	r3, r2
 800684c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b00      	cmp	r3, #0
 8006858:	d040      	beq.n	80068dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d107      	bne.n	8006872 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006862:	4b47      	ldr	r3, [pc, #284]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d115      	bne.n	800689a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e07f      	b.n	8006972 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	2b02      	cmp	r3, #2
 8006878:	d107      	bne.n	800688a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800687a:	4b41      	ldr	r3, [pc, #260]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d109      	bne.n	800689a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e073      	b.n	8006972 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800688a:	4b3d      	ldr	r3, [pc, #244]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e06b      	b.n	8006972 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800689a:	4b39      	ldr	r3, [pc, #228]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f023 0203 	bic.w	r2, r3, #3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	4936      	ldr	r1, [pc, #216]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068ac:	f7fe fe78 	bl	80055a0 <HAL_GetTick>
 80068b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068b2:	e00a      	b.n	80068ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068b4:	f7fe fe74 	bl	80055a0 <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	f241 3288 	movw	r2, #5000	; 0x1388
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e053      	b.n	8006972 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068ca:	4b2d      	ldr	r3, [pc, #180]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f003 020c 	and.w	r2, r3, #12
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	429a      	cmp	r2, r3
 80068da:	d1eb      	bne.n	80068b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068dc:	4b27      	ldr	r3, [pc, #156]	; (800697c <HAL_RCC_ClockConfig+0x1c0>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0307 	and.w	r3, r3, #7
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d210      	bcs.n	800690c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ea:	4b24      	ldr	r3, [pc, #144]	; (800697c <HAL_RCC_ClockConfig+0x1c0>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f023 0207 	bic.w	r2, r3, #7
 80068f2:	4922      	ldr	r1, [pc, #136]	; (800697c <HAL_RCC_ClockConfig+0x1c0>)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068fa:	4b20      	ldr	r3, [pc, #128]	; (800697c <HAL_RCC_ClockConfig+0x1c0>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0307 	and.w	r3, r3, #7
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	429a      	cmp	r2, r3
 8006906:	d001      	beq.n	800690c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e032      	b.n	8006972 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0304 	and.w	r3, r3, #4
 8006914:	2b00      	cmp	r3, #0
 8006916:	d008      	beq.n	800692a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006918:	4b19      	ldr	r3, [pc, #100]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	4916      	ldr	r1, [pc, #88]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 8006926:	4313      	orrs	r3, r2
 8006928:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0308 	and.w	r3, r3, #8
 8006932:	2b00      	cmp	r3, #0
 8006934:	d009      	beq.n	800694a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006936:	4b12      	ldr	r3, [pc, #72]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	490e      	ldr	r1, [pc, #56]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 8006946:	4313      	orrs	r3, r2
 8006948:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800694a:	f000 f821 	bl	8006990 <HAL_RCC_GetSysClockFreq>
 800694e:	4602      	mov	r2, r0
 8006950:	4b0b      	ldr	r3, [pc, #44]	; (8006980 <HAL_RCC_ClockConfig+0x1c4>)
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	091b      	lsrs	r3, r3, #4
 8006956:	f003 030f 	and.w	r3, r3, #15
 800695a:	490a      	ldr	r1, [pc, #40]	; (8006984 <HAL_RCC_ClockConfig+0x1c8>)
 800695c:	5ccb      	ldrb	r3, [r1, r3]
 800695e:	fa22 f303 	lsr.w	r3, r2, r3
 8006962:	4a09      	ldr	r2, [pc, #36]	; (8006988 <HAL_RCC_ClockConfig+0x1cc>)
 8006964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006966:	4b09      	ldr	r3, [pc, #36]	; (800698c <HAL_RCC_ClockConfig+0x1d0>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4618      	mov	r0, r3
 800696c:	f7fe fc40 	bl	80051f0 <HAL_InitTick>

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	40022000 	.word	0x40022000
 8006980:	40021000 	.word	0x40021000
 8006984:	08015540 	.word	0x08015540
 8006988:	200001c4 	.word	0x200001c4
 800698c:	200001c8 	.word	0x200001c8

08006990 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	2300      	movs	r3, #0
 800699c:	60bb      	str	r3, [r7, #8]
 800699e:	2300      	movs	r3, #0
 80069a0:	617b      	str	r3, [r7, #20]
 80069a2:	2300      	movs	r3, #0
 80069a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80069a6:	2300      	movs	r3, #0
 80069a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80069aa:	4b1e      	ldr	r3, [pc, #120]	; (8006a24 <HAL_RCC_GetSysClockFreq+0x94>)
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f003 030c 	and.w	r3, r3, #12
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	d002      	beq.n	80069c0 <HAL_RCC_GetSysClockFreq+0x30>
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	d003      	beq.n	80069c6 <HAL_RCC_GetSysClockFreq+0x36>
 80069be:	e027      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80069c0:	4b19      	ldr	r3, [pc, #100]	; (8006a28 <HAL_RCC_GetSysClockFreq+0x98>)
 80069c2:	613b      	str	r3, [r7, #16]
      break;
 80069c4:	e027      	b.n	8006a16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	0c9b      	lsrs	r3, r3, #18
 80069ca:	f003 030f 	and.w	r3, r3, #15
 80069ce:	4a17      	ldr	r2, [pc, #92]	; (8006a2c <HAL_RCC_GetSysClockFreq+0x9c>)
 80069d0:	5cd3      	ldrb	r3, [r2, r3]
 80069d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d010      	beq.n	8006a00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80069de:	4b11      	ldr	r3, [pc, #68]	; (8006a24 <HAL_RCC_GetSysClockFreq+0x94>)
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	0c5b      	lsrs	r3, r3, #17
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	4a11      	ldr	r2, [pc, #68]	; (8006a30 <HAL_RCC_GetSysClockFreq+0xa0>)
 80069ea:	5cd3      	ldrb	r3, [r2, r3]
 80069ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a0d      	ldr	r2, [pc, #52]	; (8006a28 <HAL_RCC_GetSysClockFreq+0x98>)
 80069f2:	fb03 f202 	mul.w	r2, r3, r2
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fc:	617b      	str	r3, [r7, #20]
 80069fe:	e004      	b.n	8006a0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a0c      	ldr	r2, [pc, #48]	; (8006a34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006a04:	fb02 f303 	mul.w	r3, r2, r3
 8006a08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	613b      	str	r3, [r7, #16]
      break;
 8006a0e:	e002      	b.n	8006a16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006a10:	4b09      	ldr	r3, [pc, #36]	; (8006a38 <HAL_RCC_GetSysClockFreq+0xa8>)
 8006a12:	613b      	str	r3, [r7, #16]
      break;
 8006a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a16:	693b      	ldr	r3, [r7, #16]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	371c      	adds	r7, #28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bc80      	pop	{r7}
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	40021000 	.word	0x40021000
 8006a28:	00989680 	.word	0x00989680
 8006a2c:	08015558 	.word	0x08015558
 8006a30:	08015568 	.word	0x08015568
 8006a34:	003d0900 	.word	0x003d0900
 8006a38:	007a1200 	.word	0x007a1200

08006a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a40:	4b02      	ldr	r3, [pc, #8]	; (8006a4c <HAL_RCC_GetHCLKFreq+0x10>)
 8006a42:	681b      	ldr	r3, [r3, #0]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bc80      	pop	{r7}
 8006a4a:	4770      	bx	lr
 8006a4c:	200001c4 	.word	0x200001c4

08006a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a54:	f7ff fff2 	bl	8006a3c <HAL_RCC_GetHCLKFreq>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	4b05      	ldr	r3, [pc, #20]	; (8006a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	0a1b      	lsrs	r3, r3, #8
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	4903      	ldr	r1, [pc, #12]	; (8006a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a66:	5ccb      	ldrb	r3, [r1, r3]
 8006a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	40021000 	.word	0x40021000
 8006a74:	08015550 	.word	0x08015550

08006a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a7c:	f7ff ffde 	bl	8006a3c <HAL_RCC_GetHCLKFreq>
 8006a80:	4602      	mov	r2, r0
 8006a82:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	0adb      	lsrs	r3, r3, #11
 8006a88:	f003 0307 	and.w	r3, r3, #7
 8006a8c:	4903      	ldr	r1, [pc, #12]	; (8006a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a8e:	5ccb      	ldrb	r3, [r1, r3]
 8006a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	40021000 	.word	0x40021000
 8006a9c:	08015550 	.word	0x08015550

08006aa0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	220f      	movs	r2, #15
 8006aae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ab0:	4b11      	ldr	r3, [pc, #68]	; (8006af8 <HAL_RCC_GetClockConfig+0x58>)
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f003 0203 	and.w	r2, r3, #3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006abc:	4b0e      	ldr	r3, [pc, #56]	; (8006af8 <HAL_RCC_GetClockConfig+0x58>)
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006ac8:	4b0b      	ldr	r3, [pc, #44]	; (8006af8 <HAL_RCC_GetClockConfig+0x58>)
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006ad4:	4b08      	ldr	r3, [pc, #32]	; (8006af8 <HAL_RCC_GetClockConfig+0x58>)
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	08db      	lsrs	r3, r3, #3
 8006ada:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006ae2:	4b06      	ldr	r3, [pc, #24]	; (8006afc <HAL_RCC_GetClockConfig+0x5c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0207 	and.w	r2, r3, #7
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bc80      	pop	{r7}
 8006af6:	4770      	bx	lr
 8006af8:	40021000 	.word	0x40021000
 8006afc:	40022000 	.word	0x40022000

08006b00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b08:	4b0a      	ldr	r3, [pc, #40]	; (8006b34 <RCC_Delay+0x34>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a0a      	ldr	r2, [pc, #40]	; (8006b38 <RCC_Delay+0x38>)
 8006b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b12:	0a5b      	lsrs	r3, r3, #9
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	fb02 f303 	mul.w	r3, r2, r3
 8006b1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006b1c:	bf00      	nop
  }
  while (Delay --);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	1e5a      	subs	r2, r3, #1
 8006b22:	60fa      	str	r2, [r7, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1f9      	bne.n	8006b1c <RCC_Delay+0x1c>
}
 8006b28:	bf00      	nop
 8006b2a:	bf00      	nop
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bc80      	pop	{r7}
 8006b32:	4770      	bx	lr
 8006b34:	200001c4 	.word	0x200001c4
 8006b38:	10624dd3 	.word	0x10624dd3

08006b3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e076      	b.n	8006c3c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d108      	bne.n	8006b68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b5e:	d009      	beq.n	8006b74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	61da      	str	r2, [r3, #28]
 8006b66:	e005      	b.n	8006b74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d106      	bne.n	8006b94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7fe f9ce 	bl	8004f30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006baa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006bbc:	431a      	orrs	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	f003 0302 	and.w	r3, r3, #2
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006be4:	431a      	orrs	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a1b      	ldr	r3, [r3, #32]
 8006bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf8:	ea42 0103 	orr.w	r1, r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	0c1a      	lsrs	r2, r3, #16
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f002 0204 	and.w	r2, r2, #4
 8006c1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	69da      	ldr	r2, [r3, #28]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b08c      	sub	sp, #48	; 0x30
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
 8006c50:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c52:	2301      	movs	r3, #1
 8006c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006c56:	2300      	movs	r3, #0
 8006c58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d101      	bne.n	8006c6a <HAL_SPI_TransmitReceive+0x26>
 8006c66:	2302      	movs	r3, #2
 8006c68:	e198      	b.n	8006f9c <HAL_SPI_TransmitReceive+0x358>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c72:	f7fe fc95 	bl	80055a0 <HAL_GetTick>
 8006c76:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006c88:	887b      	ldrh	r3, [r7, #2]
 8006c8a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d00f      	beq.n	8006cb4 <HAL_SPI_TransmitReceive+0x70>
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c9a:	d107      	bne.n	8006cac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d103      	bne.n	8006cac <HAL_SPI_TransmitReceive+0x68>
 8006ca4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	d003      	beq.n	8006cb4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006cac:	2302      	movs	r3, #2
 8006cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006cb2:	e16d      	b.n	8006f90 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d005      	beq.n	8006cc6 <HAL_SPI_TransmitReceive+0x82>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <HAL_SPI_TransmitReceive+0x82>
 8006cc0:	887b      	ldrh	r3, [r7, #2]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d103      	bne.n	8006cce <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006ccc:	e160      	b.n	8006f90 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d003      	beq.n	8006ce2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2205      	movs	r2, #5
 8006cde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	887a      	ldrh	r2, [r7, #2]
 8006cf2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	887a      	ldrh	r2, [r7, #2]
 8006cf8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	887a      	ldrh	r2, [r7, #2]
 8006d04:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	887a      	ldrh	r2, [r7, #2]
 8006d0a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d22:	2b40      	cmp	r3, #64	; 0x40
 8006d24:	d007      	beq.n	8006d36 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d3e:	d17c      	bne.n	8006e3a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d002      	beq.n	8006d4e <HAL_SPI_TransmitReceive+0x10a>
 8006d48:	8b7b      	ldrh	r3, [r7, #26]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d16a      	bne.n	8006e24 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d52:	881a      	ldrh	r2, [r3, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5e:	1c9a      	adds	r2, r3, #2
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d72:	e057      	b.n	8006e24 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d11b      	bne.n	8006dba <HAL_SPI_TransmitReceive+0x176>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d016      	beq.n	8006dba <HAL_SPI_TransmitReceive+0x176>
 8006d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d113      	bne.n	8006dba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d96:	881a      	ldrh	r2, [r3, #0]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da2:	1c9a      	adds	r2, r3, #2
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	3b01      	subs	r3, #1
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d119      	bne.n	8006dfc <HAL_SPI_TransmitReceive+0x1b8>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d014      	beq.n	8006dfc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68da      	ldr	r2, [r3, #12]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ddc:	b292      	uxth	r2, r2
 8006dde:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de4:	1c9a      	adds	r2, r3, #2
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	3b01      	subs	r3, #1
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006dfc:	f7fe fbd0 	bl	80055a0 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d80b      	bhi.n	8006e24 <HAL_SPI_TransmitReceive+0x1e0>
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e12:	d007      	beq.n	8006e24 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006e22:	e0b5      	b.n	8006f90 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1a2      	bne.n	8006d74 <HAL_SPI_TransmitReceive+0x130>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d19d      	bne.n	8006d74 <HAL_SPI_TransmitReceive+0x130>
 8006e38:	e080      	b.n	8006f3c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d002      	beq.n	8006e48 <HAL_SPI_TransmitReceive+0x204>
 8006e42:	8b7b      	ldrh	r3, [r7, #26]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d16f      	bne.n	8006f28 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	330c      	adds	r3, #12
 8006e52:	7812      	ldrb	r2, [r2, #0]
 8006e54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	3b01      	subs	r3, #1
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e6e:	e05b      	b.n	8006f28 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d11c      	bne.n	8006eb8 <HAL_SPI_TransmitReceive+0x274>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d017      	beq.n	8006eb8 <HAL_SPI_TransmitReceive+0x274>
 8006e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d114      	bne.n	8006eb8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	330c      	adds	r3, #12
 8006e98:	7812      	ldrb	r2, [r2, #0]
 8006e9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea0:	1c5a      	adds	r2, r3, #1
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	3b01      	subs	r3, #1
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d119      	bne.n	8006efa <HAL_SPI_TransmitReceive+0x2b6>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d014      	beq.n	8006efa <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68da      	ldr	r2, [r3, #12]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eda:	b2d2      	uxtb	r2, r2
 8006edc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee2:	1c5a      	adds	r2, r3, #1
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006efa:	f7fe fb51 	bl	80055a0 <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d803      	bhi.n	8006f12 <HAL_SPI_TransmitReceive+0x2ce>
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f10:	d102      	bne.n	8006f18 <HAL_SPI_TransmitReceive+0x2d4>
 8006f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d107      	bne.n	8006f28 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006f26:	e033      	b.n	8006f90 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d19e      	bne.n	8006e70 <HAL_SPI_TransmitReceive+0x22c>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d199      	bne.n	8006e70 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 f9bb 	bl	80072bc <SPI_EndRxTxTransaction>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d006      	beq.n	8006f5a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2220      	movs	r2, #32
 8006f56:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006f58:	e01a      	b.n	8006f90 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10a      	bne.n	8006f78 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f62:	2300      	movs	r3, #0
 8006f64:	617b      	str	r3, [r7, #20]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	617b      	str	r3, [r7, #20]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	617b      	str	r3, [r7, #20]
 8006f76:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d003      	beq.n	8006f88 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f86:	e003      	b.n	8006f90 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3730      	adds	r7, #48	; 0x30
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b088      	sub	sp, #32
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	099b      	lsrs	r3, r3, #6
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10f      	bne.n	8006fe8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00a      	beq.n	8006fe8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	099b      	lsrs	r3, r3, #6
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d004      	beq.n	8006fe8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	4798      	blx	r3
    return;
 8006fe6:	e0be      	b.n	8007166 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	085b      	lsrs	r3, r3, #1
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00a      	beq.n	800700a <HAL_SPI_IRQHandler+0x66>
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	09db      	lsrs	r3, r3, #7
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d004      	beq.n	800700a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	4798      	blx	r3
    return;
 8007008:	e0ad      	b.n	8007166 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	095b      	lsrs	r3, r3, #5
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d106      	bne.n	8007024 <HAL_SPI_IRQHandler+0x80>
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	099b      	lsrs	r3, r3, #6
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	f000 80a1 	beq.w	8007166 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	095b      	lsrs	r3, r3, #5
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b00      	cmp	r3, #0
 800702e:	f000 809a 	beq.w	8007166 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	099b      	lsrs	r3, r3, #6
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	d023      	beq.n	8007086 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b03      	cmp	r3, #3
 8007048:	d011      	beq.n	800706e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704e:	f043 0204 	orr.w	r2, r3, #4
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007056:	2300      	movs	r3, #0
 8007058:	617b      	str	r3, [r7, #20]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	617b      	str	r3, [r7, #20]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	617b      	str	r3, [r7, #20]
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	e00b      	b.n	8007086 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800706e:	2300      	movs	r3, #0
 8007070:	613b      	str	r3, [r7, #16]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	613b      	str	r3, [r7, #16]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	613b      	str	r3, [r7, #16]
 8007082:	693b      	ldr	r3, [r7, #16]
        return;
 8007084:	e06f      	b.n	8007166 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	095b      	lsrs	r3, r3, #5
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d014      	beq.n	80070bc <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007096:	f043 0201 	orr.w	r2, r3, #1
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800709e:	2300      	movs	r3, #0
 80070a0:	60fb      	str	r3, [r7, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	60fb      	str	r3, [r7, #12]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d04f      	beq.n	8007164 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80070d2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d104      	bne.n	80070f0 <HAL_SPI_IRQHandler+0x14c>
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d034      	beq.n	800715a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 0203 	bic.w	r2, r2, #3
 80070fe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007104:	2b00      	cmp	r3, #0
 8007106:	d011      	beq.n	800712c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800710c:	4a17      	ldr	r2, [pc, #92]	; (800716c <HAL_SPI_IRQHandler+0x1c8>)
 800710e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007114:	4618      	mov	r0, r3
 8007116:	f7fe fbdf 	bl	80058d8 <HAL_DMA_Abort_IT>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d005      	beq.n	800712c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007124:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007130:	2b00      	cmp	r3, #0
 8007132:	d016      	beq.n	8007162 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007138:	4a0c      	ldr	r2, [pc, #48]	; (800716c <HAL_SPI_IRQHandler+0x1c8>)
 800713a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007140:	4618      	mov	r0, r3
 8007142:	f7fe fbc9 	bl	80058d8 <HAL_DMA_Abort_IT>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00a      	beq.n	8007162 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007150:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007158:	e003      	b.n	8007162 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f808 	bl	8007170 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007160:	e000      	b.n	8007164 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8007162:	bf00      	nop
    return;
 8007164:	bf00      	nop
  }
}
 8007166:	3720      	adds	r7, #32
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	08007183 	.word	0x08007183

08007170 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	bc80      	pop	{r7}
 8007180:	4770      	bx	lr

08007182 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b084      	sub	sp, #16
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f7ff ffe7 	bl	8007170 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80071a2:	bf00      	nop
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
	...

080071ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b088      	sub	sp, #32
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	4613      	mov	r3, r2
 80071ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071bc:	f7fe f9f0 	bl	80055a0 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c4:	1a9b      	subs	r3, r3, r2
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	4413      	add	r3, r2
 80071ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071cc:	f7fe f9e8 	bl	80055a0 <HAL_GetTick>
 80071d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071d2:	4b39      	ldr	r3, [pc, #228]	; (80072b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	015b      	lsls	r3, r3, #5
 80071d8:	0d1b      	lsrs	r3, r3, #20
 80071da:	69fa      	ldr	r2, [r7, #28]
 80071dc:	fb02 f303 	mul.w	r3, r2, r3
 80071e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071e2:	e054      	b.n	800728e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ea:	d050      	beq.n	800728e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071ec:	f7fe f9d8 	bl	80055a0 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	69fa      	ldr	r2, [r7, #28]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d902      	bls.n	8007202 <SPI_WaitFlagStateUntilTimeout+0x56>
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d13d      	bne.n	800727e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007210:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800721a:	d111      	bne.n	8007240 <SPI_WaitFlagStateUntilTimeout+0x94>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007224:	d004      	beq.n	8007230 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800722e:	d107      	bne.n	8007240 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800723e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007248:	d10f      	bne.n	800726a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007258:	601a      	str	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007268:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e017      	b.n	80072ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007284:	2300      	movs	r3, #0
 8007286:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	3b01      	subs	r3, #1
 800728c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	689a      	ldr	r2, [r3, #8]
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	4013      	ands	r3, r2
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	429a      	cmp	r2, r3
 800729c:	bf0c      	ite	eq
 800729e:	2301      	moveq	r3, #1
 80072a0:	2300      	movne	r3, #0
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	461a      	mov	r2, r3
 80072a6:	79fb      	ldrb	r3, [r7, #7]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d19b      	bne.n	80071e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3720      	adds	r7, #32
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	200001c4 	.word	0x200001c4

080072bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af02      	add	r7, sp, #8
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	2200      	movs	r2, #0
 80072d0:	2180      	movs	r1, #128	; 0x80
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f7ff ff6a 	bl	80071ac <SPI_WaitFlagStateUntilTimeout>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d007      	beq.n	80072ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e2:	f043 0220 	orr.w	r2, r3, #32
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e000      	b.n	80072f0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e041      	b.n	800738e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d106      	bne.n	8007324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f839 	bl	8007396 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2202      	movs	r2, #2
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3304      	adds	r3, #4
 8007334:	4619      	mov	r1, r3
 8007336:	4610      	mov	r0, r2
 8007338:	f000 f9c2 	bl	80076c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007396:	b480      	push	{r7}
 8007398:	b083      	sub	sp, #12
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800739e:	bf00      	nop
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bc80      	pop	{r7}
 80073a6:	4770      	bx	lr

080073a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d001      	beq.n	80073c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e044      	b.n	800744a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2202      	movs	r2, #2
 80073c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f042 0201 	orr.w	r2, r2, #1
 80073d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a1d      	ldr	r2, [pc, #116]	; (8007454 <HAL_TIM_Base_Start_IT+0xac>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d018      	beq.n	8007414 <HAL_TIM_Base_Start_IT+0x6c>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a1c      	ldr	r2, [pc, #112]	; (8007458 <HAL_TIM_Base_Start_IT+0xb0>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d013      	beq.n	8007414 <HAL_TIM_Base_Start_IT+0x6c>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073f4:	d00e      	beq.n	8007414 <HAL_TIM_Base_Start_IT+0x6c>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a18      	ldr	r2, [pc, #96]	; (800745c <HAL_TIM_Base_Start_IT+0xb4>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d009      	beq.n	8007414 <HAL_TIM_Base_Start_IT+0x6c>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a16      	ldr	r2, [pc, #88]	; (8007460 <HAL_TIM_Base_Start_IT+0xb8>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d004      	beq.n	8007414 <HAL_TIM_Base_Start_IT+0x6c>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a15      	ldr	r2, [pc, #84]	; (8007464 <HAL_TIM_Base_Start_IT+0xbc>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d111      	bne.n	8007438 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f003 0307 	and.w	r3, r3, #7
 800741e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2b06      	cmp	r3, #6
 8007424:	d010      	beq.n	8007448 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f042 0201 	orr.w	r2, r2, #1
 8007434:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007436:	e007      	b.n	8007448 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f042 0201 	orr.w	r2, r2, #1
 8007446:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	bc80      	pop	{r7}
 8007452:	4770      	bx	lr
 8007454:	40012c00 	.word	0x40012c00
 8007458:	40013400 	.word	0x40013400
 800745c:	40000400 	.word	0x40000400
 8007460:	40000800 	.word	0x40000800
 8007464:	40000c00 	.word	0x40000c00

08007468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	f003 0302 	and.w	r3, r3, #2
 800747a:	2b02      	cmp	r3, #2
 800747c:	d122      	bne.n	80074c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b02      	cmp	r3, #2
 800748a:	d11b      	bne.n	80074c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f06f 0202 	mvn.w	r2, #2
 8007494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	f003 0303 	and.w	r3, r3, #3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f8ed 	bl	800768a <HAL_TIM_IC_CaptureCallback>
 80074b0:	e005      	b.n	80074be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f8e0 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f8ef 	bl	800769c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	f003 0304 	and.w	r3, r3, #4
 80074ce:	2b04      	cmp	r3, #4
 80074d0:	d122      	bne.n	8007518 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	f003 0304 	and.w	r3, r3, #4
 80074dc:	2b04      	cmp	r3, #4
 80074de:	d11b      	bne.n	8007518 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f06f 0204 	mvn.w	r2, #4
 80074e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2202      	movs	r2, #2
 80074ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f8c3 	bl	800768a <HAL_TIM_IC_CaptureCallback>
 8007504:	e005      	b.n	8007512 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f8b6 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f8c5 	bl	800769c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	f003 0308 	and.w	r3, r3, #8
 8007522:	2b08      	cmp	r3, #8
 8007524:	d122      	bne.n	800756c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	f003 0308 	and.w	r3, r3, #8
 8007530:	2b08      	cmp	r3, #8
 8007532:	d11b      	bne.n	800756c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f06f 0208 	mvn.w	r2, #8
 800753c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2204      	movs	r2, #4
 8007542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	69db      	ldr	r3, [r3, #28]
 800754a:	f003 0303 	and.w	r3, r3, #3
 800754e:	2b00      	cmp	r3, #0
 8007550:	d003      	beq.n	800755a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f899 	bl	800768a <HAL_TIM_IC_CaptureCallback>
 8007558:	e005      	b.n	8007566 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f88c 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f89b 	bl	800769c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	f003 0310 	and.w	r3, r3, #16
 8007576:	2b10      	cmp	r3, #16
 8007578:	d122      	bne.n	80075c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	f003 0310 	and.w	r3, r3, #16
 8007584:	2b10      	cmp	r3, #16
 8007586:	d11b      	bne.n	80075c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f06f 0210 	mvn.w	r2, #16
 8007590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2208      	movs	r2, #8
 8007596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f86f 	bl	800768a <HAL_TIM_IC_CaptureCallback>
 80075ac:	e005      	b.n	80075ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f862 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f871 	bl	800769c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d10e      	bne.n	80075ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d107      	bne.n	80075ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f06f 0201 	mvn.w	r2, #1
 80075e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7fc fd8c 	bl	8004104 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f6:	2b80      	cmp	r3, #128	; 0x80
 80075f8:	d10e      	bne.n	8007618 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007604:	2b80      	cmp	r3, #128	; 0x80
 8007606:	d107      	bne.n	8007618 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f8d7 	bl	80077c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007622:	2b40      	cmp	r3, #64	; 0x40
 8007624:	d10e      	bne.n	8007644 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007630:	2b40      	cmp	r3, #64	; 0x40
 8007632:	d107      	bne.n	8007644 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800763c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f835 	bl	80076ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	f003 0320 	and.w	r3, r3, #32
 800764e:	2b20      	cmp	r3, #32
 8007650:	d10e      	bne.n	8007670 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	f003 0320 	and.w	r3, r3, #32
 800765c:	2b20      	cmp	r3, #32
 800765e:	d107      	bne.n	8007670 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f06f 0220 	mvn.w	r2, #32
 8007668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f8a2 	bl	80077b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007670:	bf00      	nop
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	bc80      	pop	{r7}
 8007688:	4770      	bx	lr

0800768a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007692:	bf00      	nop
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	bc80      	pop	{r7}
 800769a:	4770      	bx	lr

0800769c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bc80      	pop	{r7}
 80076ac:	4770      	bx	lr

080076ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b083      	sub	sp, #12
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076b6:	bf00      	nop
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bc80      	pop	{r7}
 80076be:	4770      	bx	lr

080076c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a33      	ldr	r2, [pc, #204]	; (80077a0 <TIM_Base_SetConfig+0xe0>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d013      	beq.n	8007700 <TIM_Base_SetConfig+0x40>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a32      	ldr	r2, [pc, #200]	; (80077a4 <TIM_Base_SetConfig+0xe4>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d00f      	beq.n	8007700 <TIM_Base_SetConfig+0x40>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e6:	d00b      	beq.n	8007700 <TIM_Base_SetConfig+0x40>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a2f      	ldr	r2, [pc, #188]	; (80077a8 <TIM_Base_SetConfig+0xe8>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d007      	beq.n	8007700 <TIM_Base_SetConfig+0x40>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a2e      	ldr	r2, [pc, #184]	; (80077ac <TIM_Base_SetConfig+0xec>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d003      	beq.n	8007700 <TIM_Base_SetConfig+0x40>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a2d      	ldr	r2, [pc, #180]	; (80077b0 <TIM_Base_SetConfig+0xf0>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d108      	bne.n	8007712 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	4313      	orrs	r3, r2
 8007710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a22      	ldr	r2, [pc, #136]	; (80077a0 <TIM_Base_SetConfig+0xe0>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d013      	beq.n	8007742 <TIM_Base_SetConfig+0x82>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a21      	ldr	r2, [pc, #132]	; (80077a4 <TIM_Base_SetConfig+0xe4>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d00f      	beq.n	8007742 <TIM_Base_SetConfig+0x82>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007728:	d00b      	beq.n	8007742 <TIM_Base_SetConfig+0x82>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a1e      	ldr	r2, [pc, #120]	; (80077a8 <TIM_Base_SetConfig+0xe8>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d007      	beq.n	8007742 <TIM_Base_SetConfig+0x82>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a1d      	ldr	r2, [pc, #116]	; (80077ac <TIM_Base_SetConfig+0xec>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d003      	beq.n	8007742 <TIM_Base_SetConfig+0x82>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a1c      	ldr	r2, [pc, #112]	; (80077b0 <TIM_Base_SetConfig+0xf0>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d108      	bne.n	8007754 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	4313      	orrs	r3, r2
 8007752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	4313      	orrs	r3, r2
 8007760:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	689a      	ldr	r2, [r3, #8]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a09      	ldr	r2, [pc, #36]	; (80077a0 <TIM_Base_SetConfig+0xe0>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d003      	beq.n	8007788 <TIM_Base_SetConfig+0xc8>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a08      	ldr	r2, [pc, #32]	; (80077a4 <TIM_Base_SetConfig+0xe4>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d103      	bne.n	8007790 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	691a      	ldr	r2, [r3, #16]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	615a      	str	r2, [r3, #20]
}
 8007796:	bf00      	nop
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	bc80      	pop	{r7}
 800779e:	4770      	bx	lr
 80077a0:	40012c00 	.word	0x40012c00
 80077a4:	40013400 	.word	0x40013400
 80077a8:	40000400 	.word	0x40000400
 80077ac:	40000800 	.word	0x40000800
 80077b0:	40000c00 	.word	0x40000c00

080077b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bc80      	pop	{r7}
 80077c4:	4770      	bx	lr

080077c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b083      	sub	sp, #12
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077ce:	bf00      	nop
 80077d0:	370c      	adds	r7, #12
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bc80      	pop	{r7}
 80077d6:	4770      	bx	lr

080077d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e042      	b.n	8007870 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d106      	bne.n	8007804 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7fd fc50 	bl	80050a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2224      	movs	r2, #36	; 0x24
 8007808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68da      	ldr	r2, [r3, #12]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800781a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fdf1 	bl	8008404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	691a      	ldr	r2, [r3, #16]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007830:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	695a      	ldr	r2, [r3, #20]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007840:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68da      	ldr	r2, [r3, #12]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007850:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2220      	movs	r2, #32
 800785c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b08a      	sub	sp, #40	; 0x28
 800787c:	af02      	add	r7, sp, #8
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	603b      	str	r3, [r7, #0]
 8007884:	4613      	mov	r3, r2
 8007886:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007888:	2300      	movs	r3, #0
 800788a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b20      	cmp	r3, #32
 8007896:	d16d      	bne.n	8007974 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <HAL_UART_Transmit+0x2c>
 800789e:	88fb      	ldrh	r3, [r7, #6]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d101      	bne.n	80078a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e066      	b.n	8007976 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2221      	movs	r2, #33	; 0x21
 80078b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078b6:	f7fd fe73 	bl	80055a0 <HAL_GetTick>
 80078ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	88fa      	ldrh	r2, [r7, #6]
 80078c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	88fa      	ldrh	r2, [r7, #6]
 80078c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078d0:	d108      	bne.n	80078e4 <HAL_UART_Transmit+0x6c>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d104      	bne.n	80078e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80078da:	2300      	movs	r3, #0
 80078dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	61bb      	str	r3, [r7, #24]
 80078e2:	e003      	b.n	80078ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078e8:	2300      	movs	r3, #0
 80078ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80078ec:	e02a      	b.n	8007944 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2200      	movs	r2, #0
 80078f6:	2180      	movs	r1, #128	; 0x80
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 fb41 	bl	8007f80 <UART_WaitOnFlagUntilTimeout>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e036      	b.n	8007976 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10b      	bne.n	8007926 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	881b      	ldrh	r3, [r3, #0]
 8007912:	461a      	mov	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800791c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	3302      	adds	r3, #2
 8007922:	61bb      	str	r3, [r7, #24]
 8007924:	e007      	b.n	8007936 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	781a      	ldrb	r2, [r3, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	3301      	adds	r3, #1
 8007934:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800793a:	b29b      	uxth	r3, r3
 800793c:	3b01      	subs	r3, #1
 800793e:	b29a      	uxth	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007948:	b29b      	uxth	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1cf      	bne.n	80078ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	2200      	movs	r2, #0
 8007956:	2140      	movs	r1, #64	; 0x40
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 fb11 	bl	8007f80 <UART_WaitOnFlagUntilTimeout>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e006      	b.n	8007976 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2220      	movs	r2, #32
 800796c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	e000      	b.n	8007976 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007974:	2302      	movs	r3, #2
  }
}
 8007976:	4618      	mov	r0, r3
 8007978:	3720      	adds	r7, #32
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800797e:	b480      	push	{r7}
 8007980:	b085      	sub	sp, #20
 8007982:	af00      	add	r7, sp, #0
 8007984:	60f8      	str	r0, [r7, #12]
 8007986:	60b9      	str	r1, [r7, #8]
 8007988:	4613      	mov	r3, r2
 800798a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b20      	cmp	r3, #32
 8007996:	d121      	bne.n	80079dc <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <HAL_UART_Transmit_IT+0x26>
 800799e:	88fb      	ldrh	r3, [r7, #6]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e01a      	b.n	80079de <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	88fa      	ldrh	r2, [r7, #6]
 80079b2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	88fa      	ldrh	r2, [r7, #6]
 80079b8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2221      	movs	r2, #33	; 0x21
 80079c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68da      	ldr	r2, [r3, #12]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80079d6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	e000      	b.n	80079de <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80079dc:	2302      	movs	r3, #2
  }
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3714      	adds	r7, #20
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bc80      	pop	{r7}
 80079e6:	4770      	bx	lr

080079e8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	4613      	mov	r3, r2
 80079f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b20      	cmp	r3, #32
 8007a00:	d112      	bne.n	8007a28 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <HAL_UART_Receive_IT+0x26>
 8007a08:	88fb      	ldrh	r3, [r7, #6]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e00b      	b.n	8007a2a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a18:	88fb      	ldrh	r3, [r7, #6]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	68b9      	ldr	r1, [r7, #8]
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f000 fb1c 	bl	800805c <UART_Start_Receive_IT>
 8007a24:	4603      	mov	r3, r0
 8007a26:	e000      	b.n	8007a2a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007a28:	2302      	movs	r3, #2
  }
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
	...

08007a34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b0ba      	sub	sp, #232	; 0xe8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a6a:	f003 030f 	and.w	r3, r3, #15
 8007a6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007a72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10f      	bne.n	8007a9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a7e:	f003 0320 	and.w	r3, r3, #32
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d009      	beq.n	8007a9a <HAL_UART_IRQHandler+0x66>
 8007a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a8a:	f003 0320 	and.w	r3, r3, #32
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d003      	beq.n	8007a9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fbf8 	bl	8008288 <UART_Receive_IT>
      return;
 8007a98:	e25b      	b.n	8007f52 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 80de 	beq.w	8007c60 <HAL_UART_IRQHandler+0x22c>
 8007aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d106      	bne.n	8007abe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 80d1 	beq.w	8007c60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00b      	beq.n	8007ae2 <HAL_UART_IRQHandler+0xae>
 8007aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d005      	beq.n	8007ae2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ada:	f043 0201 	orr.w	r2, r3, #1
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae6:	f003 0304 	and.w	r3, r3, #4
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00b      	beq.n	8007b06 <HAL_UART_IRQHandler+0xd2>
 8007aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d005      	beq.n	8007b06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afe:	f043 0202 	orr.w	r2, r3, #2
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b0a:	f003 0302 	and.w	r3, r3, #2
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00b      	beq.n	8007b2a <HAL_UART_IRQHandler+0xf6>
 8007b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d005      	beq.n	8007b2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b22:	f043 0204 	orr.w	r2, r3, #4
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b2e:	f003 0308 	and.w	r3, r3, #8
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d011      	beq.n	8007b5a <HAL_UART_IRQHandler+0x126>
 8007b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b3a:	f003 0320 	and.w	r3, r3, #32
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d105      	bne.n	8007b4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d005      	beq.n	8007b5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b52:	f043 0208 	orr.w	r2, r3, #8
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 81f2 	beq.w	8007f48 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b68:	f003 0320 	and.w	r3, r3, #32
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d008      	beq.n	8007b82 <HAL_UART_IRQHandler+0x14e>
 8007b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b74:	f003 0320 	and.w	r3, r3, #32
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d002      	beq.n	8007b82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fb83 	bl	8008288 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	bf14      	ite	ne
 8007b90:	2301      	movne	r3, #1
 8007b92:	2300      	moveq	r3, #0
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b9e:	f003 0308 	and.w	r3, r3, #8
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d103      	bne.n	8007bae <HAL_UART_IRQHandler+0x17a>
 8007ba6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d04f      	beq.n	8007c4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fa8d 	bl	80080ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d041      	beq.n	8007c46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	3314      	adds	r3, #20
 8007bc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bd0:	e853 3f00 	ldrex	r3, [r3]
 8007bd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007be0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3314      	adds	r3, #20
 8007bea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007bee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bfe:	e841 2300 	strex	r3, r2, [r1]
 8007c02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1d9      	bne.n	8007bc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d013      	beq.n	8007c3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c1a:	4a7e      	ldr	r2, [pc, #504]	; (8007e14 <HAL_UART_IRQHandler+0x3e0>)
 8007c1c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fd fe58 	bl	80058d8 <HAL_DMA_Abort_IT>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d016      	beq.n	8007c5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007c38:	4610      	mov	r0, r2
 8007c3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c3c:	e00e      	b.n	8007c5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f98a 	bl	8007f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c44:	e00a      	b.n	8007c5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f986 	bl	8007f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c4c:	e006      	b.n	8007c5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f982 	bl	8007f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007c5a:	e175      	b.n	8007f48 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c5c:	bf00      	nop
    return;
 8007c5e:	e173      	b.n	8007f48 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	f040 814f 	bne.w	8007f08 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c6e:	f003 0310 	and.w	r3, r3, #16
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f000 8148 	beq.w	8007f08 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c7c:	f003 0310 	and.w	r3, r3, #16
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 8141 	beq.w	8007f08 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c86:	2300      	movs	r3, #0
 8007c88:	60bb      	str	r3, [r7, #8]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	60bb      	str	r3, [r7, #8]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	60bb      	str	r3, [r7, #8]
 8007c9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f000 80b6 	beq.w	8007e18 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007cb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 8145 	beq.w	8007f4c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007cc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	f080 813e 	bcs.w	8007f4c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007cd6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	2b20      	cmp	r3, #32
 8007ce0:	f000 8088 	beq.w	8007df4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	330c      	adds	r3, #12
 8007cea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cf2:	e853 3f00 	ldrex	r3, [r3]
 8007cf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007cfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	330c      	adds	r3, #12
 8007d0c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007d10:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d18:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d20:	e841 2300 	strex	r3, r2, [r1]
 8007d24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007d28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1d9      	bne.n	8007ce4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	3314      	adds	r3, #20
 8007d36:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d3a:	e853 3f00 	ldrex	r3, [r3]
 8007d3e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d42:	f023 0301 	bic.w	r3, r3, #1
 8007d46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	3314      	adds	r3, #20
 8007d50:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d54:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d58:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d60:	e841 2300 	strex	r3, r2, [r1]
 8007d64:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1e1      	bne.n	8007d30 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	3314      	adds	r3, #20
 8007d72:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d76:	e853 3f00 	ldrex	r3, [r3]
 8007d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3314      	adds	r3, #20
 8007d8c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d90:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d94:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e3      	bne.n	8007d6c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2220      	movs	r2, #32
 8007da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	330c      	adds	r3, #12
 8007db8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dc4:	f023 0310 	bic.w	r3, r3, #16
 8007dc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	330c      	adds	r3, #12
 8007dd2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007dd6:	65ba      	str	r2, [r7, #88]	; 0x58
 8007dd8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ddc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1e3      	bne.n	8007db2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7fd fd36 	bl	8005860 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2202      	movs	r2, #2
 8007df8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f8ad 	bl	8007f6a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e10:	e09c      	b.n	8007f4c <HAL_UART_IRQHandler+0x518>
 8007e12:	bf00      	nop
 8007e14:	08008193 	.word	0x08008193
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 808e 	beq.w	8007f50 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007e34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 8089 	beq.w	8007f50 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	330c      	adds	r3, #12
 8007e44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e48:	e853 3f00 	ldrex	r3, [r3]
 8007e4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	330c      	adds	r3, #12
 8007e5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007e62:	647a      	str	r2, [r7, #68]	; 0x44
 8007e64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e6a:	e841 2300 	strex	r3, r2, [r1]
 8007e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1e3      	bne.n	8007e3e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	3314      	adds	r3, #20
 8007e7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e80:	e853 3f00 	ldrex	r3, [r3]
 8007e84:	623b      	str	r3, [r7, #32]
   return(result);
 8007e86:	6a3b      	ldr	r3, [r7, #32]
 8007e88:	f023 0301 	bic.w	r3, r3, #1
 8007e8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	3314      	adds	r3, #20
 8007e96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e9a:	633a      	str	r2, [r7, #48]	; 0x30
 8007e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ea2:	e841 2300 	strex	r3, r2, [r1]
 8007ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1e3      	bne.n	8007e76 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2220      	movs	r2, #32
 8007eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	330c      	adds	r3, #12
 8007ec2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	e853 3f00 	ldrex	r3, [r3]
 8007eca:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f023 0310 	bic.w	r3, r3, #16
 8007ed2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	330c      	adds	r3, #12
 8007edc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ee0:	61fa      	str	r2, [r7, #28]
 8007ee2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee4:	69b9      	ldr	r1, [r7, #24]
 8007ee6:	69fa      	ldr	r2, [r7, #28]
 8007ee8:	e841 2300 	strex	r3, r2, [r1]
 8007eec:	617b      	str	r3, [r7, #20]
   return(result);
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1e3      	bne.n	8007ebc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007efa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 f832 	bl	8007f6a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f06:	e023      	b.n	8007f50 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d009      	beq.n	8007f28 <HAL_UART_IRQHandler+0x4f4>
 8007f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d003      	beq.n	8007f28 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f94a 	bl	80081ba <UART_Transmit_IT>
    return;
 8007f26:	e014      	b.n	8007f52 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00e      	beq.n	8007f52 <HAL_UART_IRQHandler+0x51e>
 8007f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d008      	beq.n	8007f52 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f989 	bl	8008258 <UART_EndTransmit_IT>
    return;
 8007f46:	e004      	b.n	8007f52 <HAL_UART_IRQHandler+0x51e>
    return;
 8007f48:	bf00      	nop
 8007f4a:	e002      	b.n	8007f52 <HAL_UART_IRQHandler+0x51e>
      return;
 8007f4c:	bf00      	nop
 8007f4e:	e000      	b.n	8007f52 <HAL_UART_IRQHandler+0x51e>
      return;
 8007f50:	bf00      	nop
  }
}
 8007f52:	37e8      	adds	r7, #232	; 0xe8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bc80      	pop	{r7}
 8007f68:	4770      	bx	lr

08007f6a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	460b      	mov	r3, r1
 8007f74:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f76:	bf00      	nop
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bc80      	pop	{r7}
 8007f7e:	4770      	bx	lr

08007f80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b090      	sub	sp, #64	; 0x40
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	603b      	str	r3, [r7, #0]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f90:	e050      	b.n	8008034 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f98:	d04c      	beq.n	8008034 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d007      	beq.n	8007fb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007fa0:	f7fd fafe 	bl	80055a0 <HAL_GetTick>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d241      	bcs.n	8008034 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	330c      	adds	r3, #12
 8007fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fba:	e853 3f00 	ldrex	r3, [r3]
 8007fbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	330c      	adds	r3, #12
 8007fce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007fd0:	637a      	str	r2, [r7, #52]	; 0x34
 8007fd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fd8:	e841 2300 	strex	r3, r2, [r1]
 8007fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e5      	bne.n	8007fb0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3314      	adds	r3, #20
 8007fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	e853 3f00 	ldrex	r3, [r3]
 8007ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	f023 0301 	bic.w	r3, r3, #1
 8007ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3314      	adds	r3, #20
 8008002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008004:	623a      	str	r2, [r7, #32]
 8008006:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008008:	69f9      	ldr	r1, [r7, #28]
 800800a:	6a3a      	ldr	r2, [r7, #32]
 800800c:	e841 2300 	strex	r3, r2, [r1]
 8008010:	61bb      	str	r3, [r7, #24]
   return(result);
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1e5      	bne.n	8007fe4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2220      	movs	r2, #32
 800801c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2220      	movs	r2, #32
 8008024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e00f      	b.n	8008054 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	4013      	ands	r3, r2
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	429a      	cmp	r2, r3
 8008042:	bf0c      	ite	eq
 8008044:	2301      	moveq	r3, #1
 8008046:	2300      	movne	r3, #0
 8008048:	b2db      	uxtb	r3, r3
 800804a:	461a      	mov	r2, r3
 800804c:	79fb      	ldrb	r3, [r7, #7]
 800804e:	429a      	cmp	r2, r3
 8008050:	d09f      	beq.n	8007f92 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3740      	adds	r7, #64	; 0x40
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	4613      	mov	r3, r2
 8008068:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	88fa      	ldrh	r2, [r7, #6]
 8008074:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	88fa      	ldrh	r2, [r7, #6]
 800807a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2222      	movs	r2, #34	; 0x22
 8008086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d007      	beq.n	80080a2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68da      	ldr	r2, [r3, #12]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080a0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	695a      	ldr	r2, [r3, #20]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f042 0201 	orr.w	r2, r2, #1
 80080b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68da      	ldr	r2, [r3, #12]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f042 0220 	orr.w	r2, r2, #32
 80080c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3714      	adds	r7, #20
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bc80      	pop	{r7}
 80080cc:	4770      	bx	lr

080080ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b095      	sub	sp, #84	; 0x54
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	330c      	adds	r3, #12
 80080dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e0:	e853 3f00 	ldrex	r3, [r3]
 80080e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	330c      	adds	r3, #12
 80080f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080f6:	643a      	str	r2, [r7, #64]	; 0x40
 80080f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080fe:	e841 2300 	strex	r3, r2, [r1]
 8008102:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1e5      	bne.n	80080d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	3314      	adds	r3, #20
 8008110:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	e853 3f00 	ldrex	r3, [r3]
 8008118:	61fb      	str	r3, [r7, #28]
   return(result);
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	f023 0301 	bic.w	r3, r3, #1
 8008120:	64bb      	str	r3, [r7, #72]	; 0x48
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3314      	adds	r3, #20
 8008128:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800812a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800812c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008132:	e841 2300 	strex	r3, r2, [r1]
 8008136:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1e5      	bne.n	800810a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008142:	2b01      	cmp	r3, #1
 8008144:	d119      	bne.n	800817a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	330c      	adds	r3, #12
 800814c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	e853 3f00 	ldrex	r3, [r3]
 8008154:	60bb      	str	r3, [r7, #8]
   return(result);
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f023 0310 	bic.w	r3, r3, #16
 800815c:	647b      	str	r3, [r7, #68]	; 0x44
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	330c      	adds	r3, #12
 8008164:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008166:	61ba      	str	r2, [r7, #24]
 8008168:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816a:	6979      	ldr	r1, [r7, #20]
 800816c:	69ba      	ldr	r2, [r7, #24]
 800816e:	e841 2300 	strex	r3, r2, [r1]
 8008172:	613b      	str	r3, [r7, #16]
   return(result);
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1e5      	bne.n	8008146 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2220      	movs	r2, #32
 800817e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008188:	bf00      	nop
 800818a:	3754      	adds	r7, #84	; 0x54
 800818c:	46bd      	mov	sp, r7
 800818e:	bc80      	pop	{r7}
 8008190:	4770      	bx	lr

08008192 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b084      	sub	sp, #16
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f7ff fed3 	bl	8007f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081b2:	bf00      	nop
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b085      	sub	sp, #20
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b21      	cmp	r3, #33	; 0x21
 80081cc:	d13e      	bne.n	800824c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081d6:	d114      	bne.n	8008202 <UART_Transmit_IT+0x48>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d110      	bne.n	8008202 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a1b      	ldr	r3, [r3, #32]
 80081e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	881b      	ldrh	r3, [r3, #0]
 80081ea:	461a      	mov	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	1c9a      	adds	r2, r3, #2
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	621a      	str	r2, [r3, #32]
 8008200:	e008      	b.n	8008214 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	1c59      	adds	r1, r3, #1
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	6211      	str	r1, [r2, #32]
 800820c:	781a      	ldrb	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008218:	b29b      	uxth	r3, r3
 800821a:	3b01      	subs	r3, #1
 800821c:	b29b      	uxth	r3, r3
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	4619      	mov	r1, r3
 8008222:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10f      	bne.n	8008248 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68da      	ldr	r2, [r3, #12]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008236:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68da      	ldr	r2, [r3, #12]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008246:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	e000      	b.n	800824e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800824c:	2302      	movs	r3, #2
  }
}
 800824e:	4618      	mov	r0, r3
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	bc80      	pop	{r7}
 8008256:	4770      	bx	lr

08008258 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68da      	ldr	r2, [r3, #12]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800826e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2220      	movs	r2, #32
 8008274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f7fb fe4f 	bl	8003f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b08c      	sub	sp, #48	; 0x30
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b22      	cmp	r3, #34	; 0x22
 800829a:	f040 80ae 	bne.w	80083fa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082a6:	d117      	bne.n	80082d8 <UART_Receive_IT+0x50>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d113      	bne.n	80082d8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80082b0:	2300      	movs	r3, #0
 80082b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d0:	1c9a      	adds	r2, r3, #2
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	629a      	str	r2, [r3, #40]	; 0x28
 80082d6:	e026      	b.n	8008326 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80082de:	2300      	movs	r3, #0
 80082e0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ea:	d007      	beq.n	80082fc <UART_Receive_IT+0x74>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10a      	bne.n	800830a <UART_Receive_IT+0x82>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d106      	bne.n	800830a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	b2da      	uxtb	r2, r3
 8008304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008306:	701a      	strb	r2, [r3, #0]
 8008308:	e008      	b.n	800831c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	b2db      	uxtb	r3, r3
 8008312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008316:	b2da      	uxtb	r2, r3
 8008318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008320:	1c5a      	adds	r2, r3, #1
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800832a:	b29b      	uxth	r3, r3
 800832c:	3b01      	subs	r3, #1
 800832e:	b29b      	uxth	r3, r3
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	4619      	mov	r1, r3
 8008334:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008336:	2b00      	cmp	r3, #0
 8008338:	d15d      	bne.n	80083f6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68da      	ldr	r2, [r3, #12]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f022 0220 	bic.w	r2, r2, #32
 8008348:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68da      	ldr	r2, [r3, #12]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008358:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	695a      	ldr	r2, [r3, #20]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f022 0201 	bic.w	r2, r2, #1
 8008368:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2220      	movs	r2, #32
 800836e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837c:	2b01      	cmp	r3, #1
 800837e:	d135      	bne.n	80083ec <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	330c      	adds	r3, #12
 800838c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	e853 3f00 	ldrex	r3, [r3]
 8008394:	613b      	str	r3, [r7, #16]
   return(result);
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	f023 0310 	bic.w	r3, r3, #16
 800839c:	627b      	str	r3, [r7, #36]	; 0x24
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	330c      	adds	r3, #12
 80083a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083a6:	623a      	str	r2, [r7, #32]
 80083a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083aa:	69f9      	ldr	r1, [r7, #28]
 80083ac:	6a3a      	ldr	r2, [r7, #32]
 80083ae:	e841 2300 	strex	r3, r2, [r1]
 80083b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1e5      	bne.n	8008386 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0310 	and.w	r3, r3, #16
 80083c4:	2b10      	cmp	r3, #16
 80083c6:	d10a      	bne.n	80083de <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083c8:	2300      	movs	r3, #0
 80083ca:	60fb      	str	r3, [r7, #12]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	60fb      	str	r3, [r7, #12]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	60fb      	str	r3, [r7, #12]
 80083dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80083e2:	4619      	mov	r1, r3
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f7ff fdc0 	bl	8007f6a <HAL_UARTEx_RxEventCallback>
 80083ea:	e002      	b.n	80083f2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f7fb fd61 	bl	8003eb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	e002      	b.n	80083fc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80083f6:	2300      	movs	r3, #0
 80083f8:	e000      	b.n	80083fc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80083fa:	2302      	movs	r3, #2
  }
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3730      	adds	r7, #48	; 0x30
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68da      	ldr	r2, [r3, #12]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	430a      	orrs	r2, r1
 8008420:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	689a      	ldr	r2, [r3, #8]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	431a      	orrs	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	695b      	ldr	r3, [r3, #20]
 8008430:	4313      	orrs	r3, r2
 8008432:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800843e:	f023 030c 	bic.w	r3, r3, #12
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	6812      	ldr	r2, [r2, #0]
 8008446:	68b9      	ldr	r1, [r7, #8]
 8008448:	430b      	orrs	r3, r1
 800844a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	699a      	ldr	r2, [r3, #24]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	430a      	orrs	r2, r1
 8008460:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a2c      	ldr	r2, [pc, #176]	; (8008518 <UART_SetConfig+0x114>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d103      	bne.n	8008474 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800846c:	f7fe fb04 	bl	8006a78 <HAL_RCC_GetPCLK2Freq>
 8008470:	60f8      	str	r0, [r7, #12]
 8008472:	e002      	b.n	800847a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008474:	f7fe faec 	bl	8006a50 <HAL_RCC_GetPCLK1Freq>
 8008478:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	4613      	mov	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4413      	add	r3, r2
 8008482:	009a      	lsls	r2, r3, #2
 8008484:	441a      	add	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008490:	4a22      	ldr	r2, [pc, #136]	; (800851c <UART_SetConfig+0x118>)
 8008492:	fba2 2303 	umull	r2, r3, r2, r3
 8008496:	095b      	lsrs	r3, r3, #5
 8008498:	0119      	lsls	r1, r3, #4
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	4613      	mov	r3, r2
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4413      	add	r3, r2
 80084a2:	009a      	lsls	r2, r3, #2
 80084a4:	441a      	add	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80084b0:	4b1a      	ldr	r3, [pc, #104]	; (800851c <UART_SetConfig+0x118>)
 80084b2:	fba3 0302 	umull	r0, r3, r3, r2
 80084b6:	095b      	lsrs	r3, r3, #5
 80084b8:	2064      	movs	r0, #100	; 0x64
 80084ba:	fb00 f303 	mul.w	r3, r0, r3
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	011b      	lsls	r3, r3, #4
 80084c2:	3332      	adds	r3, #50	; 0x32
 80084c4:	4a15      	ldr	r2, [pc, #84]	; (800851c <UART_SetConfig+0x118>)
 80084c6:	fba2 2303 	umull	r2, r3, r2, r3
 80084ca:	095b      	lsrs	r3, r3, #5
 80084cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084d0:	4419      	add	r1, r3
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	4613      	mov	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4413      	add	r3, r2
 80084da:	009a      	lsls	r2, r3, #2
 80084dc:	441a      	add	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80084e8:	4b0c      	ldr	r3, [pc, #48]	; (800851c <UART_SetConfig+0x118>)
 80084ea:	fba3 0302 	umull	r0, r3, r3, r2
 80084ee:	095b      	lsrs	r3, r3, #5
 80084f0:	2064      	movs	r0, #100	; 0x64
 80084f2:	fb00 f303 	mul.w	r3, r0, r3
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	011b      	lsls	r3, r3, #4
 80084fa:	3332      	adds	r3, #50	; 0x32
 80084fc:	4a07      	ldr	r2, [pc, #28]	; (800851c <UART_SetConfig+0x118>)
 80084fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008502:	095b      	lsrs	r3, r3, #5
 8008504:	f003 020f 	and.w	r2, r3, #15
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	440a      	add	r2, r1
 800850e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008510:	bf00      	nop
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	40013800 	.word	0x40013800
 800851c:	51eb851f 	.word	0x51eb851f

08008520 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  //retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
	FATFS_LinkDriver(&SD0_Driver, SD0Path);
 8008524:	4908      	ldr	r1, [pc, #32]	; (8008548 <MX_FATFS_Init+0x28>)
 8008526:	4809      	ldr	r0, [pc, #36]	; (800854c <MX_FATFS_Init+0x2c>)
 8008528:	f004 fe6c 	bl	800d204 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD1_Driver, SD1Path);
 800852c:	4908      	ldr	r1, [pc, #32]	; (8008550 <MX_FATFS_Init+0x30>)
 800852e:	4809      	ldr	r0, [pc, #36]	; (8008554 <MX_FATFS_Init+0x34>)
 8008530:	f004 fe68 	bl	800d204 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD2_Driver, SD2Path);
 8008534:	4908      	ldr	r1, [pc, #32]	; (8008558 <MX_FATFS_Init+0x38>)
 8008536:	4809      	ldr	r0, [pc, #36]	; (800855c <MX_FATFS_Init+0x3c>)
 8008538:	f004 fe64 	bl	800d204 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD3_Driver, SD3Path);
 800853c:	4908      	ldr	r1, [pc, #32]	; (8008560 <MX_FATFS_Init+0x40>)
 800853e:	4809      	ldr	r0, [pc, #36]	; (8008564 <MX_FATFS_Init+0x44>)
 8008540:	f004 fe60 	bl	800d204 <FATFS_LinkDriver>


  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008544:	bf00      	nop
 8008546:	bd80      	pop	{r7, pc}
 8008548:	200028bc 	.word	0x200028bc
 800854c:	200001d0 	.word	0x200001d0
 8008550:	200028c0 	.word	0x200028c0
 8008554:	200001e4 	.word	0x200001e4
 8008558:	200028c4 	.word	0x200028c4
 800855c:	200001f8 	.word	0x200001f8
 8008560:	200028c8 	.word	0x200028c8
 8008564:	2000020c 	.word	0x2000020c

08008568 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008568:	b480      	push	{r7}
 800856a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800856c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800856e:	4618      	mov	r0, r3
 8008570:	46bd      	mov	sp, r7
 8008572:	bc80      	pop	{r7}
 8008574:	4770      	bx	lr

08008576 <SD0_initialize>:
  * @brief  Initializes a Drive
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_initialize (BYTE pdrv)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b082      	sub	sp, #8
 800857a:	af00      	add	r7, sp, #0
 800857c:	4603      	mov	r3, r0
 800857e:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 8008580:	2000      	movs	r0, #0
 8008582:	f7fb fe17 	bl	80041b4 <sd_ss_set_active>
	return USER_initialize(pdrv);
 8008586:	79fb      	ldrb	r3, [r7, #7]
 8008588:	4618      	mov	r0, r3
 800858a:	f000 f839 	bl	8008600 <USER_initialize>
 800858e:	4603      	mov	r3, r0
}
 8008590:	4618      	mov	r0, r3
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <SD1_initialize>:
DSTATUS SD1_initialize (BYTE pdrv)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	4603      	mov	r3, r0
 80085a0:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 80085a2:	2001      	movs	r0, #1
 80085a4:	f7fb fe06 	bl	80041b4 <sd_ss_set_active>
	return USER_initialize(pdrv);
 80085a8:	79fb      	ldrb	r3, [r7, #7]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 f828 	bl	8008600 <USER_initialize>
 80085b0:	4603      	mov	r3, r0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <SD2_initialize>:
DSTATUS SD2_initialize (BYTE pdrv)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b082      	sub	sp, #8
 80085be:	af00      	add	r7, sp, #0
 80085c0:	4603      	mov	r3, r0
 80085c2:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 80085c4:	2002      	movs	r0, #2
 80085c6:	f7fb fdf5 	bl	80041b4 <sd_ss_set_active>
	return USER_initialize(pdrv);
 80085ca:	79fb      	ldrb	r3, [r7, #7]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f000 f817 	bl	8008600 <USER_initialize>
 80085d2:	4603      	mov	r3, r0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <SD3_initialize>:
DSTATUS SD3_initialize (BYTE pdrv)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	4603      	mov	r3, r0
 80085e4:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 80085e6:	2003      	movs	r0, #3
 80085e8:	f7fb fde4 	bl	80041b4 <sd_ss_set_active>
	return USER_initialize(pdrv);
 80085ec:	79fb      	ldrb	r3, [r7, #7]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 f806 	bl	8008600 <USER_initialize>
 80085f4:	4603      	mov	r3, r0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <USER_initialize>:

DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	4603      	mov	r3, r0
 8008608:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//SD_PowerOn();
	SS_SD_SELECT();
 800860a:	f7fb fe11 	bl	8004230 <sd_ss_active_pin_down>
	if(sd_ini()==0) {*Stat &= ~STA_NOINIT;} // STA_NOINIT
 800860e:	f7fb fe89 	bl	8004324 <sd_ini>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d108      	bne.n	800862a <USER_initialize+0x2a>
 8008618:	4b08      	ldr	r3, [pc, #32]	; (800863c <USER_initialize+0x3c>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	781a      	ldrb	r2, [r3, #0]
 800861e:	4b07      	ldr	r3, [pc, #28]	; (800863c <USER_initialize+0x3c>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f022 0201 	bic.w	r2, r2, #1
 8008626:	b2d2      	uxtb	r2, r2
 8008628:	701a      	strb	r2, [r3, #0]
	SS_SD_DESELECT();
 800862a:	f7fb fe11 	bl	8004250 <sd_ss_active_pin_up>
    return *Stat;
 800862e:	4b03      	ldr	r3, [pc, #12]	; (800863c <USER_initialize+0x3c>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	781b      	ldrb	r3, [r3, #0]
  /* USER CODE END INIT */
}
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	200028cc 	.word	0x200028cc

08008640 <SD0_status>:
  * @brief  Gets Disk Status
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_status (BYTE pdrv)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	4603      	mov	r3, r0
 8008648:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 800864a:	2000      	movs	r0, #0
 800864c:	f7fb fdb2 	bl	80041b4 <sd_ss_set_active>
	return USER_status(pdrv);
 8008650:	79fb      	ldrb	r3, [r7, #7]
 8008652:	4618      	mov	r0, r3
 8008654:	f000 f838 	bl	80086c8 <USER_status>
 8008658:	4603      	mov	r3, r0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3708      	adds	r7, #8
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <SD1_status>:
DSTATUS SD1_status (BYTE pdrv)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b082      	sub	sp, #8
 8008666:	af00      	add	r7, sp, #0
 8008668:	4603      	mov	r3, r0
 800866a:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 800866c:	2001      	movs	r0, #1
 800866e:	f7fb fda1 	bl	80041b4 <sd_ss_set_active>
	return USER_status(pdrv);
 8008672:	79fb      	ldrb	r3, [r7, #7]
 8008674:	4618      	mov	r0, r3
 8008676:	f000 f827 	bl	80086c8 <USER_status>
 800867a:	4603      	mov	r3, r0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <SD2_status>:
DSTATUS SD2_status (BYTE pdrv)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	4603      	mov	r3, r0
 800868c:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 800868e:	2002      	movs	r0, #2
 8008690:	f7fb fd90 	bl	80041b4 <sd_ss_set_active>
	return USER_status(pdrv);
 8008694:	79fb      	ldrb	r3, [r7, #7]
 8008696:	4618      	mov	r0, r3
 8008698:	f000 f816 	bl	80086c8 <USER_status>
 800869c:	4603      	mov	r3, r0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <SD3_status>:
DSTATUS SD3_status (BYTE pdrv)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b082      	sub	sp, #8
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	4603      	mov	r3, r0
 80086ae:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 80086b0:	2003      	movs	r0, #3
 80086b2:	f7fb fd7f 	bl	80041b4 <sd_ss_set_active>
	return USER_status(pdrv);
 80086b6:	79fb      	ldrb	r3, [r7, #7]
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 f805 	bl	80086c8 <USER_status>
 80086be:	4603      	mov	r3, r0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <USER_status>:

DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	4603      	mov	r3, r0
 80086d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	SS_SD_SELECT();
 80086d2:	f7fb fdad 	bl	8004230 <sd_ss_active_pin_down>
	//if (pdrv) return STA_NOINIT;
	SS_SD_DESELECT();
 80086d6:	f7fb fdbb 	bl	8004250 <sd_ss_active_pin_up>
    return *Stat;
 80086da:	4b03      	ldr	r3, [pc, #12]	; (80086e8 <USER_status+0x20>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	781b      	ldrb	r3, [r3, #0]
  /* USER CODE END STATUS */
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	200028cc 	.word	0x200028cc

080086ec <SD0_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DSTATUS SD0_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60b9      	str	r1, [r7, #8]
 80086f4:	607a      	str	r2, [r7, #4]
 80086f6:	603b      	str	r3, [r7, #0]
 80086f8:	4603      	mov	r3, r0
 80086fa:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 80086fc:	2000      	movs	r0, #0
 80086fe:	f7fb fd59 	bl	80041b4 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8008702:	7bf8      	ldrb	r0, [r7, #15]
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	68b9      	ldr	r1, [r7, #8]
 800870a:	f000 f847 	bl	800879c <USER_read>
 800870e:	4603      	mov	r3, r0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <SD1_read>:
DSTATUS SD1_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	60b9      	str	r1, [r7, #8]
 8008720:	607a      	str	r2, [r7, #4]
 8008722:	603b      	str	r3, [r7, #0]
 8008724:	4603      	mov	r3, r0
 8008726:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 8008728:	2001      	movs	r0, #1
 800872a:	f7fb fd43 	bl	80041b4 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800872e:	7bf8      	ldrb	r0, [r7, #15]
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	68b9      	ldr	r1, [r7, #8]
 8008736:	f000 f831 	bl	800879c <USER_read>
 800873a:	4603      	mov	r3, r0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <SD2_read>:
DSTATUS SD2_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	60b9      	str	r1, [r7, #8]
 800874c:	607a      	str	r2, [r7, #4]
 800874e:	603b      	str	r3, [r7, #0]
 8008750:	4603      	mov	r3, r0
 8008752:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 8008754:	2002      	movs	r0, #2
 8008756:	f7fb fd2d 	bl	80041b4 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800875a:	7bf8      	ldrb	r0, [r7, #15]
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	68b9      	ldr	r1, [r7, #8]
 8008762:	f000 f81b 	bl	800879c <USER_read>
 8008766:	4603      	mov	r3, r0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <SD3_read>:
DSTATUS SD3_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	60b9      	str	r1, [r7, #8]
 8008778:	607a      	str	r2, [r7, #4]
 800877a:	603b      	str	r3, [r7, #0]
 800877c:	4603      	mov	r3, r0
 800877e:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 8008780:	2003      	movs	r0, #3
 8008782:	f7fb fd17 	bl	80041b4 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8008786:	7bf8      	ldrb	r0, [r7, #15]
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	68b9      	ldr	r1, [r7, #8]
 800878e:	f000 f805 	bl	800879c <USER_read>
 8008792:	4603      	mov	r3, r0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60b9      	str	r1, [r7, #8]
 80087a4:	607a      	str	r2, [r7, #4]
 80087a6:	603b      	str	r3, [r7, #0]
 80087a8:	4603      	mov	r3, r0
 80087aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */

	SS_SD_SELECT();
 80087ac:	f7fb fd40 	bl	8004230 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d102      	bne.n	80087bc <USER_read+0x20>
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d101      	bne.n	80087c0 <USER_read+0x24>
 80087bc:	2304      	movs	r3, #4
 80087be:	e045      	b.n	800884c <USER_read+0xb0>
	if (*Stat & STA_NOINIT) return RES_NOTRDY;
 80087c0:	4b24      	ldr	r3, [pc, #144]	; (8008854 <USER_read+0xb8>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	f003 0301 	and.w	r3, r3, #1
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <USER_read+0x36>
 80087ce:	2303      	movs	r3, #3
 80087d0:	e03c      	b.n	800884c <USER_read+0xb0>
	if (!(sdinfo->type & 4)) sector *= 512; /* Convert to byte address if needed */
 80087d2:	4b21      	ldr	r3, [pc, #132]	; (8008858 <USER_read+0xbc>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	f003 0304 	and.w	r3, r3, #4
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d102      	bne.n	80087e8 <USER_read+0x4c>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	025b      	lsls	r3, r3, #9
 80087e6:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d106      	bne.n	80087fc <USER_read+0x60>
	{
	  SD_Read_Block(buff,sector); //Ð¡Ñ‡Ð¸Ñ‚Ð°ÐµÐ¼ Ð±Ð»Ð¾Ðº Ð² Ð±ÑƒÑ„ÐµÑ€
 80087ee:	6879      	ldr	r1, [r7, #4]
 80087f0:	68b8      	ldr	r0, [r7, #8]
 80087f2:	f7fb fedc 	bl	80045ae <SD_Read_Block>
	  count = 0;
 80087f6:	2300      	movs	r3, #0
 80087f8:	603b      	str	r3, [r7, #0]
 80087fa:	e01d      	b.n	8008838 <USER_read+0x9c>
	}
	else /* Multiple block read */
	{
		do{
			SD_Read_Block((BYTE*)buff,sector);
 80087fc:	6879      	ldr	r1, [r7, #4]
 80087fe:	68b8      	ldr	r0, [r7, #8]
 8008800:	f7fb fed5 	bl	80045ae <SD_Read_Block>
			if (!(sdinfo->type & 4)){
 8008804:	4b14      	ldr	r3, [pc, #80]	; (8008858 <USER_read+0xbc>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	b2db      	uxtb	r3, r3
 800880c:	f003 0304 	and.w	r3, r3, #4
 8008810:	2b00      	cmp	r3, #0
 8008812:	d104      	bne.n	800881e <USER_read+0x82>
				sector+=512;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800881a:	607b      	str	r3, [r7, #4]
 800881c:	e002      	b.n	8008824 <USER_read+0x88>
			}
			else sector++;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	3301      	adds	r3, #1
 8008822:	607b      	str	r3, [r7, #4]
			buff+=512;
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800882a:	60bb      	str	r3, [r7, #8]
			count--;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	3b01      	subs	r3, #1
 8008830:	603b      	str	r3, [r7, #0]
		}while(count>0);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1e1      	bne.n	80087fc <USER_read+0x60>
	}
	SPI_Release();
 8008838:	f7fb feb2 	bl	80045a0 <SPI_Release>
	SS_SD_DESELECT();
 800883c:	f7fb fd08 	bl	8004250 <sd_ss_active_pin_up>
	return count ? RES_ERROR : RES_OK;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	bf14      	ite	ne
 8008846:	2301      	movne	r3, #1
 8008848:	2300      	moveq	r3, #0
 800884a:	b2db      	uxtb	r3, r3
    return RES_OK;
  /* USER CODE END READ */
}
 800884c:	4618      	mov	r0, r3
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	200028cc 	.word	0x200028cc
 8008858:	200025cc 	.word	0x200025cc

0800885c <SD0_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DSTATUS SD0_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	60b9      	str	r1, [r7, #8]
 8008864:	607a      	str	r2, [r7, #4]
 8008866:	603b      	str	r3, [r7, #0]
 8008868:	4603      	mov	r3, r0
 800886a:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 800886c:	2000      	movs	r0, #0
 800886e:	f7fb fca1 	bl	80041b4 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8008872:	7bf8      	ldrb	r0, [r7, #15]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	68b9      	ldr	r1, [r7, #8]
 800887a:	f000 f847 	bl	800890c <USER_write>
 800887e:	4603      	mov	r3, r0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <SD1_write>:
DSTATUS SD1_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	60b9      	str	r1, [r7, #8]
 8008890:	607a      	str	r2, [r7, #4]
 8008892:	603b      	str	r3, [r7, #0]
 8008894:	4603      	mov	r3, r0
 8008896:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 8008898:	2001      	movs	r0, #1
 800889a:	f7fb fc8b 	bl	80041b4 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 800889e:	7bf8      	ldrb	r0, [r7, #15]
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	68b9      	ldr	r1, [r7, #8]
 80088a6:	f000 f831 	bl	800890c <USER_write>
 80088aa:	4603      	mov	r3, r0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <SD2_write>:
DSTATUS SD2_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60b9      	str	r1, [r7, #8]
 80088bc:	607a      	str	r2, [r7, #4]
 80088be:	603b      	str	r3, [r7, #0]
 80088c0:	4603      	mov	r3, r0
 80088c2:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 80088c4:	2002      	movs	r0, #2
 80088c6:	f7fb fc75 	bl	80041b4 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 80088ca:	7bf8      	ldrb	r0, [r7, #15]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	68b9      	ldr	r1, [r7, #8]
 80088d2:	f000 f81b 	bl	800890c <USER_write>
 80088d6:	4603      	mov	r3, r0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <SD3_write>:
DSTATUS SD3_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60b9      	str	r1, [r7, #8]
 80088e8:	607a      	str	r2, [r7, #4]
 80088ea:	603b      	str	r3, [r7, #0]
 80088ec:	4603      	mov	r3, r0
 80088ee:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 80088f0:	2003      	movs	r0, #3
 80088f2:	f7fb fc5f 	bl	80041b4 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 80088f6:	7bf8      	ldrb	r0, [r7, #15]
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	68b9      	ldr	r1, [r7, #8]
 80088fe:	f000 f805 	bl	800890c <USER_write>
 8008902:	4603      	mov	r3, r0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af00      	add	r7, sp, #0
 8008912:	60b9      	str	r1, [r7, #8]
 8008914:	607a      	str	r2, [r7, #4]
 8008916:	603b      	str	r3, [r7, #0]
 8008918:	4603      	mov	r3, r0
 800891a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */

	uint8_t res;
	SS_SD_SELECT();
 800891c:	f7fb fc88 	bl	8004230 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 8008920:	7bfb      	ldrb	r3, [r7, #15]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d102      	bne.n	800892c <USER_write+0x20>
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d101      	bne.n	8008930 <USER_write+0x24>
 800892c:	2304      	movs	r3, #4
 800892e:	e02d      	b.n	800898c <USER_write+0x80>
	if (*Stat & STA_NOINIT) return RES_NOTRDY;
 8008930:	4b18      	ldr	r3, [pc, #96]	; (8008994 <USER_write+0x88>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	f003 0301 	and.w	r3, r3, #1
 800893a:	2b00      	cmp	r3, #0
 800893c:	d001      	beq.n	8008942 <USER_write+0x36>
 800893e:	2303      	movs	r3, #3
 8008940:	e024      	b.n	800898c <USER_write+0x80>
	if (*Stat & STA_PROTECT) return RES_WRPRT;
 8008942:	4b14      	ldr	r3, [pc, #80]	; (8008994 <USER_write+0x88>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	f003 0304 	and.w	r3, r3, #4
 800894c:	2b00      	cmp	r3, #0
 800894e:	d001      	beq.n	8008954 <USER_write+0x48>
 8008950:	2302      	movs	r3, #2
 8008952:	e01b      	b.n	800898c <USER_write+0x80>
	if (!(sdinfo->type & 4)) sector *= 512; /* Convert to byte address if needed */
 8008954:	4b10      	ldr	r3, [pc, #64]	; (8008998 <USER_write+0x8c>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	b2db      	uxtb	r3, r3
 800895c:	f003 0304 	and.w	r3, r3, #4
 8008960:	2b00      	cmp	r3, #0
 8008962:	d102      	bne.n	800896a <USER_write+0x5e>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	025b      	lsls	r3, r3, #9
 8008968:	607b      	str	r3, [r7, #4]
  	res=SD_Write_Blocks((BYTE*)buff,sector,count);
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	b29b      	uxth	r3, r3
 800896e:	461a      	mov	r2, r3
 8008970:	6879      	ldr	r1, [r7, #4]
 8008972:	68b8      	ldr	r0, [r7, #8]
 8008974:	f7fb fe60 	bl	8004638 <SD_Write_Blocks>
 8008978:	4603      	mov	r3, r0
 800897a:	75fb      	strb	r3, [r7, #23]
	SS_SD_DESELECT();
 800897c:	f7fb fc68 	bl	8004250 <sd_ss_active_pin_up>

	return res ? RES_ERROR : RES_OK;
 8008980:	7dfb      	ldrb	r3, [r7, #23]
 8008982:	2b00      	cmp	r3, #0
 8008984:	bf14      	ite	ne
 8008986:	2301      	movne	r3, #1
 8008988:	2300      	moveq	r3, #0
 800898a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800898c:	4618      	mov	r0, r3
 800898e:	3718      	adds	r7, #24
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	200028cc 	.word	0x200028cc
 8008998:	200025cc 	.word	0x200025cc

0800899c <SD0_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DSTATUS SD0_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	4603      	mov	r3, r0
 80089a4:	603a      	str	r2, [r7, #0]
 80089a6:	71fb      	strb	r3, [r7, #7]
 80089a8:	460b      	mov	r3, r1
 80089aa:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(0);
 80089ac:	2000      	movs	r0, #0
 80089ae:	f7fb fc01 	bl	80041b4 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 80089b2:	79b9      	ldrb	r1, [r7, #6]
 80089b4:	79fb      	ldrb	r3, [r7, #7]
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	4618      	mov	r0, r3
 80089ba:	f000 f847 	bl	8008a4c <USER_ioctl>
 80089be:	4603      	mov	r3, r0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <SD1_ioctl>:
DSTATUS SD1_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	4603      	mov	r3, r0
 80089d0:	603a      	str	r2, [r7, #0]
 80089d2:	71fb      	strb	r3, [r7, #7]
 80089d4:	460b      	mov	r3, r1
 80089d6:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(1);
 80089d8:	2001      	movs	r0, #1
 80089da:	f7fb fbeb 	bl	80041b4 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 80089de:	79b9      	ldrb	r1, [r7, #6]
 80089e0:	79fb      	ldrb	r3, [r7, #7]
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f000 f831 	bl	8008a4c <USER_ioctl>
 80089ea:	4603      	mov	r3, r0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <SD2_ioctl>:
DSTATUS SD2_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	4603      	mov	r3, r0
 80089fc:	603a      	str	r2, [r7, #0]
 80089fe:	71fb      	strb	r3, [r7, #7]
 8008a00:	460b      	mov	r3, r1
 8008a02:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(2);
 8008a04:	2002      	movs	r0, #2
 8008a06:	f7fb fbd5 	bl	80041b4 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 8008a0a:	79b9      	ldrb	r1, [r7, #6]
 8008a0c:	79fb      	ldrb	r3, [r7, #7]
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 f81b 	bl	8008a4c <USER_ioctl>
 8008a16:	4603      	mov	r3, r0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <SD3_ioctl>:
DSTATUS SD3_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	4603      	mov	r3, r0
 8008a28:	603a      	str	r2, [r7, #0]
 8008a2a:	71fb      	strb	r3, [r7, #7]
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(3);
 8008a30:	2003      	movs	r0, #3
 8008a32:	f7fb fbbf 	bl	80041b4 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 8008a36:	79b9      	ldrb	r1, [r7, #6]
 8008a38:	79fb      	ldrb	r3, [r7, #7]
 8008a3a:	683a      	ldr	r2, [r7, #0]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f000 f805 	bl	8008a4c <USER_ioctl>
 8008a42:	4603      	mov	r3, r0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	4603      	mov	r3, r0
 8008a54:	603a      	str	r2, [r7, #0]
 8008a56:	71fb      	strb	r3, [r7, #7]
 8008a58:	460b      	mov	r3, r1
 8008a5a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res;

	SS_SD_SELECT();
 8008a5c:	f7fb fbe8 	bl	8004230 <sd_ss_active_pin_down>
	if (pdrv) return RES_PARERR;
 8008a60:	79fb      	ldrb	r3, [r7, #7]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <USER_ioctl+0x1e>
 8008a66:	2304      	movs	r3, #4
 8008a68:	e028      	b.n	8008abc <USER_ioctl+0x70>
	if (*Stat & STA_NOINIT) return RES_NOTRDY;
 8008a6a:	4b16      	ldr	r3, [pc, #88]	; (8008ac4 <USER_ioctl+0x78>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	f003 0301 	and.w	r3, r3, #1
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d001      	beq.n	8008a7c <USER_ioctl+0x30>
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e01f      	b.n	8008abc <USER_ioctl+0x70>
	res = RES_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	73fb      	strb	r3, [r7, #15]
	switch (cmd)
 8008a80:	79bb      	ldrb	r3, [r7, #6]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d002      	beq.n	8008a8c <USER_ioctl+0x40>
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d008      	beq.n	8008a9c <USER_ioctl+0x50>
 8008a8a:	e00e      	b.n	8008aaa <USER_ioctl+0x5e>
	{
	  case CTRL_SYNC : /* Flush dirty buffer if present */
	    //SS_SD_SELECT();
	    if (SPI_wait_ready() == 0xFF)
 8008a8c:	f7fb fd12 	bl	80044b4 <SPI_wait_ready>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2bff      	cmp	r3, #255	; 0xff
 8008a94:	d10c      	bne.n	8008ab0 <USER_ioctl+0x64>
	    res = RES_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	73fb      	strb	r3, [r7, #15]
	    break;
 8008a9a:	e009      	b.n	8008ab0 <USER_ioctl+0x64>
	  case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
	    *(WORD*)buff = 512;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008aa2:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	73fb      	strb	r3, [r7, #15]
	    break;
 8008aa8:	e003      	b.n	8008ab2 <USER_ioctl+0x66>
	  default:
	    res = RES_PARERR;
 8008aaa:	2304      	movs	r3, #4
 8008aac:	73fb      	strb	r3, [r7, #15]
 8008aae:	e000      	b.n	8008ab2 <USER_ioctl+0x66>
	    break;
 8008ab0:	bf00      	nop
	}
	SPI_Release();
 8008ab2:	f7fb fd75 	bl	80045a0 <SPI_Release>
	SS_SD_DESELECT();
 8008ab6:	f7fb fbcb 	bl	8004250 <sd_ss_active_pin_up>
    return res;
 8008aba:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	200028cc 	.word	0x200028cc

08008ac8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	4603      	mov	r3, r0
 8008ad0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008ad2:	79fb      	ldrb	r3, [r7, #7]
 8008ad4:	4a08      	ldr	r2, [pc, #32]	; (8008af8 <disk_status+0x30>)
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	4413      	add	r3, r2
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	79fa      	ldrb	r2, [r7, #7]
 8008ae0:	4905      	ldr	r1, [pc, #20]	; (8008af8 <disk_status+0x30>)
 8008ae2:	440a      	add	r2, r1
 8008ae4:	7d12      	ldrb	r2, [r2, #20]
 8008ae6:	4610      	mov	r0, r2
 8008ae8:	4798      	blx	r3
 8008aea:	4603      	mov	r3, r0
 8008aec:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	20002d64 	.word	0x20002d64

08008afc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	4603      	mov	r3, r0
 8008b04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008b0a:	79fb      	ldrb	r3, [r7, #7]
 8008b0c:	4a0e      	ldr	r2, [pc, #56]	; (8008b48 <disk_initialize+0x4c>)
 8008b0e:	5cd3      	ldrb	r3, [r2, r3]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d114      	bne.n	8008b3e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008b14:	79fb      	ldrb	r3, [r7, #7]
 8008b16:	4a0c      	ldr	r2, [pc, #48]	; (8008b48 <disk_initialize+0x4c>)
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	79fa      	ldrb	r2, [r7, #7]
 8008b22:	4909      	ldr	r1, [pc, #36]	; (8008b48 <disk_initialize+0x4c>)
 8008b24:	440a      	add	r2, r1
 8008b26:	7d12      	ldrb	r2, [r2, #20]
 8008b28:	4610      	mov	r0, r2
 8008b2a:	4798      	blx	r3
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	73fb      	strb	r3, [r7, #15]
    if(stat==RES_OK){
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d103      	bne.n	8008b3e <disk_initialize+0x42>
    	disk.is_initialized[pdrv] = 1;
 8008b36:	79fb      	ldrb	r3, [r7, #7]
 8008b38:	4a03      	ldr	r2, [pc, #12]	; (8008b48 <disk_initialize+0x4c>)
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8008b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	20002d64 	.word	0x20002d64

08008b4c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008b4c:	b590      	push	{r4, r7, lr}
 8008b4e:	b087      	sub	sp, #28
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60b9      	str	r1, [r7, #8]
 8008b54:	607a      	str	r2, [r7, #4]
 8008b56:	603b      	str	r3, [r7, #0]
 8008b58:	4603      	mov	r3, r0
 8008b5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	4a0a      	ldr	r2, [pc, #40]	; (8008b88 <disk_read+0x3c>)
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	689c      	ldr	r4, [r3, #8]
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
 8008b6a:	4a07      	ldr	r2, [pc, #28]	; (8008b88 <disk_read+0x3c>)
 8008b6c:	4413      	add	r3, r2
 8008b6e:	7d18      	ldrb	r0, [r3, #20]
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	68b9      	ldr	r1, [r7, #8]
 8008b76:	47a0      	blx	r4
 8008b78:	4603      	mov	r3, r0
 8008b7a:	75fb      	strb	r3, [r7, #23]
  return res;
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	371c      	adds	r7, #28
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd90      	pop	{r4, r7, pc}
 8008b86:	bf00      	nop
 8008b88:	20002d64 	.word	0x20002d64

08008b8c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008b8c:	b590      	push	{r4, r7, lr}
 8008b8e:	b087      	sub	sp, #28
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60b9      	str	r1, [r7, #8]
 8008b94:	607a      	str	r2, [r7, #4]
 8008b96:	603b      	str	r3, [r7, #0]
 8008b98:	4603      	mov	r3, r0
 8008b9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
 8008b9e:	4a0a      	ldr	r2, [pc, #40]	; (8008bc8 <disk_write+0x3c>)
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	4413      	add	r3, r2
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	68dc      	ldr	r4, [r3, #12]
 8008ba8:	7bfb      	ldrb	r3, [r7, #15]
 8008baa:	4a07      	ldr	r2, [pc, #28]	; (8008bc8 <disk_write+0x3c>)
 8008bac:	4413      	add	r3, r2
 8008bae:	7d18      	ldrb	r0, [r3, #20]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	68b9      	ldr	r1, [r7, #8]
 8008bb6:	47a0      	blx	r4
 8008bb8:	4603      	mov	r3, r0
 8008bba:	75fb      	strb	r3, [r7, #23]
  return res;
 8008bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	371c      	adds	r7, #28
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd90      	pop	{r4, r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	20002d64 	.word	0x20002d64

08008bcc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	603a      	str	r2, [r7, #0]
 8008bd6:	71fb      	strb	r3, [r7, #7]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008bdc:	79fb      	ldrb	r3, [r7, #7]
 8008bde:	4a09      	ldr	r2, [pc, #36]	; (8008c04 <disk_ioctl+0x38>)
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4413      	add	r3, r2
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	79fa      	ldrb	r2, [r7, #7]
 8008bea:	4906      	ldr	r1, [pc, #24]	; (8008c04 <disk_ioctl+0x38>)
 8008bec:	440a      	add	r2, r1
 8008bee:	7d10      	ldrb	r0, [r2, #20]
 8008bf0:	79b9      	ldrb	r1, [r7, #6]
 8008bf2:	683a      	ldr	r2, [r7, #0]
 8008bf4:	4798      	blx	r3
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	73fb      	strb	r3, [r7, #15]
  return res;
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	20002d64 	.word	0x20002d64

08008c08 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	3301      	adds	r3, #1
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008c18:	89fb      	ldrh	r3, [r7, #14]
 8008c1a:	021b      	lsls	r3, r3, #8
 8008c1c:	b21a      	sxth	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	b21b      	sxth	r3, r3
 8008c24:	4313      	orrs	r3, r2
 8008c26:	b21b      	sxth	r3, r3
 8008c28:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008c2a:	89fb      	ldrh	r3, [r7, #14]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3714      	adds	r7, #20
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bc80      	pop	{r7}
 8008c34:	4770      	bx	lr

08008c36 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008c36:	b480      	push	{r7}
 8008c38:	b085      	sub	sp, #20
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	3303      	adds	r3, #3
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	021b      	lsls	r3, r3, #8
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	3202      	adds	r2, #2
 8008c4e:	7812      	ldrb	r2, [r2, #0]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	021b      	lsls	r3, r3, #8
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	3201      	adds	r2, #1
 8008c5c:	7812      	ldrb	r2, [r2, #0]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	021b      	lsls	r3, r3, #8
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	7812      	ldrb	r2, [r2, #0]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	60fb      	str	r3, [r7, #12]
	return rv;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3714      	adds	r7, #20
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bc80      	pop	{r7}
 8008c78:	4770      	bx	lr

08008c7a <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8008c7a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008c7e:	b09d      	sub	sp, #116	; 0x74
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 8008c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c86:	3307      	adds	r3, #7
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	469a      	mov	sl, r3
 8008c90:	4693      	mov	fp, r2
 8008c92:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 8008c96:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008c9a:	f04f 0000 	mov.w	r0, #0
 8008c9e:	f04f 0100 	mov.w	r1, #0
 8008ca2:	0219      	lsls	r1, r3, #8
 8008ca4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008ca8:	0210      	lsls	r0, r2, #8
 8008caa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cac:	3306      	adds	r3, #6
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	461c      	mov	r4, r3
 8008cb6:	4615      	mov	r5, r2
 8008cb8:	ea40 0804 	orr.w	r8, r0, r4
 8008cbc:	ea41 0905 	orr.w	r9, r1, r5
 8008cc0:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 8008cc4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008cc8:	f04f 0000 	mov.w	r0, #0
 8008ccc:	f04f 0100 	mov.w	r1, #0
 8008cd0:	0219      	lsls	r1, r3, #8
 8008cd2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008cd6:	0210      	lsls	r0, r2, #8
 8008cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cda:	3305      	adds	r3, #5
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ce4:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008ce6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8008cea:	461a      	mov	r2, r3
 8008cec:	4302      	orrs	r2, r0
 8008cee:	62ba      	str	r2, [r7, #40]	; 0x28
 8008cf0:	4623      	mov	r3, r4
 8008cf2:	430b      	orrs	r3, r1
 8008cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cf6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008cfa:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 8008cfe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008d02:	f04f 0000 	mov.w	r0, #0
 8008d06:	f04f 0100 	mov.w	r1, #0
 8008d0a:	0219      	lsls	r1, r3, #8
 8008d0c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008d10:	0210      	lsls	r0, r2, #8
 8008d12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d14:	3304      	adds	r3, #4
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	653b      	str	r3, [r7, #80]	; 0x50
 8008d1e:	657a      	str	r2, [r7, #84]	; 0x54
 8008d20:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8008d24:	461a      	mov	r2, r3
 8008d26:	4302      	orrs	r2, r0
 8008d28:	623a      	str	r2, [r7, #32]
 8008d2a:	4623      	mov	r3, r4
 8008d2c:	430b      	orrs	r3, r1
 8008d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d30:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008d34:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 8008d38:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008d3c:	f04f 0000 	mov.w	r0, #0
 8008d40:	f04f 0100 	mov.w	r1, #0
 8008d44:	0219      	lsls	r1, r3, #8
 8008d46:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008d4a:	0210      	lsls	r0, r2, #8
 8008d4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d4e:	3303      	adds	r3, #3
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	2200      	movs	r2, #0
 8008d56:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d58:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008d5a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8008d5e:	461a      	mov	r2, r3
 8008d60:	4302      	orrs	r2, r0
 8008d62:	61ba      	str	r2, [r7, #24]
 8008d64:	4623      	mov	r3, r4
 8008d66:	430b      	orrs	r3, r1
 8008d68:	61fb      	str	r3, [r7, #28]
 8008d6a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008d6e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 8008d72:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008d76:	f04f 0000 	mov.w	r0, #0
 8008d7a:	f04f 0100 	mov.w	r1, #0
 8008d7e:	0219      	lsls	r1, r3, #8
 8008d80:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008d84:	0210      	lsls	r0, r2, #8
 8008d86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d88:	3302      	adds	r3, #2
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	2200      	movs	r2, #0
 8008d90:	643b      	str	r3, [r7, #64]	; 0x40
 8008d92:	647a      	str	r2, [r7, #68]	; 0x44
 8008d94:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8008d98:	461a      	mov	r2, r3
 8008d9a:	4302      	orrs	r2, r0
 8008d9c:	613a      	str	r2, [r7, #16]
 8008d9e:	4623      	mov	r3, r4
 8008da0:	430b      	orrs	r3, r1
 8008da2:	617b      	str	r3, [r7, #20]
 8008da4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008da8:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 8008dac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008db0:	f04f 0200 	mov.w	r2, #0
 8008db4:	f04f 0300 	mov.w	r3, #0
 8008db8:	020b      	lsls	r3, r1, #8
 8008dba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008dbe:	0202      	lsls	r2, r0, #8
 8008dc0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008dc2:	3101      	adds	r1, #1
 8008dc4:	7809      	ldrb	r1, [r1, #0]
 8008dc6:	b2c9      	uxtb	r1, r1
 8008dc8:	2000      	movs	r0, #0
 8008dca:	63b9      	str	r1, [r7, #56]	; 0x38
 8008dcc:	63f8      	str	r0, [r7, #60]	; 0x3c
 8008dce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	4314      	orrs	r4, r2
 8008dd6:	60bc      	str	r4, [r7, #8]
 8008dd8:	4319      	orrs	r1, r3
 8008dda:	60f9      	str	r1, [r7, #12]
 8008ddc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008de0:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 8008de4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008de8:	f04f 0200 	mov.w	r2, #0
 8008dec:	f04f 0300 	mov.w	r3, #0
 8008df0:	020b      	lsls	r3, r1, #8
 8008df2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008df6:	0202      	lsls	r2, r0, #8
 8008df8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008dfa:	7809      	ldrb	r1, [r1, #0]
 8008dfc:	b2c9      	uxtb	r1, r1
 8008dfe:	2000      	movs	r0, #0
 8008e00:	6339      	str	r1, [r7, #48]	; 0x30
 8008e02:	6378      	str	r0, [r7, #52]	; 0x34
 8008e04:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008e08:	4604      	mov	r4, r0
 8008e0a:	4314      	orrs	r4, r2
 8008e0c:	603c      	str	r4, [r7, #0]
 8008e0e:	4319      	orrs	r1, r3
 8008e10:	6079      	str	r1, [r7, #4]
 8008e12:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008e16:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 8008e1a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 8008e1e:	4610      	mov	r0, r2
 8008e20:	4619      	mov	r1, r3
 8008e22:	3774      	adds	r7, #116	; 0x74
 8008e24:	46bd      	mov	sp, r7
 8008e26:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008e2a:	4770      	bx	lr

08008e2c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	460b      	mov	r3, r1
 8008e36:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	1c5a      	adds	r2, r3, #1
 8008e3c:	607a      	str	r2, [r7, #4]
 8008e3e:	887a      	ldrh	r2, [r7, #2]
 8008e40:	b2d2      	uxtb	r2, r2
 8008e42:	701a      	strb	r2, [r3, #0]
 8008e44:	887b      	ldrh	r3, [r7, #2]
 8008e46:	0a1b      	lsrs	r3, r3, #8
 8008e48:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	1c5a      	adds	r2, r3, #1
 8008e4e:	607a      	str	r2, [r7, #4]
 8008e50:	887a      	ldrh	r2, [r7, #2]
 8008e52:	b2d2      	uxtb	r2, r2
 8008e54:	701a      	strb	r2, [r3, #0]
}
 8008e56:	bf00      	nop
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bc80      	pop	{r7}
 8008e5e:	4770      	bx	lr

08008e60 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	1c5a      	adds	r2, r3, #1
 8008e6e:	607a      	str	r2, [r7, #4]
 8008e70:	683a      	ldr	r2, [r7, #0]
 8008e72:	b2d2      	uxtb	r2, r2
 8008e74:	701a      	strb	r2, [r3, #0]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	0a1b      	lsrs	r3, r3, #8
 8008e7a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	1c5a      	adds	r2, r3, #1
 8008e80:	607a      	str	r2, [r7, #4]
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	b2d2      	uxtb	r2, r2
 8008e86:	701a      	strb	r2, [r3, #0]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	0a1b      	lsrs	r3, r3, #8
 8008e8c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	1c5a      	adds	r2, r3, #1
 8008e92:	607a      	str	r2, [r7, #4]
 8008e94:	683a      	ldr	r2, [r7, #0]
 8008e96:	b2d2      	uxtb	r2, r2
 8008e98:	701a      	strb	r2, [r3, #0]
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	0a1b      	lsrs	r3, r3, #8
 8008e9e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	1c5a      	adds	r2, r3, #1
 8008ea4:	607a      	str	r2, [r7, #4]
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	b2d2      	uxtb	r2, r2
 8008eaa:	701a      	strb	r2, [r3, #0]
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bc80      	pop	{r7}
 8008eb4:	4770      	bx	lr

08008eb6 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	b085      	sub	sp, #20
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	60f8      	str	r0, [r7, #12]
 8008ebe:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	1c5a      	adds	r2, r3, #1
 8008ec6:	60fa      	str	r2, [r7, #12]
 8008ec8:	783a      	ldrb	r2, [r7, #0]
 8008eca:	701a      	strb	r2, [r3, #0]
 8008ecc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ed0:	f04f 0200 	mov.w	r2, #0
 8008ed4:	f04f 0300 	mov.w	r3, #0
 8008ed8:	0a02      	lsrs	r2, r0, #8
 8008eda:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008ede:	0a0b      	lsrs	r3, r1, #8
 8008ee0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	1c5a      	adds	r2, r3, #1
 8008ee8:	60fa      	str	r2, [r7, #12]
 8008eea:	783a      	ldrb	r2, [r7, #0]
 8008eec:	701a      	strb	r2, [r3, #0]
 8008eee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ef2:	f04f 0200 	mov.w	r2, #0
 8008ef6:	f04f 0300 	mov.w	r3, #0
 8008efa:	0a02      	lsrs	r2, r0, #8
 8008efc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008f00:	0a0b      	lsrs	r3, r1, #8
 8008f02:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	1c5a      	adds	r2, r3, #1
 8008f0a:	60fa      	str	r2, [r7, #12]
 8008f0c:	783a      	ldrb	r2, [r7, #0]
 8008f0e:	701a      	strb	r2, [r3, #0]
 8008f10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f14:	f04f 0200 	mov.w	r2, #0
 8008f18:	f04f 0300 	mov.w	r3, #0
 8008f1c:	0a02      	lsrs	r2, r0, #8
 8008f1e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008f22:	0a0b      	lsrs	r3, r1, #8
 8008f24:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	1c5a      	adds	r2, r3, #1
 8008f2c:	60fa      	str	r2, [r7, #12]
 8008f2e:	783a      	ldrb	r2, [r7, #0]
 8008f30:	701a      	strb	r2, [r3, #0]
 8008f32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f36:	f04f 0200 	mov.w	r2, #0
 8008f3a:	f04f 0300 	mov.w	r3, #0
 8008f3e:	0a02      	lsrs	r2, r0, #8
 8008f40:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008f44:	0a0b      	lsrs	r3, r1, #8
 8008f46:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	1c5a      	adds	r2, r3, #1
 8008f4e:	60fa      	str	r2, [r7, #12]
 8008f50:	783a      	ldrb	r2, [r7, #0]
 8008f52:	701a      	strb	r2, [r3, #0]
 8008f54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f58:	f04f 0200 	mov.w	r2, #0
 8008f5c:	f04f 0300 	mov.w	r3, #0
 8008f60:	0a02      	lsrs	r2, r0, #8
 8008f62:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008f66:	0a0b      	lsrs	r3, r1, #8
 8008f68:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	1c5a      	adds	r2, r3, #1
 8008f70:	60fa      	str	r2, [r7, #12]
 8008f72:	783a      	ldrb	r2, [r7, #0]
 8008f74:	701a      	strb	r2, [r3, #0]
 8008f76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f7a:	f04f 0200 	mov.w	r2, #0
 8008f7e:	f04f 0300 	mov.w	r3, #0
 8008f82:	0a02      	lsrs	r2, r0, #8
 8008f84:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008f88:	0a0b      	lsrs	r3, r1, #8
 8008f8a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	1c5a      	adds	r2, r3, #1
 8008f92:	60fa      	str	r2, [r7, #12]
 8008f94:	783a      	ldrb	r2, [r7, #0]
 8008f96:	701a      	strb	r2, [r3, #0]
 8008f98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f9c:	f04f 0200 	mov.w	r2, #0
 8008fa0:	f04f 0300 	mov.w	r3, #0
 8008fa4:	0a02      	lsrs	r2, r0, #8
 8008fa6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008faa:	0a0b      	lsrs	r3, r1, #8
 8008fac:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	1c5a      	adds	r2, r3, #1
 8008fb4:	60fa      	str	r2, [r7, #12]
 8008fb6:	783a      	ldrb	r2, [r7, #0]
 8008fb8:	701a      	strb	r2, [r3, #0]
}
 8008fba:	bf00      	nop
 8008fbc:	3714      	adds	r7, #20
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bc80      	pop	{r7}
 8008fc2:	4770      	bx	lr

08008fc4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008fc4:	b480      	push	{r7}
 8008fc6:	b087      	sub	sp, #28
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00d      	beq.n	8008ffa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	1c53      	adds	r3, r2, #1
 8008fe2:	613b      	str	r3, [r7, #16]
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	1c59      	adds	r1, r3, #1
 8008fe8:	6179      	str	r1, [r7, #20]
 8008fea:	7812      	ldrb	r2, [r2, #0]
 8008fec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	607b      	str	r3, [r7, #4]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1f1      	bne.n	8008fde <mem_cpy+0x1a>
	}
}
 8008ffa:	bf00      	nop
 8008ffc:	371c      	adds	r7, #28
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bc80      	pop	{r7}
 8009002:	4770      	bx	lr

08009004 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009004:	b480      	push	{r7}
 8009006:	b087      	sub	sp, #28
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	1c5a      	adds	r2, r3, #1
 8009018:	617a      	str	r2, [r7, #20]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	b2d2      	uxtb	r2, r2
 800901e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3b01      	subs	r3, #1
 8009024:	607b      	str	r3, [r7, #4]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1f3      	bne.n	8009014 <mem_set+0x10>
}
 800902c:	bf00      	nop
 800902e:	bf00      	nop
 8009030:	371c      	adds	r7, #28
 8009032:	46bd      	mov	sp, r7
 8009034:	bc80      	pop	{r7}
 8009036:	4770      	bx	lr

08009038 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009038:	b480      	push	{r7}
 800903a:	b089      	sub	sp, #36	; 0x24
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	61fb      	str	r3, [r7, #28]
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800904c:	2300      	movs	r3, #0
 800904e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	1c5a      	adds	r2, r3, #1
 8009054:	61fa      	str	r2, [r7, #28]
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	4619      	mov	r1, r3
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	1c5a      	adds	r2, r3, #1
 800905e:	61ba      	str	r2, [r7, #24]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	1acb      	subs	r3, r1, r3
 8009064:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	3b01      	subs	r3, #1
 800906a:	607b      	str	r3, [r7, #4]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d002      	beq.n	8009078 <mem_cmp+0x40>
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d0eb      	beq.n	8009050 <mem_cmp+0x18>

	return r;
 8009078:	697b      	ldr	r3, [r7, #20]
}
 800907a:	4618      	mov	r0, r3
 800907c:	3724      	adds	r7, #36	; 0x24
 800907e:	46bd      	mov	sp, r7
 8009080:	bc80      	pop	{r7}
 8009082:	4770      	bx	lr

08009084 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800908e:	e002      	b.n	8009096 <chk_chr+0x12>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	3301      	adds	r3, #1
 8009094:	607b      	str	r3, [r7, #4]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d005      	beq.n	80090aa <chk_chr+0x26>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	461a      	mov	r2, r3
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d1f2      	bne.n	8009090 <chk_chr+0xc>
	return *str;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	781b      	ldrb	r3, [r3, #0]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	370c      	adds	r7, #12
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bc80      	pop	{r7}
 80090b6:	4770      	bx	lr

080090b8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80090c2:	2300      	movs	r3, #0
 80090c4:	60bb      	str	r3, [r7, #8]
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	60fb      	str	r3, [r7, #12]
 80090ca:	e029      	b.n	8009120 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80090cc:	4a26      	ldr	r2, [pc, #152]	; (8009168 <chk_lock+0xb0>)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	011b      	lsls	r3, r3, #4
 80090d2:	4413      	add	r3, r2
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d01d      	beq.n	8009116 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80090da:	4a23      	ldr	r2, [pc, #140]	; (8009168 <chk_lock+0xb0>)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	011b      	lsls	r3, r3, #4
 80090e0:	4413      	add	r3, r2
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d116      	bne.n	800911a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80090ec:	4a1e      	ldr	r2, [pc, #120]	; (8009168 <chk_lock+0xb0>)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	011b      	lsls	r3, r3, #4
 80090f2:	4413      	add	r3, r2
 80090f4:	3304      	adds	r3, #4
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d10c      	bne.n	800911a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009100:	4a19      	ldr	r2, [pc, #100]	; (8009168 <chk_lock+0xb0>)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	011b      	lsls	r3, r3, #4
 8009106:	4413      	add	r3, r2
 8009108:	3308      	adds	r3, #8
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8009110:	429a      	cmp	r2, r3
 8009112:	d102      	bne.n	800911a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009114:	e007      	b.n	8009126 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009116:	2301      	movs	r3, #1
 8009118:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	3301      	adds	r3, #1
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d9d2      	bls.n	80090cc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2b02      	cmp	r3, #2
 800912a:	d109      	bne.n	8009140 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d102      	bne.n	8009138 <chk_lock+0x80>
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	2b02      	cmp	r3, #2
 8009136:	d101      	bne.n	800913c <chk_lock+0x84>
 8009138:	2300      	movs	r3, #0
 800913a:	e010      	b.n	800915e <chk_lock+0xa6>
 800913c:	2312      	movs	r3, #18
 800913e:	e00e      	b.n	800915e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d108      	bne.n	8009158 <chk_lock+0xa0>
 8009146:	4a08      	ldr	r2, [pc, #32]	; (8009168 <chk_lock+0xb0>)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	011b      	lsls	r3, r3, #4
 800914c:	4413      	add	r3, r2
 800914e:	330c      	adds	r3, #12
 8009150:	881b      	ldrh	r3, [r3, #0]
 8009152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009156:	d101      	bne.n	800915c <chk_lock+0xa4>
 8009158:	2310      	movs	r3, #16
 800915a:	e000      	b.n	800915e <chk_lock+0xa6>
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3714      	adds	r7, #20
 8009162:	46bd      	mov	sp, r7
 8009164:	bc80      	pop	{r7}
 8009166:	4770      	bx	lr
 8009168:	200028e4 	.word	0x200028e4

0800916c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009172:	2300      	movs	r3, #0
 8009174:	607b      	str	r3, [r7, #4]
 8009176:	e002      	b.n	800917e <enq_lock+0x12>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	3301      	adds	r3, #1
 800917c:	607b      	str	r3, [r7, #4]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d806      	bhi.n	8009192 <enq_lock+0x26>
 8009184:	4a08      	ldr	r2, [pc, #32]	; (80091a8 <enq_lock+0x3c>)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	011b      	lsls	r3, r3, #4
 800918a:	4413      	add	r3, r2
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1f2      	bne.n	8009178 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2b02      	cmp	r3, #2
 8009196:	bf14      	ite	ne
 8009198:	2301      	movne	r3, #1
 800919a:	2300      	moveq	r3, #0
 800919c:	b2db      	uxtb	r3, r3
}
 800919e:	4618      	mov	r0, r3
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bc80      	pop	{r7}
 80091a6:	4770      	bx	lr
 80091a8:	200028e4 	.word	0x200028e4

080091ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80091b6:	2300      	movs	r3, #0
 80091b8:	60fb      	str	r3, [r7, #12]
 80091ba:	e01f      	b.n	80091fc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80091bc:	4a41      	ldr	r2, [pc, #260]	; (80092c4 <inc_lock+0x118>)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	011b      	lsls	r3, r3, #4
 80091c2:	4413      	add	r3, r2
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d113      	bne.n	80091f6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80091ce:	4a3d      	ldr	r2, [pc, #244]	; (80092c4 <inc_lock+0x118>)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	011b      	lsls	r3, r3, #4
 80091d4:	4413      	add	r3, r2
 80091d6:	3304      	adds	r3, #4
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80091de:	429a      	cmp	r2, r3
 80091e0:	d109      	bne.n	80091f6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80091e2:	4a38      	ldr	r2, [pc, #224]	; (80092c4 <inc_lock+0x118>)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	011b      	lsls	r3, r3, #4
 80091e8:	4413      	add	r3, r2
 80091ea:	3308      	adds	r3, #8
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d006      	beq.n	8009204 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	3301      	adds	r3, #1
 80091fa:	60fb      	str	r3, [r7, #12]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d9dc      	bls.n	80091bc <inc_lock+0x10>
 8009202:	e000      	b.n	8009206 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009204:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2b02      	cmp	r3, #2
 800920a:	d132      	bne.n	8009272 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800920c:	2300      	movs	r3, #0
 800920e:	60fb      	str	r3, [r7, #12]
 8009210:	e002      	b.n	8009218 <inc_lock+0x6c>
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	3301      	adds	r3, #1
 8009216:	60fb      	str	r3, [r7, #12]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2b01      	cmp	r3, #1
 800921c:	d806      	bhi.n	800922c <inc_lock+0x80>
 800921e:	4a29      	ldr	r2, [pc, #164]	; (80092c4 <inc_lock+0x118>)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	011b      	lsls	r3, r3, #4
 8009224:	4413      	add	r3, r2
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1f2      	bne.n	8009212 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2b02      	cmp	r3, #2
 8009230:	d101      	bne.n	8009236 <inc_lock+0x8a>
 8009232:	2300      	movs	r3, #0
 8009234:	e040      	b.n	80092b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	4922      	ldr	r1, [pc, #136]	; (80092c4 <inc_lock+0x118>)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	011b      	lsls	r3, r3, #4
 8009240:	440b      	add	r3, r1
 8009242:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	689a      	ldr	r2, [r3, #8]
 8009248:	491e      	ldr	r1, [pc, #120]	; (80092c4 <inc_lock+0x118>)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	011b      	lsls	r3, r3, #4
 800924e:	440b      	add	r3, r1
 8009250:	3304      	adds	r3, #4
 8009252:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009258:	491a      	ldr	r1, [pc, #104]	; (80092c4 <inc_lock+0x118>)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	011b      	lsls	r3, r3, #4
 800925e:	440b      	add	r3, r1
 8009260:	3308      	adds	r3, #8
 8009262:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009264:	4a17      	ldr	r2, [pc, #92]	; (80092c4 <inc_lock+0x118>)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	011b      	lsls	r3, r3, #4
 800926a:	4413      	add	r3, r2
 800926c:	330c      	adds	r3, #12
 800926e:	2200      	movs	r2, #0
 8009270:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d009      	beq.n	800928c <inc_lock+0xe0>
 8009278:	4a12      	ldr	r2, [pc, #72]	; (80092c4 <inc_lock+0x118>)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	011b      	lsls	r3, r3, #4
 800927e:	4413      	add	r3, r2
 8009280:	330c      	adds	r3, #12
 8009282:	881b      	ldrh	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d001      	beq.n	800928c <inc_lock+0xe0>
 8009288:	2300      	movs	r3, #0
 800928a:	e015      	b.n	80092b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d108      	bne.n	80092a4 <inc_lock+0xf8>
 8009292:	4a0c      	ldr	r2, [pc, #48]	; (80092c4 <inc_lock+0x118>)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	011b      	lsls	r3, r3, #4
 8009298:	4413      	add	r3, r2
 800929a:	330c      	adds	r3, #12
 800929c:	881b      	ldrh	r3, [r3, #0]
 800929e:	3301      	adds	r3, #1
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	e001      	b.n	80092a8 <inc_lock+0xfc>
 80092a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092a8:	4906      	ldr	r1, [pc, #24]	; (80092c4 <inc_lock+0x118>)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	011b      	lsls	r3, r3, #4
 80092ae:	440b      	add	r3, r1
 80092b0:	330c      	adds	r3, #12
 80092b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	3301      	adds	r3, #1
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	bc80      	pop	{r7}
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	200028e4 	.word	0x200028e4

080092c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	3b01      	subs	r3, #1
 80092d4:	607b      	str	r3, [r7, #4]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d825      	bhi.n	8009328 <dec_lock+0x60>
		n = Files[i].ctr;
 80092dc:	4a16      	ldr	r2, [pc, #88]	; (8009338 <dec_lock+0x70>)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	011b      	lsls	r3, r3, #4
 80092e2:	4413      	add	r3, r2
 80092e4:	330c      	adds	r3, #12
 80092e6:	881b      	ldrh	r3, [r3, #0]
 80092e8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80092ea:	89fb      	ldrh	r3, [r7, #14]
 80092ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092f0:	d101      	bne.n	80092f6 <dec_lock+0x2e>
 80092f2:	2300      	movs	r3, #0
 80092f4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80092f6:	89fb      	ldrh	r3, [r7, #14]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d002      	beq.n	8009302 <dec_lock+0x3a>
 80092fc:	89fb      	ldrh	r3, [r7, #14]
 80092fe:	3b01      	subs	r3, #1
 8009300:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009302:	4a0d      	ldr	r2, [pc, #52]	; (8009338 <dec_lock+0x70>)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	011b      	lsls	r3, r3, #4
 8009308:	4413      	add	r3, r2
 800930a:	330c      	adds	r3, #12
 800930c:	89fa      	ldrh	r2, [r7, #14]
 800930e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009310:	89fb      	ldrh	r3, [r7, #14]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d105      	bne.n	8009322 <dec_lock+0x5a>
 8009316:	4a08      	ldr	r2, [pc, #32]	; (8009338 <dec_lock+0x70>)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	011b      	lsls	r3, r3, #4
 800931c:	4413      	add	r3, r2
 800931e:	2200      	movs	r2, #0
 8009320:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009322:	2300      	movs	r3, #0
 8009324:	737b      	strb	r3, [r7, #13]
 8009326:	e001      	b.n	800932c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009328:	2302      	movs	r3, #2
 800932a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800932c:	7b7b      	ldrb	r3, [r7, #13]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3714      	adds	r7, #20
 8009332:	46bd      	mov	sp, r7
 8009334:	bc80      	pop	{r7}
 8009336:	4770      	bx	lr
 8009338:	200028e4 	.word	0x200028e4

0800933c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009344:	2300      	movs	r3, #0
 8009346:	60fb      	str	r3, [r7, #12]
 8009348:	e010      	b.n	800936c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800934a:	4a0d      	ldr	r2, [pc, #52]	; (8009380 <clear_lock+0x44>)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	011b      	lsls	r3, r3, #4
 8009350:	4413      	add	r3, r2
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	429a      	cmp	r2, r3
 8009358:	d105      	bne.n	8009366 <clear_lock+0x2a>
 800935a:	4a09      	ldr	r2, [pc, #36]	; (8009380 <clear_lock+0x44>)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	011b      	lsls	r3, r3, #4
 8009360:	4413      	add	r3, r2
 8009362:	2200      	movs	r2, #0
 8009364:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	3301      	adds	r3, #1
 800936a:	60fb      	str	r3, [r7, #12]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d9eb      	bls.n	800934a <clear_lock+0xe>
	}
}
 8009372:	bf00      	nop
 8009374:	bf00      	nop
 8009376:	3714      	adds	r7, #20
 8009378:	46bd      	mov	sp, r7
 800937a:	bc80      	pop	{r7}
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	200028e4 	.word	0x200028e4

08009384 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	78db      	ldrb	r3, [r3, #3]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d034      	beq.n	8009402 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800939c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	7858      	ldrb	r0, [r3, #1]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80093a8:	2301      	movs	r3, #1
 80093aa:	697a      	ldr	r2, [r7, #20]
 80093ac:	f7ff fbee 	bl	8008b8c <disk_write>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d002      	beq.n	80093bc <sync_window+0x38>
			res = FR_DISK_ERR;
 80093b6:	2301      	movs	r3, #1
 80093b8:	73fb      	strb	r3, [r7, #15]
 80093ba:	e022      	b.n	8009402 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c6:	697a      	ldr	r2, [r7, #20]
 80093c8:	1ad2      	subs	r2, r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a1b      	ldr	r3, [r3, #32]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d217      	bcs.n	8009402 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	789b      	ldrb	r3, [r3, #2]
 80093d6:	613b      	str	r3, [r7, #16]
 80093d8:	e010      	b.n	80093fc <sync_window+0x78>
					wsect += fs->fsize;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a1b      	ldr	r3, [r3, #32]
 80093de:	697a      	ldr	r2, [r7, #20]
 80093e0:	4413      	add	r3, r2
 80093e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	7858      	ldrb	r0, [r3, #1]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80093ee:	2301      	movs	r3, #1
 80093f0:	697a      	ldr	r2, [r7, #20]
 80093f2:	f7ff fbcb 	bl	8008b8c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	3b01      	subs	r3, #1
 80093fa:	613b      	str	r3, [r7, #16]
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d8eb      	bhi.n	80093da <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009402:	7bfb      	ldrb	r3, [r7, #15]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3718      	adds	r7, #24
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800941e:	683a      	ldr	r2, [r7, #0]
 8009420:	429a      	cmp	r2, r3
 8009422:	d01b      	beq.n	800945c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7ff ffad 	bl	8009384 <sync_window>
 800942a:	4603      	mov	r3, r0
 800942c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800942e:	7bfb      	ldrb	r3, [r7, #15]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d113      	bne.n	800945c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	7858      	ldrb	r0, [r3, #1]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800943e:	2301      	movs	r3, #1
 8009440:	683a      	ldr	r2, [r7, #0]
 8009442:	f7ff fb83 	bl	8008b4c <disk_read>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d004      	beq.n	8009456 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800944c:	f04f 33ff 	mov.w	r3, #4294967295
 8009450:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009452:	2301      	movs	r3, #1
 8009454:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	683a      	ldr	r2, [r7, #0]
 800945a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800945c:	7bfb      	ldrb	r3, [r7, #15]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
	...

08009468 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7ff ff87 	bl	8009384 <sync_window>
 8009476:	4603      	mov	r3, r0
 8009478:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800947a:	7bfb      	ldrb	r3, [r7, #15]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d158      	bne.n	8009532 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	2b03      	cmp	r3, #3
 8009486:	d148      	bne.n	800951a <sync_fs+0xb2>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	791b      	ldrb	r3, [r3, #4]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d144      	bne.n	800951a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	3338      	adds	r3, #56	; 0x38
 8009494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009498:	2100      	movs	r1, #0
 800949a:	4618      	mov	r0, r3
 800949c:	f7ff fdb2 	bl	8009004 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	3338      	adds	r3, #56	; 0x38
 80094a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80094a8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7ff fcbd 	bl	8008e2c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	3338      	adds	r3, #56	; 0x38
 80094b6:	4921      	ldr	r1, [pc, #132]	; (800953c <sync_fs+0xd4>)
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7ff fcd1 	bl	8008e60 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	3338      	adds	r3, #56	; 0x38
 80094c2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80094c6:	491e      	ldr	r1, [pc, #120]	; (8009540 <sync_fs+0xd8>)
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7ff fcc9 	bl	8008e60 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	3338      	adds	r3, #56	; 0x38
 80094d2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	4619      	mov	r1, r3
 80094dc:	4610      	mov	r0, r2
 80094de:	f7ff fcbf 	bl	8008e60 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	3338      	adds	r3, #56	; 0x38
 80094e6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	4619      	mov	r1, r3
 80094f0:	4610      	mov	r0, r2
 80094f2:	f7ff fcb5 	bl	8008e60 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fa:	1c5a      	adds	r2, r3, #1
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	7858      	ldrb	r0, [r3, #1]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800950e:	2301      	movs	r3, #1
 8009510:	f7ff fb3c 	bl	8008b8c <disk_write>
			fs->fsi_flag = 0;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	785b      	ldrb	r3, [r3, #1]
 800951e:	2200      	movs	r2, #0
 8009520:	2100      	movs	r1, #0
 8009522:	4618      	mov	r0, r3
 8009524:	f7ff fb52 	bl	8008bcc <disk_ioctl>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <sync_fs+0xca>
 800952e:	2301      	movs	r3, #1
 8009530:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009532:	7bfb      	ldrb	r3, [r7, #15]
}
 8009534:	4618      	mov	r0, r3
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	41615252 	.word	0x41615252
 8009540:	61417272 	.word	0x61417272

08009544 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	3b02      	subs	r3, #2
 8009552:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	69db      	ldr	r3, [r3, #28]
 8009558:	3b02      	subs	r3, #2
 800955a:	683a      	ldr	r2, [r7, #0]
 800955c:	429a      	cmp	r2, r3
 800955e:	d301      	bcc.n	8009564 <clust2sect+0x20>
 8009560:	2300      	movs	r3, #0
 8009562:	e008      	b.n	8009576 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	895b      	ldrh	r3, [r3, #10]
 8009568:	461a      	mov	r2, r3
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	fb03 f202 	mul.w	r2, r3, r2
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009574:	4413      	add	r3, r2
}
 8009576:	4618      	mov	r0, r3
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	bc80      	pop	{r7}
 800957e:	4770      	bx	lr

08009580 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b088      	sub	sp, #32
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800958a:	6879      	ldr	r1, [r7, #4]
 800958c:	6809      	ldr	r1, [r1, #0]
 800958e:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009590:	6839      	ldr	r1, [r7, #0]
 8009592:	2901      	cmp	r1, #1
 8009594:	d904      	bls.n	80095a0 <get_fat+0x20>
 8009596:	69b9      	ldr	r1, [r7, #24]
 8009598:	69c9      	ldr	r1, [r1, #28]
 800959a:	6838      	ldr	r0, [r7, #0]
 800959c:	4288      	cmp	r0, r1
 800959e:	d302      	bcc.n	80095a6 <get_fat+0x26>
		val = 1;	/* Internal error */
 80095a0:	2301      	movs	r3, #1
 80095a2:	61fb      	str	r3, [r7, #28]
 80095a4:	e101      	b.n	80097aa <get_fat+0x22a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80095a6:	f04f 31ff 	mov.w	r1, #4294967295
 80095aa:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 80095ac:	69b9      	ldr	r1, [r7, #24]
 80095ae:	7809      	ldrb	r1, [r1, #0]
 80095b0:	3901      	subs	r1, #1
 80095b2:	2903      	cmp	r1, #3
 80095b4:	f200 80ed 	bhi.w	8009792 <get_fat+0x212>
 80095b8:	a001      	add	r0, pc, #4	; (adr r0, 80095c0 <get_fat+0x40>)
 80095ba:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80095be:	bf00      	nop
 80095c0:	080095d1 	.word	0x080095d1
 80095c4:	08009659 	.word	0x08009659
 80095c8:	0800968f 	.word	0x0800968f
 80095cc:	080096c7 	.word	0x080096c7
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	60fb      	str	r3, [r7, #12]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	085b      	lsrs	r3, r3, #1
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	4413      	add	r3, r2
 80095dc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	0a5b      	lsrs	r3, r3, #9
 80095e6:	4413      	add	r3, r2
 80095e8:	4619      	mov	r1, r3
 80095ea:	69b8      	ldr	r0, [r7, #24]
 80095ec:	f7ff ff0e 	bl	800940c <move_window>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f040 80d0 	bne.w	8009798 <get_fat+0x218>
			wc = fs->win[bc++ % SS(fs)];
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	1c5a      	adds	r2, r3, #1
 80095fc:	60fa      	str	r2, [r7, #12]
 80095fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009602:	69ba      	ldr	r2, [r7, #24]
 8009604:	4413      	add	r3, r2
 8009606:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800960a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	0a5b      	lsrs	r3, r3, #9
 8009614:	4413      	add	r3, r2
 8009616:	4619      	mov	r1, r3
 8009618:	69b8      	ldr	r0, [r7, #24]
 800961a:	f7ff fef7 	bl	800940c <move_window>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	f040 80bb 	bne.w	800979c <get_fat+0x21c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800962c:	69ba      	ldr	r2, [r7, #24]
 800962e:	4413      	add	r3, r2
 8009630:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009634:	021b      	lsls	r3, r3, #8
 8009636:	461a      	mov	r2, r3
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	4313      	orrs	r3, r2
 800963c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	f003 0301 	and.w	r3, r3, #1
 8009644:	2b00      	cmp	r3, #0
 8009646:	d002      	beq.n	800964e <get_fat+0xce>
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	091b      	lsrs	r3, r3, #4
 800964c:	e002      	b.n	8009654 <get_fat+0xd4>
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009654:	61fb      	str	r3, [r7, #28]
			break;
 8009656:	e0a8      	b.n	80097aa <get_fat+0x22a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	0a1b      	lsrs	r3, r3, #8
 8009660:	4413      	add	r3, r2
 8009662:	4619      	mov	r1, r3
 8009664:	69b8      	ldr	r0, [r7, #24]
 8009666:	f7ff fed1 	bl	800940c <move_window>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	f040 8097 	bne.w	80097a0 <get_fat+0x220>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	005b      	lsls	r3, r3, #1
 800967c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009680:	4413      	add	r3, r2
 8009682:	4618      	mov	r0, r3
 8009684:	f7ff fac0 	bl	8008c08 <ld_word>
 8009688:	4603      	mov	r3, r0
 800968a:	61fb      	str	r3, [r7, #28]
			break;
 800968c:	e08d      	b.n	80097aa <get_fat+0x22a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	09db      	lsrs	r3, r3, #7
 8009696:	4413      	add	r3, r2
 8009698:	4619      	mov	r1, r3
 800969a:	69b8      	ldr	r0, [r7, #24]
 800969c:	f7ff feb6 	bl	800940c <move_window>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d17e      	bne.n	80097a4 <get_fat+0x224>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80096b4:	4413      	add	r3, r2
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7ff fabd 	bl	8008c36 <ld_dword>
 80096bc:	4603      	mov	r3, r0
 80096be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80096c2:	61fb      	str	r3, [r7, #28]
			break;
 80096c4:	e071      	b.n	80097aa <get_fat+0x22a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 80096c6:	6879      	ldr	r1, [r7, #4]
 80096c8:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80096cc:	4301      	orrs	r1, r0
 80096ce:	d060      	beq.n	8009792 <get_fat+0x212>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80096d0:	6879      	ldr	r1, [r7, #4]
 80096d2:	6889      	ldr	r1, [r1, #8]
 80096d4:	6838      	ldr	r0, [r7, #0]
 80096d6:	1a41      	subs	r1, r0, r1
 80096d8:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80096da:	6879      	ldr	r1, [r7, #4]
 80096dc:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80096e0:	1e42      	subs	r2, r0, #1
 80096e2:	f141 33ff 	adc.w	r3, r1, #4294967295
 80096e6:	f04f 0000 	mov.w	r0, #0
 80096ea:	f04f 0100 	mov.w	r1, #0
 80096ee:	0a50      	lsrs	r0, r2, #9
 80096f0:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80096f4:	0a59      	lsrs	r1, r3, #9
 80096f6:	4602      	mov	r2, r0
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	895b      	ldrh	r3, [r3, #10]
 80096fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009700:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	79db      	ldrb	r3, [r3, #7]
 8009706:	2b02      	cmp	r3, #2
 8009708:	d10e      	bne.n	8009728 <get_fat+0x1a8>
					if (cofs <= clen) {
 800970a:	697a      	ldr	r2, [r7, #20]
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	429a      	cmp	r2, r3
 8009710:	d80a      	bhi.n	8009728 <get_fat+0x1a8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	429a      	cmp	r2, r3
 8009718:	d002      	beq.n	8009720 <get_fat+0x1a0>
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	3301      	adds	r3, #1
 800971e:	e001      	b.n	8009724 <get_fat+0x1a4>
 8009720:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009724:	61fb      	str	r3, [r7, #28]
						break;
 8009726:	e040      	b.n	80097aa <get_fat+0x22a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	79db      	ldrb	r3, [r3, #7]
 800972c:	2b03      	cmp	r3, #3
 800972e:	d108      	bne.n	8009742 <get_fat+0x1c2>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	697a      	ldr	r2, [r7, #20]
 8009736:	429a      	cmp	r2, r3
 8009738:	d203      	bcs.n	8009742 <get_fat+0x1c2>
					val = clst + 1; 	/* Generate the value */
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	3301      	adds	r3, #1
 800973e:	61fb      	str	r3, [r7, #28]
					break;
 8009740:	e033      	b.n	80097aa <get_fat+0x22a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	79db      	ldrb	r3, [r3, #7]
 8009746:	2b02      	cmp	r3, #2
 8009748:	d023      	beq.n	8009792 <get_fat+0x212>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	69db      	ldr	r3, [r3, #28]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d003      	beq.n	800975a <get_fat+0x1da>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8009752:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009756:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8009758:	e027      	b.n	80097aa <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	09db      	lsrs	r3, r3, #7
 8009762:	4413      	add	r3, r2
 8009764:	4619      	mov	r1, r3
 8009766:	69b8      	ldr	r0, [r7, #24]
 8009768:	f7ff fe50 	bl	800940c <move_window>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d11a      	bne.n	80097a8 <get_fat+0x228>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009780:	4413      	add	r3, r2
 8009782:	4618      	mov	r0, r3
 8009784:	f7ff fa57 	bl	8008c36 <ld_dword>
 8009788:	4603      	mov	r3, r0
 800978a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800978e:	61fb      	str	r3, [r7, #28]
					break;
 8009790:	e00b      	b.n	80097aa <get_fat+0x22a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009792:	2301      	movs	r3, #1
 8009794:	61fb      	str	r3, [r7, #28]
 8009796:	e008      	b.n	80097aa <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009798:	bf00      	nop
 800979a:	e006      	b.n	80097aa <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800979c:	bf00      	nop
 800979e:	e004      	b.n	80097aa <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80097a0:	bf00      	nop
 80097a2:	e002      	b.n	80097aa <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80097a4:	bf00      	nop
 80097a6:	e000      	b.n	80097aa <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80097a8:	bf00      	nop
		}
	}

	return val;
 80097aa:	69fb      	ldr	r3, [r7, #28]
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3720      	adds	r7, #32
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80097b4:	b590      	push	{r4, r7, lr}
 80097b6:	b089      	sub	sp, #36	; 0x24
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80097c0:	2302      	movs	r3, #2
 80097c2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	f240 80d6 	bls.w	8009978 <put_fat+0x1c4>
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	69db      	ldr	r3, [r3, #28]
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	f080 80d0 	bcs.w	8009978 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	2b04      	cmp	r3, #4
 80097de:	f300 80d4 	bgt.w	800998a <put_fat+0x1d6>
 80097e2:	2b03      	cmp	r3, #3
 80097e4:	f280 8093 	bge.w	800990e <put_fat+0x15a>
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d002      	beq.n	80097f2 <put_fat+0x3e>
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d06e      	beq.n	80098ce <put_fat+0x11a>
 80097f0:	e0cb      	b.n	800998a <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	61bb      	str	r3, [r7, #24]
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	085b      	lsrs	r3, r3, #1
 80097fa:	69ba      	ldr	r2, [r7, #24]
 80097fc:	4413      	add	r3, r2
 80097fe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	0a5b      	lsrs	r3, r3, #9
 8009808:	4413      	add	r3, r2
 800980a:	4619      	mov	r1, r3
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f7ff fdfd 	bl	800940c <move_window>
 8009812:	4603      	mov	r3, r0
 8009814:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009816:	7ffb      	ldrb	r3, [r7, #31]
 8009818:	2b00      	cmp	r3, #0
 800981a:	f040 80af 	bne.w	800997c <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	1c59      	adds	r1, r3, #1
 8009828:	61b9      	str	r1, [r7, #24]
 800982a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800982e:	4413      	add	r3, r2
 8009830:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	f003 0301 	and.w	r3, r3, #1
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00d      	beq.n	8009858 <put_fat+0xa4>
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	b25b      	sxtb	r3, r3
 8009842:	f003 030f 	and.w	r3, r3, #15
 8009846:	b25a      	sxtb	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	b2db      	uxtb	r3, r3
 800984c:	011b      	lsls	r3, r3, #4
 800984e:	b25b      	sxtb	r3, r3
 8009850:	4313      	orrs	r3, r2
 8009852:	b25b      	sxtb	r3, r3
 8009854:	b2db      	uxtb	r3, r3
 8009856:	e001      	b.n	800985c <put_fat+0xa8>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	b2db      	uxtb	r3, r3
 800985c:	697a      	ldr	r2, [r7, #20]
 800985e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2201      	movs	r2, #1
 8009864:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	0a5b      	lsrs	r3, r3, #9
 800986e:	4413      	add	r3, r2
 8009870:	4619      	mov	r1, r3
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f7ff fdca 	bl	800940c <move_window>
 8009878:	4603      	mov	r3, r0
 800987a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800987c:	7ffb      	ldrb	r3, [r7, #31]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d17e      	bne.n	8009980 <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800988e:	4413      	add	r3, r2
 8009890:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	f003 0301 	and.w	r3, r3, #1
 8009898:	2b00      	cmp	r3, #0
 800989a:	d003      	beq.n	80098a4 <put_fat+0xf0>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	091b      	lsrs	r3, r3, #4
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	e00e      	b.n	80098c2 <put_fat+0x10e>
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	b25b      	sxtb	r3, r3
 80098aa:	f023 030f 	bic.w	r3, r3, #15
 80098ae:	b25a      	sxtb	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	0a1b      	lsrs	r3, r3, #8
 80098b4:	b25b      	sxtb	r3, r3
 80098b6:	f003 030f 	and.w	r3, r3, #15
 80098ba:	b25b      	sxtb	r3, r3
 80098bc:	4313      	orrs	r3, r2
 80098be:	b25b      	sxtb	r3, r3
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	697a      	ldr	r2, [r7, #20]
 80098c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2201      	movs	r2, #1
 80098ca:	70da      	strb	r2, [r3, #3]
			break;
 80098cc:	e05d      	b.n	800998a <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	0a1b      	lsrs	r3, r3, #8
 80098d6:	4413      	add	r3, r2
 80098d8:	4619      	mov	r1, r3
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f7ff fd96 	bl	800940c <move_window>
 80098e0:	4603      	mov	r3, r0
 80098e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80098e4:	7ffb      	ldrb	r3, [r7, #31]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d14c      	bne.n	8009984 <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	005b      	lsls	r3, r3, #1
 80098f4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80098f8:	4413      	add	r3, r2
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	b292      	uxth	r2, r2
 80098fe:	4611      	mov	r1, r2
 8009900:	4618      	mov	r0, r3
 8009902:	f7ff fa93 	bl	8008e2c <st_word>
			fs->wflag = 1;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2201      	movs	r2, #1
 800990a:	70da      	strb	r2, [r3, #3]
			break;
 800990c:	e03d      	b.n	800998a <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	09db      	lsrs	r3, r3, #7
 8009916:	4413      	add	r3, r2
 8009918:	4619      	mov	r1, r3
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f7ff fd76 	bl	800940c <move_window>
 8009920:	4603      	mov	r3, r0
 8009922:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009924:	7ffb      	ldrb	r3, [r7, #31]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d12e      	bne.n	8009988 <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	2b04      	cmp	r3, #4
 8009930:	d012      	beq.n	8009958 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009946:	4413      	add	r3, r2
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff f974 	bl	8008c36 <ld_dword>
 800994e:	4603      	mov	r3, r0
 8009950:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009954:	4323      	orrs	r3, r4
 8009956:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009966:	4413      	add	r3, r2
 8009968:	6879      	ldr	r1, [r7, #4]
 800996a:	4618      	mov	r0, r3
 800996c:	f7ff fa78 	bl	8008e60 <st_dword>
			fs->wflag = 1;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2201      	movs	r2, #1
 8009974:	70da      	strb	r2, [r3, #3]
			break;
 8009976:	e008      	b.n	800998a <put_fat+0x1d6>
		}
	}
 8009978:	bf00      	nop
 800997a:	e006      	b.n	800998a <put_fat+0x1d6>
			if (res != FR_OK) break;
 800997c:	bf00      	nop
 800997e:	e004      	b.n	800998a <put_fat+0x1d6>
			if (res != FR_OK) break;
 8009980:	bf00      	nop
 8009982:	e002      	b.n	800998a <put_fat+0x1d6>
			if (res != FR_OK) break;
 8009984:	bf00      	nop
 8009986:	e000      	b.n	800998a <put_fat+0x1d6>
			if (res != FR_OK) break;
 8009988:	bf00      	nop
	return res;
 800998a:	7ffb      	ldrb	r3, [r7, #31]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3724      	adds	r7, #36	; 0x24
 8009990:	46bd      	mov	sp, r7
 8009992:	bd90      	pop	{r4, r7, pc}

08009994 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b08a      	sub	sp, #40	; 0x28
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	3b02      	subs	r3, #2
 80099a4:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	69db      	ldr	r3, [r3, #28]
 80099aa:	3b02      	subs	r3, #2
 80099ac:	68ba      	ldr	r2, [r7, #8]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d301      	bcc.n	80099b6 <find_bitmap+0x22>
 80099b2:	2300      	movs	r3, #0
 80099b4:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	61fb      	str	r3, [r7, #28]
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	61bb      	str	r3, [r7, #24]
 80099be:	2300      	movs	r3, #0
 80099c0:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	0b1b      	lsrs	r3, r3, #12
 80099ca:	4413      	add	r3, r2
 80099cc:	4619      	mov	r1, r3
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f7ff fd1c 	bl	800940c <move_window>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d002      	beq.n	80099e0 <find_bitmap+0x4c>
 80099da:	f04f 33ff 	mov.w	r3, #4294967295
 80099de:	e051      	b.n	8009a84 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	08db      	lsrs	r3, r3, #3
 80099e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099e8:	623b      	str	r3, [r7, #32]
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	f003 0307 	and.w	r3, r3, #7
 80099f0:	2201      	movs	r2, #1
 80099f2:	fa02 f303 	lsl.w	r3, r2, r3
 80099f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	6a3b      	ldr	r3, [r7, #32]
 80099fe:	4413      	add	r3, r2
 8009a00:	3338      	adds	r3, #56	; 0x38
 8009a02:	781a      	ldrb	r2, [r3, #0]
 8009a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a08:	4013      	ands	r3, r2
 8009a0a:	74fb      	strb	r3, [r7, #19]
 8009a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a10:	005b      	lsls	r3, r3, #1
 8009a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8009a16:	69fb      	ldr	r3, [r7, #28]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	61fb      	str	r3, [r7, #28]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	69db      	ldr	r3, [r3, #28]
 8009a20:	3b02      	subs	r3, #2
 8009a22:	69fa      	ldr	r2, [r7, #28]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d307      	bcc.n	8009a38 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 8009a28:	2300      	movs	r3, #0
 8009a2a:	61fb      	str	r3, [r7, #28]
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a36:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8009a38:	7cfb      	ldrb	r3, [r7, #19]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d109      	bne.n	8009a52 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	3301      	adds	r3, #1
 8009a42:	617b      	str	r3, [r7, #20]
 8009a44:	697a      	ldr	r2, [r7, #20]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d106      	bne.n	8009a5a <find_bitmap+0xc6>
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	3302      	adds	r3, #2
 8009a50:	e018      	b.n	8009a84 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	61bb      	str	r3, [r7, #24]
 8009a56:	2300      	movs	r3, #0
 8009a58:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8009a5a:	69fa      	ldr	r2, [r7, #28]
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d101      	bne.n	8009a66 <find_bitmap+0xd2>
 8009a62:	2300      	movs	r3, #0
 8009a64:	e00e      	b.n	8009a84 <find_bitmap+0xf0>
			} while (bm);
 8009a66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1c5      	bne.n	80099fa <find_bitmap+0x66>
			bm = 1;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	3301      	adds	r3, #1
 8009a78:	623b      	str	r3, [r7, #32]
 8009a7a:	6a3b      	ldr	r3, [r7, #32]
 8009a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a80:	d3bb      	bcc.n	80099fa <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8009a82:	e79e      	b.n	80099c2 <find_bitmap+0x2e>
	}
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3728      	adds	r7, #40	; 0x28
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b088      	sub	sp, #32
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	607a      	str	r2, [r7, #4]
 8009a98:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	3b02      	subs	r3, #2
 8009a9e:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	0b1b      	lsrs	r3, r3, #12
 8009aa8:	4413      	add	r3, r2
 8009aaa:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	08db      	lsrs	r3, r3, #3
 8009ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ab4:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	f003 0307 	and.w	r3, r3, #7
 8009abc:	2201      	movs	r2, #1
 8009abe:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac2:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	1c5a      	adds	r2, r3, #1
 8009ac8:	617a      	str	r2, [r7, #20]
 8009aca:	4619      	mov	r1, r3
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f7ff fc9d 	bl	800940c <move_window>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d001      	beq.n	8009adc <change_bitmap+0x50>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e03d      	b.n	8009b58 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	3338      	adds	r3, #56	; 0x38
 8009ae4:	781a      	ldrb	r2, [r3, #0]
 8009ae6:	7ffb      	ldrb	r3, [r7, #31]
 8009ae8:	4013      	ands	r3, r2
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	bf14      	ite	ne
 8009af0:	2301      	movne	r3, #1
 8009af2:	2300      	moveq	r3, #0
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	461a      	mov	r2, r3
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d101      	bne.n	8009b02 <change_bitmap+0x76>
 8009afe:	2302      	movs	r3, #2
 8009b00:	e02a      	b.n	8009b58 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	4413      	add	r3, r2
 8009b08:	3338      	adds	r3, #56	; 0x38
 8009b0a:	781a      	ldrb	r2, [r3, #0]
 8009b0c:	7ffb      	ldrb	r3, [r7, #31]
 8009b0e:	4053      	eors	r3, r2
 8009b10:	b2d9      	uxtb	r1, r3
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	4413      	add	r3, r2
 8009b18:	3338      	adds	r3, #56	; 0x38
 8009b1a:	460a      	mov	r2, r1
 8009b1c:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2201      	movs	r2, #1
 8009b22:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	3b01      	subs	r3, #1
 8009b28:	607b      	str	r3, [r7, #4]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d101      	bne.n	8009b34 <change_bitmap+0xa8>
 8009b30:	2300      	movs	r3, #0
 8009b32:	e011      	b.n	8009b58 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 8009b34:	7ffb      	ldrb	r3, [r7, #31]
 8009b36:	005b      	lsls	r3, r3, #1
 8009b38:	77fb      	strb	r3, [r7, #31]
 8009b3a:	7ffb      	ldrb	r3, [r7, #31]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d1cd      	bne.n	8009adc <change_bitmap+0x50>
			bm = 1;
 8009b40:	2301      	movs	r3, #1
 8009b42:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	3301      	adds	r3, #1
 8009b48:	61bb      	str	r3, [r7, #24]
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b50:	d3c4      	bcc.n	8009adc <change_bitmap+0x50>
		i = 0;
 8009b52:	2300      	movs	r3, #0
 8009b54:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8009b56:	e7b5      	b.n	8009ac4 <change_bitmap+0x38>
	}
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3720      	adds	r7, #32
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	79db      	ldrb	r3, [r3, #7]
 8009b6c:	2b03      	cmp	r3, #3
 8009b6e:	d121      	bne.n	8009bb4 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	617b      	str	r3, [r7, #20]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	613b      	str	r3, [r7, #16]
 8009b7c:	e014      	b.n	8009ba8 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6818      	ldr	r0, [r3, #0]
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	3301      	adds	r3, #1
 8009b86:	461a      	mov	r2, r3
 8009b88:	6979      	ldr	r1, [r7, #20]
 8009b8a:	f7ff fe13 	bl	80097b4 <put_fat>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8009b92:	7bfb      	ldrb	r3, [r7, #15]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d001      	beq.n	8009b9c <fill_first_frag+0x3c>
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
 8009b9a:	e00c      	b.n	8009bb6 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	617b      	str	r3, [r7, #20]
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	613b      	str	r3, [r7, #16]
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1e7      	bne.n	8009b7e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3718      	adds	r7, #24
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b086      	sub	sp, #24
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	60f8      	str	r0, [r7, #12]
 8009bc6:	60b9      	str	r1, [r7, #8]
 8009bc8:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8009bca:	e020      	b.n	8009c0e <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6818      	ldr	r0, [r3, #0]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	69db      	ldr	r3, [r3, #28]
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	1ad3      	subs	r3, r2, r3
 8009bd8:	1c59      	adds	r1, r3, #1
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	69db      	ldr	r3, [r3, #28]
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d905      	bls.n	8009bee <fill_last_frag+0x30>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	69db      	ldr	r3, [r3, #28]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	1ad3      	subs	r3, r2, r3
 8009bea:	3302      	adds	r3, #2
 8009bec:	e000      	b.n	8009bf0 <fill_last_frag+0x32>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	f7ff fddf 	bl	80097b4 <put_fat>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8009bfa:	7dfb      	ldrb	r3, [r7, #23]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d001      	beq.n	8009c04 <fill_last_frag+0x46>
 8009c00:	7dfb      	ldrb	r3, [r7, #23]
 8009c02:	e009      	b.n	8009c18 <fill_last_frag+0x5a>
		obj->n_frag--;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	69db      	ldr	r3, [r3, #28]
 8009c08:	1e5a      	subs	r2, r3, #1
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	69db      	ldr	r3, [r3, #28]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1da      	bne.n	8009bcc <fill_last_frag+0xe>
	}
	return FR_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3718      	adds	r7, #24
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b08a      	sub	sp, #40	; 0x28
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	627b      	str	r3, [r7, #36]	; 0x24
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d904      	bls.n	8009c4e <remove_chain+0x2e>
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	69db      	ldr	r3, [r3, #28]
 8009c48:	68ba      	ldr	r2, [r7, #8]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d301      	bcc.n	8009c52 <remove_chain+0x32>
 8009c4e:	2302      	movs	r3, #2
 8009c50:	e096      	b.n	8009d80 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d014      	beq.n	8009c82 <remove_chain+0x62>
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	2b04      	cmp	r3, #4
 8009c5e:	d103      	bne.n	8009c68 <remove_chain+0x48>
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	79db      	ldrb	r3, [r3, #7]
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d00c      	beq.n	8009c82 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009c68:	f04f 32ff 	mov.w	r2, #4294967295
 8009c6c:	6879      	ldr	r1, [r7, #4]
 8009c6e:	69b8      	ldr	r0, [r7, #24]
 8009c70:	f7ff fda0 	bl	80097b4 <put_fat>
 8009c74:	4603      	mov	r3, r0
 8009c76:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009c78:	7ffb      	ldrb	r3, [r7, #31]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d001      	beq.n	8009c82 <remove_chain+0x62>
 8009c7e:	7ffb      	ldrb	r3, [r7, #31]
 8009c80:	e07e      	b.n	8009d80 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009c82:	68b9      	ldr	r1, [r7, #8]
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f7ff fc7b 	bl	8009580 <get_fat>
 8009c8a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d055      	beq.n	8009d3e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d101      	bne.n	8009c9c <remove_chain+0x7c>
 8009c98:	2302      	movs	r3, #2
 8009c9a:	e071      	b.n	8009d80 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca2:	d101      	bne.n	8009ca8 <remove_chain+0x88>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e06b      	b.n	8009d80 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	2b04      	cmp	r3, #4
 8009cae:	d00b      	beq.n	8009cc8 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	68b9      	ldr	r1, [r7, #8]
 8009cb4:	69b8      	ldr	r0, [r7, #24]
 8009cb6:	f7ff fd7d 	bl	80097b4 <put_fat>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009cbe:	7ffb      	ldrb	r3, [r7, #31]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <remove_chain+0xa8>
 8009cc4:	7ffb      	ldrb	r3, [r7, #31]
 8009cc6:	e05b      	b.n	8009d80 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	699a      	ldr	r2, [r3, #24]
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	69db      	ldr	r3, [r3, #28]
 8009cd0:	3b02      	subs	r3, #2
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d20b      	bcs.n	8009cee <remove_chain+0xce>
			fs->free_clst++;
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	791b      	ldrb	r3, [r3, #4]
 8009ce4:	f043 0301 	orr.w	r3, r3, #1
 8009ce8:	b2da      	uxtb	r2, r3
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8009cee:	6a3b      	ldr	r3, [r7, #32]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d102      	bne.n	8009cfe <remove_chain+0xde>
			ecl = nxt;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	623b      	str	r3, [r7, #32]
 8009cfc:	e017      	b.n	8009d2e <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	2b04      	cmp	r3, #4
 8009d04:	d10f      	bne.n	8009d26 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8009d06:	6a3a      	ldr	r2, [r7, #32]
 8009d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0a:	1ad3      	subs	r3, r2, r3
 8009d0c:	1c5a      	adds	r2, r3, #1
 8009d0e:	2300      	movs	r3, #0
 8009d10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d12:	69b8      	ldr	r0, [r7, #24]
 8009d14:	f7ff feba 	bl	8009a8c <change_bitmap>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8009d1c:	7ffb      	ldrb	r3, [r7, #31]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d001      	beq.n	8009d26 <remove_chain+0x106>
 8009d22:	7ffb      	ldrb	r3, [r7, #31]
 8009d24:	e02c      	b.n	8009d80 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	623b      	str	r3, [r7, #32]
 8009d2a:	6a3b      	ldr	r3, [r7, #32]
 8009d2c:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	69db      	ldr	r3, [r3, #28]
 8009d36:	68ba      	ldr	r2, [r7, #8]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d3a2      	bcc.n	8009c82 <remove_chain+0x62>
 8009d3c:	e000      	b.n	8009d40 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8009d3e:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	2b04      	cmp	r3, #4
 8009d46:	d11a      	bne.n	8009d7e <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d103      	bne.n	8009d56 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	71da      	strb	r2, [r3, #7]
 8009d54:	e013      	b.n	8009d7e <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	79db      	ldrb	r3, [r3, #7]
 8009d5a:	2b03      	cmp	r3, #3
 8009d5c:	d10f      	bne.n	8009d7e <remove_chain+0x15e>
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d30a      	bcc.n	8009d7e <remove_chain+0x15e>
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	689a      	ldr	r2, [r3, #8]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	4413      	add	r3, r2
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d802      	bhi.n	8009d7e <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3728      	adds	r7, #40	; 0x28
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b088      	sub	sp, #32
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d10d      	bne.n	8009dba <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	695b      	ldr	r3, [r3, #20]
 8009da2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d004      	beq.n	8009db4 <create_chain+0x2c>
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	69db      	ldr	r3, [r3, #28]
 8009dae:	69ba      	ldr	r2, [r7, #24]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d31b      	bcc.n	8009dec <create_chain+0x64>
 8009db4:	2301      	movs	r3, #1
 8009db6:	61bb      	str	r3, [r7, #24]
 8009db8:	e018      	b.n	8009dec <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009dba:	6839      	ldr	r1, [r7, #0]
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f7ff fbdf 	bl	8009580 <get_fat>
 8009dc2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d801      	bhi.n	8009dce <create_chain+0x46>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e0d9      	b.n	8009f82 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd4:	d101      	bne.n	8009dda <create_chain+0x52>
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	e0d3      	b.n	8009f82 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	69db      	ldr	r3, [r3, #28]
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d201      	bcs.n	8009de8 <create_chain+0x60>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	e0cc      	b.n	8009f82 <create_chain+0x1fa>
		scl = clst;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	2b04      	cmp	r3, #4
 8009df2:	d164      	bne.n	8009ebe <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8009df4:	2201      	movs	r2, #1
 8009df6:	69b9      	ldr	r1, [r7, #24]
 8009df8:	6938      	ldr	r0, [r7, #16]
 8009dfa:	f7ff fdcb 	bl	8009994 <find_bitmap>
 8009dfe:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d003      	beq.n	8009e0e <create_chain+0x86>
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e0c:	d101      	bne.n	8009e12 <create_chain+0x8a>
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	e0b7      	b.n	8009f82 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8009e12:	2301      	movs	r3, #1
 8009e14:	2201      	movs	r2, #1
 8009e16:	69f9      	ldr	r1, [r7, #28]
 8009e18:	6938      	ldr	r0, [r7, #16]
 8009e1a:	f7ff fe37 	bl	8009a8c <change_bitmap>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8009e22:	7dfb      	ldrb	r3, [r7, #23]
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d101      	bne.n	8009e2c <create_chain+0xa4>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e0aa      	b.n	8009f82 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8009e2c:	7dfb      	ldrb	r3, [r7, #23]
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d102      	bne.n	8009e38 <create_chain+0xb0>
 8009e32:	f04f 33ff 	mov.w	r3, #4294967295
 8009e36:	e0a4      	b.n	8009f82 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d103      	bne.n	8009e46 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2202      	movs	r2, #2
 8009e42:	71da      	strb	r2, [r3, #7]
 8009e44:	e011      	b.n	8009e6a <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	79db      	ldrb	r3, [r3, #7]
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d10d      	bne.n	8009e6a <create_chain+0xe2>
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	3301      	adds	r3, #1
 8009e52:	69fa      	ldr	r2, [r7, #28]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d008      	beq.n	8009e6a <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	69ba      	ldr	r2, [r7, #24]
 8009e5e:	1ad2      	subs	r2, r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2203      	movs	r2, #3
 8009e68:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	79db      	ldrb	r3, [r3, #7]
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d064      	beq.n	8009f3c <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	3301      	adds	r3, #1
 8009e76:	69fa      	ldr	r2, [r7, #28]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d10b      	bne.n	8009e94 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	69db      	ldr	r3, [r3, #28]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d003      	beq.n	8009e8c <create_chain+0x104>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	69db      	ldr	r3, [r3, #28]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	e000      	b.n	8009e8e <create_chain+0x106>
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	61d3      	str	r3, [r2, #28]
 8009e92:	e053      	b.n	8009f3c <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	69db      	ldr	r3, [r3, #28]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d102      	bne.n	8009ea2 <create_chain+0x11a>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8009ea2:	69fa      	ldr	r2, [r7, #28]
 8009ea4:	6839      	ldr	r1, [r7, #0]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7ff fe89 	bl	8009bbe <fill_last_frag>
 8009eac:	4603      	mov	r3, r0
 8009eae:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8009eb0:	7dfb      	ldrb	r3, [r7, #23]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d142      	bne.n	8009f3c <create_chain+0x1b4>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	61da      	str	r2, [r3, #28]
 8009ebc:	e03e      	b.n	8009f3c <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	69db      	ldr	r3, [r3, #28]
 8009ecc:	69fa      	ldr	r2, [r7, #28]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d307      	bcc.n	8009ee2 <create_chain+0x15a>
				ncl = 2;
 8009ed2:	2302      	movs	r3, #2
 8009ed4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009ed6:	69fa      	ldr	r2, [r7, #28]
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d901      	bls.n	8009ee2 <create_chain+0x15a>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	e04f      	b.n	8009f82 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009ee2:	69f9      	ldr	r1, [r7, #28]
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f7ff fb4b 	bl	8009580 <get_fat>
 8009eea:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00e      	beq.n	8009f10 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d003      	beq.n	8009f00 <create_chain+0x178>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009efe:	d101      	bne.n	8009f04 <create_chain+0x17c>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	e03e      	b.n	8009f82 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8009f04:	69fa      	ldr	r2, [r7, #28]
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d1da      	bne.n	8009ec2 <create_chain+0x13a>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	e038      	b.n	8009f82 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8009f10:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009f12:	f04f 32ff 	mov.w	r2, #4294967295
 8009f16:	69f9      	ldr	r1, [r7, #28]
 8009f18:	6938      	ldr	r0, [r7, #16]
 8009f1a:	f7ff fc4b 	bl	80097b4 <put_fat>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009f22:	7dfb      	ldrb	r3, [r7, #23]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d109      	bne.n	8009f3c <create_chain+0x1b4>
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d006      	beq.n	8009f3c <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009f2e:	69fa      	ldr	r2, [r7, #28]
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6938      	ldr	r0, [r7, #16]
 8009f34:	f7ff fc3e 	bl	80097b4 <put_fat>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009f3c:	7dfb      	ldrb	r3, [r7, #23]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d116      	bne.n	8009f70 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	69fa      	ldr	r2, [r7, #28]
 8009f46:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	699a      	ldr	r2, [r3, #24]
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	69db      	ldr	r3, [r3, #28]
 8009f50:	3b02      	subs	r3, #2
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d804      	bhi.n	8009f60 <create_chain+0x1d8>
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	699b      	ldr	r3, [r3, #24]
 8009f5a:	1e5a      	subs	r2, r3, #1
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	791b      	ldrb	r3, [r3, #4]
 8009f64:	f043 0301 	orr.w	r3, r3, #1
 8009f68:	b2da      	uxtb	r2, r3
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	711a      	strb	r2, [r3, #4]
 8009f6e:	e007      	b.n	8009f80 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009f70:	7dfb      	ldrb	r3, [r7, #23]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d102      	bne.n	8009f7c <create_chain+0x1f4>
 8009f76:	f04f 33ff 	mov.w	r3, #4294967295
 8009f7a:	e000      	b.n	8009f7e <create_chain+0x1f6>
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009f80:	69fb      	ldr	r3, [r7, #28]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3720      	adds	r7, #32
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009f8a:	b5b0      	push	{r4, r5, r7, lr}
 8009f8c:	b088      	sub	sp, #32
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	60f8      	str	r0, [r7, #12]
 8009f92:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009fa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fa8:	f04f 0000 	mov.w	r0, #0
 8009fac:	f04f 0100 	mov.w	r1, #0
 8009fb0:	0a50      	lsrs	r0, r2, #9
 8009fb2:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8009fb6:	0a59      	lsrs	r1, r3, #9
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	895b      	ldrh	r3, [r3, #10]
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	461c      	mov	r4, r3
 8009fc2:	4615      	mov	r5, r2
 8009fc4:	4622      	mov	r2, r4
 8009fc6:	462b      	mov	r3, r5
 8009fc8:	f7f7 f928 	bl	800121c <__aeabi_uldivmod>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	1d1a      	adds	r2, r3, #4
 8009fd8:	61ba      	str	r2, [r7, #24]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d101      	bne.n	8009fe8 <clmt_clust+0x5e>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	e010      	b.n	800a00a <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 8009fe8:	69fa      	ldr	r2, [r7, #28]
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d307      	bcc.n	800a000 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 8009ff0:	69fa      	ldr	r2, [r7, #28]
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	1ad3      	subs	r3, r2, r3
 8009ff6:	61fb      	str	r3, [r7, #28]
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	3304      	adds	r3, #4
 8009ffc:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009ffe:	e7e9      	b.n	8009fd4 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800a000:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	4413      	add	r3, r2
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3720      	adds	r7, #32
 800a00e:	46bd      	mov	sp, r7
 800a010:	bdb0      	pop	{r4, r5, r7, pc}

0800a012 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b086      	sub	sp, #24
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	2b04      	cmp	r3, #4
 800a028:	d102      	bne.n	800a030 <dir_sdi+0x1e>
 800a02a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a02e:	e001      	b.n	800a034 <dir_sdi+0x22>
 800a030:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	429a      	cmp	r2, r3
 800a038:	d904      	bls.n	800a044 <dir_sdi+0x32>
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	f003 031f 	and.w	r3, r3, #31
 800a040:	2b00      	cmp	r3, #0
 800a042:	d001      	beq.n	800a048 <dir_sdi+0x36>
		return FR_INT_ERR;
 800a044:	2302      	movs	r3, #2
 800a046:	e066      	b.n	800a116 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	683a      	ldr	r2, [r7, #0]
 800a04c:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d109      	bne.n	800a06e <dir_sdi+0x5c>
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d905      	bls.n	800a06e <dir_sdi+0x5c>
		clst = fs->dirbase;
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a066:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10c      	bne.n	800a08e <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	095b      	lsrs	r3, r3, #5
 800a078:	693a      	ldr	r2, [r7, #16]
 800a07a:	8912      	ldrh	r2, [r2, #8]
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d301      	bcc.n	800a084 <dir_sdi+0x72>
 800a080:	2302      	movs	r3, #2
 800a082:	e048      	b.n	800a116 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	639a      	str	r2, [r3, #56]	; 0x38
 800a08c:	e029      	b.n	800a0e2 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	895b      	ldrh	r3, [r3, #10]
 800a092:	025b      	lsls	r3, r3, #9
 800a094:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a096:	e019      	b.n	800a0cc <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6979      	ldr	r1, [r7, #20]
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7ff fa6f 	bl	8009580 <get_fat>
 800a0a2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0aa:	d101      	bne.n	800a0b0 <dir_sdi+0x9e>
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e032      	b.n	800a116 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d904      	bls.n	800a0c0 <dir_sdi+0xae>
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	69db      	ldr	r3, [r3, #28]
 800a0ba:	697a      	ldr	r2, [r7, #20]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d301      	bcc.n	800a0c4 <dir_sdi+0xb2>
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	e028      	b.n	800a116 <dir_sdi+0x104>
			ofs -= csz;
 800a0c4:	683a      	ldr	r2, [r7, #0]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	1ad3      	subs	r3, r2, r3
 800a0ca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a0cc:	683a      	ldr	r2, [r7, #0]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d2e1      	bcs.n	800a098 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800a0d4:	6979      	ldr	r1, [r7, #20]
 800a0d6:	6938      	ldr	r0, [r7, #16]
 800a0d8:	f7ff fa34 	bl	8009544 <clust2sect>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	697a      	ldr	r2, [r7, #20]
 800a0e6:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d101      	bne.n	800a0f4 <dir_sdi+0xe2>
 800a0f0:	2302      	movs	r3, #2
 800a0f2:	e010      	b.n	800a116 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	0a5b      	lsrs	r3, r3, #9
 800a0fc:	441a      	add	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a10e:	441a      	add	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3718      	adds	r7, #24
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b086      	sub	sp, #24
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
 800a126:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a132:	3320      	adds	r3, #32
 800a134:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00b      	beq.n	800a156 <dir_next+0x38>
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	2b04      	cmp	r3, #4
 800a144:	d102      	bne.n	800a14c <dir_next+0x2e>
 800a146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a14a:	e001      	b.n	800a150 <dir_next+0x32>
 800a14c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	429a      	cmp	r2, r3
 800a154:	d801      	bhi.n	800a15a <dir_next+0x3c>
 800a156:	2304      	movs	r3, #4
 800a158:	e0b2      	b.n	800a2c0 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a160:	2b00      	cmp	r3, #0
 800a162:	f040 80a0 	bne.w	800a2a6 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a16a:	1c5a      	adds	r2, r3, #1
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10b      	bne.n	800a190 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	095b      	lsrs	r3, r3, #5
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	8912      	ldrh	r2, [r2, #8]
 800a180:	4293      	cmp	r3, r2
 800a182:	f0c0 8090 	bcc.w	800a2a6 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	639a      	str	r2, [r3, #56]	; 0x38
 800a18c:	2304      	movs	r3, #4
 800a18e:	e097      	b.n	800a2c0 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	0a5b      	lsrs	r3, r3, #9
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	8952      	ldrh	r2, [r2, #10]
 800a198:	3a01      	subs	r2, #1
 800a19a:	4013      	ands	r3, r2
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	f040 8082 	bne.w	800a2a6 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	4610      	mov	r0, r2
 800a1ac:	f7ff f9e8 	bl	8009580 <get_fat>
 800a1b0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d801      	bhi.n	800a1bc <dir_next+0x9e>
 800a1b8:	2302      	movs	r3, #2
 800a1ba:	e081      	b.n	800a2c0 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c2:	d101      	bne.n	800a1c8 <dir_next+0xaa>
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	e07b      	b.n	800a2c0 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	69db      	ldr	r3, [r3, #28]
 800a1cc:	697a      	ldr	r2, [r7, #20]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d35f      	bcc.n	800a292 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d104      	bne.n	800a1e2 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	639a      	str	r2, [r3, #56]	; 0x38
 800a1de:	2304      	movs	r3, #4
 800a1e0:	e06e      	b.n	800a2c0 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	4610      	mov	r0, r2
 800a1ec:	f7ff fdcc 	bl	8009d88 <create_chain>
 800a1f0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d101      	bne.n	800a1fc <dir_next+0xde>
 800a1f8:	2307      	movs	r3, #7
 800a1fa:	e061      	b.n	800a2c0 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d101      	bne.n	800a206 <dir_next+0xe8>
 800a202:	2302      	movs	r3, #2
 800a204:	e05c      	b.n	800a2c0 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a20c:	d101      	bne.n	800a212 <dir_next+0xf4>
 800a20e:	2301      	movs	r3, #1
 800a210:	e056      	b.n	800a2c0 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	79db      	ldrb	r3, [r3, #7]
 800a216:	f043 0304 	orr.w	r3, r3, #4
 800a21a:	b2da      	uxtb	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f7ff f8af 	bl	8009384 <sync_window>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d001      	beq.n	800a230 <dir_next+0x112>
 800a22c:	2301      	movs	r3, #1
 800a22e:	e047      	b.n	800a2c0 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	3338      	adds	r3, #56	; 0x38
 800a234:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a238:	2100      	movs	r1, #0
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe fee2 	bl	8009004 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a240:	2300      	movs	r3, #0
 800a242:	613b      	str	r3, [r7, #16]
 800a244:	6979      	ldr	r1, [r7, #20]
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f7ff f97c 	bl	8009544 <clust2sect>
 800a24c:	4602      	mov	r2, r0
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	635a      	str	r2, [r3, #52]	; 0x34
 800a252:	e012      	b.n	800a27a <dir_next+0x15c>
						fs->wflag = 1;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2201      	movs	r2, #1
 800a258:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f7ff f892 	bl	8009384 <sync_window>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d001      	beq.n	800a26a <dir_next+0x14c>
 800a266:	2301      	movs	r3, #1
 800a268:	e02a      	b.n	800a2c0 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	3301      	adds	r3, #1
 800a26e:	613b      	str	r3, [r7, #16]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a274:	1c5a      	adds	r2, r3, #1
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	635a      	str	r2, [r3, #52]	; 0x34
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	895b      	ldrh	r3, [r3, #10]
 800a27e:	461a      	mov	r2, r3
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	4293      	cmp	r3, r2
 800a284:	d3e6      	bcc.n	800a254 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	1ad2      	subs	r2, r2, r3
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	697a      	ldr	r2, [r7, #20]
 800a296:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800a298:	6979      	ldr	r1, [r7, #20]
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f7ff f952 	bl	8009544 <clust2sect>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2b8:	441a      	add	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800a2be:	2300      	movs	r3, #0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3718      	adds	r7, #24
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a2d8:	2100      	movs	r1, #0
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f7ff fe99 	bl	800a012 <dir_sdi>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a2e4:	7dfb      	ldrb	r3, [r7, #23]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d140      	bne.n	800a36c <dir_alloc+0xa4>
		n = 0;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f7ff f889 	bl	800940c <move_window>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a2fe:	7dfb      	ldrb	r3, [r7, #23]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d132      	bne.n	800a36a <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	2b04      	cmp	r3, #4
 800a30a:	d108      	bne.n	800a31e <dir_alloc+0x56>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	b25b      	sxtb	r3, r3
 800a314:	43db      	mvns	r3, r3
 800a316:	b2db      	uxtb	r3, r3
 800a318:	09db      	lsrs	r3, r3, #7
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	e00f      	b.n	800a33e <dir_alloc+0x76>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	2be5      	cmp	r3, #229	; 0xe5
 800a326:	d004      	beq.n	800a332 <dir_alloc+0x6a>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d101      	bne.n	800a336 <dir_alloc+0x6e>
 800a332:	2301      	movs	r3, #1
 800a334:	e000      	b.n	800a338 <dir_alloc+0x70>
 800a336:	2300      	movs	r3, #0
 800a338:	f003 0301 	and.w	r3, r3, #1
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d007      	beq.n	800a352 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	3301      	adds	r3, #1
 800a346:	613b      	str	r3, [r7, #16]
 800a348:	693a      	ldr	r2, [r7, #16]
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d102      	bne.n	800a356 <dir_alloc+0x8e>
 800a350:	e00c      	b.n	800a36c <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a352:	2300      	movs	r3, #0
 800a354:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a356:	2101      	movs	r1, #1
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f7ff fee0 	bl	800a11e <dir_next>
 800a35e:	4603      	mov	r3, r0
 800a360:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a362:	7dfb      	ldrb	r3, [r7, #23]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d0c2      	beq.n	800a2ee <dir_alloc+0x26>
 800a368:	e000      	b.n	800a36c <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800a36a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a36c:	7dfb      	ldrb	r3, [r7, #23]
 800a36e:	2b04      	cmp	r3, #4
 800a370:	d101      	bne.n	800a376 <dir_alloc+0xae>
 800a372:	2307      	movs	r3, #7
 800a374:	75fb      	strb	r3, [r7, #23]
	return res;
 800a376:	7dfb      	ldrb	r3, [r7, #23]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3718      	adds	r7, #24
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	331a      	adds	r3, #26
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fe fc3a 	bl	8008c08 <ld_word>
 800a394:	4603      	mov	r3, r0
 800a396:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	2b03      	cmp	r3, #3
 800a39e:	d109      	bne.n	800a3b4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	3314      	adds	r3, #20
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7fe fc2f 	bl	8008c08 <ld_word>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	041b      	lsls	r3, r3, #16
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3710      	adds	r7, #16
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b084      	sub	sp, #16
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	60f8      	str	r0, [r7, #12]
 800a3c6:	60b9      	str	r1, [r7, #8]
 800a3c8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	331a      	adds	r3, #26
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	b292      	uxth	r2, r2
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7fe fd29 	bl	8008e2c <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	2b03      	cmp	r3, #3
 800a3e0:	d109      	bne.n	800a3f6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	f103 0214 	add.w	r2, r3, #20
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	0c1b      	lsrs	r3, r3, #16
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	4610      	mov	r0, r2
 800a3f2:	f7fe fd1b 	bl	8008e2c <st_word>
	}
}
 800a3f6:	bf00      	nop
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
	...

0800a400 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a400:	b590      	push	{r4, r7, lr}
 800a402:	b087      	sub	sp, #28
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	331a      	adds	r3, #26
 800a40e:	4618      	mov	r0, r3
 800a410:	f7fe fbfa 	bl	8008c08 <ld_word>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d001      	beq.n	800a41e <cmp_lfn+0x1e>
 800a41a:	2300      	movs	r3, #0
 800a41c:	e059      	b.n	800a4d2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a426:	1e5a      	subs	r2, r3, #1
 800a428:	4613      	mov	r3, r2
 800a42a:	005b      	lsls	r3, r3, #1
 800a42c:	4413      	add	r3, r2
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	4413      	add	r3, r2
 800a432:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a434:	2301      	movs	r3, #1
 800a436:	81fb      	strh	r3, [r7, #14]
 800a438:	2300      	movs	r3, #0
 800a43a:	613b      	str	r3, [r7, #16]
 800a43c:	e033      	b.n	800a4a6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a43e:	4a27      	ldr	r2, [pc, #156]	; (800a4dc <cmp_lfn+0xdc>)
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	4413      	add	r3, r2
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	461a      	mov	r2, r3
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	4413      	add	r3, r2
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7fe fbdb 	bl	8008c08 <ld_word>
 800a452:	4603      	mov	r3, r0
 800a454:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a456:	89fb      	ldrh	r3, [r7, #14]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d01a      	beq.n	800a492 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	2bfe      	cmp	r3, #254	; 0xfe
 800a460:	d812      	bhi.n	800a488 <cmp_lfn+0x88>
 800a462:	89bb      	ldrh	r3, [r7, #12]
 800a464:	4618      	mov	r0, r3
 800a466:	f002 ff17 	bl	800d298 <ff_wtoupper>
 800a46a:	4603      	mov	r3, r0
 800a46c:	461c      	mov	r4, r3
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	1c5a      	adds	r2, r3, #1
 800a472:	617a      	str	r2, [r7, #20]
 800a474:	005b      	lsls	r3, r3, #1
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	4413      	add	r3, r2
 800a47a:	881b      	ldrh	r3, [r3, #0]
 800a47c:	4618      	mov	r0, r3
 800a47e:	f002 ff0b 	bl	800d298 <ff_wtoupper>
 800a482:	4603      	mov	r3, r0
 800a484:	429c      	cmp	r4, r3
 800a486:	d001      	beq.n	800a48c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a488:	2300      	movs	r3, #0
 800a48a:	e022      	b.n	800a4d2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800a48c:	89bb      	ldrh	r3, [r7, #12]
 800a48e:	81fb      	strh	r3, [r7, #14]
 800a490:	e006      	b.n	800a4a0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a492:	89bb      	ldrh	r3, [r7, #12]
 800a494:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a498:	4293      	cmp	r3, r2
 800a49a:	d001      	beq.n	800a4a0 <cmp_lfn+0xa0>
 800a49c:	2300      	movs	r3, #0
 800a49e:	e018      	b.n	800a4d2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	613b      	str	r3, [r7, #16]
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	2b0c      	cmp	r3, #12
 800a4aa:	d9c8      	bls.n	800a43e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d00b      	beq.n	800a4d0 <cmp_lfn+0xd0>
 800a4b8:	89fb      	ldrh	r3, [r7, #14]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d008      	beq.n	800a4d0 <cmp_lfn+0xd0>
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	005b      	lsls	r3, r3, #1
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	881b      	ldrh	r3, [r3, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d001      	beq.n	800a4d0 <cmp_lfn+0xd0>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	e000      	b.n	800a4d2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a4d0:	2301      	movs	r3, #1
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	371c      	adds	r7, #28
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd90      	pop	{r4, r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	080155ec 	.word	0x080155ec

0800a4e0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	331a      	adds	r3, #26
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7fe fb8a 	bl	8008c08 <ld_word>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d001      	beq.n	800a4fe <pick_lfn+0x1e>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	e04d      	b.n	800a59a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a506:	1e5a      	subs	r2, r3, #1
 800a508:	4613      	mov	r3, r2
 800a50a:	005b      	lsls	r3, r3, #1
 800a50c:	4413      	add	r3, r2
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	4413      	add	r3, r2
 800a512:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a514:	2301      	movs	r3, #1
 800a516:	81fb      	strh	r3, [r7, #14]
 800a518:	2300      	movs	r3, #0
 800a51a:	613b      	str	r3, [r7, #16]
 800a51c:	e028      	b.n	800a570 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a51e:	4a21      	ldr	r2, [pc, #132]	; (800a5a4 <pick_lfn+0xc4>)
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	4413      	add	r3, r2
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	461a      	mov	r2, r3
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	4413      	add	r3, r2
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7fe fb6b 	bl	8008c08 <ld_word>
 800a532:	4603      	mov	r3, r0
 800a534:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a536:	89fb      	ldrh	r3, [r7, #14]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00f      	beq.n	800a55c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	2bfe      	cmp	r3, #254	; 0xfe
 800a540:	d901      	bls.n	800a546 <pick_lfn+0x66>
 800a542:	2300      	movs	r3, #0
 800a544:	e029      	b.n	800a59a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a546:	89bb      	ldrh	r3, [r7, #12]
 800a548:	81fb      	strh	r3, [r7, #14]
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	1c5a      	adds	r2, r3, #1
 800a54e:	617a      	str	r2, [r7, #20]
 800a550:	005b      	lsls	r3, r3, #1
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	4413      	add	r3, r2
 800a556:	89fa      	ldrh	r2, [r7, #14]
 800a558:	801a      	strh	r2, [r3, #0]
 800a55a:	e006      	b.n	800a56a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a55c:	89bb      	ldrh	r3, [r7, #12]
 800a55e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a562:	4293      	cmp	r3, r2
 800a564:	d001      	beq.n	800a56a <pick_lfn+0x8a>
 800a566:	2300      	movs	r3, #0
 800a568:	e017      	b.n	800a59a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	3301      	adds	r3, #1
 800a56e:	613b      	str	r3, [r7, #16]
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	2b0c      	cmp	r3, #12
 800a574:	d9d3      	bls.n	800a51e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00a      	beq.n	800a598 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	2bfe      	cmp	r3, #254	; 0xfe
 800a586:	d901      	bls.n	800a58c <pick_lfn+0xac>
 800a588:	2300      	movs	r3, #0
 800a58a:	e006      	b.n	800a59a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	005b      	lsls	r3, r3, #1
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	4413      	add	r3, r2
 800a594:	2200      	movs	r2, #0
 800a596:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800a598:	2301      	movs	r3, #1
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3718      	adds	r7, #24
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	080155ec 	.word	0x080155ec

0800a5a8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b088      	sub	sp, #32
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	4611      	mov	r1, r2
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	71fb      	strb	r3, [r7, #7]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	330d      	adds	r3, #13
 800a5c2:	79ba      	ldrb	r2, [r7, #6]
 800a5c4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	330b      	adds	r3, #11
 800a5ca:	220f      	movs	r2, #15
 800a5cc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	330c      	adds	r3, #12
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	331a      	adds	r3, #26
 800a5da:	2100      	movs	r1, #0
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7fe fc25 	bl	8008e2c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a5e2:	79fb      	ldrb	r3, [r7, #7]
 800a5e4:	1e5a      	subs	r2, r3, #1
 800a5e6:	4613      	mov	r3, r2
 800a5e8:	005b      	lsls	r3, r3, #1
 800a5ea:	4413      	add	r3, r2
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	4413      	add	r3, r2
 800a5f0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	82fb      	strh	r3, [r7, #22]
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a5fa:	8afb      	ldrh	r3, [r7, #22]
 800a5fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a600:	4293      	cmp	r3, r2
 800a602:	d007      	beq.n	800a614 <put_lfn+0x6c>
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	1c5a      	adds	r2, r3, #1
 800a608:	61fa      	str	r2, [r7, #28]
 800a60a:	005b      	lsls	r3, r3, #1
 800a60c:	68fa      	ldr	r2, [r7, #12]
 800a60e:	4413      	add	r3, r2
 800a610:	881b      	ldrh	r3, [r3, #0]
 800a612:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a614:	4a17      	ldr	r2, [pc, #92]	; (800a674 <put_lfn+0xcc>)
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	4413      	add	r3, r2
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	461a      	mov	r2, r3
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	4413      	add	r3, r2
 800a622:	8afa      	ldrh	r2, [r7, #22]
 800a624:	4611      	mov	r1, r2
 800a626:	4618      	mov	r0, r3
 800a628:	f7fe fc00 	bl	8008e2c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a62c:	8afb      	ldrh	r3, [r7, #22]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d102      	bne.n	800a638 <put_lfn+0x90>
 800a632:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a636:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	3301      	adds	r3, #1
 800a63c:	61bb      	str	r3, [r7, #24]
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	2b0c      	cmp	r3, #12
 800a642:	d9da      	bls.n	800a5fa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a644:	8afb      	ldrh	r3, [r7, #22]
 800a646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d006      	beq.n	800a65c <put_lfn+0xb4>
 800a64e:	69fb      	ldr	r3, [r7, #28]
 800a650:	005b      	lsls	r3, r3, #1
 800a652:	68fa      	ldr	r2, [r7, #12]
 800a654:	4413      	add	r3, r2
 800a656:	881b      	ldrh	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d103      	bne.n	800a664 <put_lfn+0xbc>
 800a65c:	79fb      	ldrb	r3, [r7, #7]
 800a65e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a662:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	79fa      	ldrb	r2, [r7, #7]
 800a668:	701a      	strb	r2, [r3, #0]
}
 800a66a:	bf00      	nop
 800a66c:	3720      	adds	r7, #32
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	080155ec 	.word	0x080155ec

0800a678 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b08c      	sub	sp, #48	; 0x30
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
 800a684:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a686:	220b      	movs	r2, #11
 800a688:	68b9      	ldr	r1, [r7, #8]
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f7fe fc9a 	bl	8008fc4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	2b05      	cmp	r3, #5
 800a694:	d92b      	bls.n	800a6ee <gen_numname+0x76>
		sr = seq;
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a69a:	e022      	b.n	800a6e2 <gen_numname+0x6a>
			wc = *lfn++;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	1c9a      	adds	r2, r3, #2
 800a6a0:	607a      	str	r2, [r7, #4]
 800a6a2:	881b      	ldrh	r3, [r3, #0]
 800a6a4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6aa:	e017      	b.n	800a6dc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	005a      	lsls	r2, r3, #1
 800a6b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a6b2:	f003 0301 	and.w	r3, r3, #1
 800a6b6:	4413      	add	r3, r2
 800a6b8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a6ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a6bc:	085b      	lsrs	r3, r3, #1
 800a6be:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d005      	beq.n	800a6d6 <gen_numname+0x5e>
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a6d0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a6d4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d8:	3301      	adds	r3, #1
 800a6da:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6de:	2b0f      	cmp	r3, #15
 800a6e0:	d9e4      	bls.n	800a6ac <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	881b      	ldrh	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1d8      	bne.n	800a69c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a6ee:	2307      	movs	r3, #7
 800a6f0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	f003 030f 	and.w	r3, r3, #15
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	3330      	adds	r3, #48	; 0x30
 800a6fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a702:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a706:	2b39      	cmp	r3, #57	; 0x39
 800a708:	d904      	bls.n	800a714 <gen_numname+0x9c>
 800a70a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a70e:	3307      	adds	r3, #7
 800a710:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a716:	1e5a      	subs	r2, r3, #1
 800a718:	62ba      	str	r2, [r7, #40]	; 0x28
 800a71a:	3330      	adds	r3, #48	; 0x30
 800a71c:	443b      	add	r3, r7
 800a71e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a722:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	091b      	lsrs	r3, r3, #4
 800a72a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d1df      	bne.n	800a6f2 <gen_numname+0x7a>
	ns[i] = '~';
 800a732:	f107 0214 	add.w	r2, r7, #20
 800a736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a738:	4413      	add	r3, r2
 800a73a:	227e      	movs	r2, #126	; 0x7e
 800a73c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a73e:	2300      	movs	r3, #0
 800a740:	627b      	str	r3, [r7, #36]	; 0x24
 800a742:	e002      	b.n	800a74a <gen_numname+0xd2>
 800a744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a746:	3301      	adds	r3, #1
 800a748:	627b      	str	r3, [r7, #36]	; 0x24
 800a74a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74e:	429a      	cmp	r2, r3
 800a750:	d205      	bcs.n	800a75e <gen_numname+0xe6>
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a756:	4413      	add	r3, r2
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	2b20      	cmp	r3, #32
 800a75c:	d1f2      	bne.n	800a744 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a760:	2b07      	cmp	r3, #7
 800a762:	d807      	bhi.n	800a774 <gen_numname+0xfc>
 800a764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a766:	1c5a      	adds	r2, r3, #1
 800a768:	62ba      	str	r2, [r7, #40]	; 0x28
 800a76a:	3330      	adds	r3, #48	; 0x30
 800a76c:	443b      	add	r3, r7
 800a76e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a772:	e000      	b.n	800a776 <gen_numname+0xfe>
 800a774:	2120      	movs	r1, #32
 800a776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a778:	1c5a      	adds	r2, r3, #1
 800a77a:	627a      	str	r2, [r7, #36]	; 0x24
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	4413      	add	r3, r2
 800a780:	460a      	mov	r2, r1
 800a782:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a786:	2b07      	cmp	r3, #7
 800a788:	d9e9      	bls.n	800a75e <gen_numname+0xe6>
}
 800a78a:	bf00      	nop
 800a78c:	bf00      	nop
 800a78e:	3730      	adds	r7, #48	; 0x30
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a794:	b480      	push	{r7}
 800a796:	b085      	sub	sp, #20
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a79c:	2300      	movs	r3, #0
 800a79e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a7a0:	230b      	movs	r3, #11
 800a7a2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a7a4:	7bfb      	ldrb	r3, [r7, #15]
 800a7a6:	b2da      	uxtb	r2, r3
 800a7a8:	0852      	lsrs	r2, r2, #1
 800a7aa:	01db      	lsls	r3, r3, #7
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	b2da      	uxtb	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	1c59      	adds	r1, r3, #1
 800a7b4:	6079      	str	r1, [r7, #4]
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	3b01      	subs	r3, #1
 800a7c0:	60bb      	str	r3, [r7, #8]
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d1ed      	bne.n	800a7a4 <sum_sfn+0x10>
	return sum;
 800a7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3714      	adds	r7, #20
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bc80      	pop	{r7}
 800a7d2:	4770      	bx	lr

0800a7d4 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b087      	sub	sp, #28
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	015b      	lsls	r3, r3, #5
 800a7e6:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	827b      	strh	r3, [r7, #18]
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	617b      	str	r3, [r7, #20]
 800a7f0:	e018      	b.n	800a824 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d103      	bne.n	800a800 <xdir_sum+0x2c>
			i++;
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	617b      	str	r3, [r7, #20]
 800a7fe:	e00e      	b.n	800a81e <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800a800:	8a7b      	ldrh	r3, [r7, #18]
 800a802:	03db      	lsls	r3, r3, #15
 800a804:	b29a      	uxth	r2, r3
 800a806:	8a7b      	ldrh	r3, [r7, #18]
 800a808:	085b      	lsrs	r3, r3, #1
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	4413      	add	r3, r2
 800a80e:	b29a      	uxth	r2, r3
 800a810:	6879      	ldr	r1, [r7, #4]
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	440b      	add	r3, r1
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	b29b      	uxth	r3, r3
 800a81a:	4413      	add	r3, r2
 800a81c:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	3301      	adds	r3, #1
 800a822:	617b      	str	r3, [r7, #20]
 800a824:	697a      	ldr	r2, [r7, #20]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d3e2      	bcc.n	800a7f2 <xdir_sum+0x1e>
		}
	}
	return sum;
 800a82c:	8a7b      	ldrh	r3, [r7, #18]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	371c      	adds	r7, #28
 800a832:	46bd      	mov	sp, r7
 800a834:	bc80      	pop	{r7}
 800a836:	4770      	bx	lr

0800a838 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800a840:	2300      	movs	r3, #0
 800a842:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800a844:	e01f      	b.n	800a886 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800a846:	89bb      	ldrh	r3, [r7, #12]
 800a848:	4618      	mov	r0, r3
 800a84a:	f002 fd25 	bl	800d298 <ff_wtoupper>
 800a84e:	4603      	mov	r3, r0
 800a850:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800a852:	89fb      	ldrh	r3, [r7, #14]
 800a854:	03db      	lsls	r3, r3, #15
 800a856:	b29a      	uxth	r2, r3
 800a858:	89fb      	ldrh	r3, [r7, #14]
 800a85a:	085b      	lsrs	r3, r3, #1
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	4413      	add	r3, r2
 800a860:	b29a      	uxth	r2, r3
 800a862:	89bb      	ldrh	r3, [r7, #12]
 800a864:	b2db      	uxtb	r3, r3
 800a866:	b29b      	uxth	r3, r3
 800a868:	4413      	add	r3, r2
 800a86a:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800a86c:	89fb      	ldrh	r3, [r7, #14]
 800a86e:	03db      	lsls	r3, r3, #15
 800a870:	b29a      	uxth	r2, r3
 800a872:	89fb      	ldrh	r3, [r7, #14]
 800a874:	085b      	lsrs	r3, r3, #1
 800a876:	b29b      	uxth	r3, r3
 800a878:	4413      	add	r3, r2
 800a87a:	b29a      	uxth	r2, r3
 800a87c:	89bb      	ldrh	r3, [r7, #12]
 800a87e:	0a1b      	lsrs	r3, r3, #8
 800a880:	b29b      	uxth	r3, r3
 800a882:	4413      	add	r3, r2
 800a884:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	1c9a      	adds	r2, r3, #2
 800a88a:	607a      	str	r2, [r7, #4]
 800a88c:	881b      	ldrh	r3, [r3, #0]
 800a88e:	81bb      	strh	r3, [r7, #12]
 800a890:	89bb      	ldrh	r3, [r7, #12]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1d7      	bne.n	800a846 <xname_sum+0xe>
	}
	return sum;
 800a896:	89fb      	ldrh	r3, [r7, #14]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800a8a0:	b590      	push	{r4, r7, lr}
 800a8a2:	b087      	sub	sp, #28
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	4610      	mov	r0, r2
 800a8bc:	f7fe fda6 	bl	800940c <move_window>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800a8c4:	7bfb      	ldrb	r3, [r7, #15]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <load_xdir+0x2e>
 800a8ca:	7bfb      	ldrb	r3, [r7, #15]
 800a8cc:	e09f      	b.n	800aa0e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	2b85      	cmp	r3, #133	; 0x85
 800a8d6:	d001      	beq.n	800a8dc <load_xdir+0x3c>
 800a8d8:	2302      	movs	r3, #2
 800a8da:	e098      	b.n	800aa0e <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8e0:	2220      	movs	r2, #32
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	6938      	ldr	r0, [r7, #16]
 800a8e6:	f7fe fb6d 	bl	8008fc4 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	015b      	lsls	r3, r3, #5
 800a8f4:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	2b5f      	cmp	r3, #95	; 0x5f
 800a8fa:	d903      	bls.n	800a904 <load_xdir+0x64>
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800a902:	d901      	bls.n	800a908 <load_xdir+0x68>
 800a904:	2302      	movs	r3, #2
 800a906:	e082      	b.n	800aa0e <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800a908:	2100      	movs	r1, #0
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7ff fc07 	bl	800a11e <dir_next>
 800a910:	4603      	mov	r3, r0
 800a912:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800a914:	7bfb      	ldrb	r3, [r7, #15]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d001      	beq.n	800a91e <load_xdir+0x7e>
 800a91a:	7bfb      	ldrb	r3, [r7, #15]
 800a91c:	e077      	b.n	800aa0e <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a926:	4619      	mov	r1, r3
 800a928:	4610      	mov	r0, r2
 800a92a:	f7fe fd6f 	bl	800940c <move_window>
 800a92e:	4603      	mov	r3, r0
 800a930:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800a932:	7bfb      	ldrb	r3, [r7, #15]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d001      	beq.n	800a93c <load_xdir+0x9c>
 800a938:	7bfb      	ldrb	r3, [r7, #15]
 800a93a:	e068      	b.n	800aa0e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	2bc0      	cmp	r3, #192	; 0xc0
 800a944:	d001      	beq.n	800a94a <load_xdir+0xaa>
 800a946:	2302      	movs	r3, #2
 800a948:	e061      	b.n	800aa0e <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	f103 0020 	add.w	r0, r3, #32
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a954:	2220      	movs	r2, #32
 800a956:	4619      	mov	r1, r3
 800a958:	f7fe fb34 	bl	8008fc4 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	3323      	adds	r3, #35	; 0x23
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	332c      	adds	r3, #44	; 0x2c
 800a964:	4a2c      	ldr	r2, [pc, #176]	; (800aa18 <load_xdir+0x178>)
 800a966:	fba2 2303 	umull	r2, r3, r2, r3
 800a96a:	08db      	lsrs	r3, r3, #3
 800a96c:	015b      	lsls	r3, r3, #5
 800a96e:	68ba      	ldr	r2, [r7, #8]
 800a970:	429a      	cmp	r2, r3
 800a972:	d201      	bcs.n	800a978 <load_xdir+0xd8>
 800a974:	2302      	movs	r3, #2
 800a976:	e04a      	b.n	800aa0e <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800a978:	2340      	movs	r3, #64	; 0x40
 800a97a:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800a97c:	2100      	movs	r1, #0
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f7ff fbcd 	bl	800a11e <dir_next>
 800a984:	4603      	mov	r3, r0
 800a986:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800a988:	7bfb      	ldrb	r3, [r7, #15]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d001      	beq.n	800a992 <load_xdir+0xf2>
 800a98e:	7bfb      	ldrb	r3, [r7, #15]
 800a990:	e03d      	b.n	800aa0e <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a99a:	4619      	mov	r1, r3
 800a99c:	4610      	mov	r0, r2
 800a99e:	f7fe fd35 	bl	800940c <move_window>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800a9a6:	7bfb      	ldrb	r3, [r7, #15]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <load_xdir+0x110>
 800a9ac:	7bfb      	ldrb	r3, [r7, #15]
 800a9ae:	e02e      	b.n	800aa0e <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	2bc1      	cmp	r3, #193	; 0xc1
 800a9b8:	d001      	beq.n	800a9be <load_xdir+0x11e>
 800a9ba:	2302      	movs	r3, #2
 800a9bc:	e027      	b.n	800aa0e <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800a9c4:	d208      	bcs.n	800a9d8 <load_xdir+0x138>
 800a9c6:	693a      	ldr	r2, [r7, #16]
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	18d0      	adds	r0, r2, r3
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9d0:	2220      	movs	r2, #32
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	f7fe faf6 	bl	8008fc4 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	3320      	adds	r3, #32
 800a9dc:	617b      	str	r3, [r7, #20]
 800a9de:	697a      	ldr	r2, [r7, #20]
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d3ca      	bcc.n	800a97c <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800a9ec:	d80e      	bhi.n	800aa0c <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800a9ee:	6938      	ldr	r0, [r7, #16]
 800a9f0:	f7ff fef0 	bl	800a7d4 <xdir_sum>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	461c      	mov	r4, r3
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	3302      	adds	r3, #2
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7fe f903 	bl	8008c08 <ld_word>
 800aa02:	4603      	mov	r3, r0
 800aa04:	429c      	cmp	r4, r3
 800aa06:	d001      	beq.n	800aa0c <load_xdir+0x16c>
 800aa08:	2302      	movs	r3, #2
 800aa0a:	e000      	b.n	800aa0e <load_xdir+0x16e>
	}
	return FR_OK;
 800aa0c:	2300      	movs	r3, #0
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	371c      	adds	r7, #28
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd90      	pop	{r4, r7, pc}
 800aa16:	bf00      	nop
 800aa18:	88888889 	.word	0x88888889

0800aa1c <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800aa1c:	b5b0      	push	{r4, r5, r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800aa26:	6839      	ldr	r1, [r7, #0]
 800aa28:	6808      	ldr	r0, [r1, #0]
 800aa2a:	6879      	ldr	r1, [r7, #4]
 800aa2c:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800aa2e:	6839      	ldr	r1, [r7, #0]
 800aa30:	6a08      	ldr	r0, [r1, #32]
 800aa32:	6879      	ldr	r1, [r7, #4]
 800aa34:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800aa36:	6839      	ldr	r1, [r7, #0]
 800aa38:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800aa3a:	b2c8      	uxtb	r0, r1
 800aa3c:	6879      	ldr	r1, [r7, #4]
 800aa3e:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800aa40:	6839      	ldr	r1, [r7, #0]
 800aa42:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800aa44:	2000      	movs	r0, #0
 800aa46:	460c      	mov	r4, r1
 800aa48:	4605      	mov	r5, r0
 800aa4a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800aa4e:	2300      	movs	r3, #0
 800aa50:	6879      	ldr	r1, [r7, #4]
 800aa52:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa62:	4619      	mov	r1, r3
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f7ff fad4 	bl	800a012 <dir_sdi>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800aa6e:	7bfb      	ldrb	r3, [r7, #15]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d104      	bne.n	800aa7e <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f7ff ff13 	bl	800a8a0 <load_xdir>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800aa7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bdb0      	pop	{r4, r5, r7, pc}

0800aa88 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800aa88:	b590      	push	{r4, r7, lr}
 800aa8a:	b087      	sub	sp, #28
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	1c9c      	adds	r4, r3, #2
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	f7ff fe99 	bl	800a7d4 <xdir_sum>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	f7fe f9c0 	bl	8008e2c <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	3301      	adds	r3, #1
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	3301      	adds	r3, #1
 800aab4:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaba:	4619      	mov	r1, r3
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f7ff faa8 	bl	800a012 <dir_sdi>
 800aac2:	4603      	mov	r3, r0
 800aac4:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800aac6:	e026      	b.n	800ab16 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad0:	4619      	mov	r1, r3
 800aad2:	4610      	mov	r0, r2
 800aad4:	f7fe fc9a 	bl	800940c <move_window>
 800aad8:	4603      	mov	r3, r0
 800aada:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aadc:	7dfb      	ldrb	r3, [r7, #23]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d11d      	bne.n	800ab1e <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aae6:	2220      	movs	r2, #32
 800aae8:	68f9      	ldr	r1, [r7, #12]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fe fa6a 	bl	8008fc4 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	3b01      	subs	r3, #1
 800aafc:	613b      	str	r3, [r7, #16]
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00e      	beq.n	800ab22 <store_xdir+0x9a>
		dirb += SZDIRE;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	3320      	adds	r3, #32
 800ab08:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f7ff fb06 	bl	800a11e <dir_next>
 800ab12:	4603      	mov	r3, r0
 800ab14:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800ab16:	7dfb      	ldrb	r3, [r7, #23]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d0d5      	beq.n	800aac8 <store_xdir+0x40>
 800ab1c:	e002      	b.n	800ab24 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800ab1e:	bf00      	nop
 800ab20:	e000      	b.n	800ab24 <store_xdir+0x9c>
		if (--nent == 0) break;
 800ab22:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800ab24:	7dfb      	ldrb	r3, [r7, #23]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d002      	beq.n	800ab30 <store_xdir+0xa8>
 800ab2a:	7dfb      	ldrb	r3, [r7, #23]
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d101      	bne.n	800ab34 <store_xdir+0xac>
 800ab30:	7dfb      	ldrb	r3, [r7, #23]
 800ab32:	e000      	b.n	800ab36 <store_xdir+0xae>
 800ab34:	2302      	movs	r3, #2
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	371c      	adds	r7, #28
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd90      	pop	{r4, r7, pc}

0800ab3e <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800ab3e:	b590      	push	{r4, r7, lr}
 800ab40:	b085      	sub	sp, #20
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800ab48:	2240      	movs	r2, #64	; 0x40
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f7fe fa59 	bl	8009004 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2285      	movs	r2, #133	; 0x85
 800ab56:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	3320      	adds	r3, #32
 800ab5c:	22c0      	movs	r2, #192	; 0xc0
 800ab5e:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800ab60:	2300      	movs	r3, #0
 800ab62:	72bb      	strb	r3, [r7, #10]
 800ab64:	2301      	movs	r3, #1
 800ab66:	72fb      	strb	r3, [r7, #11]
 800ab68:	2301      	movs	r3, #1
 800ab6a:	813b      	strh	r3, [r7, #8]
 800ab6c:	2340      	movs	r3, #64	; 0x40
 800ab6e:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	1c5a      	adds	r2, r3, #1
 800ab74:	60fa      	str	r2, [r7, #12]
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	4413      	add	r3, r2
 800ab7a:	22c1      	movs	r2, #193	; 0xc1
 800ab7c:	701a      	strb	r2, [r3, #0]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	1c5a      	adds	r2, r3, #1
 800ab82:	60fa      	str	r2, [r7, #12]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	4413      	add	r3, r2
 800ab88:	2200      	movs	r2, #0
 800ab8a:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800ab8c:	893b      	ldrh	r3, [r7, #8]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00b      	beq.n	800abaa <create_xdir+0x6c>
 800ab92:	7abb      	ldrb	r3, [r7, #10]
 800ab94:	005b      	lsls	r3, r3, #1
 800ab96:	683a      	ldr	r2, [r7, #0]
 800ab98:	4413      	add	r3, r2
 800ab9a:	881b      	ldrh	r3, [r3, #0]
 800ab9c:	813b      	strh	r3, [r7, #8]
 800ab9e:	893b      	ldrh	r3, [r7, #8]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d002      	beq.n	800abaa <create_xdir+0x6c>
 800aba4:	7abb      	ldrb	r3, [r7, #10]
 800aba6:	3301      	adds	r3, #1
 800aba8:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	4413      	add	r3, r2
 800abb0:	893a      	ldrh	r2, [r7, #8]
 800abb2:	4611      	mov	r1, r2
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7fe f939 	bl	8008e2c <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	3302      	adds	r3, #2
 800abbe:	60fb      	str	r3, [r7, #12]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f003 031f 	and.w	r3, r3, #31
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d1e0      	bne.n	800ab8c <create_xdir+0x4e>
		nb++;
 800abca:	7afb      	ldrb	r3, [r7, #11]
 800abcc:	3301      	adds	r3, #1
 800abce:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800abd0:	7abb      	ldrb	r3, [r7, #10]
 800abd2:	005b      	lsls	r3, r3, #1
 800abd4:	683a      	ldr	r2, [r7, #0]
 800abd6:	4413      	add	r3, r2
 800abd8:	881b      	ldrh	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d1c8      	bne.n	800ab70 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	3323      	adds	r3, #35	; 0x23
 800abe2:	7aba      	ldrb	r2, [r7, #10]
 800abe4:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	3301      	adds	r3, #1
 800abea:	7afa      	ldrb	r2, [r7, #11]
 800abec:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800abf4:	6838      	ldr	r0, [r7, #0]
 800abf6:	f7ff fe1f 	bl	800a838 <xname_sum>
 800abfa:	4603      	mov	r3, r0
 800abfc:	4619      	mov	r1, r3
 800abfe:	4620      	mov	r0, r4
 800ac00:	f7fe f914 	bl	8008e2c <st_word>
}
 800ac04:	bf00      	nop
 800ac06:	3714      	adds	r7, #20
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd90      	pop	{r4, r7, pc}

0800ac0c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b086      	sub	sp, #24
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800ac16:	2304      	movs	r3, #4
 800ac18:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800ac20:	23ff      	movs	r3, #255	; 0xff
 800ac22:	757b      	strb	r3, [r7, #21]
 800ac24:	23ff      	movs	r3, #255	; 0xff
 800ac26:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800ac28:	e09f      	b.n	800ad6a <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac2e:	4619      	mov	r1, r3
 800ac30:	6938      	ldr	r0, [r7, #16]
 800ac32:	f7fe fbeb 	bl	800940c <move_window>
 800ac36:	4603      	mov	r3, r0
 800ac38:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ac3a:	7dfb      	ldrb	r3, [r7, #23]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f040 809a 	bne.w	800ad76 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800ac4a:	7dbb      	ldrb	r3, [r7, #22]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d102      	bne.n	800ac56 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ac50:	2304      	movs	r3, #4
 800ac52:	75fb      	strb	r3, [r7, #23]
 800ac54:	e096      	b.n	800ad84 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	2b04      	cmp	r3, #4
 800ac5c:	d118      	bne.n	800ac90 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800ac5e:	7dbb      	ldrb	r3, [r7, #22]
 800ac60:	2b85      	cmp	r3, #133	; 0x85
 800ac62:	d179      	bne.n	800ad58 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f7ff fe17 	bl	800a8a0 <load_xdir>
 800ac72:	4603      	mov	r3, r0
 800ac74:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800ac76:	7dfb      	ldrb	r3, [r7, #23]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d17e      	bne.n	800ad7a <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	691b      	ldr	r3, [r3, #16]
 800ac80:	3304      	adds	r3, #4
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac88:	b2da      	uxtb	r2, r3
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	719a      	strb	r2, [r3, #6]
					}
					break;
 800ac8e:	e074      	b.n	800ad7a <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac94:	330b      	adds	r3, #11
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac9c:	73fb      	strb	r3, [r7, #15]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	7bfa      	ldrb	r2, [r7, #15]
 800aca2:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800aca4:	7dbb      	ldrb	r3, [r7, #22]
 800aca6:	2be5      	cmp	r3, #229	; 0xe5
 800aca8:	d00e      	beq.n	800acc8 <dir_read+0xbc>
 800acaa:	7dbb      	ldrb	r3, [r7, #22]
 800acac:	2b2e      	cmp	r3, #46	; 0x2e
 800acae:	d00b      	beq.n	800acc8 <dir_read+0xbc>
 800acb0:	7bfb      	ldrb	r3, [r7, #15]
 800acb2:	f023 0320 	bic.w	r3, r3, #32
 800acb6:	2b08      	cmp	r3, #8
 800acb8:	bf0c      	ite	eq
 800acba:	2301      	moveq	r3, #1
 800acbc:	2300      	movne	r3, #0
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	461a      	mov	r2, r3
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d002      	beq.n	800acce <dir_read+0xc2>
				ord = 0xFF;
 800acc8:	23ff      	movs	r3, #255	; 0xff
 800acca:	757b      	strb	r3, [r7, #21]
 800accc:	e044      	b.n	800ad58 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800acce:	7bfb      	ldrb	r3, [r7, #15]
 800acd0:	2b0f      	cmp	r3, #15
 800acd2:	d12f      	bne.n	800ad34 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800acd4:	7dbb      	ldrb	r3, [r7, #22]
 800acd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00d      	beq.n	800acfa <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ace2:	7b5b      	ldrb	r3, [r3, #13]
 800ace4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800ace6:	7dbb      	ldrb	r3, [r7, #22]
 800ace8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acec:	75bb      	strb	r3, [r7, #22]
 800acee:	7dbb      	ldrb	r3, [r7, #22]
 800acf0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800acfa:	7dba      	ldrb	r2, [r7, #22]
 800acfc:	7d7b      	ldrb	r3, [r7, #21]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d115      	bne.n	800ad2e <dir_read+0x122>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad06:	330d      	adds	r3, #13
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	7d3a      	ldrb	r2, [r7, #20]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d10e      	bne.n	800ad2e <dir_read+0x122>
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	68da      	ldr	r2, [r3, #12]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad18:	4619      	mov	r1, r3
 800ad1a:	4610      	mov	r0, r2
 800ad1c:	f7ff fbe0 	bl	800a4e0 <pick_lfn>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d003      	beq.n	800ad2e <dir_read+0x122>
 800ad26:	7d7b      	ldrb	r3, [r7, #21]
 800ad28:	3b01      	subs	r3, #1
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	e000      	b.n	800ad30 <dir_read+0x124>
 800ad2e:	23ff      	movs	r3, #255	; 0xff
 800ad30:	757b      	strb	r3, [r7, #21]
 800ad32:	e011      	b.n	800ad58 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800ad34:	7d7b      	ldrb	r3, [r7, #21]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d109      	bne.n	800ad4e <dir_read+0x142>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7ff fd28 	bl	800a794 <sum_sfn>
 800ad44:	4603      	mov	r3, r0
 800ad46:	461a      	mov	r2, r3
 800ad48:	7d3b      	ldrb	r3, [r7, #20]
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d017      	beq.n	800ad7e <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f04f 32ff 	mov.w	r2, #4294967295
 800ad54:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800ad56:	e012      	b.n	800ad7e <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ad58:	2100      	movs	r1, #0
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f7ff f9df 	bl	800a11e <dir_next>
 800ad60:	4603      	mov	r3, r0
 800ad62:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ad64:	7dfb      	ldrb	r3, [r7, #23]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d10b      	bne.n	800ad82 <dir_read+0x176>
	while (dp->sect) {
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	f47f af5b 	bne.w	800ac2a <dir_read+0x1e>
 800ad74:	e006      	b.n	800ad84 <dir_read+0x178>
		if (res != FR_OK) break;
 800ad76:	bf00      	nop
 800ad78:	e004      	b.n	800ad84 <dir_read+0x178>
					break;
 800ad7a:	bf00      	nop
 800ad7c:	e002      	b.n	800ad84 <dir_read+0x178>
					break;
 800ad7e:	bf00      	nop
 800ad80:	e000      	b.n	800ad84 <dir_read+0x178>
		if (res != FR_OK) break;
 800ad82:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ad84:	7dfb      	ldrb	r3, [r7, #23]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d002      	beq.n	800ad90 <dir_read+0x184>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800ad90:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3718      	adds	r7, #24
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ad9a:	b590      	push	{r4, r7, lr}
 800ad9c:	b089      	sub	sp, #36	; 0x24
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ada8:	2100      	movs	r1, #0
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f7ff f931 	bl	800a012 <dir_sdi>
 800adb0:	4603      	mov	r3, r0
 800adb2:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800adb4:	7ffb      	ldrb	r3, [r7, #31]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d001      	beq.n	800adbe <dir_find+0x24>
 800adba:	7ffb      	ldrb	r3, [r7, #31]
 800adbc:	e112      	b.n	800afe4 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	2b04      	cmp	r3, #4
 800adc4:	d164      	bne.n	800ae90 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	4618      	mov	r0, r3
 800adcc:	f7ff fd34 	bl	800a838 <xname_sum>
 800add0:	4603      	mov	r3, r0
 800add2:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800add4:	e04f      	b.n	800ae76 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	691b      	ldr	r3, [r3, #16]
 800adda:	3324      	adds	r3, #36	; 0x24
 800addc:	4618      	mov	r0, r3
 800adde:	f7fd ff13 	bl	8008c08 <ld_word>
 800ade2:	4603      	mov	r3, r0
 800ade4:	461a      	mov	r2, r3
 800ade6:	893b      	ldrh	r3, [r7, #8]
 800ade8:	4293      	cmp	r3, r2
 800adea:	d000      	beq.n	800adee <dir_find+0x54>
 800adec:	e043      	b.n	800ae76 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	691b      	ldr	r3, [r3, #16]
 800adf2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800adf6:	76fb      	strb	r3, [r7, #27]
 800adf8:	2340      	movs	r3, #64	; 0x40
 800adfa:	617b      	str	r3, [r7, #20]
 800adfc:	2300      	movs	r3, #0
 800adfe:	613b      	str	r3, [r7, #16]
 800ae00:	e029      	b.n	800ae56 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	f003 031f 	and.w	r3, r3, #31
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d102      	bne.n	800ae12 <dir_find+0x78>
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	3302      	adds	r3, #2
 800ae10:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	691a      	ldr	r2, [r3, #16]
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	4413      	add	r3, r2
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7fd fef4 	bl	8008c08 <ld_word>
 800ae20:	4603      	mov	r3, r0
 800ae22:	4618      	mov	r0, r3
 800ae24:	f002 fa38 	bl	800d298 <ff_wtoupper>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	461c      	mov	r4, r3
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	68da      	ldr	r2, [r3, #12]
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	005b      	lsls	r3, r3, #1
 800ae34:	4413      	add	r3, r2
 800ae36:	881b      	ldrh	r3, [r3, #0]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f002 fa2d 	bl	800d298 <ff_wtoupper>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	429c      	cmp	r4, r3
 800ae42:	d10c      	bne.n	800ae5e <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800ae44:	7efb      	ldrb	r3, [r7, #27]
 800ae46:	3b01      	subs	r3, #1
 800ae48:	76fb      	strb	r3, [r7, #27]
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	3302      	adds	r3, #2
 800ae4e:	617b      	str	r3, [r7, #20]
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	3301      	adds	r3, #1
 800ae54:	613b      	str	r3, [r7, #16]
 800ae56:	7efb      	ldrb	r3, [r7, #27]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1d2      	bne.n	800ae02 <dir_find+0x68>
 800ae5c:	e000      	b.n	800ae60 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800ae5e:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800ae60:	7efb      	ldrb	r3, [r7, #27]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d107      	bne.n	800ae76 <dir_find+0xdc>
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	68da      	ldr	r2, [r3, #12]
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	005b      	lsls	r3, r3, #1
 800ae6e:	4413      	add	r3, r2
 800ae70:	881b      	ldrh	r3, [r3, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d009      	beq.n	800ae8a <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800ae76:	2100      	movs	r1, #0
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f7ff fec7 	bl	800ac0c <dir_read>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	77fb      	strb	r3, [r7, #31]
 800ae82:	7ffb      	ldrb	r3, [r7, #31]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d0a6      	beq.n	800add6 <dir_find+0x3c>
 800ae88:	e000      	b.n	800ae8c <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800ae8a:	bf00      	nop
		}
		return res;
 800ae8c:	7ffb      	ldrb	r3, [r7, #31]
 800ae8e:	e0a9      	b.n	800afe4 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ae90:	23ff      	movs	r3, #255	; 0xff
 800ae92:	773b      	strb	r3, [r7, #28]
 800ae94:	7f3b      	ldrb	r3, [r7, #28]
 800ae96:	777b      	strb	r3, [r7, #29]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae9e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea4:	4619      	mov	r1, r3
 800aea6:	68f8      	ldr	r0, [r7, #12]
 800aea8:	f7fe fab0 	bl	800940c <move_window>
 800aeac:	4603      	mov	r3, r0
 800aeae:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800aeb0:	7ffb      	ldrb	r3, [r7, #31]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	f040 8090 	bne.w	800afd8 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800aec0:	7fbb      	ldrb	r3, [r7, #30]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d102      	bne.n	800aecc <dir_find+0x132>
 800aec6:	2304      	movs	r3, #4
 800aec8:	77fb      	strb	r3, [r7, #31]
 800aeca:	e08a      	b.n	800afe2 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aed0:	330b      	adds	r3, #11
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aed8:	72fb      	strb	r3, [r7, #11]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	7afa      	ldrb	r2, [r7, #11]
 800aede:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800aee0:	7fbb      	ldrb	r3, [r7, #30]
 800aee2:	2be5      	cmp	r3, #229	; 0xe5
 800aee4:	d007      	beq.n	800aef6 <dir_find+0x15c>
 800aee6:	7afb      	ldrb	r3, [r7, #11]
 800aee8:	f003 0308 	and.w	r3, r3, #8
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d009      	beq.n	800af04 <dir_find+0x16a>
 800aef0:	7afb      	ldrb	r3, [r7, #11]
 800aef2:	2b0f      	cmp	r3, #15
 800aef4:	d006      	beq.n	800af04 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800aef6:	23ff      	movs	r3, #255	; 0xff
 800aef8:	777b      	strb	r3, [r7, #29]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f04f 32ff 	mov.w	r2, #4294967295
 800af00:	64da      	str	r2, [r3, #76]	; 0x4c
 800af02:	e05e      	b.n	800afc2 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800af04:	7afb      	ldrb	r3, [r7, #11]
 800af06:	2b0f      	cmp	r3, #15
 800af08:	d136      	bne.n	800af78 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800af10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af14:	2b00      	cmp	r3, #0
 800af16:	d154      	bne.n	800afc2 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800af18:	7fbb      	ldrb	r3, [r7, #30]
 800af1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00d      	beq.n	800af3e <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af26:	7b5b      	ldrb	r3, [r3, #13]
 800af28:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800af2a:	7fbb      	ldrb	r3, [r7, #30]
 800af2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af30:	77bb      	strb	r3, [r7, #30]
 800af32:	7fbb      	ldrb	r3, [r7, #30]
 800af34:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800af3e:	7fba      	ldrb	r2, [r7, #30]
 800af40:	7f7b      	ldrb	r3, [r7, #29]
 800af42:	429a      	cmp	r2, r3
 800af44:	d115      	bne.n	800af72 <dir_find+0x1d8>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af4a:	330d      	adds	r3, #13
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	7f3a      	ldrb	r2, [r7, #28]
 800af50:	429a      	cmp	r2, r3
 800af52:	d10e      	bne.n	800af72 <dir_find+0x1d8>
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	68da      	ldr	r2, [r3, #12]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af5c:	4619      	mov	r1, r3
 800af5e:	4610      	mov	r0, r2
 800af60:	f7ff fa4e 	bl	800a400 <cmp_lfn>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d003      	beq.n	800af72 <dir_find+0x1d8>
 800af6a:	7f7b      	ldrb	r3, [r7, #29]
 800af6c:	3b01      	subs	r3, #1
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	e000      	b.n	800af74 <dir_find+0x1da>
 800af72:	23ff      	movs	r3, #255	; 0xff
 800af74:	777b      	strb	r3, [r7, #29]
 800af76:	e024      	b.n	800afc2 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800af78:	7f7b      	ldrb	r3, [r7, #29]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d109      	bne.n	800af92 <dir_find+0x1f8>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af82:	4618      	mov	r0, r3
 800af84:	f7ff fc06 	bl	800a794 <sum_sfn>
 800af88:	4603      	mov	r3, r0
 800af8a:	461a      	mov	r2, r3
 800af8c:	7f3b      	ldrb	r3, [r7, #28]
 800af8e:	4293      	cmp	r3, r2
 800af90:	d024      	beq.n	800afdc <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800af98:	f003 0301 	and.w	r3, r3, #1
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d10a      	bne.n	800afb6 <dir_find+0x21c>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	3340      	adds	r3, #64	; 0x40
 800afa8:	220b      	movs	r2, #11
 800afaa:	4619      	mov	r1, r3
 800afac:	f7fe f844 	bl	8009038 <mem_cmp>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d014      	beq.n	800afe0 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800afb6:	23ff      	movs	r3, #255	; 0xff
 800afb8:	777b      	strb	r3, [r7, #29]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f04f 32ff 	mov.w	r2, #4294967295
 800afc0:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800afc2:	2100      	movs	r1, #0
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f7ff f8aa 	bl	800a11e <dir_next>
 800afca:	4603      	mov	r3, r0
 800afcc:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800afce:	7ffb      	ldrb	r3, [r7, #31]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	f43f af65 	beq.w	800aea0 <dir_find+0x106>
 800afd6:	e004      	b.n	800afe2 <dir_find+0x248>
		if (res != FR_OK) break;
 800afd8:	bf00      	nop
 800afda:	e002      	b.n	800afe2 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800afdc:	bf00      	nop
 800afde:	e000      	b.n	800afe2 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800afe0:	bf00      	nop

	return res;
 800afe2:	7ffb      	ldrb	r3, [r7, #31]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3724      	adds	r7, #36	; 0x24
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd90      	pop	{r4, r7, pc}

0800afec <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800afec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800aff0:	b0a0      	sub	sp, #128	; 0x80
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800b002:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d001      	beq.n	800b00e <dir_register+0x22>
 800b00a:	2306      	movs	r3, #6
 800b00c:	e18e      	b.n	800b32c <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b00e:	2300      	movs	r3, #0
 800b010:	677b      	str	r3, [r7, #116]	; 0x74
 800b012:	e002      	b.n	800b01a <dir_register+0x2e>
 800b014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b016:	3301      	adds	r3, #1
 800b018:	677b      	str	r3, [r7, #116]	; 0x74
 800b01a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b01c:	68da      	ldr	r2, [r3, #12]
 800b01e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b020:	005b      	lsls	r3, r3, #1
 800b022:	4413      	add	r3, r2
 800b024:	881b      	ldrh	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d1f4      	bne.n	800b014 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b02a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	2b04      	cmp	r3, #4
 800b030:	f040 809f 	bne.w	800b172 <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800b034:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b036:	330e      	adds	r3, #14
 800b038:	4aa2      	ldr	r2, [pc, #648]	; (800b2c4 <dir_register+0x2d8>)
 800b03a:	fba2 2303 	umull	r2, r3, r2, r3
 800b03e:	08db      	lsrs	r3, r3, #3
 800b040:	3302      	adds	r3, #2
 800b042:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800b044:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f7ff f93e 	bl	800a2c8 <dir_alloc>
 800b04c:	4603      	mov	r3, r0
 800b04e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800b052:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b056:	2b00      	cmp	r3, #0
 800b058:	d002      	beq.n	800b060 <dir_register+0x74>
 800b05a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b05e:	e165      	b.n	800b32c <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b064:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b066:	3b01      	subs	r3, #1
 800b068:	015b      	lsls	r3, r3, #5
 800b06a:	1ad2      	subs	r2, r2, r3
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d072      	beq.n	800b15e <dir_register+0x172>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	79db      	ldrb	r3, [r3, #7]
 800b07c:	f003 0304 	and.w	r3, r3, #4
 800b080:	2b00      	cmp	r3, #0
 800b082:	d06c      	beq.n	800b15e <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b08a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b08c:	8949      	ldrh	r1, [r1, #10]
 800b08e:	0249      	lsls	r1, r1, #9
 800b090:	2000      	movs	r0, #0
 800b092:	460c      	mov	r4, r1
 800b094:	4605      	mov	r5, r0
 800b096:	eb12 0804 	adds.w	r8, r2, r4
 800b09a:	eb43 0905 	adc.w	r9, r3, r5
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7fe fd5a 	bl	8009b60 <fill_first_frag>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b0b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d002      	beq.n	800b0c0 <dir_register+0xd4>
 800b0ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b0be:	e135      	b.n	800b32c <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	f7fe fd77 	bl	8009bbe <fill_last_frag>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b0d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d002      	beq.n	800b0e4 <dir_register+0xf8>
 800b0de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b0e2:	e123      	b.n	800b32c <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	f107 0308 	add.w	r3, r7, #8
 800b0ea:	4611      	mov	r1, r2
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7ff fc95 	bl	800aa1c <load_obj_dir>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b0f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d002      	beq.n	800b106 <dir_register+0x11a>
 800b100:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b104:	e112      	b.n	800b32c <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800b106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b114:	4608      	mov	r0, r1
 800b116:	f7fd fece 	bl	8008eb6 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800b11a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b11c:	691b      	ldr	r3, [r3, #16]
 800b11e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b128:	4608      	mov	r0, r1
 800b12a:	f7fd fec4 	bl	8008eb6 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	79da      	ldrb	r2, [r3, #7]
 800b132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	3321      	adds	r3, #33	; 0x21
 800b138:	f042 0201 	orr.w	r2, r2, #1
 800b13c:	b2d2      	uxtb	r2, r2
 800b13e:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800b140:	f107 0308 	add.w	r3, r7, #8
 800b144:	4618      	mov	r0, r3
 800b146:	f7ff fc9f 	bl	800aa88 <store_xdir>
 800b14a:	4603      	mov	r3, r0
 800b14c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b150:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b154:	2b00      	cmp	r3, #0
 800b156:	d002      	beq.n	800b15e <dir_register+0x172>
 800b158:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b15c:	e0e6      	b.n	800b32c <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800b15e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b160:	691a      	ldr	r2, [r3, #16]
 800b162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b164:	68db      	ldr	r3, [r3, #12]
 800b166:	4619      	mov	r1, r3
 800b168:	4610      	mov	r0, r2
 800b16a:	f7ff fce8 	bl	800ab3e <create_xdir>
		return FR_OK;
 800b16e:	2300      	movs	r3, #0
 800b170:	e0dc      	b.n	800b32c <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800b178:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b17c:	220c      	movs	r2, #12
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fd ff20 	bl	8008fc4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b184:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b188:	f003 0301 	and.w	r3, r3, #1
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d033      	beq.n	800b1f8 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2240      	movs	r2, #64	; 0x40
 800b194:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800b198:	2301      	movs	r3, #1
 800b19a:	67bb      	str	r3, [r7, #120]	; 0x78
 800b19c:	e016      	b.n	800b1cc <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800b1a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1a6:	68da      	ldr	r2, [r3, #12]
 800b1a8:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800b1ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1ae:	f7ff fa63 	bl	800a678 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f7ff fdf1 	bl	800ad9a <dir_find>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800b1be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d106      	bne.n	800b1d4 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800b1c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	67bb      	str	r3, [r7, #120]	; 0x78
 800b1cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1ce:	2b63      	cmp	r3, #99	; 0x63
 800b1d0:	d9e5      	bls.n	800b19e <dir_register+0x1b2>
 800b1d2:	e000      	b.n	800b1d6 <dir_register+0x1ea>
			if (res != FR_OK) break;
 800b1d4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b1d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1d8:	2b64      	cmp	r3, #100	; 0x64
 800b1da:	d101      	bne.n	800b1e0 <dir_register+0x1f4>
 800b1dc:	2307      	movs	r3, #7
 800b1de:	e0a5      	b.n	800b32c <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b1e0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b1e4:	2b04      	cmp	r3, #4
 800b1e6:	d002      	beq.n	800b1ee <dir_register+0x202>
 800b1e8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b1ec:	e09e      	b.n	800b32c <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b1ee:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b1f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b1fc:	f003 0302 	and.w	r3, r3, #2
 800b200:	2b00      	cmp	r3, #0
 800b202:	d007      	beq.n	800b214 <dir_register+0x228>
 800b204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b206:	330c      	adds	r3, #12
 800b208:	4a2f      	ldr	r2, [pc, #188]	; (800b2c8 <dir_register+0x2dc>)
 800b20a:	fba2 2303 	umull	r2, r3, r2, r3
 800b20e:	089b      	lsrs	r3, r3, #2
 800b210:	3301      	adds	r3, #1
 800b212:	e000      	b.n	800b216 <dir_register+0x22a>
 800b214:	2301      	movs	r3, #1
 800b216:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b218:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f7ff f854 	bl	800a2c8 <dir_alloc>
 800b220:	4603      	mov	r3, r0
 800b222:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b226:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d14f      	bne.n	800b2ce <dir_register+0x2e2>
 800b22e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b230:	3b01      	subs	r3, #1
 800b232:	673b      	str	r3, [r7, #112]	; 0x70
 800b234:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b236:	2b00      	cmp	r3, #0
 800b238:	d049      	beq.n	800b2ce <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b23e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b240:	015b      	lsls	r3, r3, #5
 800b242:	1ad3      	subs	r3, r2, r3
 800b244:	4619      	mov	r1, r3
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f7fe fee3 	bl	800a012 <dir_sdi>
 800b24c:	4603      	mov	r3, r0
 800b24e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800b252:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b256:	2b00      	cmp	r3, #0
 800b258:	d139      	bne.n	800b2ce <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	3340      	adds	r3, #64	; 0x40
 800b25e:	4618      	mov	r0, r3
 800b260:	f7ff fa98 	bl	800a794 <sum_sfn>
 800b264:	4603      	mov	r3, r0
 800b266:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b26e:	4619      	mov	r1, r3
 800b270:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b272:	f7fe f8cb 	bl	800940c <move_window>
 800b276:	4603      	mov	r3, r0
 800b278:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800b27c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b280:	2b00      	cmp	r3, #0
 800b282:	d123      	bne.n	800b2cc <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b286:	68d8      	ldr	r0, [r3, #12]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800b28c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b28e:	b2da      	uxtb	r2, r3
 800b290:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800b294:	f7ff f988 	bl	800a5a8 <put_lfn>
				fs->wflag = 1;
 800b298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b29a:	2201      	movs	r2, #1
 800b29c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b29e:	2100      	movs	r1, #0
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f7fe ff3c 	bl	800a11e <dir_next>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800b2ac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d10c      	bne.n	800b2ce <dir_register+0x2e2>
 800b2b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b2b6:	3b01      	subs	r3, #1
 800b2b8:	673b      	str	r3, [r7, #112]	; 0x70
 800b2ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d1d4      	bne.n	800b26a <dir_register+0x27e>
 800b2c0:	e005      	b.n	800b2ce <dir_register+0x2e2>
 800b2c2:	bf00      	nop
 800b2c4:	88888889 	.word	0x88888889
 800b2c8:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800b2cc:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b2ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d128      	bne.n	800b328 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2da:	4619      	mov	r1, r3
 800b2dc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b2de:	f7fe f895 	bl	800940c <move_window>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800b2e8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d11b      	bne.n	800b328 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2f4:	2220      	movs	r2, #32
 800b2f6:	2100      	movs	r1, #0
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f7fd fe83 	bl	8009004 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	3340      	adds	r3, #64	; 0x40
 800b306:	220b      	movs	r2, #11
 800b308:	4619      	mov	r1, r3
 800b30a:	f7fd fe5b 	bl	8008fc4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b318:	330c      	adds	r3, #12
 800b31a:	f002 0218 	and.w	r2, r2, #24
 800b31e:	b2d2      	uxtb	r2, r2
 800b320:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b324:	2201      	movs	r2, #1
 800b326:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b328:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3780      	adds	r7, #128	; 0x80
 800b330:	46bd      	mov	sp, r7
 800b332:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b336:	bf00      	nop

0800b338 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b08a      	sub	sp, #40	; 0x28
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	613b      	str	r3, [r7, #16]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	60fb      	str	r3, [r7, #12]
 800b350:	2300      	movs	r3, #0
 800b352:	617b      	str	r3, [r7, #20]
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b358:	69bb      	ldr	r3, [r7, #24]
 800b35a:	1c5a      	adds	r2, r3, #1
 800b35c:	61ba      	str	r2, [r7, #24]
 800b35e:	693a      	ldr	r2, [r7, #16]
 800b360:	4413      	add	r3, r2
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b366:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b368:	2b1f      	cmp	r3, #31
 800b36a:	d940      	bls.n	800b3ee <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b36c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b36e:	2b2f      	cmp	r3, #47	; 0x2f
 800b370:	d006      	beq.n	800b380 <create_name+0x48>
 800b372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b374:	2b5c      	cmp	r3, #92	; 0x5c
 800b376:	d110      	bne.n	800b39a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b378:	e002      	b.n	800b380 <create_name+0x48>
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	3301      	adds	r3, #1
 800b37e:	61bb      	str	r3, [r7, #24]
 800b380:	693a      	ldr	r2, [r7, #16]
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	4413      	add	r3, r2
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	2b2f      	cmp	r3, #47	; 0x2f
 800b38a:	d0f6      	beq.n	800b37a <create_name+0x42>
 800b38c:	693a      	ldr	r2, [r7, #16]
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	4413      	add	r3, r2
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	2b5c      	cmp	r3, #92	; 0x5c
 800b396:	d0f0      	beq.n	800b37a <create_name+0x42>
			break;
 800b398:	e02a      	b.n	800b3f0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	2bfe      	cmp	r3, #254	; 0xfe
 800b39e:	d901      	bls.n	800b3a4 <create_name+0x6c>
 800b3a0:	2306      	movs	r3, #6
 800b3a2:	e17d      	b.n	800b6a0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b3a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3a6:	b2db      	uxtb	r3, r3
 800b3a8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b3aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3ac:	2101      	movs	r1, #1
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f001 ff38 	bl	800d224 <ff_convert>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b3b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d101      	bne.n	800b3c2 <create_name+0x8a>
 800b3be:	2306      	movs	r3, #6
 800b3c0:	e16e      	b.n	800b6a0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b3c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3c4:	2b7f      	cmp	r3, #127	; 0x7f
 800b3c6:	d809      	bhi.n	800b3dc <create_name+0xa4>
 800b3c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	488d      	ldr	r0, [pc, #564]	; (800b604 <create_name+0x2cc>)
 800b3ce:	f7fd fe59 	bl	8009084 <chk_chr>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d001      	beq.n	800b3dc <create_name+0xa4>
 800b3d8:	2306      	movs	r3, #6
 800b3da:	e161      	b.n	800b6a0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	1c5a      	adds	r2, r3, #1
 800b3e0:	617a      	str	r2, [r7, #20]
 800b3e2:	005b      	lsls	r3, r3, #1
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b3ea:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b3ec:	e7b4      	b.n	800b358 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b3ee:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b3f0:	693a      	ldr	r2, [r7, #16]
 800b3f2:	69bb      	ldr	r3, [r7, #24]
 800b3f4:	441a      	add	r2, r3
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b3fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3fc:	2b1f      	cmp	r3, #31
 800b3fe:	d801      	bhi.n	800b404 <create_name+0xcc>
 800b400:	2304      	movs	r3, #4
 800b402:	e000      	b.n	800b406 <create_name+0xce>
 800b404:	2300      	movs	r3, #0
 800b406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b40a:	e011      	b.n	800b430 <create_name+0xf8>
		w = lfn[di - 1];
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b412:	3b01      	subs	r3, #1
 800b414:	005b      	lsls	r3, r3, #1
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	4413      	add	r3, r2
 800b41a:	881b      	ldrh	r3, [r3, #0]
 800b41c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b41e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b420:	2b20      	cmp	r3, #32
 800b422:	d002      	beq.n	800b42a <create_name+0xf2>
 800b424:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b426:	2b2e      	cmp	r3, #46	; 0x2e
 800b428:	d106      	bne.n	800b438 <create_name+0x100>
		di--;
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	3b01      	subs	r3, #1
 800b42e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d1ea      	bne.n	800b40c <create_name+0xd4>
 800b436:	e000      	b.n	800b43a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b438:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	005b      	lsls	r3, r3, #1
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	4413      	add	r3, r2
 800b442:	2200      	movs	r2, #0
 800b444:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d101      	bne.n	800b450 <create_name+0x118>
 800b44c:	2306      	movs	r3, #6
 800b44e:	e127      	b.n	800b6a0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	3340      	adds	r3, #64	; 0x40
 800b454:	220b      	movs	r2, #11
 800b456:	2120      	movs	r1, #32
 800b458:	4618      	mov	r0, r3
 800b45a:	f7fd fdd3 	bl	8009004 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b45e:	2300      	movs	r3, #0
 800b460:	61bb      	str	r3, [r7, #24]
 800b462:	e002      	b.n	800b46a <create_name+0x132>
 800b464:	69bb      	ldr	r3, [r7, #24]
 800b466:	3301      	adds	r3, #1
 800b468:	61bb      	str	r3, [r7, #24]
 800b46a:	69bb      	ldr	r3, [r7, #24]
 800b46c:	005b      	lsls	r3, r3, #1
 800b46e:	68fa      	ldr	r2, [r7, #12]
 800b470:	4413      	add	r3, r2
 800b472:	881b      	ldrh	r3, [r3, #0]
 800b474:	2b20      	cmp	r3, #32
 800b476:	d0f5      	beq.n	800b464 <create_name+0x12c>
 800b478:	69bb      	ldr	r3, [r7, #24]
 800b47a:	005b      	lsls	r3, r3, #1
 800b47c:	68fa      	ldr	r2, [r7, #12]
 800b47e:	4413      	add	r3, r2
 800b480:	881b      	ldrh	r3, [r3, #0]
 800b482:	2b2e      	cmp	r3, #46	; 0x2e
 800b484:	d0ee      	beq.n	800b464 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b486:	69bb      	ldr	r3, [r7, #24]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d009      	beq.n	800b4a0 <create_name+0x168>
 800b48c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b490:	f043 0303 	orr.w	r3, r3, #3
 800b494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b498:	e002      	b.n	800b4a0 <create_name+0x168>
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	3b01      	subs	r3, #1
 800b49e:	617b      	str	r3, [r7, #20]
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d009      	beq.n	800b4ba <create_name+0x182>
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b4ac:	3b01      	subs	r3, #1
 800b4ae:	005b      	lsls	r3, r3, #1
 800b4b0:	68fa      	ldr	r2, [r7, #12]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	881b      	ldrh	r3, [r3, #0]
 800b4b6:	2b2e      	cmp	r3, #46	; 0x2e
 800b4b8:	d1ef      	bne.n	800b49a <create_name+0x162>

	i = b = 0; ni = 8;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	623b      	str	r3, [r7, #32]
 800b4c4:	2308      	movs	r3, #8
 800b4c6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	1c5a      	adds	r2, r3, #1
 800b4cc:	61ba      	str	r2, [r7, #24]
 800b4ce:	005b      	lsls	r3, r3, #1
 800b4d0:	68fa      	ldr	r2, [r7, #12]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	881b      	ldrh	r3, [r3, #0]
 800b4d6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b4d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f000 8090 	beq.w	800b600 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b4e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4e2:	2b20      	cmp	r3, #32
 800b4e4:	d006      	beq.n	800b4f4 <create_name+0x1bc>
 800b4e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4e8:	2b2e      	cmp	r3, #46	; 0x2e
 800b4ea:	d10a      	bne.n	800b502 <create_name+0x1ca>
 800b4ec:	69ba      	ldr	r2, [r7, #24]
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d006      	beq.n	800b502 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b4f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4f8:	f043 0303 	orr.w	r3, r3, #3
 800b4fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b500:	e07d      	b.n	800b5fe <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b502:	6a3a      	ldr	r2, [r7, #32]
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	429a      	cmp	r2, r3
 800b508:	d203      	bcs.n	800b512 <create_name+0x1da>
 800b50a:	69ba      	ldr	r2, [r7, #24]
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	429a      	cmp	r2, r3
 800b510:	d123      	bne.n	800b55a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b512:	69fb      	ldr	r3, [r7, #28]
 800b514:	2b0b      	cmp	r3, #11
 800b516:	d106      	bne.n	800b526 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b51c:	f043 0303 	orr.w	r3, r3, #3
 800b520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b524:	e075      	b.n	800b612 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b526:	69ba      	ldr	r2, [r7, #24]
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d005      	beq.n	800b53a <create_name+0x202>
 800b52e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b532:	f043 0303 	orr.w	r3, r3, #3
 800b536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b53a:	69ba      	ldr	r2, [r7, #24]
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	429a      	cmp	r2, r3
 800b540:	d866      	bhi.n	800b610 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	61bb      	str	r3, [r7, #24]
 800b546:	2308      	movs	r3, #8
 800b548:	623b      	str	r3, [r7, #32]
 800b54a:	230b      	movs	r3, #11
 800b54c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b54e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b552:	009b      	lsls	r3, r3, #2
 800b554:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b558:	e051      	b.n	800b5fe <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b55a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b55c:	2b7f      	cmp	r3, #127	; 0x7f
 800b55e:	d914      	bls.n	800b58a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b560:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b562:	2100      	movs	r1, #0
 800b564:	4618      	mov	r0, r3
 800b566:	f001 fe5d 	bl	800d224 <ff_convert>
 800b56a:	4603      	mov	r3, r0
 800b56c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b56e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b570:	2b00      	cmp	r3, #0
 800b572:	d004      	beq.n	800b57e <create_name+0x246>
 800b574:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b576:	3b80      	subs	r3, #128	; 0x80
 800b578:	4a23      	ldr	r2, [pc, #140]	; (800b608 <create_name+0x2d0>)
 800b57a:	5cd3      	ldrb	r3, [r2, r3]
 800b57c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b57e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b582:	f043 0302 	orr.w	r3, r3, #2
 800b586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b58a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d007      	beq.n	800b5a0 <create_name+0x268>
 800b590:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b592:	4619      	mov	r1, r3
 800b594:	481d      	ldr	r0, [pc, #116]	; (800b60c <create_name+0x2d4>)
 800b596:	f7fd fd75 	bl	8009084 <chk_chr>
 800b59a:	4603      	mov	r3, r0
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d008      	beq.n	800b5b2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b5a0:	235f      	movs	r3, #95	; 0x5f
 800b5a2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b5a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5a8:	f043 0303 	orr.w	r3, r3, #3
 800b5ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b5b0:	e01b      	b.n	800b5ea <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b5b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b5b4:	2b40      	cmp	r3, #64	; 0x40
 800b5b6:	d909      	bls.n	800b5cc <create_name+0x294>
 800b5b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b5ba:	2b5a      	cmp	r3, #90	; 0x5a
 800b5bc:	d806      	bhi.n	800b5cc <create_name+0x294>
					b |= 2;
 800b5be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b5c2:	f043 0302 	orr.w	r3, r3, #2
 800b5c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b5ca:	e00e      	b.n	800b5ea <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b5cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b5ce:	2b60      	cmp	r3, #96	; 0x60
 800b5d0:	d90b      	bls.n	800b5ea <create_name+0x2b2>
 800b5d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b5d4:	2b7a      	cmp	r3, #122	; 0x7a
 800b5d6:	d808      	bhi.n	800b5ea <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b5d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b5dc:	f043 0301 	orr.w	r3, r3, #1
 800b5e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b5e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b5e6:	3b20      	subs	r3, #32
 800b5e8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b5ea:	6a3b      	ldr	r3, [r7, #32]
 800b5ec:	1c5a      	adds	r2, r3, #1
 800b5ee:	623a      	str	r2, [r7, #32]
 800b5f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b5f2:	b2d1      	uxtb	r1, r2
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	460a      	mov	r2, r1
 800b5fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800b5fe:	e763      	b.n	800b4c8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b600:	bf00      	nop
 800b602:	e006      	b.n	800b612 <create_name+0x2da>
 800b604:	080152d4 	.word	0x080152d4
 800b608:	0801556c 	.word	0x0801556c
 800b60c:	080152e0 	.word	0x080152e0
			if (si > di) break;			/* No extension */
 800b610:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b618:	2be5      	cmp	r3, #229	; 0xe5
 800b61a:	d103      	bne.n	800b624 <create_name+0x2ec>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2205      	movs	r2, #5
 800b620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800b624:	69fb      	ldr	r3, [r7, #28]
 800b626:	2b08      	cmp	r3, #8
 800b628:	d104      	bne.n	800b634 <create_name+0x2fc>
 800b62a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b634:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b638:	f003 030c 	and.w	r3, r3, #12
 800b63c:	2b0c      	cmp	r3, #12
 800b63e:	d005      	beq.n	800b64c <create_name+0x314>
 800b640:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b644:	f003 0303 	and.w	r3, r3, #3
 800b648:	2b03      	cmp	r3, #3
 800b64a:	d105      	bne.n	800b658 <create_name+0x320>
 800b64c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b650:	f043 0302 	orr.w	r3, r3, #2
 800b654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b65c:	f003 0302 	and.w	r3, r3, #2
 800b660:	2b00      	cmp	r3, #0
 800b662:	d117      	bne.n	800b694 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b664:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b668:	f003 0303 	and.w	r3, r3, #3
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d105      	bne.n	800b67c <create_name+0x344>
 800b670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b674:	f043 0310 	orr.w	r3, r3, #16
 800b678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b67c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b680:	f003 030c 	and.w	r3, r3, #12
 800b684:	2b04      	cmp	r3, #4
 800b686:	d105      	bne.n	800b694 <create_name+0x35c>
 800b688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b68c:	f043 0308 	orr.w	r3, r3, #8
 800b690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b69a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800b69e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3728      	adds	r7, #40	; 0x28
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b086      	sub	sp, #24
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b6bc:	e002      	b.n	800b6c4 <follow_path+0x1c>
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	603b      	str	r3, [r7, #0]
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	2b2f      	cmp	r3, #47	; 0x2f
 800b6ca:	d0f8      	beq.n	800b6be <follow_path+0x16>
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	2b5c      	cmp	r3, #92	; 0x5c
 800b6d2:	d0f4      	beq.n	800b6be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	2b1f      	cmp	r3, #31
 800b6e6:	d80a      	bhi.n	800b6fe <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2280      	movs	r2, #128	; 0x80
 800b6ec:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f7fe fc8d 	bl	800a012 <dir_sdi>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	75fb      	strb	r3, [r7, #23]
 800b6fc:	e078      	b.n	800b7f0 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b6fe:	463b      	mov	r3, r7
 800b700:	4619      	mov	r1, r3
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f7ff fe18 	bl	800b338 <create_name>
 800b708:	4603      	mov	r3, r0
 800b70a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b70c:	7dfb      	ldrb	r3, [r7, #23]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d169      	bne.n	800b7e6 <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f7ff fb41 	bl	800ad9a <dir_find>
 800b718:	4603      	mov	r3, r0
 800b71a:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800b722:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b724:	7dfb      	ldrb	r3, [r7, #23]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d00a      	beq.n	800b740 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b72a:	7dfb      	ldrb	r3, [r7, #23]
 800b72c:	2b04      	cmp	r3, #4
 800b72e:	d15c      	bne.n	800b7ea <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b730:	7afb      	ldrb	r3, [r7, #11]
 800b732:	f003 0304 	and.w	r3, r3, #4
 800b736:	2b00      	cmp	r3, #0
 800b738:	d157      	bne.n	800b7ea <follow_path+0x142>
 800b73a:	2305      	movs	r3, #5
 800b73c:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b73e:	e054      	b.n	800b7ea <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b740:	7afb      	ldrb	r3, [r7, #11]
 800b742:	f003 0304 	and.w	r3, r3, #4
 800b746:	2b00      	cmp	r3, #0
 800b748:	d151      	bne.n	800b7ee <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	799b      	ldrb	r3, [r3, #6]
 800b74e:	f003 0310 	and.w	r3, r3, #16
 800b752:	2b00      	cmp	r3, #0
 800b754:	d102      	bne.n	800b75c <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800b756:	2305      	movs	r3, #5
 800b758:	75fb      	strb	r3, [r7, #23]
 800b75a:	e049      	b.n	800b7f0 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	2b04      	cmp	r3, #4
 800b762:	d130      	bne.n	800b7c6 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	689a      	ldr	r2, [r3, #8]
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b772:	4613      	mov	r3, r2
 800b774:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b778:	693a      	ldr	r2, [r7, #16]
 800b77a:	79d2      	ldrb	r2, [r2, #7]
 800b77c:	431a      	orrs	r2, r3
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	691b      	ldr	r3, [r3, #16]
 800b78e:	3334      	adds	r3, #52	; 0x34
 800b790:	4618      	mov	r0, r3
 800b792:	f7fd fa50 	bl	8008c36 <ld_dword>
 800b796:	4602      	mov	r2, r0
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	691b      	ldr	r3, [r3, #16]
 800b7a0:	3321      	adds	r3, #33	; 0x21
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	f003 0302 	and.w	r3, r3, #2
 800b7a8:	b2da      	uxtb	r2, r3
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	691b      	ldr	r3, [r3, #16]
 800b7b2:	3338      	adds	r3, #56	; 0x38
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f7fd fa60 	bl	8008c7a <ld_qword>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	460b      	mov	r3, r1
 800b7be:	6939      	ldr	r1, [r7, #16]
 800b7c0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800b7c4:	e79b      	b.n	800b6fe <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7d4:	4413      	add	r3, r2
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	68f8      	ldr	r0, [r7, #12]
 800b7da:	f7fe fdd1 	bl	800a380 <ld_clust>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b7e4:	e78b      	b.n	800b6fe <follow_path+0x56>
			if (res != FR_OK) break;
 800b7e6:	bf00      	nop
 800b7e8:	e002      	b.n	800b7f0 <follow_path+0x148>
				break;
 800b7ea:	bf00      	nop
 800b7ec:	e000      	b.n	800b7f0 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b7ee:	bf00      	nop
			}
		}
	}

	return res;
 800b7f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3718      	adds	r7, #24
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b7fa:	b480      	push	{r7}
 800b7fc:	b087      	sub	sp, #28
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b802:	f04f 33ff 	mov.w	r3, #4294967295
 800b806:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d031      	beq.n	800b874 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	617b      	str	r3, [r7, #20]
 800b816:	e002      	b.n	800b81e <get_ldnumber+0x24>
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	3301      	adds	r3, #1
 800b81c:	617b      	str	r3, [r7, #20]
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	2b1f      	cmp	r3, #31
 800b824:	d903      	bls.n	800b82e <get_ldnumber+0x34>
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	2b3a      	cmp	r3, #58	; 0x3a
 800b82c:	d1f4      	bne.n	800b818 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	2b3a      	cmp	r3, #58	; 0x3a
 800b834:	d11c      	bne.n	800b870 <get_ldnumber+0x76>
			tp = *path;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	1c5a      	adds	r2, r3, #1
 800b840:	60fa      	str	r2, [r7, #12]
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	3b30      	subs	r3, #48	; 0x30
 800b846:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	2b09      	cmp	r3, #9
 800b84c:	d80e      	bhi.n	800b86c <get_ldnumber+0x72>
 800b84e:	68fa      	ldr	r2, [r7, #12]
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	429a      	cmp	r2, r3
 800b854:	d10a      	bne.n	800b86c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	2b03      	cmp	r3, #3
 800b85a:	d807      	bhi.n	800b86c <get_ldnumber+0x72>
					vol = (int)i;
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	3301      	adds	r3, #1
 800b864:	617b      	str	r3, [r7, #20]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	697a      	ldr	r2, [r7, #20]
 800b86a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	e002      	b.n	800b876 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b870:	2300      	movs	r3, #0
 800b872:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b874:	693b      	ldr	r3, [r7, #16]
}
 800b876:	4618      	mov	r0, r3
 800b878:	371c      	adds	r7, #28
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bc80      	pop	{r7}
 800b87e:	4770      	bx	lr

0800b880 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	70da      	strb	r2, [r3, #3]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f04f 32ff 	mov.w	r2, #4294967295
 800b896:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b898:	6839      	ldr	r1, [r7, #0]
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f7fd fdb6 	bl	800940c <move_window>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d001      	beq.n	800b8aa <check_fs+0x2a>
 800b8a6:	2304      	movs	r3, #4
 800b8a8:	e044      	b.n	800b934 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	3338      	adds	r3, #56	; 0x38
 800b8ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7fd f9a8 	bl	8008c08 <ld_word>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d001      	beq.n	800b8c8 <check_fs+0x48>
 800b8c4:	2303      	movs	r3, #3
 800b8c6:	e035      	b.n	800b934 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b8ce:	2be9      	cmp	r3, #233	; 0xe9
 800b8d0:	d009      	beq.n	800b8e6 <check_fs+0x66>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b8d8:	2beb      	cmp	r3, #235	; 0xeb
 800b8da:	d11e      	bne.n	800b91a <check_fs+0x9a>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b8e2:	2b90      	cmp	r3, #144	; 0x90
 800b8e4:	d119      	bne.n	800b91a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	3338      	adds	r3, #56	; 0x38
 800b8ea:	3336      	adds	r3, #54	; 0x36
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7fd f9a2 	bl	8008c36 <ld_dword>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b8f8:	4a10      	ldr	r2, [pc, #64]	; (800b93c <check_fs+0xbc>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d101      	bne.n	800b902 <check_fs+0x82>
 800b8fe:	2300      	movs	r3, #0
 800b900:	e018      	b.n	800b934 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	3338      	adds	r3, #56	; 0x38
 800b906:	3352      	adds	r3, #82	; 0x52
 800b908:	4618      	mov	r0, r3
 800b90a:	f7fd f994 	bl	8008c36 <ld_dword>
 800b90e:	4603      	mov	r3, r0
 800b910:	4a0b      	ldr	r2, [pc, #44]	; (800b940 <check_fs+0xc0>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d101      	bne.n	800b91a <check_fs+0x9a>
 800b916:	2300      	movs	r3, #0
 800b918:	e00c      	b.n	800b934 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	3338      	adds	r3, #56	; 0x38
 800b91e:	220b      	movs	r2, #11
 800b920:	4908      	ldr	r1, [pc, #32]	; (800b944 <check_fs+0xc4>)
 800b922:	4618      	mov	r0, r3
 800b924:	f7fd fb88 	bl	8009038 <mem_cmp>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d101      	bne.n	800b932 <check_fs+0xb2>
 800b92e:	2301      	movs	r3, #1
 800b930:	e000      	b.n	800b934 <check_fs+0xb4>
#endif
	return 2;
 800b932:	2302      	movs	r3, #2
}
 800b934:	4618      	mov	r0, r3
 800b936:	3708      	adds	r7, #8
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	00544146 	.word	0x00544146
 800b940:	33544146 	.word	0x33544146
 800b944:	080152e8 	.word	0x080152e8

0800b948 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b94c:	b09c      	sub	sp, #112	; 0x70
 800b94e:	af00      	add	r7, sp, #0
 800b950:	61f8      	str	r0, [r7, #28]
 800b952:	61b9      	str	r1, [r7, #24]
 800b954:	4613      	mov	r3, r2
 800b956:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	2200      	movs	r2, #0
 800b95c:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b95e:	69f8      	ldr	r0, [r7, #28]
 800b960:	f7ff ff4b 	bl	800b7fa <get_ldnumber>
 800b964:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800b966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b968:	2b00      	cmp	r3, #0
 800b96a:	da01      	bge.n	800b970 <find_volume+0x28>
 800b96c:	230b      	movs	r3, #11
 800b96e:	e337      	b.n	800bfe0 <find_volume+0x698>


	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b970:	4a99      	ldr	r2, [pc, #612]	; (800bbd8 <find_volume+0x290>)
 800b972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b978:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b97a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d101      	bne.n	800b984 <find_volume+0x3c>
 800b980:	230c      	movs	r3, #12
 800b982:	e32d      	b.n	800bfe0 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b984:	69bb      	ldr	r3, [r7, #24]
 800b986:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b988:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b98a:	7dfb      	ldrb	r3, [r7, #23]
 800b98c:	f023 0301 	bic.w	r3, r3, #1
 800b990:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d01a      	beq.n	800b9d0 <find_volume+0x88>

		stat = disk_status(fs->drv);
 800b99a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b99c:	785b      	ldrb	r3, [r3, #1]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7fd f892 	bl	8008ac8 <disk_status>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b9aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b9ae:	f003 0301 	and.w	r3, r3, #1
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d10c      	bne.n	800b9d0 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b9b6:	7dfb      	ldrb	r3, [r7, #23]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d007      	beq.n	800b9cc <find_volume+0x84>
 800b9bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b9c0:	f003 0304 	and.w	r3, r3, #4
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d001      	beq.n	800b9cc <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800b9c8:	230a      	movs	r3, #10
 800b9ca:	e309      	b.n	800bfe0 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	e307      	b.n	800bfe0 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b9d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b9d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9d8:	b2da      	uxtb	r2, r3
 800b9da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9dc:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b9de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9e0:	785b      	ldrb	r3, [r3, #1]
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7fd f88a 	bl	8008afc <disk_initialize>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b9ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b9f2:	f003 0301 	and.w	r3, r3, #1
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <find_volume+0xb6>
	  return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b9fa:	2303      	movs	r3, #3
 800b9fc:	e2f0      	b.n	800bfe0 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b9fe:	7dfb      	ldrb	r3, [r7, #23]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d007      	beq.n	800ba14 <find_volume+0xcc>
 800ba04:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ba08:	f003 0304 	and.w	r3, r3, #4
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d001      	beq.n	800ba14 <find_volume+0xcc>
	  return FR_WRITE_PROTECTED;
 800ba10:	230a      	movs	r3, #10
 800ba12:	e2e5      	b.n	800bfe0 <find_volume+0x698>
	  return FR_DISK_ERR;
	}
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ba14:	2300      	movs	r3, #0
 800ba16:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ba18:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ba1a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ba1c:	f7ff ff30 	bl	800b880 <check_fs>
 800ba20:	4603      	mov	r3, r0
 800ba22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ba26:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ba2a:	2b02      	cmp	r3, #2
 800ba2c:	d14d      	bne.n	800baca <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ba2e:	2300      	movs	r3, #0
 800ba30:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba32:	e020      	b.n	800ba76 <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ba34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba36:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ba3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba3c:	011b      	lsls	r3, r3, #4
 800ba3e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ba42:	4413      	add	r3, r2
 800ba44:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ba46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba48:	3304      	adds	r3, #4
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d006      	beq.n	800ba5e <find_volume+0x116>
 800ba50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba52:	3308      	adds	r3, #8
 800ba54:	4618      	mov	r0, r3
 800ba56:	f7fd f8ee 	bl	8008c36 <ld_dword>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	e000      	b.n	800ba60 <find_volume+0x118>
 800ba5e:	2200      	movs	r2, #0
 800ba60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	3360      	adds	r3, #96	; 0x60
 800ba66:	f107 0110 	add.w	r1, r7, #16
 800ba6a:	440b      	add	r3, r1
 800ba6c:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ba70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba72:	3301      	adds	r3, #1
 800ba74:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba78:	2b03      	cmp	r3, #3
 800ba7a:	d9db      	bls.n	800ba34 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800ba80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d002      	beq.n	800ba8c <find_volume+0x144>
 800ba86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba88:	3b01      	subs	r3, #1
 800ba8a:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ba8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba8e:	009b      	lsls	r3, r3, #2
 800ba90:	3360      	adds	r3, #96	; 0x60
 800ba92:	f107 0210 	add.w	r2, r7, #16
 800ba96:	4413      	add	r3, r2
 800ba98:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800ba9c:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ba9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d005      	beq.n	800bab0 <find_volume+0x168>
 800baa4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800baa6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800baa8:	f7ff feea 	bl	800b880 <check_fs>
 800baac:	4603      	mov	r3, r0
 800baae:	e000      	b.n	800bab2 <find_volume+0x16a>
 800bab0:	2303      	movs	r3, #3
 800bab2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bab6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800baba:	2b01      	cmp	r3, #1
 800babc:	d905      	bls.n	800baca <find_volume+0x182>
 800babe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bac0:	3301      	adds	r3, #1
 800bac2:	65bb      	str	r3, [r7, #88]	; 0x58
 800bac4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bac6:	2b03      	cmp	r3, #3
 800bac8:	d9e0      	bls.n	800ba8c <find_volume+0x144>
	}
	if (fmt == 4) {
 800baca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bace:	2b04      	cmp	r3, #4
 800bad0:	d101      	bne.n	800bad6 <find_volume+0x18e>
		return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bad2:	2301      	movs	r3, #1
 800bad4:	e284      	b.n	800bfe0 <find_volume+0x698>
	}
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bad6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bada:	2b01      	cmp	r3, #1
 800badc:	d901      	bls.n	800bae2 <find_volume+0x19a>
 800bade:	230d      	movs	r3, #13
 800bae0:	e27e      	b.n	800bfe0 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800bae2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	f040 80fa 	bne.w	800bce0 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800baec:	230b      	movs	r3, #11
 800baee:	65bb      	str	r3, [r7, #88]	; 0x58
 800baf0:	e002      	b.n	800baf8 <find_volume+0x1b0>
 800baf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800baf4:	3301      	adds	r3, #1
 800baf6:	65bb      	str	r3, [r7, #88]	; 0x58
 800baf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bafa:	2b3f      	cmp	r3, #63	; 0x3f
 800bafc:	d806      	bhi.n	800bb0c <find_volume+0x1c4>
 800bafe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb02:	4413      	add	r3, r2
 800bb04:	3338      	adds	r3, #56	; 0x38
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d0f2      	beq.n	800baf2 <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800bb0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb0e:	2b3f      	cmp	r3, #63	; 0x3f
 800bb10:	d801      	bhi.n	800bb16 <find_volume+0x1ce>
 800bb12:	230d      	movs	r3, #13
 800bb14:	e264      	b.n	800bfe0 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800bb16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb18:	3338      	adds	r3, #56	; 0x38
 800bb1a:	3368      	adds	r3, #104	; 0x68
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7fd f873 	bl	8008c08 <ld_word>
 800bb22:	4603      	mov	r3, r0
 800bb24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb28:	d001      	beq.n	800bb2e <find_volume+0x1e6>
 800bb2a:	230d      	movs	r3, #13
 800bb2c:	e258      	b.n	800bfe0 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800bb2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb30:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800bb34:	2b09      	cmp	r3, #9
 800bb36:	d001      	beq.n	800bb3c <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800bb38:	230d      	movs	r3, #13
 800bb3a:	e251      	b.n	800bfe0 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800bb3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb3e:	3338      	adds	r3, #56	; 0x38
 800bb40:	3348      	adds	r3, #72	; 0x48
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7fd f899 	bl	8008c7a <ld_qword>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bb4e:	2000      	movs	r0, #0
 800bb50:	60b9      	str	r1, [r7, #8]
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	68b9      	ldr	r1, [r7, #8]
 800bb56:	1851      	adds	r1, r2, r1
 800bb58:	6039      	str	r1, [r7, #0]
 800bb5a:	68f9      	ldr	r1, [r7, #12]
 800bb5c:	eb43 0101 	adc.w	r1, r3, r1
 800bb60:	6079      	str	r1, [r7, #4]
 800bb62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb66:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800bb6a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d301      	bcc.n	800bb76 <find_volume+0x22e>
 800bb72:	230d      	movs	r3, #13
 800bb74:	e234      	b.n	800bfe0 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800bb76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb78:	3338      	adds	r3, #56	; 0x38
 800bb7a:	3354      	adds	r3, #84	; 0x54
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7fd f85a 	bl	8008c36 <ld_dword>
 800bb82:	4602      	mov	r2, r0
 800bb84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb86:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800bb88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb8a:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 800bb8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb90:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800bb92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb94:	789b      	ldrb	r3, [r3, #2]
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d001      	beq.n	800bb9e <find_volume+0x256>
 800bb9a:	230d      	movs	r3, #13
 800bb9c:	e220      	b.n	800bfe0 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800bb9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bba0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800bba4:	461a      	mov	r2, r3
 800bba6:	2301      	movs	r3, #1
 800bba8:	4093      	lsls	r3, r2
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbae:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800bbb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbb2:	895b      	ldrh	r3, [r3, #10]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d101      	bne.n	800bbbc <find_volume+0x274>
 800bbb8:	230d      	movs	r3, #13
 800bbba:	e211      	b.n	800bfe0 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800bbbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbbe:	3338      	adds	r3, #56	; 0x38
 800bbc0:	335c      	adds	r3, #92	; 0x5c
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7fd f837 	bl	8008c36 <ld_dword>
 800bbc8:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800bbca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbcc:	4a03      	ldr	r2, [pc, #12]	; (800bbdc <find_volume+0x294>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d906      	bls.n	800bbe0 <find_volume+0x298>
 800bbd2:	230d      	movs	r3, #13
 800bbd4:	e204      	b.n	800bfe0 <find_volume+0x698>
 800bbd6:	bf00      	nop
 800bbd8:	200028d0 	.word	0x200028d0
 800bbdc:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800bbe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbe2:	1c9a      	adds	r2, r3, #2
 800bbe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbe6:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800bbe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bbec:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800bbee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbf0:	3338      	adds	r3, #56	; 0x38
 800bbf2:	3358      	adds	r3, #88	; 0x58
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7fd f81e 	bl	8008c36 <ld_dword>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bbfe:	441a      	add	r2, r3
 800bc00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc02:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800bc04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc06:	3338      	adds	r3, #56	; 0x38
 800bc08:	3350      	adds	r3, #80	; 0x50
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7fd f813 	bl	8008c36 <ld_dword>
 800bc10:	4602      	mov	r2, r0
 800bc12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc14:	441a      	add	r2, r3
 800bc16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc18:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800bc1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc1e:	2200      	movs	r2, #0
 800bc20:	469a      	mov	sl, r3
 800bc22:	4693      	mov	fp, r2
 800bc24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc26:	895b      	ldrh	r3, [r3, #10]
 800bc28:	461a      	mov	r2, r3
 800bc2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc2c:	fb02 f303 	mul.w	r3, r2, r3
 800bc30:	2200      	movs	r2, #0
 800bc32:	4698      	mov	r8, r3
 800bc34:	4691      	mov	r9, r2
 800bc36:	eb1a 0408 	adds.w	r4, sl, r8
 800bc3a:	eb4b 0509 	adc.w	r5, fp, r9
 800bc3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800bc42:	42a2      	cmp	r2, r4
 800bc44:	41ab      	sbcs	r3, r5
 800bc46:	d201      	bcs.n	800bc4c <find_volume+0x304>
 800bc48:	230d      	movs	r3, #13
 800bc4a:	e1c9      	b.n	800bfe0 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800bc4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc4e:	3338      	adds	r3, #56	; 0x38
 800bc50:	3360      	adds	r3, #96	; 0x60
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7fc ffef 	bl	8008c36 <ld_dword>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc5c:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800bc5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc62:	4619      	mov	r1, r3
 800bc64:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bc66:	f7fd fc6d 	bl	8009544 <clust2sect>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bc70:	f7fd fbcc 	bl	800940c <move_window>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d001      	beq.n	800bc7e <find_volume+0x336>
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e1b0      	b.n	800bfe0 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800bc7e:	2300      	movs	r3, #0
 800bc80:	65bb      	str	r3, [r7, #88]	; 0x58
 800bc82:	e015      	b.n	800bcb0 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800bc84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bc86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc88:	4413      	add	r3, r2
 800bc8a:	3338      	adds	r3, #56	; 0x38
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	2b81      	cmp	r3, #129	; 0x81
 800bc90:	d10b      	bne.n	800bcaa <find_volume+0x362>
 800bc92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc94:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bc98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc9a:	3314      	adds	r3, #20
 800bc9c:	4413      	add	r3, r2
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7fc ffc9 	bl	8008c36 <ld_dword>
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d007      	beq.n	800bcba <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800bcaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bcac:	3320      	adds	r3, #32
 800bcae:	65bb      	str	r3, [r7, #88]	; 0x58
 800bcb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bcb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcb6:	d3e5      	bcc.n	800bc84 <find_volume+0x33c>
 800bcb8:	e000      	b.n	800bcbc <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800bcba:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800bcbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bcbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcc2:	d101      	bne.n	800bcc8 <find_volume+0x380>
 800bcc4:	230d      	movs	r3, #13
 800bcc6:	e18b      	b.n	800bfe0 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bcc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcca:	f04f 32ff 	mov.w	r2, #4294967295
 800bcce:	619a      	str	r2, [r3, #24]
 800bcd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcd2:	699a      	ldr	r2, [r3, #24]
 800bcd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcd6:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800bcd8:	2304      	movs	r3, #4
 800bcda:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800bcde:	e167      	b.n	800bfb0 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bce2:	3338      	adds	r3, #56	; 0x38
 800bce4:	330b      	adds	r3, #11
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7fc ff8e 	bl	8008c08 <ld_word>
 800bcec:	4603      	mov	r3, r0
 800bcee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcf2:	d001      	beq.n	800bcf8 <find_volume+0x3b0>
 800bcf4:	230d      	movs	r3, #13
 800bcf6:	e173      	b.n	800bfe0 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bcf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcfa:	3338      	adds	r3, #56	; 0x38
 800bcfc:	3316      	adds	r3, #22
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7fc ff82 	bl	8008c08 <ld_word>
 800bd04:	4603      	mov	r3, r0
 800bd06:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bd08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d106      	bne.n	800bd1c <find_volume+0x3d4>
 800bd0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd10:	3338      	adds	r3, #56	; 0x38
 800bd12:	3324      	adds	r3, #36	; 0x24
 800bd14:	4618      	mov	r0, r3
 800bd16:	f7fc ff8e 	bl	8008c36 <ld_dword>
 800bd1a:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 800bd1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd1e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd20:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bd22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd24:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800bd28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd2a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bd2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd2e:	789b      	ldrb	r3, [r3, #2]
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d005      	beq.n	800bd40 <find_volume+0x3f8>
 800bd34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd36:	789b      	ldrb	r3, [r3, #2]
 800bd38:	2b02      	cmp	r3, #2
 800bd3a:	d001      	beq.n	800bd40 <find_volume+0x3f8>
 800bd3c:	230d      	movs	r3, #13
 800bd3e:	e14f      	b.n	800bfe0 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bd40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd42:	789b      	ldrb	r3, [r3, #2]
 800bd44:	461a      	mov	r2, r3
 800bd46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd48:	fb02 f303 	mul.w	r3, r2, r3
 800bd4c:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bd4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd54:	b29a      	uxth	r2, r3
 800bd56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd58:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bd5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd5c:	895b      	ldrh	r3, [r3, #10]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d008      	beq.n	800bd74 <find_volume+0x42c>
 800bd62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd64:	895b      	ldrh	r3, [r3, #10]
 800bd66:	461a      	mov	r2, r3
 800bd68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd6a:	895b      	ldrh	r3, [r3, #10]
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	4013      	ands	r3, r2
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d001      	beq.n	800bd78 <find_volume+0x430>
 800bd74:	230d      	movs	r3, #13
 800bd76:	e133      	b.n	800bfe0 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bd78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd7a:	3338      	adds	r3, #56	; 0x38
 800bd7c:	3311      	adds	r3, #17
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7fc ff42 	bl	8008c08 <ld_word>
 800bd84:	4603      	mov	r3, r0
 800bd86:	461a      	mov	r2, r3
 800bd88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd8a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bd8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd8e:	891b      	ldrh	r3, [r3, #8]
 800bd90:	f003 030f 	and.w	r3, r3, #15
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d001      	beq.n	800bd9e <find_volume+0x456>
 800bd9a:	230d      	movs	r3, #13
 800bd9c:	e120      	b.n	800bfe0 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bd9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bda0:	3338      	adds	r3, #56	; 0x38
 800bda2:	3313      	adds	r3, #19
 800bda4:	4618      	mov	r0, r3
 800bda6:	f7fc ff2f 	bl	8008c08 <ld_word>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bdae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d106      	bne.n	800bdc2 <find_volume+0x47a>
 800bdb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdb6:	3338      	adds	r3, #56	; 0x38
 800bdb8:	3320      	adds	r3, #32
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7fc ff3b 	bl	8008c36 <ld_dword>
 800bdc0:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bdc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdc4:	3338      	adds	r3, #56	; 0x38
 800bdc6:	330e      	adds	r3, #14
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7fc ff1d 	bl	8008c08 <ld_word>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bdd4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d101      	bne.n	800bde0 <find_volume+0x498>
 800bddc:	230d      	movs	r3, #13
 800bdde:	e0ff      	b.n	800bfe0 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bde0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800bde4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bde6:	4413      	add	r3, r2
 800bde8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bdea:	8912      	ldrh	r2, [r2, #8]
 800bdec:	0912      	lsrs	r2, r2, #4
 800bdee:	b292      	uxth	r2, r2
 800bdf0:	4413      	add	r3, r2
 800bdf2:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bdf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bdf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d201      	bcs.n	800be00 <find_volume+0x4b8>
 800bdfc:	230d      	movs	r3, #13
 800bdfe:	e0ef      	b.n	800bfe0 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800be00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be04:	1ad3      	subs	r3, r2, r3
 800be06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be08:	8952      	ldrh	r2, [r2, #10]
 800be0a:	fbb3 f3f2 	udiv	r3, r3, r2
 800be0e:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800be10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be12:	2b00      	cmp	r3, #0
 800be14:	d101      	bne.n	800be1a <find_volume+0x4d2>
 800be16:	230d      	movs	r3, #13
 800be18:	e0e2      	b.n	800bfe0 <find_volume+0x698>
		fmt = FS_FAT32;
 800be1a:	2303      	movs	r3, #3
 800be1c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800be20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be22:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800be26:	4293      	cmp	r3, r2
 800be28:	d802      	bhi.n	800be30 <find_volume+0x4e8>
 800be2a:	2302      	movs	r3, #2
 800be2c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800be30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be32:	f640 72f5 	movw	r2, #4085	; 0xff5
 800be36:	4293      	cmp	r3, r2
 800be38:	d802      	bhi.n	800be40 <find_volume+0x4f8>
 800be3a:	2301      	movs	r3, #1
 800be3c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800be40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be42:	1c9a      	adds	r2, r3, #2
 800be44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be46:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800be48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800be4c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800be4e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800be52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be54:	441a      	add	r2, r3
 800be56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be58:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800be5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800be5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be5e:	441a      	add	r2, r3
 800be60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be62:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800be64:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800be68:	2b03      	cmp	r3, #3
 800be6a:	d11e      	bne.n	800beaa <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800be6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be6e:	3338      	adds	r3, #56	; 0x38
 800be70:	332a      	adds	r3, #42	; 0x2a
 800be72:	4618      	mov	r0, r3
 800be74:	f7fc fec8 	bl	8008c08 <ld_word>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d001      	beq.n	800be82 <find_volume+0x53a>
 800be7e:	230d      	movs	r3, #13
 800be80:	e0ae      	b.n	800bfe0 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800be82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be84:	891b      	ldrh	r3, [r3, #8]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d001      	beq.n	800be8e <find_volume+0x546>
 800be8a:	230d      	movs	r3, #13
 800be8c:	e0a8      	b.n	800bfe0 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800be8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be90:	3338      	adds	r3, #56	; 0x38
 800be92:	332c      	adds	r3, #44	; 0x2c
 800be94:	4618      	mov	r0, r3
 800be96:	f7fc fece 	bl	8008c36 <ld_dword>
 800be9a:	4602      	mov	r2, r0
 800be9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be9e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bea2:	69db      	ldr	r3, [r3, #28]
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bea8:	e01f      	b.n	800beea <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800beaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beac:	891b      	ldrh	r3, [r3, #8]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d101      	bne.n	800beb6 <find_volume+0x56e>
 800beb2:	230d      	movs	r3, #13
 800beb4:	e094      	b.n	800bfe0 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800beb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800beba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bebc:	441a      	add	r2, r3
 800bebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bec0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bec2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bec6:	2b02      	cmp	r3, #2
 800bec8:	d103      	bne.n	800bed2 <find_volume+0x58a>
 800beca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800becc:	69db      	ldr	r3, [r3, #28]
 800bece:	005b      	lsls	r3, r3, #1
 800bed0:	e00a      	b.n	800bee8 <find_volume+0x5a0>
 800bed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bed4:	69da      	ldr	r2, [r3, #28]
 800bed6:	4613      	mov	r3, r2
 800bed8:	005b      	lsls	r3, r3, #1
 800beda:	4413      	add	r3, r2
 800bedc:	085a      	lsrs	r2, r3, #1
 800bede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bee0:	69db      	ldr	r3, [r3, #28]
 800bee2:	f003 0301 	and.w	r3, r3, #1
 800bee6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bee8:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800beea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beec:	6a1a      	ldr	r2, [r3, #32]
 800beee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bef0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bef4:	0a5b      	lsrs	r3, r3, #9
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d201      	bcs.n	800befe <find_volume+0x5b6>
 800befa:	230d      	movs	r3, #13
 800befc:	e070      	b.n	800bfe0 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800befe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf00:	f04f 32ff 	mov.w	r2, #4294967295
 800bf04:	619a      	str	r2, [r3, #24]
 800bf06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf08:	699a      	ldr	r2, [r3, #24]
 800bf0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf0c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800bf0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf10:	2280      	movs	r2, #128	; 0x80
 800bf12:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bf14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bf18:	2b03      	cmp	r3, #3
 800bf1a:	d149      	bne.n	800bfb0 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bf1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf1e:	3338      	adds	r3, #56	; 0x38
 800bf20:	3330      	adds	r3, #48	; 0x30
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7fc fe70 	bl	8008c08 <ld_word>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d140      	bne.n	800bfb0 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bf2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf30:	3301      	adds	r3, #1
 800bf32:	4619      	mov	r1, r3
 800bf34:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bf36:	f7fd fa69 	bl	800940c <move_window>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d137      	bne.n	800bfb0 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 800bf40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf42:	2200      	movs	r2, #0
 800bf44:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bf46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf48:	3338      	adds	r3, #56	; 0x38
 800bf4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7fc fe5a 	bl	8008c08 <ld_word>
 800bf54:	4603      	mov	r3, r0
 800bf56:	461a      	mov	r2, r3
 800bf58:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d127      	bne.n	800bfb0 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bf60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf62:	3338      	adds	r3, #56	; 0x38
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7fc fe66 	bl	8008c36 <ld_dword>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	4a1f      	ldr	r2, [pc, #124]	; (800bfec <find_volume+0x6a4>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d11e      	bne.n	800bfb0 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bf72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf74:	3338      	adds	r3, #56	; 0x38
 800bf76:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7fc fe5b 	bl	8008c36 <ld_dword>
 800bf80:	4603      	mov	r3, r0
 800bf82:	4a1b      	ldr	r2, [pc, #108]	; (800bff0 <find_volume+0x6a8>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d113      	bne.n	800bfb0 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bf88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf8a:	3338      	adds	r3, #56	; 0x38
 800bf8c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7fc fe50 	bl	8008c36 <ld_dword>
 800bf96:	4602      	mov	r2, r0
 800bf98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf9a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bf9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf9e:	3338      	adds	r3, #56	; 0x38
 800bfa0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7fc fe46 	bl	8008c36 <ld_dword>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfae:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bfb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfb2:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800bfb6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bfb8:	4b0e      	ldr	r3, [pc, #56]	; (800bff4 <find_volume+0x6ac>)
 800bfba:	881b      	ldrh	r3, [r3, #0]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	b29a      	uxth	r2, r3
 800bfc0:	4b0c      	ldr	r3, [pc, #48]	; (800bff4 <find_volume+0x6ac>)
 800bfc2:	801a      	strh	r2, [r3, #0]
 800bfc4:	4b0b      	ldr	r3, [pc, #44]	; (800bff4 <find_volume+0x6ac>)
 800bfc6:	881a      	ldrh	r2, [r3, #0]
 800bfc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfca:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800bfcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfce:	4a0a      	ldr	r2, [pc, #40]	; (800bff8 <find_volume+0x6b0>)
 800bfd0:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800bfd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfd4:	4a09      	ldr	r2, [pc, #36]	; (800bffc <find_volume+0x6b4>)
 800bfd6:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bfd8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bfda:	f7fd f9af 	bl	800933c <clear_lock>
#endif
	return FR_OK;
 800bfde:	2300      	movs	r3, #0
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3770      	adds	r7, #112	; 0x70
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bfea:	bf00      	nop
 800bfec:	41615252 	.word	0x41615252
 800bff0:	61417272 	.word	0x61417272
 800bff4:	200028e0 	.word	0x200028e0
 800bff8:	20002b64 	.word	0x20002b64
 800bffc:	20002904 	.word	0x20002904

0800c000 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c00a:	2309      	movs	r3, #9
 800c00c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d01c      	beq.n	800c04e <validate+0x4e>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d018      	beq.n	800c04e <validate+0x4e>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d013      	beq.n	800c04e <validate+0x4e>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	889a      	ldrh	r2, [r3, #4]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	88db      	ldrh	r3, [r3, #6]
 800c030:	429a      	cmp	r2, r3
 800c032:	d10c      	bne.n	800c04e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	785b      	ldrb	r3, [r3, #1]
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fc fd44 	bl	8008ac8 <disk_status>
 800c040:	4603      	mov	r3, r0
 800c042:	f003 0301 	and.w	r3, r3, #1
 800c046:	2b00      	cmp	r3, #0
 800c048:	d101      	bne.n	800c04e <validate+0x4e>
			res = FR_OK;
 800c04a:	2300      	movs	r3, #0
 800c04c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c04e:	7bfb      	ldrb	r3, [r7, #15]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d102      	bne.n	800c05a <validate+0x5a>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	e000      	b.n	800c05c <validate+0x5c>
 800c05a:	2300      	movs	r3, #0
 800c05c:	683a      	ldr	r2, [r7, #0]
 800c05e:	6013      	str	r3, [r2, #0]
	return res;
 800c060:	7bfb      	ldrb	r3, [r7, #15]
}
 800c062:	4618      	mov	r0, r3
 800c064:	3710      	adds	r7, #16
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
	...

0800c06c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b088      	sub	sp, #32
 800c070:	af00      	add	r7, sp, #0
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	60b9      	str	r1, [r7, #8]
 800c076:	4613      	mov	r3, r2
 800c078:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c07e:	f107 0310 	add.w	r3, r7, #16
 800c082:	4618      	mov	r0, r3
 800c084:	f7ff fbb9 	bl	800b7fa <get_ldnumber>
 800c088:	61f8      	str	r0, [r7, #28]

	if (vol < 0) return FR_INVALID_DRIVE;
 800c08a:	69fb      	ldr	r3, [r7, #28]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	da01      	bge.n	800c094 <f_mount+0x28>
 800c090:	230b      	movs	r3, #11
 800c092:	e02b      	b.n	800c0ec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c094:	4a17      	ldr	r2, [pc, #92]	; (800c0f4 <f_mount+0x88>)
 800c096:	69fb      	ldr	r3, [r7, #28]
 800c098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c09c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c09e:	69bb      	ldr	r3, [r7, #24]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d005      	beq.n	800c0b0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c0a4:	69b8      	ldr	r0, [r7, #24]
 800c0a6:	f7fd f949 	bl	800933c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c0aa:	69bb      	ldr	r3, [r7, #24]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d002      	beq.n	800c0bc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c0bc:	68fa      	ldr	r2, [r7, #12]
 800c0be:	490d      	ldr	r1, [pc, #52]	; (800c0f4 <f_mount+0x88>)
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d002      	beq.n	800c0d2 <f_mount+0x66>
 800c0cc:	79fb      	ldrb	r3, [r7, #7]
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d001      	beq.n	800c0d6 <f_mount+0x6a>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	e00a      	b.n	800c0ec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c0d6:	f107 010c 	add.w	r1, r7, #12
 800c0da:	f107 0308 	add.w	r3, r7, #8
 800c0de:	2200      	movs	r2, #0
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7ff fc31 	bl	800b948 <find_volume>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	75fb      	strb	r3, [r7, #23]

	LEAVE_FF(fs, res);
 800c0ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3720      	adds	r7, #32
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	200028d0 	.word	0x200028d0

0800c0f8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c0f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c0fc:	b0a6      	sub	sp, #152	; 0x98
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	61f8      	str	r0, [r7, #28]
 800c102:	61b9      	str	r1, [r7, #24]
 800c104:	4613      	mov	r3, r2
 800c106:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d101      	bne.n	800c112 <f_open+0x1a>
 800c10e:	2309      	movs	r3, #9
 800c110:	e2ae      	b.n	800c670 <f_open+0x578>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c112:	7dfb      	ldrb	r3, [r7, #23]
 800c114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c118:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 800c11a:	7dfa      	ldrb	r2, [r7, #23]
 800c11c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800c120:	f107 0318 	add.w	r3, r7, #24
 800c124:	4618      	mov	r0, r3
 800c126:	f7ff fc0f 	bl	800b948 <find_volume>
 800c12a:	4603      	mov	r3, r0
 800c12c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (res == FR_OK) {
 800c130:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c134:	2b00      	cmp	r3, #0
 800c136:	f040 8292 	bne.w	800c65e <f_open+0x566>
		dj.obj.fs = fs;
 800c13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13c:	62bb      	str	r3, [r7, #40]	; 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c13e:	69ba      	ldr	r2, [r7, #24]
 800c140:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c144:	4611      	mov	r1, r2
 800c146:	4618      	mov	r0, r3
 800c148:	f7ff faae 	bl	800b6a8 <follow_path>
 800c14c:	4603      	mov	r3, r0
 800c14e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c152:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c156:	2b00      	cmp	r3, #0
 800c158:	d11a      	bne.n	800c190 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c15a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800c15e:	b25b      	sxtb	r3, r3
 800c160:	2b00      	cmp	r3, #0
 800c162:	da03      	bge.n	800c16c <f_open+0x74>
				res = FR_INVALID_NAME;
 800c164:	2306      	movs	r3, #6
 800c166:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800c16a:	e011      	b.n	800c190 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c16c:	7dfb      	ldrb	r3, [r7, #23]
 800c16e:	f023 0301 	bic.w	r3, r3, #1
 800c172:	2b00      	cmp	r3, #0
 800c174:	bf14      	ite	ne
 800c176:	2301      	movne	r3, #1
 800c178:	2300      	moveq	r3, #0
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	461a      	mov	r2, r3
 800c17e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c182:	4611      	mov	r1, r2
 800c184:	4618      	mov	r0, r3
 800c186:	f7fc ff97 	bl	80090b8 <chk_lock>
 800c18a:	4603      	mov	r3, r0
 800c18c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c190:	7dfb      	ldrb	r3, [r7, #23]
 800c192:	f003 031c 	and.w	r3, r3, #28
 800c196:	2b00      	cmp	r3, #0
 800c198:	f000 8115 	beq.w	800c3c6 <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 800c19c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d017      	beq.n	800c1d4 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c1a4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c1a8:	2b04      	cmp	r3, #4
 800c1aa:	d10e      	bne.n	800c1ca <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c1ac:	f7fc ffde 	bl	800916c <enq_lock>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d006      	beq.n	800c1c4 <f_open+0xcc>
 800c1b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fe ff16 	bl	800afec <dir_register>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	e000      	b.n	800c1c6 <f_open+0xce>
 800c1c4:	2312      	movs	r3, #18
 800c1c6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c1ca:	7dfb      	ldrb	r3, [r7, #23]
 800c1cc:	f043 0308 	orr.w	r3, r3, #8
 800c1d0:	75fb      	strb	r3, [r7, #23]
 800c1d2:	e011      	b.n	800c1f8 <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c1d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c1d8:	f003 0311 	and.w	r3, r3, #17
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d003      	beq.n	800c1e8 <f_open+0xf0>
					res = FR_DENIED;
 800c1e0:	2307      	movs	r3, #7
 800c1e2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800c1e6:	e007      	b.n	800c1f8 <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c1e8:	7dfb      	ldrb	r3, [r7, #23]
 800c1ea:	f003 0304 	and.w	r3, r3, #4
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d002      	beq.n	800c1f8 <f_open+0x100>
 800c1f2:	2308      	movs	r3, #8
 800c1f4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c1f8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	f040 80fe 	bne.w	800c3fe <f_open+0x306>
 800c202:	7dfb      	ldrb	r3, [r7, #23]
 800c204:	f003 0308 	and.w	r3, r3, #8
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f000 80f8 	beq.w	800c3fe <f_open+0x306>
				dw = GET_FATTIME();
 800c20e:	f7fc f9ab 	bl	8008568 <get_fattime>
 800c212:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800c216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	2b04      	cmp	r3, #4
 800c21c:	f040 8084 	bne.w	800c328 <f_open+0x230>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800c220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c222:	69fb      	ldr	r3, [r7, #28]
 800c224:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800c226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c228:	691b      	ldr	r3, [r3, #16]
 800c22a:	3334      	adds	r3, #52	; 0x34
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7fc fd02 	bl	8008c36 <ld_dword>
 800c232:	4602      	mov	r2, r0
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c23a:	691b      	ldr	r3, [r3, #16]
 800c23c:	3338      	adds	r3, #56	; 0x38
 800c23e:	4618      	mov	r0, r3
 800c240:	f7fc fd1b 	bl	8008c7a <ld_qword>
 800c244:	4602      	mov	r2, r0
 800c246:	460b      	mov	r3, r1
 800c248:	69f9      	ldr	r1, [r7, #28]
 800c24a:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c250:	691b      	ldr	r3, [r3, #16]
 800c252:	3321      	adds	r3, #33	; 0x21
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	f003 0302 	and.w	r3, r3, #2
 800c25a:	b2da      	uxtb	r2, r3
 800c25c:	69fb      	ldr	r3, [r7, #28]
 800c25e:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	2200      	movs	r2, #0
 800c264:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800c266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c268:	691b      	ldr	r3, [r3, #16]
 800c26a:	3308      	adds	r3, #8
 800c26c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c270:	4618      	mov	r0, r3
 800c272:	f7fc fdf5 	bl	8008e60 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800c276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c278:	691b      	ldr	r3, [r3, #16]
 800c27a:	3314      	adds	r3, #20
 800c27c:	2200      	movs	r2, #0
 800c27e:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800c280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c282:	691b      	ldr	r3, [r3, #16]
 800c284:	330c      	adds	r3, #12
 800c286:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7fc fde8 	bl	8008e60 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800c290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c292:	691b      	ldr	r3, [r3, #16]
 800c294:	3315      	adds	r3, #21
 800c296:	2200      	movs	r2, #0
 800c298:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800c29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29c:	691b      	ldr	r3, [r3, #16]
 800c29e:	3304      	adds	r3, #4
 800c2a0:	2220      	movs	r2, #32
 800c2a2:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800c2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a6:	691b      	ldr	r3, [r3, #16]
 800c2a8:	3334      	adds	r3, #52	; 0x34
 800c2aa:	2100      	movs	r1, #0
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7fc fdd7 	bl	8008e60 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800c2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b4:	691b      	ldr	r3, [r3, #16]
 800c2b6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c2ba:	f04f 0200 	mov.w	r2, #0
 800c2be:	f04f 0300 	mov.w	r3, #0
 800c2c2:	4608      	mov	r0, r1
 800c2c4:	f7fc fdf7 	bl	8008eb6 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800c2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ca:	691b      	ldr	r3, [r3, #16]
 800c2cc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800c2d0:	f04f 0200 	mov.w	r2, #0
 800c2d4:	f04f 0300 	mov.w	r3, #0
 800c2d8:	4608      	mov	r0, r1
 800c2da:	f7fc fdec 	bl	8008eb6 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800c2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e0:	691b      	ldr	r3, [r3, #16]
 800c2e2:	3321      	adds	r3, #33	; 0x21
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800c2e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f7fe fbcb 	bl	800aa88 <store_xdir>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800c2f8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d17e      	bne.n	800c3fe <f_open+0x306>
 800c300:	69fb      	ldr	r3, [r7, #28]
 800c302:	689b      	ldr	r3, [r3, #8]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d07a      	beq.n	800c3fe <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800c308:	69f8      	ldr	r0, [r7, #28]
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	2200      	movs	r2, #0
 800c310:	4619      	mov	r1, r3
 800c312:	f7fd fc85 	bl	8009c20 <remove_chain>
 800c316:	4603      	mov	r3, r0
 800c318:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	689a      	ldr	r2, [r3, #8]
 800c320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c322:	3a01      	subs	r2, #1
 800c324:	615a      	str	r2, [r3, #20]
 800c326:	e06a      	b.n	800c3fe <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c32a:	330e      	adds	r3, #14
 800c32c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c330:	4618      	mov	r0, r3
 800c332:	f7fc fd95 	bl	8008e60 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c336:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c338:	3316      	adds	r3, #22
 800c33a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c33e:	4618      	mov	r0, r3
 800c340:	f7fc fd8e 	bl	8008e60 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c346:	330b      	adds	r3, #11
 800c348:	2220      	movs	r2, #32
 800c34a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c350:	4611      	mov	r1, r2
 800c352:	4618      	mov	r0, r3
 800c354:	f7fe f814 	bl	800a380 <ld_clust>
 800c358:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c360:	2200      	movs	r2, #0
 800c362:	4618      	mov	r0, r3
 800c364:	f7fe f82b 	bl	800a3be <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c36a:	331c      	adds	r3, #28
 800c36c:	2100      	movs	r1, #0
 800c36e:	4618      	mov	r0, r3
 800c370:	f7fc fd76 	bl	8008e60 <st_dword>
					fs->wflag = 1;
 800c374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c376:	2201      	movs	r2, #1
 800c378:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c37a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d03d      	beq.n	800c3fe <f_open+0x306>
						dw = fs->winsect;
 800c382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c386:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						res = remove_chain(&dj.obj, cl, 0);
 800c38a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c38e:	2200      	movs	r2, #0
 800c390:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c394:	4618      	mov	r0, r3
 800c396:	f7fd fc43 	bl	8009c20 <remove_chain>
 800c39a:	4603      	mov	r3, r0
 800c39c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						if (res == FR_OK) {
 800c3a0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d12a      	bne.n	800c3fe <f_open+0x306>
							res = move_window(fs, dw);
 800c3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3aa:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7fd f82c 	bl	800940c <move_window>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c3c0:	3a01      	subs	r2, #1
 800c3c2:	615a      	str	r2, [r3, #20]
 800c3c4:	e01b      	b.n	800c3fe <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c3c6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d117      	bne.n	800c3fe <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c3ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c3d2:	f003 0310 	and.w	r3, r3, #16
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d003      	beq.n	800c3e2 <f_open+0x2ea>
					res = FR_NO_FILE;
 800c3da:	2304      	movs	r3, #4
 800c3dc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800c3e0:	e00d      	b.n	800c3fe <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c3e2:	7dfb      	ldrb	r3, [r7, #23]
 800c3e4:	f003 0302 	and.w	r3, r3, #2
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d008      	beq.n	800c3fe <f_open+0x306>
 800c3ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c3f0:	f003 0301 	and.w	r3, r3, #1
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d002      	beq.n	800c3fe <f_open+0x306>
						res = FR_DENIED;
 800c3f8:	2307      	movs	r3, #7
 800c3fa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 800c3fe:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c402:	2b00      	cmp	r3, #0
 800c404:	d128      	bne.n	800c458 <f_open+0x360>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c406:	7dfb      	ldrb	r3, [r7, #23]
 800c408:	f003 0308 	and.w	r3, r3, #8
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d003      	beq.n	800c418 <f_open+0x320>
				mode |= FA_MODIFIED;
 800c410:	7dfb      	ldrb	r3, [r7, #23]
 800c412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c416:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c41c:	69fb      	ldr	r3, [r7, #28]
 800c41e:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800c420:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c422:	69fb      	ldr	r3, [r7, #28]
 800c424:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c426:	7dfb      	ldrb	r3, [r7, #23]
 800c428:	f023 0301 	bic.w	r3, r3, #1
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	bf14      	ite	ne
 800c430:	2301      	movne	r3, #1
 800c432:	2300      	moveq	r3, #0
 800c434:	b2db      	uxtb	r3, r3
 800c436:	461a      	mov	r2, r3
 800c438:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c43c:	4611      	mov	r1, r2
 800c43e:	4618      	mov	r0, r3
 800c440:	f7fc feb4 	bl	80091ac <inc_lock>
 800c444:	4602      	mov	r2, r0
 800c446:	69fb      	ldr	r3, [r7, #28]
 800c448:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c44a:	69fb      	ldr	r3, [r7, #28]
 800c44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d102      	bne.n	800c458 <f_open+0x360>
 800c452:	2302      	movs	r3, #2
 800c454:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c458:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	f040 80fe 	bne.w	800c65e <f_open+0x566>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800c462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	2b04      	cmp	r3, #4
 800c468:	d12d      	bne.n	800c4c6 <f_open+0x3ce>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800c46a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800c470:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c474:	4613      	mov	r3, r2
 800c476:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c47a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c47e:	431a      	orrs	r2, r3
 800c480:	69fb      	ldr	r3, [r7, #28]
 800c482:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800c484:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c486:	69fb      	ldr	r3, [r7, #28]
 800c488:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800c48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48c:	691b      	ldr	r3, [r3, #16]
 800c48e:	3334      	adds	r3, #52	; 0x34
 800c490:	4618      	mov	r0, r3
 800c492:	f7fc fbd0 	bl	8008c36 <ld_dword>
 800c496:	4602      	mov	r2, r0
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49e:	691b      	ldr	r3, [r3, #16]
 800c4a0:	3338      	adds	r3, #56	; 0x38
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7fc fbe9 	bl	8008c7a <ld_qword>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	460b      	mov	r3, r1
 800c4ac:	69f9      	ldr	r1, [r7, #28]
 800c4ae:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b4:	691b      	ldr	r3, [r3, #16]
 800c4b6:	3321      	adds	r3, #33	; 0x21
 800c4b8:	781b      	ldrb	r3, [r3, #0]
 800c4ba:	f003 0302 	and.w	r3, r3, #2
 800c4be:	b2da      	uxtb	r2, r3
 800c4c0:	69fb      	ldr	r3, [r7, #28]
 800c4c2:	71da      	strb	r2, [r3, #7]
 800c4c4:	e016      	b.n	800c4f4 <f_open+0x3fc>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c4ca:	4611      	mov	r1, r2
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7fd ff57 	bl	800a380 <ld_clust>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	69fb      	ldr	r3, [r7, #28]
 800c4d6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c4d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c4da:	331c      	adds	r3, #28
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7fc fbaa 	bl	8008c36 <ld_dword>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	60bb      	str	r3, [r7, #8]
 800c4e8:	60fa      	str	r2, [r7, #12]
 800c4ea:	69fb      	ldr	r3, [r7, #28]
 800c4ec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c4f0:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c4f4:	69fb      	ldr	r3, [r7, #28]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c4fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c502:	88da      	ldrh	r2, [r3, #6]
 800c504:	69fb      	ldr	r3, [r7, #28]
 800c506:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	7dfa      	ldrb	r2, [r7, #23]
 800c50c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	2200      	movs	r2, #0
 800c514:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800c518:	69fb      	ldr	r3, [r7, #28]
 800c51a:	2200      	movs	r2, #0
 800c51c:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c51e:	69f9      	ldr	r1, [r7, #28]
 800c520:	f04f 0200 	mov.w	r2, #0
 800c524:	f04f 0300 	mov.w	r3, #0
 800c528:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	3354      	adds	r3, #84	; 0x54
 800c530:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c534:	2100      	movs	r1, #0
 800c536:	4618      	mov	r0, r3
 800c538:	f7fc fd64 	bl	8009004 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c53c:	7dfb      	ldrb	r3, [r7, #23]
 800c53e:	f003 0320 	and.w	r3, r3, #32
 800c542:	2b00      	cmp	r3, #0
 800c544:	f000 808b 	beq.w	800c65e <f_open+0x566>
 800c548:	69fb      	ldr	r3, [r7, #28]
 800c54a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c54e:	4313      	orrs	r3, r2
 800c550:	f000 8085 	beq.w	800c65e <f_open+0x566>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c55a:	69f9      	ldr	r1, [r7, #28]
 800c55c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c562:	895b      	ldrh	r3, [r3, #10]
 800c564:	025b      	lsls	r3, r3, #9
 800c566:	67fb      	str	r3, [r7, #124]	; 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	689b      	ldr	r3, [r3, #8]
 800c56c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c570:	69fb      	ldr	r3, [r7, #28]
 800c572:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c576:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 800c57a:	e026      	b.n	800c5ca <f_open+0x4d2>
					clst = get_fat(&fp->obj, clst);
 800c57c:	69fb      	ldr	r3, [r7, #28]
 800c57e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c582:	4618      	mov	r0, r3
 800c584:	f7fc fffc 	bl	8009580 <get_fat>
 800c588:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
					if (clst <= 1) res = FR_INT_ERR;
 800c58c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c590:	2b01      	cmp	r3, #1
 800c592:	d802      	bhi.n	800c59a <f_open+0x4a2>
 800c594:	2302      	movs	r3, #2
 800c596:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c59a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5a2:	d102      	bne.n	800c5aa <f_open+0x4b2>
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c5aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	469a      	mov	sl, r3
 800c5b0:	4693      	mov	fp, r2
 800c5b2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c5b6:	ebb2 010a 	subs.w	r1, r2, sl
 800c5ba:	6039      	str	r1, [r7, #0]
 800c5bc:	eb63 030b 	sbc.w	r3, r3, fp
 800c5c0:	607b      	str	r3, [r7, #4]
 800c5c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5c6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 800c5ca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d109      	bne.n	800c5e6 <f_open+0x4ee>
 800c5d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	4698      	mov	r8, r3
 800c5d8:	4691      	mov	r9, r2
 800c5da:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c5de:	4590      	cmp	r8, r2
 800c5e0:	eb79 0303 	sbcs.w	r3, r9, r3
 800c5e4:	d3ca      	bcc.n	800c57c <f_open+0x484>
				}
				fp->clust = clst;
 800c5e6:	69fb      	ldr	r3, [r7, #28]
 800c5e8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c5ec:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c5ee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d133      	bne.n	800c65e <f_open+0x566>
 800c5f6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c5fa:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800c5fe:	2500      	movs	r5, #0
 800c600:	ea54 0305 	orrs.w	r3, r4, r5
 800c604:	d02b      	beq.n	800c65e <f_open+0x566>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c608:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7fc ff99 	bl	8009544 <clust2sect>
 800c612:	67b8      	str	r0, [r7, #120]	; 0x78
 800c614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c616:	2b00      	cmp	r3, #0
 800c618:	d103      	bne.n	800c622 <f_open+0x52a>
						res = FR_INT_ERR;
 800c61a:	2302      	movs	r3, #2
 800c61c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800c620:	e01d      	b.n	800c65e <f_open+0x566>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c622:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800c626:	f04f 0200 	mov.w	r2, #0
 800c62a:	f04f 0300 	mov.w	r3, #0
 800c62e:	0a42      	lsrs	r2, r0, #9
 800c630:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800c634:	0a4b      	lsrs	r3, r1, #9
 800c636:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c638:	441a      	add	r2, r3
 800c63a:	69fb      	ldr	r3, [r7, #28]
 800c63c:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c640:	7858      	ldrb	r0, [r3, #1]
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c64c:	2301      	movs	r3, #1
 800c64e:	f7fc fa7d 	bl	8008b4c <disk_read>
 800c652:	4603      	mov	r3, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	d002      	beq.n	800c65e <f_open+0x566>
 800c658:	2301      	movs	r3, #1
 800c65a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c65e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c662:	2b00      	cmp	r3, #0
 800c664:	d002      	beq.n	800c66c <f_open+0x574>
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	2200      	movs	r2, #0
 800c66a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c66c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800c670:	4618      	mov	r0, r3
 800c672:	3798      	adds	r7, #152	; 0x98
 800c674:	46bd      	mov	sp, r7
 800c676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c67a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c67a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c67e:	b094      	sub	sp, #80	; 0x50
 800c680:	af00      	add	r7, sp, #0
 800c682:	61f8      	str	r0, [r7, #28]
 800c684:	61b9      	str	r1, [r7, #24]
 800c686:	617a      	str	r2, [r7, #20]
 800c688:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c68a:	69bb      	ldr	r3, [r7, #24]
 800c68c:	63fb      	str	r3, [r7, #60]	; 0x3c


	*br = 0;	/* Clear read byte counter */
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	2200      	movs	r2, #0
 800c692:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c69a:	4611      	mov	r1, r2
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7ff fcaf 	bl	800c000 <validate>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c6a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d108      	bne.n	800c6c2 <f_read+0x48>
 800c6b0:	69fb      	ldr	r3, [r7, #28]
 800c6b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c6b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c6ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d002      	beq.n	800c6c8 <f_read+0x4e>
 800c6c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c6c6:	e14d      	b.n	800c964 <f_read+0x2ea>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6ce:	f003 0301 	and.w	r3, r3, #1
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d101      	bne.n	800c6da <f_read+0x60>
 800c6d6:	2307      	movs	r3, #7
 800c6d8:	e144      	b.n	800c964 <f_read+0x2ea>
	remain = fp->obj.objsize - fp->fptr;
 800c6da:	69fb      	ldr	r3, [r7, #28]
 800c6dc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c6e6:	ebb0 0c02 	subs.w	ip, r0, r2
 800c6ea:	f8c7 c000 	str.w	ip, [r7]
 800c6ee:	eb61 0303 	sbc.w	r3, r1, r3
 800c6f2:	607b      	str	r3, [r7, #4]
 800c6f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6f8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	2200      	movs	r2, #0
 800c700:	469a      	mov	sl, r3
 800c702:	4693      	mov	fp, r2
 800c704:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c708:	4552      	cmp	r2, sl
 800c70a:	eb73 030b 	sbcs.w	r3, r3, fp
 800c70e:	f080 8124 	bcs.w	800c95a <f_read+0x2e0>
 800c712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c714:	617b      	str	r3, [r7, #20]

	for ( ;  btr;								/* Repeat until all data read */
 800c716:	e120      	b.n	800c95a <f_read+0x2e0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c718:	69fb      	ldr	r3, [r7, #28]
 800c71a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c71e:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800c722:	2500      	movs	r5, #0
 800c724:	ea54 0305 	orrs.w	r3, r4, r5
 800c728:	f040 80d9 	bne.w	800c8de <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c72c:	69fb      	ldr	r3, [r7, #28]
 800c72e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800c732:	f04f 0200 	mov.w	r2, #0
 800c736:	f04f 0300 	mov.w	r3, #0
 800c73a:	0a42      	lsrs	r2, r0, #9
 800c73c:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800c740:	0a4b      	lsrs	r3, r1, #9
 800c742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c744:	895b      	ldrh	r3, [r3, #10]
 800c746:	3b01      	subs	r3, #1
 800c748:	4013      	ands	r3, r2
 800c74a:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (csect == 0) {					/* On the cluster boundary? */
 800c74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d132      	bne.n	800c7b8 <f_read+0x13e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c752:	69fb      	ldr	r3, [r7, #28]
 800c754:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c758:	4313      	orrs	r3, r2
 800c75a:	d103      	bne.n	800c764 <f_read+0xea>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	64bb      	str	r3, [r7, #72]	; 0x48
 800c762:	e013      	b.n	800c78c <f_read+0x112>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c764:	69fb      	ldr	r3, [r7, #28]
 800c766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d007      	beq.n	800c77c <f_read+0x102>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c772:	69f8      	ldr	r0, [r7, #28]
 800c774:	f7fd fc09 	bl	8009f8a <clmt_clust>
 800c778:	64b8      	str	r0, [r7, #72]	; 0x48
 800c77a:	e007      	b.n	800c78c <f_read+0x112>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c77c:	69fa      	ldr	r2, [r7, #28]
 800c77e:	69fb      	ldr	r3, [r7, #28]
 800c780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c782:	4619      	mov	r1, r3
 800c784:	4610      	mov	r0, r2
 800c786:	f7fc fefb 	bl	8009580 <get_fat>
 800c78a:	64b8      	str	r0, [r7, #72]	; 0x48
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c78c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c78e:	2b01      	cmp	r3, #1
 800c790:	d805      	bhi.n	800c79e <f_read+0x124>
 800c792:	69fb      	ldr	r3, [r7, #28]
 800c794:	2202      	movs	r2, #2
 800c796:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c79a:	2302      	movs	r3, #2
 800c79c:	e0e2      	b.n	800c964 <f_read+0x2ea>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c79e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7a4:	d105      	bne.n	800c7b2 <f_read+0x138>
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	e0d8      	b.n	800c964 <f_read+0x2ea>
				fp->clust = clst;				/* Update current cluster */
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c7b6:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c7b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7be:	4619      	mov	r1, r3
 800c7c0:	4610      	mov	r0, r2
 800c7c2:	f7fc febf 	bl	8009544 <clust2sect>
 800c7c6:	62b8      	str	r0, [r7, #40]	; 0x28
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d105      	bne.n	800c7da <f_read+0x160>
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	2202      	movs	r2, #2
 800c7d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c7d6:	2302      	movs	r3, #2
 800c7d8:	e0c4      	b.n	800c964 <f_read+0x2ea>
			sect += csect;
 800c7da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7de:	4413      	add	r3, r2
 800c7e0:	62bb      	str	r3, [r7, #40]	; 0x28
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	0a5b      	lsrs	r3, r3, #9
 800c7e6:	643b      	str	r3, [r7, #64]	; 0x40
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c7e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d03b      	beq.n	800c866 <f_read+0x1ec>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c7ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7f2:	4413      	add	r3, r2
 800c7f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7f6:	8952      	ldrh	r2, [r2, #10]
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d905      	bls.n	800c808 <f_read+0x18e>
					cc = fs->csize - csect;
 800c7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fe:	895b      	ldrh	r3, [r3, #10]
 800c800:	461a      	mov	r2, r3
 800c802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c804:	1ad3      	subs	r3, r2, r3
 800c806:	643b      	str	r3, [r7, #64]	; 0x40
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80a:	7858      	ldrb	r0, [r3, #1]
 800c80c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c80e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c810:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c812:	f7fc f99b 	bl	8008b4c <disk_read>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d005      	beq.n	800c828 <f_read+0x1ae>
 800c81c:	69fb      	ldr	r3, [r7, #28]
 800c81e:	2201      	movs	r2, #1
 800c820:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c824:	2301      	movs	r3, #1
 800c826:	e09d      	b.n	800c964 <f_read+0x2ea>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c828:	69fb      	ldr	r3, [r7, #28]
 800c82a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c82e:	b25b      	sxtb	r3, r3
 800c830:	2b00      	cmp	r3, #0
 800c832:	da14      	bge.n	800c85e <f_read+0x1e4>
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83a:	1ad3      	subs	r3, r2, r3
 800c83c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c83e:	429a      	cmp	r2, r3
 800c840:	d90d      	bls.n	800c85e <f_read+0x1e4>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c842:	69fb      	ldr	r3, [r7, #28]
 800c844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c848:	1ad3      	subs	r3, r2, r3
 800c84a:	025b      	lsls	r3, r3, #9
 800c84c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c84e:	18d0      	adds	r0, r2, r3
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	3354      	adds	r3, #84	; 0x54
 800c854:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c858:	4619      	mov	r1, r3
 800c85a:	f7fc fbb3 	bl	8008fc4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c85e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c860:	025b      	lsls	r3, r3, #9
 800c862:	647b      	str	r3, [r7, #68]	; 0x44
				continue;
 800c864:	e059      	b.n	800c91a <f_read+0x2a0>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c866:	69fb      	ldr	r3, [r7, #28]
 800c868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c86a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d033      	beq.n	800c8d8 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c870:	69fb      	ldr	r3, [r7, #28]
 800c872:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c876:	b25b      	sxtb	r3, r3
 800c878:	2b00      	cmp	r3, #0
 800c87a:	da1b      	bge.n	800c8b4 <f_read+0x23a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87e:	7858      	ldrb	r0, [r3, #1]
 800c880:	69fb      	ldr	r3, [r7, #28]
 800c882:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c886:	69fb      	ldr	r3, [r7, #28]
 800c888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c88a:	2301      	movs	r3, #1
 800c88c:	f7fc f97e 	bl	8008b8c <disk_write>
 800c890:	4603      	mov	r3, r0
 800c892:	2b00      	cmp	r3, #0
 800c894:	d005      	beq.n	800c8a2 <f_read+0x228>
 800c896:	69fb      	ldr	r3, [r7, #28]
 800c898:	2201      	movs	r2, #1
 800c89a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c89e:	2301      	movs	r3, #1
 800c8a0:	e060      	b.n	800c964 <f_read+0x2ea>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c8a2:	69fb      	ldr	r3, [r7, #28]
 800c8a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c8a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8ac:	b2da      	uxtb	r2, r3
 800c8ae:	69fb      	ldr	r3, [r7, #28]
 800c8b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b6:	7858      	ldrb	r0, [r3, #1]
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c8be:	2301      	movs	r3, #1
 800c8c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8c2:	f7fc f943 	bl	8008b4c <disk_read>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d005      	beq.n	800c8d8 <f_read+0x25e>
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	e045      	b.n	800c964 <f_read+0x2ea>
			}
#endif
			fp->sect = sect;
 800c8d8:	69fb      	ldr	r3, [r7, #28]
 800c8da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8dc:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c8de:	69fb      	ldr	r3, [r7, #28]
 800c8e0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ea:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c8ee:	647b      	str	r3, [r7, #68]	; 0x44
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c8f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d901      	bls.n	800c8fc <f_read+0x282>
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	647b      	str	r3, [r7, #68]	; 0x44
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c8fc:	69fb      	ldr	r3, [r7, #28]
 800c8fe:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c902:	69fb      	ldr	r3, [r7, #28]
 800c904:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c908:	4613      	mov	r3, r2
 800c90a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c90e:	440b      	add	r3, r1
 800c910:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c912:	4619      	mov	r1, r3
 800c914:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c916:	f7fc fb55 	bl	8008fc4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c91a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c91c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c91e:	4413      	add	r3, r2
 800c920:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c922:	69fb      	ldr	r3, [r7, #28]
 800c924:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c928:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c92a:	2000      	movs	r0, #0
 800c92c:	4688      	mov	r8, r1
 800c92e:	4681      	mov	r9, r0
 800c930:	eb12 0108 	adds.w	r1, r2, r8
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	eb43 0309 	adc.w	r3, r3, r9
 800c93a:	60fb      	str	r3, [r7, #12]
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c942:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	681a      	ldr	r2, [r3, #0]
 800c94a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c94c:	441a      	add	r2, r3
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	601a      	str	r2, [r3, #0]
 800c952:	697a      	ldr	r2, [r7, #20]
 800c954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c956:	1ad3      	subs	r3, r2, r3
 800c958:	617b      	str	r3, [r7, #20]
	for ( ;  btr;								/* Repeat until all data read */
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	f47f aedb 	bne.w	800c718 <f_read+0x9e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c962:	2300      	movs	r3, #0
}
 800c964:	4618      	mov	r0, r3
 800c966:	3750      	adds	r7, #80	; 0x50
 800c968:	46bd      	mov	sp, r7
 800c96a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c96e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c96e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c972:	b08c      	sub	sp, #48	; 0x30
 800c974:	af00      	add	r7, sp, #0
 800c976:	60f8      	str	r0, [r7, #12]
 800c978:	60b9      	str	r1, [r7, #8]
 800c97a:	607a      	str	r2, [r7, #4]
 800c97c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	2200      	movs	r2, #0
 800c986:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f107 0210 	add.w	r2, r7, #16
 800c98e:	4611      	mov	r1, r2
 800c990:	4618      	mov	r0, r3
 800c992:	f7ff fb35 	bl	800c000 <validate>
 800c996:	4603      	mov	r3, r0
 800c998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c99c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d108      	bne.n	800c9b6 <f_write+0x48>
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c9aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c9ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d002      	beq.n	800c9bc <f_write+0x4e>
 800c9b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9ba:	e187      	b.n	800cccc <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c9c2:	f003 0302 	and.w	r3, r3, #2
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d101      	bne.n	800c9ce <f_write+0x60>
 800c9ca:	2307      	movs	r3, #7
 800c9cc:	e17e      	b.n	800cccc <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	2b04      	cmp	r3, #4
 800c9d4:	f000 816a 	beq.w	800ccac <f_write+0x33e>
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	18d1      	adds	r1, r2, r3
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c9e8:	4613      	mov	r3, r2
 800c9ea:	4299      	cmp	r1, r3
 800c9ec:	f080 815e 	bcs.w	800ccac <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c9f6:	4613      	mov	r3, r2
 800c9f8:	43db      	mvns	r3, r3
 800c9fa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c9fc:	e156      	b.n	800ccac <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ca04:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800ca08:	2500      	movs	r5, #0
 800ca0a:	ea54 0305 	orrs.w	r3, r4, r5
 800ca0e:	f040 80fb 	bne.w	800cc08 <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800ca18:	f04f 0200 	mov.w	r2, #0
 800ca1c:	f04f 0300 	mov.w	r3, #0
 800ca20:	0a42      	lsrs	r2, r0, #9
 800ca22:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800ca26:	0a4b      	lsrs	r3, r1, #9
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	895b      	ldrh	r3, [r3, #10]
 800ca2c:	3b01      	subs	r3, #1
 800ca2e:	4013      	ands	r3, r2
 800ca30:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ca32:	69bb      	ldr	r3, [r7, #24]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d146      	bne.n	800cac6 <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	d10c      	bne.n	800ca5c <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	689b      	ldr	r3, [r3, #8]
 800ca46:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ca48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d11a      	bne.n	800ca84 <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2100      	movs	r1, #0
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7fd f998 	bl	8009d88 <create_chain>
 800ca58:	62b8      	str	r0, [r7, #40]	; 0x28
 800ca5a:	e013      	b.n	800ca84 <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d007      	beq.n	800ca74 <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ca6a:	68f8      	ldr	r0, [r7, #12]
 800ca6c:	f7fd fa8d 	bl	8009f8a <clmt_clust>
 800ca70:	62b8      	str	r0, [r7, #40]	; 0x28
 800ca72:	e007      	b.n	800ca84 <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ca74:	68fa      	ldr	r2, [r7, #12]
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	4610      	mov	r0, r2
 800ca7e:	f7fd f983 	bl	8009d88 <create_chain>
 800ca82:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ca84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	f000 8115 	beq.w	800ccb6 <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ca8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8e:	2b01      	cmp	r3, #1
 800ca90:	d105      	bne.n	800ca9e <f_write+0x130>
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2202      	movs	r2, #2
 800ca96:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ca9a:	2302      	movs	r3, #2
 800ca9c:	e116      	b.n	800cccc <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ca9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caa4:	d105      	bne.n	800cab2 <f_write+0x144>
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2201      	movs	r2, #1
 800caaa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800caae:	2301      	movs	r3, #1
 800cab0:	e10c      	b.n	800cccc <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cab6:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d102      	bne.n	800cac6 <f_write+0x158>
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cac4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cacc:	b25b      	sxtb	r3, r3
 800cace:	2b00      	cmp	r3, #0
 800cad0:	da1b      	bge.n	800cb0a <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	7858      	ldrb	r0, [r3, #1]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cae0:	2301      	movs	r3, #1
 800cae2:	f7fc f853 	bl	8008b8c <disk_write>
 800cae6:	4603      	mov	r3, r0
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d005      	beq.n	800caf8 <f_write+0x18a>
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	2201      	movs	r2, #1
 800caf0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800caf4:	2301      	movs	r3, #1
 800caf6:	e0e9      	b.n	800cccc <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cafe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb02:	b2da      	uxtb	r2, r3
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cb0a:	693a      	ldr	r2, [r7, #16]
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb10:	4619      	mov	r1, r3
 800cb12:	4610      	mov	r0, r2
 800cb14:	f7fc fd16 	bl	8009544 <clust2sect>
 800cb18:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d105      	bne.n	800cb2c <f_write+0x1be>
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2202      	movs	r2, #2
 800cb24:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800cb28:	2302      	movs	r3, #2
 800cb2a:	e0cf      	b.n	800cccc <f_write+0x35e>
			sect += csect;
 800cb2c:	697a      	ldr	r2, [r7, #20]
 800cb2e:	69bb      	ldr	r3, [r7, #24]
 800cb30:	4413      	add	r3, r2
 800cb32:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	0a5b      	lsrs	r3, r3, #9
 800cb38:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cb3a:	6a3b      	ldr	r3, [r7, #32]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d03f      	beq.n	800cbc0 <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cb40:	69ba      	ldr	r2, [r7, #24]
 800cb42:	6a3b      	ldr	r3, [r7, #32]
 800cb44:	4413      	add	r3, r2
 800cb46:	693a      	ldr	r2, [r7, #16]
 800cb48:	8952      	ldrh	r2, [r2, #10]
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d905      	bls.n	800cb5a <f_write+0x1ec>
					cc = fs->csize - csect;
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	895b      	ldrh	r3, [r3, #10]
 800cb52:	461a      	mov	r2, r3
 800cb54:	69bb      	ldr	r3, [r7, #24]
 800cb56:	1ad3      	subs	r3, r2, r3
 800cb58:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	7858      	ldrb	r0, [r3, #1]
 800cb5e:	6a3b      	ldr	r3, [r7, #32]
 800cb60:	697a      	ldr	r2, [r7, #20]
 800cb62:	69f9      	ldr	r1, [r7, #28]
 800cb64:	f7fc f812 	bl	8008b8c <disk_write>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d005      	beq.n	800cb7a <f_write+0x20c>
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2201      	movs	r2, #1
 800cb72:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800cb76:	2301      	movs	r3, #1
 800cb78:	e0a8      	b.n	800cccc <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	1ad3      	subs	r3, r2, r3
 800cb82:	6a3a      	ldr	r2, [r7, #32]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d917      	bls.n	800cbb8 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	1ad3      	subs	r3, r2, r3
 800cb96:	025b      	lsls	r3, r3, #9
 800cb98:	69fa      	ldr	r2, [r7, #28]
 800cb9a:	4413      	add	r3, r2
 800cb9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cba0:	4619      	mov	r1, r3
 800cba2:	f7fc fa0f 	bl	8008fc4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cbac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbb0:	b2da      	uxtb	r2, r3
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cbb8:	6a3b      	ldr	r3, [r7, #32]
 800cbba:	025b      	lsls	r3, r3, #9
 800cbbc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800cbbe:	e04a      	b.n	800cc56 <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbc4:	697a      	ldr	r2, [r7, #20]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d01b      	beq.n	800cc02 <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cbd6:	4290      	cmp	r0, r2
 800cbd8:	eb71 0303 	sbcs.w	r3, r1, r3
 800cbdc:	d211      	bcs.n	800cc02 <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	7858      	ldrb	r0, [r3, #1]
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800cbe8:	2301      	movs	r3, #1
 800cbea:	697a      	ldr	r2, [r7, #20]
 800cbec:	f7fb ffae 	bl	8008b4c <disk_read>
 800cbf0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d005      	beq.n	800cc02 <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800cbfe:	2301      	movs	r3, #1
 800cc00:	e064      	b.n	800cccc <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	697a      	ldr	r2, [r7, #20]
 800cc06:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800cc0e:	4613      	mov	r3, r2
 800cc10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc14:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cc18:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cc1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d901      	bls.n	800cc26 <f_write+0x2b8>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800cc32:	4613      	mov	r3, r2
 800cc34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc38:	440b      	add	r3, r1
 800cc3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc3c:	69f9      	ldr	r1, [r7, #28]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7fc f9c0 	bl	8008fc4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cc4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cc4e:	b2da      	uxtb	r2, r3
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cc56:	69fa      	ldr	r2, [r7, #28]
 800cc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5a:	4413      	add	r3, r2
 800cc5c:	61fb      	str	r3, [r7, #28]
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800cc64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc66:	2000      	movs	r0, #0
 800cc68:	4688      	mov	r8, r1
 800cc6a:	4681      	mov	r9, r0
 800cc6c:	eb12 0a08 	adds.w	sl, r2, r8
 800cc70:	eb43 0b09 	adc.w	fp, r3, r9
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cc80:	68f9      	ldr	r1, [r7, #12]
 800cc82:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 800cc86:	4282      	cmp	r2, r0
 800cc88:	eb73 0c01 	sbcs.w	ip, r3, r1
 800cc8c:	d201      	bcs.n	800cc92 <f_write+0x324>
 800cc8e:	4602      	mov	r2, r0
 800cc90:	460b      	mov	r3, r1
 800cc92:	68f9      	ldr	r1, [r7, #12]
 800cc94:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	681a      	ldr	r2, [r3, #0]
 800cc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9e:	441a      	add	r2, r3
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	601a      	str	r2, [r3, #0]
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca8:	1ad3      	subs	r3, r2, r3
 800ccaa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	f47f aea5 	bne.w	800c9fe <f_write+0x90>
 800ccb4:	e000      	b.n	800ccb8 <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ccb6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ccbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccc2:	b2da      	uxtb	r2, r3
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800ccca:	2300      	movs	r3, #0
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3730      	adds	r7, #48	; 0x30
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ccd6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b09a      	sub	sp, #104	; 0x68
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800cce4:	4611      	mov	r1, r2
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7ff f98a 	bl	800c000 <validate>
 800ccec:	4603      	mov	r3, r0
 800ccee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800ccf2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	f040 8105 	bne.w	800cf06 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	f000 80fd 	beq.w	800cf06 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd12:	b25b      	sxtb	r3, r3
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	da17      	bge.n	800cd48 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cd18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd1a:	7858      	ldrb	r0, [r3, #1]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd26:	2301      	movs	r3, #1
 800cd28:	f7fb ff30 	bl	8008b8c <disk_write>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d001      	beq.n	800cd36 <f_sync+0x60>
 800cd32:	2301      	movs	r3, #1
 800cd34:	e0e9      	b.n	800cf0a <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd40:	b2da      	uxtb	r2, r3
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cd48:	f7fb fc0e 	bl	8008568 <get_fattime>
 800cd4c:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800cd4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	2b04      	cmp	r3, #4
 800cd54:	f040 808c 	bne.w	800ce70 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7fc ff00 	bl	8009b60 <fill_first_frag>
 800cd60:	4603      	mov	r3, r0
 800cd62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800cd66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d10a      	bne.n	800cd84 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd74:	f04f 32ff 	mov.w	r2, #4294967295
 800cd78:	4619      	mov	r1, r3
 800cd7a:	f7fc ff20 	bl	8009bbe <fill_last_frag>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 800cd84:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	f040 80bc 	bne.w	800cf06 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	f107 0308 	add.w	r3, r7, #8
 800cd94:	4611      	mov	r1, r2
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7fd fe40 	bl	800aa1c <load_obj_dir>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 800cda2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	f040 80ad 	bne.w	800cf06 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800cdac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdae:	691b      	ldr	r3, [r3, #16]
 800cdb0:	3304      	adds	r3, #4
 800cdb2:	781a      	ldrb	r2, [r3, #0]
 800cdb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdb6:	691b      	ldr	r3, [r3, #16]
 800cdb8:	3304      	adds	r3, #4
 800cdba:	f042 0220 	orr.w	r2, r2, #32
 800cdbe:	b2d2      	uxtb	r2, r2
 800cdc0:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	79da      	ldrb	r2, [r3, #7]
 800cdc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdc8:	691b      	ldr	r3, [r3, #16]
 800cdca:	3321      	adds	r3, #33	; 0x21
 800cdcc:	f042 0201 	orr.w	r2, r2, #1
 800cdd0:	b2d2      	uxtb	r2, r2
 800cdd2:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800cdd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdd6:	691b      	ldr	r3, [r3, #16]
 800cdd8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	689b      	ldr	r3, [r3, #8]
 800cde0:	4619      	mov	r1, r3
 800cde2:	4610      	mov	r0, r2
 800cde4:	f7fc f83c 	bl	8008e60 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800cde8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdea:	691b      	ldr	r3, [r3, #16]
 800cdec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cdf6:	4608      	mov	r0, r1
 800cdf8:	f7fc f85d 	bl	8008eb6 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800cdfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdfe:	691b      	ldr	r3, [r3, #16]
 800ce00:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ce0a:	4608      	mov	r0, r1
 800ce0c:	f7fc f853 	bl	8008eb6 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800ce10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce12:	691b      	ldr	r3, [r3, #16]
 800ce14:	330c      	adds	r3, #12
 800ce16:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fc f821 	bl	8008e60 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800ce1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce20:	691b      	ldr	r3, [r3, #16]
 800ce22:	3315      	adds	r3, #21
 800ce24:	2200      	movs	r2, #0
 800ce26:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800ce28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce2a:	691b      	ldr	r3, [r3, #16]
 800ce2c:	3310      	adds	r3, #16
 800ce2e:	2100      	movs	r1, #0
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7fc f815 	bl	8008e60 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800ce36:	f107 0308 	add.w	r3, r7, #8
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f7fd fe24 	bl	800aa88 <store_xdir>
 800ce40:	4603      	mov	r3, r0
 800ce42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ce46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d15b      	bne.n	800cf06 <f_sync+0x230>
							res = sync_fs(fs);
 800ce4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7fc fb09 	bl	8009468 <sync_fs>
 800ce56:	4603      	mov	r3, r0
 800ce58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ce62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce66:	b2da      	uxtb	r2, r3
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ce6e:	e04a      	b.n	800cf06 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ce70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce76:	4619      	mov	r1, r3
 800ce78:	4610      	mov	r0, r2
 800ce7a:	f7fc fac7 	bl	800940c <move_window>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800ce84:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d13c      	bne.n	800cf06 <f_sync+0x230>
					dir = fp->dir_ptr;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce90:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ce92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce94:	330b      	adds	r3, #11
 800ce96:	781a      	ldrb	r2, [r3, #0]
 800ce98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce9a:	330b      	adds	r3, #11
 800ce9c:	f042 0220 	orr.w	r2, r2, #32
 800cea0:	b2d2      	uxtb	r2, r2
 800cea2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6818      	ldr	r0, [r3, #0]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	689b      	ldr	r3, [r3, #8]
 800ceac:	461a      	mov	r2, r3
 800ceae:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ceb0:	f7fd fa85 	bl	800a3be <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ceb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ceb6:	f103 001c 	add.w	r0, r3, #28
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cec0:	4613      	mov	r3, r2
 800cec2:	4619      	mov	r1, r3
 800cec4:	f7fb ffcc 	bl	8008e60 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ceca:	3316      	adds	r3, #22
 800cecc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cece:	4618      	mov	r0, r3
 800ced0:	f7fb ffc6 	bl	8008e60 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ced4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ced6:	3312      	adds	r3, #18
 800ced8:	2100      	movs	r1, #0
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7fb ffa6 	bl	8008e2c <st_word>
					fs->wflag = 1;
 800cee0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cee2:	2201      	movs	r2, #1
 800cee4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7fc fabd 	bl	8009468 <sync_fs>
 800ceee:	4603      	mov	r3, r0
 800cef0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cefa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cefe:	b2da      	uxtb	r2, r3
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cf06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3768      	adds	r7, #104	; 0x68
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}

0800cf12 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cf12:	b580      	push	{r7, lr}
 800cf14:	b084      	sub	sp, #16
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f7ff fedb 	bl	800ccd6 <f_sync>
 800cf20:	4603      	mov	r3, r0
 800cf22:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cf24:	7bfb      	ldrb	r3, [r7, #15]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d118      	bne.n	800cf5c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f107 0208 	add.w	r2, r7, #8
 800cf30:	4611      	mov	r1, r2
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7ff f864 	bl	800c000 <validate>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cf3c:	7bfb      	ldrb	r3, [r7, #15]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d10c      	bne.n	800cf5c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7fc f9be 	bl	80092c8 <dec_lock>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cf50:	7bfb      	ldrb	r3, [r7, #15]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d102      	bne.n	800cf5c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cf5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3710      	adds	r7, #16
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}

0800cf66 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800cf66:	b580      	push	{r7, lr}
 800cf68:	b09a      	sub	sp, #104	; 0x68
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	60f8      	str	r0, [r7, #12]
 800cf6e:	60b9      	str	r1, [r7, #8]
 800cf70:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800cf72:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800cf76:	f107 030c 	add.w	r3, r7, #12
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7fe fce3 	bl	800b948 <find_volume>
 800cf82:	4603      	mov	r3, r0
 800cf84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800cf88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	f040 80e6 	bne.w	800d15e <f_getfree+0x1f8>
		*fatfs = fs;				/* Return ptr to the fs object */
 800cf92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800cf98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf9a:	699a      	ldr	r2, [r3, #24]
 800cf9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf9e:	69db      	ldr	r3, [r3, #28]
 800cfa0:	3b02      	subs	r3, #2
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d804      	bhi.n	800cfb0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800cfa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfa8:	699a      	ldr	r2, [r3, #24]
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	601a      	str	r2, [r3, #0]
 800cfae:	e0d6      	b.n	800d15e <f_getfree+0x1f8>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800cfb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d128      	bne.n	800d00e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800cfbc:	2302      	movs	r3, #2
 800cfbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfc2:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 800cfc4:	f107 0310 	add.w	r3, r7, #16
 800cfc8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7fc fad8 	bl	8009580 <get_fat>
 800cfd0:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800cfd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfd8:	d103      	bne.n	800cfe2 <f_getfree+0x7c>
 800cfda:	2301      	movs	r3, #1
 800cfdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cfe0:	e0b0      	b.n	800d144 <f_getfree+0x1de>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800cfe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfe4:	2b01      	cmp	r3, #1
 800cfe6:	d103      	bne.n	800cff0 <f_getfree+0x8a>
 800cfe8:	2302      	movs	r3, #2
 800cfea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cfee:	e0a9      	b.n	800d144 <f_getfree+0x1de>
					if (stat == 0) nfree++;
 800cff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d102      	bne.n	800cffc <f_getfree+0x96>
 800cff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cff8:	3301      	adds	r3, #1
 800cffa:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 800cffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cffe:	3301      	adds	r3, #1
 800d000:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d004:	69db      	ldr	r3, [r3, #28]
 800d006:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d008:	429a      	cmp	r2, r3
 800d00a:	d3db      	bcc.n	800cfc4 <f_getfree+0x5e>
 800d00c:	e09a      	b.n	800d144 <f_getfree+0x1de>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 800d00e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	2b04      	cmp	r3, #4
 800d014:	d146      	bne.n	800d0a4 <f_getfree+0x13e>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 800d016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d018:	69db      	ldr	r3, [r3, #28]
 800d01a:	3b02      	subs	r3, #2
 800d01c:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 800d01e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d022:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 800d024:	2300      	movs	r3, #0
 800d026:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800d028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d10d      	bne.n	800d04a <f_getfree+0xe4>
 800d02e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d030:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d032:	1c5a      	adds	r2, r3, #1
 800d034:	65ba      	str	r2, [r7, #88]	; 0x58
 800d036:	4619      	mov	r1, r3
 800d038:	f7fc f9e8 	bl	800940c <move_window>
 800d03c:	4603      	mov	r3, r0
 800d03e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d042:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d046:	2b00      	cmp	r3, #0
 800d048:	d179      	bne.n	800d13e <f_getfree+0x1d8>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800d04a:	2308      	movs	r3, #8
 800d04c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d04e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d052:	4413      	add	r3, r2
 800d054:	3338      	adds	r3, #56	; 0x38
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d05c:	e013      	b.n	800d086 <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 800d05e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d062:	f003 0301 	and.w	r3, r3, #1
 800d066:	2b00      	cmp	r3, #0
 800d068:	d102      	bne.n	800d070 <f_getfree+0x10a>
 800d06a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d06c:	3301      	adds	r3, #1
 800d06e:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 800d070:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d074:	085b      	lsrs	r3, r3, #1
 800d076:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800d07a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d07c:	3b01      	subs	r3, #1
 800d07e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d080:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d082:	3b01      	subs	r3, #1
 800d084:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d002      	beq.n	800d092 <f_getfree+0x12c>
 800d08c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d1e5      	bne.n	800d05e <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 800d092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d094:	3301      	adds	r3, #1
 800d096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d09a:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 800d09c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d1c2      	bne.n	800d028 <f_getfree+0xc2>
 800d0a2:	e04f      	b.n	800d144 <f_getfree+0x1de>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800d0a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0a6:	69db      	ldr	r3, [r3, #28]
 800d0a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d0aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ae:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	657b      	str	r3, [r7, #84]	; 0x54
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 800d0b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d113      	bne.n	800d0e6 <f_getfree+0x180>
							res = move_window(fs, sect++);
 800d0be:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d0c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0c2:	1c5a      	adds	r2, r3, #1
 800d0c4:	65ba      	str	r2, [r7, #88]	; 0x58
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	f7fc f9a0 	bl	800940c <move_window>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 800d0d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d133      	bne.n	800d142 <f_getfree+0x1dc>
							p = fs->win;
 800d0da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0dc:	3338      	adds	r3, #56	; 0x38
 800d0de:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 800d0e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d0e4:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 800d0e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	2b02      	cmp	r3, #2
 800d0ec:	d10f      	bne.n	800d10e <f_getfree+0x1a8>
							if (ld_word(p) == 0) nfree++;
 800d0ee:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d0f0:	f7fb fd8a 	bl	8008c08 <ld_word>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d102      	bne.n	800d100 <f_getfree+0x19a>
 800d0fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 800d100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d102:	3302      	adds	r3, #2
 800d104:	653b      	str	r3, [r7, #80]	; 0x50
 800d106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d108:	3b02      	subs	r3, #2
 800d10a:	657b      	str	r3, [r7, #84]	; 0x54
 800d10c:	e010      	b.n	800d130 <f_getfree+0x1ca>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800d10e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d110:	f7fb fd91 	bl	8008c36 <ld_dword>
 800d114:	4603      	mov	r3, r0
 800d116:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d102      	bne.n	800d124 <f_getfree+0x1be>
 800d11e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d120:	3301      	adds	r3, #1
 800d122:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 800d124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d126:	3304      	adds	r3, #4
 800d128:	653b      	str	r3, [r7, #80]	; 0x50
 800d12a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d12c:	3b04      	subs	r3, #4
 800d12e:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 800d130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d132:	3b01      	subs	r3, #1
 800d134:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d1bd      	bne.n	800d0b8 <f_getfree+0x152>
 800d13c:	e002      	b.n	800d144 <f_getfree+0x1de>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800d13e:	bf00      	nop
 800d140:	e000      	b.n	800d144 <f_getfree+0x1de>
							if (res != FR_OK) break;
 800d142:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d148:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800d14a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d14c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d14e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800d150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d152:	791a      	ldrb	r2, [r3, #4]
 800d154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d156:	f042 0201 	orr.w	r2, r2, #1
 800d15a:	b2d2      	uxtb	r2, r2
 800d15c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800d15e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d162:	4618      	mov	r0, r3
 800d164:	3768      	adds	r7, #104	; 0x68
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
	...

0800d16c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b087      	sub	sp, #28
 800d170:	af00      	add	r7, sp, #0
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	60b9      	str	r1, [r7, #8]
 800d176:	4613      	mov	r3, r2
 800d178:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d17a:	2301      	movs	r3, #1
 800d17c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d17e:	2300      	movs	r3, #0
 800d180:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d182:	4b1f      	ldr	r3, [pc, #124]	; (800d200 <FATFS_LinkDriverEx+0x94>)
 800d184:	7e1b      	ldrb	r3, [r3, #24]
 800d186:	b2db      	uxtb	r3, r3
 800d188:	2b03      	cmp	r3, #3
 800d18a:	d833      	bhi.n	800d1f4 <FATFS_LinkDriverEx+0x88>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d18c:	4b1c      	ldr	r3, [pc, #112]	; (800d200 <FATFS_LinkDriverEx+0x94>)
 800d18e:	7e1b      	ldrb	r3, [r3, #24]
 800d190:	b2db      	uxtb	r3, r3
 800d192:	461a      	mov	r2, r3
 800d194:	4b1a      	ldr	r3, [pc, #104]	; (800d200 <FATFS_LinkDriverEx+0x94>)
 800d196:	2100      	movs	r1, #0
 800d198:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d19a:	4b19      	ldr	r3, [pc, #100]	; (800d200 <FATFS_LinkDriverEx+0x94>)
 800d19c:	7e1b      	ldrb	r3, [r3, #24]
 800d19e:	b2db      	uxtb	r3, r3
 800d1a0:	4a17      	ldr	r2, [pc, #92]	; (800d200 <FATFS_LinkDriverEx+0x94>)
 800d1a2:	009b      	lsls	r3, r3, #2
 800d1a4:	4413      	add	r3, r2
 800d1a6:	68fa      	ldr	r2, [r7, #12]
 800d1a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d1aa:	4b15      	ldr	r3, [pc, #84]	; (800d200 <FATFS_LinkDriverEx+0x94>)
 800d1ac:	7e1b      	ldrb	r3, [r3, #24]
 800d1ae:	b2db      	uxtb	r3, r3
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	4b13      	ldr	r3, [pc, #76]	; (800d200 <FATFS_LinkDriverEx+0x94>)
 800d1b4:	4413      	add	r3, r2
 800d1b6:	79fa      	ldrb	r2, [r7, #7]
 800d1b8:	751a      	strb	r2, [r3, #20]
    DiskNum = disk.nbr;
 800d1ba:	4b11      	ldr	r3, [pc, #68]	; (800d200 <FATFS_LinkDriverEx+0x94>)
 800d1bc:	7e1b      	ldrb	r3, [r3, #24]
 800d1be:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d1c0:	7dbb      	ldrb	r3, [r7, #22]
 800d1c2:	3330      	adds	r3, #48	; 0x30
 800d1c4:	b2da      	uxtb	r2, r3
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	223a      	movs	r2, #58	; 0x3a
 800d1d0:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	3302      	adds	r3, #2
 800d1d6:	222f      	movs	r2, #47	; 0x2f
 800d1d8:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	3303      	adds	r3, #3
 800d1de:	2200      	movs	r2, #0
 800d1e0:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	75fb      	strb	r3, [r7, #23]
    disk.nbr++;
 800d1e6:	4b06      	ldr	r3, [pc, #24]	; (800d200 <FATFS_LinkDriverEx+0x94>)
 800d1e8:	7e1b      	ldrb	r3, [r3, #24]
 800d1ea:	b2db      	uxtb	r3, r3
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	b2da      	uxtb	r2, r3
 800d1f0:	4b03      	ldr	r3, [pc, #12]	; (800d200 <FATFS_LinkDriverEx+0x94>)
 800d1f2:	761a      	strb	r2, [r3, #24]

  }

  return ret;
 800d1f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	371c      	adds	r7, #28
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bc80      	pop	{r7}
 800d1fe:	4770      	bx	lr
 800d200:	20002d64 	.word	0x20002d64

0800d204 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b082      	sub	sp, #8
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d20e:	2200      	movs	r2, #0
 800d210:	6839      	ldr	r1, [r7, #0]
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f7ff ffaa 	bl	800d16c <FATFS_LinkDriverEx>
 800d218:	4603      	mov	r3, r0
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3708      	adds	r7, #8
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
	...

0800d224 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d224:	b480      	push	{r7}
 800d226:	b085      	sub	sp, #20
 800d228:	af00      	add	r7, sp, #0
 800d22a:	4603      	mov	r3, r0
 800d22c:	6039      	str	r1, [r7, #0]
 800d22e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d230:	88fb      	ldrh	r3, [r7, #6]
 800d232:	2b7f      	cmp	r3, #127	; 0x7f
 800d234:	d802      	bhi.n	800d23c <ff_convert+0x18>
		c = chr;
 800d236:	88fb      	ldrh	r3, [r7, #6]
 800d238:	81fb      	strh	r3, [r7, #14]
 800d23a:	e025      	b.n	800d288 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d00b      	beq.n	800d25a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d242:	88fb      	ldrh	r3, [r7, #6]
 800d244:	2bff      	cmp	r3, #255	; 0xff
 800d246:	d805      	bhi.n	800d254 <ff_convert+0x30>
 800d248:	88fb      	ldrh	r3, [r7, #6]
 800d24a:	3b80      	subs	r3, #128	; 0x80
 800d24c:	4a11      	ldr	r2, [pc, #68]	; (800d294 <ff_convert+0x70>)
 800d24e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d252:	e000      	b.n	800d256 <ff_convert+0x32>
 800d254:	2300      	movs	r3, #0
 800d256:	81fb      	strh	r3, [r7, #14]
 800d258:	e016      	b.n	800d288 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d25a:	2300      	movs	r3, #0
 800d25c:	81fb      	strh	r3, [r7, #14]
 800d25e:	e009      	b.n	800d274 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d260:	89fb      	ldrh	r3, [r7, #14]
 800d262:	4a0c      	ldr	r2, [pc, #48]	; (800d294 <ff_convert+0x70>)
 800d264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d268:	88fa      	ldrh	r2, [r7, #6]
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d006      	beq.n	800d27c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d26e:	89fb      	ldrh	r3, [r7, #14]
 800d270:	3301      	adds	r3, #1
 800d272:	81fb      	strh	r3, [r7, #14]
 800d274:	89fb      	ldrh	r3, [r7, #14]
 800d276:	2b7f      	cmp	r3, #127	; 0x7f
 800d278:	d9f2      	bls.n	800d260 <ff_convert+0x3c>
 800d27a:	e000      	b.n	800d27e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d27c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d27e:	89fb      	ldrh	r3, [r7, #14]
 800d280:	3380      	adds	r3, #128	; 0x80
 800d282:	b29b      	uxth	r3, r3
 800d284:	b2db      	uxtb	r3, r3
 800d286:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d288:	89fb      	ldrh	r3, [r7, #14]
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3714      	adds	r7, #20
 800d28e:	46bd      	mov	sp, r7
 800d290:	bc80      	pop	{r7}
 800d292:	4770      	bx	lr
 800d294:	080155fc 	.word	0x080155fc

0800d298 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d298:	b480      	push	{r7}
 800d29a:	b087      	sub	sp, #28
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	4603      	mov	r3, r0
 800d2a0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d2a2:	88fb      	ldrh	r3, [r7, #6]
 800d2a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2a8:	d201      	bcs.n	800d2ae <ff_wtoupper+0x16>
 800d2aa:	4b3d      	ldr	r3, [pc, #244]	; (800d3a0 <ff_wtoupper+0x108>)
 800d2ac:	e000      	b.n	800d2b0 <ff_wtoupper+0x18>
 800d2ae:	4b3d      	ldr	r3, [pc, #244]	; (800d3a4 <ff_wtoupper+0x10c>)
 800d2b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	1c9a      	adds	r2, r3, #2
 800d2b6:	617a      	str	r2, [r7, #20]
 800d2b8:	881b      	ldrh	r3, [r3, #0]
 800d2ba:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d2bc:	8a7b      	ldrh	r3, [r7, #18]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d068      	beq.n	800d394 <ff_wtoupper+0xfc>
 800d2c2:	88fa      	ldrh	r2, [r7, #6]
 800d2c4:	8a7b      	ldrh	r3, [r7, #18]
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d364      	bcc.n	800d394 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	1c9a      	adds	r2, r3, #2
 800d2ce:	617a      	str	r2, [r7, #20]
 800d2d0:	881b      	ldrh	r3, [r3, #0]
 800d2d2:	823b      	strh	r3, [r7, #16]
 800d2d4:	8a3b      	ldrh	r3, [r7, #16]
 800d2d6:	0a1b      	lsrs	r3, r3, #8
 800d2d8:	81fb      	strh	r3, [r7, #14]
 800d2da:	8a3b      	ldrh	r3, [r7, #16]
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d2e0:	88fa      	ldrh	r2, [r7, #6]
 800d2e2:	8a79      	ldrh	r1, [r7, #18]
 800d2e4:	8a3b      	ldrh	r3, [r7, #16]
 800d2e6:	440b      	add	r3, r1
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	da49      	bge.n	800d380 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d2ec:	89fb      	ldrh	r3, [r7, #14]
 800d2ee:	2b08      	cmp	r3, #8
 800d2f0:	d84f      	bhi.n	800d392 <ff_wtoupper+0xfa>
 800d2f2:	a201      	add	r2, pc, #4	; (adr r2, 800d2f8 <ff_wtoupper+0x60>)
 800d2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2f8:	0800d31d 	.word	0x0800d31d
 800d2fc:	0800d32f 	.word	0x0800d32f
 800d300:	0800d345 	.word	0x0800d345
 800d304:	0800d34d 	.word	0x0800d34d
 800d308:	0800d355 	.word	0x0800d355
 800d30c:	0800d35d 	.word	0x0800d35d
 800d310:	0800d365 	.word	0x0800d365
 800d314:	0800d36d 	.word	0x0800d36d
 800d318:	0800d375 	.word	0x0800d375
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d31c:	88fa      	ldrh	r2, [r7, #6]
 800d31e:	8a7b      	ldrh	r3, [r7, #18]
 800d320:	1ad3      	subs	r3, r2, r3
 800d322:	005b      	lsls	r3, r3, #1
 800d324:	697a      	ldr	r2, [r7, #20]
 800d326:	4413      	add	r3, r2
 800d328:	881b      	ldrh	r3, [r3, #0]
 800d32a:	80fb      	strh	r3, [r7, #6]
 800d32c:	e027      	b.n	800d37e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d32e:	88fa      	ldrh	r2, [r7, #6]
 800d330:	8a7b      	ldrh	r3, [r7, #18]
 800d332:	1ad3      	subs	r3, r2, r3
 800d334:	b29b      	uxth	r3, r3
 800d336:	f003 0301 	and.w	r3, r3, #1
 800d33a:	b29b      	uxth	r3, r3
 800d33c:	88fa      	ldrh	r2, [r7, #6]
 800d33e:	1ad3      	subs	r3, r2, r3
 800d340:	80fb      	strh	r3, [r7, #6]
 800d342:	e01c      	b.n	800d37e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d344:	88fb      	ldrh	r3, [r7, #6]
 800d346:	3b10      	subs	r3, #16
 800d348:	80fb      	strh	r3, [r7, #6]
 800d34a:	e018      	b.n	800d37e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d34c:	88fb      	ldrh	r3, [r7, #6]
 800d34e:	3b20      	subs	r3, #32
 800d350:	80fb      	strh	r3, [r7, #6]
 800d352:	e014      	b.n	800d37e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d354:	88fb      	ldrh	r3, [r7, #6]
 800d356:	3b30      	subs	r3, #48	; 0x30
 800d358:	80fb      	strh	r3, [r7, #6]
 800d35a:	e010      	b.n	800d37e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d35c:	88fb      	ldrh	r3, [r7, #6]
 800d35e:	3b1a      	subs	r3, #26
 800d360:	80fb      	strh	r3, [r7, #6]
 800d362:	e00c      	b.n	800d37e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d364:	88fb      	ldrh	r3, [r7, #6]
 800d366:	3308      	adds	r3, #8
 800d368:	80fb      	strh	r3, [r7, #6]
 800d36a:	e008      	b.n	800d37e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d36c:	88fb      	ldrh	r3, [r7, #6]
 800d36e:	3b50      	subs	r3, #80	; 0x50
 800d370:	80fb      	strh	r3, [r7, #6]
 800d372:	e004      	b.n	800d37e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d374:	88fb      	ldrh	r3, [r7, #6]
 800d376:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d37a:	80fb      	strh	r3, [r7, #6]
 800d37c:	bf00      	nop
			}
			break;
 800d37e:	e008      	b.n	800d392 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d380:	89fb      	ldrh	r3, [r7, #14]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d195      	bne.n	800d2b2 <ff_wtoupper+0x1a>
 800d386:	8a3b      	ldrh	r3, [r7, #16]
 800d388:	005b      	lsls	r3, r3, #1
 800d38a:	697a      	ldr	r2, [r7, #20]
 800d38c:	4413      	add	r3, r2
 800d38e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d390:	e78f      	b.n	800d2b2 <ff_wtoupper+0x1a>
			break;
 800d392:	bf00      	nop
	}

	return chr;
 800d394:	88fb      	ldrh	r3, [r7, #6]
}
 800d396:	4618      	mov	r0, r3
 800d398:	371c      	adds	r7, #28
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bc80      	pop	{r7}
 800d39e:	4770      	bx	lr
 800d3a0:	080156fc 	.word	0x080156fc
 800d3a4:	080158f0 	.word	0x080158f0

0800d3a8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b085      	sub	sp, #20
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d3b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d3ba:	2b84      	cmp	r3, #132	; 0x84
 800d3bc:	d005      	beq.n	800d3ca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d3be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	4413      	add	r3, r2
 800d3c6:	3303      	adds	r3, #3
 800d3c8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3714      	adds	r7, #20
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bc80      	pop	{r7}
 800d3d4:	4770      	bx	lr

0800d3d6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d3d6:	b480      	push	{r7}
 800d3d8:	b083      	sub	sp, #12
 800d3da:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3dc:	f3ef 8305 	mrs	r3, IPSR
 800d3e0:	607b      	str	r3, [r7, #4]
  return(result);
 800d3e2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	bf14      	ite	ne
 800d3e8:	2301      	movne	r3, #1
 800d3ea:	2300      	moveq	r3, #0
 800d3ec:	b2db      	uxtb	r3, r3
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	370c      	adds	r7, #12
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bc80      	pop	{r7}
 800d3f6:	4770      	bx	lr

0800d3f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d3fc:	f001 fbcc 	bl	800eb98 <vTaskStartScheduler>
  
  return osOK;
 800d400:	2300      	movs	r3, #0
}
 800d402:	4618      	mov	r0, r3
 800d404:	bd80      	pop	{r7, pc}

0800d406 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d406:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d408:	b089      	sub	sp, #36	; 0x24
 800d40a:	af04      	add	r7, sp, #16
 800d40c:	6078      	str	r0, [r7, #4]
 800d40e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	695b      	ldr	r3, [r3, #20]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d020      	beq.n	800d45a <osThreadCreate+0x54>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	699b      	ldr	r3, [r3, #24]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d01c      	beq.n	800d45a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	685c      	ldr	r4, [r3, #4]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681d      	ldr	r5, [r3, #0]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	691e      	ldr	r6, [r3, #16]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d432:	4618      	mov	r0, r3
 800d434:	f7ff ffb8 	bl	800d3a8 <makeFreeRtosPriority>
 800d438:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	695b      	ldr	r3, [r3, #20]
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d442:	9202      	str	r2, [sp, #8]
 800d444:	9301      	str	r3, [sp, #4]
 800d446:	9100      	str	r1, [sp, #0]
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	4632      	mov	r2, r6
 800d44c:	4629      	mov	r1, r5
 800d44e:	4620      	mov	r0, r4
 800d450:	f001 f9cc 	bl	800e7ec <xTaskCreateStatic>
 800d454:	4603      	mov	r3, r0
 800d456:	60fb      	str	r3, [r7, #12]
 800d458:	e01c      	b.n	800d494 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	685c      	ldr	r4, [r3, #4]
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d466:	b29e      	uxth	r6, r3
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d46e:	4618      	mov	r0, r3
 800d470:	f7ff ff9a 	bl	800d3a8 <makeFreeRtosPriority>
 800d474:	4602      	mov	r2, r0
 800d476:	f107 030c 	add.w	r3, r7, #12
 800d47a:	9301      	str	r3, [sp, #4]
 800d47c:	9200      	str	r2, [sp, #0]
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	4632      	mov	r2, r6
 800d482:	4629      	mov	r1, r5
 800d484:	4620      	mov	r0, r4
 800d486:	f001 fa0d 	bl	800e8a4 <xTaskCreate>
 800d48a:	4603      	mov	r3, r0
 800d48c:	2b01      	cmp	r3, #1
 800d48e:	d001      	beq.n	800d494 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d490:	2300      	movs	r3, #0
 800d492:	e000      	b.n	800d496 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d494:	68fb      	ldr	r3, [r7, #12]
}
 800d496:	4618      	mov	r0, r3
 800d498:	3714      	adds	r7, #20
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d49e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d49e:	b580      	push	{r7, lr}
 800d4a0:	b084      	sub	sp, #16
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d001      	beq.n	800d4b4 <osDelay+0x16>
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	e000      	b.n	800d4b6 <osDelay+0x18>
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f001 fb3a 	bl	800eb30 <vTaskDelay>
  
  return osOK;
 800d4bc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3710      	adds	r7, #16
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}

0800d4c6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b086      	sub	sp, #24
 800d4ca:	af02      	add	r7, sp, #8
 800d4cc:	6078      	str	r0, [r7, #4]
 800d4ce:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d00f      	beq.n	800d4f8 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	d10a      	bne.n	800d4f4 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	2203      	movs	r2, #3
 800d4e4:	9200      	str	r2, [sp, #0]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	2100      	movs	r1, #0
 800d4ea:	2001      	movs	r0, #1
 800d4ec:	f000 fa96 	bl	800da1c <xQueueGenericCreateStatic>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	e016      	b.n	800d522 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	e014      	b.n	800d522 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	d110      	bne.n	800d520 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800d4fe:	2203      	movs	r2, #3
 800d500:	2100      	movs	r1, #0
 800d502:	2001      	movs	r0, #1
 800d504:	f000 fb01 	bl	800db0a <xQueueGenericCreate>
 800d508:	60f8      	str	r0, [r7, #12]
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d005      	beq.n	800d51c <osSemaphoreCreate+0x56>
 800d510:	2300      	movs	r3, #0
 800d512:	2200      	movs	r2, #0
 800d514:	2100      	movs	r1, #0
 800d516:	68f8      	ldr	r0, [r7, #12]
 800d518:	f000 fb54 	bl	800dbc4 <xQueueGenericSend>
      return sema;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	e000      	b.n	800d522 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800d520:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800d522:	4618      	mov	r0, r3
 800d524:	3710      	adds	r7, #16
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}
	...

0800d52c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b084      	sub	sp, #16
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d536:	2300      	movs	r3, #0
 800d538:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d101      	bne.n	800d544 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800d540:	2380      	movs	r3, #128	; 0x80
 800d542:	e03a      	b.n	800d5ba <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800d544:	2300      	movs	r3, #0
 800d546:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d54e:	d103      	bne.n	800d558 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800d550:	f04f 33ff 	mov.w	r3, #4294967295
 800d554:	60fb      	str	r3, [r7, #12]
 800d556:	e009      	b.n	800d56c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d006      	beq.n	800d56c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d101      	bne.n	800d56c <osSemaphoreWait+0x40>
      ticks = 1;
 800d568:	2301      	movs	r3, #1
 800d56a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800d56c:	f7ff ff33 	bl	800d3d6 <inHandlerMode>
 800d570:	4603      	mov	r3, r0
 800d572:	2b00      	cmp	r3, #0
 800d574:	d017      	beq.n	800d5a6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d576:	f107 0308 	add.w	r3, r7, #8
 800d57a:	461a      	mov	r2, r3
 800d57c:	2100      	movs	r1, #0
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 ff30 	bl	800e3e4 <xQueueReceiveFromISR>
 800d584:	4603      	mov	r3, r0
 800d586:	2b01      	cmp	r3, #1
 800d588:	d001      	beq.n	800d58e <osSemaphoreWait+0x62>
      return osErrorOS;
 800d58a:	23ff      	movs	r3, #255	; 0xff
 800d58c:	e015      	b.n	800d5ba <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d011      	beq.n	800d5b8 <osSemaphoreWait+0x8c>
 800d594:	4b0b      	ldr	r3, [pc, #44]	; (800d5c4 <osSemaphoreWait+0x98>)
 800d596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d59a:	601a      	str	r2, [r3, #0]
 800d59c:	f3bf 8f4f 	dsb	sy
 800d5a0:	f3bf 8f6f 	isb	sy
 800d5a4:	e008      	b.n	800d5b8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d5a6:	68f9      	ldr	r1, [r7, #12]
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f000 fe0f 	bl	800e1cc <xQueueSemaphoreTake>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d001      	beq.n	800d5b8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800d5b4:	23ff      	movs	r3, #255	; 0xff
 800d5b6:	e000      	b.n	800d5ba <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800d5b8:	2300      	movs	r3, #0
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3710      	adds	r7, #16
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	e000ed04 	.word	0xe000ed04

0800d5c8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800d5d8:	f7ff fefd 	bl	800d3d6 <inHandlerMode>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d016      	beq.n	800d610 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d5e2:	f107 0308 	add.w	r3, r7, #8
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f000 fc81 	bl	800def0 <xQueueGiveFromISR>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	2b01      	cmp	r3, #1
 800d5f2:	d001      	beq.n	800d5f8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800d5f4:	23ff      	movs	r3, #255	; 0xff
 800d5f6:	e017      	b.n	800d628 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d013      	beq.n	800d626 <osSemaphoreRelease+0x5e>
 800d5fe:	4b0c      	ldr	r3, [pc, #48]	; (800d630 <osSemaphoreRelease+0x68>)
 800d600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d604:	601a      	str	r2, [r3, #0]
 800d606:	f3bf 8f4f 	dsb	sy
 800d60a:	f3bf 8f6f 	isb	sy
 800d60e:	e00a      	b.n	800d626 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800d610:	2300      	movs	r3, #0
 800d612:	2200      	movs	r2, #0
 800d614:	2100      	movs	r1, #0
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f000 fad4 	bl	800dbc4 <xQueueGenericSend>
 800d61c:	4603      	mov	r3, r0
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d001      	beq.n	800d626 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800d622:	23ff      	movs	r3, #255	; 0xff
 800d624:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800d626:	68fb      	ldr	r3, [r7, #12]
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3710      	adds	r7, #16
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	e000ed04 	.word	0xe000ed04

0800d634 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800d634:	b590      	push	{r4, r7, lr}
 800d636:	b085      	sub	sp, #20
 800d638:	af02      	add	r7, sp, #8
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	689b      	ldr	r3, [r3, #8]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d011      	beq.n	800d66a <osMessageCreate+0x36>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	68db      	ldr	r3, [r3, #12]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d00d      	beq.n	800d66a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6818      	ldr	r0, [r3, #0]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6859      	ldr	r1, [r3, #4]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	689a      	ldr	r2, [r3, #8]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	68db      	ldr	r3, [r3, #12]
 800d65e:	2400      	movs	r4, #0
 800d660:	9400      	str	r4, [sp, #0]
 800d662:	f000 f9db 	bl	800da1c <xQueueGenericCreateStatic>
 800d666:	4603      	mov	r3, r0
 800d668:	e008      	b.n	800d67c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6818      	ldr	r0, [r3, #0]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	685b      	ldr	r3, [r3, #4]
 800d672:	2200      	movs	r2, #0
 800d674:	4619      	mov	r1, r3
 800d676:	f000 fa48 	bl	800db0a <xQueueGenericCreate>
 800d67a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	370c      	adds	r7, #12
 800d680:	46bd      	mov	sp, r7
 800d682:	bd90      	pop	{r4, r7, pc}

0800d684 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b086      	sub	sp, #24
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800d690:	2300      	movs	r3, #0
 800d692:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d101      	bne.n	800d6a2 <osMessagePut+0x1e>
    ticks = 1;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800d6a2:	f7ff fe98 	bl	800d3d6 <inHandlerMode>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d018      	beq.n	800d6de <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800d6ac:	f107 0210 	add.w	r2, r7, #16
 800d6b0:	f107 0108 	add.w	r1, r7, #8
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	68f8      	ldr	r0, [r7, #12]
 800d6b8:	f000 fb82 	bl	800ddc0 <xQueueGenericSendFromISR>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	2b01      	cmp	r3, #1
 800d6c0:	d001      	beq.n	800d6c6 <osMessagePut+0x42>
      return osErrorOS;
 800d6c2:	23ff      	movs	r3, #255	; 0xff
 800d6c4:	e018      	b.n	800d6f8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d014      	beq.n	800d6f6 <osMessagePut+0x72>
 800d6cc:	4b0c      	ldr	r3, [pc, #48]	; (800d700 <osMessagePut+0x7c>)
 800d6ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6d2:	601a      	str	r2, [r3, #0]
 800d6d4:	f3bf 8f4f 	dsb	sy
 800d6d8:	f3bf 8f6f 	isb	sy
 800d6dc:	e00b      	b.n	800d6f6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800d6de:	f107 0108 	add.w	r1, r7, #8
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	697a      	ldr	r2, [r7, #20]
 800d6e6:	68f8      	ldr	r0, [r7, #12]
 800d6e8:	f000 fa6c 	bl	800dbc4 <xQueueGenericSend>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	d001      	beq.n	800d6f6 <osMessagePut+0x72>
      return osErrorOS;
 800d6f2:	23ff      	movs	r3, #255	; 0xff
 800d6f4:	e000      	b.n	800d6f8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800d6f6:	2300      	movs	r3, #0
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3718      	adds	r7, #24
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	e000ed04 	.word	0xe000ed04

0800d704 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800d704:	b590      	push	{r4, r7, lr}
 800d706:	b08b      	sub	sp, #44	; 0x2c
 800d708:	af00      	add	r7, sp, #0
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	60b9      	str	r1, [r7, #8]
 800d70e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800d714:	2300      	movs	r3, #0
 800d716:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d10a      	bne.n	800d734 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800d71e:	2380      	movs	r3, #128	; 0x80
 800d720:	617b      	str	r3, [r7, #20]
    return event;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	461c      	mov	r4, r3
 800d726:	f107 0314 	add.w	r3, r7, #20
 800d72a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d72e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d732:	e054      	b.n	800d7de <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800d734:	2300      	movs	r3, #0
 800d736:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800d738:	2300      	movs	r3, #0
 800d73a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d742:	d103      	bne.n	800d74c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800d744:	f04f 33ff 	mov.w	r3, #4294967295
 800d748:	627b      	str	r3, [r7, #36]	; 0x24
 800d74a:	e009      	b.n	800d760 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d006      	beq.n	800d760 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800d756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d101      	bne.n	800d760 <osMessageGet+0x5c>
      ticks = 1;
 800d75c:	2301      	movs	r3, #1
 800d75e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800d760:	f7ff fe39 	bl	800d3d6 <inHandlerMode>
 800d764:	4603      	mov	r3, r0
 800d766:	2b00      	cmp	r3, #0
 800d768:	d01c      	beq.n	800d7a4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800d76a:	f107 0220 	add.w	r2, r7, #32
 800d76e:	f107 0314 	add.w	r3, r7, #20
 800d772:	3304      	adds	r3, #4
 800d774:	4619      	mov	r1, r3
 800d776:	68b8      	ldr	r0, [r7, #8]
 800d778:	f000 fe34 	bl	800e3e4 <xQueueReceiveFromISR>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d102      	bne.n	800d788 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800d782:	2310      	movs	r3, #16
 800d784:	617b      	str	r3, [r7, #20]
 800d786:	e001      	b.n	800d78c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800d788:	2300      	movs	r3, #0
 800d78a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d78c:	6a3b      	ldr	r3, [r7, #32]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d01d      	beq.n	800d7ce <osMessageGet+0xca>
 800d792:	4b15      	ldr	r3, [pc, #84]	; (800d7e8 <osMessageGet+0xe4>)
 800d794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d798:	601a      	str	r2, [r3, #0]
 800d79a:	f3bf 8f4f 	dsb	sy
 800d79e:	f3bf 8f6f 	isb	sy
 800d7a2:	e014      	b.n	800d7ce <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800d7a4:	f107 0314 	add.w	r3, r7, #20
 800d7a8:	3304      	adds	r3, #4
 800d7aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	68b8      	ldr	r0, [r7, #8]
 800d7b0:	f000 fc2c 	bl	800e00c <xQueueReceive>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	2b01      	cmp	r3, #1
 800d7b8:	d102      	bne.n	800d7c0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800d7ba:	2310      	movs	r3, #16
 800d7bc:	617b      	str	r3, [r7, #20]
 800d7be:	e006      	b.n	800d7ce <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800d7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d101      	bne.n	800d7ca <osMessageGet+0xc6>
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	e000      	b.n	800d7cc <osMessageGet+0xc8>
 800d7ca:	2340      	movs	r3, #64	; 0x40
 800d7cc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	461c      	mov	r4, r3
 800d7d2:	f107 0314 	add.w	r3, r7, #20
 800d7d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d7da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d7de:	68f8      	ldr	r0, [r7, #12]
 800d7e0:	372c      	adds	r7, #44	; 0x2c
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd90      	pop	{r4, r7, pc}
 800d7e6:	bf00      	nop
 800d7e8:	e000ed04 	.word	0xe000ed04

0800d7ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b083      	sub	sp, #12
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f103 0208 	add.w	r2, r3, #8
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f04f 32ff 	mov.w	r2, #4294967295
 800d804:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f103 0208 	add.w	r2, r3, #8
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f103 0208 	add.w	r2, r3, #8
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2200      	movs	r2, #0
 800d81e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d820:	bf00      	nop
 800d822:	370c      	adds	r7, #12
 800d824:	46bd      	mov	sp, r7
 800d826:	bc80      	pop	{r7}
 800d828:	4770      	bx	lr

0800d82a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d82a:	b480      	push	{r7}
 800d82c:	b083      	sub	sp, #12
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2200      	movs	r2, #0
 800d836:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d838:	bf00      	nop
 800d83a:	370c      	adds	r7, #12
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bc80      	pop	{r7}
 800d840:	4770      	bx	lr

0800d842 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d842:	b480      	push	{r7}
 800d844:	b085      	sub	sp, #20
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
 800d84a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	68fa      	ldr	r2, [r7, #12]
 800d856:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	689a      	ldr	r2, [r3, #8]
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	689b      	ldr	r3, [r3, #8]
 800d864:	683a      	ldr	r2, [r7, #0]
 800d866:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	683a      	ldr	r2, [r7, #0]
 800d86c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	1c5a      	adds	r2, r3, #1
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	601a      	str	r2, [r3, #0]
}
 800d87e:	bf00      	nop
 800d880:	3714      	adds	r7, #20
 800d882:	46bd      	mov	sp, r7
 800d884:	bc80      	pop	{r7}
 800d886:	4770      	bx	lr

0800d888 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d888:	b480      	push	{r7}
 800d88a:	b085      	sub	sp, #20
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d89e:	d103      	bne.n	800d8a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	691b      	ldr	r3, [r3, #16]
 800d8a4:	60fb      	str	r3, [r7, #12]
 800d8a6:	e00c      	b.n	800d8c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	3308      	adds	r3, #8
 800d8ac:	60fb      	str	r3, [r7, #12]
 800d8ae:	e002      	b.n	800d8b6 <vListInsert+0x2e>
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	685b      	ldr	r3, [r3, #4]
 800d8b4:	60fb      	str	r3, [r7, #12]
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	68ba      	ldr	r2, [r7, #8]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d2f6      	bcs.n	800d8b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	685a      	ldr	r2, [r3, #4]
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	683a      	ldr	r2, [r7, #0]
 800d8d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	68fa      	ldr	r2, [r7, #12]
 800d8d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	683a      	ldr	r2, [r7, #0]
 800d8dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	687a      	ldr	r2, [r7, #4]
 800d8e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	1c5a      	adds	r2, r3, #1
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	601a      	str	r2, [r3, #0]
}
 800d8ee:	bf00      	nop
 800d8f0:	3714      	adds	r7, #20
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bc80      	pop	{r7}
 800d8f6:	4770      	bx	lr

0800d8f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b085      	sub	sp, #20
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	691b      	ldr	r3, [r3, #16]
 800d904:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	685b      	ldr	r3, [r3, #4]
 800d90a:	687a      	ldr	r2, [r7, #4]
 800d90c:	6892      	ldr	r2, [r2, #8]
 800d90e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	689b      	ldr	r3, [r3, #8]
 800d914:	687a      	ldr	r2, [r7, #4]
 800d916:	6852      	ldr	r2, [r2, #4]
 800d918:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	687a      	ldr	r2, [r7, #4]
 800d920:	429a      	cmp	r2, r3
 800d922:	d103      	bne.n	800d92c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	689a      	ldr	r2, [r3, #8]
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2200      	movs	r2, #0
 800d930:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	1e5a      	subs	r2, r3, #1
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
}
 800d940:	4618      	mov	r0, r3
 800d942:	3714      	adds	r7, #20
 800d944:	46bd      	mov	sp, r7
 800d946:	bc80      	pop	{r7}
 800d948:	4770      	bx	lr
	...

0800d94c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d10a      	bne.n	800d976 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d964:	f383 8811 	msr	BASEPRI, r3
 800d968:	f3bf 8f6f 	isb	sy
 800d96c:	f3bf 8f4f 	dsb	sy
 800d970:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d972:	bf00      	nop
 800d974:	e7fe      	b.n	800d974 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d976:	f002 fb99 	bl	80100ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681a      	ldr	r2, [r3, #0]
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d982:	68f9      	ldr	r1, [r7, #12]
 800d984:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d986:	fb01 f303 	mul.w	r3, r1, r3
 800d98a:	441a      	add	r2, r3
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	2200      	movs	r2, #0
 800d994:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681a      	ldr	r2, [r3, #0]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681a      	ldr	r2, [r3, #0]
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9a6:	3b01      	subs	r3, #1
 800d9a8:	68f9      	ldr	r1, [r7, #12]
 800d9aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d9ac:	fb01 f303 	mul.w	r3, r1, r3
 800d9b0:	441a      	add	r2, r3
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	22ff      	movs	r2, #255	; 0xff
 800d9ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	22ff      	movs	r2, #255	; 0xff
 800d9c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d114      	bne.n	800d9f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	691b      	ldr	r3, [r3, #16]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d01a      	beq.n	800da0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	3310      	adds	r3, #16
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f001 fb75 	bl	800f0c8 <xTaskRemoveFromEventList>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d012      	beq.n	800da0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d9e4:	4b0c      	ldr	r3, [pc, #48]	; (800da18 <xQueueGenericReset+0xcc>)
 800d9e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9ea:	601a      	str	r2, [r3, #0]
 800d9ec:	f3bf 8f4f 	dsb	sy
 800d9f0:	f3bf 8f6f 	isb	sy
 800d9f4:	e009      	b.n	800da0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	3310      	adds	r3, #16
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f7ff fef6 	bl	800d7ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	3324      	adds	r3, #36	; 0x24
 800da04:	4618      	mov	r0, r3
 800da06:	f7ff fef1 	bl	800d7ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800da0a:	f002 fb7f 	bl	801010c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800da0e:	2301      	movs	r3, #1
}
 800da10:	4618      	mov	r0, r3
 800da12:	3710      	adds	r7, #16
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	e000ed04 	.word	0xe000ed04

0800da1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b08e      	sub	sp, #56	; 0x38
 800da20:	af02      	add	r7, sp, #8
 800da22:	60f8      	str	r0, [r7, #12]
 800da24:	60b9      	str	r1, [r7, #8]
 800da26:	607a      	str	r2, [r7, #4]
 800da28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d10a      	bne.n	800da46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800da30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da34:	f383 8811 	msr	BASEPRI, r3
 800da38:	f3bf 8f6f 	isb	sy
 800da3c:	f3bf 8f4f 	dsb	sy
 800da40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800da42:	bf00      	nop
 800da44:	e7fe      	b.n	800da44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d10a      	bne.n	800da62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800da4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da50:	f383 8811 	msr	BASEPRI, r3
 800da54:	f3bf 8f6f 	isb	sy
 800da58:	f3bf 8f4f 	dsb	sy
 800da5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800da5e:	bf00      	nop
 800da60:	e7fe      	b.n	800da60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d002      	beq.n	800da6e <xQueueGenericCreateStatic+0x52>
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d001      	beq.n	800da72 <xQueueGenericCreateStatic+0x56>
 800da6e:	2301      	movs	r3, #1
 800da70:	e000      	b.n	800da74 <xQueueGenericCreateStatic+0x58>
 800da72:	2300      	movs	r3, #0
 800da74:	2b00      	cmp	r3, #0
 800da76:	d10a      	bne.n	800da8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800da78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7c:	f383 8811 	msr	BASEPRI, r3
 800da80:	f3bf 8f6f 	isb	sy
 800da84:	f3bf 8f4f 	dsb	sy
 800da88:	623b      	str	r3, [r7, #32]
}
 800da8a:	bf00      	nop
 800da8c:	e7fe      	b.n	800da8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d102      	bne.n	800da9a <xQueueGenericCreateStatic+0x7e>
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d101      	bne.n	800da9e <xQueueGenericCreateStatic+0x82>
 800da9a:	2301      	movs	r3, #1
 800da9c:	e000      	b.n	800daa0 <xQueueGenericCreateStatic+0x84>
 800da9e:	2300      	movs	r3, #0
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d10a      	bne.n	800daba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800daa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa8:	f383 8811 	msr	BASEPRI, r3
 800daac:	f3bf 8f6f 	isb	sy
 800dab0:	f3bf 8f4f 	dsb	sy
 800dab4:	61fb      	str	r3, [r7, #28]
}
 800dab6:	bf00      	nop
 800dab8:	e7fe      	b.n	800dab8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800daba:	2348      	movs	r3, #72	; 0x48
 800dabc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	2b48      	cmp	r3, #72	; 0x48
 800dac2:	d00a      	beq.n	800dada <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800dac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac8:	f383 8811 	msr	BASEPRI, r3
 800dacc:	f3bf 8f6f 	isb	sy
 800dad0:	f3bf 8f4f 	dsb	sy
 800dad4:	61bb      	str	r3, [r7, #24]
}
 800dad6:	bf00      	nop
 800dad8:	e7fe      	b.n	800dad8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800dade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d00d      	beq.n	800db00 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae6:	2201      	movs	r2, #1
 800dae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800daec:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800daf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf2:	9300      	str	r3, [sp, #0]
 800daf4:	4613      	mov	r3, r2
 800daf6:	687a      	ldr	r2, [r7, #4]
 800daf8:	68b9      	ldr	r1, [r7, #8]
 800dafa:	68f8      	ldr	r0, [r7, #12]
 800dafc:	f000 f843 	bl	800db86 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800db00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800db02:	4618      	mov	r0, r3
 800db04:	3730      	adds	r7, #48	; 0x30
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}

0800db0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800db0a:	b580      	push	{r7, lr}
 800db0c:	b08a      	sub	sp, #40	; 0x28
 800db0e:	af02      	add	r7, sp, #8
 800db10:	60f8      	str	r0, [r7, #12]
 800db12:	60b9      	str	r1, [r7, #8]
 800db14:	4613      	mov	r3, r2
 800db16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d10a      	bne.n	800db34 <xQueueGenericCreate+0x2a>
	__asm volatile
 800db1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db22:	f383 8811 	msr	BASEPRI, r3
 800db26:	f3bf 8f6f 	isb	sy
 800db2a:	f3bf 8f4f 	dsb	sy
 800db2e:	613b      	str	r3, [r7, #16]
}
 800db30:	bf00      	nop
 800db32:	e7fe      	b.n	800db32 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d102      	bne.n	800db40 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800db3a:	2300      	movs	r3, #0
 800db3c:	61fb      	str	r3, [r7, #28]
 800db3e:	e004      	b.n	800db4a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	68ba      	ldr	r2, [r7, #8]
 800db44:	fb02 f303 	mul.w	r3, r2, r3
 800db48:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	3348      	adds	r3, #72	; 0x48
 800db4e:	4618      	mov	r0, r3
 800db50:	f002 fbac 	bl	80102ac <pvPortMalloc>
 800db54:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800db56:	69bb      	ldr	r3, [r7, #24]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d00f      	beq.n	800db7c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800db5c:	69bb      	ldr	r3, [r7, #24]
 800db5e:	3348      	adds	r3, #72	; 0x48
 800db60:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800db62:	69bb      	ldr	r3, [r7, #24]
 800db64:	2200      	movs	r2, #0
 800db66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800db6a:	79fa      	ldrb	r2, [r7, #7]
 800db6c:	69bb      	ldr	r3, [r7, #24]
 800db6e:	9300      	str	r3, [sp, #0]
 800db70:	4613      	mov	r3, r2
 800db72:	697a      	ldr	r2, [r7, #20]
 800db74:	68b9      	ldr	r1, [r7, #8]
 800db76:	68f8      	ldr	r0, [r7, #12]
 800db78:	f000 f805 	bl	800db86 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800db7c:	69bb      	ldr	r3, [r7, #24]
	}
 800db7e:	4618      	mov	r0, r3
 800db80:	3720      	adds	r7, #32
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}

0800db86 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800db86:	b580      	push	{r7, lr}
 800db88:	b084      	sub	sp, #16
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	60f8      	str	r0, [r7, #12]
 800db8e:	60b9      	str	r1, [r7, #8]
 800db90:	607a      	str	r2, [r7, #4]
 800db92:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d103      	bne.n	800dba2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	69ba      	ldr	r2, [r7, #24]
 800db9e:	601a      	str	r2, [r3, #0]
 800dba0:	e002      	b.n	800dba8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dba2:	69bb      	ldr	r3, [r7, #24]
 800dba4:	687a      	ldr	r2, [r7, #4]
 800dba6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dba8:	69bb      	ldr	r3, [r7, #24]
 800dbaa:	68fa      	ldr	r2, [r7, #12]
 800dbac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dbae:	69bb      	ldr	r3, [r7, #24]
 800dbb0:	68ba      	ldr	r2, [r7, #8]
 800dbb2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dbb4:	2101      	movs	r1, #1
 800dbb6:	69b8      	ldr	r0, [r7, #24]
 800dbb8:	f7ff fec8 	bl	800d94c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dbbc:	bf00      	nop
 800dbbe:	3710      	adds	r7, #16
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b08e      	sub	sp, #56	; 0x38
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	60b9      	str	r1, [r7, #8]
 800dbce:	607a      	str	r2, [r7, #4]
 800dbd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d10a      	bne.n	800dbf6 <xQueueGenericSend+0x32>
	__asm volatile
 800dbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe4:	f383 8811 	msr	BASEPRI, r3
 800dbe8:	f3bf 8f6f 	isb	sy
 800dbec:	f3bf 8f4f 	dsb	sy
 800dbf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dbf2:	bf00      	nop
 800dbf4:	e7fe      	b.n	800dbf4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d103      	bne.n	800dc04 <xQueueGenericSend+0x40>
 800dbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d101      	bne.n	800dc08 <xQueueGenericSend+0x44>
 800dc04:	2301      	movs	r3, #1
 800dc06:	e000      	b.n	800dc0a <xQueueGenericSend+0x46>
 800dc08:	2300      	movs	r3, #0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d10a      	bne.n	800dc24 <xQueueGenericSend+0x60>
	__asm volatile
 800dc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc12:	f383 8811 	msr	BASEPRI, r3
 800dc16:	f3bf 8f6f 	isb	sy
 800dc1a:	f3bf 8f4f 	dsb	sy
 800dc1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dc20:	bf00      	nop
 800dc22:	e7fe      	b.n	800dc22 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	2b02      	cmp	r3, #2
 800dc28:	d103      	bne.n	800dc32 <xQueueGenericSend+0x6e>
 800dc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d101      	bne.n	800dc36 <xQueueGenericSend+0x72>
 800dc32:	2301      	movs	r3, #1
 800dc34:	e000      	b.n	800dc38 <xQueueGenericSend+0x74>
 800dc36:	2300      	movs	r3, #0
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d10a      	bne.n	800dc52 <xQueueGenericSend+0x8e>
	__asm volatile
 800dc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc40:	f383 8811 	msr	BASEPRI, r3
 800dc44:	f3bf 8f6f 	isb	sy
 800dc48:	f3bf 8f4f 	dsb	sy
 800dc4c:	623b      	str	r3, [r7, #32]
}
 800dc4e:	bf00      	nop
 800dc50:	e7fe      	b.n	800dc50 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc52:	f001 fbfd 	bl	800f450 <xTaskGetSchedulerState>
 800dc56:	4603      	mov	r3, r0
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d102      	bne.n	800dc62 <xQueueGenericSend+0x9e>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d101      	bne.n	800dc66 <xQueueGenericSend+0xa2>
 800dc62:	2301      	movs	r3, #1
 800dc64:	e000      	b.n	800dc68 <xQueueGenericSend+0xa4>
 800dc66:	2300      	movs	r3, #0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d10a      	bne.n	800dc82 <xQueueGenericSend+0xbe>
	__asm volatile
 800dc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc70:	f383 8811 	msr	BASEPRI, r3
 800dc74:	f3bf 8f6f 	isb	sy
 800dc78:	f3bf 8f4f 	dsb	sy
 800dc7c:	61fb      	str	r3, [r7, #28]
}
 800dc7e:	bf00      	nop
 800dc80:	e7fe      	b.n	800dc80 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dc82:	f002 fa13 	bl	80100ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d302      	bcc.n	800dc98 <xQueueGenericSend+0xd4>
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	2b02      	cmp	r3, #2
 800dc96:	d129      	bne.n	800dcec <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dc98:	683a      	ldr	r2, [r7, #0]
 800dc9a:	68b9      	ldr	r1, [r7, #8]
 800dc9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc9e:	f000 fc38 	bl	800e512 <prvCopyDataToQueue>
 800dca2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d010      	beq.n	800dcce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcae:	3324      	adds	r3, #36	; 0x24
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f001 fa09 	bl	800f0c8 <xTaskRemoveFromEventList>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d013      	beq.n	800dce4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dcbc:	4b3f      	ldr	r3, [pc, #252]	; (800ddbc <xQueueGenericSend+0x1f8>)
 800dcbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcc2:	601a      	str	r2, [r3, #0]
 800dcc4:	f3bf 8f4f 	dsb	sy
 800dcc8:	f3bf 8f6f 	isb	sy
 800dccc:	e00a      	b.n	800dce4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dcce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d007      	beq.n	800dce4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dcd4:	4b39      	ldr	r3, [pc, #228]	; (800ddbc <xQueueGenericSend+0x1f8>)
 800dcd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcda:	601a      	str	r2, [r3, #0]
 800dcdc:	f3bf 8f4f 	dsb	sy
 800dce0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800dce4:	f002 fa12 	bl	801010c <vPortExitCritical>
				return pdPASS;
 800dce8:	2301      	movs	r3, #1
 800dcea:	e063      	b.n	800ddb4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d103      	bne.n	800dcfa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dcf2:	f002 fa0b 	bl	801010c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	e05c      	b.n	800ddb4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dcfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d106      	bne.n	800dd0e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dd00:	f107 0314 	add.w	r3, r7, #20
 800dd04:	4618      	mov	r0, r3
 800dd06:	f001 fa41 	bl	800f18c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dd0e:	f002 f9fd 	bl	801010c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dd12:	f000 ffb1 	bl	800ec78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dd16:	f002 f9c9 	bl	80100ac <vPortEnterCritical>
 800dd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd20:	b25b      	sxtb	r3, r3
 800dd22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd26:	d103      	bne.n	800dd30 <xQueueGenericSend+0x16c>
 800dd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd36:	b25b      	sxtb	r3, r3
 800dd38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd3c:	d103      	bne.n	800dd46 <xQueueGenericSend+0x182>
 800dd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd40:	2200      	movs	r2, #0
 800dd42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd46:	f002 f9e1 	bl	801010c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dd4a:	1d3a      	adds	r2, r7, #4
 800dd4c:	f107 0314 	add.w	r3, r7, #20
 800dd50:	4611      	mov	r1, r2
 800dd52:	4618      	mov	r0, r3
 800dd54:	f001 fa30 	bl	800f1b8 <xTaskCheckForTimeOut>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d124      	bne.n	800dda8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dd5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd60:	f000 fccf 	bl	800e702 <prvIsQueueFull>
 800dd64:	4603      	mov	r3, r0
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d018      	beq.n	800dd9c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd6c:	3310      	adds	r3, #16
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	4611      	mov	r1, r2
 800dd72:	4618      	mov	r0, r3
 800dd74:	f001 f958 	bl	800f028 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dd78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd7a:	f000 fc5a 	bl	800e632 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dd7e:	f000 ff89 	bl	800ec94 <xTaskResumeAll>
 800dd82:	4603      	mov	r3, r0
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	f47f af7c 	bne.w	800dc82 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800dd8a:	4b0c      	ldr	r3, [pc, #48]	; (800ddbc <xQueueGenericSend+0x1f8>)
 800dd8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd90:	601a      	str	r2, [r3, #0]
 800dd92:	f3bf 8f4f 	dsb	sy
 800dd96:	f3bf 8f6f 	isb	sy
 800dd9a:	e772      	b.n	800dc82 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dd9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd9e:	f000 fc48 	bl	800e632 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dda2:	f000 ff77 	bl	800ec94 <xTaskResumeAll>
 800dda6:	e76c      	b.n	800dc82 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dda8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ddaa:	f000 fc42 	bl	800e632 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ddae:	f000 ff71 	bl	800ec94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ddb2:	2300      	movs	r3, #0
		}
	}
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3738      	adds	r7, #56	; 0x38
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	e000ed04 	.word	0xe000ed04

0800ddc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b08e      	sub	sp, #56	; 0x38
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	60f8      	str	r0, [r7, #12]
 800ddc8:	60b9      	str	r1, [r7, #8]
 800ddca:	607a      	str	r2, [r7, #4]
 800ddcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ddd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d10a      	bne.n	800ddee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ddd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dddc:	f383 8811 	msr	BASEPRI, r3
 800dde0:	f3bf 8f6f 	isb	sy
 800dde4:	f3bf 8f4f 	dsb	sy
 800dde8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ddea:	bf00      	nop
 800ddec:	e7fe      	b.n	800ddec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d103      	bne.n	800ddfc <xQueueGenericSendFromISR+0x3c>
 800ddf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d101      	bne.n	800de00 <xQueueGenericSendFromISR+0x40>
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	e000      	b.n	800de02 <xQueueGenericSendFromISR+0x42>
 800de00:	2300      	movs	r3, #0
 800de02:	2b00      	cmp	r3, #0
 800de04:	d10a      	bne.n	800de1c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800de06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de0a:	f383 8811 	msr	BASEPRI, r3
 800de0e:	f3bf 8f6f 	isb	sy
 800de12:	f3bf 8f4f 	dsb	sy
 800de16:	623b      	str	r3, [r7, #32]
}
 800de18:	bf00      	nop
 800de1a:	e7fe      	b.n	800de1a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	2b02      	cmp	r3, #2
 800de20:	d103      	bne.n	800de2a <xQueueGenericSendFromISR+0x6a>
 800de22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de26:	2b01      	cmp	r3, #1
 800de28:	d101      	bne.n	800de2e <xQueueGenericSendFromISR+0x6e>
 800de2a:	2301      	movs	r3, #1
 800de2c:	e000      	b.n	800de30 <xQueueGenericSendFromISR+0x70>
 800de2e:	2300      	movs	r3, #0
 800de30:	2b00      	cmp	r3, #0
 800de32:	d10a      	bne.n	800de4a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800de34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de38:	f383 8811 	msr	BASEPRI, r3
 800de3c:	f3bf 8f6f 	isb	sy
 800de40:	f3bf 8f4f 	dsb	sy
 800de44:	61fb      	str	r3, [r7, #28]
}
 800de46:	bf00      	nop
 800de48:	e7fe      	b.n	800de48 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800de4a:	f002 f9f1 	bl	8010230 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800de4e:	f3ef 8211 	mrs	r2, BASEPRI
 800de52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de56:	f383 8811 	msr	BASEPRI, r3
 800de5a:	f3bf 8f6f 	isb	sy
 800de5e:	f3bf 8f4f 	dsb	sy
 800de62:	61ba      	str	r2, [r7, #24]
 800de64:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800de66:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800de68:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800de6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de72:	429a      	cmp	r2, r3
 800de74:	d302      	bcc.n	800de7c <xQueueGenericSendFromISR+0xbc>
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	2b02      	cmp	r3, #2
 800de7a:	d12c      	bne.n	800ded6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800de7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800de86:	683a      	ldr	r2, [r7, #0]
 800de88:	68b9      	ldr	r1, [r7, #8]
 800de8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de8c:	f000 fb41 	bl	800e512 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800de90:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800de94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de98:	d112      	bne.n	800dec0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d016      	beq.n	800ded0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dea4:	3324      	adds	r3, #36	; 0x24
 800dea6:	4618      	mov	r0, r3
 800dea8:	f001 f90e 	bl	800f0c8 <xTaskRemoveFromEventList>
 800deac:	4603      	mov	r3, r0
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d00e      	beq.n	800ded0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d00b      	beq.n	800ded0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2201      	movs	r2, #1
 800debc:	601a      	str	r2, [r3, #0]
 800debe:	e007      	b.n	800ded0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dec0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dec4:	3301      	adds	r3, #1
 800dec6:	b2db      	uxtb	r3, r3
 800dec8:	b25a      	sxtb	r2, r3
 800deca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800decc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ded0:	2301      	movs	r3, #1
 800ded2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ded4:	e001      	b.n	800deda <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ded6:	2300      	movs	r3, #0
 800ded8:	637b      	str	r3, [r7, #52]	; 0x34
 800deda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dedc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dee4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3738      	adds	r7, #56	; 0x38
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}

0800def0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b08e      	sub	sp, #56	; 0x38
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800defe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df00:	2b00      	cmp	r3, #0
 800df02:	d10a      	bne.n	800df1a <xQueueGiveFromISR+0x2a>
	__asm volatile
 800df04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df08:	f383 8811 	msr	BASEPRI, r3
 800df0c:	f3bf 8f6f 	isb	sy
 800df10:	f3bf 8f4f 	dsb	sy
 800df14:	623b      	str	r3, [r7, #32]
}
 800df16:	bf00      	nop
 800df18:	e7fe      	b.n	800df18 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800df1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d00a      	beq.n	800df38 <xQueueGiveFromISR+0x48>
	__asm volatile
 800df22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df26:	f383 8811 	msr	BASEPRI, r3
 800df2a:	f3bf 8f6f 	isb	sy
 800df2e:	f3bf 8f4f 	dsb	sy
 800df32:	61fb      	str	r3, [r7, #28]
}
 800df34:	bf00      	nop
 800df36:	e7fe      	b.n	800df36 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800df38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d103      	bne.n	800df48 <xQueueGiveFromISR+0x58>
 800df40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d101      	bne.n	800df4c <xQueueGiveFromISR+0x5c>
 800df48:	2301      	movs	r3, #1
 800df4a:	e000      	b.n	800df4e <xQueueGiveFromISR+0x5e>
 800df4c:	2300      	movs	r3, #0
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d10a      	bne.n	800df68 <xQueueGiveFromISR+0x78>
	__asm volatile
 800df52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df56:	f383 8811 	msr	BASEPRI, r3
 800df5a:	f3bf 8f6f 	isb	sy
 800df5e:	f3bf 8f4f 	dsb	sy
 800df62:	61bb      	str	r3, [r7, #24]
}
 800df64:	bf00      	nop
 800df66:	e7fe      	b.n	800df66 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df68:	f002 f962 	bl	8010230 <vPortValidateInterruptPriority>
	__asm volatile
 800df6c:	f3ef 8211 	mrs	r2, BASEPRI
 800df70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df74:	f383 8811 	msr	BASEPRI, r3
 800df78:	f3bf 8f6f 	isb	sy
 800df7c:	f3bf 8f4f 	dsb	sy
 800df80:	617a      	str	r2, [r7, #20]
 800df82:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800df84:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800df86:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df8c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800df8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df94:	429a      	cmp	r2, r3
 800df96:	d22b      	bcs.n	800dff0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800df98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa4:	1c5a      	adds	r2, r3, #1
 800dfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dfaa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dfae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfb2:	d112      	bne.n	800dfda <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d016      	beq.n	800dfea <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfbe:	3324      	adds	r3, #36	; 0x24
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f001 f881 	bl	800f0c8 <xTaskRemoveFromEventList>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d00e      	beq.n	800dfea <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00b      	beq.n	800dfea <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	2201      	movs	r2, #1
 800dfd6:	601a      	str	r2, [r3, #0]
 800dfd8:	e007      	b.n	800dfea <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dfda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfde:	3301      	adds	r3, #1
 800dfe0:	b2db      	uxtb	r3, r3
 800dfe2:	b25a      	sxtb	r2, r3
 800dfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dfea:	2301      	movs	r3, #1
 800dfec:	637b      	str	r3, [r7, #52]	; 0x34
 800dfee:	e001      	b.n	800dff4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dff0:	2300      	movs	r3, #0
 800dff2:	637b      	str	r3, [r7, #52]	; 0x34
 800dff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f383 8811 	msr	BASEPRI, r3
}
 800dffe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e002:	4618      	mov	r0, r3
 800e004:	3738      	adds	r7, #56	; 0x38
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
	...

0800e00c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b08c      	sub	sp, #48	; 0x30
 800e010:	af00      	add	r7, sp, #0
 800e012:	60f8      	str	r0, [r7, #12]
 800e014:	60b9      	str	r1, [r7, #8]
 800e016:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e018:	2300      	movs	r3, #0
 800e01a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e022:	2b00      	cmp	r3, #0
 800e024:	d10a      	bne.n	800e03c <xQueueReceive+0x30>
	__asm volatile
 800e026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e02a:	f383 8811 	msr	BASEPRI, r3
 800e02e:	f3bf 8f6f 	isb	sy
 800e032:	f3bf 8f4f 	dsb	sy
 800e036:	623b      	str	r3, [r7, #32]
}
 800e038:	bf00      	nop
 800e03a:	e7fe      	b.n	800e03a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d103      	bne.n	800e04a <xQueueReceive+0x3e>
 800e042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e046:	2b00      	cmp	r3, #0
 800e048:	d101      	bne.n	800e04e <xQueueReceive+0x42>
 800e04a:	2301      	movs	r3, #1
 800e04c:	e000      	b.n	800e050 <xQueueReceive+0x44>
 800e04e:	2300      	movs	r3, #0
 800e050:	2b00      	cmp	r3, #0
 800e052:	d10a      	bne.n	800e06a <xQueueReceive+0x5e>
	__asm volatile
 800e054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e058:	f383 8811 	msr	BASEPRI, r3
 800e05c:	f3bf 8f6f 	isb	sy
 800e060:	f3bf 8f4f 	dsb	sy
 800e064:	61fb      	str	r3, [r7, #28]
}
 800e066:	bf00      	nop
 800e068:	e7fe      	b.n	800e068 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e06a:	f001 f9f1 	bl	800f450 <xTaskGetSchedulerState>
 800e06e:	4603      	mov	r3, r0
 800e070:	2b00      	cmp	r3, #0
 800e072:	d102      	bne.n	800e07a <xQueueReceive+0x6e>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d101      	bne.n	800e07e <xQueueReceive+0x72>
 800e07a:	2301      	movs	r3, #1
 800e07c:	e000      	b.n	800e080 <xQueueReceive+0x74>
 800e07e:	2300      	movs	r3, #0
 800e080:	2b00      	cmp	r3, #0
 800e082:	d10a      	bne.n	800e09a <xQueueReceive+0x8e>
	__asm volatile
 800e084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e088:	f383 8811 	msr	BASEPRI, r3
 800e08c:	f3bf 8f6f 	isb	sy
 800e090:	f3bf 8f4f 	dsb	sy
 800e094:	61bb      	str	r3, [r7, #24]
}
 800e096:	bf00      	nop
 800e098:	e7fe      	b.n	800e098 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800e09a:	f002 f807 	bl	80100ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d01f      	beq.n	800e0ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e0aa:	68b9      	ldr	r1, [r7, #8]
 800e0ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0ae:	f000 fa9a 	bl	800e5e6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b4:	1e5a      	subs	r2, r3, #1
 800e0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0bc:	691b      	ldr	r3, [r3, #16]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d00f      	beq.n	800e0e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c4:	3310      	adds	r3, #16
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f000 fffe 	bl	800f0c8 <xTaskRemoveFromEventList>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d007      	beq.n	800e0e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e0d2:	4b3d      	ldr	r3, [pc, #244]	; (800e1c8 <xQueueReceive+0x1bc>)
 800e0d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0d8:	601a      	str	r2, [r3, #0]
 800e0da:	f3bf 8f4f 	dsb	sy
 800e0de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e0e2:	f002 f813 	bl	801010c <vPortExitCritical>
				return pdPASS;
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	e069      	b.n	800e1be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d103      	bne.n	800e0f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e0f0:	f002 f80c 	bl	801010c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	e062      	b.n	800e1be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d106      	bne.n	800e10c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e0fe:	f107 0310 	add.w	r3, r7, #16
 800e102:	4618      	mov	r0, r3
 800e104:	f001 f842 	bl	800f18c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e108:	2301      	movs	r3, #1
 800e10a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e10c:	f001 fffe 	bl	801010c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e110:	f000 fdb2 	bl	800ec78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e114:	f001 ffca 	bl	80100ac <vPortEnterCritical>
 800e118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e11e:	b25b      	sxtb	r3, r3
 800e120:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e124:	d103      	bne.n	800e12e <xQueueReceive+0x122>
 800e126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e128:	2200      	movs	r2, #0
 800e12a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e130:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e134:	b25b      	sxtb	r3, r3
 800e136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e13a:	d103      	bne.n	800e144 <xQueueReceive+0x138>
 800e13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e13e:	2200      	movs	r2, #0
 800e140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e144:	f001 ffe2 	bl	801010c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e148:	1d3a      	adds	r2, r7, #4
 800e14a:	f107 0310 	add.w	r3, r7, #16
 800e14e:	4611      	mov	r1, r2
 800e150:	4618      	mov	r0, r3
 800e152:	f001 f831 	bl	800f1b8 <xTaskCheckForTimeOut>
 800e156:	4603      	mov	r3, r0
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d123      	bne.n	800e1a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e15c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e15e:	f000 faba 	bl	800e6d6 <prvIsQueueEmpty>
 800e162:	4603      	mov	r3, r0
 800e164:	2b00      	cmp	r3, #0
 800e166:	d017      	beq.n	800e198 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e16a:	3324      	adds	r3, #36	; 0x24
 800e16c:	687a      	ldr	r2, [r7, #4]
 800e16e:	4611      	mov	r1, r2
 800e170:	4618      	mov	r0, r3
 800e172:	f000 ff59 	bl	800f028 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e176:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e178:	f000 fa5b 	bl	800e632 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e17c:	f000 fd8a 	bl	800ec94 <xTaskResumeAll>
 800e180:	4603      	mov	r3, r0
 800e182:	2b00      	cmp	r3, #0
 800e184:	d189      	bne.n	800e09a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e186:	4b10      	ldr	r3, [pc, #64]	; (800e1c8 <xQueueReceive+0x1bc>)
 800e188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e18c:	601a      	str	r2, [r3, #0]
 800e18e:	f3bf 8f4f 	dsb	sy
 800e192:	f3bf 8f6f 	isb	sy
 800e196:	e780      	b.n	800e09a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e19a:	f000 fa4a 	bl	800e632 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e19e:	f000 fd79 	bl	800ec94 <xTaskResumeAll>
 800e1a2:	e77a      	b.n	800e09a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e1a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1a6:	f000 fa44 	bl	800e632 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e1aa:	f000 fd73 	bl	800ec94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e1ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1b0:	f000 fa91 	bl	800e6d6 <prvIsQueueEmpty>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	f43f af6f 	beq.w	800e09a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e1bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3730      	adds	r7, #48	; 0x30
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	e000ed04 	.word	0xe000ed04

0800e1cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b08e      	sub	sp, #56	; 0x38
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
 800e1d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d10a      	bne.n	800e1fe <xQueueSemaphoreTake+0x32>
	__asm volatile
 800e1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ec:	f383 8811 	msr	BASEPRI, r3
 800e1f0:	f3bf 8f6f 	isb	sy
 800e1f4:	f3bf 8f4f 	dsb	sy
 800e1f8:	623b      	str	r3, [r7, #32]
}
 800e1fa:	bf00      	nop
 800e1fc:	e7fe      	b.n	800e1fc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e202:	2b00      	cmp	r3, #0
 800e204:	d00a      	beq.n	800e21c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800e206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e20a:	f383 8811 	msr	BASEPRI, r3
 800e20e:	f3bf 8f6f 	isb	sy
 800e212:	f3bf 8f4f 	dsb	sy
 800e216:	61fb      	str	r3, [r7, #28]
}
 800e218:	bf00      	nop
 800e21a:	e7fe      	b.n	800e21a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e21c:	f001 f918 	bl	800f450 <xTaskGetSchedulerState>
 800e220:	4603      	mov	r3, r0
 800e222:	2b00      	cmp	r3, #0
 800e224:	d102      	bne.n	800e22c <xQueueSemaphoreTake+0x60>
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d101      	bne.n	800e230 <xQueueSemaphoreTake+0x64>
 800e22c:	2301      	movs	r3, #1
 800e22e:	e000      	b.n	800e232 <xQueueSemaphoreTake+0x66>
 800e230:	2300      	movs	r3, #0
 800e232:	2b00      	cmp	r3, #0
 800e234:	d10a      	bne.n	800e24c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800e236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e23a:	f383 8811 	msr	BASEPRI, r3
 800e23e:	f3bf 8f6f 	isb	sy
 800e242:	f3bf 8f4f 	dsb	sy
 800e246:	61bb      	str	r3, [r7, #24]
}
 800e248:	bf00      	nop
 800e24a:	e7fe      	b.n	800e24a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800e24c:	f001 ff2e 	bl	80100ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e254:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d024      	beq.n	800e2a6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e25e:	1e5a      	subs	r2, r3, #1
 800e260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e262:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d104      	bne.n	800e276 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800e26c:	f001 faba 	bl	800f7e4 <pvTaskIncrementMutexHeldCount>
 800e270:	4602      	mov	r2, r0
 800e272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e274:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e278:	691b      	ldr	r3, [r3, #16]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d00f      	beq.n	800e29e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e280:	3310      	adds	r3, #16
 800e282:	4618      	mov	r0, r3
 800e284:	f000 ff20 	bl	800f0c8 <xTaskRemoveFromEventList>
 800e288:	4603      	mov	r3, r0
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d007      	beq.n	800e29e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e28e:	4b54      	ldr	r3, [pc, #336]	; (800e3e0 <xQueueSemaphoreTake+0x214>)
 800e290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e294:	601a      	str	r2, [r3, #0]
 800e296:	f3bf 8f4f 	dsb	sy
 800e29a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e29e:	f001 ff35 	bl	801010c <vPortExitCritical>
				return pdPASS;
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	e097      	b.n	800e3d6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d111      	bne.n	800e2d0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d00a      	beq.n	800e2c8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800e2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b6:	f383 8811 	msr	BASEPRI, r3
 800e2ba:	f3bf 8f6f 	isb	sy
 800e2be:	f3bf 8f4f 	dsb	sy
 800e2c2:	617b      	str	r3, [r7, #20]
}
 800e2c4:	bf00      	nop
 800e2c6:	e7fe      	b.n	800e2c6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e2c8:	f001 ff20 	bl	801010c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	e082      	b.n	800e3d6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d106      	bne.n	800e2e4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e2d6:	f107 030c 	add.w	r3, r7, #12
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f000 ff56 	bl	800f18c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e2e4:	f001 ff12 	bl	801010c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e2e8:	f000 fcc6 	bl	800ec78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e2ec:	f001 fede 	bl	80100ac <vPortEnterCritical>
 800e2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e2f6:	b25b      	sxtb	r3, r3
 800e2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2fc:	d103      	bne.n	800e306 <xQueueSemaphoreTake+0x13a>
 800e2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e300:	2200      	movs	r2, #0
 800e302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e308:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e30c:	b25b      	sxtb	r3, r3
 800e30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e312:	d103      	bne.n	800e31c <xQueueSemaphoreTake+0x150>
 800e314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e316:	2200      	movs	r2, #0
 800e318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e31c:	f001 fef6 	bl	801010c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e320:	463a      	mov	r2, r7
 800e322:	f107 030c 	add.w	r3, r7, #12
 800e326:	4611      	mov	r1, r2
 800e328:	4618      	mov	r0, r3
 800e32a:	f000 ff45 	bl	800f1b8 <xTaskCheckForTimeOut>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d132      	bne.n	800e39a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e334:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e336:	f000 f9ce 	bl	800e6d6 <prvIsQueueEmpty>
 800e33a:	4603      	mov	r3, r0
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d026      	beq.n	800e38e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d109      	bne.n	800e35c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800e348:	f001 feb0 	bl	80100ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800e34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	4618      	mov	r0, r3
 800e352:	f001 f89b 	bl	800f48c <xTaskPriorityInherit>
 800e356:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e358:	f001 fed8 	bl	801010c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35e:	3324      	adds	r3, #36	; 0x24
 800e360:	683a      	ldr	r2, [r7, #0]
 800e362:	4611      	mov	r1, r2
 800e364:	4618      	mov	r0, r3
 800e366:	f000 fe5f 	bl	800f028 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e36a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e36c:	f000 f961 	bl	800e632 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e370:	f000 fc90 	bl	800ec94 <xTaskResumeAll>
 800e374:	4603      	mov	r3, r0
 800e376:	2b00      	cmp	r3, #0
 800e378:	f47f af68 	bne.w	800e24c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800e37c:	4b18      	ldr	r3, [pc, #96]	; (800e3e0 <xQueueSemaphoreTake+0x214>)
 800e37e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e382:	601a      	str	r2, [r3, #0]
 800e384:	f3bf 8f4f 	dsb	sy
 800e388:	f3bf 8f6f 	isb	sy
 800e38c:	e75e      	b.n	800e24c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e38e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e390:	f000 f94f 	bl	800e632 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e394:	f000 fc7e 	bl	800ec94 <xTaskResumeAll>
 800e398:	e758      	b.n	800e24c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e39a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e39c:	f000 f949 	bl	800e632 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e3a0:	f000 fc78 	bl	800ec94 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e3a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3a6:	f000 f996 	bl	800e6d6 <prvIsQueueEmpty>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	f43f af4d 	beq.w	800e24c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d00d      	beq.n	800e3d4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800e3b8:	f001 fe78 	bl	80100ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e3bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3be:	f000 f891 	bl	800e4e4 <prvGetDisinheritPriorityAfterTimeout>
 800e3c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800e3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c6:	685b      	ldr	r3, [r3, #4]
 800e3c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f001 f96a 	bl	800f6a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e3d0:	f001 fe9c 	bl	801010c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e3d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3738      	adds	r7, #56	; 0x38
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}
 800e3de:	bf00      	nop
 800e3e0:	e000ed04 	.word	0xe000ed04

0800e3e4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b08e      	sub	sp, #56	; 0x38
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	60f8      	str	r0, [r7, #12]
 800e3ec:	60b9      	str	r1, [r7, #8]
 800e3ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d10a      	bne.n	800e410 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3fe:	f383 8811 	msr	BASEPRI, r3
 800e402:	f3bf 8f6f 	isb	sy
 800e406:	f3bf 8f4f 	dsb	sy
 800e40a:	623b      	str	r3, [r7, #32]
}
 800e40c:	bf00      	nop
 800e40e:	e7fe      	b.n	800e40e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d103      	bne.n	800e41e <xQueueReceiveFromISR+0x3a>
 800e416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d101      	bne.n	800e422 <xQueueReceiveFromISR+0x3e>
 800e41e:	2301      	movs	r3, #1
 800e420:	e000      	b.n	800e424 <xQueueReceiveFromISR+0x40>
 800e422:	2300      	movs	r3, #0
 800e424:	2b00      	cmp	r3, #0
 800e426:	d10a      	bne.n	800e43e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e42c:	f383 8811 	msr	BASEPRI, r3
 800e430:	f3bf 8f6f 	isb	sy
 800e434:	f3bf 8f4f 	dsb	sy
 800e438:	61fb      	str	r3, [r7, #28]
}
 800e43a:	bf00      	nop
 800e43c:	e7fe      	b.n	800e43c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e43e:	f001 fef7 	bl	8010230 <vPortValidateInterruptPriority>
	__asm volatile
 800e442:	f3ef 8211 	mrs	r2, BASEPRI
 800e446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e44a:	f383 8811 	msr	BASEPRI, r3
 800e44e:	f3bf 8f6f 	isb	sy
 800e452:	f3bf 8f4f 	dsb	sy
 800e456:	61ba      	str	r2, [r7, #24]
 800e458:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e45a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e45c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e462:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e466:	2b00      	cmp	r3, #0
 800e468:	d02f      	beq.n	800e4ca <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e46c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e474:	68b9      	ldr	r1, [r7, #8]
 800e476:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e478:	f000 f8b5 	bl	800e5e6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47e:	1e5a      	subs	r2, r3, #1
 800e480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e482:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e484:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e48c:	d112      	bne.n	800e4b4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e490:	691b      	ldr	r3, [r3, #16]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d016      	beq.n	800e4c4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e498:	3310      	adds	r3, #16
 800e49a:	4618      	mov	r0, r3
 800e49c:	f000 fe14 	bl	800f0c8 <xTaskRemoveFromEventList>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d00e      	beq.n	800e4c4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d00b      	beq.n	800e4c4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	601a      	str	r2, [r3, #0]
 800e4b2:	e007      	b.n	800e4c4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e4b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4b8:	3301      	adds	r3, #1
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	b25a      	sxtb	r2, r3
 800e4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	637b      	str	r3, [r7, #52]	; 0x34
 800e4c8:	e001      	b.n	800e4ce <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	637b      	str	r3, [r7, #52]	; 0x34
 800e4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	f383 8811 	msr	BASEPRI, r3
}
 800e4d8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3738      	adds	r7, #56	; 0x38
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b085      	sub	sp, #20
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d006      	beq.n	800e502 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	f1c3 0307 	rsb	r3, r3, #7
 800e4fe:	60fb      	str	r3, [r7, #12]
 800e500:	e001      	b.n	800e506 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e502:	2300      	movs	r3, #0
 800e504:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e506:	68fb      	ldr	r3, [r7, #12]
	}
 800e508:	4618      	mov	r0, r3
 800e50a:	3714      	adds	r7, #20
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bc80      	pop	{r7}
 800e510:	4770      	bx	lr

0800e512 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e512:	b580      	push	{r7, lr}
 800e514:	b086      	sub	sp, #24
 800e516:	af00      	add	r7, sp, #0
 800e518:	60f8      	str	r0, [r7, #12]
 800e51a:	60b9      	str	r1, [r7, #8]
 800e51c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e51e:	2300      	movs	r3, #0
 800e520:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e526:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d10d      	bne.n	800e54c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d14d      	bne.n	800e5d4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	685b      	ldr	r3, [r3, #4]
 800e53c:	4618      	mov	r0, r3
 800e53e:	f001 f82b 	bl	800f598 <xTaskPriorityDisinherit>
 800e542:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2200      	movs	r2, #0
 800e548:	605a      	str	r2, [r3, #4]
 800e54a:	e043      	b.n	800e5d4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d119      	bne.n	800e586 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	6898      	ldr	r0, [r3, #8]
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e55a:	461a      	mov	r2, r3
 800e55c:	68b9      	ldr	r1, [r7, #8]
 800e55e:	f002 f9b1 	bl	80108c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	689a      	ldr	r2, [r3, #8]
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e56a:	441a      	add	r2, r3
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	689a      	ldr	r2, [r3, #8]
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	685b      	ldr	r3, [r3, #4]
 800e578:	429a      	cmp	r2, r3
 800e57a:	d32b      	bcc.n	800e5d4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	681a      	ldr	r2, [r3, #0]
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	609a      	str	r2, [r3, #8]
 800e584:	e026      	b.n	800e5d4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	68d8      	ldr	r0, [r3, #12]
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e58e:	461a      	mov	r2, r3
 800e590:	68b9      	ldr	r1, [r7, #8]
 800e592:	f002 f997 	bl	80108c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	68da      	ldr	r2, [r3, #12]
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e59e:	425b      	negs	r3, r3
 800e5a0:	441a      	add	r2, r3
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	68da      	ldr	r2, [r3, #12]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d207      	bcs.n	800e5c2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	685a      	ldr	r2, [r3, #4]
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5ba:	425b      	negs	r3, r3
 800e5bc:	441a      	add	r2, r3
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2b02      	cmp	r3, #2
 800e5c6:	d105      	bne.n	800e5d4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d002      	beq.n	800e5d4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	3b01      	subs	r3, #1
 800e5d2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	1c5a      	adds	r2, r3, #1
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e5dc:	697b      	ldr	r3, [r7, #20]
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3718      	adds	r7, #24
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}

0800e5e6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e5e6:	b580      	push	{r7, lr}
 800e5e8:	b082      	sub	sp, #8
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	6078      	str	r0, [r7, #4]
 800e5ee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d018      	beq.n	800e62a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	68da      	ldr	r2, [r3, #12]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e600:	441a      	add	r2, r3
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	68da      	ldr	r2, [r3, #12]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	429a      	cmp	r2, r3
 800e610:	d303      	bcc.n	800e61a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	68d9      	ldr	r1, [r3, #12]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e622:	461a      	mov	r2, r3
 800e624:	6838      	ldr	r0, [r7, #0]
 800e626:	f002 f94d 	bl	80108c4 <memcpy>
	}
}
 800e62a:	bf00      	nop
 800e62c:	3708      	adds	r7, #8
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}

0800e632 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e632:	b580      	push	{r7, lr}
 800e634:	b084      	sub	sp, #16
 800e636:	af00      	add	r7, sp, #0
 800e638:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e63a:	f001 fd37 	bl	80100ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e644:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e646:	e011      	b.n	800e66c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d012      	beq.n	800e676 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	3324      	adds	r3, #36	; 0x24
 800e654:	4618      	mov	r0, r3
 800e656:	f000 fd37 	bl	800f0c8 <xTaskRemoveFromEventList>
 800e65a:	4603      	mov	r3, r0
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d001      	beq.n	800e664 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e660:	f000 fe0c 	bl	800f27c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e664:	7bfb      	ldrb	r3, [r7, #15]
 800e666:	3b01      	subs	r3, #1
 800e668:	b2db      	uxtb	r3, r3
 800e66a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e66c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e670:	2b00      	cmp	r3, #0
 800e672:	dce9      	bgt.n	800e648 <prvUnlockQueue+0x16>
 800e674:	e000      	b.n	800e678 <prvUnlockQueue+0x46>
					break;
 800e676:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	22ff      	movs	r2, #255	; 0xff
 800e67c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e680:	f001 fd44 	bl	801010c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e684:	f001 fd12 	bl	80100ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e68e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e690:	e011      	b.n	800e6b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	691b      	ldr	r3, [r3, #16]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d012      	beq.n	800e6c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	3310      	adds	r3, #16
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f000 fd12 	bl	800f0c8 <xTaskRemoveFromEventList>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d001      	beq.n	800e6ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e6aa:	f000 fde7 	bl	800f27c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e6ae:	7bbb      	ldrb	r3, [r7, #14]
 800e6b0:	3b01      	subs	r3, #1
 800e6b2:	b2db      	uxtb	r3, r3
 800e6b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e6b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	dce9      	bgt.n	800e692 <prvUnlockQueue+0x60>
 800e6be:	e000      	b.n	800e6c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e6c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	22ff      	movs	r2, #255	; 0xff
 800e6c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e6ca:	f001 fd1f 	bl	801010c <vPortExitCritical>
}
 800e6ce:	bf00      	nop
 800e6d0:	3710      	adds	r7, #16
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}

0800e6d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e6d6:	b580      	push	{r7, lr}
 800e6d8:	b084      	sub	sp, #16
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e6de:	f001 fce5 	bl	80100ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d102      	bne.n	800e6f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	60fb      	str	r3, [r7, #12]
 800e6ee:	e001      	b.n	800e6f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e6f4:	f001 fd0a 	bl	801010c <vPortExitCritical>

	return xReturn;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	3710      	adds	r7, #16
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}

0800e702 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e702:	b580      	push	{r7, lr}
 800e704:	b084      	sub	sp, #16
 800e706:	af00      	add	r7, sp, #0
 800e708:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e70a:	f001 fccf 	bl	80100ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e716:	429a      	cmp	r2, r3
 800e718:	d102      	bne.n	800e720 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e71a:	2301      	movs	r3, #1
 800e71c:	60fb      	str	r3, [r7, #12]
 800e71e:	e001      	b.n	800e724 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e720:	2300      	movs	r3, #0
 800e722:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e724:	f001 fcf2 	bl	801010c <vPortExitCritical>

	return xReturn;
 800e728:	68fb      	ldr	r3, [r7, #12]
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3710      	adds	r7, #16
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}
	...

0800e734 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e734:	b480      	push	{r7}
 800e736:	b085      	sub	sp, #20
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e73e:	2300      	movs	r3, #0
 800e740:	60fb      	str	r3, [r7, #12]
 800e742:	e014      	b.n	800e76e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e744:	4a0e      	ldr	r2, [pc, #56]	; (800e780 <vQueueAddToRegistry+0x4c>)
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d10b      	bne.n	800e768 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e750:	490b      	ldr	r1, [pc, #44]	; (800e780 <vQueueAddToRegistry+0x4c>)
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	683a      	ldr	r2, [r7, #0]
 800e756:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e75a:	4a09      	ldr	r2, [pc, #36]	; (800e780 <vQueueAddToRegistry+0x4c>)
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	00db      	lsls	r3, r3, #3
 800e760:	4413      	add	r3, r2
 800e762:	687a      	ldr	r2, [r7, #4]
 800e764:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e766:	e006      	b.n	800e776 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	3301      	adds	r3, #1
 800e76c:	60fb      	str	r3, [r7, #12]
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	2b07      	cmp	r3, #7
 800e772:	d9e7      	bls.n	800e744 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e774:	bf00      	nop
 800e776:	bf00      	nop
 800e778:	3714      	adds	r7, #20
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bc80      	pop	{r7}
 800e77e:	4770      	bx	lr
 800e780:	20002d80 	.word	0x20002d80

0800e784 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e784:	b580      	push	{r7, lr}
 800e786:	b086      	sub	sp, #24
 800e788:	af00      	add	r7, sp, #0
 800e78a:	60f8      	str	r0, [r7, #12]
 800e78c:	60b9      	str	r1, [r7, #8]
 800e78e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e794:	f001 fc8a 	bl	80100ac <vPortEnterCritical>
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e79e:	b25b      	sxtb	r3, r3
 800e7a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7a4:	d103      	bne.n	800e7ae <vQueueWaitForMessageRestricted+0x2a>
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e7b4:	b25b      	sxtb	r3, r3
 800e7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ba:	d103      	bne.n	800e7c4 <vQueueWaitForMessageRestricted+0x40>
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e7c4:	f001 fca2 	bl	801010c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d106      	bne.n	800e7de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	3324      	adds	r3, #36	; 0x24
 800e7d4:	687a      	ldr	r2, [r7, #4]
 800e7d6:	68b9      	ldr	r1, [r7, #8]
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f000 fc49 	bl	800f070 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e7de:	6978      	ldr	r0, [r7, #20]
 800e7e0:	f7ff ff27 	bl	800e632 <prvUnlockQueue>
	}
 800e7e4:	bf00      	nop
 800e7e6:	3718      	adds	r7, #24
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b08e      	sub	sp, #56	; 0x38
 800e7f0:	af04      	add	r7, sp, #16
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	60b9      	str	r1, [r7, #8]
 800e7f6:	607a      	str	r2, [r7, #4]
 800e7f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e7fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d10a      	bne.n	800e816 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e804:	f383 8811 	msr	BASEPRI, r3
 800e808:	f3bf 8f6f 	isb	sy
 800e80c:	f3bf 8f4f 	dsb	sy
 800e810:	623b      	str	r3, [r7, #32]
}
 800e812:	bf00      	nop
 800e814:	e7fe      	b.n	800e814 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d10a      	bne.n	800e832 <xTaskCreateStatic+0x46>
	__asm volatile
 800e81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e820:	f383 8811 	msr	BASEPRI, r3
 800e824:	f3bf 8f6f 	isb	sy
 800e828:	f3bf 8f4f 	dsb	sy
 800e82c:	61fb      	str	r3, [r7, #28]
}
 800e82e:	bf00      	nop
 800e830:	e7fe      	b.n	800e830 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e832:	23b4      	movs	r3, #180	; 0xb4
 800e834:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e836:	693b      	ldr	r3, [r7, #16]
 800e838:	2bb4      	cmp	r3, #180	; 0xb4
 800e83a:	d00a      	beq.n	800e852 <xTaskCreateStatic+0x66>
	__asm volatile
 800e83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e840:	f383 8811 	msr	BASEPRI, r3
 800e844:	f3bf 8f6f 	isb	sy
 800e848:	f3bf 8f4f 	dsb	sy
 800e84c:	61bb      	str	r3, [r7, #24]
}
 800e84e:	bf00      	nop
 800e850:	e7fe      	b.n	800e850 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e854:	2b00      	cmp	r3, #0
 800e856:	d01e      	beq.n	800e896 <xTaskCreateStatic+0xaa>
 800e858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d01b      	beq.n	800e896 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e860:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e864:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e866:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86a:	2202      	movs	r2, #2
 800e86c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e870:	2300      	movs	r3, #0
 800e872:	9303      	str	r3, [sp, #12]
 800e874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e876:	9302      	str	r3, [sp, #8]
 800e878:	f107 0314 	add.w	r3, r7, #20
 800e87c:	9301      	str	r3, [sp, #4]
 800e87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e880:	9300      	str	r3, [sp, #0]
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	687a      	ldr	r2, [r7, #4]
 800e886:	68b9      	ldr	r1, [r7, #8]
 800e888:	68f8      	ldr	r0, [r7, #12]
 800e88a:	f000 f851 	bl	800e930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e88e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e890:	f000 f8e4 	bl	800ea5c <prvAddNewTaskToReadyList>
 800e894:	e001      	b.n	800e89a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800e896:	2300      	movs	r3, #0
 800e898:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e89a:	697b      	ldr	r3, [r7, #20]
	}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3728      	adds	r7, #40	; 0x28
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}

0800e8a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b08c      	sub	sp, #48	; 0x30
 800e8a8:	af04      	add	r7, sp, #16
 800e8aa:	60f8      	str	r0, [r7, #12]
 800e8ac:	60b9      	str	r1, [r7, #8]
 800e8ae:	603b      	str	r3, [r7, #0]
 800e8b0:	4613      	mov	r3, r2
 800e8b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8b4:	88fb      	ldrh	r3, [r7, #6]
 800e8b6:	009b      	lsls	r3, r3, #2
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f001 fcf7 	bl	80102ac <pvPortMalloc>
 800e8be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d00e      	beq.n	800e8e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800e8c6:	20b4      	movs	r0, #180	; 0xb4
 800e8c8:	f001 fcf0 	bl	80102ac <pvPortMalloc>
 800e8cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e8ce:	69fb      	ldr	r3, [r7, #28]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d003      	beq.n	800e8dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e8d4:	69fb      	ldr	r3, [r7, #28]
 800e8d6:	697a      	ldr	r2, [r7, #20]
 800e8d8:	631a      	str	r2, [r3, #48]	; 0x30
 800e8da:	e005      	b.n	800e8e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e8dc:	6978      	ldr	r0, [r7, #20]
 800e8de:	f001 fda9 	bl	8010434 <vPortFree>
 800e8e2:	e001      	b.n	800e8e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e8e8:	69fb      	ldr	r3, [r7, #28]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d017      	beq.n	800e91e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e8ee:	69fb      	ldr	r3, [r7, #28]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e8f6:	88fa      	ldrh	r2, [r7, #6]
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	9303      	str	r3, [sp, #12]
 800e8fc:	69fb      	ldr	r3, [r7, #28]
 800e8fe:	9302      	str	r3, [sp, #8]
 800e900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e902:	9301      	str	r3, [sp, #4]
 800e904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e906:	9300      	str	r3, [sp, #0]
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	68b9      	ldr	r1, [r7, #8]
 800e90c:	68f8      	ldr	r0, [r7, #12]
 800e90e:	f000 f80f 	bl	800e930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e912:	69f8      	ldr	r0, [r7, #28]
 800e914:	f000 f8a2 	bl	800ea5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e918:	2301      	movs	r3, #1
 800e91a:	61bb      	str	r3, [r7, #24]
 800e91c:	e002      	b.n	800e924 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e91e:	f04f 33ff 	mov.w	r3, #4294967295
 800e922:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e924:	69bb      	ldr	r3, [r7, #24]
	}
 800e926:	4618      	mov	r0, r3
 800e928:	3720      	adds	r7, #32
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
	...

0800e930 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b088      	sub	sp, #32
 800e934:	af00      	add	r7, sp, #0
 800e936:	60f8      	str	r0, [r7, #12]
 800e938:	60b9      	str	r1, [r7, #8]
 800e93a:	607a      	str	r2, [r7, #4]
 800e93c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800e93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e948:	3b01      	subs	r3, #1
 800e94a:	009b      	lsls	r3, r3, #2
 800e94c:	4413      	add	r3, r2
 800e94e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e950:	69bb      	ldr	r3, [r7, #24]
 800e952:	f023 0307 	bic.w	r3, r3, #7
 800e956:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e958:	69bb      	ldr	r3, [r7, #24]
 800e95a:	f003 0307 	and.w	r3, r3, #7
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d00a      	beq.n	800e978 <prvInitialiseNewTask+0x48>
	__asm volatile
 800e962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e966:	f383 8811 	msr	BASEPRI, r3
 800e96a:	f3bf 8f6f 	isb	sy
 800e96e:	f3bf 8f4f 	dsb	sy
 800e972:	617b      	str	r3, [r7, #20]
}
 800e974:	bf00      	nop
 800e976:	e7fe      	b.n	800e976 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e978:	2300      	movs	r3, #0
 800e97a:	61fb      	str	r3, [r7, #28]
 800e97c:	e012      	b.n	800e9a4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e97e:	68ba      	ldr	r2, [r7, #8]
 800e980:	69fb      	ldr	r3, [r7, #28]
 800e982:	4413      	add	r3, r2
 800e984:	7819      	ldrb	r1, [r3, #0]
 800e986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e988:	69fb      	ldr	r3, [r7, #28]
 800e98a:	4413      	add	r3, r2
 800e98c:	3334      	adds	r3, #52	; 0x34
 800e98e:	460a      	mov	r2, r1
 800e990:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800e992:	68ba      	ldr	r2, [r7, #8]
 800e994:	69fb      	ldr	r3, [r7, #28]
 800e996:	4413      	add	r3, r2
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d006      	beq.n	800e9ac <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e99e:	69fb      	ldr	r3, [r7, #28]
 800e9a0:	3301      	adds	r3, #1
 800e9a2:	61fb      	str	r3, [r7, #28]
 800e9a4:	69fb      	ldr	r3, [r7, #28]
 800e9a6:	2b0f      	cmp	r3, #15
 800e9a8:	d9e9      	bls.n	800e97e <prvInitialiseNewTask+0x4e>
 800e9aa:	e000      	b.n	800e9ae <prvInitialiseNewTask+0x7e>
		{
			break;
 800e9ac:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b8:	2b06      	cmp	r3, #6
 800e9ba:	d901      	bls.n	800e9c0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e9bc:	2306      	movs	r3, #6
 800e9be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9ca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d4:	3304      	adds	r3, #4
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f7fe ff27 	bl	800d82a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9de:	3318      	adds	r3, #24
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f7fe ff22 	bl	800d82a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ee:	f1c3 0207 	rsb	r2, r3, #7
 800e9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9fe:	2200      	movs	r2, #0
 800ea00:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ea04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea06:	2200      	movs	r2, #0
 800ea08:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ea0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea0e:	334c      	adds	r3, #76	; 0x4c
 800ea10:	2260      	movs	r2, #96	; 0x60
 800ea12:	2100      	movs	r1, #0
 800ea14:	4618      	mov	r0, r3
 800ea16:	f001 ff63 	bl	80108e0 <memset>
 800ea1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1c:	4a0c      	ldr	r2, [pc, #48]	; (800ea50 <prvInitialiseNewTask+0x120>)
 800ea1e:	651a      	str	r2, [r3, #80]	; 0x50
 800ea20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea22:	4a0c      	ldr	r2, [pc, #48]	; (800ea54 <prvInitialiseNewTask+0x124>)
 800ea24:	655a      	str	r2, [r3, #84]	; 0x54
 800ea26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea28:	4a0b      	ldr	r2, [pc, #44]	; (800ea58 <prvInitialiseNewTask+0x128>)
 800ea2a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ea2c:	683a      	ldr	r2, [r7, #0]
 800ea2e:	68f9      	ldr	r1, [r7, #12]
 800ea30:	69b8      	ldr	r0, [r7, #24]
 800ea32:	f001 fa49 	bl	800fec8 <pxPortInitialiseStack>
 800ea36:	4602      	mov	r2, r0
 800ea38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea3a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800ea3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d002      	beq.n	800ea48 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ea42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea48:	bf00      	nop
 800ea4a:	3720      	adds	r7, #32
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}
 800ea50:	080159cc 	.word	0x080159cc
 800ea54:	080159ec 	.word	0x080159ec
 800ea58:	080159ac 	.word	0x080159ac

0800ea5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b082      	sub	sp, #8
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ea64:	f001 fb22 	bl	80100ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ea68:	4b2a      	ldr	r3, [pc, #168]	; (800eb14 <prvAddNewTaskToReadyList+0xb8>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	3301      	adds	r3, #1
 800ea6e:	4a29      	ldr	r2, [pc, #164]	; (800eb14 <prvAddNewTaskToReadyList+0xb8>)
 800ea70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ea72:	4b29      	ldr	r3, [pc, #164]	; (800eb18 <prvAddNewTaskToReadyList+0xbc>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d109      	bne.n	800ea8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ea7a:	4a27      	ldr	r2, [pc, #156]	; (800eb18 <prvAddNewTaskToReadyList+0xbc>)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ea80:	4b24      	ldr	r3, [pc, #144]	; (800eb14 <prvAddNewTaskToReadyList+0xb8>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	2b01      	cmp	r3, #1
 800ea86:	d110      	bne.n	800eaaa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ea88:	f000 fc1c 	bl	800f2c4 <prvInitialiseTaskLists>
 800ea8c:	e00d      	b.n	800eaaa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ea8e:	4b23      	ldr	r3, [pc, #140]	; (800eb1c <prvAddNewTaskToReadyList+0xc0>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d109      	bne.n	800eaaa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ea96:	4b20      	ldr	r3, [pc, #128]	; (800eb18 <prvAddNewTaskToReadyList+0xbc>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d802      	bhi.n	800eaaa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800eaa4:	4a1c      	ldr	r2, [pc, #112]	; (800eb18 <prvAddNewTaskToReadyList+0xbc>)
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800eaaa:	4b1d      	ldr	r3, [pc, #116]	; (800eb20 <prvAddNewTaskToReadyList+0xc4>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	3301      	adds	r3, #1
 800eab0:	4a1b      	ldr	r2, [pc, #108]	; (800eb20 <prvAddNewTaskToReadyList+0xc4>)
 800eab2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eab8:	2201      	movs	r2, #1
 800eaba:	409a      	lsls	r2, r3
 800eabc:	4b19      	ldr	r3, [pc, #100]	; (800eb24 <prvAddNewTaskToReadyList+0xc8>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4313      	orrs	r3, r2
 800eac2:	4a18      	ldr	r2, [pc, #96]	; (800eb24 <prvAddNewTaskToReadyList+0xc8>)
 800eac4:	6013      	str	r3, [r2, #0]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaca:	4613      	mov	r3, r2
 800eacc:	009b      	lsls	r3, r3, #2
 800eace:	4413      	add	r3, r2
 800ead0:	009b      	lsls	r3, r3, #2
 800ead2:	4a15      	ldr	r2, [pc, #84]	; (800eb28 <prvAddNewTaskToReadyList+0xcc>)
 800ead4:	441a      	add	r2, r3
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	3304      	adds	r3, #4
 800eada:	4619      	mov	r1, r3
 800eadc:	4610      	mov	r0, r2
 800eade:	f7fe feb0 	bl	800d842 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eae2:	f001 fb13 	bl	801010c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eae6:	4b0d      	ldr	r3, [pc, #52]	; (800eb1c <prvAddNewTaskToReadyList+0xc0>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d00e      	beq.n	800eb0c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eaee:	4b0a      	ldr	r3, [pc, #40]	; (800eb18 <prvAddNewTaskToReadyList+0xbc>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d207      	bcs.n	800eb0c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800eafc:	4b0b      	ldr	r3, [pc, #44]	; (800eb2c <prvAddNewTaskToReadyList+0xd0>)
 800eafe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb02:	601a      	str	r2, [r3, #0]
 800eb04:	f3bf 8f4f 	dsb	sy
 800eb08:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb0c:	bf00      	nop
 800eb0e:	3708      	adds	r7, #8
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}
 800eb14:	20002ec0 	.word	0x20002ec0
 800eb18:	20002dc0 	.word	0x20002dc0
 800eb1c:	20002ecc 	.word	0x20002ecc
 800eb20:	20002edc 	.word	0x20002edc
 800eb24:	20002ec8 	.word	0x20002ec8
 800eb28:	20002dc4 	.word	0x20002dc4
 800eb2c:	e000ed04 	.word	0xe000ed04

0800eb30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b084      	sub	sp, #16
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d017      	beq.n	800eb72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800eb42:	4b13      	ldr	r3, [pc, #76]	; (800eb90 <vTaskDelay+0x60>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d00a      	beq.n	800eb60 <vTaskDelay+0x30>
	__asm volatile
 800eb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb4e:	f383 8811 	msr	BASEPRI, r3
 800eb52:	f3bf 8f6f 	isb	sy
 800eb56:	f3bf 8f4f 	dsb	sy
 800eb5a:	60bb      	str	r3, [r7, #8]
}
 800eb5c:	bf00      	nop
 800eb5e:	e7fe      	b.n	800eb5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800eb60:	f000 f88a 	bl	800ec78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eb64:	2100      	movs	r1, #0
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f000 fe50 	bl	800f80c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800eb6c:	f000 f892 	bl	800ec94 <xTaskResumeAll>
 800eb70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d107      	bne.n	800eb88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800eb78:	4b06      	ldr	r3, [pc, #24]	; (800eb94 <vTaskDelay+0x64>)
 800eb7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb7e:	601a      	str	r2, [r3, #0]
 800eb80:	f3bf 8f4f 	dsb	sy
 800eb84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb88:	bf00      	nop
 800eb8a:	3710      	adds	r7, #16
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}
 800eb90:	20002ee8 	.word	0x20002ee8
 800eb94:	e000ed04 	.word	0xe000ed04

0800eb98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b08a      	sub	sp, #40	; 0x28
 800eb9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800eba2:	2300      	movs	r3, #0
 800eba4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800eba6:	463a      	mov	r2, r7
 800eba8:	1d39      	adds	r1, r7, #4
 800ebaa:	f107 0308 	add.w	r3, r7, #8
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f7f3 feb6 	bl	8002920 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ebb4:	6839      	ldr	r1, [r7, #0]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	68ba      	ldr	r2, [r7, #8]
 800ebba:	9202      	str	r2, [sp, #8]
 800ebbc:	9301      	str	r3, [sp, #4]
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	9300      	str	r3, [sp, #0]
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	460a      	mov	r2, r1
 800ebc6:	4924      	ldr	r1, [pc, #144]	; (800ec58 <vTaskStartScheduler+0xc0>)
 800ebc8:	4824      	ldr	r0, [pc, #144]	; (800ec5c <vTaskStartScheduler+0xc4>)
 800ebca:	f7ff fe0f 	bl	800e7ec <xTaskCreateStatic>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	4a23      	ldr	r2, [pc, #140]	; (800ec60 <vTaskStartScheduler+0xc8>)
 800ebd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ebd4:	4b22      	ldr	r3, [pc, #136]	; (800ec60 <vTaskStartScheduler+0xc8>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d002      	beq.n	800ebe2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ebdc:	2301      	movs	r3, #1
 800ebde:	617b      	str	r3, [r7, #20]
 800ebe0:	e001      	b.n	800ebe6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	2b01      	cmp	r3, #1
 800ebea:	d102      	bne.n	800ebf2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ebec:	f000 fe74 	bl	800f8d8 <xTimerCreateTimerTask>
 800ebf0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	2b01      	cmp	r3, #1
 800ebf6:	d11b      	bne.n	800ec30 <vTaskStartScheduler+0x98>
	__asm volatile
 800ebf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebfc:	f383 8811 	msr	BASEPRI, r3
 800ec00:	f3bf 8f6f 	isb	sy
 800ec04:	f3bf 8f4f 	dsb	sy
 800ec08:	613b      	str	r3, [r7, #16]
}
 800ec0a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ec0c:	4b15      	ldr	r3, [pc, #84]	; (800ec64 <vTaskStartScheduler+0xcc>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	334c      	adds	r3, #76	; 0x4c
 800ec12:	4a15      	ldr	r2, [pc, #84]	; (800ec68 <vTaskStartScheduler+0xd0>)
 800ec14:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ec16:	4b15      	ldr	r3, [pc, #84]	; (800ec6c <vTaskStartScheduler+0xd4>)
 800ec18:	f04f 32ff 	mov.w	r2, #4294967295
 800ec1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ec1e:	4b14      	ldr	r3, [pc, #80]	; (800ec70 <vTaskStartScheduler+0xd8>)
 800ec20:	2201      	movs	r2, #1
 800ec22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800ec24:	4b13      	ldr	r3, [pc, #76]	; (800ec74 <vTaskStartScheduler+0xdc>)
 800ec26:	2200      	movs	r2, #0
 800ec28:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ec2a:	f001 f9cd 	bl	800ffc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ec2e:	e00e      	b.n	800ec4e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec36:	d10a      	bne.n	800ec4e <vTaskStartScheduler+0xb6>
	__asm volatile
 800ec38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec3c:	f383 8811 	msr	BASEPRI, r3
 800ec40:	f3bf 8f6f 	isb	sy
 800ec44:	f3bf 8f4f 	dsb	sy
 800ec48:	60fb      	str	r3, [r7, #12]
}
 800ec4a:	bf00      	nop
 800ec4c:	e7fe      	b.n	800ec4c <vTaskStartScheduler+0xb4>
}
 800ec4e:	bf00      	nop
 800ec50:	3718      	adds	r7, #24
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}
 800ec56:	bf00      	nop
 800ec58:	08015328 	.word	0x08015328
 800ec5c:	0800f295 	.word	0x0800f295
 800ec60:	20002ee4 	.word	0x20002ee4
 800ec64:	20002dc0 	.word	0x20002dc0
 800ec68:	20000224 	.word	0x20000224
 800ec6c:	20002ee0 	.word	0x20002ee0
 800ec70:	20002ecc 	.word	0x20002ecc
 800ec74:	20002ec4 	.word	0x20002ec4

0800ec78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ec78:	b480      	push	{r7}
 800ec7a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ec7c:	4b04      	ldr	r3, [pc, #16]	; (800ec90 <vTaskSuspendAll+0x18>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	3301      	adds	r3, #1
 800ec82:	4a03      	ldr	r2, [pc, #12]	; (800ec90 <vTaskSuspendAll+0x18>)
 800ec84:	6013      	str	r3, [r2, #0]
}
 800ec86:	bf00      	nop
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bc80      	pop	{r7}
 800ec8c:	4770      	bx	lr
 800ec8e:	bf00      	nop
 800ec90:	20002ee8 	.word	0x20002ee8

0800ec94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b084      	sub	sp, #16
 800ec98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800eca2:	4b41      	ldr	r3, [pc, #260]	; (800eda8 <xTaskResumeAll+0x114>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d10a      	bne.n	800ecc0 <xTaskResumeAll+0x2c>
	__asm volatile
 800ecaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecae:	f383 8811 	msr	BASEPRI, r3
 800ecb2:	f3bf 8f6f 	isb	sy
 800ecb6:	f3bf 8f4f 	dsb	sy
 800ecba:	603b      	str	r3, [r7, #0]
}
 800ecbc:	bf00      	nop
 800ecbe:	e7fe      	b.n	800ecbe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ecc0:	f001 f9f4 	bl	80100ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ecc4:	4b38      	ldr	r3, [pc, #224]	; (800eda8 <xTaskResumeAll+0x114>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	3b01      	subs	r3, #1
 800ecca:	4a37      	ldr	r2, [pc, #220]	; (800eda8 <xTaskResumeAll+0x114>)
 800eccc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecce:	4b36      	ldr	r3, [pc, #216]	; (800eda8 <xTaskResumeAll+0x114>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d161      	bne.n	800ed9a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ecd6:	4b35      	ldr	r3, [pc, #212]	; (800edac <xTaskResumeAll+0x118>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d05d      	beq.n	800ed9a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ecde:	e02e      	b.n	800ed3e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ece0:	4b33      	ldr	r3, [pc, #204]	; (800edb0 <xTaskResumeAll+0x11c>)
 800ece2:	68db      	ldr	r3, [r3, #12]
 800ece4:	68db      	ldr	r3, [r3, #12]
 800ece6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	3318      	adds	r3, #24
 800ecec:	4618      	mov	r0, r3
 800ecee:	f7fe fe03 	bl	800d8f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	3304      	adds	r3, #4
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f7fe fdfe 	bl	800d8f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed00:	2201      	movs	r2, #1
 800ed02:	409a      	lsls	r2, r3
 800ed04:	4b2b      	ldr	r3, [pc, #172]	; (800edb4 <xTaskResumeAll+0x120>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	4313      	orrs	r3, r2
 800ed0a:	4a2a      	ldr	r2, [pc, #168]	; (800edb4 <xTaskResumeAll+0x120>)
 800ed0c:	6013      	str	r3, [r2, #0]
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed12:	4613      	mov	r3, r2
 800ed14:	009b      	lsls	r3, r3, #2
 800ed16:	4413      	add	r3, r2
 800ed18:	009b      	lsls	r3, r3, #2
 800ed1a:	4a27      	ldr	r2, [pc, #156]	; (800edb8 <xTaskResumeAll+0x124>)
 800ed1c:	441a      	add	r2, r3
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	3304      	adds	r3, #4
 800ed22:	4619      	mov	r1, r3
 800ed24:	4610      	mov	r0, r2
 800ed26:	f7fe fd8c 	bl	800d842 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed2e:	4b23      	ldr	r3, [pc, #140]	; (800edbc <xTaskResumeAll+0x128>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d302      	bcc.n	800ed3e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ed38:	4b21      	ldr	r3, [pc, #132]	; (800edc0 <xTaskResumeAll+0x12c>)
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ed3e:	4b1c      	ldr	r3, [pc, #112]	; (800edb0 <xTaskResumeAll+0x11c>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d1cc      	bne.n	800ece0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d001      	beq.n	800ed50 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ed4c:	f000 fb5c 	bl	800f408 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ed50:	4b1c      	ldr	r3, [pc, #112]	; (800edc4 <xTaskResumeAll+0x130>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d010      	beq.n	800ed7e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ed5c:	f000 f844 	bl	800ede8 <xTaskIncrementTick>
 800ed60:	4603      	mov	r3, r0
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d002      	beq.n	800ed6c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ed66:	4b16      	ldr	r3, [pc, #88]	; (800edc0 <xTaskResumeAll+0x12c>)
 800ed68:	2201      	movs	r2, #1
 800ed6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	3b01      	subs	r3, #1
 800ed70:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d1f1      	bne.n	800ed5c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800ed78:	4b12      	ldr	r3, [pc, #72]	; (800edc4 <xTaskResumeAll+0x130>)
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ed7e:	4b10      	ldr	r3, [pc, #64]	; (800edc0 <xTaskResumeAll+0x12c>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d009      	beq.n	800ed9a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ed86:	2301      	movs	r3, #1
 800ed88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ed8a:	4b0f      	ldr	r3, [pc, #60]	; (800edc8 <xTaskResumeAll+0x134>)
 800ed8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed90:	601a      	str	r2, [r3, #0]
 800ed92:	f3bf 8f4f 	dsb	sy
 800ed96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ed9a:	f001 f9b7 	bl	801010c <vPortExitCritical>

	return xAlreadyYielded;
 800ed9e:	68bb      	ldr	r3, [r7, #8]
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3710      	adds	r7, #16
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}
 800eda8:	20002ee8 	.word	0x20002ee8
 800edac:	20002ec0 	.word	0x20002ec0
 800edb0:	20002e80 	.word	0x20002e80
 800edb4:	20002ec8 	.word	0x20002ec8
 800edb8:	20002dc4 	.word	0x20002dc4
 800edbc:	20002dc0 	.word	0x20002dc0
 800edc0:	20002ed4 	.word	0x20002ed4
 800edc4:	20002ed0 	.word	0x20002ed0
 800edc8:	e000ed04 	.word	0xe000ed04

0800edcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800edcc:	b480      	push	{r7}
 800edce:	b083      	sub	sp, #12
 800edd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800edd2:	4b04      	ldr	r3, [pc, #16]	; (800ede4 <xTaskGetTickCount+0x18>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800edd8:	687b      	ldr	r3, [r7, #4]
}
 800edda:	4618      	mov	r0, r3
 800eddc:	370c      	adds	r7, #12
 800edde:	46bd      	mov	sp, r7
 800ede0:	bc80      	pop	{r7}
 800ede2:	4770      	bx	lr
 800ede4:	20002ec4 	.word	0x20002ec4

0800ede8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b086      	sub	sp, #24
 800edec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800edee:	2300      	movs	r3, #0
 800edf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edf2:	4b51      	ldr	r3, [pc, #324]	; (800ef38 <xTaskIncrementTick+0x150>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	f040 808d 	bne.w	800ef16 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800edfc:	4b4f      	ldr	r3, [pc, #316]	; (800ef3c <xTaskIncrementTick+0x154>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	3301      	adds	r3, #1
 800ee02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ee04:	4a4d      	ldr	r2, [pc, #308]	; (800ef3c <xTaskIncrementTick+0x154>)
 800ee06:	693b      	ldr	r3, [r7, #16]
 800ee08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d120      	bne.n	800ee52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ee10:	4b4b      	ldr	r3, [pc, #300]	; (800ef40 <xTaskIncrementTick+0x158>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d00a      	beq.n	800ee30 <xTaskIncrementTick+0x48>
	__asm volatile
 800ee1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee1e:	f383 8811 	msr	BASEPRI, r3
 800ee22:	f3bf 8f6f 	isb	sy
 800ee26:	f3bf 8f4f 	dsb	sy
 800ee2a:	603b      	str	r3, [r7, #0]
}
 800ee2c:	bf00      	nop
 800ee2e:	e7fe      	b.n	800ee2e <xTaskIncrementTick+0x46>
 800ee30:	4b43      	ldr	r3, [pc, #268]	; (800ef40 <xTaskIncrementTick+0x158>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	60fb      	str	r3, [r7, #12]
 800ee36:	4b43      	ldr	r3, [pc, #268]	; (800ef44 <xTaskIncrementTick+0x15c>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	4a41      	ldr	r2, [pc, #260]	; (800ef40 <xTaskIncrementTick+0x158>)
 800ee3c:	6013      	str	r3, [r2, #0]
 800ee3e:	4a41      	ldr	r2, [pc, #260]	; (800ef44 <xTaskIncrementTick+0x15c>)
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	6013      	str	r3, [r2, #0]
 800ee44:	4b40      	ldr	r3, [pc, #256]	; (800ef48 <xTaskIncrementTick+0x160>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	3301      	adds	r3, #1
 800ee4a:	4a3f      	ldr	r2, [pc, #252]	; (800ef48 <xTaskIncrementTick+0x160>)
 800ee4c:	6013      	str	r3, [r2, #0]
 800ee4e:	f000 fadb 	bl	800f408 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ee52:	4b3e      	ldr	r3, [pc, #248]	; (800ef4c <xTaskIncrementTick+0x164>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	693a      	ldr	r2, [r7, #16]
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d34d      	bcc.n	800eef8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee5c:	4b38      	ldr	r3, [pc, #224]	; (800ef40 <xTaskIncrementTick+0x158>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d101      	bne.n	800ee6a <xTaskIncrementTick+0x82>
 800ee66:	2301      	movs	r3, #1
 800ee68:	e000      	b.n	800ee6c <xTaskIncrementTick+0x84>
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d004      	beq.n	800ee7a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee70:	4b36      	ldr	r3, [pc, #216]	; (800ef4c <xTaskIncrementTick+0x164>)
 800ee72:	f04f 32ff 	mov.w	r2, #4294967295
 800ee76:	601a      	str	r2, [r3, #0]
					break;
 800ee78:	e03e      	b.n	800eef8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ee7a:	4b31      	ldr	r3, [pc, #196]	; (800ef40 <xTaskIncrementTick+0x158>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	68db      	ldr	r3, [r3, #12]
 800ee80:	68db      	ldr	r3, [r3, #12]
 800ee82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	685b      	ldr	r3, [r3, #4]
 800ee88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ee8a:	693a      	ldr	r2, [r7, #16]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d203      	bcs.n	800ee9a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ee92:	4a2e      	ldr	r2, [pc, #184]	; (800ef4c <xTaskIncrementTick+0x164>)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6013      	str	r3, [r2, #0]
						break;
 800ee98:	e02e      	b.n	800eef8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	3304      	adds	r3, #4
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f7fe fd2a 	bl	800d8f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d004      	beq.n	800eeb6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	3318      	adds	r3, #24
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7fe fd21 	bl	800d8f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeba:	2201      	movs	r2, #1
 800eebc:	409a      	lsls	r2, r3
 800eebe:	4b24      	ldr	r3, [pc, #144]	; (800ef50 <xTaskIncrementTick+0x168>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	4313      	orrs	r3, r2
 800eec4:	4a22      	ldr	r2, [pc, #136]	; (800ef50 <xTaskIncrementTick+0x168>)
 800eec6:	6013      	str	r3, [r2, #0]
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eecc:	4613      	mov	r3, r2
 800eece:	009b      	lsls	r3, r3, #2
 800eed0:	4413      	add	r3, r2
 800eed2:	009b      	lsls	r3, r3, #2
 800eed4:	4a1f      	ldr	r2, [pc, #124]	; (800ef54 <xTaskIncrementTick+0x16c>)
 800eed6:	441a      	add	r2, r3
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	3304      	adds	r3, #4
 800eedc:	4619      	mov	r1, r3
 800eede:	4610      	mov	r0, r2
 800eee0:	f7fe fcaf 	bl	800d842 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eee8:	4b1b      	ldr	r3, [pc, #108]	; (800ef58 <xTaskIncrementTick+0x170>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d3b4      	bcc.n	800ee5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800eef2:	2301      	movs	r3, #1
 800eef4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eef6:	e7b1      	b.n	800ee5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eef8:	4b17      	ldr	r3, [pc, #92]	; (800ef58 <xTaskIncrementTick+0x170>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eefe:	4915      	ldr	r1, [pc, #84]	; (800ef54 <xTaskIncrementTick+0x16c>)
 800ef00:	4613      	mov	r3, r2
 800ef02:	009b      	lsls	r3, r3, #2
 800ef04:	4413      	add	r3, r2
 800ef06:	009b      	lsls	r3, r3, #2
 800ef08:	440b      	add	r3, r1
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	d907      	bls.n	800ef20 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800ef10:	2301      	movs	r3, #1
 800ef12:	617b      	str	r3, [r7, #20]
 800ef14:	e004      	b.n	800ef20 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ef16:	4b11      	ldr	r3, [pc, #68]	; (800ef5c <xTaskIncrementTick+0x174>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	4a0f      	ldr	r2, [pc, #60]	; (800ef5c <xTaskIncrementTick+0x174>)
 800ef1e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ef20:	4b0f      	ldr	r3, [pc, #60]	; (800ef60 <xTaskIncrementTick+0x178>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d001      	beq.n	800ef2c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800ef28:	2301      	movs	r3, #1
 800ef2a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ef2c:	697b      	ldr	r3, [r7, #20]
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3718      	adds	r7, #24
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
 800ef36:	bf00      	nop
 800ef38:	20002ee8 	.word	0x20002ee8
 800ef3c:	20002ec4 	.word	0x20002ec4
 800ef40:	20002e78 	.word	0x20002e78
 800ef44:	20002e7c 	.word	0x20002e7c
 800ef48:	20002ed8 	.word	0x20002ed8
 800ef4c:	20002ee0 	.word	0x20002ee0
 800ef50:	20002ec8 	.word	0x20002ec8
 800ef54:	20002dc4 	.word	0x20002dc4
 800ef58:	20002dc0 	.word	0x20002dc0
 800ef5c:	20002ed0 	.word	0x20002ed0
 800ef60:	20002ed4 	.word	0x20002ed4

0800ef64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ef64:	b480      	push	{r7}
 800ef66:	b087      	sub	sp, #28
 800ef68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ef6a:	4b29      	ldr	r3, [pc, #164]	; (800f010 <vTaskSwitchContext+0xac>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d003      	beq.n	800ef7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ef72:	4b28      	ldr	r3, [pc, #160]	; (800f014 <vTaskSwitchContext+0xb0>)
 800ef74:	2201      	movs	r2, #1
 800ef76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ef78:	e044      	b.n	800f004 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800ef7a:	4b26      	ldr	r3, [pc, #152]	; (800f014 <vTaskSwitchContext+0xb0>)
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ef80:	4b25      	ldr	r3, [pc, #148]	; (800f018 <vTaskSwitchContext+0xb4>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	fab3 f383 	clz	r3, r3
 800ef8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ef8e:	7afb      	ldrb	r3, [r7, #11]
 800ef90:	f1c3 031f 	rsb	r3, r3, #31
 800ef94:	617b      	str	r3, [r7, #20]
 800ef96:	4921      	ldr	r1, [pc, #132]	; (800f01c <vTaskSwitchContext+0xb8>)
 800ef98:	697a      	ldr	r2, [r7, #20]
 800ef9a:	4613      	mov	r3, r2
 800ef9c:	009b      	lsls	r3, r3, #2
 800ef9e:	4413      	add	r3, r2
 800efa0:	009b      	lsls	r3, r3, #2
 800efa2:	440b      	add	r3, r1
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d10a      	bne.n	800efc0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800efaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efae:	f383 8811 	msr	BASEPRI, r3
 800efb2:	f3bf 8f6f 	isb	sy
 800efb6:	f3bf 8f4f 	dsb	sy
 800efba:	607b      	str	r3, [r7, #4]
}
 800efbc:	bf00      	nop
 800efbe:	e7fe      	b.n	800efbe <vTaskSwitchContext+0x5a>
 800efc0:	697a      	ldr	r2, [r7, #20]
 800efc2:	4613      	mov	r3, r2
 800efc4:	009b      	lsls	r3, r3, #2
 800efc6:	4413      	add	r3, r2
 800efc8:	009b      	lsls	r3, r3, #2
 800efca:	4a14      	ldr	r2, [pc, #80]	; (800f01c <vTaskSwitchContext+0xb8>)
 800efcc:	4413      	add	r3, r2
 800efce:	613b      	str	r3, [r7, #16]
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	685a      	ldr	r2, [r3, #4]
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	605a      	str	r2, [r3, #4]
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	685a      	ldr	r2, [r3, #4]
 800efde:	693b      	ldr	r3, [r7, #16]
 800efe0:	3308      	adds	r3, #8
 800efe2:	429a      	cmp	r2, r3
 800efe4:	d104      	bne.n	800eff0 <vTaskSwitchContext+0x8c>
 800efe6:	693b      	ldr	r3, [r7, #16]
 800efe8:	685b      	ldr	r3, [r3, #4]
 800efea:	685a      	ldr	r2, [r3, #4]
 800efec:	693b      	ldr	r3, [r7, #16]
 800efee:	605a      	str	r2, [r3, #4]
 800eff0:	693b      	ldr	r3, [r7, #16]
 800eff2:	685b      	ldr	r3, [r3, #4]
 800eff4:	68db      	ldr	r3, [r3, #12]
 800eff6:	4a0a      	ldr	r2, [pc, #40]	; (800f020 <vTaskSwitchContext+0xbc>)
 800eff8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800effa:	4b09      	ldr	r3, [pc, #36]	; (800f020 <vTaskSwitchContext+0xbc>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	334c      	adds	r3, #76	; 0x4c
 800f000:	4a08      	ldr	r2, [pc, #32]	; (800f024 <vTaskSwitchContext+0xc0>)
 800f002:	6013      	str	r3, [r2, #0]
}
 800f004:	bf00      	nop
 800f006:	371c      	adds	r7, #28
 800f008:	46bd      	mov	sp, r7
 800f00a:	bc80      	pop	{r7}
 800f00c:	4770      	bx	lr
 800f00e:	bf00      	nop
 800f010:	20002ee8 	.word	0x20002ee8
 800f014:	20002ed4 	.word	0x20002ed4
 800f018:	20002ec8 	.word	0x20002ec8
 800f01c:	20002dc4 	.word	0x20002dc4
 800f020:	20002dc0 	.word	0x20002dc0
 800f024:	20000224 	.word	0x20000224

0800f028 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b084      	sub	sp, #16
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d10a      	bne.n	800f04e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f03c:	f383 8811 	msr	BASEPRI, r3
 800f040:	f3bf 8f6f 	isb	sy
 800f044:	f3bf 8f4f 	dsb	sy
 800f048:	60fb      	str	r3, [r7, #12]
}
 800f04a:	bf00      	nop
 800f04c:	e7fe      	b.n	800f04c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f04e:	4b07      	ldr	r3, [pc, #28]	; (800f06c <vTaskPlaceOnEventList+0x44>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	3318      	adds	r3, #24
 800f054:	4619      	mov	r1, r3
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f7fe fc16 	bl	800d888 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f05c:	2101      	movs	r1, #1
 800f05e:	6838      	ldr	r0, [r7, #0]
 800f060:	f000 fbd4 	bl	800f80c <prvAddCurrentTaskToDelayedList>
}
 800f064:	bf00      	nop
 800f066:	3710      	adds	r7, #16
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}
 800f06c:	20002dc0 	.word	0x20002dc0

0800f070 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f070:	b580      	push	{r7, lr}
 800f072:	b086      	sub	sp, #24
 800f074:	af00      	add	r7, sp, #0
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	60b9      	str	r1, [r7, #8]
 800f07a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d10a      	bne.n	800f098 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f086:	f383 8811 	msr	BASEPRI, r3
 800f08a:	f3bf 8f6f 	isb	sy
 800f08e:	f3bf 8f4f 	dsb	sy
 800f092:	617b      	str	r3, [r7, #20]
}
 800f094:	bf00      	nop
 800f096:	e7fe      	b.n	800f096 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f098:	4b0a      	ldr	r3, [pc, #40]	; (800f0c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	3318      	adds	r3, #24
 800f09e:	4619      	mov	r1, r3
 800f0a0:	68f8      	ldr	r0, [r7, #12]
 800f0a2:	f7fe fbce 	bl	800d842 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d002      	beq.n	800f0b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f0ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f0b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f0b2:	6879      	ldr	r1, [r7, #4]
 800f0b4:	68b8      	ldr	r0, [r7, #8]
 800f0b6:	f000 fba9 	bl	800f80c <prvAddCurrentTaskToDelayedList>
	}
 800f0ba:	bf00      	nop
 800f0bc:	3718      	adds	r7, #24
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
 800f0c2:	bf00      	nop
 800f0c4:	20002dc0 	.word	0x20002dc0

0800f0c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b086      	sub	sp, #24
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	68db      	ldr	r3, [r3, #12]
 800f0d4:	68db      	ldr	r3, [r3, #12]
 800f0d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d10a      	bne.n	800f0f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e2:	f383 8811 	msr	BASEPRI, r3
 800f0e6:	f3bf 8f6f 	isb	sy
 800f0ea:	f3bf 8f4f 	dsb	sy
 800f0ee:	60fb      	str	r3, [r7, #12]
}
 800f0f0:	bf00      	nop
 800f0f2:	e7fe      	b.n	800f0f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	3318      	adds	r3, #24
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f7fe fbfd 	bl	800d8f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0fe:	4b1d      	ldr	r3, [pc, #116]	; (800f174 <xTaskRemoveFromEventList+0xac>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d11c      	bne.n	800f140 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f106:	693b      	ldr	r3, [r7, #16]
 800f108:	3304      	adds	r3, #4
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7fe fbf4 	bl	800d8f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f114:	2201      	movs	r2, #1
 800f116:	409a      	lsls	r2, r3
 800f118:	4b17      	ldr	r3, [pc, #92]	; (800f178 <xTaskRemoveFromEventList+0xb0>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	4313      	orrs	r3, r2
 800f11e:	4a16      	ldr	r2, [pc, #88]	; (800f178 <xTaskRemoveFromEventList+0xb0>)
 800f120:	6013      	str	r3, [r2, #0]
 800f122:	693b      	ldr	r3, [r7, #16]
 800f124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f126:	4613      	mov	r3, r2
 800f128:	009b      	lsls	r3, r3, #2
 800f12a:	4413      	add	r3, r2
 800f12c:	009b      	lsls	r3, r3, #2
 800f12e:	4a13      	ldr	r2, [pc, #76]	; (800f17c <xTaskRemoveFromEventList+0xb4>)
 800f130:	441a      	add	r2, r3
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	3304      	adds	r3, #4
 800f136:	4619      	mov	r1, r3
 800f138:	4610      	mov	r0, r2
 800f13a:	f7fe fb82 	bl	800d842 <vListInsertEnd>
 800f13e:	e005      	b.n	800f14c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	3318      	adds	r3, #24
 800f144:	4619      	mov	r1, r3
 800f146:	480e      	ldr	r0, [pc, #56]	; (800f180 <xTaskRemoveFromEventList+0xb8>)
 800f148:	f7fe fb7b 	bl	800d842 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f14c:	693b      	ldr	r3, [r7, #16]
 800f14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f150:	4b0c      	ldr	r3, [pc, #48]	; (800f184 <xTaskRemoveFromEventList+0xbc>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f156:	429a      	cmp	r2, r3
 800f158:	d905      	bls.n	800f166 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f15a:	2301      	movs	r3, #1
 800f15c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f15e:	4b0a      	ldr	r3, [pc, #40]	; (800f188 <xTaskRemoveFromEventList+0xc0>)
 800f160:	2201      	movs	r2, #1
 800f162:	601a      	str	r2, [r3, #0]
 800f164:	e001      	b.n	800f16a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800f166:	2300      	movs	r3, #0
 800f168:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800f16a:	697b      	ldr	r3, [r7, #20]
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	3718      	adds	r7, #24
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}
 800f174:	20002ee8 	.word	0x20002ee8
 800f178:	20002ec8 	.word	0x20002ec8
 800f17c:	20002dc4 	.word	0x20002dc4
 800f180:	20002e80 	.word	0x20002e80
 800f184:	20002dc0 	.word	0x20002dc0
 800f188:	20002ed4 	.word	0x20002ed4

0800f18c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f18c:	b480      	push	{r7}
 800f18e:	b083      	sub	sp, #12
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f194:	4b06      	ldr	r3, [pc, #24]	; (800f1b0 <vTaskInternalSetTimeOutState+0x24>)
 800f196:	681a      	ldr	r2, [r3, #0]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f19c:	4b05      	ldr	r3, [pc, #20]	; (800f1b4 <vTaskInternalSetTimeOutState+0x28>)
 800f19e:	681a      	ldr	r2, [r3, #0]
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	605a      	str	r2, [r3, #4]
}
 800f1a4:	bf00      	nop
 800f1a6:	370c      	adds	r7, #12
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bc80      	pop	{r7}
 800f1ac:	4770      	bx	lr
 800f1ae:	bf00      	nop
 800f1b0:	20002ed8 	.word	0x20002ed8
 800f1b4:	20002ec4 	.word	0x20002ec4

0800f1b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b088      	sub	sp, #32
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
 800f1c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d10a      	bne.n	800f1de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1cc:	f383 8811 	msr	BASEPRI, r3
 800f1d0:	f3bf 8f6f 	isb	sy
 800f1d4:	f3bf 8f4f 	dsb	sy
 800f1d8:	613b      	str	r3, [r7, #16]
}
 800f1da:	bf00      	nop
 800f1dc:	e7fe      	b.n	800f1dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d10a      	bne.n	800f1fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1e8:	f383 8811 	msr	BASEPRI, r3
 800f1ec:	f3bf 8f6f 	isb	sy
 800f1f0:	f3bf 8f4f 	dsb	sy
 800f1f4:	60fb      	str	r3, [r7, #12]
}
 800f1f6:	bf00      	nop
 800f1f8:	e7fe      	b.n	800f1f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f1fa:	f000 ff57 	bl	80100ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f1fe:	4b1d      	ldr	r3, [pc, #116]	; (800f274 <xTaskCheckForTimeOut+0xbc>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	685b      	ldr	r3, [r3, #4]
 800f208:	69ba      	ldr	r2, [r7, #24]
 800f20a:	1ad3      	subs	r3, r2, r3
 800f20c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f216:	d102      	bne.n	800f21e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f218:	2300      	movs	r3, #0
 800f21a:	61fb      	str	r3, [r7, #28]
 800f21c:	e023      	b.n	800f266 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	4b15      	ldr	r3, [pc, #84]	; (800f278 <xTaskCheckForTimeOut+0xc0>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	429a      	cmp	r2, r3
 800f228:	d007      	beq.n	800f23a <xTaskCheckForTimeOut+0x82>
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	69ba      	ldr	r2, [r7, #24]
 800f230:	429a      	cmp	r2, r3
 800f232:	d302      	bcc.n	800f23a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f234:	2301      	movs	r3, #1
 800f236:	61fb      	str	r3, [r7, #28]
 800f238:	e015      	b.n	800f266 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	697a      	ldr	r2, [r7, #20]
 800f240:	429a      	cmp	r2, r3
 800f242:	d20b      	bcs.n	800f25c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	681a      	ldr	r2, [r3, #0]
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	1ad2      	subs	r2, r2, r3
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f7ff ff9b 	bl	800f18c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f256:	2300      	movs	r3, #0
 800f258:	61fb      	str	r3, [r7, #28]
 800f25a:	e004      	b.n	800f266 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	2200      	movs	r2, #0
 800f260:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f262:	2301      	movs	r3, #1
 800f264:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f266:	f000 ff51 	bl	801010c <vPortExitCritical>

	return xReturn;
 800f26a:	69fb      	ldr	r3, [r7, #28]
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3720      	adds	r7, #32
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}
 800f274:	20002ec4 	.word	0x20002ec4
 800f278:	20002ed8 	.word	0x20002ed8

0800f27c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f27c:	b480      	push	{r7}
 800f27e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f280:	4b03      	ldr	r3, [pc, #12]	; (800f290 <vTaskMissedYield+0x14>)
 800f282:	2201      	movs	r2, #1
 800f284:	601a      	str	r2, [r3, #0]
}
 800f286:	bf00      	nop
 800f288:	46bd      	mov	sp, r7
 800f28a:	bc80      	pop	{r7}
 800f28c:	4770      	bx	lr
 800f28e:	bf00      	nop
 800f290:	20002ed4 	.word	0x20002ed4

0800f294 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b082      	sub	sp, #8
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f29c:	f000 f852 	bl	800f344 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f2a0:	4b06      	ldr	r3, [pc, #24]	; (800f2bc <prvIdleTask+0x28>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	2b01      	cmp	r3, #1
 800f2a6:	d9f9      	bls.n	800f29c <prvIdleTask+0x8>
			{
				taskYIELD();
 800f2a8:	4b05      	ldr	r3, [pc, #20]	; (800f2c0 <prvIdleTask+0x2c>)
 800f2aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2ae:	601a      	str	r2, [r3, #0]
 800f2b0:	f3bf 8f4f 	dsb	sy
 800f2b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f2b8:	e7f0      	b.n	800f29c <prvIdleTask+0x8>
 800f2ba:	bf00      	nop
 800f2bc:	20002dc4 	.word	0x20002dc4
 800f2c0:	e000ed04 	.word	0xe000ed04

0800f2c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b082      	sub	sp, #8
 800f2c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	607b      	str	r3, [r7, #4]
 800f2ce:	e00c      	b.n	800f2ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f2d0:	687a      	ldr	r2, [r7, #4]
 800f2d2:	4613      	mov	r3, r2
 800f2d4:	009b      	lsls	r3, r3, #2
 800f2d6:	4413      	add	r3, r2
 800f2d8:	009b      	lsls	r3, r3, #2
 800f2da:	4a12      	ldr	r2, [pc, #72]	; (800f324 <prvInitialiseTaskLists+0x60>)
 800f2dc:	4413      	add	r3, r2
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f7fe fa84 	bl	800d7ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	607b      	str	r3, [r7, #4]
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2b06      	cmp	r3, #6
 800f2ee:	d9ef      	bls.n	800f2d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f2f0:	480d      	ldr	r0, [pc, #52]	; (800f328 <prvInitialiseTaskLists+0x64>)
 800f2f2:	f7fe fa7b 	bl	800d7ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f2f6:	480d      	ldr	r0, [pc, #52]	; (800f32c <prvInitialiseTaskLists+0x68>)
 800f2f8:	f7fe fa78 	bl	800d7ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f2fc:	480c      	ldr	r0, [pc, #48]	; (800f330 <prvInitialiseTaskLists+0x6c>)
 800f2fe:	f7fe fa75 	bl	800d7ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f302:	480c      	ldr	r0, [pc, #48]	; (800f334 <prvInitialiseTaskLists+0x70>)
 800f304:	f7fe fa72 	bl	800d7ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f308:	480b      	ldr	r0, [pc, #44]	; (800f338 <prvInitialiseTaskLists+0x74>)
 800f30a:	f7fe fa6f 	bl	800d7ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f30e:	4b0b      	ldr	r3, [pc, #44]	; (800f33c <prvInitialiseTaskLists+0x78>)
 800f310:	4a05      	ldr	r2, [pc, #20]	; (800f328 <prvInitialiseTaskLists+0x64>)
 800f312:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f314:	4b0a      	ldr	r3, [pc, #40]	; (800f340 <prvInitialiseTaskLists+0x7c>)
 800f316:	4a05      	ldr	r2, [pc, #20]	; (800f32c <prvInitialiseTaskLists+0x68>)
 800f318:	601a      	str	r2, [r3, #0]
}
 800f31a:	bf00      	nop
 800f31c:	3708      	adds	r7, #8
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
 800f322:	bf00      	nop
 800f324:	20002dc4 	.word	0x20002dc4
 800f328:	20002e50 	.word	0x20002e50
 800f32c:	20002e64 	.word	0x20002e64
 800f330:	20002e80 	.word	0x20002e80
 800f334:	20002e94 	.word	0x20002e94
 800f338:	20002eac 	.word	0x20002eac
 800f33c:	20002e78 	.word	0x20002e78
 800f340:	20002e7c 	.word	0x20002e7c

0800f344 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b082      	sub	sp, #8
 800f348:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f34a:	e019      	b.n	800f380 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f34c:	f000 feae 	bl	80100ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800f350:	4b10      	ldr	r3, [pc, #64]	; (800f394 <prvCheckTasksWaitingTermination+0x50>)
 800f352:	68db      	ldr	r3, [r3, #12]
 800f354:	68db      	ldr	r3, [r3, #12]
 800f356:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	3304      	adds	r3, #4
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7fe facb 	bl	800d8f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f362:	4b0d      	ldr	r3, [pc, #52]	; (800f398 <prvCheckTasksWaitingTermination+0x54>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	3b01      	subs	r3, #1
 800f368:	4a0b      	ldr	r2, [pc, #44]	; (800f398 <prvCheckTasksWaitingTermination+0x54>)
 800f36a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f36c:	4b0b      	ldr	r3, [pc, #44]	; (800f39c <prvCheckTasksWaitingTermination+0x58>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	3b01      	subs	r3, #1
 800f372:	4a0a      	ldr	r2, [pc, #40]	; (800f39c <prvCheckTasksWaitingTermination+0x58>)
 800f374:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f376:	f000 fec9 	bl	801010c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f000 f810 	bl	800f3a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f380:	4b06      	ldr	r3, [pc, #24]	; (800f39c <prvCheckTasksWaitingTermination+0x58>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d1e1      	bne.n	800f34c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f388:	bf00      	nop
 800f38a:	bf00      	nop
 800f38c:	3708      	adds	r7, #8
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}
 800f392:	bf00      	nop
 800f394:	20002e94 	.word	0x20002e94
 800f398:	20002ec0 	.word	0x20002ec0
 800f39c:	20002ea8 	.word	0x20002ea8

0800f3a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b084      	sub	sp, #16
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	334c      	adds	r3, #76	; 0x4c
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f001 ffe9 	bl	8011384 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d108      	bne.n	800f3ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f001 f837 	bl	8010434 <vPortFree>
				vPortFree( pxTCB );
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f001 f834 	bl	8010434 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f3cc:	e018      	b.n	800f400 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800f3d4:	2b01      	cmp	r3, #1
 800f3d6:	d103      	bne.n	800f3e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f001 f82b 	bl	8010434 <vPortFree>
	}
 800f3de:	e00f      	b.n	800f400 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800f3e6:	2b02      	cmp	r3, #2
 800f3e8:	d00a      	beq.n	800f400 <prvDeleteTCB+0x60>
	__asm volatile
 800f3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ee:	f383 8811 	msr	BASEPRI, r3
 800f3f2:	f3bf 8f6f 	isb	sy
 800f3f6:	f3bf 8f4f 	dsb	sy
 800f3fa:	60fb      	str	r3, [r7, #12]
}
 800f3fc:	bf00      	nop
 800f3fe:	e7fe      	b.n	800f3fe <prvDeleteTCB+0x5e>
	}
 800f400:	bf00      	nop
 800f402:	3710      	adds	r7, #16
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f408:	b480      	push	{r7}
 800f40a:	b083      	sub	sp, #12
 800f40c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f40e:	4b0e      	ldr	r3, [pc, #56]	; (800f448 <prvResetNextTaskUnblockTime+0x40>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d101      	bne.n	800f41c <prvResetNextTaskUnblockTime+0x14>
 800f418:	2301      	movs	r3, #1
 800f41a:	e000      	b.n	800f41e <prvResetNextTaskUnblockTime+0x16>
 800f41c:	2300      	movs	r3, #0
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d004      	beq.n	800f42c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f422:	4b0a      	ldr	r3, [pc, #40]	; (800f44c <prvResetNextTaskUnblockTime+0x44>)
 800f424:	f04f 32ff 	mov.w	r2, #4294967295
 800f428:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f42a:	e008      	b.n	800f43e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f42c:	4b06      	ldr	r3, [pc, #24]	; (800f448 <prvResetNextTaskUnblockTime+0x40>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	68db      	ldr	r3, [r3, #12]
 800f432:	68db      	ldr	r3, [r3, #12]
 800f434:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	4a04      	ldr	r2, [pc, #16]	; (800f44c <prvResetNextTaskUnblockTime+0x44>)
 800f43c:	6013      	str	r3, [r2, #0]
}
 800f43e:	bf00      	nop
 800f440:	370c      	adds	r7, #12
 800f442:	46bd      	mov	sp, r7
 800f444:	bc80      	pop	{r7}
 800f446:	4770      	bx	lr
 800f448:	20002e78 	.word	0x20002e78
 800f44c:	20002ee0 	.word	0x20002ee0

0800f450 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f450:	b480      	push	{r7}
 800f452:	b083      	sub	sp, #12
 800f454:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f456:	4b0b      	ldr	r3, [pc, #44]	; (800f484 <xTaskGetSchedulerState+0x34>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d102      	bne.n	800f464 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f45e:	2301      	movs	r3, #1
 800f460:	607b      	str	r3, [r7, #4]
 800f462:	e008      	b.n	800f476 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f464:	4b08      	ldr	r3, [pc, #32]	; (800f488 <xTaskGetSchedulerState+0x38>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d102      	bne.n	800f472 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f46c:	2302      	movs	r3, #2
 800f46e:	607b      	str	r3, [r7, #4]
 800f470:	e001      	b.n	800f476 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f472:	2300      	movs	r3, #0
 800f474:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f476:	687b      	ldr	r3, [r7, #4]
	}
 800f478:	4618      	mov	r0, r3
 800f47a:	370c      	adds	r7, #12
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bc80      	pop	{r7}
 800f480:	4770      	bx	lr
 800f482:	bf00      	nop
 800f484:	20002ecc 	.word	0x20002ecc
 800f488:	20002ee8 	.word	0x20002ee8

0800f48c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b084      	sub	sp, #16
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f498:	2300      	movs	r3, #0
 800f49a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d06e      	beq.n	800f580 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4a6:	4b39      	ldr	r3, [pc, #228]	; (800f58c <xTaskPriorityInherit+0x100>)
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4ac:	429a      	cmp	r2, r3
 800f4ae:	d25e      	bcs.n	800f56e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	699b      	ldr	r3, [r3, #24]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	db06      	blt.n	800f4c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4b8:	4b34      	ldr	r3, [pc, #208]	; (800f58c <xTaskPriorityInherit+0x100>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4be:	f1c3 0207 	rsb	r2, r3, #7
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	6959      	ldr	r1, [r3, #20]
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4ce:	4613      	mov	r3, r2
 800f4d0:	009b      	lsls	r3, r3, #2
 800f4d2:	4413      	add	r3, r2
 800f4d4:	009b      	lsls	r3, r3, #2
 800f4d6:	4a2e      	ldr	r2, [pc, #184]	; (800f590 <xTaskPriorityInherit+0x104>)
 800f4d8:	4413      	add	r3, r2
 800f4da:	4299      	cmp	r1, r3
 800f4dc:	d101      	bne.n	800f4e2 <xTaskPriorityInherit+0x56>
 800f4de:	2301      	movs	r3, #1
 800f4e0:	e000      	b.n	800f4e4 <xTaskPriorityInherit+0x58>
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d03a      	beq.n	800f55e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	3304      	adds	r3, #4
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f7fe fa03 	bl	800d8f8 <uxListRemove>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d115      	bne.n	800f524 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4fc:	4924      	ldr	r1, [pc, #144]	; (800f590 <xTaskPriorityInherit+0x104>)
 800f4fe:	4613      	mov	r3, r2
 800f500:	009b      	lsls	r3, r3, #2
 800f502:	4413      	add	r3, r2
 800f504:	009b      	lsls	r3, r3, #2
 800f506:	440b      	add	r3, r1
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d10a      	bne.n	800f524 <xTaskPriorityInherit+0x98>
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f512:	2201      	movs	r2, #1
 800f514:	fa02 f303 	lsl.w	r3, r2, r3
 800f518:	43da      	mvns	r2, r3
 800f51a:	4b1e      	ldr	r3, [pc, #120]	; (800f594 <xTaskPriorityInherit+0x108>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	4013      	ands	r3, r2
 800f520:	4a1c      	ldr	r2, [pc, #112]	; (800f594 <xTaskPriorityInherit+0x108>)
 800f522:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f524:	4b19      	ldr	r3, [pc, #100]	; (800f58c <xTaskPriorityInherit+0x100>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f532:	2201      	movs	r2, #1
 800f534:	409a      	lsls	r2, r3
 800f536:	4b17      	ldr	r3, [pc, #92]	; (800f594 <xTaskPriorityInherit+0x108>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	4313      	orrs	r3, r2
 800f53c:	4a15      	ldr	r2, [pc, #84]	; (800f594 <xTaskPriorityInherit+0x108>)
 800f53e:	6013      	str	r3, [r2, #0]
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f544:	4613      	mov	r3, r2
 800f546:	009b      	lsls	r3, r3, #2
 800f548:	4413      	add	r3, r2
 800f54a:	009b      	lsls	r3, r3, #2
 800f54c:	4a10      	ldr	r2, [pc, #64]	; (800f590 <xTaskPriorityInherit+0x104>)
 800f54e:	441a      	add	r2, r3
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	3304      	adds	r3, #4
 800f554:	4619      	mov	r1, r3
 800f556:	4610      	mov	r0, r2
 800f558:	f7fe f973 	bl	800d842 <vListInsertEnd>
 800f55c:	e004      	b.n	800f568 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f55e:	4b0b      	ldr	r3, [pc, #44]	; (800f58c <xTaskPriorityInherit+0x100>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f568:	2301      	movs	r3, #1
 800f56a:	60fb      	str	r3, [r7, #12]
 800f56c:	e008      	b.n	800f580 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f572:	4b06      	ldr	r3, [pc, #24]	; (800f58c <xTaskPriorityInherit+0x100>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f578:	429a      	cmp	r2, r3
 800f57a:	d201      	bcs.n	800f580 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f57c:	2301      	movs	r3, #1
 800f57e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f580:	68fb      	ldr	r3, [r7, #12]
	}
 800f582:	4618      	mov	r0, r3
 800f584:	3710      	adds	r7, #16
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}
 800f58a:	bf00      	nop
 800f58c:	20002dc0 	.word	0x20002dc0
 800f590:	20002dc4 	.word	0x20002dc4
 800f594:	20002ec8 	.word	0x20002ec8

0800f598 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b086      	sub	sp, #24
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d06e      	beq.n	800f68c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f5ae:	4b3a      	ldr	r3, [pc, #232]	; (800f698 <xTaskPriorityDisinherit+0x100>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	693a      	ldr	r2, [r7, #16]
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d00a      	beq.n	800f5ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5bc:	f383 8811 	msr	BASEPRI, r3
 800f5c0:	f3bf 8f6f 	isb	sy
 800f5c4:	f3bf 8f4f 	dsb	sy
 800f5c8:	60fb      	str	r3, [r7, #12]
}
 800f5ca:	bf00      	nop
 800f5cc:	e7fe      	b.n	800f5cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f5ce:	693b      	ldr	r3, [r7, #16]
 800f5d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d10a      	bne.n	800f5ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5da:	f383 8811 	msr	BASEPRI, r3
 800f5de:	f3bf 8f6f 	isb	sy
 800f5e2:	f3bf 8f4f 	dsb	sy
 800f5e6:	60bb      	str	r3, [r7, #8]
}
 800f5e8:	bf00      	nop
 800f5ea:	e7fe      	b.n	800f5ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f5ec:	693b      	ldr	r3, [r7, #16]
 800f5ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f5f0:	1e5a      	subs	r2, r3, #1
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f5f6:	693b      	ldr	r3, [r7, #16]
 800f5f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d044      	beq.n	800f68c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f606:	2b00      	cmp	r3, #0
 800f608:	d140      	bne.n	800f68c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	3304      	adds	r3, #4
 800f60e:	4618      	mov	r0, r3
 800f610:	f7fe f972 	bl	800d8f8 <uxListRemove>
 800f614:	4603      	mov	r3, r0
 800f616:	2b00      	cmp	r3, #0
 800f618:	d115      	bne.n	800f646 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f61e:	491f      	ldr	r1, [pc, #124]	; (800f69c <xTaskPriorityDisinherit+0x104>)
 800f620:	4613      	mov	r3, r2
 800f622:	009b      	lsls	r3, r3, #2
 800f624:	4413      	add	r3, r2
 800f626:	009b      	lsls	r3, r3, #2
 800f628:	440b      	add	r3, r1
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d10a      	bne.n	800f646 <xTaskPriorityDisinherit+0xae>
 800f630:	693b      	ldr	r3, [r7, #16]
 800f632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f634:	2201      	movs	r2, #1
 800f636:	fa02 f303 	lsl.w	r3, r2, r3
 800f63a:	43da      	mvns	r2, r3
 800f63c:	4b18      	ldr	r3, [pc, #96]	; (800f6a0 <xTaskPriorityDisinherit+0x108>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	4013      	ands	r3, r2
 800f642:	4a17      	ldr	r2, [pc, #92]	; (800f6a0 <xTaskPriorityDisinherit+0x108>)
 800f644:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f64a:	693b      	ldr	r3, [r7, #16]
 800f64c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f64e:	693b      	ldr	r3, [r7, #16]
 800f650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f652:	f1c3 0207 	rsb	r2, r3, #7
 800f656:	693b      	ldr	r3, [r7, #16]
 800f658:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f65e:	2201      	movs	r2, #1
 800f660:	409a      	lsls	r2, r3
 800f662:	4b0f      	ldr	r3, [pc, #60]	; (800f6a0 <xTaskPriorityDisinherit+0x108>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	4313      	orrs	r3, r2
 800f668:	4a0d      	ldr	r2, [pc, #52]	; (800f6a0 <xTaskPriorityDisinherit+0x108>)
 800f66a:	6013      	str	r3, [r2, #0]
 800f66c:	693b      	ldr	r3, [r7, #16]
 800f66e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f670:	4613      	mov	r3, r2
 800f672:	009b      	lsls	r3, r3, #2
 800f674:	4413      	add	r3, r2
 800f676:	009b      	lsls	r3, r3, #2
 800f678:	4a08      	ldr	r2, [pc, #32]	; (800f69c <xTaskPriorityDisinherit+0x104>)
 800f67a:	441a      	add	r2, r3
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	3304      	adds	r3, #4
 800f680:	4619      	mov	r1, r3
 800f682:	4610      	mov	r0, r2
 800f684:	f7fe f8dd 	bl	800d842 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f688:	2301      	movs	r3, #1
 800f68a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f68c:	697b      	ldr	r3, [r7, #20]
	}
 800f68e:	4618      	mov	r0, r3
 800f690:	3718      	adds	r7, #24
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
 800f696:	bf00      	nop
 800f698:	20002dc0 	.word	0x20002dc0
 800f69c:	20002dc4 	.word	0x20002dc4
 800f6a0:	20002ec8 	.word	0x20002ec8

0800f6a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b088      	sub	sp, #32
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	f000 8088 	beq.w	800f7ce <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f6be:	69bb      	ldr	r3, [r7, #24]
 800f6c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d10a      	bne.n	800f6dc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800f6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ca:	f383 8811 	msr	BASEPRI, r3
 800f6ce:	f3bf 8f6f 	isb	sy
 800f6d2:	f3bf 8f4f 	dsb	sy
 800f6d6:	60fb      	str	r3, [r7, #12]
}
 800f6d8:	bf00      	nop
 800f6da:	e7fe      	b.n	800f6da <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6e0:	683a      	ldr	r2, [r7, #0]
 800f6e2:	429a      	cmp	r2, r3
 800f6e4:	d902      	bls.n	800f6ec <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	61fb      	str	r3, [r7, #28]
 800f6ea:	e002      	b.n	800f6f2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f6ec:	69bb      	ldr	r3, [r7, #24]
 800f6ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6f0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f6f2:	69bb      	ldr	r3, [r7, #24]
 800f6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6f6:	69fa      	ldr	r2, [r7, #28]
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d068      	beq.n	800f7ce <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f6fc:	69bb      	ldr	r3, [r7, #24]
 800f6fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f700:	697a      	ldr	r2, [r7, #20]
 800f702:	429a      	cmp	r2, r3
 800f704:	d163      	bne.n	800f7ce <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f706:	4b34      	ldr	r3, [pc, #208]	; (800f7d8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	69ba      	ldr	r2, [r7, #24]
 800f70c:	429a      	cmp	r2, r3
 800f70e:	d10a      	bne.n	800f726 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800f710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f714:	f383 8811 	msr	BASEPRI, r3
 800f718:	f3bf 8f6f 	isb	sy
 800f71c:	f3bf 8f4f 	dsb	sy
 800f720:	60bb      	str	r3, [r7, #8]
}
 800f722:	bf00      	nop
 800f724:	e7fe      	b.n	800f724 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f726:	69bb      	ldr	r3, [r7, #24]
 800f728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f72a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f72c:	69bb      	ldr	r3, [r7, #24]
 800f72e:	69fa      	ldr	r2, [r7, #28]
 800f730:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f732:	69bb      	ldr	r3, [r7, #24]
 800f734:	699b      	ldr	r3, [r3, #24]
 800f736:	2b00      	cmp	r3, #0
 800f738:	db04      	blt.n	800f744 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f73a:	69fb      	ldr	r3, [r7, #28]
 800f73c:	f1c3 0207 	rsb	r2, r3, #7
 800f740:	69bb      	ldr	r3, [r7, #24]
 800f742:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f744:	69bb      	ldr	r3, [r7, #24]
 800f746:	6959      	ldr	r1, [r3, #20]
 800f748:	693a      	ldr	r2, [r7, #16]
 800f74a:	4613      	mov	r3, r2
 800f74c:	009b      	lsls	r3, r3, #2
 800f74e:	4413      	add	r3, r2
 800f750:	009b      	lsls	r3, r3, #2
 800f752:	4a22      	ldr	r2, [pc, #136]	; (800f7dc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f754:	4413      	add	r3, r2
 800f756:	4299      	cmp	r1, r3
 800f758:	d101      	bne.n	800f75e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800f75a:	2301      	movs	r3, #1
 800f75c:	e000      	b.n	800f760 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800f75e:	2300      	movs	r3, #0
 800f760:	2b00      	cmp	r3, #0
 800f762:	d034      	beq.n	800f7ce <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f764:	69bb      	ldr	r3, [r7, #24]
 800f766:	3304      	adds	r3, #4
 800f768:	4618      	mov	r0, r3
 800f76a:	f7fe f8c5 	bl	800d8f8 <uxListRemove>
 800f76e:	4603      	mov	r3, r0
 800f770:	2b00      	cmp	r3, #0
 800f772:	d115      	bne.n	800f7a0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f774:	69bb      	ldr	r3, [r7, #24]
 800f776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f778:	4918      	ldr	r1, [pc, #96]	; (800f7dc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f77a:	4613      	mov	r3, r2
 800f77c:	009b      	lsls	r3, r3, #2
 800f77e:	4413      	add	r3, r2
 800f780:	009b      	lsls	r3, r3, #2
 800f782:	440b      	add	r3, r1
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d10a      	bne.n	800f7a0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800f78a:	69bb      	ldr	r3, [r7, #24]
 800f78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f78e:	2201      	movs	r2, #1
 800f790:	fa02 f303 	lsl.w	r3, r2, r3
 800f794:	43da      	mvns	r2, r3
 800f796:	4b12      	ldr	r3, [pc, #72]	; (800f7e0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	4013      	ands	r3, r2
 800f79c:	4a10      	ldr	r2, [pc, #64]	; (800f7e0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f79e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f7a0:	69bb      	ldr	r3, [r7, #24]
 800f7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7a4:	2201      	movs	r2, #1
 800f7a6:	409a      	lsls	r2, r3
 800f7a8:	4b0d      	ldr	r3, [pc, #52]	; (800f7e0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	4313      	orrs	r3, r2
 800f7ae:	4a0c      	ldr	r2, [pc, #48]	; (800f7e0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f7b0:	6013      	str	r3, [r2, #0]
 800f7b2:	69bb      	ldr	r3, [r7, #24]
 800f7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7b6:	4613      	mov	r3, r2
 800f7b8:	009b      	lsls	r3, r3, #2
 800f7ba:	4413      	add	r3, r2
 800f7bc:	009b      	lsls	r3, r3, #2
 800f7be:	4a07      	ldr	r2, [pc, #28]	; (800f7dc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f7c0:	441a      	add	r2, r3
 800f7c2:	69bb      	ldr	r3, [r7, #24]
 800f7c4:	3304      	adds	r3, #4
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	4610      	mov	r0, r2
 800f7ca:	f7fe f83a 	bl	800d842 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f7ce:	bf00      	nop
 800f7d0:	3720      	adds	r7, #32
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}
 800f7d6:	bf00      	nop
 800f7d8:	20002dc0 	.word	0x20002dc0
 800f7dc:	20002dc4 	.word	0x20002dc4
 800f7e0:	20002ec8 	.word	0x20002ec8

0800f7e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800f7e4:	b480      	push	{r7}
 800f7e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f7e8:	4b07      	ldr	r3, [pc, #28]	; (800f808 <pvTaskIncrementMutexHeldCount+0x24>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d004      	beq.n	800f7fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f7f0:	4b05      	ldr	r3, [pc, #20]	; (800f808 <pvTaskIncrementMutexHeldCount+0x24>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f7f6:	3201      	adds	r2, #1
 800f7f8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800f7fa:	4b03      	ldr	r3, [pc, #12]	; (800f808 <pvTaskIncrementMutexHeldCount+0x24>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
	}
 800f7fe:	4618      	mov	r0, r3
 800f800:	46bd      	mov	sp, r7
 800f802:	bc80      	pop	{r7}
 800f804:	4770      	bx	lr
 800f806:	bf00      	nop
 800f808:	20002dc0 	.word	0x20002dc0

0800f80c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b084      	sub	sp, #16
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
 800f814:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f816:	4b29      	ldr	r3, [pc, #164]	; (800f8bc <prvAddCurrentTaskToDelayedList+0xb0>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f81c:	4b28      	ldr	r3, [pc, #160]	; (800f8c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	3304      	adds	r3, #4
 800f822:	4618      	mov	r0, r3
 800f824:	f7fe f868 	bl	800d8f8 <uxListRemove>
 800f828:	4603      	mov	r3, r0
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d10b      	bne.n	800f846 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800f82e:	4b24      	ldr	r3, [pc, #144]	; (800f8c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f834:	2201      	movs	r2, #1
 800f836:	fa02 f303 	lsl.w	r3, r2, r3
 800f83a:	43da      	mvns	r2, r3
 800f83c:	4b21      	ldr	r3, [pc, #132]	; (800f8c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	4013      	ands	r3, r2
 800f842:	4a20      	ldr	r2, [pc, #128]	; (800f8c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f844:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f84c:	d10a      	bne.n	800f864 <prvAddCurrentTaskToDelayedList+0x58>
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d007      	beq.n	800f864 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f854:	4b1a      	ldr	r3, [pc, #104]	; (800f8c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	3304      	adds	r3, #4
 800f85a:	4619      	mov	r1, r3
 800f85c:	481a      	ldr	r0, [pc, #104]	; (800f8c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f85e:	f7fd fff0 	bl	800d842 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f862:	e026      	b.n	800f8b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f864:	68fa      	ldr	r2, [r7, #12]
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	4413      	add	r3, r2
 800f86a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f86c:	4b14      	ldr	r3, [pc, #80]	; (800f8c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	68ba      	ldr	r2, [r7, #8]
 800f872:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f874:	68ba      	ldr	r2, [r7, #8]
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	429a      	cmp	r2, r3
 800f87a:	d209      	bcs.n	800f890 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f87c:	4b13      	ldr	r3, [pc, #76]	; (800f8cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800f87e:	681a      	ldr	r2, [r3, #0]
 800f880:	4b0f      	ldr	r3, [pc, #60]	; (800f8c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	3304      	adds	r3, #4
 800f886:	4619      	mov	r1, r3
 800f888:	4610      	mov	r0, r2
 800f88a:	f7fd fffd 	bl	800d888 <vListInsert>
}
 800f88e:	e010      	b.n	800f8b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f890:	4b0f      	ldr	r3, [pc, #60]	; (800f8d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f892:	681a      	ldr	r2, [r3, #0]
 800f894:	4b0a      	ldr	r3, [pc, #40]	; (800f8c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	3304      	adds	r3, #4
 800f89a:	4619      	mov	r1, r3
 800f89c:	4610      	mov	r0, r2
 800f89e:	f7fd fff3 	bl	800d888 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f8a2:	4b0c      	ldr	r3, [pc, #48]	; (800f8d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	68ba      	ldr	r2, [r7, #8]
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	d202      	bcs.n	800f8b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f8ac:	4a09      	ldr	r2, [pc, #36]	; (800f8d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	6013      	str	r3, [r2, #0]
}
 800f8b2:	bf00      	nop
 800f8b4:	3710      	adds	r7, #16
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}
 800f8ba:	bf00      	nop
 800f8bc:	20002ec4 	.word	0x20002ec4
 800f8c0:	20002dc0 	.word	0x20002dc0
 800f8c4:	20002ec8 	.word	0x20002ec8
 800f8c8:	20002eac 	.word	0x20002eac
 800f8cc:	20002e7c 	.word	0x20002e7c
 800f8d0:	20002e78 	.word	0x20002e78
 800f8d4:	20002ee0 	.word	0x20002ee0

0800f8d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b08a      	sub	sp, #40	; 0x28
 800f8dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f8e2:	f000 fab1 	bl	800fe48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f8e6:	4b1c      	ldr	r3, [pc, #112]	; (800f958 <xTimerCreateTimerTask+0x80>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d021      	beq.n	800f932 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f8f6:	1d3a      	adds	r2, r7, #4
 800f8f8:	f107 0108 	add.w	r1, r7, #8
 800f8fc:	f107 030c 	add.w	r3, r7, #12
 800f900:	4618      	mov	r0, r3
 800f902:	f7f3 f825 	bl	8002950 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f906:	6879      	ldr	r1, [r7, #4]
 800f908:	68bb      	ldr	r3, [r7, #8]
 800f90a:	68fa      	ldr	r2, [r7, #12]
 800f90c:	9202      	str	r2, [sp, #8]
 800f90e:	9301      	str	r3, [sp, #4]
 800f910:	2302      	movs	r3, #2
 800f912:	9300      	str	r3, [sp, #0]
 800f914:	2300      	movs	r3, #0
 800f916:	460a      	mov	r2, r1
 800f918:	4910      	ldr	r1, [pc, #64]	; (800f95c <xTimerCreateTimerTask+0x84>)
 800f91a:	4811      	ldr	r0, [pc, #68]	; (800f960 <xTimerCreateTimerTask+0x88>)
 800f91c:	f7fe ff66 	bl	800e7ec <xTaskCreateStatic>
 800f920:	4603      	mov	r3, r0
 800f922:	4a10      	ldr	r2, [pc, #64]	; (800f964 <xTimerCreateTimerTask+0x8c>)
 800f924:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f926:	4b0f      	ldr	r3, [pc, #60]	; (800f964 <xTimerCreateTimerTask+0x8c>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d001      	beq.n	800f932 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f92e:	2301      	movs	r3, #1
 800f930:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d10a      	bne.n	800f94e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f93c:	f383 8811 	msr	BASEPRI, r3
 800f940:	f3bf 8f6f 	isb	sy
 800f944:	f3bf 8f4f 	dsb	sy
 800f948:	613b      	str	r3, [r7, #16]
}
 800f94a:	bf00      	nop
 800f94c:	e7fe      	b.n	800f94c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f94e:	697b      	ldr	r3, [r7, #20]
}
 800f950:	4618      	mov	r0, r3
 800f952:	3718      	adds	r7, #24
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}
 800f958:	20002f1c 	.word	0x20002f1c
 800f95c:	08015330 	.word	0x08015330
 800f960:	0800fa85 	.word	0x0800fa85
 800f964:	20002f20 	.word	0x20002f20

0800f968 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b08a      	sub	sp, #40	; 0x28
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	60f8      	str	r0, [r7, #12]
 800f970:	60b9      	str	r1, [r7, #8]
 800f972:	607a      	str	r2, [r7, #4]
 800f974:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f976:	2300      	movs	r3, #0
 800f978:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d10a      	bne.n	800f996 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f984:	f383 8811 	msr	BASEPRI, r3
 800f988:	f3bf 8f6f 	isb	sy
 800f98c:	f3bf 8f4f 	dsb	sy
 800f990:	623b      	str	r3, [r7, #32]
}
 800f992:	bf00      	nop
 800f994:	e7fe      	b.n	800f994 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f996:	4b1a      	ldr	r3, [pc, #104]	; (800fa00 <xTimerGenericCommand+0x98>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d02a      	beq.n	800f9f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	2b05      	cmp	r3, #5
 800f9ae:	dc18      	bgt.n	800f9e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f9b0:	f7ff fd4e 	bl	800f450 <xTaskGetSchedulerState>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	2b02      	cmp	r3, #2
 800f9b8:	d109      	bne.n	800f9ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f9ba:	4b11      	ldr	r3, [pc, #68]	; (800fa00 <xTimerGenericCommand+0x98>)
 800f9bc:	6818      	ldr	r0, [r3, #0]
 800f9be:	f107 0114 	add.w	r1, r7, #20
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9c6:	f7fe f8fd 	bl	800dbc4 <xQueueGenericSend>
 800f9ca:	6278      	str	r0, [r7, #36]	; 0x24
 800f9cc:	e012      	b.n	800f9f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f9ce:	4b0c      	ldr	r3, [pc, #48]	; (800fa00 <xTimerGenericCommand+0x98>)
 800f9d0:	6818      	ldr	r0, [r3, #0]
 800f9d2:	f107 0114 	add.w	r1, r7, #20
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	2200      	movs	r2, #0
 800f9da:	f7fe f8f3 	bl	800dbc4 <xQueueGenericSend>
 800f9de:	6278      	str	r0, [r7, #36]	; 0x24
 800f9e0:	e008      	b.n	800f9f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f9e2:	4b07      	ldr	r3, [pc, #28]	; (800fa00 <xTimerGenericCommand+0x98>)
 800f9e4:	6818      	ldr	r0, [r3, #0]
 800f9e6:	f107 0114 	add.w	r1, r7, #20
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	683a      	ldr	r2, [r7, #0]
 800f9ee:	f7fe f9e7 	bl	800ddc0 <xQueueGenericSendFromISR>
 800f9f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3728      	adds	r7, #40	; 0x28
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}
 800f9fe:	bf00      	nop
 800fa00:	20002f1c 	.word	0x20002f1c

0800fa04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b088      	sub	sp, #32
 800fa08:	af02      	add	r7, sp, #8
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fa0e:	4b1c      	ldr	r3, [pc, #112]	; (800fa80 <prvProcessExpiredTimer+0x7c>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	68db      	ldr	r3, [r3, #12]
 800fa14:	68db      	ldr	r3, [r3, #12]
 800fa16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	3304      	adds	r3, #4
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f7fd ff6b 	bl	800d8f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fa22:	697b      	ldr	r3, [r7, #20]
 800fa24:	69db      	ldr	r3, [r3, #28]
 800fa26:	2b01      	cmp	r3, #1
 800fa28:	d122      	bne.n	800fa70 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	699a      	ldr	r2, [r3, #24]
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	18d1      	adds	r1, r2, r3
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	683a      	ldr	r2, [r7, #0]
 800fa36:	6978      	ldr	r0, [r7, #20]
 800fa38:	f000 f8c8 	bl	800fbcc <prvInsertTimerInActiveList>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d016      	beq.n	800fa70 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fa42:	2300      	movs	r3, #0
 800fa44:	9300      	str	r3, [sp, #0]
 800fa46:	2300      	movs	r3, #0
 800fa48:	687a      	ldr	r2, [r7, #4]
 800fa4a:	2100      	movs	r1, #0
 800fa4c:	6978      	ldr	r0, [r7, #20]
 800fa4e:	f7ff ff8b 	bl	800f968 <xTimerGenericCommand>
 800fa52:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d10a      	bne.n	800fa70 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800fa5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa5e:	f383 8811 	msr	BASEPRI, r3
 800fa62:	f3bf 8f6f 	isb	sy
 800fa66:	f3bf 8f4f 	dsb	sy
 800fa6a:	60fb      	str	r3, [r7, #12]
}
 800fa6c:	bf00      	nop
 800fa6e:	e7fe      	b.n	800fa6e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa74:	6978      	ldr	r0, [r7, #20]
 800fa76:	4798      	blx	r3
}
 800fa78:	bf00      	nop
 800fa7a:	3718      	adds	r7, #24
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}
 800fa80:	20002f14 	.word	0x20002f14

0800fa84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b084      	sub	sp, #16
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fa8c:	f107 0308 	add.w	r3, r7, #8
 800fa90:	4618      	mov	r0, r3
 800fa92:	f000 f857 	bl	800fb44 <prvGetNextExpireTime>
 800fa96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	4619      	mov	r1, r3
 800fa9c:	68f8      	ldr	r0, [r7, #12]
 800fa9e:	f000 f803 	bl	800faa8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800faa2:	f000 f8d5 	bl	800fc50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800faa6:	e7f1      	b.n	800fa8c <prvTimerTask+0x8>

0800faa8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b084      	sub	sp, #16
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fab2:	f7ff f8e1 	bl	800ec78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fab6:	f107 0308 	add.w	r3, r7, #8
 800faba:	4618      	mov	r0, r3
 800fabc:	f000 f866 	bl	800fb8c <prvSampleTimeNow>
 800fac0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d130      	bne.n	800fb2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d10a      	bne.n	800fae4 <prvProcessTimerOrBlockTask+0x3c>
 800face:	687a      	ldr	r2, [r7, #4]
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	429a      	cmp	r2, r3
 800fad4:	d806      	bhi.n	800fae4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fad6:	f7ff f8dd 	bl	800ec94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fada:	68f9      	ldr	r1, [r7, #12]
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f7ff ff91 	bl	800fa04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fae2:	e024      	b.n	800fb2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d008      	beq.n	800fafc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800faea:	4b13      	ldr	r3, [pc, #76]	; (800fb38 <prvProcessTimerOrBlockTask+0x90>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	bf0c      	ite	eq
 800faf4:	2301      	moveq	r3, #1
 800faf6:	2300      	movne	r3, #0
 800faf8:	b2db      	uxtb	r3, r3
 800fafa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fafc:	4b0f      	ldr	r3, [pc, #60]	; (800fb3c <prvProcessTimerOrBlockTask+0x94>)
 800fafe:	6818      	ldr	r0, [r3, #0]
 800fb00:	687a      	ldr	r2, [r7, #4]
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	1ad3      	subs	r3, r2, r3
 800fb06:	683a      	ldr	r2, [r7, #0]
 800fb08:	4619      	mov	r1, r3
 800fb0a:	f7fe fe3b 	bl	800e784 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fb0e:	f7ff f8c1 	bl	800ec94 <xTaskResumeAll>
 800fb12:	4603      	mov	r3, r0
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d10a      	bne.n	800fb2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fb18:	4b09      	ldr	r3, [pc, #36]	; (800fb40 <prvProcessTimerOrBlockTask+0x98>)
 800fb1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb1e:	601a      	str	r2, [r3, #0]
 800fb20:	f3bf 8f4f 	dsb	sy
 800fb24:	f3bf 8f6f 	isb	sy
}
 800fb28:	e001      	b.n	800fb2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fb2a:	f7ff f8b3 	bl	800ec94 <xTaskResumeAll>
}
 800fb2e:	bf00      	nop
 800fb30:	3710      	adds	r7, #16
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}
 800fb36:	bf00      	nop
 800fb38:	20002f18 	.word	0x20002f18
 800fb3c:	20002f1c 	.word	0x20002f1c
 800fb40:	e000ed04 	.word	0xe000ed04

0800fb44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fb44:	b480      	push	{r7}
 800fb46:	b085      	sub	sp, #20
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fb4c:	4b0e      	ldr	r3, [pc, #56]	; (800fb88 <prvGetNextExpireTime+0x44>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	bf0c      	ite	eq
 800fb56:	2301      	moveq	r3, #1
 800fb58:	2300      	movne	r3, #0
 800fb5a:	b2db      	uxtb	r3, r3
 800fb5c:	461a      	mov	r2, r3
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d105      	bne.n	800fb76 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fb6a:	4b07      	ldr	r3, [pc, #28]	; (800fb88 <prvGetNextExpireTime+0x44>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	68db      	ldr	r3, [r3, #12]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	60fb      	str	r3, [r7, #12]
 800fb74:	e001      	b.n	800fb7a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fb76:	2300      	movs	r3, #0
 800fb78:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3714      	adds	r7, #20
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bc80      	pop	{r7}
 800fb84:	4770      	bx	lr
 800fb86:	bf00      	nop
 800fb88:	20002f14 	.word	0x20002f14

0800fb8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b084      	sub	sp, #16
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fb94:	f7ff f91a 	bl	800edcc <xTaskGetTickCount>
 800fb98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fb9a:	4b0b      	ldr	r3, [pc, #44]	; (800fbc8 <prvSampleTimeNow+0x3c>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	68fa      	ldr	r2, [r7, #12]
 800fba0:	429a      	cmp	r2, r3
 800fba2:	d205      	bcs.n	800fbb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fba4:	f000 f8ee 	bl	800fd84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	2201      	movs	r2, #1
 800fbac:	601a      	str	r2, [r3, #0]
 800fbae:	e002      	b.n	800fbb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fbb6:	4a04      	ldr	r2, [pc, #16]	; (800fbc8 <prvSampleTimeNow+0x3c>)
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fbbc:	68fb      	ldr	r3, [r7, #12]
}
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	3710      	adds	r7, #16
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}
 800fbc6:	bf00      	nop
 800fbc8:	20002f24 	.word	0x20002f24

0800fbcc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b086      	sub	sp, #24
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	60f8      	str	r0, [r7, #12]
 800fbd4:	60b9      	str	r1, [r7, #8]
 800fbd6:	607a      	str	r2, [r7, #4]
 800fbd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	68ba      	ldr	r2, [r7, #8]
 800fbe2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	68fa      	ldr	r2, [r7, #12]
 800fbe8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fbea:	68ba      	ldr	r2, [r7, #8]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	429a      	cmp	r2, r3
 800fbf0:	d812      	bhi.n	800fc18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fbf2:	687a      	ldr	r2, [r7, #4]
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	1ad2      	subs	r2, r2, r3
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	699b      	ldr	r3, [r3, #24]
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	d302      	bcc.n	800fc06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fc00:	2301      	movs	r3, #1
 800fc02:	617b      	str	r3, [r7, #20]
 800fc04:	e01b      	b.n	800fc3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fc06:	4b10      	ldr	r3, [pc, #64]	; (800fc48 <prvInsertTimerInActiveList+0x7c>)
 800fc08:	681a      	ldr	r2, [r3, #0]
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	3304      	adds	r3, #4
 800fc0e:	4619      	mov	r1, r3
 800fc10:	4610      	mov	r0, r2
 800fc12:	f7fd fe39 	bl	800d888 <vListInsert>
 800fc16:	e012      	b.n	800fc3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fc18:	687a      	ldr	r2, [r7, #4]
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	429a      	cmp	r2, r3
 800fc1e:	d206      	bcs.n	800fc2e <prvInsertTimerInActiveList+0x62>
 800fc20:	68ba      	ldr	r2, [r7, #8]
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	429a      	cmp	r2, r3
 800fc26:	d302      	bcc.n	800fc2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fc28:	2301      	movs	r3, #1
 800fc2a:	617b      	str	r3, [r7, #20]
 800fc2c:	e007      	b.n	800fc3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fc2e:	4b07      	ldr	r3, [pc, #28]	; (800fc4c <prvInsertTimerInActiveList+0x80>)
 800fc30:	681a      	ldr	r2, [r3, #0]
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	3304      	adds	r3, #4
 800fc36:	4619      	mov	r1, r3
 800fc38:	4610      	mov	r0, r2
 800fc3a:	f7fd fe25 	bl	800d888 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fc3e:	697b      	ldr	r3, [r7, #20]
}
 800fc40:	4618      	mov	r0, r3
 800fc42:	3718      	adds	r7, #24
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}
 800fc48:	20002f18 	.word	0x20002f18
 800fc4c:	20002f14 	.word	0x20002f14

0800fc50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b08c      	sub	sp, #48	; 0x30
 800fc54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fc56:	e081      	b.n	800fd5c <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	db7d      	blt.n	800fd5a <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fc5e:	693b      	ldr	r3, [r7, #16]
 800fc60:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc64:	695b      	ldr	r3, [r3, #20]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d004      	beq.n	800fc74 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc6c:	3304      	adds	r3, #4
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7fd fe42 	bl	800d8f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fc74:	1d3b      	adds	r3, r7, #4
 800fc76:	4618      	mov	r0, r3
 800fc78:	f7ff ff88 	bl	800fb8c <prvSampleTimeNow>
 800fc7c:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	2b09      	cmp	r3, #9
 800fc82:	d86b      	bhi.n	800fd5c <prvProcessReceivedCommands+0x10c>
 800fc84:	a201      	add	r2, pc, #4	; (adr r2, 800fc8c <prvProcessReceivedCommands+0x3c>)
 800fc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc8a:	bf00      	nop
 800fc8c:	0800fcb5 	.word	0x0800fcb5
 800fc90:	0800fcb5 	.word	0x0800fcb5
 800fc94:	0800fcb5 	.word	0x0800fcb5
 800fc98:	0800fd5d 	.word	0x0800fd5d
 800fc9c:	0800fd11 	.word	0x0800fd11
 800fca0:	0800fd49 	.word	0x0800fd49
 800fca4:	0800fcb5 	.word	0x0800fcb5
 800fca8:	0800fcb5 	.word	0x0800fcb5
 800fcac:	0800fd5d 	.word	0x0800fd5d
 800fcb0:	0800fd11 	.word	0x0800fd11
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fcb4:	68fa      	ldr	r2, [r7, #12]
 800fcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb8:	699b      	ldr	r3, [r3, #24]
 800fcba:	18d1      	adds	r1, r2, r3
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	6a3a      	ldr	r2, [r7, #32]
 800fcc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fcc2:	f7ff ff83 	bl	800fbcc <prvInsertTimerInActiveList>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d047      	beq.n	800fd5c <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fcd2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd6:	69db      	ldr	r3, [r3, #28]
 800fcd8:	2b01      	cmp	r3, #1
 800fcda:	d13f      	bne.n	800fd5c <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fcdc:	68fa      	ldr	r2, [r7, #12]
 800fcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce0:	699b      	ldr	r3, [r3, #24]
 800fce2:	441a      	add	r2, r3
 800fce4:	2300      	movs	r3, #0
 800fce6:	9300      	str	r3, [sp, #0]
 800fce8:	2300      	movs	r3, #0
 800fcea:	2100      	movs	r1, #0
 800fcec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fcee:	f7ff fe3b 	bl	800f968 <xTimerGenericCommand>
 800fcf2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800fcf4:	69fb      	ldr	r3, [r7, #28]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d130      	bne.n	800fd5c <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800fcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcfe:	f383 8811 	msr	BASEPRI, r3
 800fd02:	f3bf 8f6f 	isb	sy
 800fd06:	f3bf 8f4f 	dsb	sy
 800fd0a:	61bb      	str	r3, [r7, #24]
}
 800fd0c:	bf00      	nop
 800fd0e:	e7fe      	b.n	800fd0e <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fd10:	68fa      	ldr	r2, [r7, #12]
 800fd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd14:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd18:	699b      	ldr	r3, [r3, #24]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d10a      	bne.n	800fd34 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800fd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd22:	f383 8811 	msr	BASEPRI, r3
 800fd26:	f3bf 8f6f 	isb	sy
 800fd2a:	f3bf 8f4f 	dsb	sy
 800fd2e:	617b      	str	r3, [r7, #20]
}
 800fd30:	bf00      	nop
 800fd32:	e7fe      	b.n	800fd32 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd36:	699a      	ldr	r2, [r3, #24]
 800fd38:	6a3b      	ldr	r3, [r7, #32]
 800fd3a:	18d1      	adds	r1, r2, r3
 800fd3c:	6a3b      	ldr	r3, [r7, #32]
 800fd3e:	6a3a      	ldr	r2, [r7, #32]
 800fd40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd42:	f7ff ff43 	bl	800fbcc <prvInsertTimerInActiveList>
					break;
 800fd46:	e009      	b.n	800fd5c <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800fd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d104      	bne.n	800fd5c <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800fd52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd54:	f000 fb6e 	bl	8010434 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fd58:	e000      	b.n	800fd5c <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800fd5a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fd5c:	4b08      	ldr	r3, [pc, #32]	; (800fd80 <prvProcessReceivedCommands+0x130>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f107 0108 	add.w	r1, r7, #8
 800fd64:	2200      	movs	r2, #0
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7fe f950 	bl	800e00c <xQueueReceive>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	f47f af72 	bne.w	800fc58 <prvProcessReceivedCommands+0x8>
	}
}
 800fd74:	bf00      	nop
 800fd76:	bf00      	nop
 800fd78:	3728      	adds	r7, #40	; 0x28
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}
 800fd7e:	bf00      	nop
 800fd80:	20002f1c 	.word	0x20002f1c

0800fd84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b088      	sub	sp, #32
 800fd88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fd8a:	e045      	b.n	800fe18 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fd8c:	4b2c      	ldr	r3, [pc, #176]	; (800fe40 <prvSwitchTimerLists+0xbc>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	68db      	ldr	r3, [r3, #12]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fd96:	4b2a      	ldr	r3, [pc, #168]	; (800fe40 <prvSwitchTimerLists+0xbc>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	68db      	ldr	r3, [r3, #12]
 800fd9c:	68db      	ldr	r3, [r3, #12]
 800fd9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	3304      	adds	r3, #4
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7fd fda7 	bl	800d8f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdae:	68f8      	ldr	r0, [r7, #12]
 800fdb0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	69db      	ldr	r3, [r3, #28]
 800fdb6:	2b01      	cmp	r3, #1
 800fdb8:	d12e      	bne.n	800fe18 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	699b      	ldr	r3, [r3, #24]
 800fdbe:	693a      	ldr	r2, [r7, #16]
 800fdc0:	4413      	add	r3, r2
 800fdc2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fdc4:	68ba      	ldr	r2, [r7, #8]
 800fdc6:	693b      	ldr	r3, [r7, #16]
 800fdc8:	429a      	cmp	r2, r3
 800fdca:	d90e      	bls.n	800fdea <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	68ba      	ldr	r2, [r7, #8]
 800fdd0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	68fa      	ldr	r2, [r7, #12]
 800fdd6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fdd8:	4b19      	ldr	r3, [pc, #100]	; (800fe40 <prvSwitchTimerLists+0xbc>)
 800fdda:	681a      	ldr	r2, [r3, #0]
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	3304      	adds	r3, #4
 800fde0:	4619      	mov	r1, r3
 800fde2:	4610      	mov	r0, r2
 800fde4:	f7fd fd50 	bl	800d888 <vListInsert>
 800fde8:	e016      	b.n	800fe18 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fdea:	2300      	movs	r3, #0
 800fdec:	9300      	str	r3, [sp, #0]
 800fdee:	2300      	movs	r3, #0
 800fdf0:	693a      	ldr	r2, [r7, #16]
 800fdf2:	2100      	movs	r1, #0
 800fdf4:	68f8      	ldr	r0, [r7, #12]
 800fdf6:	f7ff fdb7 	bl	800f968 <xTimerGenericCommand>
 800fdfa:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d10a      	bne.n	800fe18 <prvSwitchTimerLists+0x94>
	__asm volatile
 800fe02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe06:	f383 8811 	msr	BASEPRI, r3
 800fe0a:	f3bf 8f6f 	isb	sy
 800fe0e:	f3bf 8f4f 	dsb	sy
 800fe12:	603b      	str	r3, [r7, #0]
}
 800fe14:	bf00      	nop
 800fe16:	e7fe      	b.n	800fe16 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fe18:	4b09      	ldr	r3, [pc, #36]	; (800fe40 <prvSwitchTimerLists+0xbc>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d1b4      	bne.n	800fd8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fe22:	4b07      	ldr	r3, [pc, #28]	; (800fe40 <prvSwitchTimerLists+0xbc>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fe28:	4b06      	ldr	r3, [pc, #24]	; (800fe44 <prvSwitchTimerLists+0xc0>)
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	4a04      	ldr	r2, [pc, #16]	; (800fe40 <prvSwitchTimerLists+0xbc>)
 800fe2e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fe30:	4a04      	ldr	r2, [pc, #16]	; (800fe44 <prvSwitchTimerLists+0xc0>)
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	6013      	str	r3, [r2, #0]
}
 800fe36:	bf00      	nop
 800fe38:	3718      	adds	r7, #24
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd80      	pop	{r7, pc}
 800fe3e:	bf00      	nop
 800fe40:	20002f14 	.word	0x20002f14
 800fe44:	20002f18 	.word	0x20002f18

0800fe48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b082      	sub	sp, #8
 800fe4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fe4e:	f000 f92d 	bl	80100ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fe52:	4b15      	ldr	r3, [pc, #84]	; (800fea8 <prvCheckForValidListAndQueue+0x60>)
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d120      	bne.n	800fe9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fe5a:	4814      	ldr	r0, [pc, #80]	; (800feac <prvCheckForValidListAndQueue+0x64>)
 800fe5c:	f7fd fcc6 	bl	800d7ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fe60:	4813      	ldr	r0, [pc, #76]	; (800feb0 <prvCheckForValidListAndQueue+0x68>)
 800fe62:	f7fd fcc3 	bl	800d7ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fe66:	4b13      	ldr	r3, [pc, #76]	; (800feb4 <prvCheckForValidListAndQueue+0x6c>)
 800fe68:	4a10      	ldr	r2, [pc, #64]	; (800feac <prvCheckForValidListAndQueue+0x64>)
 800fe6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fe6c:	4b12      	ldr	r3, [pc, #72]	; (800feb8 <prvCheckForValidListAndQueue+0x70>)
 800fe6e:	4a10      	ldr	r2, [pc, #64]	; (800feb0 <prvCheckForValidListAndQueue+0x68>)
 800fe70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fe72:	2300      	movs	r3, #0
 800fe74:	9300      	str	r3, [sp, #0]
 800fe76:	4b11      	ldr	r3, [pc, #68]	; (800febc <prvCheckForValidListAndQueue+0x74>)
 800fe78:	4a11      	ldr	r2, [pc, #68]	; (800fec0 <prvCheckForValidListAndQueue+0x78>)
 800fe7a:	210c      	movs	r1, #12
 800fe7c:	200a      	movs	r0, #10
 800fe7e:	f7fd fdcd 	bl	800da1c <xQueueGenericCreateStatic>
 800fe82:	4603      	mov	r3, r0
 800fe84:	4a08      	ldr	r2, [pc, #32]	; (800fea8 <prvCheckForValidListAndQueue+0x60>)
 800fe86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fe88:	4b07      	ldr	r3, [pc, #28]	; (800fea8 <prvCheckForValidListAndQueue+0x60>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d005      	beq.n	800fe9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fe90:	4b05      	ldr	r3, [pc, #20]	; (800fea8 <prvCheckForValidListAndQueue+0x60>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	490b      	ldr	r1, [pc, #44]	; (800fec4 <prvCheckForValidListAndQueue+0x7c>)
 800fe96:	4618      	mov	r0, r3
 800fe98:	f7fe fc4c 	bl	800e734 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fe9c:	f000 f936 	bl	801010c <vPortExitCritical>
}
 800fea0:	bf00      	nop
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}
 800fea6:	bf00      	nop
 800fea8:	20002f1c 	.word	0x20002f1c
 800feac:	20002eec 	.word	0x20002eec
 800feb0:	20002f00 	.word	0x20002f00
 800feb4:	20002f14 	.word	0x20002f14
 800feb8:	20002f18 	.word	0x20002f18
 800febc:	20002fa0 	.word	0x20002fa0
 800fec0:	20002f28 	.word	0x20002f28
 800fec4:	08015338 	.word	0x08015338

0800fec8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fec8:	b480      	push	{r7}
 800feca:	b085      	sub	sp, #20
 800fecc:	af00      	add	r7, sp, #0
 800fece:	60f8      	str	r0, [r7, #12]
 800fed0:	60b9      	str	r1, [r7, #8]
 800fed2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	3b04      	subs	r3, #4
 800fed8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fee0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	3b04      	subs	r3, #4
 800fee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	f023 0201 	bic.w	r2, r3, #1
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	3b04      	subs	r3, #4
 800fef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fef8:	4a08      	ldr	r2, [pc, #32]	; (800ff1c <pxPortInitialiseStack+0x54>)
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	3b14      	subs	r3, #20
 800ff02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ff04:	687a      	ldr	r2, [r7, #4]
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	3b20      	subs	r3, #32
 800ff0e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ff10:	68fb      	ldr	r3, [r7, #12]
}
 800ff12:	4618      	mov	r0, r3
 800ff14:	3714      	adds	r7, #20
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bc80      	pop	{r7}
 800ff1a:	4770      	bx	lr
 800ff1c:	0800ff21 	.word	0x0800ff21

0800ff20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ff20:	b480      	push	{r7}
 800ff22:	b085      	sub	sp, #20
 800ff24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800ff26:	2300      	movs	r3, #0
 800ff28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ff2a:	4b12      	ldr	r3, [pc, #72]	; (800ff74 <prvTaskExitError+0x54>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff32:	d00a      	beq.n	800ff4a <prvTaskExitError+0x2a>
	__asm volatile
 800ff34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff38:	f383 8811 	msr	BASEPRI, r3
 800ff3c:	f3bf 8f6f 	isb	sy
 800ff40:	f3bf 8f4f 	dsb	sy
 800ff44:	60fb      	str	r3, [r7, #12]
}
 800ff46:	bf00      	nop
 800ff48:	e7fe      	b.n	800ff48 <prvTaskExitError+0x28>
	__asm volatile
 800ff4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff4e:	f383 8811 	msr	BASEPRI, r3
 800ff52:	f3bf 8f6f 	isb	sy
 800ff56:	f3bf 8f4f 	dsb	sy
 800ff5a:	60bb      	str	r3, [r7, #8]
}
 800ff5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ff5e:	bf00      	nop
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d0fc      	beq.n	800ff60 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ff66:	bf00      	nop
 800ff68:	bf00      	nop
 800ff6a:	3714      	adds	r7, #20
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bc80      	pop	{r7}
 800ff70:	4770      	bx	lr
 800ff72:	bf00      	nop
 800ff74:	20000220 	.word	0x20000220
	...

0800ff80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ff80:	4b07      	ldr	r3, [pc, #28]	; (800ffa0 <pxCurrentTCBConst2>)
 800ff82:	6819      	ldr	r1, [r3, #0]
 800ff84:	6808      	ldr	r0, [r1, #0]
 800ff86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ff8a:	f380 8809 	msr	PSP, r0
 800ff8e:	f3bf 8f6f 	isb	sy
 800ff92:	f04f 0000 	mov.w	r0, #0
 800ff96:	f380 8811 	msr	BASEPRI, r0
 800ff9a:	f04e 0e0d 	orr.w	lr, lr, #13
 800ff9e:	4770      	bx	lr

0800ffa0 <pxCurrentTCBConst2>:
 800ffa0:	20002dc0 	.word	0x20002dc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ffa4:	bf00      	nop
 800ffa6:	bf00      	nop

0800ffa8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800ffa8:	4806      	ldr	r0, [pc, #24]	; (800ffc4 <prvPortStartFirstTask+0x1c>)
 800ffaa:	6800      	ldr	r0, [r0, #0]
 800ffac:	6800      	ldr	r0, [r0, #0]
 800ffae:	f380 8808 	msr	MSP, r0
 800ffb2:	b662      	cpsie	i
 800ffb4:	b661      	cpsie	f
 800ffb6:	f3bf 8f4f 	dsb	sy
 800ffba:	f3bf 8f6f 	isb	sy
 800ffbe:	df00      	svc	0
 800ffc0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ffc2:	bf00      	nop
 800ffc4:	e000ed08 	.word	0xe000ed08

0800ffc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b084      	sub	sp, #16
 800ffcc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ffce:	4b32      	ldr	r3, [pc, #200]	; (8010098 <xPortStartScheduler+0xd0>)
 800ffd0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	781b      	ldrb	r3, [r3, #0]
 800ffd6:	b2db      	uxtb	r3, r3
 800ffd8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	22ff      	movs	r2, #255	; 0xff
 800ffde:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	781b      	ldrb	r3, [r3, #0]
 800ffe4:	b2db      	uxtb	r3, r3
 800ffe6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ffe8:	78fb      	ldrb	r3, [r7, #3]
 800ffea:	b2db      	uxtb	r3, r3
 800ffec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fff0:	b2da      	uxtb	r2, r3
 800fff2:	4b2a      	ldr	r3, [pc, #168]	; (801009c <xPortStartScheduler+0xd4>)
 800fff4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fff6:	4b2a      	ldr	r3, [pc, #168]	; (80100a0 <xPortStartScheduler+0xd8>)
 800fff8:	2207      	movs	r2, #7
 800fffa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fffc:	e009      	b.n	8010012 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800fffe:	4b28      	ldr	r3, [pc, #160]	; (80100a0 <xPortStartScheduler+0xd8>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	3b01      	subs	r3, #1
 8010004:	4a26      	ldr	r2, [pc, #152]	; (80100a0 <xPortStartScheduler+0xd8>)
 8010006:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010008:	78fb      	ldrb	r3, [r7, #3]
 801000a:	b2db      	uxtb	r3, r3
 801000c:	005b      	lsls	r3, r3, #1
 801000e:	b2db      	uxtb	r3, r3
 8010010:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010012:	78fb      	ldrb	r3, [r7, #3]
 8010014:	b2db      	uxtb	r3, r3
 8010016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801001a:	2b80      	cmp	r3, #128	; 0x80
 801001c:	d0ef      	beq.n	800fffe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801001e:	4b20      	ldr	r3, [pc, #128]	; (80100a0 <xPortStartScheduler+0xd8>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	f1c3 0307 	rsb	r3, r3, #7
 8010026:	2b04      	cmp	r3, #4
 8010028:	d00a      	beq.n	8010040 <xPortStartScheduler+0x78>
	__asm volatile
 801002a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801002e:	f383 8811 	msr	BASEPRI, r3
 8010032:	f3bf 8f6f 	isb	sy
 8010036:	f3bf 8f4f 	dsb	sy
 801003a:	60bb      	str	r3, [r7, #8]
}
 801003c:	bf00      	nop
 801003e:	e7fe      	b.n	801003e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010040:	4b17      	ldr	r3, [pc, #92]	; (80100a0 <xPortStartScheduler+0xd8>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	021b      	lsls	r3, r3, #8
 8010046:	4a16      	ldr	r2, [pc, #88]	; (80100a0 <xPortStartScheduler+0xd8>)
 8010048:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801004a:	4b15      	ldr	r3, [pc, #84]	; (80100a0 <xPortStartScheduler+0xd8>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010052:	4a13      	ldr	r2, [pc, #76]	; (80100a0 <xPortStartScheduler+0xd8>)
 8010054:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	b2da      	uxtb	r2, r3
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801005e:	4b11      	ldr	r3, [pc, #68]	; (80100a4 <xPortStartScheduler+0xdc>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	4a10      	ldr	r2, [pc, #64]	; (80100a4 <xPortStartScheduler+0xdc>)
 8010064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010068:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801006a:	4b0e      	ldr	r3, [pc, #56]	; (80100a4 <xPortStartScheduler+0xdc>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	4a0d      	ldr	r2, [pc, #52]	; (80100a4 <xPortStartScheduler+0xdc>)
 8010070:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010074:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010076:	f000 f8b9 	bl	80101ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801007a:	4b0b      	ldr	r3, [pc, #44]	; (80100a8 <xPortStartScheduler+0xe0>)
 801007c:	2200      	movs	r2, #0
 801007e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010080:	f7ff ff92 	bl	800ffa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010084:	f7fe ff6e 	bl	800ef64 <vTaskSwitchContext>
	prvTaskExitError();
 8010088:	f7ff ff4a 	bl	800ff20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801008c:	2300      	movs	r3, #0
}
 801008e:	4618      	mov	r0, r3
 8010090:	3710      	adds	r7, #16
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}
 8010096:	bf00      	nop
 8010098:	e000e400 	.word	0xe000e400
 801009c:	20002fe8 	.word	0x20002fe8
 80100a0:	20002fec 	.word	0x20002fec
 80100a4:	e000ed20 	.word	0xe000ed20
 80100a8:	20000220 	.word	0x20000220

080100ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80100ac:	b480      	push	{r7}
 80100ae:	b083      	sub	sp, #12
 80100b0:	af00      	add	r7, sp, #0
	__asm volatile
 80100b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100b6:	f383 8811 	msr	BASEPRI, r3
 80100ba:	f3bf 8f6f 	isb	sy
 80100be:	f3bf 8f4f 	dsb	sy
 80100c2:	607b      	str	r3, [r7, #4]
}
 80100c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80100c6:	4b0f      	ldr	r3, [pc, #60]	; (8010104 <vPortEnterCritical+0x58>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	3301      	adds	r3, #1
 80100cc:	4a0d      	ldr	r2, [pc, #52]	; (8010104 <vPortEnterCritical+0x58>)
 80100ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80100d0:	4b0c      	ldr	r3, [pc, #48]	; (8010104 <vPortEnterCritical+0x58>)
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	2b01      	cmp	r3, #1
 80100d6:	d10f      	bne.n	80100f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80100d8:	4b0b      	ldr	r3, [pc, #44]	; (8010108 <vPortEnterCritical+0x5c>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	b2db      	uxtb	r3, r3
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d00a      	beq.n	80100f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80100e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100e6:	f383 8811 	msr	BASEPRI, r3
 80100ea:	f3bf 8f6f 	isb	sy
 80100ee:	f3bf 8f4f 	dsb	sy
 80100f2:	603b      	str	r3, [r7, #0]
}
 80100f4:	bf00      	nop
 80100f6:	e7fe      	b.n	80100f6 <vPortEnterCritical+0x4a>
	}
}
 80100f8:	bf00      	nop
 80100fa:	370c      	adds	r7, #12
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bc80      	pop	{r7}
 8010100:	4770      	bx	lr
 8010102:	bf00      	nop
 8010104:	20000220 	.word	0x20000220
 8010108:	e000ed04 	.word	0xe000ed04

0801010c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801010c:	b480      	push	{r7}
 801010e:	b083      	sub	sp, #12
 8010110:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010112:	4b11      	ldr	r3, [pc, #68]	; (8010158 <vPortExitCritical+0x4c>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d10a      	bne.n	8010130 <vPortExitCritical+0x24>
	__asm volatile
 801011a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801011e:	f383 8811 	msr	BASEPRI, r3
 8010122:	f3bf 8f6f 	isb	sy
 8010126:	f3bf 8f4f 	dsb	sy
 801012a:	607b      	str	r3, [r7, #4]
}
 801012c:	bf00      	nop
 801012e:	e7fe      	b.n	801012e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010130:	4b09      	ldr	r3, [pc, #36]	; (8010158 <vPortExitCritical+0x4c>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	3b01      	subs	r3, #1
 8010136:	4a08      	ldr	r2, [pc, #32]	; (8010158 <vPortExitCritical+0x4c>)
 8010138:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801013a:	4b07      	ldr	r3, [pc, #28]	; (8010158 <vPortExitCritical+0x4c>)
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d105      	bne.n	801014e <vPortExitCritical+0x42>
 8010142:	2300      	movs	r3, #0
 8010144:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	f383 8811 	msr	BASEPRI, r3
}
 801014c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801014e:	bf00      	nop
 8010150:	370c      	adds	r7, #12
 8010152:	46bd      	mov	sp, r7
 8010154:	bc80      	pop	{r7}
 8010156:	4770      	bx	lr
 8010158:	20000220 	.word	0x20000220
 801015c:	00000000 	.word	0x00000000

08010160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010160:	f3ef 8009 	mrs	r0, PSP
 8010164:	f3bf 8f6f 	isb	sy
 8010168:	4b0d      	ldr	r3, [pc, #52]	; (80101a0 <pxCurrentTCBConst>)
 801016a:	681a      	ldr	r2, [r3, #0]
 801016c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010170:	6010      	str	r0, [r2, #0]
 8010172:	e92d 4008 	stmdb	sp!, {r3, lr}
 8010176:	f04f 0050 	mov.w	r0, #80	; 0x50
 801017a:	f380 8811 	msr	BASEPRI, r0
 801017e:	f7fe fef1 	bl	800ef64 <vTaskSwitchContext>
 8010182:	f04f 0000 	mov.w	r0, #0
 8010186:	f380 8811 	msr	BASEPRI, r0
 801018a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801018e:	6819      	ldr	r1, [r3, #0]
 8010190:	6808      	ldr	r0, [r1, #0]
 8010192:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010196:	f380 8809 	msr	PSP, r0
 801019a:	f3bf 8f6f 	isb	sy
 801019e:	4770      	bx	lr

080101a0 <pxCurrentTCBConst>:
 80101a0:	20002dc0 	.word	0x20002dc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80101a4:	bf00      	nop
 80101a6:	bf00      	nop

080101a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b082      	sub	sp, #8
 80101ac:	af00      	add	r7, sp, #0
	__asm volatile
 80101ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101b2:	f383 8811 	msr	BASEPRI, r3
 80101b6:	f3bf 8f6f 	isb	sy
 80101ba:	f3bf 8f4f 	dsb	sy
 80101be:	607b      	str	r3, [r7, #4]
}
 80101c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80101c2:	f7fe fe11 	bl	800ede8 <xTaskIncrementTick>
 80101c6:	4603      	mov	r3, r0
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d003      	beq.n	80101d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80101cc:	4b06      	ldr	r3, [pc, #24]	; (80101e8 <SysTick_Handler+0x40>)
 80101ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101d2:	601a      	str	r2, [r3, #0]
 80101d4:	2300      	movs	r3, #0
 80101d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	f383 8811 	msr	BASEPRI, r3
}
 80101de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80101e0:	bf00      	nop
 80101e2:	3708      	adds	r7, #8
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}
 80101e8:	e000ed04 	.word	0xe000ed04

080101ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80101ec:	b480      	push	{r7}
 80101ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80101f0:	4b0a      	ldr	r3, [pc, #40]	; (801021c <vPortSetupTimerInterrupt+0x30>)
 80101f2:	2200      	movs	r2, #0
 80101f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80101f6:	4b0a      	ldr	r3, [pc, #40]	; (8010220 <vPortSetupTimerInterrupt+0x34>)
 80101f8:	2200      	movs	r2, #0
 80101fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80101fc:	4b09      	ldr	r3, [pc, #36]	; (8010224 <vPortSetupTimerInterrupt+0x38>)
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	4a09      	ldr	r2, [pc, #36]	; (8010228 <vPortSetupTimerInterrupt+0x3c>)
 8010202:	fba2 2303 	umull	r2, r3, r2, r3
 8010206:	099b      	lsrs	r3, r3, #6
 8010208:	4a08      	ldr	r2, [pc, #32]	; (801022c <vPortSetupTimerInterrupt+0x40>)
 801020a:	3b01      	subs	r3, #1
 801020c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801020e:	4b03      	ldr	r3, [pc, #12]	; (801021c <vPortSetupTimerInterrupt+0x30>)
 8010210:	2207      	movs	r2, #7
 8010212:	601a      	str	r2, [r3, #0]
}
 8010214:	bf00      	nop
 8010216:	46bd      	mov	sp, r7
 8010218:	bc80      	pop	{r7}
 801021a:	4770      	bx	lr
 801021c:	e000e010 	.word	0xe000e010
 8010220:	e000e018 	.word	0xe000e018
 8010224:	200001c4 	.word	0x200001c4
 8010228:	10624dd3 	.word	0x10624dd3
 801022c:	e000e014 	.word	0xe000e014

08010230 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010230:	b480      	push	{r7}
 8010232:	b085      	sub	sp, #20
 8010234:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010236:	f3ef 8305 	mrs	r3, IPSR
 801023a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	2b0f      	cmp	r3, #15
 8010240:	d914      	bls.n	801026c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010242:	4a16      	ldr	r2, [pc, #88]	; (801029c <vPortValidateInterruptPriority+0x6c>)
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	4413      	add	r3, r2
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801024c:	4b14      	ldr	r3, [pc, #80]	; (80102a0 <vPortValidateInterruptPriority+0x70>)
 801024e:	781b      	ldrb	r3, [r3, #0]
 8010250:	7afa      	ldrb	r2, [r7, #11]
 8010252:	429a      	cmp	r2, r3
 8010254:	d20a      	bcs.n	801026c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010256:	f04f 0350 	mov.w	r3, #80	; 0x50
 801025a:	f383 8811 	msr	BASEPRI, r3
 801025e:	f3bf 8f6f 	isb	sy
 8010262:	f3bf 8f4f 	dsb	sy
 8010266:	607b      	str	r3, [r7, #4]
}
 8010268:	bf00      	nop
 801026a:	e7fe      	b.n	801026a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801026c:	4b0d      	ldr	r3, [pc, #52]	; (80102a4 <vPortValidateInterruptPriority+0x74>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010274:	4b0c      	ldr	r3, [pc, #48]	; (80102a8 <vPortValidateInterruptPriority+0x78>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	429a      	cmp	r2, r3
 801027a:	d90a      	bls.n	8010292 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801027c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010280:	f383 8811 	msr	BASEPRI, r3
 8010284:	f3bf 8f6f 	isb	sy
 8010288:	f3bf 8f4f 	dsb	sy
 801028c:	603b      	str	r3, [r7, #0]
}
 801028e:	bf00      	nop
 8010290:	e7fe      	b.n	8010290 <vPortValidateInterruptPriority+0x60>
	}
 8010292:	bf00      	nop
 8010294:	3714      	adds	r7, #20
 8010296:	46bd      	mov	sp, r7
 8010298:	bc80      	pop	{r7}
 801029a:	4770      	bx	lr
 801029c:	e000e3f0 	.word	0xe000e3f0
 80102a0:	20002fe8 	.word	0x20002fe8
 80102a4:	e000ed0c 	.word	0xe000ed0c
 80102a8:	20002fec 	.word	0x20002fec

080102ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b08a      	sub	sp, #40	; 0x28
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80102b4:	2300      	movs	r3, #0
 80102b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80102b8:	f7fe fcde 	bl	800ec78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80102bc:	4b58      	ldr	r3, [pc, #352]	; (8010420 <pvPortMalloc+0x174>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d101      	bne.n	80102c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80102c4:	f000 f910 	bl	80104e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80102c8:	4b56      	ldr	r3, [pc, #344]	; (8010424 <pvPortMalloc+0x178>)
 80102ca:	681a      	ldr	r2, [r3, #0]
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	4013      	ands	r3, r2
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	f040 808e 	bne.w	80103f2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d01d      	beq.n	8010318 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80102dc:	2208      	movs	r2, #8
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	4413      	add	r3, r2
 80102e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f003 0307 	and.w	r3, r3, #7
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d014      	beq.n	8010318 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f023 0307 	bic.w	r3, r3, #7
 80102f4:	3308      	adds	r3, #8
 80102f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f003 0307 	and.w	r3, r3, #7
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d00a      	beq.n	8010318 <pvPortMalloc+0x6c>
	__asm volatile
 8010302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010306:	f383 8811 	msr	BASEPRI, r3
 801030a:	f3bf 8f6f 	isb	sy
 801030e:	f3bf 8f4f 	dsb	sy
 8010312:	617b      	str	r3, [r7, #20]
}
 8010314:	bf00      	nop
 8010316:	e7fe      	b.n	8010316 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d069      	beq.n	80103f2 <pvPortMalloc+0x146>
 801031e:	4b42      	ldr	r3, [pc, #264]	; (8010428 <pvPortMalloc+0x17c>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	687a      	ldr	r2, [r7, #4]
 8010324:	429a      	cmp	r2, r3
 8010326:	d864      	bhi.n	80103f2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010328:	4b40      	ldr	r3, [pc, #256]	; (801042c <pvPortMalloc+0x180>)
 801032a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801032c:	4b3f      	ldr	r3, [pc, #252]	; (801042c <pvPortMalloc+0x180>)
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010332:	e004      	b.n	801033e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010336:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801033e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010340:	685b      	ldr	r3, [r3, #4]
 8010342:	687a      	ldr	r2, [r7, #4]
 8010344:	429a      	cmp	r2, r3
 8010346:	d903      	bls.n	8010350 <pvPortMalloc+0xa4>
 8010348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d1f1      	bne.n	8010334 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010350:	4b33      	ldr	r3, [pc, #204]	; (8010420 <pvPortMalloc+0x174>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010356:	429a      	cmp	r2, r3
 8010358:	d04b      	beq.n	80103f2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801035a:	6a3b      	ldr	r3, [r7, #32]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	2208      	movs	r2, #8
 8010360:	4413      	add	r3, r2
 8010362:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010366:	681a      	ldr	r2, [r3, #0]
 8010368:	6a3b      	ldr	r3, [r7, #32]
 801036a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801036c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036e:	685a      	ldr	r2, [r3, #4]
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	1ad2      	subs	r2, r2, r3
 8010374:	2308      	movs	r3, #8
 8010376:	005b      	lsls	r3, r3, #1
 8010378:	429a      	cmp	r2, r3
 801037a:	d91f      	bls.n	80103bc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801037c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	4413      	add	r3, r2
 8010382:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010384:	69bb      	ldr	r3, [r7, #24]
 8010386:	f003 0307 	and.w	r3, r3, #7
 801038a:	2b00      	cmp	r3, #0
 801038c:	d00a      	beq.n	80103a4 <pvPortMalloc+0xf8>
	__asm volatile
 801038e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010392:	f383 8811 	msr	BASEPRI, r3
 8010396:	f3bf 8f6f 	isb	sy
 801039a:	f3bf 8f4f 	dsb	sy
 801039e:	613b      	str	r3, [r7, #16]
}
 80103a0:	bf00      	nop
 80103a2:	e7fe      	b.n	80103a2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80103a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a6:	685a      	ldr	r2, [r3, #4]
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	1ad2      	subs	r2, r2, r3
 80103ac:	69bb      	ldr	r3, [r7, #24]
 80103ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80103b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b2:	687a      	ldr	r2, [r7, #4]
 80103b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80103b6:	69b8      	ldr	r0, [r7, #24]
 80103b8:	f000 f8f8 	bl	80105ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80103bc:	4b1a      	ldr	r3, [pc, #104]	; (8010428 <pvPortMalloc+0x17c>)
 80103be:	681a      	ldr	r2, [r3, #0]
 80103c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c2:	685b      	ldr	r3, [r3, #4]
 80103c4:	1ad3      	subs	r3, r2, r3
 80103c6:	4a18      	ldr	r2, [pc, #96]	; (8010428 <pvPortMalloc+0x17c>)
 80103c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80103ca:	4b17      	ldr	r3, [pc, #92]	; (8010428 <pvPortMalloc+0x17c>)
 80103cc:	681a      	ldr	r2, [r3, #0]
 80103ce:	4b18      	ldr	r3, [pc, #96]	; (8010430 <pvPortMalloc+0x184>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	429a      	cmp	r2, r3
 80103d4:	d203      	bcs.n	80103de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80103d6:	4b14      	ldr	r3, [pc, #80]	; (8010428 <pvPortMalloc+0x17c>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	4a15      	ldr	r2, [pc, #84]	; (8010430 <pvPortMalloc+0x184>)
 80103dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80103de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103e0:	685a      	ldr	r2, [r3, #4]
 80103e2:	4b10      	ldr	r3, [pc, #64]	; (8010424 <pvPortMalloc+0x178>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	431a      	orrs	r2, r3
 80103e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80103ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ee:	2200      	movs	r2, #0
 80103f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80103f2:	f7fe fc4f 	bl	800ec94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80103f6:	69fb      	ldr	r3, [r7, #28]
 80103f8:	f003 0307 	and.w	r3, r3, #7
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d00a      	beq.n	8010416 <pvPortMalloc+0x16a>
	__asm volatile
 8010400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010404:	f383 8811 	msr	BASEPRI, r3
 8010408:	f3bf 8f6f 	isb	sy
 801040c:	f3bf 8f4f 	dsb	sy
 8010410:	60fb      	str	r3, [r7, #12]
}
 8010412:	bf00      	nop
 8010414:	e7fe      	b.n	8010414 <pvPortMalloc+0x168>
	return pvReturn;
 8010416:	69fb      	ldr	r3, [r7, #28]
}
 8010418:	4618      	mov	r0, r3
 801041a:	3728      	adds	r7, #40	; 0x28
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}
 8010420:	2000cc38 	.word	0x2000cc38
 8010424:	2000cc44 	.word	0x2000cc44
 8010428:	2000cc3c 	.word	0x2000cc3c
 801042c:	2000cc30 	.word	0x2000cc30
 8010430:	2000cc40 	.word	0x2000cc40

08010434 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b086      	sub	sp, #24
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d048      	beq.n	80104d8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010446:	2308      	movs	r3, #8
 8010448:	425b      	negs	r3, r3
 801044a:	697a      	ldr	r2, [r7, #20]
 801044c:	4413      	add	r3, r2
 801044e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010450:	697b      	ldr	r3, [r7, #20]
 8010452:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010454:	693b      	ldr	r3, [r7, #16]
 8010456:	685a      	ldr	r2, [r3, #4]
 8010458:	4b21      	ldr	r3, [pc, #132]	; (80104e0 <vPortFree+0xac>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	4013      	ands	r3, r2
 801045e:	2b00      	cmp	r3, #0
 8010460:	d10a      	bne.n	8010478 <vPortFree+0x44>
	__asm volatile
 8010462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010466:	f383 8811 	msr	BASEPRI, r3
 801046a:	f3bf 8f6f 	isb	sy
 801046e:	f3bf 8f4f 	dsb	sy
 8010472:	60fb      	str	r3, [r7, #12]
}
 8010474:	bf00      	nop
 8010476:	e7fe      	b.n	8010476 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010478:	693b      	ldr	r3, [r7, #16]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d00a      	beq.n	8010496 <vPortFree+0x62>
	__asm volatile
 8010480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010484:	f383 8811 	msr	BASEPRI, r3
 8010488:	f3bf 8f6f 	isb	sy
 801048c:	f3bf 8f4f 	dsb	sy
 8010490:	60bb      	str	r3, [r7, #8]
}
 8010492:	bf00      	nop
 8010494:	e7fe      	b.n	8010494 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	685a      	ldr	r2, [r3, #4]
 801049a:	4b11      	ldr	r3, [pc, #68]	; (80104e0 <vPortFree+0xac>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	4013      	ands	r3, r2
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d019      	beq.n	80104d8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d115      	bne.n	80104d8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	685a      	ldr	r2, [r3, #4]
 80104b0:	4b0b      	ldr	r3, [pc, #44]	; (80104e0 <vPortFree+0xac>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	43db      	mvns	r3, r3
 80104b6:	401a      	ands	r2, r3
 80104b8:	693b      	ldr	r3, [r7, #16]
 80104ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80104bc:	f7fe fbdc 	bl	800ec78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	685a      	ldr	r2, [r3, #4]
 80104c4:	4b07      	ldr	r3, [pc, #28]	; (80104e4 <vPortFree+0xb0>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	4413      	add	r3, r2
 80104ca:	4a06      	ldr	r2, [pc, #24]	; (80104e4 <vPortFree+0xb0>)
 80104cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80104ce:	6938      	ldr	r0, [r7, #16]
 80104d0:	f000 f86c 	bl	80105ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80104d4:	f7fe fbde 	bl	800ec94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80104d8:	bf00      	nop
 80104da:	3718      	adds	r7, #24
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}
 80104e0:	2000cc44 	.word	0x2000cc44
 80104e4:	2000cc3c 	.word	0x2000cc3c

080104e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80104e8:	b480      	push	{r7}
 80104ea:	b085      	sub	sp, #20
 80104ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80104ee:	f649 4340 	movw	r3, #40000	; 0x9c40
 80104f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80104f4:	4b27      	ldr	r3, [pc, #156]	; (8010594 <prvHeapInit+0xac>)
 80104f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	f003 0307 	and.w	r3, r3, #7
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d00c      	beq.n	801051c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	3307      	adds	r3, #7
 8010506:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	f023 0307 	bic.w	r3, r3, #7
 801050e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010510:	68ba      	ldr	r2, [r7, #8]
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	1ad3      	subs	r3, r2, r3
 8010516:	4a1f      	ldr	r2, [pc, #124]	; (8010594 <prvHeapInit+0xac>)
 8010518:	4413      	add	r3, r2
 801051a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010520:	4a1d      	ldr	r2, [pc, #116]	; (8010598 <prvHeapInit+0xb0>)
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010526:	4b1c      	ldr	r3, [pc, #112]	; (8010598 <prvHeapInit+0xb0>)
 8010528:	2200      	movs	r2, #0
 801052a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	68ba      	ldr	r2, [r7, #8]
 8010530:	4413      	add	r3, r2
 8010532:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010534:	2208      	movs	r2, #8
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	1a9b      	subs	r3, r3, r2
 801053a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	f023 0307 	bic.w	r3, r3, #7
 8010542:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	4a15      	ldr	r2, [pc, #84]	; (801059c <prvHeapInit+0xb4>)
 8010548:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801054a:	4b14      	ldr	r3, [pc, #80]	; (801059c <prvHeapInit+0xb4>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	2200      	movs	r2, #0
 8010550:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010552:	4b12      	ldr	r3, [pc, #72]	; (801059c <prvHeapInit+0xb4>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	2200      	movs	r2, #0
 8010558:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	68fa      	ldr	r2, [r7, #12]
 8010562:	1ad2      	subs	r2, r2, r3
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010568:	4b0c      	ldr	r3, [pc, #48]	; (801059c <prvHeapInit+0xb4>)
 801056a:	681a      	ldr	r2, [r3, #0]
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	685b      	ldr	r3, [r3, #4]
 8010574:	4a0a      	ldr	r2, [pc, #40]	; (80105a0 <prvHeapInit+0xb8>)
 8010576:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	685b      	ldr	r3, [r3, #4]
 801057c:	4a09      	ldr	r2, [pc, #36]	; (80105a4 <prvHeapInit+0xbc>)
 801057e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010580:	4b09      	ldr	r3, [pc, #36]	; (80105a8 <prvHeapInit+0xc0>)
 8010582:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010586:	601a      	str	r2, [r3, #0]
}
 8010588:	bf00      	nop
 801058a:	3714      	adds	r7, #20
 801058c:	46bd      	mov	sp, r7
 801058e:	bc80      	pop	{r7}
 8010590:	4770      	bx	lr
 8010592:	bf00      	nop
 8010594:	20002ff0 	.word	0x20002ff0
 8010598:	2000cc30 	.word	0x2000cc30
 801059c:	2000cc38 	.word	0x2000cc38
 80105a0:	2000cc40 	.word	0x2000cc40
 80105a4:	2000cc3c 	.word	0x2000cc3c
 80105a8:	2000cc44 	.word	0x2000cc44

080105ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80105ac:	b480      	push	{r7}
 80105ae:	b085      	sub	sp, #20
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80105b4:	4b27      	ldr	r3, [pc, #156]	; (8010654 <prvInsertBlockIntoFreeList+0xa8>)
 80105b6:	60fb      	str	r3, [r7, #12]
 80105b8:	e002      	b.n	80105c0 <prvInsertBlockIntoFreeList+0x14>
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	60fb      	str	r3, [r7, #12]
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	687a      	ldr	r2, [r7, #4]
 80105c6:	429a      	cmp	r2, r3
 80105c8:	d8f7      	bhi.n	80105ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	685b      	ldr	r3, [r3, #4]
 80105d2:	68ba      	ldr	r2, [r7, #8]
 80105d4:	4413      	add	r3, r2
 80105d6:	687a      	ldr	r2, [r7, #4]
 80105d8:	429a      	cmp	r2, r3
 80105da:	d108      	bne.n	80105ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	685a      	ldr	r2, [r3, #4]
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	685b      	ldr	r3, [r3, #4]
 80105e4:	441a      	add	r2, r3
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	685b      	ldr	r3, [r3, #4]
 80105f6:	68ba      	ldr	r2, [r7, #8]
 80105f8:	441a      	add	r2, r3
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	429a      	cmp	r2, r3
 8010600:	d118      	bne.n	8010634 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	681a      	ldr	r2, [r3, #0]
 8010606:	4b14      	ldr	r3, [pc, #80]	; (8010658 <prvInsertBlockIntoFreeList+0xac>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	429a      	cmp	r2, r3
 801060c:	d00d      	beq.n	801062a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	685a      	ldr	r2, [r3, #4]
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	685b      	ldr	r3, [r3, #4]
 8010618:	441a      	add	r2, r3
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	681a      	ldr	r2, [r3, #0]
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	601a      	str	r2, [r3, #0]
 8010628:	e008      	b.n	801063c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801062a:	4b0b      	ldr	r3, [pc, #44]	; (8010658 <prvInsertBlockIntoFreeList+0xac>)
 801062c:	681a      	ldr	r2, [r3, #0]
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	601a      	str	r2, [r3, #0]
 8010632:	e003      	b.n	801063c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	681a      	ldr	r2, [r3, #0]
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801063c:	68fa      	ldr	r2, [r7, #12]
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	429a      	cmp	r2, r3
 8010642:	d002      	beq.n	801064a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	687a      	ldr	r2, [r7, #4]
 8010648:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801064a:	bf00      	nop
 801064c:	3714      	adds	r7, #20
 801064e:	46bd      	mov	sp, r7
 8010650:	bc80      	pop	{r7}
 8010652:	4770      	bx	lr
 8010654:	2000cc30 	.word	0x2000cc30
 8010658:	2000cc38 	.word	0x2000cc38

0801065c <__errno>:
 801065c:	4b01      	ldr	r3, [pc, #4]	; (8010664 <__errno+0x8>)
 801065e:	6818      	ldr	r0, [r3, #0]
 8010660:	4770      	bx	lr
 8010662:	bf00      	nop
 8010664:	20000224 	.word	0x20000224

08010668 <std>:
 8010668:	2300      	movs	r3, #0
 801066a:	b510      	push	{r4, lr}
 801066c:	4604      	mov	r4, r0
 801066e:	e9c0 3300 	strd	r3, r3, [r0]
 8010672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010676:	6083      	str	r3, [r0, #8]
 8010678:	8181      	strh	r1, [r0, #12]
 801067a:	6643      	str	r3, [r0, #100]	; 0x64
 801067c:	81c2      	strh	r2, [r0, #14]
 801067e:	6183      	str	r3, [r0, #24]
 8010680:	4619      	mov	r1, r3
 8010682:	2208      	movs	r2, #8
 8010684:	305c      	adds	r0, #92	; 0x5c
 8010686:	f000 f92b 	bl	80108e0 <memset>
 801068a:	4b05      	ldr	r3, [pc, #20]	; (80106a0 <std+0x38>)
 801068c:	6224      	str	r4, [r4, #32]
 801068e:	6263      	str	r3, [r4, #36]	; 0x24
 8010690:	4b04      	ldr	r3, [pc, #16]	; (80106a4 <std+0x3c>)
 8010692:	62a3      	str	r3, [r4, #40]	; 0x28
 8010694:	4b04      	ldr	r3, [pc, #16]	; (80106a8 <std+0x40>)
 8010696:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010698:	4b04      	ldr	r3, [pc, #16]	; (80106ac <std+0x44>)
 801069a:	6323      	str	r3, [r4, #48]	; 0x30
 801069c:	bd10      	pop	{r4, pc}
 801069e:	bf00      	nop
 80106a0:	0801149d 	.word	0x0801149d
 80106a4:	080114bf 	.word	0x080114bf
 80106a8:	080114f7 	.word	0x080114f7
 80106ac:	0801151b 	.word	0x0801151b

080106b0 <_cleanup_r>:
 80106b0:	4901      	ldr	r1, [pc, #4]	; (80106b8 <_cleanup_r+0x8>)
 80106b2:	f000 b8af 	b.w	8010814 <_fwalk_reent>
 80106b6:	bf00      	nop
 80106b8:	08013369 	.word	0x08013369

080106bc <__sfmoreglue>:
 80106bc:	2268      	movs	r2, #104	; 0x68
 80106be:	b570      	push	{r4, r5, r6, lr}
 80106c0:	1e4d      	subs	r5, r1, #1
 80106c2:	4355      	muls	r5, r2
 80106c4:	460e      	mov	r6, r1
 80106c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80106ca:	f000 f979 	bl	80109c0 <_malloc_r>
 80106ce:	4604      	mov	r4, r0
 80106d0:	b140      	cbz	r0, 80106e4 <__sfmoreglue+0x28>
 80106d2:	2100      	movs	r1, #0
 80106d4:	e9c0 1600 	strd	r1, r6, [r0]
 80106d8:	300c      	adds	r0, #12
 80106da:	60a0      	str	r0, [r4, #8]
 80106dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80106e0:	f000 f8fe 	bl	80108e0 <memset>
 80106e4:	4620      	mov	r0, r4
 80106e6:	bd70      	pop	{r4, r5, r6, pc}

080106e8 <__sfp_lock_acquire>:
 80106e8:	4801      	ldr	r0, [pc, #4]	; (80106f0 <__sfp_lock_acquire+0x8>)
 80106ea:	f000 b8d8 	b.w	801089e <__retarget_lock_acquire_recursive>
 80106ee:	bf00      	nop
 80106f0:	2000cc49 	.word	0x2000cc49

080106f4 <__sfp_lock_release>:
 80106f4:	4801      	ldr	r0, [pc, #4]	; (80106fc <__sfp_lock_release+0x8>)
 80106f6:	f000 b8d3 	b.w	80108a0 <__retarget_lock_release_recursive>
 80106fa:	bf00      	nop
 80106fc:	2000cc49 	.word	0x2000cc49

08010700 <__sinit_lock_acquire>:
 8010700:	4801      	ldr	r0, [pc, #4]	; (8010708 <__sinit_lock_acquire+0x8>)
 8010702:	f000 b8cc 	b.w	801089e <__retarget_lock_acquire_recursive>
 8010706:	bf00      	nop
 8010708:	2000cc4a 	.word	0x2000cc4a

0801070c <__sinit_lock_release>:
 801070c:	4801      	ldr	r0, [pc, #4]	; (8010714 <__sinit_lock_release+0x8>)
 801070e:	f000 b8c7 	b.w	80108a0 <__retarget_lock_release_recursive>
 8010712:	bf00      	nop
 8010714:	2000cc4a 	.word	0x2000cc4a

08010718 <__sinit>:
 8010718:	b510      	push	{r4, lr}
 801071a:	4604      	mov	r4, r0
 801071c:	f7ff fff0 	bl	8010700 <__sinit_lock_acquire>
 8010720:	69a3      	ldr	r3, [r4, #24]
 8010722:	b11b      	cbz	r3, 801072c <__sinit+0x14>
 8010724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010728:	f7ff bff0 	b.w	801070c <__sinit_lock_release>
 801072c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010730:	6523      	str	r3, [r4, #80]	; 0x50
 8010732:	4b13      	ldr	r3, [pc, #76]	; (8010780 <__sinit+0x68>)
 8010734:	4a13      	ldr	r2, [pc, #76]	; (8010784 <__sinit+0x6c>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	62a2      	str	r2, [r4, #40]	; 0x28
 801073a:	42a3      	cmp	r3, r4
 801073c:	bf08      	it	eq
 801073e:	2301      	moveq	r3, #1
 8010740:	4620      	mov	r0, r4
 8010742:	bf08      	it	eq
 8010744:	61a3      	streq	r3, [r4, #24]
 8010746:	f000 f81f 	bl	8010788 <__sfp>
 801074a:	6060      	str	r0, [r4, #4]
 801074c:	4620      	mov	r0, r4
 801074e:	f000 f81b 	bl	8010788 <__sfp>
 8010752:	60a0      	str	r0, [r4, #8]
 8010754:	4620      	mov	r0, r4
 8010756:	f000 f817 	bl	8010788 <__sfp>
 801075a:	2200      	movs	r2, #0
 801075c:	2104      	movs	r1, #4
 801075e:	60e0      	str	r0, [r4, #12]
 8010760:	6860      	ldr	r0, [r4, #4]
 8010762:	f7ff ff81 	bl	8010668 <std>
 8010766:	2201      	movs	r2, #1
 8010768:	2109      	movs	r1, #9
 801076a:	68a0      	ldr	r0, [r4, #8]
 801076c:	f7ff ff7c 	bl	8010668 <std>
 8010770:	2202      	movs	r2, #2
 8010772:	2112      	movs	r1, #18
 8010774:	68e0      	ldr	r0, [r4, #12]
 8010776:	f7ff ff77 	bl	8010668 <std>
 801077a:	2301      	movs	r3, #1
 801077c:	61a3      	str	r3, [r4, #24]
 801077e:	e7d1      	b.n	8010724 <__sinit+0xc>
 8010780:	08015a0c 	.word	0x08015a0c
 8010784:	080106b1 	.word	0x080106b1

08010788 <__sfp>:
 8010788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801078a:	4607      	mov	r7, r0
 801078c:	f7ff ffac 	bl	80106e8 <__sfp_lock_acquire>
 8010790:	4b1e      	ldr	r3, [pc, #120]	; (801080c <__sfp+0x84>)
 8010792:	681e      	ldr	r6, [r3, #0]
 8010794:	69b3      	ldr	r3, [r6, #24]
 8010796:	b913      	cbnz	r3, 801079e <__sfp+0x16>
 8010798:	4630      	mov	r0, r6
 801079a:	f7ff ffbd 	bl	8010718 <__sinit>
 801079e:	3648      	adds	r6, #72	; 0x48
 80107a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80107a4:	3b01      	subs	r3, #1
 80107a6:	d503      	bpl.n	80107b0 <__sfp+0x28>
 80107a8:	6833      	ldr	r3, [r6, #0]
 80107aa:	b30b      	cbz	r3, 80107f0 <__sfp+0x68>
 80107ac:	6836      	ldr	r6, [r6, #0]
 80107ae:	e7f7      	b.n	80107a0 <__sfp+0x18>
 80107b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80107b4:	b9d5      	cbnz	r5, 80107ec <__sfp+0x64>
 80107b6:	4b16      	ldr	r3, [pc, #88]	; (8010810 <__sfp+0x88>)
 80107b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80107bc:	60e3      	str	r3, [r4, #12]
 80107be:	6665      	str	r5, [r4, #100]	; 0x64
 80107c0:	f000 f86c 	bl	801089c <__retarget_lock_init_recursive>
 80107c4:	f7ff ff96 	bl	80106f4 <__sfp_lock_release>
 80107c8:	2208      	movs	r2, #8
 80107ca:	4629      	mov	r1, r5
 80107cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80107d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80107d4:	6025      	str	r5, [r4, #0]
 80107d6:	61a5      	str	r5, [r4, #24]
 80107d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80107dc:	f000 f880 	bl	80108e0 <memset>
 80107e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80107e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80107e8:	4620      	mov	r0, r4
 80107ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107ec:	3468      	adds	r4, #104	; 0x68
 80107ee:	e7d9      	b.n	80107a4 <__sfp+0x1c>
 80107f0:	2104      	movs	r1, #4
 80107f2:	4638      	mov	r0, r7
 80107f4:	f7ff ff62 	bl	80106bc <__sfmoreglue>
 80107f8:	4604      	mov	r4, r0
 80107fa:	6030      	str	r0, [r6, #0]
 80107fc:	2800      	cmp	r0, #0
 80107fe:	d1d5      	bne.n	80107ac <__sfp+0x24>
 8010800:	f7ff ff78 	bl	80106f4 <__sfp_lock_release>
 8010804:	230c      	movs	r3, #12
 8010806:	603b      	str	r3, [r7, #0]
 8010808:	e7ee      	b.n	80107e8 <__sfp+0x60>
 801080a:	bf00      	nop
 801080c:	08015a0c 	.word	0x08015a0c
 8010810:	ffff0001 	.word	0xffff0001

08010814 <_fwalk_reent>:
 8010814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010818:	4606      	mov	r6, r0
 801081a:	4688      	mov	r8, r1
 801081c:	2700      	movs	r7, #0
 801081e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010822:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010826:	f1b9 0901 	subs.w	r9, r9, #1
 801082a:	d505      	bpl.n	8010838 <_fwalk_reent+0x24>
 801082c:	6824      	ldr	r4, [r4, #0]
 801082e:	2c00      	cmp	r4, #0
 8010830:	d1f7      	bne.n	8010822 <_fwalk_reent+0xe>
 8010832:	4638      	mov	r0, r7
 8010834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010838:	89ab      	ldrh	r3, [r5, #12]
 801083a:	2b01      	cmp	r3, #1
 801083c:	d907      	bls.n	801084e <_fwalk_reent+0x3a>
 801083e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010842:	3301      	adds	r3, #1
 8010844:	d003      	beq.n	801084e <_fwalk_reent+0x3a>
 8010846:	4629      	mov	r1, r5
 8010848:	4630      	mov	r0, r6
 801084a:	47c0      	blx	r8
 801084c:	4307      	orrs	r7, r0
 801084e:	3568      	adds	r5, #104	; 0x68
 8010850:	e7e9      	b.n	8010826 <_fwalk_reent+0x12>
	...

08010854 <__libc_init_array>:
 8010854:	b570      	push	{r4, r5, r6, lr}
 8010856:	2600      	movs	r6, #0
 8010858:	4d0c      	ldr	r5, [pc, #48]	; (801088c <__libc_init_array+0x38>)
 801085a:	4c0d      	ldr	r4, [pc, #52]	; (8010890 <__libc_init_array+0x3c>)
 801085c:	1b64      	subs	r4, r4, r5
 801085e:	10a4      	asrs	r4, r4, #2
 8010860:	42a6      	cmp	r6, r4
 8010862:	d109      	bne.n	8010878 <__libc_init_array+0x24>
 8010864:	f004 fb18 	bl	8014e98 <_init>
 8010868:	2600      	movs	r6, #0
 801086a:	4d0a      	ldr	r5, [pc, #40]	; (8010894 <__libc_init_array+0x40>)
 801086c:	4c0a      	ldr	r4, [pc, #40]	; (8010898 <__libc_init_array+0x44>)
 801086e:	1b64      	subs	r4, r4, r5
 8010870:	10a4      	asrs	r4, r4, #2
 8010872:	42a6      	cmp	r6, r4
 8010874:	d105      	bne.n	8010882 <__libc_init_array+0x2e>
 8010876:	bd70      	pop	{r4, r5, r6, pc}
 8010878:	f855 3b04 	ldr.w	r3, [r5], #4
 801087c:	4798      	blx	r3
 801087e:	3601      	adds	r6, #1
 8010880:	e7ee      	b.n	8010860 <__libc_init_array+0xc>
 8010882:	f855 3b04 	ldr.w	r3, [r5], #4
 8010886:	4798      	blx	r3
 8010888:	3601      	adds	r6, #1
 801088a:	e7f2      	b.n	8010872 <__libc_init_array+0x1e>
 801088c:	08015eb0 	.word	0x08015eb0
 8010890:	08015eb0 	.word	0x08015eb0
 8010894:	08015eb0 	.word	0x08015eb0
 8010898:	08015eb4 	.word	0x08015eb4

0801089c <__retarget_lock_init_recursive>:
 801089c:	4770      	bx	lr

0801089e <__retarget_lock_acquire_recursive>:
 801089e:	4770      	bx	lr

080108a0 <__retarget_lock_release_recursive>:
 80108a0:	4770      	bx	lr
	...

080108a4 <malloc>:
 80108a4:	4b02      	ldr	r3, [pc, #8]	; (80108b0 <malloc+0xc>)
 80108a6:	4601      	mov	r1, r0
 80108a8:	6818      	ldr	r0, [r3, #0]
 80108aa:	f000 b889 	b.w	80109c0 <_malloc_r>
 80108ae:	bf00      	nop
 80108b0:	20000224 	.word	0x20000224

080108b4 <free>:
 80108b4:	4b02      	ldr	r3, [pc, #8]	; (80108c0 <free+0xc>)
 80108b6:	4601      	mov	r1, r0
 80108b8:	6818      	ldr	r0, [r3, #0]
 80108ba:	f000 b819 	b.w	80108f0 <_free_r>
 80108be:	bf00      	nop
 80108c0:	20000224 	.word	0x20000224

080108c4 <memcpy>:
 80108c4:	440a      	add	r2, r1
 80108c6:	4291      	cmp	r1, r2
 80108c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80108cc:	d100      	bne.n	80108d0 <memcpy+0xc>
 80108ce:	4770      	bx	lr
 80108d0:	b510      	push	{r4, lr}
 80108d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108d6:	4291      	cmp	r1, r2
 80108d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80108dc:	d1f9      	bne.n	80108d2 <memcpy+0xe>
 80108de:	bd10      	pop	{r4, pc}

080108e0 <memset>:
 80108e0:	4603      	mov	r3, r0
 80108e2:	4402      	add	r2, r0
 80108e4:	4293      	cmp	r3, r2
 80108e6:	d100      	bne.n	80108ea <memset+0xa>
 80108e8:	4770      	bx	lr
 80108ea:	f803 1b01 	strb.w	r1, [r3], #1
 80108ee:	e7f9      	b.n	80108e4 <memset+0x4>

080108f0 <_free_r>:
 80108f0:	b538      	push	{r3, r4, r5, lr}
 80108f2:	4605      	mov	r5, r0
 80108f4:	2900      	cmp	r1, #0
 80108f6:	d040      	beq.n	801097a <_free_r+0x8a>
 80108f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108fc:	1f0c      	subs	r4, r1, #4
 80108fe:	2b00      	cmp	r3, #0
 8010900:	bfb8      	it	lt
 8010902:	18e4      	addlt	r4, r4, r3
 8010904:	f003 f91a 	bl	8013b3c <__malloc_lock>
 8010908:	4a1c      	ldr	r2, [pc, #112]	; (801097c <_free_r+0x8c>)
 801090a:	6813      	ldr	r3, [r2, #0]
 801090c:	b933      	cbnz	r3, 801091c <_free_r+0x2c>
 801090e:	6063      	str	r3, [r4, #4]
 8010910:	6014      	str	r4, [r2, #0]
 8010912:	4628      	mov	r0, r5
 8010914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010918:	f003 b916 	b.w	8013b48 <__malloc_unlock>
 801091c:	42a3      	cmp	r3, r4
 801091e:	d908      	bls.n	8010932 <_free_r+0x42>
 8010920:	6820      	ldr	r0, [r4, #0]
 8010922:	1821      	adds	r1, r4, r0
 8010924:	428b      	cmp	r3, r1
 8010926:	bf01      	itttt	eq
 8010928:	6819      	ldreq	r1, [r3, #0]
 801092a:	685b      	ldreq	r3, [r3, #4]
 801092c:	1809      	addeq	r1, r1, r0
 801092e:	6021      	streq	r1, [r4, #0]
 8010930:	e7ed      	b.n	801090e <_free_r+0x1e>
 8010932:	461a      	mov	r2, r3
 8010934:	685b      	ldr	r3, [r3, #4]
 8010936:	b10b      	cbz	r3, 801093c <_free_r+0x4c>
 8010938:	42a3      	cmp	r3, r4
 801093a:	d9fa      	bls.n	8010932 <_free_r+0x42>
 801093c:	6811      	ldr	r1, [r2, #0]
 801093e:	1850      	adds	r0, r2, r1
 8010940:	42a0      	cmp	r0, r4
 8010942:	d10b      	bne.n	801095c <_free_r+0x6c>
 8010944:	6820      	ldr	r0, [r4, #0]
 8010946:	4401      	add	r1, r0
 8010948:	1850      	adds	r0, r2, r1
 801094a:	4283      	cmp	r3, r0
 801094c:	6011      	str	r1, [r2, #0]
 801094e:	d1e0      	bne.n	8010912 <_free_r+0x22>
 8010950:	6818      	ldr	r0, [r3, #0]
 8010952:	685b      	ldr	r3, [r3, #4]
 8010954:	4401      	add	r1, r0
 8010956:	6011      	str	r1, [r2, #0]
 8010958:	6053      	str	r3, [r2, #4]
 801095a:	e7da      	b.n	8010912 <_free_r+0x22>
 801095c:	d902      	bls.n	8010964 <_free_r+0x74>
 801095e:	230c      	movs	r3, #12
 8010960:	602b      	str	r3, [r5, #0]
 8010962:	e7d6      	b.n	8010912 <_free_r+0x22>
 8010964:	6820      	ldr	r0, [r4, #0]
 8010966:	1821      	adds	r1, r4, r0
 8010968:	428b      	cmp	r3, r1
 801096a:	bf01      	itttt	eq
 801096c:	6819      	ldreq	r1, [r3, #0]
 801096e:	685b      	ldreq	r3, [r3, #4]
 8010970:	1809      	addeq	r1, r1, r0
 8010972:	6021      	streq	r1, [r4, #0]
 8010974:	6063      	str	r3, [r4, #4]
 8010976:	6054      	str	r4, [r2, #4]
 8010978:	e7cb      	b.n	8010912 <_free_r+0x22>
 801097a:	bd38      	pop	{r3, r4, r5, pc}
 801097c:	2000cc4c 	.word	0x2000cc4c

08010980 <sbrk_aligned>:
 8010980:	b570      	push	{r4, r5, r6, lr}
 8010982:	4e0e      	ldr	r6, [pc, #56]	; (80109bc <sbrk_aligned+0x3c>)
 8010984:	460c      	mov	r4, r1
 8010986:	6831      	ldr	r1, [r6, #0]
 8010988:	4605      	mov	r5, r0
 801098a:	b911      	cbnz	r1, 8010992 <sbrk_aligned+0x12>
 801098c:	f000 fd56 	bl	801143c <_sbrk_r>
 8010990:	6030      	str	r0, [r6, #0]
 8010992:	4621      	mov	r1, r4
 8010994:	4628      	mov	r0, r5
 8010996:	f000 fd51 	bl	801143c <_sbrk_r>
 801099a:	1c43      	adds	r3, r0, #1
 801099c:	d00a      	beq.n	80109b4 <sbrk_aligned+0x34>
 801099e:	1cc4      	adds	r4, r0, #3
 80109a0:	f024 0403 	bic.w	r4, r4, #3
 80109a4:	42a0      	cmp	r0, r4
 80109a6:	d007      	beq.n	80109b8 <sbrk_aligned+0x38>
 80109a8:	1a21      	subs	r1, r4, r0
 80109aa:	4628      	mov	r0, r5
 80109ac:	f000 fd46 	bl	801143c <_sbrk_r>
 80109b0:	3001      	adds	r0, #1
 80109b2:	d101      	bne.n	80109b8 <sbrk_aligned+0x38>
 80109b4:	f04f 34ff 	mov.w	r4, #4294967295
 80109b8:	4620      	mov	r0, r4
 80109ba:	bd70      	pop	{r4, r5, r6, pc}
 80109bc:	2000cc50 	.word	0x2000cc50

080109c0 <_malloc_r>:
 80109c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109c4:	1ccd      	adds	r5, r1, #3
 80109c6:	f025 0503 	bic.w	r5, r5, #3
 80109ca:	3508      	adds	r5, #8
 80109cc:	2d0c      	cmp	r5, #12
 80109ce:	bf38      	it	cc
 80109d0:	250c      	movcc	r5, #12
 80109d2:	2d00      	cmp	r5, #0
 80109d4:	4607      	mov	r7, r0
 80109d6:	db01      	blt.n	80109dc <_malloc_r+0x1c>
 80109d8:	42a9      	cmp	r1, r5
 80109da:	d905      	bls.n	80109e8 <_malloc_r+0x28>
 80109dc:	230c      	movs	r3, #12
 80109de:	2600      	movs	r6, #0
 80109e0:	603b      	str	r3, [r7, #0]
 80109e2:	4630      	mov	r0, r6
 80109e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109e8:	4e2e      	ldr	r6, [pc, #184]	; (8010aa4 <_malloc_r+0xe4>)
 80109ea:	f003 f8a7 	bl	8013b3c <__malloc_lock>
 80109ee:	6833      	ldr	r3, [r6, #0]
 80109f0:	461c      	mov	r4, r3
 80109f2:	bb34      	cbnz	r4, 8010a42 <_malloc_r+0x82>
 80109f4:	4629      	mov	r1, r5
 80109f6:	4638      	mov	r0, r7
 80109f8:	f7ff ffc2 	bl	8010980 <sbrk_aligned>
 80109fc:	1c43      	adds	r3, r0, #1
 80109fe:	4604      	mov	r4, r0
 8010a00:	d14d      	bne.n	8010a9e <_malloc_r+0xde>
 8010a02:	6834      	ldr	r4, [r6, #0]
 8010a04:	4626      	mov	r6, r4
 8010a06:	2e00      	cmp	r6, #0
 8010a08:	d140      	bne.n	8010a8c <_malloc_r+0xcc>
 8010a0a:	6823      	ldr	r3, [r4, #0]
 8010a0c:	4631      	mov	r1, r6
 8010a0e:	4638      	mov	r0, r7
 8010a10:	eb04 0803 	add.w	r8, r4, r3
 8010a14:	f000 fd12 	bl	801143c <_sbrk_r>
 8010a18:	4580      	cmp	r8, r0
 8010a1a:	d13a      	bne.n	8010a92 <_malloc_r+0xd2>
 8010a1c:	6821      	ldr	r1, [r4, #0]
 8010a1e:	3503      	adds	r5, #3
 8010a20:	1a6d      	subs	r5, r5, r1
 8010a22:	f025 0503 	bic.w	r5, r5, #3
 8010a26:	3508      	adds	r5, #8
 8010a28:	2d0c      	cmp	r5, #12
 8010a2a:	bf38      	it	cc
 8010a2c:	250c      	movcc	r5, #12
 8010a2e:	4638      	mov	r0, r7
 8010a30:	4629      	mov	r1, r5
 8010a32:	f7ff ffa5 	bl	8010980 <sbrk_aligned>
 8010a36:	3001      	adds	r0, #1
 8010a38:	d02b      	beq.n	8010a92 <_malloc_r+0xd2>
 8010a3a:	6823      	ldr	r3, [r4, #0]
 8010a3c:	442b      	add	r3, r5
 8010a3e:	6023      	str	r3, [r4, #0]
 8010a40:	e00e      	b.n	8010a60 <_malloc_r+0xa0>
 8010a42:	6822      	ldr	r2, [r4, #0]
 8010a44:	1b52      	subs	r2, r2, r5
 8010a46:	d41e      	bmi.n	8010a86 <_malloc_r+0xc6>
 8010a48:	2a0b      	cmp	r2, #11
 8010a4a:	d916      	bls.n	8010a7a <_malloc_r+0xba>
 8010a4c:	1961      	adds	r1, r4, r5
 8010a4e:	42a3      	cmp	r3, r4
 8010a50:	6025      	str	r5, [r4, #0]
 8010a52:	bf18      	it	ne
 8010a54:	6059      	strne	r1, [r3, #4]
 8010a56:	6863      	ldr	r3, [r4, #4]
 8010a58:	bf08      	it	eq
 8010a5a:	6031      	streq	r1, [r6, #0]
 8010a5c:	5162      	str	r2, [r4, r5]
 8010a5e:	604b      	str	r3, [r1, #4]
 8010a60:	4638      	mov	r0, r7
 8010a62:	f104 060b 	add.w	r6, r4, #11
 8010a66:	f003 f86f 	bl	8013b48 <__malloc_unlock>
 8010a6a:	f026 0607 	bic.w	r6, r6, #7
 8010a6e:	1d23      	adds	r3, r4, #4
 8010a70:	1af2      	subs	r2, r6, r3
 8010a72:	d0b6      	beq.n	80109e2 <_malloc_r+0x22>
 8010a74:	1b9b      	subs	r3, r3, r6
 8010a76:	50a3      	str	r3, [r4, r2]
 8010a78:	e7b3      	b.n	80109e2 <_malloc_r+0x22>
 8010a7a:	6862      	ldr	r2, [r4, #4]
 8010a7c:	42a3      	cmp	r3, r4
 8010a7e:	bf0c      	ite	eq
 8010a80:	6032      	streq	r2, [r6, #0]
 8010a82:	605a      	strne	r2, [r3, #4]
 8010a84:	e7ec      	b.n	8010a60 <_malloc_r+0xa0>
 8010a86:	4623      	mov	r3, r4
 8010a88:	6864      	ldr	r4, [r4, #4]
 8010a8a:	e7b2      	b.n	80109f2 <_malloc_r+0x32>
 8010a8c:	4634      	mov	r4, r6
 8010a8e:	6876      	ldr	r6, [r6, #4]
 8010a90:	e7b9      	b.n	8010a06 <_malloc_r+0x46>
 8010a92:	230c      	movs	r3, #12
 8010a94:	4638      	mov	r0, r7
 8010a96:	603b      	str	r3, [r7, #0]
 8010a98:	f003 f856 	bl	8013b48 <__malloc_unlock>
 8010a9c:	e7a1      	b.n	80109e2 <_malloc_r+0x22>
 8010a9e:	6025      	str	r5, [r4, #0]
 8010aa0:	e7de      	b.n	8010a60 <_malloc_r+0xa0>
 8010aa2:	bf00      	nop
 8010aa4:	2000cc4c 	.word	0x2000cc4c

08010aa8 <__cvt>:
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010aae:	461f      	mov	r7, r3
 8010ab0:	bfbb      	ittet	lt
 8010ab2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8010ab6:	461f      	movlt	r7, r3
 8010ab8:	2300      	movge	r3, #0
 8010aba:	232d      	movlt	r3, #45	; 0x2d
 8010abc:	b088      	sub	sp, #32
 8010abe:	4614      	mov	r4, r2
 8010ac0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010ac2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010ac4:	7013      	strb	r3, [r2, #0]
 8010ac6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010ac8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8010acc:	f023 0820 	bic.w	r8, r3, #32
 8010ad0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010ad4:	d005      	beq.n	8010ae2 <__cvt+0x3a>
 8010ad6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010ada:	d100      	bne.n	8010ade <__cvt+0x36>
 8010adc:	3501      	adds	r5, #1
 8010ade:	2302      	movs	r3, #2
 8010ae0:	e000      	b.n	8010ae4 <__cvt+0x3c>
 8010ae2:	2303      	movs	r3, #3
 8010ae4:	aa07      	add	r2, sp, #28
 8010ae6:	9204      	str	r2, [sp, #16]
 8010ae8:	aa06      	add	r2, sp, #24
 8010aea:	e9cd a202 	strd	sl, r2, [sp, #8]
 8010aee:	e9cd 3500 	strd	r3, r5, [sp]
 8010af2:	4622      	mov	r2, r4
 8010af4:	463b      	mov	r3, r7
 8010af6:	f001 fdc7 	bl	8012688 <_dtoa_r>
 8010afa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010afe:	4606      	mov	r6, r0
 8010b00:	d102      	bne.n	8010b08 <__cvt+0x60>
 8010b02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010b04:	07db      	lsls	r3, r3, #31
 8010b06:	d522      	bpl.n	8010b4e <__cvt+0xa6>
 8010b08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010b0c:	eb06 0905 	add.w	r9, r6, r5
 8010b10:	d110      	bne.n	8010b34 <__cvt+0x8c>
 8010b12:	7833      	ldrb	r3, [r6, #0]
 8010b14:	2b30      	cmp	r3, #48	; 0x30
 8010b16:	d10a      	bne.n	8010b2e <__cvt+0x86>
 8010b18:	2200      	movs	r2, #0
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	4620      	mov	r0, r4
 8010b1e:	4639      	mov	r1, r7
 8010b20:	f7ef ffb2 	bl	8000a88 <__aeabi_dcmpeq>
 8010b24:	b918      	cbnz	r0, 8010b2e <__cvt+0x86>
 8010b26:	f1c5 0501 	rsb	r5, r5, #1
 8010b2a:	f8ca 5000 	str.w	r5, [sl]
 8010b2e:	f8da 3000 	ldr.w	r3, [sl]
 8010b32:	4499      	add	r9, r3
 8010b34:	2200      	movs	r2, #0
 8010b36:	2300      	movs	r3, #0
 8010b38:	4620      	mov	r0, r4
 8010b3a:	4639      	mov	r1, r7
 8010b3c:	f7ef ffa4 	bl	8000a88 <__aeabi_dcmpeq>
 8010b40:	b108      	cbz	r0, 8010b46 <__cvt+0x9e>
 8010b42:	f8cd 901c 	str.w	r9, [sp, #28]
 8010b46:	2230      	movs	r2, #48	; 0x30
 8010b48:	9b07      	ldr	r3, [sp, #28]
 8010b4a:	454b      	cmp	r3, r9
 8010b4c:	d307      	bcc.n	8010b5e <__cvt+0xb6>
 8010b4e:	4630      	mov	r0, r6
 8010b50:	9b07      	ldr	r3, [sp, #28]
 8010b52:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010b54:	1b9b      	subs	r3, r3, r6
 8010b56:	6013      	str	r3, [r2, #0]
 8010b58:	b008      	add	sp, #32
 8010b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b5e:	1c59      	adds	r1, r3, #1
 8010b60:	9107      	str	r1, [sp, #28]
 8010b62:	701a      	strb	r2, [r3, #0]
 8010b64:	e7f0      	b.n	8010b48 <__cvt+0xa0>

08010b66 <__exponent>:
 8010b66:	4603      	mov	r3, r0
 8010b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b6a:	2900      	cmp	r1, #0
 8010b6c:	f803 2b02 	strb.w	r2, [r3], #2
 8010b70:	bfb6      	itet	lt
 8010b72:	222d      	movlt	r2, #45	; 0x2d
 8010b74:	222b      	movge	r2, #43	; 0x2b
 8010b76:	4249      	neglt	r1, r1
 8010b78:	2909      	cmp	r1, #9
 8010b7a:	7042      	strb	r2, [r0, #1]
 8010b7c:	dd2b      	ble.n	8010bd6 <__exponent+0x70>
 8010b7e:	f10d 0407 	add.w	r4, sp, #7
 8010b82:	46a4      	mov	ip, r4
 8010b84:	270a      	movs	r7, #10
 8010b86:	fb91 f6f7 	sdiv	r6, r1, r7
 8010b8a:	460a      	mov	r2, r1
 8010b8c:	46a6      	mov	lr, r4
 8010b8e:	fb07 1516 	mls	r5, r7, r6, r1
 8010b92:	2a63      	cmp	r2, #99	; 0x63
 8010b94:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8010b98:	4631      	mov	r1, r6
 8010b9a:	f104 34ff 	add.w	r4, r4, #4294967295
 8010b9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010ba2:	dcf0      	bgt.n	8010b86 <__exponent+0x20>
 8010ba4:	3130      	adds	r1, #48	; 0x30
 8010ba6:	f1ae 0502 	sub.w	r5, lr, #2
 8010baa:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010bae:	4629      	mov	r1, r5
 8010bb0:	1c44      	adds	r4, r0, #1
 8010bb2:	4561      	cmp	r1, ip
 8010bb4:	d30a      	bcc.n	8010bcc <__exponent+0x66>
 8010bb6:	f10d 0209 	add.w	r2, sp, #9
 8010bba:	eba2 020e 	sub.w	r2, r2, lr
 8010bbe:	4565      	cmp	r5, ip
 8010bc0:	bf88      	it	hi
 8010bc2:	2200      	movhi	r2, #0
 8010bc4:	4413      	add	r3, r2
 8010bc6:	1a18      	subs	r0, r3, r0
 8010bc8:	b003      	add	sp, #12
 8010bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bcc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010bd0:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010bd4:	e7ed      	b.n	8010bb2 <__exponent+0x4c>
 8010bd6:	2330      	movs	r3, #48	; 0x30
 8010bd8:	3130      	adds	r1, #48	; 0x30
 8010bda:	7083      	strb	r3, [r0, #2]
 8010bdc:	70c1      	strb	r1, [r0, #3]
 8010bde:	1d03      	adds	r3, r0, #4
 8010be0:	e7f1      	b.n	8010bc6 <__exponent+0x60>
	...

08010be4 <_printf_float>:
 8010be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010be8:	b091      	sub	sp, #68	; 0x44
 8010bea:	460c      	mov	r4, r1
 8010bec:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8010bf0:	4616      	mov	r6, r2
 8010bf2:	461f      	mov	r7, r3
 8010bf4:	4605      	mov	r5, r0
 8010bf6:	f002 ff6b 	bl	8013ad0 <_localeconv_r>
 8010bfa:	6803      	ldr	r3, [r0, #0]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8010c00:	f7ef fb16 	bl	8000230 <strlen>
 8010c04:	2300      	movs	r3, #0
 8010c06:	930e      	str	r3, [sp, #56]	; 0x38
 8010c08:	f8d8 3000 	ldr.w	r3, [r8]
 8010c0c:	900a      	str	r0, [sp, #40]	; 0x28
 8010c0e:	3307      	adds	r3, #7
 8010c10:	f023 0307 	bic.w	r3, r3, #7
 8010c14:	f103 0208 	add.w	r2, r3, #8
 8010c18:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010c1c:	f8d4 b000 	ldr.w	fp, [r4]
 8010c20:	f8c8 2000 	str.w	r2, [r8]
 8010c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c28:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010c2c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8010c30:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8010c34:	930b      	str	r3, [sp, #44]	; 0x2c
 8010c36:	f04f 32ff 	mov.w	r2, #4294967295
 8010c3a:	4640      	mov	r0, r8
 8010c3c:	4b9c      	ldr	r3, [pc, #624]	; (8010eb0 <_printf_float+0x2cc>)
 8010c3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010c40:	f7ef ff54 	bl	8000aec <__aeabi_dcmpun>
 8010c44:	bb70      	cbnz	r0, 8010ca4 <_printf_float+0xc0>
 8010c46:	f04f 32ff 	mov.w	r2, #4294967295
 8010c4a:	4640      	mov	r0, r8
 8010c4c:	4b98      	ldr	r3, [pc, #608]	; (8010eb0 <_printf_float+0x2cc>)
 8010c4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010c50:	f7ef ff2e 	bl	8000ab0 <__aeabi_dcmple>
 8010c54:	bb30      	cbnz	r0, 8010ca4 <_printf_float+0xc0>
 8010c56:	2200      	movs	r2, #0
 8010c58:	2300      	movs	r3, #0
 8010c5a:	4640      	mov	r0, r8
 8010c5c:	4651      	mov	r1, sl
 8010c5e:	f7ef ff1d 	bl	8000a9c <__aeabi_dcmplt>
 8010c62:	b110      	cbz	r0, 8010c6a <_printf_float+0x86>
 8010c64:	232d      	movs	r3, #45	; 0x2d
 8010c66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c6a:	4b92      	ldr	r3, [pc, #584]	; (8010eb4 <_printf_float+0x2d0>)
 8010c6c:	4892      	ldr	r0, [pc, #584]	; (8010eb8 <_printf_float+0x2d4>)
 8010c6e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010c72:	bf94      	ite	ls
 8010c74:	4698      	movls	r8, r3
 8010c76:	4680      	movhi	r8, r0
 8010c78:	2303      	movs	r3, #3
 8010c7a:	f04f 0a00 	mov.w	sl, #0
 8010c7e:	6123      	str	r3, [r4, #16]
 8010c80:	f02b 0304 	bic.w	r3, fp, #4
 8010c84:	6023      	str	r3, [r4, #0]
 8010c86:	4633      	mov	r3, r6
 8010c88:	4621      	mov	r1, r4
 8010c8a:	4628      	mov	r0, r5
 8010c8c:	9700      	str	r7, [sp, #0]
 8010c8e:	aa0f      	add	r2, sp, #60	; 0x3c
 8010c90:	f000 f9d4 	bl	801103c <_printf_common>
 8010c94:	3001      	adds	r0, #1
 8010c96:	f040 8090 	bne.w	8010dba <_printf_float+0x1d6>
 8010c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c9e:	b011      	add	sp, #68	; 0x44
 8010ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ca4:	4642      	mov	r2, r8
 8010ca6:	4653      	mov	r3, sl
 8010ca8:	4640      	mov	r0, r8
 8010caa:	4651      	mov	r1, sl
 8010cac:	f7ef ff1e 	bl	8000aec <__aeabi_dcmpun>
 8010cb0:	b148      	cbz	r0, 8010cc6 <_printf_float+0xe2>
 8010cb2:	f1ba 0f00 	cmp.w	sl, #0
 8010cb6:	bfb8      	it	lt
 8010cb8:	232d      	movlt	r3, #45	; 0x2d
 8010cba:	4880      	ldr	r0, [pc, #512]	; (8010ebc <_printf_float+0x2d8>)
 8010cbc:	bfb8      	it	lt
 8010cbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010cc2:	4b7f      	ldr	r3, [pc, #508]	; (8010ec0 <_printf_float+0x2dc>)
 8010cc4:	e7d3      	b.n	8010c6e <_printf_float+0x8a>
 8010cc6:	6863      	ldr	r3, [r4, #4]
 8010cc8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8010ccc:	1c5a      	adds	r2, r3, #1
 8010cce:	d142      	bne.n	8010d56 <_printf_float+0x172>
 8010cd0:	2306      	movs	r3, #6
 8010cd2:	6063      	str	r3, [r4, #4]
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	9206      	str	r2, [sp, #24]
 8010cd8:	aa0e      	add	r2, sp, #56	; 0x38
 8010cda:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8010cde:	aa0d      	add	r2, sp, #52	; 0x34
 8010ce0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8010ce4:	9203      	str	r2, [sp, #12]
 8010ce6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8010cea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010cee:	6023      	str	r3, [r4, #0]
 8010cf0:	6863      	ldr	r3, [r4, #4]
 8010cf2:	4642      	mov	r2, r8
 8010cf4:	9300      	str	r3, [sp, #0]
 8010cf6:	4628      	mov	r0, r5
 8010cf8:	4653      	mov	r3, sl
 8010cfa:	910b      	str	r1, [sp, #44]	; 0x2c
 8010cfc:	f7ff fed4 	bl	8010aa8 <__cvt>
 8010d00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010d02:	4680      	mov	r8, r0
 8010d04:	2947      	cmp	r1, #71	; 0x47
 8010d06:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010d08:	d108      	bne.n	8010d1c <_printf_float+0x138>
 8010d0a:	1cc8      	adds	r0, r1, #3
 8010d0c:	db02      	blt.n	8010d14 <_printf_float+0x130>
 8010d0e:	6863      	ldr	r3, [r4, #4]
 8010d10:	4299      	cmp	r1, r3
 8010d12:	dd40      	ble.n	8010d96 <_printf_float+0x1b2>
 8010d14:	f1a9 0902 	sub.w	r9, r9, #2
 8010d18:	fa5f f989 	uxtb.w	r9, r9
 8010d1c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010d20:	d81f      	bhi.n	8010d62 <_printf_float+0x17e>
 8010d22:	464a      	mov	r2, r9
 8010d24:	3901      	subs	r1, #1
 8010d26:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010d2a:	910d      	str	r1, [sp, #52]	; 0x34
 8010d2c:	f7ff ff1b 	bl	8010b66 <__exponent>
 8010d30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d32:	4682      	mov	sl, r0
 8010d34:	1813      	adds	r3, r2, r0
 8010d36:	2a01      	cmp	r2, #1
 8010d38:	6123      	str	r3, [r4, #16]
 8010d3a:	dc02      	bgt.n	8010d42 <_printf_float+0x15e>
 8010d3c:	6822      	ldr	r2, [r4, #0]
 8010d3e:	07d2      	lsls	r2, r2, #31
 8010d40:	d501      	bpl.n	8010d46 <_printf_float+0x162>
 8010d42:	3301      	adds	r3, #1
 8010d44:	6123      	str	r3, [r4, #16]
 8010d46:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d09b      	beq.n	8010c86 <_printf_float+0xa2>
 8010d4e:	232d      	movs	r3, #45	; 0x2d
 8010d50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d54:	e797      	b.n	8010c86 <_printf_float+0xa2>
 8010d56:	2947      	cmp	r1, #71	; 0x47
 8010d58:	d1bc      	bne.n	8010cd4 <_printf_float+0xf0>
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d1ba      	bne.n	8010cd4 <_printf_float+0xf0>
 8010d5e:	2301      	movs	r3, #1
 8010d60:	e7b7      	b.n	8010cd2 <_printf_float+0xee>
 8010d62:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010d66:	d118      	bne.n	8010d9a <_printf_float+0x1b6>
 8010d68:	2900      	cmp	r1, #0
 8010d6a:	6863      	ldr	r3, [r4, #4]
 8010d6c:	dd0b      	ble.n	8010d86 <_printf_float+0x1a2>
 8010d6e:	6121      	str	r1, [r4, #16]
 8010d70:	b913      	cbnz	r3, 8010d78 <_printf_float+0x194>
 8010d72:	6822      	ldr	r2, [r4, #0]
 8010d74:	07d0      	lsls	r0, r2, #31
 8010d76:	d502      	bpl.n	8010d7e <_printf_float+0x19a>
 8010d78:	3301      	adds	r3, #1
 8010d7a:	440b      	add	r3, r1
 8010d7c:	6123      	str	r3, [r4, #16]
 8010d7e:	f04f 0a00 	mov.w	sl, #0
 8010d82:	65a1      	str	r1, [r4, #88]	; 0x58
 8010d84:	e7df      	b.n	8010d46 <_printf_float+0x162>
 8010d86:	b913      	cbnz	r3, 8010d8e <_printf_float+0x1aa>
 8010d88:	6822      	ldr	r2, [r4, #0]
 8010d8a:	07d2      	lsls	r2, r2, #31
 8010d8c:	d501      	bpl.n	8010d92 <_printf_float+0x1ae>
 8010d8e:	3302      	adds	r3, #2
 8010d90:	e7f4      	b.n	8010d7c <_printf_float+0x198>
 8010d92:	2301      	movs	r3, #1
 8010d94:	e7f2      	b.n	8010d7c <_printf_float+0x198>
 8010d96:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010d9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d9c:	4299      	cmp	r1, r3
 8010d9e:	db05      	blt.n	8010dac <_printf_float+0x1c8>
 8010da0:	6823      	ldr	r3, [r4, #0]
 8010da2:	6121      	str	r1, [r4, #16]
 8010da4:	07d8      	lsls	r0, r3, #31
 8010da6:	d5ea      	bpl.n	8010d7e <_printf_float+0x19a>
 8010da8:	1c4b      	adds	r3, r1, #1
 8010daa:	e7e7      	b.n	8010d7c <_printf_float+0x198>
 8010dac:	2900      	cmp	r1, #0
 8010dae:	bfcc      	ite	gt
 8010db0:	2201      	movgt	r2, #1
 8010db2:	f1c1 0202 	rsble	r2, r1, #2
 8010db6:	4413      	add	r3, r2
 8010db8:	e7e0      	b.n	8010d7c <_printf_float+0x198>
 8010dba:	6823      	ldr	r3, [r4, #0]
 8010dbc:	055a      	lsls	r2, r3, #21
 8010dbe:	d407      	bmi.n	8010dd0 <_printf_float+0x1ec>
 8010dc0:	6923      	ldr	r3, [r4, #16]
 8010dc2:	4642      	mov	r2, r8
 8010dc4:	4631      	mov	r1, r6
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	47b8      	blx	r7
 8010dca:	3001      	adds	r0, #1
 8010dcc:	d12b      	bne.n	8010e26 <_printf_float+0x242>
 8010dce:	e764      	b.n	8010c9a <_printf_float+0xb6>
 8010dd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010dd4:	f240 80dd 	bls.w	8010f92 <_printf_float+0x3ae>
 8010dd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010ddc:	2200      	movs	r2, #0
 8010dde:	2300      	movs	r3, #0
 8010de0:	f7ef fe52 	bl	8000a88 <__aeabi_dcmpeq>
 8010de4:	2800      	cmp	r0, #0
 8010de6:	d033      	beq.n	8010e50 <_printf_float+0x26c>
 8010de8:	2301      	movs	r3, #1
 8010dea:	4631      	mov	r1, r6
 8010dec:	4628      	mov	r0, r5
 8010dee:	4a35      	ldr	r2, [pc, #212]	; (8010ec4 <_printf_float+0x2e0>)
 8010df0:	47b8      	blx	r7
 8010df2:	3001      	adds	r0, #1
 8010df4:	f43f af51 	beq.w	8010c9a <_printf_float+0xb6>
 8010df8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8010dfc:	429a      	cmp	r2, r3
 8010dfe:	db02      	blt.n	8010e06 <_printf_float+0x222>
 8010e00:	6823      	ldr	r3, [r4, #0]
 8010e02:	07d8      	lsls	r0, r3, #31
 8010e04:	d50f      	bpl.n	8010e26 <_printf_float+0x242>
 8010e06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e0a:	4631      	mov	r1, r6
 8010e0c:	4628      	mov	r0, r5
 8010e0e:	47b8      	blx	r7
 8010e10:	3001      	adds	r0, #1
 8010e12:	f43f af42 	beq.w	8010c9a <_printf_float+0xb6>
 8010e16:	f04f 0800 	mov.w	r8, #0
 8010e1a:	f104 091a 	add.w	r9, r4, #26
 8010e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e20:	3b01      	subs	r3, #1
 8010e22:	4543      	cmp	r3, r8
 8010e24:	dc09      	bgt.n	8010e3a <_printf_float+0x256>
 8010e26:	6823      	ldr	r3, [r4, #0]
 8010e28:	079b      	lsls	r3, r3, #30
 8010e2a:	f100 8102 	bmi.w	8011032 <_printf_float+0x44e>
 8010e2e:	68e0      	ldr	r0, [r4, #12]
 8010e30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e32:	4298      	cmp	r0, r3
 8010e34:	bfb8      	it	lt
 8010e36:	4618      	movlt	r0, r3
 8010e38:	e731      	b.n	8010c9e <_printf_float+0xba>
 8010e3a:	2301      	movs	r3, #1
 8010e3c:	464a      	mov	r2, r9
 8010e3e:	4631      	mov	r1, r6
 8010e40:	4628      	mov	r0, r5
 8010e42:	47b8      	blx	r7
 8010e44:	3001      	adds	r0, #1
 8010e46:	f43f af28 	beq.w	8010c9a <_printf_float+0xb6>
 8010e4a:	f108 0801 	add.w	r8, r8, #1
 8010e4e:	e7e6      	b.n	8010e1e <_printf_float+0x23a>
 8010e50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	dc38      	bgt.n	8010ec8 <_printf_float+0x2e4>
 8010e56:	2301      	movs	r3, #1
 8010e58:	4631      	mov	r1, r6
 8010e5a:	4628      	mov	r0, r5
 8010e5c:	4a19      	ldr	r2, [pc, #100]	; (8010ec4 <_printf_float+0x2e0>)
 8010e5e:	47b8      	blx	r7
 8010e60:	3001      	adds	r0, #1
 8010e62:	f43f af1a 	beq.w	8010c9a <_printf_float+0xb6>
 8010e66:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8010e6a:	4313      	orrs	r3, r2
 8010e6c:	d102      	bne.n	8010e74 <_printf_float+0x290>
 8010e6e:	6823      	ldr	r3, [r4, #0]
 8010e70:	07d9      	lsls	r1, r3, #31
 8010e72:	d5d8      	bpl.n	8010e26 <_printf_float+0x242>
 8010e74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e78:	4631      	mov	r1, r6
 8010e7a:	4628      	mov	r0, r5
 8010e7c:	47b8      	blx	r7
 8010e7e:	3001      	adds	r0, #1
 8010e80:	f43f af0b 	beq.w	8010c9a <_printf_float+0xb6>
 8010e84:	f04f 0900 	mov.w	r9, #0
 8010e88:	f104 0a1a 	add.w	sl, r4, #26
 8010e8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e8e:	425b      	negs	r3, r3
 8010e90:	454b      	cmp	r3, r9
 8010e92:	dc01      	bgt.n	8010e98 <_printf_float+0x2b4>
 8010e94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e96:	e794      	b.n	8010dc2 <_printf_float+0x1de>
 8010e98:	2301      	movs	r3, #1
 8010e9a:	4652      	mov	r2, sl
 8010e9c:	4631      	mov	r1, r6
 8010e9e:	4628      	mov	r0, r5
 8010ea0:	47b8      	blx	r7
 8010ea2:	3001      	adds	r0, #1
 8010ea4:	f43f aef9 	beq.w	8010c9a <_printf_float+0xb6>
 8010ea8:	f109 0901 	add.w	r9, r9, #1
 8010eac:	e7ee      	b.n	8010e8c <_printf_float+0x2a8>
 8010eae:	bf00      	nop
 8010eb0:	7fefffff 	.word	0x7fefffff
 8010eb4:	08015a10 	.word	0x08015a10
 8010eb8:	08015a14 	.word	0x08015a14
 8010ebc:	08015a1c 	.word	0x08015a1c
 8010ec0:	08015a18 	.word	0x08015a18
 8010ec4:	08015a20 	.word	0x08015a20
 8010ec8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010eca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	bfa8      	it	ge
 8010ed0:	461a      	movge	r2, r3
 8010ed2:	2a00      	cmp	r2, #0
 8010ed4:	4691      	mov	r9, r2
 8010ed6:	dc37      	bgt.n	8010f48 <_printf_float+0x364>
 8010ed8:	f04f 0b00 	mov.w	fp, #0
 8010edc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010ee0:	f104 021a 	add.w	r2, r4, #26
 8010ee4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010ee8:	ebaa 0309 	sub.w	r3, sl, r9
 8010eec:	455b      	cmp	r3, fp
 8010eee:	dc33      	bgt.n	8010f58 <_printf_float+0x374>
 8010ef0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8010ef4:	429a      	cmp	r2, r3
 8010ef6:	db3b      	blt.n	8010f70 <_printf_float+0x38c>
 8010ef8:	6823      	ldr	r3, [r4, #0]
 8010efa:	07da      	lsls	r2, r3, #31
 8010efc:	d438      	bmi.n	8010f70 <_printf_float+0x38c>
 8010efe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f00:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010f02:	eba3 020a 	sub.w	r2, r3, sl
 8010f06:	eba3 0901 	sub.w	r9, r3, r1
 8010f0a:	4591      	cmp	r9, r2
 8010f0c:	bfa8      	it	ge
 8010f0e:	4691      	movge	r9, r2
 8010f10:	f1b9 0f00 	cmp.w	r9, #0
 8010f14:	dc34      	bgt.n	8010f80 <_printf_float+0x39c>
 8010f16:	f04f 0800 	mov.w	r8, #0
 8010f1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010f1e:	f104 0a1a 	add.w	sl, r4, #26
 8010f22:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8010f26:	1a9b      	subs	r3, r3, r2
 8010f28:	eba3 0309 	sub.w	r3, r3, r9
 8010f2c:	4543      	cmp	r3, r8
 8010f2e:	f77f af7a 	ble.w	8010e26 <_printf_float+0x242>
 8010f32:	2301      	movs	r3, #1
 8010f34:	4652      	mov	r2, sl
 8010f36:	4631      	mov	r1, r6
 8010f38:	4628      	mov	r0, r5
 8010f3a:	47b8      	blx	r7
 8010f3c:	3001      	adds	r0, #1
 8010f3e:	f43f aeac 	beq.w	8010c9a <_printf_float+0xb6>
 8010f42:	f108 0801 	add.w	r8, r8, #1
 8010f46:	e7ec      	b.n	8010f22 <_printf_float+0x33e>
 8010f48:	4613      	mov	r3, r2
 8010f4a:	4631      	mov	r1, r6
 8010f4c:	4642      	mov	r2, r8
 8010f4e:	4628      	mov	r0, r5
 8010f50:	47b8      	blx	r7
 8010f52:	3001      	adds	r0, #1
 8010f54:	d1c0      	bne.n	8010ed8 <_printf_float+0x2f4>
 8010f56:	e6a0      	b.n	8010c9a <_printf_float+0xb6>
 8010f58:	2301      	movs	r3, #1
 8010f5a:	4631      	mov	r1, r6
 8010f5c:	4628      	mov	r0, r5
 8010f5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8010f60:	47b8      	blx	r7
 8010f62:	3001      	adds	r0, #1
 8010f64:	f43f ae99 	beq.w	8010c9a <_printf_float+0xb6>
 8010f68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010f6a:	f10b 0b01 	add.w	fp, fp, #1
 8010f6e:	e7b9      	b.n	8010ee4 <_printf_float+0x300>
 8010f70:	4631      	mov	r1, r6
 8010f72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010f76:	4628      	mov	r0, r5
 8010f78:	47b8      	blx	r7
 8010f7a:	3001      	adds	r0, #1
 8010f7c:	d1bf      	bne.n	8010efe <_printf_float+0x31a>
 8010f7e:	e68c      	b.n	8010c9a <_printf_float+0xb6>
 8010f80:	464b      	mov	r3, r9
 8010f82:	4631      	mov	r1, r6
 8010f84:	4628      	mov	r0, r5
 8010f86:	eb08 020a 	add.w	r2, r8, sl
 8010f8a:	47b8      	blx	r7
 8010f8c:	3001      	adds	r0, #1
 8010f8e:	d1c2      	bne.n	8010f16 <_printf_float+0x332>
 8010f90:	e683      	b.n	8010c9a <_printf_float+0xb6>
 8010f92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010f94:	2a01      	cmp	r2, #1
 8010f96:	dc01      	bgt.n	8010f9c <_printf_float+0x3b8>
 8010f98:	07db      	lsls	r3, r3, #31
 8010f9a:	d537      	bpl.n	801100c <_printf_float+0x428>
 8010f9c:	2301      	movs	r3, #1
 8010f9e:	4642      	mov	r2, r8
 8010fa0:	4631      	mov	r1, r6
 8010fa2:	4628      	mov	r0, r5
 8010fa4:	47b8      	blx	r7
 8010fa6:	3001      	adds	r0, #1
 8010fa8:	f43f ae77 	beq.w	8010c9a <_printf_float+0xb6>
 8010fac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010fb0:	4631      	mov	r1, r6
 8010fb2:	4628      	mov	r0, r5
 8010fb4:	47b8      	blx	r7
 8010fb6:	3001      	adds	r0, #1
 8010fb8:	f43f ae6f 	beq.w	8010c9a <_printf_float+0xb6>
 8010fbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	f7ef fd60 	bl	8000a88 <__aeabi_dcmpeq>
 8010fc8:	b9d8      	cbnz	r0, 8011002 <_printf_float+0x41e>
 8010fca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010fcc:	f108 0201 	add.w	r2, r8, #1
 8010fd0:	3b01      	subs	r3, #1
 8010fd2:	4631      	mov	r1, r6
 8010fd4:	4628      	mov	r0, r5
 8010fd6:	47b8      	blx	r7
 8010fd8:	3001      	adds	r0, #1
 8010fda:	d10e      	bne.n	8010ffa <_printf_float+0x416>
 8010fdc:	e65d      	b.n	8010c9a <_printf_float+0xb6>
 8010fde:	2301      	movs	r3, #1
 8010fe0:	464a      	mov	r2, r9
 8010fe2:	4631      	mov	r1, r6
 8010fe4:	4628      	mov	r0, r5
 8010fe6:	47b8      	blx	r7
 8010fe8:	3001      	adds	r0, #1
 8010fea:	f43f ae56 	beq.w	8010c9a <_printf_float+0xb6>
 8010fee:	f108 0801 	add.w	r8, r8, #1
 8010ff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ff4:	3b01      	subs	r3, #1
 8010ff6:	4543      	cmp	r3, r8
 8010ff8:	dcf1      	bgt.n	8010fde <_printf_float+0x3fa>
 8010ffa:	4653      	mov	r3, sl
 8010ffc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011000:	e6e0      	b.n	8010dc4 <_printf_float+0x1e0>
 8011002:	f04f 0800 	mov.w	r8, #0
 8011006:	f104 091a 	add.w	r9, r4, #26
 801100a:	e7f2      	b.n	8010ff2 <_printf_float+0x40e>
 801100c:	2301      	movs	r3, #1
 801100e:	4642      	mov	r2, r8
 8011010:	e7df      	b.n	8010fd2 <_printf_float+0x3ee>
 8011012:	2301      	movs	r3, #1
 8011014:	464a      	mov	r2, r9
 8011016:	4631      	mov	r1, r6
 8011018:	4628      	mov	r0, r5
 801101a:	47b8      	blx	r7
 801101c:	3001      	adds	r0, #1
 801101e:	f43f ae3c 	beq.w	8010c9a <_printf_float+0xb6>
 8011022:	f108 0801 	add.w	r8, r8, #1
 8011026:	68e3      	ldr	r3, [r4, #12]
 8011028:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801102a:	1a5b      	subs	r3, r3, r1
 801102c:	4543      	cmp	r3, r8
 801102e:	dcf0      	bgt.n	8011012 <_printf_float+0x42e>
 8011030:	e6fd      	b.n	8010e2e <_printf_float+0x24a>
 8011032:	f04f 0800 	mov.w	r8, #0
 8011036:	f104 0919 	add.w	r9, r4, #25
 801103a:	e7f4      	b.n	8011026 <_printf_float+0x442>

0801103c <_printf_common>:
 801103c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011040:	4616      	mov	r6, r2
 8011042:	4699      	mov	r9, r3
 8011044:	688a      	ldr	r2, [r1, #8]
 8011046:	690b      	ldr	r3, [r1, #16]
 8011048:	4607      	mov	r7, r0
 801104a:	4293      	cmp	r3, r2
 801104c:	bfb8      	it	lt
 801104e:	4613      	movlt	r3, r2
 8011050:	6033      	str	r3, [r6, #0]
 8011052:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011056:	460c      	mov	r4, r1
 8011058:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801105c:	b10a      	cbz	r2, 8011062 <_printf_common+0x26>
 801105e:	3301      	adds	r3, #1
 8011060:	6033      	str	r3, [r6, #0]
 8011062:	6823      	ldr	r3, [r4, #0]
 8011064:	0699      	lsls	r1, r3, #26
 8011066:	bf42      	ittt	mi
 8011068:	6833      	ldrmi	r3, [r6, #0]
 801106a:	3302      	addmi	r3, #2
 801106c:	6033      	strmi	r3, [r6, #0]
 801106e:	6825      	ldr	r5, [r4, #0]
 8011070:	f015 0506 	ands.w	r5, r5, #6
 8011074:	d106      	bne.n	8011084 <_printf_common+0x48>
 8011076:	f104 0a19 	add.w	sl, r4, #25
 801107a:	68e3      	ldr	r3, [r4, #12]
 801107c:	6832      	ldr	r2, [r6, #0]
 801107e:	1a9b      	subs	r3, r3, r2
 8011080:	42ab      	cmp	r3, r5
 8011082:	dc28      	bgt.n	80110d6 <_printf_common+0x9a>
 8011084:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011088:	1e13      	subs	r3, r2, #0
 801108a:	6822      	ldr	r2, [r4, #0]
 801108c:	bf18      	it	ne
 801108e:	2301      	movne	r3, #1
 8011090:	0692      	lsls	r2, r2, #26
 8011092:	d42d      	bmi.n	80110f0 <_printf_common+0xb4>
 8011094:	4649      	mov	r1, r9
 8011096:	4638      	mov	r0, r7
 8011098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801109c:	47c0      	blx	r8
 801109e:	3001      	adds	r0, #1
 80110a0:	d020      	beq.n	80110e4 <_printf_common+0xa8>
 80110a2:	6823      	ldr	r3, [r4, #0]
 80110a4:	68e5      	ldr	r5, [r4, #12]
 80110a6:	f003 0306 	and.w	r3, r3, #6
 80110aa:	2b04      	cmp	r3, #4
 80110ac:	bf18      	it	ne
 80110ae:	2500      	movne	r5, #0
 80110b0:	6832      	ldr	r2, [r6, #0]
 80110b2:	f04f 0600 	mov.w	r6, #0
 80110b6:	68a3      	ldr	r3, [r4, #8]
 80110b8:	bf08      	it	eq
 80110ba:	1aad      	subeq	r5, r5, r2
 80110bc:	6922      	ldr	r2, [r4, #16]
 80110be:	bf08      	it	eq
 80110c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80110c4:	4293      	cmp	r3, r2
 80110c6:	bfc4      	itt	gt
 80110c8:	1a9b      	subgt	r3, r3, r2
 80110ca:	18ed      	addgt	r5, r5, r3
 80110cc:	341a      	adds	r4, #26
 80110ce:	42b5      	cmp	r5, r6
 80110d0:	d11a      	bne.n	8011108 <_printf_common+0xcc>
 80110d2:	2000      	movs	r0, #0
 80110d4:	e008      	b.n	80110e8 <_printf_common+0xac>
 80110d6:	2301      	movs	r3, #1
 80110d8:	4652      	mov	r2, sl
 80110da:	4649      	mov	r1, r9
 80110dc:	4638      	mov	r0, r7
 80110de:	47c0      	blx	r8
 80110e0:	3001      	adds	r0, #1
 80110e2:	d103      	bne.n	80110ec <_printf_common+0xb0>
 80110e4:	f04f 30ff 	mov.w	r0, #4294967295
 80110e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110ec:	3501      	adds	r5, #1
 80110ee:	e7c4      	b.n	801107a <_printf_common+0x3e>
 80110f0:	2030      	movs	r0, #48	; 0x30
 80110f2:	18e1      	adds	r1, r4, r3
 80110f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80110f8:	1c5a      	adds	r2, r3, #1
 80110fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80110fe:	4422      	add	r2, r4
 8011100:	3302      	adds	r3, #2
 8011102:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011106:	e7c5      	b.n	8011094 <_printf_common+0x58>
 8011108:	2301      	movs	r3, #1
 801110a:	4622      	mov	r2, r4
 801110c:	4649      	mov	r1, r9
 801110e:	4638      	mov	r0, r7
 8011110:	47c0      	blx	r8
 8011112:	3001      	adds	r0, #1
 8011114:	d0e6      	beq.n	80110e4 <_printf_common+0xa8>
 8011116:	3601      	adds	r6, #1
 8011118:	e7d9      	b.n	80110ce <_printf_common+0x92>
	...

0801111c <_printf_i>:
 801111c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011120:	7e0f      	ldrb	r7, [r1, #24]
 8011122:	4691      	mov	r9, r2
 8011124:	2f78      	cmp	r7, #120	; 0x78
 8011126:	4680      	mov	r8, r0
 8011128:	460c      	mov	r4, r1
 801112a:	469a      	mov	sl, r3
 801112c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801112e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011132:	d807      	bhi.n	8011144 <_printf_i+0x28>
 8011134:	2f62      	cmp	r7, #98	; 0x62
 8011136:	d80a      	bhi.n	801114e <_printf_i+0x32>
 8011138:	2f00      	cmp	r7, #0
 801113a:	f000 80d9 	beq.w	80112f0 <_printf_i+0x1d4>
 801113e:	2f58      	cmp	r7, #88	; 0x58
 8011140:	f000 80a4 	beq.w	801128c <_printf_i+0x170>
 8011144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801114c:	e03a      	b.n	80111c4 <_printf_i+0xa8>
 801114e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011152:	2b15      	cmp	r3, #21
 8011154:	d8f6      	bhi.n	8011144 <_printf_i+0x28>
 8011156:	a101      	add	r1, pc, #4	; (adr r1, 801115c <_printf_i+0x40>)
 8011158:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801115c:	080111b5 	.word	0x080111b5
 8011160:	080111c9 	.word	0x080111c9
 8011164:	08011145 	.word	0x08011145
 8011168:	08011145 	.word	0x08011145
 801116c:	08011145 	.word	0x08011145
 8011170:	08011145 	.word	0x08011145
 8011174:	080111c9 	.word	0x080111c9
 8011178:	08011145 	.word	0x08011145
 801117c:	08011145 	.word	0x08011145
 8011180:	08011145 	.word	0x08011145
 8011184:	08011145 	.word	0x08011145
 8011188:	080112d7 	.word	0x080112d7
 801118c:	080111f9 	.word	0x080111f9
 8011190:	080112b9 	.word	0x080112b9
 8011194:	08011145 	.word	0x08011145
 8011198:	08011145 	.word	0x08011145
 801119c:	080112f9 	.word	0x080112f9
 80111a0:	08011145 	.word	0x08011145
 80111a4:	080111f9 	.word	0x080111f9
 80111a8:	08011145 	.word	0x08011145
 80111ac:	08011145 	.word	0x08011145
 80111b0:	080112c1 	.word	0x080112c1
 80111b4:	682b      	ldr	r3, [r5, #0]
 80111b6:	1d1a      	adds	r2, r3, #4
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	602a      	str	r2, [r5, #0]
 80111bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80111c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80111c4:	2301      	movs	r3, #1
 80111c6:	e0a4      	b.n	8011312 <_printf_i+0x1f6>
 80111c8:	6820      	ldr	r0, [r4, #0]
 80111ca:	6829      	ldr	r1, [r5, #0]
 80111cc:	0606      	lsls	r6, r0, #24
 80111ce:	f101 0304 	add.w	r3, r1, #4
 80111d2:	d50a      	bpl.n	80111ea <_printf_i+0xce>
 80111d4:	680e      	ldr	r6, [r1, #0]
 80111d6:	602b      	str	r3, [r5, #0]
 80111d8:	2e00      	cmp	r6, #0
 80111da:	da03      	bge.n	80111e4 <_printf_i+0xc8>
 80111dc:	232d      	movs	r3, #45	; 0x2d
 80111de:	4276      	negs	r6, r6
 80111e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80111e4:	230a      	movs	r3, #10
 80111e6:	485e      	ldr	r0, [pc, #376]	; (8011360 <_printf_i+0x244>)
 80111e8:	e019      	b.n	801121e <_printf_i+0x102>
 80111ea:	680e      	ldr	r6, [r1, #0]
 80111ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80111f0:	602b      	str	r3, [r5, #0]
 80111f2:	bf18      	it	ne
 80111f4:	b236      	sxthne	r6, r6
 80111f6:	e7ef      	b.n	80111d8 <_printf_i+0xbc>
 80111f8:	682b      	ldr	r3, [r5, #0]
 80111fa:	6820      	ldr	r0, [r4, #0]
 80111fc:	1d19      	adds	r1, r3, #4
 80111fe:	6029      	str	r1, [r5, #0]
 8011200:	0601      	lsls	r1, r0, #24
 8011202:	d501      	bpl.n	8011208 <_printf_i+0xec>
 8011204:	681e      	ldr	r6, [r3, #0]
 8011206:	e002      	b.n	801120e <_printf_i+0xf2>
 8011208:	0646      	lsls	r6, r0, #25
 801120a:	d5fb      	bpl.n	8011204 <_printf_i+0xe8>
 801120c:	881e      	ldrh	r6, [r3, #0]
 801120e:	2f6f      	cmp	r7, #111	; 0x6f
 8011210:	bf0c      	ite	eq
 8011212:	2308      	moveq	r3, #8
 8011214:	230a      	movne	r3, #10
 8011216:	4852      	ldr	r0, [pc, #328]	; (8011360 <_printf_i+0x244>)
 8011218:	2100      	movs	r1, #0
 801121a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801121e:	6865      	ldr	r5, [r4, #4]
 8011220:	2d00      	cmp	r5, #0
 8011222:	bfa8      	it	ge
 8011224:	6821      	ldrge	r1, [r4, #0]
 8011226:	60a5      	str	r5, [r4, #8]
 8011228:	bfa4      	itt	ge
 801122a:	f021 0104 	bicge.w	r1, r1, #4
 801122e:	6021      	strge	r1, [r4, #0]
 8011230:	b90e      	cbnz	r6, 8011236 <_printf_i+0x11a>
 8011232:	2d00      	cmp	r5, #0
 8011234:	d04d      	beq.n	80112d2 <_printf_i+0x1b6>
 8011236:	4615      	mov	r5, r2
 8011238:	fbb6 f1f3 	udiv	r1, r6, r3
 801123c:	fb03 6711 	mls	r7, r3, r1, r6
 8011240:	5dc7      	ldrb	r7, [r0, r7]
 8011242:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011246:	4637      	mov	r7, r6
 8011248:	42bb      	cmp	r3, r7
 801124a:	460e      	mov	r6, r1
 801124c:	d9f4      	bls.n	8011238 <_printf_i+0x11c>
 801124e:	2b08      	cmp	r3, #8
 8011250:	d10b      	bne.n	801126a <_printf_i+0x14e>
 8011252:	6823      	ldr	r3, [r4, #0]
 8011254:	07de      	lsls	r6, r3, #31
 8011256:	d508      	bpl.n	801126a <_printf_i+0x14e>
 8011258:	6923      	ldr	r3, [r4, #16]
 801125a:	6861      	ldr	r1, [r4, #4]
 801125c:	4299      	cmp	r1, r3
 801125e:	bfde      	ittt	le
 8011260:	2330      	movle	r3, #48	; 0x30
 8011262:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011266:	f105 35ff 	addle.w	r5, r5, #4294967295
 801126a:	1b52      	subs	r2, r2, r5
 801126c:	6122      	str	r2, [r4, #16]
 801126e:	464b      	mov	r3, r9
 8011270:	4621      	mov	r1, r4
 8011272:	4640      	mov	r0, r8
 8011274:	f8cd a000 	str.w	sl, [sp]
 8011278:	aa03      	add	r2, sp, #12
 801127a:	f7ff fedf 	bl	801103c <_printf_common>
 801127e:	3001      	adds	r0, #1
 8011280:	d14c      	bne.n	801131c <_printf_i+0x200>
 8011282:	f04f 30ff 	mov.w	r0, #4294967295
 8011286:	b004      	add	sp, #16
 8011288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801128c:	4834      	ldr	r0, [pc, #208]	; (8011360 <_printf_i+0x244>)
 801128e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011292:	6829      	ldr	r1, [r5, #0]
 8011294:	6823      	ldr	r3, [r4, #0]
 8011296:	f851 6b04 	ldr.w	r6, [r1], #4
 801129a:	6029      	str	r1, [r5, #0]
 801129c:	061d      	lsls	r5, r3, #24
 801129e:	d514      	bpl.n	80112ca <_printf_i+0x1ae>
 80112a0:	07df      	lsls	r7, r3, #31
 80112a2:	bf44      	itt	mi
 80112a4:	f043 0320 	orrmi.w	r3, r3, #32
 80112a8:	6023      	strmi	r3, [r4, #0]
 80112aa:	b91e      	cbnz	r6, 80112b4 <_printf_i+0x198>
 80112ac:	6823      	ldr	r3, [r4, #0]
 80112ae:	f023 0320 	bic.w	r3, r3, #32
 80112b2:	6023      	str	r3, [r4, #0]
 80112b4:	2310      	movs	r3, #16
 80112b6:	e7af      	b.n	8011218 <_printf_i+0xfc>
 80112b8:	6823      	ldr	r3, [r4, #0]
 80112ba:	f043 0320 	orr.w	r3, r3, #32
 80112be:	6023      	str	r3, [r4, #0]
 80112c0:	2378      	movs	r3, #120	; 0x78
 80112c2:	4828      	ldr	r0, [pc, #160]	; (8011364 <_printf_i+0x248>)
 80112c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80112c8:	e7e3      	b.n	8011292 <_printf_i+0x176>
 80112ca:	0659      	lsls	r1, r3, #25
 80112cc:	bf48      	it	mi
 80112ce:	b2b6      	uxthmi	r6, r6
 80112d0:	e7e6      	b.n	80112a0 <_printf_i+0x184>
 80112d2:	4615      	mov	r5, r2
 80112d4:	e7bb      	b.n	801124e <_printf_i+0x132>
 80112d6:	682b      	ldr	r3, [r5, #0]
 80112d8:	6826      	ldr	r6, [r4, #0]
 80112da:	1d18      	adds	r0, r3, #4
 80112dc:	6961      	ldr	r1, [r4, #20]
 80112de:	6028      	str	r0, [r5, #0]
 80112e0:	0635      	lsls	r5, r6, #24
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	d501      	bpl.n	80112ea <_printf_i+0x1ce>
 80112e6:	6019      	str	r1, [r3, #0]
 80112e8:	e002      	b.n	80112f0 <_printf_i+0x1d4>
 80112ea:	0670      	lsls	r0, r6, #25
 80112ec:	d5fb      	bpl.n	80112e6 <_printf_i+0x1ca>
 80112ee:	8019      	strh	r1, [r3, #0]
 80112f0:	2300      	movs	r3, #0
 80112f2:	4615      	mov	r5, r2
 80112f4:	6123      	str	r3, [r4, #16]
 80112f6:	e7ba      	b.n	801126e <_printf_i+0x152>
 80112f8:	682b      	ldr	r3, [r5, #0]
 80112fa:	2100      	movs	r1, #0
 80112fc:	1d1a      	adds	r2, r3, #4
 80112fe:	602a      	str	r2, [r5, #0]
 8011300:	681d      	ldr	r5, [r3, #0]
 8011302:	6862      	ldr	r2, [r4, #4]
 8011304:	4628      	mov	r0, r5
 8011306:	f002 fc0b 	bl	8013b20 <memchr>
 801130a:	b108      	cbz	r0, 8011310 <_printf_i+0x1f4>
 801130c:	1b40      	subs	r0, r0, r5
 801130e:	6060      	str	r0, [r4, #4]
 8011310:	6863      	ldr	r3, [r4, #4]
 8011312:	6123      	str	r3, [r4, #16]
 8011314:	2300      	movs	r3, #0
 8011316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801131a:	e7a8      	b.n	801126e <_printf_i+0x152>
 801131c:	462a      	mov	r2, r5
 801131e:	4649      	mov	r1, r9
 8011320:	4640      	mov	r0, r8
 8011322:	6923      	ldr	r3, [r4, #16]
 8011324:	47d0      	blx	sl
 8011326:	3001      	adds	r0, #1
 8011328:	d0ab      	beq.n	8011282 <_printf_i+0x166>
 801132a:	6823      	ldr	r3, [r4, #0]
 801132c:	079b      	lsls	r3, r3, #30
 801132e:	d413      	bmi.n	8011358 <_printf_i+0x23c>
 8011330:	68e0      	ldr	r0, [r4, #12]
 8011332:	9b03      	ldr	r3, [sp, #12]
 8011334:	4298      	cmp	r0, r3
 8011336:	bfb8      	it	lt
 8011338:	4618      	movlt	r0, r3
 801133a:	e7a4      	b.n	8011286 <_printf_i+0x16a>
 801133c:	2301      	movs	r3, #1
 801133e:	4632      	mov	r2, r6
 8011340:	4649      	mov	r1, r9
 8011342:	4640      	mov	r0, r8
 8011344:	47d0      	blx	sl
 8011346:	3001      	adds	r0, #1
 8011348:	d09b      	beq.n	8011282 <_printf_i+0x166>
 801134a:	3501      	adds	r5, #1
 801134c:	68e3      	ldr	r3, [r4, #12]
 801134e:	9903      	ldr	r1, [sp, #12]
 8011350:	1a5b      	subs	r3, r3, r1
 8011352:	42ab      	cmp	r3, r5
 8011354:	dcf2      	bgt.n	801133c <_printf_i+0x220>
 8011356:	e7eb      	b.n	8011330 <_printf_i+0x214>
 8011358:	2500      	movs	r5, #0
 801135a:	f104 0619 	add.w	r6, r4, #25
 801135e:	e7f5      	b.n	801134c <_printf_i+0x230>
 8011360:	08015a22 	.word	0x08015a22
 8011364:	08015a33 	.word	0x08015a33

08011368 <cleanup_glue>:
 8011368:	b538      	push	{r3, r4, r5, lr}
 801136a:	460c      	mov	r4, r1
 801136c:	6809      	ldr	r1, [r1, #0]
 801136e:	4605      	mov	r5, r0
 8011370:	b109      	cbz	r1, 8011376 <cleanup_glue+0xe>
 8011372:	f7ff fff9 	bl	8011368 <cleanup_glue>
 8011376:	4621      	mov	r1, r4
 8011378:	4628      	mov	r0, r5
 801137a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801137e:	f7ff bab7 	b.w	80108f0 <_free_r>
	...

08011384 <_reclaim_reent>:
 8011384:	4b2c      	ldr	r3, [pc, #176]	; (8011438 <_reclaim_reent+0xb4>)
 8011386:	b570      	push	{r4, r5, r6, lr}
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	4604      	mov	r4, r0
 801138c:	4283      	cmp	r3, r0
 801138e:	d051      	beq.n	8011434 <_reclaim_reent+0xb0>
 8011390:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011392:	b143      	cbz	r3, 80113a6 <_reclaim_reent+0x22>
 8011394:	68db      	ldr	r3, [r3, #12]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d14a      	bne.n	8011430 <_reclaim_reent+0xac>
 801139a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801139c:	6819      	ldr	r1, [r3, #0]
 801139e:	b111      	cbz	r1, 80113a6 <_reclaim_reent+0x22>
 80113a0:	4620      	mov	r0, r4
 80113a2:	f7ff faa5 	bl	80108f0 <_free_r>
 80113a6:	6961      	ldr	r1, [r4, #20]
 80113a8:	b111      	cbz	r1, 80113b0 <_reclaim_reent+0x2c>
 80113aa:	4620      	mov	r0, r4
 80113ac:	f7ff faa0 	bl	80108f0 <_free_r>
 80113b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80113b2:	b111      	cbz	r1, 80113ba <_reclaim_reent+0x36>
 80113b4:	4620      	mov	r0, r4
 80113b6:	f7ff fa9b 	bl	80108f0 <_free_r>
 80113ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80113bc:	b111      	cbz	r1, 80113c4 <_reclaim_reent+0x40>
 80113be:	4620      	mov	r0, r4
 80113c0:	f7ff fa96 	bl	80108f0 <_free_r>
 80113c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80113c6:	b111      	cbz	r1, 80113ce <_reclaim_reent+0x4a>
 80113c8:	4620      	mov	r0, r4
 80113ca:	f7ff fa91 	bl	80108f0 <_free_r>
 80113ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80113d0:	b111      	cbz	r1, 80113d8 <_reclaim_reent+0x54>
 80113d2:	4620      	mov	r0, r4
 80113d4:	f7ff fa8c 	bl	80108f0 <_free_r>
 80113d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80113da:	b111      	cbz	r1, 80113e2 <_reclaim_reent+0x5e>
 80113dc:	4620      	mov	r0, r4
 80113de:	f7ff fa87 	bl	80108f0 <_free_r>
 80113e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80113e4:	b111      	cbz	r1, 80113ec <_reclaim_reent+0x68>
 80113e6:	4620      	mov	r0, r4
 80113e8:	f7ff fa82 	bl	80108f0 <_free_r>
 80113ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80113ee:	b111      	cbz	r1, 80113f6 <_reclaim_reent+0x72>
 80113f0:	4620      	mov	r0, r4
 80113f2:	f7ff fa7d 	bl	80108f0 <_free_r>
 80113f6:	69a3      	ldr	r3, [r4, #24]
 80113f8:	b1e3      	cbz	r3, 8011434 <_reclaim_reent+0xb0>
 80113fa:	4620      	mov	r0, r4
 80113fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80113fe:	4798      	blx	r3
 8011400:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011402:	b1b9      	cbz	r1, 8011434 <_reclaim_reent+0xb0>
 8011404:	4620      	mov	r0, r4
 8011406:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801140a:	f7ff bfad 	b.w	8011368 <cleanup_glue>
 801140e:	5949      	ldr	r1, [r1, r5]
 8011410:	b941      	cbnz	r1, 8011424 <_reclaim_reent+0xa0>
 8011412:	3504      	adds	r5, #4
 8011414:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011416:	2d80      	cmp	r5, #128	; 0x80
 8011418:	68d9      	ldr	r1, [r3, #12]
 801141a:	d1f8      	bne.n	801140e <_reclaim_reent+0x8a>
 801141c:	4620      	mov	r0, r4
 801141e:	f7ff fa67 	bl	80108f0 <_free_r>
 8011422:	e7ba      	b.n	801139a <_reclaim_reent+0x16>
 8011424:	680e      	ldr	r6, [r1, #0]
 8011426:	4620      	mov	r0, r4
 8011428:	f7ff fa62 	bl	80108f0 <_free_r>
 801142c:	4631      	mov	r1, r6
 801142e:	e7ef      	b.n	8011410 <_reclaim_reent+0x8c>
 8011430:	2500      	movs	r5, #0
 8011432:	e7ef      	b.n	8011414 <_reclaim_reent+0x90>
 8011434:	bd70      	pop	{r4, r5, r6, pc}
 8011436:	bf00      	nop
 8011438:	20000224 	.word	0x20000224

0801143c <_sbrk_r>:
 801143c:	b538      	push	{r3, r4, r5, lr}
 801143e:	2300      	movs	r3, #0
 8011440:	4d05      	ldr	r5, [pc, #20]	; (8011458 <_sbrk_r+0x1c>)
 8011442:	4604      	mov	r4, r0
 8011444:	4608      	mov	r0, r1
 8011446:	602b      	str	r3, [r5, #0]
 8011448:	f7f4 f820 	bl	800548c <_sbrk>
 801144c:	1c43      	adds	r3, r0, #1
 801144e:	d102      	bne.n	8011456 <_sbrk_r+0x1a>
 8011450:	682b      	ldr	r3, [r5, #0]
 8011452:	b103      	cbz	r3, 8011456 <_sbrk_r+0x1a>
 8011454:	6023      	str	r3, [r4, #0]
 8011456:	bd38      	pop	{r3, r4, r5, pc}
 8011458:	2000cc54 	.word	0x2000cc54

0801145c <siprintf>:
 801145c:	b40e      	push	{r1, r2, r3}
 801145e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011462:	b500      	push	{lr}
 8011464:	b09c      	sub	sp, #112	; 0x70
 8011466:	ab1d      	add	r3, sp, #116	; 0x74
 8011468:	9002      	str	r0, [sp, #8]
 801146a:	9006      	str	r0, [sp, #24]
 801146c:	9107      	str	r1, [sp, #28]
 801146e:	9104      	str	r1, [sp, #16]
 8011470:	4808      	ldr	r0, [pc, #32]	; (8011494 <siprintf+0x38>)
 8011472:	4909      	ldr	r1, [pc, #36]	; (8011498 <siprintf+0x3c>)
 8011474:	f853 2b04 	ldr.w	r2, [r3], #4
 8011478:	9105      	str	r1, [sp, #20]
 801147a:	6800      	ldr	r0, [r0, #0]
 801147c:	a902      	add	r1, sp, #8
 801147e:	9301      	str	r3, [sp, #4]
 8011480:	f003 f890 	bl	80145a4 <_svfiprintf_r>
 8011484:	2200      	movs	r2, #0
 8011486:	9b02      	ldr	r3, [sp, #8]
 8011488:	701a      	strb	r2, [r3, #0]
 801148a:	b01c      	add	sp, #112	; 0x70
 801148c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011490:	b003      	add	sp, #12
 8011492:	4770      	bx	lr
 8011494:	20000224 	.word	0x20000224
 8011498:	ffff0208 	.word	0xffff0208

0801149c <__sread>:
 801149c:	b510      	push	{r4, lr}
 801149e:	460c      	mov	r4, r1
 80114a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114a4:	f003 fad6 	bl	8014a54 <_read_r>
 80114a8:	2800      	cmp	r0, #0
 80114aa:	bfab      	itete	ge
 80114ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80114ae:	89a3      	ldrhlt	r3, [r4, #12]
 80114b0:	181b      	addge	r3, r3, r0
 80114b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80114b6:	bfac      	ite	ge
 80114b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80114ba:	81a3      	strhlt	r3, [r4, #12]
 80114bc:	bd10      	pop	{r4, pc}

080114be <__swrite>:
 80114be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114c2:	461f      	mov	r7, r3
 80114c4:	898b      	ldrh	r3, [r1, #12]
 80114c6:	4605      	mov	r5, r0
 80114c8:	05db      	lsls	r3, r3, #23
 80114ca:	460c      	mov	r4, r1
 80114cc:	4616      	mov	r6, r2
 80114ce:	d505      	bpl.n	80114dc <__swrite+0x1e>
 80114d0:	2302      	movs	r3, #2
 80114d2:	2200      	movs	r2, #0
 80114d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114d8:	f002 fafe 	bl	8013ad8 <_lseek_r>
 80114dc:	89a3      	ldrh	r3, [r4, #12]
 80114de:	4632      	mov	r2, r6
 80114e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80114e4:	81a3      	strh	r3, [r4, #12]
 80114e6:	4628      	mov	r0, r5
 80114e8:	463b      	mov	r3, r7
 80114ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80114ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80114f2:	f000 bffd 	b.w	80124f0 <_write_r>

080114f6 <__sseek>:
 80114f6:	b510      	push	{r4, lr}
 80114f8:	460c      	mov	r4, r1
 80114fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114fe:	f002 faeb 	bl	8013ad8 <_lseek_r>
 8011502:	1c43      	adds	r3, r0, #1
 8011504:	89a3      	ldrh	r3, [r4, #12]
 8011506:	bf15      	itete	ne
 8011508:	6560      	strne	r0, [r4, #84]	; 0x54
 801150a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801150e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011512:	81a3      	strheq	r3, [r4, #12]
 8011514:	bf18      	it	ne
 8011516:	81a3      	strhne	r3, [r4, #12]
 8011518:	bd10      	pop	{r4, pc}

0801151a <__sclose>:
 801151a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801151e:	f001 b817 	b.w	8012550 <_close_r>

08011522 <strcat>:
 8011522:	4602      	mov	r2, r0
 8011524:	b510      	push	{r4, lr}
 8011526:	7814      	ldrb	r4, [r2, #0]
 8011528:	4613      	mov	r3, r2
 801152a:	3201      	adds	r2, #1
 801152c:	2c00      	cmp	r4, #0
 801152e:	d1fa      	bne.n	8011526 <strcat+0x4>
 8011530:	3b01      	subs	r3, #1
 8011532:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011536:	f803 2f01 	strb.w	r2, [r3, #1]!
 801153a:	2a00      	cmp	r2, #0
 801153c:	d1f9      	bne.n	8011532 <strcat+0x10>
 801153e:	bd10      	pop	{r4, pc}

08011540 <strcpy>:
 8011540:	4603      	mov	r3, r0
 8011542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011546:	f803 2b01 	strb.w	r2, [r3], #1
 801154a:	2a00      	cmp	r2, #0
 801154c:	d1f9      	bne.n	8011542 <strcpy+0x2>
 801154e:	4770      	bx	lr

08011550 <strstr>:
 8011550:	780a      	ldrb	r2, [r1, #0]
 8011552:	b570      	push	{r4, r5, r6, lr}
 8011554:	b96a      	cbnz	r2, 8011572 <strstr+0x22>
 8011556:	bd70      	pop	{r4, r5, r6, pc}
 8011558:	429a      	cmp	r2, r3
 801155a:	d109      	bne.n	8011570 <strstr+0x20>
 801155c:	460c      	mov	r4, r1
 801155e:	4605      	mov	r5, r0
 8011560:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011564:	2b00      	cmp	r3, #0
 8011566:	d0f6      	beq.n	8011556 <strstr+0x6>
 8011568:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801156c:	429e      	cmp	r6, r3
 801156e:	d0f7      	beq.n	8011560 <strstr+0x10>
 8011570:	3001      	adds	r0, #1
 8011572:	7803      	ldrb	r3, [r0, #0]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d1ef      	bne.n	8011558 <strstr+0x8>
 8011578:	4618      	mov	r0, r3
 801157a:	e7ec      	b.n	8011556 <strstr+0x6>

0801157c <sulp>:
 801157c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011580:	460f      	mov	r7, r1
 8011582:	4690      	mov	r8, r2
 8011584:	f002 fe56 	bl	8014234 <__ulp>
 8011588:	4604      	mov	r4, r0
 801158a:	460d      	mov	r5, r1
 801158c:	f1b8 0f00 	cmp.w	r8, #0
 8011590:	d011      	beq.n	80115b6 <sulp+0x3a>
 8011592:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8011596:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801159a:	2b00      	cmp	r3, #0
 801159c:	dd0b      	ble.n	80115b6 <sulp+0x3a>
 801159e:	2400      	movs	r4, #0
 80115a0:	051b      	lsls	r3, r3, #20
 80115a2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80115a6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80115aa:	4622      	mov	r2, r4
 80115ac:	462b      	mov	r3, r5
 80115ae:	f7ef f803 	bl	80005b8 <__aeabi_dmul>
 80115b2:	4604      	mov	r4, r0
 80115b4:	460d      	mov	r5, r1
 80115b6:	4620      	mov	r0, r4
 80115b8:	4629      	mov	r1, r5
 80115ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080115c0 <_strtod_l>:
 80115c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115c4:	469b      	mov	fp, r3
 80115c6:	2300      	movs	r3, #0
 80115c8:	b09f      	sub	sp, #124	; 0x7c
 80115ca:	931a      	str	r3, [sp, #104]	; 0x68
 80115cc:	4b9e      	ldr	r3, [pc, #632]	; (8011848 <_strtod_l+0x288>)
 80115ce:	4682      	mov	sl, r0
 80115d0:	681f      	ldr	r7, [r3, #0]
 80115d2:	460e      	mov	r6, r1
 80115d4:	4638      	mov	r0, r7
 80115d6:	9215      	str	r2, [sp, #84]	; 0x54
 80115d8:	f7ee fe2a 	bl	8000230 <strlen>
 80115dc:	f04f 0800 	mov.w	r8, #0
 80115e0:	4604      	mov	r4, r0
 80115e2:	f04f 0900 	mov.w	r9, #0
 80115e6:	9619      	str	r6, [sp, #100]	; 0x64
 80115e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80115ea:	781a      	ldrb	r2, [r3, #0]
 80115ec:	2a2b      	cmp	r2, #43	; 0x2b
 80115ee:	d04c      	beq.n	801168a <_strtod_l+0xca>
 80115f0:	d83a      	bhi.n	8011668 <_strtod_l+0xa8>
 80115f2:	2a0d      	cmp	r2, #13
 80115f4:	d833      	bhi.n	801165e <_strtod_l+0x9e>
 80115f6:	2a08      	cmp	r2, #8
 80115f8:	d833      	bhi.n	8011662 <_strtod_l+0xa2>
 80115fa:	2a00      	cmp	r2, #0
 80115fc:	d03d      	beq.n	801167a <_strtod_l+0xba>
 80115fe:	2300      	movs	r3, #0
 8011600:	930a      	str	r3, [sp, #40]	; 0x28
 8011602:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8011604:	782b      	ldrb	r3, [r5, #0]
 8011606:	2b30      	cmp	r3, #48	; 0x30
 8011608:	f040 80aa 	bne.w	8011760 <_strtod_l+0x1a0>
 801160c:	786b      	ldrb	r3, [r5, #1]
 801160e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011612:	2b58      	cmp	r3, #88	; 0x58
 8011614:	d166      	bne.n	80116e4 <_strtod_l+0x124>
 8011616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011618:	4650      	mov	r0, sl
 801161a:	9301      	str	r3, [sp, #4]
 801161c:	ab1a      	add	r3, sp, #104	; 0x68
 801161e:	9300      	str	r3, [sp, #0]
 8011620:	4a8a      	ldr	r2, [pc, #552]	; (801184c <_strtod_l+0x28c>)
 8011622:	f8cd b008 	str.w	fp, [sp, #8]
 8011626:	ab1b      	add	r3, sp, #108	; 0x6c
 8011628:	a919      	add	r1, sp, #100	; 0x64
 801162a:	f001 ff53 	bl	80134d4 <__gethex>
 801162e:	f010 0607 	ands.w	r6, r0, #7
 8011632:	4604      	mov	r4, r0
 8011634:	d005      	beq.n	8011642 <_strtod_l+0x82>
 8011636:	2e06      	cmp	r6, #6
 8011638:	d129      	bne.n	801168e <_strtod_l+0xce>
 801163a:	2300      	movs	r3, #0
 801163c:	3501      	adds	r5, #1
 801163e:	9519      	str	r5, [sp, #100]	; 0x64
 8011640:	930a      	str	r3, [sp, #40]	; 0x28
 8011642:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011644:	2b00      	cmp	r3, #0
 8011646:	f040 858a 	bne.w	801215e <_strtod_l+0xb9e>
 801164a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801164c:	b1d3      	cbz	r3, 8011684 <_strtod_l+0xc4>
 801164e:	4642      	mov	r2, r8
 8011650:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011654:	4610      	mov	r0, r2
 8011656:	4619      	mov	r1, r3
 8011658:	b01f      	add	sp, #124	; 0x7c
 801165a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801165e:	2a20      	cmp	r2, #32
 8011660:	d1cd      	bne.n	80115fe <_strtod_l+0x3e>
 8011662:	3301      	adds	r3, #1
 8011664:	9319      	str	r3, [sp, #100]	; 0x64
 8011666:	e7bf      	b.n	80115e8 <_strtod_l+0x28>
 8011668:	2a2d      	cmp	r2, #45	; 0x2d
 801166a:	d1c8      	bne.n	80115fe <_strtod_l+0x3e>
 801166c:	2201      	movs	r2, #1
 801166e:	920a      	str	r2, [sp, #40]	; 0x28
 8011670:	1c5a      	adds	r2, r3, #1
 8011672:	9219      	str	r2, [sp, #100]	; 0x64
 8011674:	785b      	ldrb	r3, [r3, #1]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d1c3      	bne.n	8011602 <_strtod_l+0x42>
 801167a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801167c:	9619      	str	r6, [sp, #100]	; 0x64
 801167e:	2b00      	cmp	r3, #0
 8011680:	f040 856b 	bne.w	801215a <_strtod_l+0xb9a>
 8011684:	4642      	mov	r2, r8
 8011686:	464b      	mov	r3, r9
 8011688:	e7e4      	b.n	8011654 <_strtod_l+0x94>
 801168a:	2200      	movs	r2, #0
 801168c:	e7ef      	b.n	801166e <_strtod_l+0xae>
 801168e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011690:	b13a      	cbz	r2, 80116a2 <_strtod_l+0xe2>
 8011692:	2135      	movs	r1, #53	; 0x35
 8011694:	a81c      	add	r0, sp, #112	; 0x70
 8011696:	f002 fed1 	bl	801443c <__copybits>
 801169a:	4650      	mov	r0, sl
 801169c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801169e:	f002 fa99 	bl	8013bd4 <_Bfree>
 80116a2:	3e01      	subs	r6, #1
 80116a4:	2e04      	cmp	r6, #4
 80116a6:	d806      	bhi.n	80116b6 <_strtod_l+0xf6>
 80116a8:	e8df f006 	tbb	[pc, r6]
 80116ac:	1714030a 	.word	0x1714030a
 80116b0:	0a          	.byte	0x0a
 80116b1:	00          	.byte	0x00
 80116b2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80116b6:	0721      	lsls	r1, r4, #28
 80116b8:	d5c3      	bpl.n	8011642 <_strtod_l+0x82>
 80116ba:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80116be:	e7c0      	b.n	8011642 <_strtod_l+0x82>
 80116c0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80116c2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80116c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80116ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80116ce:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80116d2:	e7f0      	b.n	80116b6 <_strtod_l+0xf6>
 80116d4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011850 <_strtod_l+0x290>
 80116d8:	e7ed      	b.n	80116b6 <_strtod_l+0xf6>
 80116da:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80116de:	f04f 38ff 	mov.w	r8, #4294967295
 80116e2:	e7e8      	b.n	80116b6 <_strtod_l+0xf6>
 80116e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80116e6:	1c5a      	adds	r2, r3, #1
 80116e8:	9219      	str	r2, [sp, #100]	; 0x64
 80116ea:	785b      	ldrb	r3, [r3, #1]
 80116ec:	2b30      	cmp	r3, #48	; 0x30
 80116ee:	d0f9      	beq.n	80116e4 <_strtod_l+0x124>
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d0a6      	beq.n	8011642 <_strtod_l+0x82>
 80116f4:	2301      	movs	r3, #1
 80116f6:	9307      	str	r3, [sp, #28]
 80116f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80116fa:	220a      	movs	r2, #10
 80116fc:	9308      	str	r3, [sp, #32]
 80116fe:	2300      	movs	r3, #0
 8011700:	469b      	mov	fp, r3
 8011702:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8011706:	9819      	ldr	r0, [sp, #100]	; 0x64
 8011708:	7805      	ldrb	r5, [r0, #0]
 801170a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 801170e:	b2d9      	uxtb	r1, r3
 8011710:	2909      	cmp	r1, #9
 8011712:	d927      	bls.n	8011764 <_strtod_l+0x1a4>
 8011714:	4622      	mov	r2, r4
 8011716:	4639      	mov	r1, r7
 8011718:	f003 f9b8 	bl	8014a8c <strncmp>
 801171c:	2800      	cmp	r0, #0
 801171e:	d033      	beq.n	8011788 <_strtod_l+0x1c8>
 8011720:	2000      	movs	r0, #0
 8011722:	462a      	mov	r2, r5
 8011724:	465c      	mov	r4, fp
 8011726:	4603      	mov	r3, r0
 8011728:	9004      	str	r0, [sp, #16]
 801172a:	2a65      	cmp	r2, #101	; 0x65
 801172c:	d001      	beq.n	8011732 <_strtod_l+0x172>
 801172e:	2a45      	cmp	r2, #69	; 0x45
 8011730:	d114      	bne.n	801175c <_strtod_l+0x19c>
 8011732:	b91c      	cbnz	r4, 801173c <_strtod_l+0x17c>
 8011734:	9a07      	ldr	r2, [sp, #28]
 8011736:	4302      	orrs	r2, r0
 8011738:	d09f      	beq.n	801167a <_strtod_l+0xba>
 801173a:	2400      	movs	r4, #0
 801173c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801173e:	1c72      	adds	r2, r6, #1
 8011740:	9219      	str	r2, [sp, #100]	; 0x64
 8011742:	7872      	ldrb	r2, [r6, #1]
 8011744:	2a2b      	cmp	r2, #43	; 0x2b
 8011746:	d079      	beq.n	801183c <_strtod_l+0x27c>
 8011748:	2a2d      	cmp	r2, #45	; 0x2d
 801174a:	f000 8083 	beq.w	8011854 <_strtod_l+0x294>
 801174e:	2700      	movs	r7, #0
 8011750:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011754:	2909      	cmp	r1, #9
 8011756:	f240 8083 	bls.w	8011860 <_strtod_l+0x2a0>
 801175a:	9619      	str	r6, [sp, #100]	; 0x64
 801175c:	2500      	movs	r5, #0
 801175e:	e09f      	b.n	80118a0 <_strtod_l+0x2e0>
 8011760:	2300      	movs	r3, #0
 8011762:	e7c8      	b.n	80116f6 <_strtod_l+0x136>
 8011764:	f1bb 0f08 	cmp.w	fp, #8
 8011768:	bfd5      	itete	le
 801176a:	9906      	ldrle	r1, [sp, #24]
 801176c:	9905      	ldrgt	r1, [sp, #20]
 801176e:	fb02 3301 	mlale	r3, r2, r1, r3
 8011772:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011776:	f100 0001 	add.w	r0, r0, #1
 801177a:	bfd4      	ite	le
 801177c:	9306      	strle	r3, [sp, #24]
 801177e:	9305      	strgt	r3, [sp, #20]
 8011780:	f10b 0b01 	add.w	fp, fp, #1
 8011784:	9019      	str	r0, [sp, #100]	; 0x64
 8011786:	e7be      	b.n	8011706 <_strtod_l+0x146>
 8011788:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801178a:	191a      	adds	r2, r3, r4
 801178c:	9219      	str	r2, [sp, #100]	; 0x64
 801178e:	5d1a      	ldrb	r2, [r3, r4]
 8011790:	f1bb 0f00 	cmp.w	fp, #0
 8011794:	d036      	beq.n	8011804 <_strtod_l+0x244>
 8011796:	465c      	mov	r4, fp
 8011798:	9004      	str	r0, [sp, #16]
 801179a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801179e:	2b09      	cmp	r3, #9
 80117a0:	d912      	bls.n	80117c8 <_strtod_l+0x208>
 80117a2:	2301      	movs	r3, #1
 80117a4:	e7c1      	b.n	801172a <_strtod_l+0x16a>
 80117a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80117a8:	3001      	adds	r0, #1
 80117aa:	1c5a      	adds	r2, r3, #1
 80117ac:	9219      	str	r2, [sp, #100]	; 0x64
 80117ae:	785a      	ldrb	r2, [r3, #1]
 80117b0:	2a30      	cmp	r2, #48	; 0x30
 80117b2:	d0f8      	beq.n	80117a6 <_strtod_l+0x1e6>
 80117b4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80117b8:	2b08      	cmp	r3, #8
 80117ba:	f200 84d5 	bhi.w	8012168 <_strtod_l+0xba8>
 80117be:	9004      	str	r0, [sp, #16]
 80117c0:	2000      	movs	r0, #0
 80117c2:	4604      	mov	r4, r0
 80117c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80117c6:	9308      	str	r3, [sp, #32]
 80117c8:	3a30      	subs	r2, #48	; 0x30
 80117ca:	f100 0301 	add.w	r3, r0, #1
 80117ce:	d013      	beq.n	80117f8 <_strtod_l+0x238>
 80117d0:	9904      	ldr	r1, [sp, #16]
 80117d2:	1905      	adds	r5, r0, r4
 80117d4:	4419      	add	r1, r3
 80117d6:	9104      	str	r1, [sp, #16]
 80117d8:	4623      	mov	r3, r4
 80117da:	210a      	movs	r1, #10
 80117dc:	42ab      	cmp	r3, r5
 80117de:	d113      	bne.n	8011808 <_strtod_l+0x248>
 80117e0:	1823      	adds	r3, r4, r0
 80117e2:	2b08      	cmp	r3, #8
 80117e4:	f104 0401 	add.w	r4, r4, #1
 80117e8:	4404      	add	r4, r0
 80117ea:	dc1b      	bgt.n	8011824 <_strtod_l+0x264>
 80117ec:	230a      	movs	r3, #10
 80117ee:	9906      	ldr	r1, [sp, #24]
 80117f0:	fb03 2301 	mla	r3, r3, r1, r2
 80117f4:	9306      	str	r3, [sp, #24]
 80117f6:	2300      	movs	r3, #0
 80117f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80117fa:	4618      	mov	r0, r3
 80117fc:	1c51      	adds	r1, r2, #1
 80117fe:	9119      	str	r1, [sp, #100]	; 0x64
 8011800:	7852      	ldrb	r2, [r2, #1]
 8011802:	e7ca      	b.n	801179a <_strtod_l+0x1da>
 8011804:	4658      	mov	r0, fp
 8011806:	e7d3      	b.n	80117b0 <_strtod_l+0x1f0>
 8011808:	2b08      	cmp	r3, #8
 801180a:	dc04      	bgt.n	8011816 <_strtod_l+0x256>
 801180c:	9f06      	ldr	r7, [sp, #24]
 801180e:	434f      	muls	r7, r1
 8011810:	9706      	str	r7, [sp, #24]
 8011812:	3301      	adds	r3, #1
 8011814:	e7e2      	b.n	80117dc <_strtod_l+0x21c>
 8011816:	1c5f      	adds	r7, r3, #1
 8011818:	2f10      	cmp	r7, #16
 801181a:	bfde      	ittt	le
 801181c:	9f05      	ldrle	r7, [sp, #20]
 801181e:	434f      	mulle	r7, r1
 8011820:	9705      	strle	r7, [sp, #20]
 8011822:	e7f6      	b.n	8011812 <_strtod_l+0x252>
 8011824:	2c10      	cmp	r4, #16
 8011826:	bfdf      	itttt	le
 8011828:	230a      	movle	r3, #10
 801182a:	9905      	ldrle	r1, [sp, #20]
 801182c:	fb03 2301 	mlale	r3, r3, r1, r2
 8011830:	9305      	strle	r3, [sp, #20]
 8011832:	e7e0      	b.n	80117f6 <_strtod_l+0x236>
 8011834:	2300      	movs	r3, #0
 8011836:	9304      	str	r3, [sp, #16]
 8011838:	2301      	movs	r3, #1
 801183a:	e77b      	b.n	8011734 <_strtod_l+0x174>
 801183c:	2700      	movs	r7, #0
 801183e:	1cb2      	adds	r2, r6, #2
 8011840:	9219      	str	r2, [sp, #100]	; 0x64
 8011842:	78b2      	ldrb	r2, [r6, #2]
 8011844:	e784      	b.n	8011750 <_strtod_l+0x190>
 8011846:	bf00      	nop
 8011848:	08015d28 	.word	0x08015d28
 801184c:	08015a44 	.word	0x08015a44
 8011850:	7ff00000 	.word	0x7ff00000
 8011854:	2701      	movs	r7, #1
 8011856:	e7f2      	b.n	801183e <_strtod_l+0x27e>
 8011858:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801185a:	1c51      	adds	r1, r2, #1
 801185c:	9119      	str	r1, [sp, #100]	; 0x64
 801185e:	7852      	ldrb	r2, [r2, #1]
 8011860:	2a30      	cmp	r2, #48	; 0x30
 8011862:	d0f9      	beq.n	8011858 <_strtod_l+0x298>
 8011864:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8011868:	2908      	cmp	r1, #8
 801186a:	f63f af77 	bhi.w	801175c <_strtod_l+0x19c>
 801186e:	f04f 0e0a 	mov.w	lr, #10
 8011872:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8011876:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011878:	9209      	str	r2, [sp, #36]	; 0x24
 801187a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801187c:	1c51      	adds	r1, r2, #1
 801187e:	9119      	str	r1, [sp, #100]	; 0x64
 8011880:	7852      	ldrb	r2, [r2, #1]
 8011882:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8011886:	2d09      	cmp	r5, #9
 8011888:	d935      	bls.n	80118f6 <_strtod_l+0x336>
 801188a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801188c:	1b49      	subs	r1, r1, r5
 801188e:	2908      	cmp	r1, #8
 8011890:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8011894:	dc02      	bgt.n	801189c <_strtod_l+0x2dc>
 8011896:	4565      	cmp	r5, ip
 8011898:	bfa8      	it	ge
 801189a:	4665      	movge	r5, ip
 801189c:	b107      	cbz	r7, 80118a0 <_strtod_l+0x2e0>
 801189e:	426d      	negs	r5, r5
 80118a0:	2c00      	cmp	r4, #0
 80118a2:	d14c      	bne.n	801193e <_strtod_l+0x37e>
 80118a4:	9907      	ldr	r1, [sp, #28]
 80118a6:	4301      	orrs	r1, r0
 80118a8:	f47f aecb 	bne.w	8011642 <_strtod_l+0x82>
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	f47f aee4 	bne.w	801167a <_strtod_l+0xba>
 80118b2:	2a69      	cmp	r2, #105	; 0x69
 80118b4:	d026      	beq.n	8011904 <_strtod_l+0x344>
 80118b6:	dc23      	bgt.n	8011900 <_strtod_l+0x340>
 80118b8:	2a49      	cmp	r2, #73	; 0x49
 80118ba:	d023      	beq.n	8011904 <_strtod_l+0x344>
 80118bc:	2a4e      	cmp	r2, #78	; 0x4e
 80118be:	f47f aedc 	bne.w	801167a <_strtod_l+0xba>
 80118c2:	499d      	ldr	r1, [pc, #628]	; (8011b38 <_strtod_l+0x578>)
 80118c4:	a819      	add	r0, sp, #100	; 0x64
 80118c6:	f002 f853 	bl	8013970 <__match>
 80118ca:	2800      	cmp	r0, #0
 80118cc:	f43f aed5 	beq.w	801167a <_strtod_l+0xba>
 80118d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80118d2:	781b      	ldrb	r3, [r3, #0]
 80118d4:	2b28      	cmp	r3, #40	; 0x28
 80118d6:	d12c      	bne.n	8011932 <_strtod_l+0x372>
 80118d8:	4998      	ldr	r1, [pc, #608]	; (8011b3c <_strtod_l+0x57c>)
 80118da:	aa1c      	add	r2, sp, #112	; 0x70
 80118dc:	a819      	add	r0, sp, #100	; 0x64
 80118de:	f002 f85b 	bl	8013998 <__hexnan>
 80118e2:	2805      	cmp	r0, #5
 80118e4:	d125      	bne.n	8011932 <_strtod_l+0x372>
 80118e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80118e8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80118ec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80118f0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80118f4:	e6a5      	b.n	8011642 <_strtod_l+0x82>
 80118f6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80118fa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80118fe:	e7bc      	b.n	801187a <_strtod_l+0x2ba>
 8011900:	2a6e      	cmp	r2, #110	; 0x6e
 8011902:	e7dc      	b.n	80118be <_strtod_l+0x2fe>
 8011904:	498e      	ldr	r1, [pc, #568]	; (8011b40 <_strtod_l+0x580>)
 8011906:	a819      	add	r0, sp, #100	; 0x64
 8011908:	f002 f832 	bl	8013970 <__match>
 801190c:	2800      	cmp	r0, #0
 801190e:	f43f aeb4 	beq.w	801167a <_strtod_l+0xba>
 8011912:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011914:	498b      	ldr	r1, [pc, #556]	; (8011b44 <_strtod_l+0x584>)
 8011916:	3b01      	subs	r3, #1
 8011918:	a819      	add	r0, sp, #100	; 0x64
 801191a:	9319      	str	r3, [sp, #100]	; 0x64
 801191c:	f002 f828 	bl	8013970 <__match>
 8011920:	b910      	cbnz	r0, 8011928 <_strtod_l+0x368>
 8011922:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011924:	3301      	adds	r3, #1
 8011926:	9319      	str	r3, [sp, #100]	; 0x64
 8011928:	f04f 0800 	mov.w	r8, #0
 801192c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8011b48 <_strtod_l+0x588>
 8011930:	e687      	b.n	8011642 <_strtod_l+0x82>
 8011932:	4886      	ldr	r0, [pc, #536]	; (8011b4c <_strtod_l+0x58c>)
 8011934:	f003 f8a0 	bl	8014a78 <nan>
 8011938:	4680      	mov	r8, r0
 801193a:	4689      	mov	r9, r1
 801193c:	e681      	b.n	8011642 <_strtod_l+0x82>
 801193e:	9b04      	ldr	r3, [sp, #16]
 8011940:	f1bb 0f00 	cmp.w	fp, #0
 8011944:	bf08      	it	eq
 8011946:	46a3      	moveq	fp, r4
 8011948:	1aeb      	subs	r3, r5, r3
 801194a:	2c10      	cmp	r4, #16
 801194c:	9806      	ldr	r0, [sp, #24]
 801194e:	4626      	mov	r6, r4
 8011950:	9307      	str	r3, [sp, #28]
 8011952:	bfa8      	it	ge
 8011954:	2610      	movge	r6, #16
 8011956:	f7ee fdb5 	bl	80004c4 <__aeabi_ui2d>
 801195a:	2c09      	cmp	r4, #9
 801195c:	4680      	mov	r8, r0
 801195e:	4689      	mov	r9, r1
 8011960:	dd13      	ble.n	801198a <_strtod_l+0x3ca>
 8011962:	4b7b      	ldr	r3, [pc, #492]	; (8011b50 <_strtod_l+0x590>)
 8011964:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011968:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801196c:	f7ee fe24 	bl	80005b8 <__aeabi_dmul>
 8011970:	4680      	mov	r8, r0
 8011972:	9805      	ldr	r0, [sp, #20]
 8011974:	4689      	mov	r9, r1
 8011976:	f7ee fda5 	bl	80004c4 <__aeabi_ui2d>
 801197a:	4602      	mov	r2, r0
 801197c:	460b      	mov	r3, r1
 801197e:	4640      	mov	r0, r8
 8011980:	4649      	mov	r1, r9
 8011982:	f7ee fc63 	bl	800024c <__adddf3>
 8011986:	4680      	mov	r8, r0
 8011988:	4689      	mov	r9, r1
 801198a:	2c0f      	cmp	r4, #15
 801198c:	dc36      	bgt.n	80119fc <_strtod_l+0x43c>
 801198e:	9b07      	ldr	r3, [sp, #28]
 8011990:	2b00      	cmp	r3, #0
 8011992:	f43f ae56 	beq.w	8011642 <_strtod_l+0x82>
 8011996:	dd22      	ble.n	80119de <_strtod_l+0x41e>
 8011998:	2b16      	cmp	r3, #22
 801199a:	dc09      	bgt.n	80119b0 <_strtod_l+0x3f0>
 801199c:	496c      	ldr	r1, [pc, #432]	; (8011b50 <_strtod_l+0x590>)
 801199e:	4642      	mov	r2, r8
 80119a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80119a4:	464b      	mov	r3, r9
 80119a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119aa:	f7ee fe05 	bl	80005b8 <__aeabi_dmul>
 80119ae:	e7c3      	b.n	8011938 <_strtod_l+0x378>
 80119b0:	9a07      	ldr	r2, [sp, #28]
 80119b2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80119b6:	4293      	cmp	r3, r2
 80119b8:	db20      	blt.n	80119fc <_strtod_l+0x43c>
 80119ba:	4d65      	ldr	r5, [pc, #404]	; (8011b50 <_strtod_l+0x590>)
 80119bc:	f1c4 040f 	rsb	r4, r4, #15
 80119c0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80119c4:	4642      	mov	r2, r8
 80119c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119ca:	464b      	mov	r3, r9
 80119cc:	f7ee fdf4 	bl	80005b8 <__aeabi_dmul>
 80119d0:	9b07      	ldr	r3, [sp, #28]
 80119d2:	1b1c      	subs	r4, r3, r4
 80119d4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80119d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80119dc:	e7e5      	b.n	80119aa <_strtod_l+0x3ea>
 80119de:	9b07      	ldr	r3, [sp, #28]
 80119e0:	3316      	adds	r3, #22
 80119e2:	db0b      	blt.n	80119fc <_strtod_l+0x43c>
 80119e4:	9b04      	ldr	r3, [sp, #16]
 80119e6:	4640      	mov	r0, r8
 80119e8:	1b5d      	subs	r5, r3, r5
 80119ea:	4b59      	ldr	r3, [pc, #356]	; (8011b50 <_strtod_l+0x590>)
 80119ec:	4649      	mov	r1, r9
 80119ee:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80119f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80119f6:	f7ee ff09 	bl	800080c <__aeabi_ddiv>
 80119fa:	e79d      	b.n	8011938 <_strtod_l+0x378>
 80119fc:	9b07      	ldr	r3, [sp, #28]
 80119fe:	1ba6      	subs	r6, r4, r6
 8011a00:	441e      	add	r6, r3
 8011a02:	2e00      	cmp	r6, #0
 8011a04:	dd74      	ble.n	8011af0 <_strtod_l+0x530>
 8011a06:	f016 030f 	ands.w	r3, r6, #15
 8011a0a:	d00a      	beq.n	8011a22 <_strtod_l+0x462>
 8011a0c:	4950      	ldr	r1, [pc, #320]	; (8011b50 <_strtod_l+0x590>)
 8011a0e:	4642      	mov	r2, r8
 8011a10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011a14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a18:	464b      	mov	r3, r9
 8011a1a:	f7ee fdcd 	bl	80005b8 <__aeabi_dmul>
 8011a1e:	4680      	mov	r8, r0
 8011a20:	4689      	mov	r9, r1
 8011a22:	f036 060f 	bics.w	r6, r6, #15
 8011a26:	d052      	beq.n	8011ace <_strtod_l+0x50e>
 8011a28:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8011a2c:	dd27      	ble.n	8011a7e <_strtod_l+0x4be>
 8011a2e:	f04f 0b00 	mov.w	fp, #0
 8011a32:	f8cd b010 	str.w	fp, [sp, #16]
 8011a36:	f8cd b020 	str.w	fp, [sp, #32]
 8011a3a:	f8cd b018 	str.w	fp, [sp, #24]
 8011a3e:	2322      	movs	r3, #34	; 0x22
 8011a40:	f04f 0800 	mov.w	r8, #0
 8011a44:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8011b48 <_strtod_l+0x588>
 8011a48:	f8ca 3000 	str.w	r3, [sl]
 8011a4c:	9b08      	ldr	r3, [sp, #32]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	f43f adf7 	beq.w	8011642 <_strtod_l+0x82>
 8011a54:	4650      	mov	r0, sl
 8011a56:	991a      	ldr	r1, [sp, #104]	; 0x68
 8011a58:	f002 f8bc 	bl	8013bd4 <_Bfree>
 8011a5c:	4650      	mov	r0, sl
 8011a5e:	9906      	ldr	r1, [sp, #24]
 8011a60:	f002 f8b8 	bl	8013bd4 <_Bfree>
 8011a64:	4650      	mov	r0, sl
 8011a66:	9904      	ldr	r1, [sp, #16]
 8011a68:	f002 f8b4 	bl	8013bd4 <_Bfree>
 8011a6c:	4650      	mov	r0, sl
 8011a6e:	9908      	ldr	r1, [sp, #32]
 8011a70:	f002 f8b0 	bl	8013bd4 <_Bfree>
 8011a74:	4659      	mov	r1, fp
 8011a76:	4650      	mov	r0, sl
 8011a78:	f002 f8ac 	bl	8013bd4 <_Bfree>
 8011a7c:	e5e1      	b.n	8011642 <_strtod_l+0x82>
 8011a7e:	4b35      	ldr	r3, [pc, #212]	; (8011b54 <_strtod_l+0x594>)
 8011a80:	4640      	mov	r0, r8
 8011a82:	9305      	str	r3, [sp, #20]
 8011a84:	2300      	movs	r3, #0
 8011a86:	4649      	mov	r1, r9
 8011a88:	461f      	mov	r7, r3
 8011a8a:	1136      	asrs	r6, r6, #4
 8011a8c:	2e01      	cmp	r6, #1
 8011a8e:	dc21      	bgt.n	8011ad4 <_strtod_l+0x514>
 8011a90:	b10b      	cbz	r3, 8011a96 <_strtod_l+0x4d6>
 8011a92:	4680      	mov	r8, r0
 8011a94:	4689      	mov	r9, r1
 8011a96:	4b2f      	ldr	r3, [pc, #188]	; (8011b54 <_strtod_l+0x594>)
 8011a98:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8011a9c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011aa0:	4642      	mov	r2, r8
 8011aa2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011aa6:	464b      	mov	r3, r9
 8011aa8:	f7ee fd86 	bl	80005b8 <__aeabi_dmul>
 8011aac:	4b26      	ldr	r3, [pc, #152]	; (8011b48 <_strtod_l+0x588>)
 8011aae:	460a      	mov	r2, r1
 8011ab0:	400b      	ands	r3, r1
 8011ab2:	4929      	ldr	r1, [pc, #164]	; (8011b58 <_strtod_l+0x598>)
 8011ab4:	4680      	mov	r8, r0
 8011ab6:	428b      	cmp	r3, r1
 8011ab8:	d8b9      	bhi.n	8011a2e <_strtod_l+0x46e>
 8011aba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011abe:	428b      	cmp	r3, r1
 8011ac0:	bf86      	itte	hi
 8011ac2:	f04f 38ff 	movhi.w	r8, #4294967295
 8011ac6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8011b5c <_strtod_l+0x59c>
 8011aca:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8011ace:	2300      	movs	r3, #0
 8011ad0:	9305      	str	r3, [sp, #20]
 8011ad2:	e07f      	b.n	8011bd4 <_strtod_l+0x614>
 8011ad4:	07f2      	lsls	r2, r6, #31
 8011ad6:	d505      	bpl.n	8011ae4 <_strtod_l+0x524>
 8011ad8:	9b05      	ldr	r3, [sp, #20]
 8011ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ade:	f7ee fd6b 	bl	80005b8 <__aeabi_dmul>
 8011ae2:	2301      	movs	r3, #1
 8011ae4:	9a05      	ldr	r2, [sp, #20]
 8011ae6:	3701      	adds	r7, #1
 8011ae8:	3208      	adds	r2, #8
 8011aea:	1076      	asrs	r6, r6, #1
 8011aec:	9205      	str	r2, [sp, #20]
 8011aee:	e7cd      	b.n	8011a8c <_strtod_l+0x4cc>
 8011af0:	d0ed      	beq.n	8011ace <_strtod_l+0x50e>
 8011af2:	4276      	negs	r6, r6
 8011af4:	f016 020f 	ands.w	r2, r6, #15
 8011af8:	d00a      	beq.n	8011b10 <_strtod_l+0x550>
 8011afa:	4b15      	ldr	r3, [pc, #84]	; (8011b50 <_strtod_l+0x590>)
 8011afc:	4640      	mov	r0, r8
 8011afe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b02:	4649      	mov	r1, r9
 8011b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b08:	f7ee fe80 	bl	800080c <__aeabi_ddiv>
 8011b0c:	4680      	mov	r8, r0
 8011b0e:	4689      	mov	r9, r1
 8011b10:	1136      	asrs	r6, r6, #4
 8011b12:	d0dc      	beq.n	8011ace <_strtod_l+0x50e>
 8011b14:	2e1f      	cmp	r6, #31
 8011b16:	dd23      	ble.n	8011b60 <_strtod_l+0x5a0>
 8011b18:	f04f 0b00 	mov.w	fp, #0
 8011b1c:	f8cd b010 	str.w	fp, [sp, #16]
 8011b20:	f8cd b020 	str.w	fp, [sp, #32]
 8011b24:	f8cd b018 	str.w	fp, [sp, #24]
 8011b28:	2322      	movs	r3, #34	; 0x22
 8011b2a:	f04f 0800 	mov.w	r8, #0
 8011b2e:	f04f 0900 	mov.w	r9, #0
 8011b32:	f8ca 3000 	str.w	r3, [sl]
 8011b36:	e789      	b.n	8011a4c <_strtod_l+0x48c>
 8011b38:	08015a1d 	.word	0x08015a1d
 8011b3c:	08015a58 	.word	0x08015a58
 8011b40:	08015a15 	.word	0x08015a15
 8011b44:	08015c4c 	.word	0x08015c4c
 8011b48:	7ff00000 	.word	0x7ff00000
 8011b4c:	08015b47 	.word	0x08015b47
 8011b50:	08015dc0 	.word	0x08015dc0
 8011b54:	08015d98 	.word	0x08015d98
 8011b58:	7ca00000 	.word	0x7ca00000
 8011b5c:	7fefffff 	.word	0x7fefffff
 8011b60:	f016 0310 	ands.w	r3, r6, #16
 8011b64:	bf18      	it	ne
 8011b66:	236a      	movne	r3, #106	; 0x6a
 8011b68:	4640      	mov	r0, r8
 8011b6a:	9305      	str	r3, [sp, #20]
 8011b6c:	4649      	mov	r1, r9
 8011b6e:	2300      	movs	r3, #0
 8011b70:	4fb0      	ldr	r7, [pc, #704]	; (8011e34 <_strtod_l+0x874>)
 8011b72:	07f2      	lsls	r2, r6, #31
 8011b74:	d504      	bpl.n	8011b80 <_strtod_l+0x5c0>
 8011b76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011b7a:	f7ee fd1d 	bl	80005b8 <__aeabi_dmul>
 8011b7e:	2301      	movs	r3, #1
 8011b80:	1076      	asrs	r6, r6, #1
 8011b82:	f107 0708 	add.w	r7, r7, #8
 8011b86:	d1f4      	bne.n	8011b72 <_strtod_l+0x5b2>
 8011b88:	b10b      	cbz	r3, 8011b8e <_strtod_l+0x5ce>
 8011b8a:	4680      	mov	r8, r0
 8011b8c:	4689      	mov	r9, r1
 8011b8e:	9b05      	ldr	r3, [sp, #20]
 8011b90:	b1c3      	cbz	r3, 8011bc4 <_strtod_l+0x604>
 8011b92:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8011b96:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	4649      	mov	r1, r9
 8011b9e:	dd11      	ble.n	8011bc4 <_strtod_l+0x604>
 8011ba0:	2b1f      	cmp	r3, #31
 8011ba2:	f340 8127 	ble.w	8011df4 <_strtod_l+0x834>
 8011ba6:	2b34      	cmp	r3, #52	; 0x34
 8011ba8:	bfd8      	it	le
 8011baa:	f04f 33ff 	movle.w	r3, #4294967295
 8011bae:	f04f 0800 	mov.w	r8, #0
 8011bb2:	bfcf      	iteee	gt
 8011bb4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8011bb8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8011bbc:	fa03 f202 	lslle.w	r2, r3, r2
 8011bc0:	ea02 0901 	andle.w	r9, r2, r1
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	4640      	mov	r0, r8
 8011bca:	4649      	mov	r1, r9
 8011bcc:	f7ee ff5c 	bl	8000a88 <__aeabi_dcmpeq>
 8011bd0:	2800      	cmp	r0, #0
 8011bd2:	d1a1      	bne.n	8011b18 <_strtod_l+0x558>
 8011bd4:	9b06      	ldr	r3, [sp, #24]
 8011bd6:	465a      	mov	r2, fp
 8011bd8:	9300      	str	r3, [sp, #0]
 8011bda:	4650      	mov	r0, sl
 8011bdc:	4623      	mov	r3, r4
 8011bde:	9908      	ldr	r1, [sp, #32]
 8011be0:	f002 f860 	bl	8013ca4 <__s2b>
 8011be4:	9008      	str	r0, [sp, #32]
 8011be6:	2800      	cmp	r0, #0
 8011be8:	f43f af21 	beq.w	8011a2e <_strtod_l+0x46e>
 8011bec:	9b04      	ldr	r3, [sp, #16]
 8011bee:	f04f 0b00 	mov.w	fp, #0
 8011bf2:	1b5d      	subs	r5, r3, r5
 8011bf4:	9b07      	ldr	r3, [sp, #28]
 8011bf6:	f8cd b010 	str.w	fp, [sp, #16]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	bfb4      	ite	lt
 8011bfe:	462b      	movlt	r3, r5
 8011c00:	2300      	movge	r3, #0
 8011c02:	930e      	str	r3, [sp, #56]	; 0x38
 8011c04:	9b07      	ldr	r3, [sp, #28]
 8011c06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011c0a:	9314      	str	r3, [sp, #80]	; 0x50
 8011c0c:	9b08      	ldr	r3, [sp, #32]
 8011c0e:	4650      	mov	r0, sl
 8011c10:	6859      	ldr	r1, [r3, #4]
 8011c12:	f001 ff9f 	bl	8013b54 <_Balloc>
 8011c16:	9006      	str	r0, [sp, #24]
 8011c18:	2800      	cmp	r0, #0
 8011c1a:	f43f af10 	beq.w	8011a3e <_strtod_l+0x47e>
 8011c1e:	9b08      	ldr	r3, [sp, #32]
 8011c20:	300c      	adds	r0, #12
 8011c22:	691a      	ldr	r2, [r3, #16]
 8011c24:	f103 010c 	add.w	r1, r3, #12
 8011c28:	3202      	adds	r2, #2
 8011c2a:	0092      	lsls	r2, r2, #2
 8011c2c:	f7fe fe4a 	bl	80108c4 <memcpy>
 8011c30:	ab1c      	add	r3, sp, #112	; 0x70
 8011c32:	9301      	str	r3, [sp, #4]
 8011c34:	ab1b      	add	r3, sp, #108	; 0x6c
 8011c36:	9300      	str	r3, [sp, #0]
 8011c38:	4642      	mov	r2, r8
 8011c3a:	464b      	mov	r3, r9
 8011c3c:	4650      	mov	r0, sl
 8011c3e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8011c42:	f002 fb71 	bl	8014328 <__d2b>
 8011c46:	901a      	str	r0, [sp, #104]	; 0x68
 8011c48:	2800      	cmp	r0, #0
 8011c4a:	f43f aef8 	beq.w	8011a3e <_strtod_l+0x47e>
 8011c4e:	2101      	movs	r1, #1
 8011c50:	4650      	mov	r0, sl
 8011c52:	f002 f8bf 	bl	8013dd4 <__i2b>
 8011c56:	4603      	mov	r3, r0
 8011c58:	9004      	str	r0, [sp, #16]
 8011c5a:	2800      	cmp	r0, #0
 8011c5c:	f43f aeef 	beq.w	8011a3e <_strtod_l+0x47e>
 8011c60:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8011c62:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011c64:	2d00      	cmp	r5, #0
 8011c66:	bfab      	itete	ge
 8011c68:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8011c6a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8011c6c:	18ee      	addge	r6, r5, r3
 8011c6e:	1b5c      	sublt	r4, r3, r5
 8011c70:	9b05      	ldr	r3, [sp, #20]
 8011c72:	bfa8      	it	ge
 8011c74:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8011c76:	eba5 0503 	sub.w	r5, r5, r3
 8011c7a:	4415      	add	r5, r2
 8011c7c:	4b6e      	ldr	r3, [pc, #440]	; (8011e38 <_strtod_l+0x878>)
 8011c7e:	f105 35ff 	add.w	r5, r5, #4294967295
 8011c82:	bfb8      	it	lt
 8011c84:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8011c86:	429d      	cmp	r5, r3
 8011c88:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011c8c:	f280 80c4 	bge.w	8011e18 <_strtod_l+0x858>
 8011c90:	1b5b      	subs	r3, r3, r5
 8011c92:	2b1f      	cmp	r3, #31
 8011c94:	f04f 0701 	mov.w	r7, #1
 8011c98:	eba2 0203 	sub.w	r2, r2, r3
 8011c9c:	f300 80b1 	bgt.w	8011e02 <_strtod_l+0x842>
 8011ca0:	2500      	movs	r5, #0
 8011ca2:	fa07 f303 	lsl.w	r3, r7, r3
 8011ca6:	930f      	str	r3, [sp, #60]	; 0x3c
 8011ca8:	18b7      	adds	r7, r6, r2
 8011caa:	9b05      	ldr	r3, [sp, #20]
 8011cac:	42be      	cmp	r6, r7
 8011cae:	4414      	add	r4, r2
 8011cb0:	441c      	add	r4, r3
 8011cb2:	4633      	mov	r3, r6
 8011cb4:	bfa8      	it	ge
 8011cb6:	463b      	movge	r3, r7
 8011cb8:	42a3      	cmp	r3, r4
 8011cba:	bfa8      	it	ge
 8011cbc:	4623      	movge	r3, r4
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	bfc2      	ittt	gt
 8011cc2:	1aff      	subgt	r7, r7, r3
 8011cc4:	1ae4      	subgt	r4, r4, r3
 8011cc6:	1af6      	subgt	r6, r6, r3
 8011cc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	dd17      	ble.n	8011cfe <_strtod_l+0x73e>
 8011cce:	461a      	mov	r2, r3
 8011cd0:	4650      	mov	r0, sl
 8011cd2:	9904      	ldr	r1, [sp, #16]
 8011cd4:	f002 f93c 	bl	8013f50 <__pow5mult>
 8011cd8:	9004      	str	r0, [sp, #16]
 8011cda:	2800      	cmp	r0, #0
 8011cdc:	f43f aeaf 	beq.w	8011a3e <_strtod_l+0x47e>
 8011ce0:	4601      	mov	r1, r0
 8011ce2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011ce4:	4650      	mov	r0, sl
 8011ce6:	f002 f88b 	bl	8013e00 <__multiply>
 8011cea:	9009      	str	r0, [sp, #36]	; 0x24
 8011cec:	2800      	cmp	r0, #0
 8011cee:	f43f aea6 	beq.w	8011a3e <_strtod_l+0x47e>
 8011cf2:	4650      	mov	r0, sl
 8011cf4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8011cf6:	f001 ff6d 	bl	8013bd4 <_Bfree>
 8011cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cfc:	931a      	str	r3, [sp, #104]	; 0x68
 8011cfe:	2f00      	cmp	r7, #0
 8011d00:	f300 808e 	bgt.w	8011e20 <_strtod_l+0x860>
 8011d04:	9b07      	ldr	r3, [sp, #28]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	dd08      	ble.n	8011d1c <_strtod_l+0x75c>
 8011d0a:	4650      	mov	r0, sl
 8011d0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011d0e:	9906      	ldr	r1, [sp, #24]
 8011d10:	f002 f91e 	bl	8013f50 <__pow5mult>
 8011d14:	9006      	str	r0, [sp, #24]
 8011d16:	2800      	cmp	r0, #0
 8011d18:	f43f ae91 	beq.w	8011a3e <_strtod_l+0x47e>
 8011d1c:	2c00      	cmp	r4, #0
 8011d1e:	dd08      	ble.n	8011d32 <_strtod_l+0x772>
 8011d20:	4622      	mov	r2, r4
 8011d22:	4650      	mov	r0, sl
 8011d24:	9906      	ldr	r1, [sp, #24]
 8011d26:	f002 f96d 	bl	8014004 <__lshift>
 8011d2a:	9006      	str	r0, [sp, #24]
 8011d2c:	2800      	cmp	r0, #0
 8011d2e:	f43f ae86 	beq.w	8011a3e <_strtod_l+0x47e>
 8011d32:	2e00      	cmp	r6, #0
 8011d34:	dd08      	ble.n	8011d48 <_strtod_l+0x788>
 8011d36:	4632      	mov	r2, r6
 8011d38:	4650      	mov	r0, sl
 8011d3a:	9904      	ldr	r1, [sp, #16]
 8011d3c:	f002 f962 	bl	8014004 <__lshift>
 8011d40:	9004      	str	r0, [sp, #16]
 8011d42:	2800      	cmp	r0, #0
 8011d44:	f43f ae7b 	beq.w	8011a3e <_strtod_l+0x47e>
 8011d48:	4650      	mov	r0, sl
 8011d4a:	9a06      	ldr	r2, [sp, #24]
 8011d4c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8011d4e:	f002 f9e5 	bl	801411c <__mdiff>
 8011d52:	4683      	mov	fp, r0
 8011d54:	2800      	cmp	r0, #0
 8011d56:	f43f ae72 	beq.w	8011a3e <_strtod_l+0x47e>
 8011d5a:	2400      	movs	r4, #0
 8011d5c:	68c3      	ldr	r3, [r0, #12]
 8011d5e:	9904      	ldr	r1, [sp, #16]
 8011d60:	60c4      	str	r4, [r0, #12]
 8011d62:	930b      	str	r3, [sp, #44]	; 0x2c
 8011d64:	f002 f9be 	bl	80140e4 <__mcmp>
 8011d68:	42a0      	cmp	r0, r4
 8011d6a:	da6b      	bge.n	8011e44 <_strtod_l+0x884>
 8011d6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d6e:	ea53 0308 	orrs.w	r3, r3, r8
 8011d72:	f040 8091 	bne.w	8011e98 <_strtod_l+0x8d8>
 8011d76:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	f040 808c 	bne.w	8011e98 <_strtod_l+0x8d8>
 8011d80:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011d84:	0d1b      	lsrs	r3, r3, #20
 8011d86:	051b      	lsls	r3, r3, #20
 8011d88:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011d8c:	f240 8084 	bls.w	8011e98 <_strtod_l+0x8d8>
 8011d90:	f8db 3014 	ldr.w	r3, [fp, #20]
 8011d94:	b91b      	cbnz	r3, 8011d9e <_strtod_l+0x7de>
 8011d96:	f8db 3010 	ldr.w	r3, [fp, #16]
 8011d9a:	2b01      	cmp	r3, #1
 8011d9c:	dd7c      	ble.n	8011e98 <_strtod_l+0x8d8>
 8011d9e:	4659      	mov	r1, fp
 8011da0:	2201      	movs	r2, #1
 8011da2:	4650      	mov	r0, sl
 8011da4:	f002 f92e 	bl	8014004 <__lshift>
 8011da8:	9904      	ldr	r1, [sp, #16]
 8011daa:	4683      	mov	fp, r0
 8011dac:	f002 f99a 	bl	80140e4 <__mcmp>
 8011db0:	2800      	cmp	r0, #0
 8011db2:	dd71      	ble.n	8011e98 <_strtod_l+0x8d8>
 8011db4:	9905      	ldr	r1, [sp, #20]
 8011db6:	464b      	mov	r3, r9
 8011db8:	4a20      	ldr	r2, [pc, #128]	; (8011e3c <_strtod_l+0x87c>)
 8011dba:	2900      	cmp	r1, #0
 8011dbc:	f000 808c 	beq.w	8011ed8 <_strtod_l+0x918>
 8011dc0:	ea02 0109 	and.w	r1, r2, r9
 8011dc4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011dc8:	f300 8086 	bgt.w	8011ed8 <_strtod_l+0x918>
 8011dcc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011dd0:	f77f aeaa 	ble.w	8011b28 <_strtod_l+0x568>
 8011dd4:	4640      	mov	r0, r8
 8011dd6:	4649      	mov	r1, r9
 8011dd8:	4b19      	ldr	r3, [pc, #100]	; (8011e40 <_strtod_l+0x880>)
 8011dda:	2200      	movs	r2, #0
 8011ddc:	f7ee fbec 	bl	80005b8 <__aeabi_dmul>
 8011de0:	460b      	mov	r3, r1
 8011de2:	4303      	orrs	r3, r0
 8011de4:	bf08      	it	eq
 8011de6:	2322      	moveq	r3, #34	; 0x22
 8011de8:	4680      	mov	r8, r0
 8011dea:	4689      	mov	r9, r1
 8011dec:	bf08      	it	eq
 8011dee:	f8ca 3000 	streq.w	r3, [sl]
 8011df2:	e62f      	b.n	8011a54 <_strtod_l+0x494>
 8011df4:	f04f 32ff 	mov.w	r2, #4294967295
 8011df8:	fa02 f303 	lsl.w	r3, r2, r3
 8011dfc:	ea03 0808 	and.w	r8, r3, r8
 8011e00:	e6e0      	b.n	8011bc4 <_strtod_l+0x604>
 8011e02:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8011e06:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8011e0a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8011e0e:	35e2      	adds	r5, #226	; 0xe2
 8011e10:	fa07 f505 	lsl.w	r5, r7, r5
 8011e14:	970f      	str	r7, [sp, #60]	; 0x3c
 8011e16:	e747      	b.n	8011ca8 <_strtod_l+0x6e8>
 8011e18:	2301      	movs	r3, #1
 8011e1a:	2500      	movs	r5, #0
 8011e1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e1e:	e743      	b.n	8011ca8 <_strtod_l+0x6e8>
 8011e20:	463a      	mov	r2, r7
 8011e22:	4650      	mov	r0, sl
 8011e24:	991a      	ldr	r1, [sp, #104]	; 0x68
 8011e26:	f002 f8ed 	bl	8014004 <__lshift>
 8011e2a:	901a      	str	r0, [sp, #104]	; 0x68
 8011e2c:	2800      	cmp	r0, #0
 8011e2e:	f47f af69 	bne.w	8011d04 <_strtod_l+0x744>
 8011e32:	e604      	b.n	8011a3e <_strtod_l+0x47e>
 8011e34:	08015a70 	.word	0x08015a70
 8011e38:	fffffc02 	.word	0xfffffc02
 8011e3c:	7ff00000 	.word	0x7ff00000
 8011e40:	39500000 	.word	0x39500000
 8011e44:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011e48:	d165      	bne.n	8011f16 <_strtod_l+0x956>
 8011e4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011e4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011e50:	b35a      	cbz	r2, 8011eaa <_strtod_l+0x8ea>
 8011e52:	4a99      	ldr	r2, [pc, #612]	; (80120b8 <_strtod_l+0xaf8>)
 8011e54:	4293      	cmp	r3, r2
 8011e56:	d12b      	bne.n	8011eb0 <_strtod_l+0x8f0>
 8011e58:	9b05      	ldr	r3, [sp, #20]
 8011e5a:	4641      	mov	r1, r8
 8011e5c:	b303      	cbz	r3, 8011ea0 <_strtod_l+0x8e0>
 8011e5e:	464a      	mov	r2, r9
 8011e60:	4b96      	ldr	r3, [pc, #600]	; (80120bc <_strtod_l+0xafc>)
 8011e62:	4013      	ands	r3, r2
 8011e64:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011e68:	f04f 32ff 	mov.w	r2, #4294967295
 8011e6c:	d81b      	bhi.n	8011ea6 <_strtod_l+0x8e6>
 8011e6e:	0d1b      	lsrs	r3, r3, #20
 8011e70:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011e74:	fa02 f303 	lsl.w	r3, r2, r3
 8011e78:	4299      	cmp	r1, r3
 8011e7a:	d119      	bne.n	8011eb0 <_strtod_l+0x8f0>
 8011e7c:	4b90      	ldr	r3, [pc, #576]	; (80120c0 <_strtod_l+0xb00>)
 8011e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e80:	429a      	cmp	r2, r3
 8011e82:	d102      	bne.n	8011e8a <_strtod_l+0x8ca>
 8011e84:	3101      	adds	r1, #1
 8011e86:	f43f adda 	beq.w	8011a3e <_strtod_l+0x47e>
 8011e8a:	f04f 0800 	mov.w	r8, #0
 8011e8e:	4b8b      	ldr	r3, [pc, #556]	; (80120bc <_strtod_l+0xafc>)
 8011e90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e92:	401a      	ands	r2, r3
 8011e94:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8011e98:	9b05      	ldr	r3, [sp, #20]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d19a      	bne.n	8011dd4 <_strtod_l+0x814>
 8011e9e:	e5d9      	b.n	8011a54 <_strtod_l+0x494>
 8011ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ea4:	e7e8      	b.n	8011e78 <_strtod_l+0x8b8>
 8011ea6:	4613      	mov	r3, r2
 8011ea8:	e7e6      	b.n	8011e78 <_strtod_l+0x8b8>
 8011eaa:	ea53 0308 	orrs.w	r3, r3, r8
 8011eae:	d081      	beq.n	8011db4 <_strtod_l+0x7f4>
 8011eb0:	b1e5      	cbz	r5, 8011eec <_strtod_l+0x92c>
 8011eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eb4:	421d      	tst	r5, r3
 8011eb6:	d0ef      	beq.n	8011e98 <_strtod_l+0x8d8>
 8011eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011eba:	4640      	mov	r0, r8
 8011ebc:	4649      	mov	r1, r9
 8011ebe:	9a05      	ldr	r2, [sp, #20]
 8011ec0:	b1c3      	cbz	r3, 8011ef4 <_strtod_l+0x934>
 8011ec2:	f7ff fb5b 	bl	801157c <sulp>
 8011ec6:	4602      	mov	r2, r0
 8011ec8:	460b      	mov	r3, r1
 8011eca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011ece:	f7ee f9bd 	bl	800024c <__adddf3>
 8011ed2:	4680      	mov	r8, r0
 8011ed4:	4689      	mov	r9, r1
 8011ed6:	e7df      	b.n	8011e98 <_strtod_l+0x8d8>
 8011ed8:	4013      	ands	r3, r2
 8011eda:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011ede:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8011ee2:	f04f 38ff 	mov.w	r8, #4294967295
 8011ee6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8011eea:	e7d5      	b.n	8011e98 <_strtod_l+0x8d8>
 8011eec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011eee:	ea13 0f08 	tst.w	r3, r8
 8011ef2:	e7e0      	b.n	8011eb6 <_strtod_l+0x8f6>
 8011ef4:	f7ff fb42 	bl	801157c <sulp>
 8011ef8:	4602      	mov	r2, r0
 8011efa:	460b      	mov	r3, r1
 8011efc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011f00:	f7ee f9a2 	bl	8000248 <__aeabi_dsub>
 8011f04:	2200      	movs	r2, #0
 8011f06:	2300      	movs	r3, #0
 8011f08:	4680      	mov	r8, r0
 8011f0a:	4689      	mov	r9, r1
 8011f0c:	f7ee fdbc 	bl	8000a88 <__aeabi_dcmpeq>
 8011f10:	2800      	cmp	r0, #0
 8011f12:	d0c1      	beq.n	8011e98 <_strtod_l+0x8d8>
 8011f14:	e608      	b.n	8011b28 <_strtod_l+0x568>
 8011f16:	4658      	mov	r0, fp
 8011f18:	9904      	ldr	r1, [sp, #16]
 8011f1a:	f002 fa61 	bl	80143e0 <__ratio>
 8011f1e:	2200      	movs	r2, #0
 8011f20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011f24:	4606      	mov	r6, r0
 8011f26:	460f      	mov	r7, r1
 8011f28:	f7ee fdc2 	bl	8000ab0 <__aeabi_dcmple>
 8011f2c:	2800      	cmp	r0, #0
 8011f2e:	d070      	beq.n	8012012 <_strtod_l+0xa52>
 8011f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d042      	beq.n	8011fbc <_strtod_l+0x9fc>
 8011f36:	2600      	movs	r6, #0
 8011f38:	4f62      	ldr	r7, [pc, #392]	; (80120c4 <_strtod_l+0xb04>)
 8011f3a:	4d62      	ldr	r5, [pc, #392]	; (80120c4 <_strtod_l+0xb04>)
 8011f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011f42:	0d1b      	lsrs	r3, r3, #20
 8011f44:	051b      	lsls	r3, r3, #20
 8011f46:	930f      	str	r3, [sp, #60]	; 0x3c
 8011f48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011f4a:	4b5f      	ldr	r3, [pc, #380]	; (80120c8 <_strtod_l+0xb08>)
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	f040 80c3 	bne.w	80120d8 <_strtod_l+0xb18>
 8011f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f54:	4640      	mov	r0, r8
 8011f56:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8011f5a:	4649      	mov	r1, r9
 8011f5c:	f002 f96a 	bl	8014234 <__ulp>
 8011f60:	4602      	mov	r2, r0
 8011f62:	460b      	mov	r3, r1
 8011f64:	4630      	mov	r0, r6
 8011f66:	4639      	mov	r1, r7
 8011f68:	f7ee fb26 	bl	80005b8 <__aeabi_dmul>
 8011f6c:	4642      	mov	r2, r8
 8011f6e:	464b      	mov	r3, r9
 8011f70:	f7ee f96c 	bl	800024c <__adddf3>
 8011f74:	460b      	mov	r3, r1
 8011f76:	4951      	ldr	r1, [pc, #324]	; (80120bc <_strtod_l+0xafc>)
 8011f78:	4a54      	ldr	r2, [pc, #336]	; (80120cc <_strtod_l+0xb0c>)
 8011f7a:	4019      	ands	r1, r3
 8011f7c:	4291      	cmp	r1, r2
 8011f7e:	4680      	mov	r8, r0
 8011f80:	d95d      	bls.n	801203e <_strtod_l+0xa7e>
 8011f82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011f84:	4b4e      	ldr	r3, [pc, #312]	; (80120c0 <_strtod_l+0xb00>)
 8011f86:	429a      	cmp	r2, r3
 8011f88:	d103      	bne.n	8011f92 <_strtod_l+0x9d2>
 8011f8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f8c:	3301      	adds	r3, #1
 8011f8e:	f43f ad56 	beq.w	8011a3e <_strtod_l+0x47e>
 8011f92:	f04f 38ff 	mov.w	r8, #4294967295
 8011f96:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80120c0 <_strtod_l+0xb00>
 8011f9a:	4650      	mov	r0, sl
 8011f9c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8011f9e:	f001 fe19 	bl	8013bd4 <_Bfree>
 8011fa2:	4650      	mov	r0, sl
 8011fa4:	9906      	ldr	r1, [sp, #24]
 8011fa6:	f001 fe15 	bl	8013bd4 <_Bfree>
 8011faa:	4650      	mov	r0, sl
 8011fac:	9904      	ldr	r1, [sp, #16]
 8011fae:	f001 fe11 	bl	8013bd4 <_Bfree>
 8011fb2:	4659      	mov	r1, fp
 8011fb4:	4650      	mov	r0, sl
 8011fb6:	f001 fe0d 	bl	8013bd4 <_Bfree>
 8011fba:	e627      	b.n	8011c0c <_strtod_l+0x64c>
 8011fbc:	f1b8 0f00 	cmp.w	r8, #0
 8011fc0:	d119      	bne.n	8011ff6 <_strtod_l+0xa36>
 8011fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011fc8:	b9e3      	cbnz	r3, 8012004 <_strtod_l+0xa44>
 8011fca:	2200      	movs	r2, #0
 8011fcc:	4630      	mov	r0, r6
 8011fce:	4639      	mov	r1, r7
 8011fd0:	4b3c      	ldr	r3, [pc, #240]	; (80120c4 <_strtod_l+0xb04>)
 8011fd2:	f7ee fd63 	bl	8000a9c <__aeabi_dcmplt>
 8011fd6:	b9c8      	cbnz	r0, 801200c <_strtod_l+0xa4c>
 8011fd8:	2200      	movs	r2, #0
 8011fda:	4630      	mov	r0, r6
 8011fdc:	4639      	mov	r1, r7
 8011fde:	4b3c      	ldr	r3, [pc, #240]	; (80120d0 <_strtod_l+0xb10>)
 8011fe0:	f7ee faea 	bl	80005b8 <__aeabi_dmul>
 8011fe4:	4604      	mov	r4, r0
 8011fe6:	460d      	mov	r5, r1
 8011fe8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8011fec:	9416      	str	r4, [sp, #88]	; 0x58
 8011fee:	9317      	str	r3, [sp, #92]	; 0x5c
 8011ff0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8011ff4:	e7a2      	b.n	8011f3c <_strtod_l+0x97c>
 8011ff6:	f1b8 0f01 	cmp.w	r8, #1
 8011ffa:	d103      	bne.n	8012004 <_strtod_l+0xa44>
 8011ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	f43f ad92 	beq.w	8011b28 <_strtod_l+0x568>
 8012004:	2600      	movs	r6, #0
 8012006:	2400      	movs	r4, #0
 8012008:	4f32      	ldr	r7, [pc, #200]	; (80120d4 <_strtod_l+0xb14>)
 801200a:	e796      	b.n	8011f3a <_strtod_l+0x97a>
 801200c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801200e:	4d30      	ldr	r5, [pc, #192]	; (80120d0 <_strtod_l+0xb10>)
 8012010:	e7ea      	b.n	8011fe8 <_strtod_l+0xa28>
 8012012:	4b2f      	ldr	r3, [pc, #188]	; (80120d0 <_strtod_l+0xb10>)
 8012014:	2200      	movs	r2, #0
 8012016:	4630      	mov	r0, r6
 8012018:	4639      	mov	r1, r7
 801201a:	f7ee facd 	bl	80005b8 <__aeabi_dmul>
 801201e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012020:	4604      	mov	r4, r0
 8012022:	460d      	mov	r5, r1
 8012024:	b933      	cbnz	r3, 8012034 <_strtod_l+0xa74>
 8012026:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801202a:	9010      	str	r0, [sp, #64]	; 0x40
 801202c:	9311      	str	r3, [sp, #68]	; 0x44
 801202e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8012032:	e783      	b.n	8011f3c <_strtod_l+0x97c>
 8012034:	4602      	mov	r2, r0
 8012036:	460b      	mov	r3, r1
 8012038:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801203c:	e7f7      	b.n	801202e <_strtod_l+0xa6e>
 801203e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8012042:	9b05      	ldr	r3, [sp, #20]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d1a8      	bne.n	8011f9a <_strtod_l+0x9da>
 8012048:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801204c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801204e:	0d1b      	lsrs	r3, r3, #20
 8012050:	051b      	lsls	r3, r3, #20
 8012052:	429a      	cmp	r2, r3
 8012054:	d1a1      	bne.n	8011f9a <_strtod_l+0x9da>
 8012056:	4620      	mov	r0, r4
 8012058:	4629      	mov	r1, r5
 801205a:	f7ef f8f7 	bl	800124c <__aeabi_d2lz>
 801205e:	f7ee fa7d 	bl	800055c <__aeabi_l2d>
 8012062:	4602      	mov	r2, r0
 8012064:	460b      	mov	r3, r1
 8012066:	4620      	mov	r0, r4
 8012068:	4629      	mov	r1, r5
 801206a:	f7ee f8ed 	bl	8000248 <__aeabi_dsub>
 801206e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012070:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012074:	ea43 0308 	orr.w	r3, r3, r8
 8012078:	4313      	orrs	r3, r2
 801207a:	4604      	mov	r4, r0
 801207c:	460d      	mov	r5, r1
 801207e:	d066      	beq.n	801214e <_strtod_l+0xb8e>
 8012080:	a309      	add	r3, pc, #36	; (adr r3, 80120a8 <_strtod_l+0xae8>)
 8012082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012086:	f7ee fd09 	bl	8000a9c <__aeabi_dcmplt>
 801208a:	2800      	cmp	r0, #0
 801208c:	f47f ace2 	bne.w	8011a54 <_strtod_l+0x494>
 8012090:	a307      	add	r3, pc, #28	; (adr r3, 80120b0 <_strtod_l+0xaf0>)
 8012092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012096:	4620      	mov	r0, r4
 8012098:	4629      	mov	r1, r5
 801209a:	f7ee fd1d 	bl	8000ad8 <__aeabi_dcmpgt>
 801209e:	2800      	cmp	r0, #0
 80120a0:	f43f af7b 	beq.w	8011f9a <_strtod_l+0x9da>
 80120a4:	e4d6      	b.n	8011a54 <_strtod_l+0x494>
 80120a6:	bf00      	nop
 80120a8:	94a03595 	.word	0x94a03595
 80120ac:	3fdfffff 	.word	0x3fdfffff
 80120b0:	35afe535 	.word	0x35afe535
 80120b4:	3fe00000 	.word	0x3fe00000
 80120b8:	000fffff 	.word	0x000fffff
 80120bc:	7ff00000 	.word	0x7ff00000
 80120c0:	7fefffff 	.word	0x7fefffff
 80120c4:	3ff00000 	.word	0x3ff00000
 80120c8:	7fe00000 	.word	0x7fe00000
 80120cc:	7c9fffff 	.word	0x7c9fffff
 80120d0:	3fe00000 	.word	0x3fe00000
 80120d4:	bff00000 	.word	0xbff00000
 80120d8:	9b05      	ldr	r3, [sp, #20]
 80120da:	b313      	cbz	r3, 8012122 <_strtod_l+0xb62>
 80120dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80120de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80120e2:	d81e      	bhi.n	8012122 <_strtod_l+0xb62>
 80120e4:	a326      	add	r3, pc, #152	; (adr r3, 8012180 <_strtod_l+0xbc0>)
 80120e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ea:	4620      	mov	r0, r4
 80120ec:	4629      	mov	r1, r5
 80120ee:	f7ee fcdf 	bl	8000ab0 <__aeabi_dcmple>
 80120f2:	b190      	cbz	r0, 801211a <_strtod_l+0xb5a>
 80120f4:	4629      	mov	r1, r5
 80120f6:	4620      	mov	r0, r4
 80120f8:	f7ee fd36 	bl	8000b68 <__aeabi_d2uiz>
 80120fc:	2801      	cmp	r0, #1
 80120fe:	bf38      	it	cc
 8012100:	2001      	movcc	r0, #1
 8012102:	f7ee f9df 	bl	80004c4 <__aeabi_ui2d>
 8012106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012108:	4604      	mov	r4, r0
 801210a:	460d      	mov	r5, r1
 801210c:	b9d3      	cbnz	r3, 8012144 <_strtod_l+0xb84>
 801210e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012112:	9012      	str	r0, [sp, #72]	; 0x48
 8012114:	9313      	str	r3, [sp, #76]	; 0x4c
 8012116:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 801211a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801211c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8012120:	1a9f      	subs	r7, r3, r2
 8012122:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012126:	f002 f885 	bl	8014234 <__ulp>
 801212a:	4602      	mov	r2, r0
 801212c:	460b      	mov	r3, r1
 801212e:	4630      	mov	r0, r6
 8012130:	4639      	mov	r1, r7
 8012132:	f7ee fa41 	bl	80005b8 <__aeabi_dmul>
 8012136:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801213a:	f7ee f887 	bl	800024c <__adddf3>
 801213e:	4680      	mov	r8, r0
 8012140:	4689      	mov	r9, r1
 8012142:	e77e      	b.n	8012042 <_strtod_l+0xa82>
 8012144:	4602      	mov	r2, r0
 8012146:	460b      	mov	r3, r1
 8012148:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 801214c:	e7e3      	b.n	8012116 <_strtod_l+0xb56>
 801214e:	a30e      	add	r3, pc, #56	; (adr r3, 8012188 <_strtod_l+0xbc8>)
 8012150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012154:	f7ee fca2 	bl	8000a9c <__aeabi_dcmplt>
 8012158:	e7a1      	b.n	801209e <_strtod_l+0xade>
 801215a:	2300      	movs	r3, #0
 801215c:	930a      	str	r3, [sp, #40]	; 0x28
 801215e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012160:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012162:	6013      	str	r3, [r2, #0]
 8012164:	f7ff ba71 	b.w	801164a <_strtod_l+0x8a>
 8012168:	2a65      	cmp	r2, #101	; 0x65
 801216a:	f43f ab63 	beq.w	8011834 <_strtod_l+0x274>
 801216e:	2a45      	cmp	r2, #69	; 0x45
 8012170:	f43f ab60 	beq.w	8011834 <_strtod_l+0x274>
 8012174:	2301      	movs	r3, #1
 8012176:	f7ff bb95 	b.w	80118a4 <_strtod_l+0x2e4>
 801217a:	bf00      	nop
 801217c:	f3af 8000 	nop.w
 8012180:	ffc00000 	.word	0xffc00000
 8012184:	41dfffff 	.word	0x41dfffff
 8012188:	94a03595 	.word	0x94a03595
 801218c:	3fcfffff 	.word	0x3fcfffff

08012190 <strtof>:
 8012190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012194:	4f22      	ldr	r7, [pc, #136]	; (8012220 <strtof+0x90>)
 8012196:	460a      	mov	r2, r1
 8012198:	4b22      	ldr	r3, [pc, #136]	; (8012224 <strtof+0x94>)
 801219a:	4601      	mov	r1, r0
 801219c:	6838      	ldr	r0, [r7, #0]
 801219e:	f7ff fa0f 	bl	80115c0 <_strtod_l>
 80121a2:	4602      	mov	r2, r0
 80121a4:	460b      	mov	r3, r1
 80121a6:	4606      	mov	r6, r0
 80121a8:	460c      	mov	r4, r1
 80121aa:	f7ee fc9f 	bl	8000aec <__aeabi_dcmpun>
 80121ae:	b168      	cbz	r0, 80121cc <strtof+0x3c>
 80121b0:	2c00      	cmp	r4, #0
 80121b2:	481d      	ldr	r0, [pc, #116]	; (8012228 <strtof+0x98>)
 80121b4:	da06      	bge.n	80121c4 <strtof+0x34>
 80121b6:	f002 fc65 	bl	8014a84 <nanf>
 80121ba:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 80121be:	4628      	mov	r0, r5
 80121c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80121c8:	f002 bc5c 	b.w	8014a84 <nanf>
 80121cc:	4621      	mov	r1, r4
 80121ce:	4630      	mov	r0, r6
 80121d0:	f7ee fcea 	bl	8000ba8 <__aeabi_d2f>
 80121d4:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 80121d8:	4605      	mov	r5, r0
 80121da:	4914      	ldr	r1, [pc, #80]	; (801222c <strtof+0x9c>)
 80121dc:	4640      	mov	r0, r8
 80121de:	f7ef f807 	bl	80011f0 <__aeabi_fcmpun>
 80121e2:	2800      	cmp	r0, #0
 80121e4:	d1eb      	bne.n	80121be <strtof+0x2e>
 80121e6:	4640      	mov	r0, r8
 80121e8:	4910      	ldr	r1, [pc, #64]	; (801222c <strtof+0x9c>)
 80121ea:	f7ee ffe3 	bl	80011b4 <__aeabi_fcmple>
 80121ee:	2800      	cmp	r0, #0
 80121f0:	d1e5      	bne.n	80121be <strtof+0x2e>
 80121f2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80121f6:	f04f 32ff 	mov.w	r2, #4294967295
 80121fa:	4630      	mov	r0, r6
 80121fc:	4621      	mov	r1, r4
 80121fe:	4b0c      	ldr	r3, [pc, #48]	; (8012230 <strtof+0xa0>)
 8012200:	f7ee fc74 	bl	8000aec <__aeabi_dcmpun>
 8012204:	b940      	cbnz	r0, 8012218 <strtof+0x88>
 8012206:	f04f 32ff 	mov.w	r2, #4294967295
 801220a:	4630      	mov	r0, r6
 801220c:	4621      	mov	r1, r4
 801220e:	4b08      	ldr	r3, [pc, #32]	; (8012230 <strtof+0xa0>)
 8012210:	f7ee fc4e 	bl	8000ab0 <__aeabi_dcmple>
 8012214:	2800      	cmp	r0, #0
 8012216:	d0d2      	beq.n	80121be <strtof+0x2e>
 8012218:	2222      	movs	r2, #34	; 0x22
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	601a      	str	r2, [r3, #0]
 801221e:	e7ce      	b.n	80121be <strtof+0x2e>
 8012220:	20000224 	.word	0x20000224
 8012224:	2000028c 	.word	0x2000028c
 8012228:	08015b47 	.word	0x08015b47
 801222c:	7f7fffff 	.word	0x7f7fffff
 8012230:	7fefffff 	.word	0x7fefffff

08012234 <strtok>:
 8012234:	4b16      	ldr	r3, [pc, #88]	; (8012290 <strtok+0x5c>)
 8012236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801223a:	681f      	ldr	r7, [r3, #0]
 801223c:	4605      	mov	r5, r0
 801223e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8012240:	460e      	mov	r6, r1
 8012242:	b9ec      	cbnz	r4, 8012280 <strtok+0x4c>
 8012244:	2050      	movs	r0, #80	; 0x50
 8012246:	f7fe fb2d 	bl	80108a4 <malloc>
 801224a:	4602      	mov	r2, r0
 801224c:	65b8      	str	r0, [r7, #88]	; 0x58
 801224e:	b920      	cbnz	r0, 801225a <strtok+0x26>
 8012250:	2157      	movs	r1, #87	; 0x57
 8012252:	4b10      	ldr	r3, [pc, #64]	; (8012294 <strtok+0x60>)
 8012254:	4810      	ldr	r0, [pc, #64]	; (8012298 <strtok+0x64>)
 8012256:	f000 f95d 	bl	8012514 <__assert_func>
 801225a:	e9c0 4400 	strd	r4, r4, [r0]
 801225e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8012262:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8012266:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801226a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801226e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8012272:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8012276:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801227a:	6184      	str	r4, [r0, #24]
 801227c:	7704      	strb	r4, [r0, #28]
 801227e:	6244      	str	r4, [r0, #36]	; 0x24
 8012280:	4631      	mov	r1, r6
 8012282:	4628      	mov	r0, r5
 8012284:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012286:	2301      	movs	r3, #1
 8012288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801228c:	f000 b806 	b.w	801229c <__strtok_r>
 8012290:	20000224 	.word	0x20000224
 8012294:	08015a98 	.word	0x08015a98
 8012298:	08015aaf 	.word	0x08015aaf

0801229c <__strtok_r>:
 801229c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801229e:	b908      	cbnz	r0, 80122a4 <__strtok_r+0x8>
 80122a0:	6810      	ldr	r0, [r2, #0]
 80122a2:	b188      	cbz	r0, 80122c8 <__strtok_r+0x2c>
 80122a4:	4604      	mov	r4, r0
 80122a6:	460f      	mov	r7, r1
 80122a8:	4620      	mov	r0, r4
 80122aa:	f814 5b01 	ldrb.w	r5, [r4], #1
 80122ae:	f817 6b01 	ldrb.w	r6, [r7], #1
 80122b2:	b91e      	cbnz	r6, 80122bc <__strtok_r+0x20>
 80122b4:	b965      	cbnz	r5, 80122d0 <__strtok_r+0x34>
 80122b6:	4628      	mov	r0, r5
 80122b8:	6015      	str	r5, [r2, #0]
 80122ba:	e005      	b.n	80122c8 <__strtok_r+0x2c>
 80122bc:	42b5      	cmp	r5, r6
 80122be:	d1f6      	bne.n	80122ae <__strtok_r+0x12>
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d1f0      	bne.n	80122a6 <__strtok_r+0xa>
 80122c4:	6014      	str	r4, [r2, #0]
 80122c6:	7003      	strb	r3, [r0, #0]
 80122c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122ca:	461c      	mov	r4, r3
 80122cc:	e00c      	b.n	80122e8 <__strtok_r+0x4c>
 80122ce:	b915      	cbnz	r5, 80122d6 <__strtok_r+0x3a>
 80122d0:	460e      	mov	r6, r1
 80122d2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80122d6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80122da:	42ab      	cmp	r3, r5
 80122dc:	d1f7      	bne.n	80122ce <__strtok_r+0x32>
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d0f3      	beq.n	80122ca <__strtok_r+0x2e>
 80122e2:	2300      	movs	r3, #0
 80122e4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80122e8:	6014      	str	r4, [r2, #0]
 80122ea:	e7ed      	b.n	80122c8 <__strtok_r+0x2c>

080122ec <_strtol_l.constprop.0>:
 80122ec:	2b01      	cmp	r3, #1
 80122ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122f2:	4680      	mov	r8, r0
 80122f4:	d001      	beq.n	80122fa <_strtol_l.constprop.0+0xe>
 80122f6:	2b24      	cmp	r3, #36	; 0x24
 80122f8:	d906      	bls.n	8012308 <_strtol_l.constprop.0+0x1c>
 80122fa:	f7fe f9af 	bl	801065c <__errno>
 80122fe:	2316      	movs	r3, #22
 8012300:	6003      	str	r3, [r0, #0]
 8012302:	2000      	movs	r0, #0
 8012304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012308:	460d      	mov	r5, r1
 801230a:	4f35      	ldr	r7, [pc, #212]	; (80123e0 <_strtol_l.constprop.0+0xf4>)
 801230c:	4628      	mov	r0, r5
 801230e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012312:	5de6      	ldrb	r6, [r4, r7]
 8012314:	f016 0608 	ands.w	r6, r6, #8
 8012318:	d1f8      	bne.n	801230c <_strtol_l.constprop.0+0x20>
 801231a:	2c2d      	cmp	r4, #45	; 0x2d
 801231c:	d12f      	bne.n	801237e <_strtol_l.constprop.0+0x92>
 801231e:	2601      	movs	r6, #1
 8012320:	782c      	ldrb	r4, [r5, #0]
 8012322:	1c85      	adds	r5, r0, #2
 8012324:	2b00      	cmp	r3, #0
 8012326:	d057      	beq.n	80123d8 <_strtol_l.constprop.0+0xec>
 8012328:	2b10      	cmp	r3, #16
 801232a:	d109      	bne.n	8012340 <_strtol_l.constprop.0+0x54>
 801232c:	2c30      	cmp	r4, #48	; 0x30
 801232e:	d107      	bne.n	8012340 <_strtol_l.constprop.0+0x54>
 8012330:	7828      	ldrb	r0, [r5, #0]
 8012332:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012336:	2858      	cmp	r0, #88	; 0x58
 8012338:	d149      	bne.n	80123ce <_strtol_l.constprop.0+0xe2>
 801233a:	2310      	movs	r3, #16
 801233c:	786c      	ldrb	r4, [r5, #1]
 801233e:	3502      	adds	r5, #2
 8012340:	2700      	movs	r7, #0
 8012342:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8012346:	f10e 3eff 	add.w	lr, lr, #4294967295
 801234a:	fbbe f9f3 	udiv	r9, lr, r3
 801234e:	4638      	mov	r0, r7
 8012350:	fb03 ea19 	mls	sl, r3, r9, lr
 8012354:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012358:	f1bc 0f09 	cmp.w	ip, #9
 801235c:	d814      	bhi.n	8012388 <_strtol_l.constprop.0+0x9c>
 801235e:	4664      	mov	r4, ip
 8012360:	42a3      	cmp	r3, r4
 8012362:	dd22      	ble.n	80123aa <_strtol_l.constprop.0+0xbe>
 8012364:	2f00      	cmp	r7, #0
 8012366:	db1d      	blt.n	80123a4 <_strtol_l.constprop.0+0xb8>
 8012368:	4581      	cmp	r9, r0
 801236a:	d31b      	bcc.n	80123a4 <_strtol_l.constprop.0+0xb8>
 801236c:	d101      	bne.n	8012372 <_strtol_l.constprop.0+0x86>
 801236e:	45a2      	cmp	sl, r4
 8012370:	db18      	blt.n	80123a4 <_strtol_l.constprop.0+0xb8>
 8012372:	2701      	movs	r7, #1
 8012374:	fb00 4003 	mla	r0, r0, r3, r4
 8012378:	f815 4b01 	ldrb.w	r4, [r5], #1
 801237c:	e7ea      	b.n	8012354 <_strtol_l.constprop.0+0x68>
 801237e:	2c2b      	cmp	r4, #43	; 0x2b
 8012380:	bf04      	itt	eq
 8012382:	782c      	ldrbeq	r4, [r5, #0]
 8012384:	1c85      	addeq	r5, r0, #2
 8012386:	e7cd      	b.n	8012324 <_strtol_l.constprop.0+0x38>
 8012388:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801238c:	f1bc 0f19 	cmp.w	ip, #25
 8012390:	d801      	bhi.n	8012396 <_strtol_l.constprop.0+0xaa>
 8012392:	3c37      	subs	r4, #55	; 0x37
 8012394:	e7e4      	b.n	8012360 <_strtol_l.constprop.0+0x74>
 8012396:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801239a:	f1bc 0f19 	cmp.w	ip, #25
 801239e:	d804      	bhi.n	80123aa <_strtol_l.constprop.0+0xbe>
 80123a0:	3c57      	subs	r4, #87	; 0x57
 80123a2:	e7dd      	b.n	8012360 <_strtol_l.constprop.0+0x74>
 80123a4:	f04f 37ff 	mov.w	r7, #4294967295
 80123a8:	e7e6      	b.n	8012378 <_strtol_l.constprop.0+0x8c>
 80123aa:	2f00      	cmp	r7, #0
 80123ac:	da07      	bge.n	80123be <_strtol_l.constprop.0+0xd2>
 80123ae:	2322      	movs	r3, #34	; 0x22
 80123b0:	4670      	mov	r0, lr
 80123b2:	f8c8 3000 	str.w	r3, [r8]
 80123b6:	2a00      	cmp	r2, #0
 80123b8:	d0a4      	beq.n	8012304 <_strtol_l.constprop.0+0x18>
 80123ba:	1e69      	subs	r1, r5, #1
 80123bc:	e005      	b.n	80123ca <_strtol_l.constprop.0+0xde>
 80123be:	b106      	cbz	r6, 80123c2 <_strtol_l.constprop.0+0xd6>
 80123c0:	4240      	negs	r0, r0
 80123c2:	2a00      	cmp	r2, #0
 80123c4:	d09e      	beq.n	8012304 <_strtol_l.constprop.0+0x18>
 80123c6:	2f00      	cmp	r7, #0
 80123c8:	d1f7      	bne.n	80123ba <_strtol_l.constprop.0+0xce>
 80123ca:	6011      	str	r1, [r2, #0]
 80123cc:	e79a      	b.n	8012304 <_strtol_l.constprop.0+0x18>
 80123ce:	2430      	movs	r4, #48	; 0x30
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d1b5      	bne.n	8012340 <_strtol_l.constprop.0+0x54>
 80123d4:	2308      	movs	r3, #8
 80123d6:	e7b3      	b.n	8012340 <_strtol_l.constprop.0+0x54>
 80123d8:	2c30      	cmp	r4, #48	; 0x30
 80123da:	d0a9      	beq.n	8012330 <_strtol_l.constprop.0+0x44>
 80123dc:	230a      	movs	r3, #10
 80123de:	e7af      	b.n	8012340 <_strtol_l.constprop.0+0x54>
 80123e0:	08015b49 	.word	0x08015b49

080123e4 <strtol>:
 80123e4:	4613      	mov	r3, r2
 80123e6:	460a      	mov	r2, r1
 80123e8:	4601      	mov	r1, r0
 80123ea:	4802      	ldr	r0, [pc, #8]	; (80123f4 <strtol+0x10>)
 80123ec:	6800      	ldr	r0, [r0, #0]
 80123ee:	f7ff bf7d 	b.w	80122ec <_strtol_l.constprop.0>
 80123f2:	bf00      	nop
 80123f4:	20000224 	.word	0x20000224

080123f8 <_strtoul_l.constprop.0>:
 80123f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80123fc:	4686      	mov	lr, r0
 80123fe:	460d      	mov	r5, r1
 8012400:	4f35      	ldr	r7, [pc, #212]	; (80124d8 <_strtoul_l.constprop.0+0xe0>)
 8012402:	4628      	mov	r0, r5
 8012404:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012408:	5de6      	ldrb	r6, [r4, r7]
 801240a:	f016 0608 	ands.w	r6, r6, #8
 801240e:	d1f8      	bne.n	8012402 <_strtoul_l.constprop.0+0xa>
 8012410:	2c2d      	cmp	r4, #45	; 0x2d
 8012412:	d12f      	bne.n	8012474 <_strtoul_l.constprop.0+0x7c>
 8012414:	2601      	movs	r6, #1
 8012416:	782c      	ldrb	r4, [r5, #0]
 8012418:	1c85      	adds	r5, r0, #2
 801241a:	2b00      	cmp	r3, #0
 801241c:	d057      	beq.n	80124ce <_strtoul_l.constprop.0+0xd6>
 801241e:	2b10      	cmp	r3, #16
 8012420:	d109      	bne.n	8012436 <_strtoul_l.constprop.0+0x3e>
 8012422:	2c30      	cmp	r4, #48	; 0x30
 8012424:	d107      	bne.n	8012436 <_strtoul_l.constprop.0+0x3e>
 8012426:	7828      	ldrb	r0, [r5, #0]
 8012428:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801242c:	2858      	cmp	r0, #88	; 0x58
 801242e:	d149      	bne.n	80124c4 <_strtoul_l.constprop.0+0xcc>
 8012430:	2310      	movs	r3, #16
 8012432:	786c      	ldrb	r4, [r5, #1]
 8012434:	3502      	adds	r5, #2
 8012436:	f04f 38ff 	mov.w	r8, #4294967295
 801243a:	fbb8 f8f3 	udiv	r8, r8, r3
 801243e:	2700      	movs	r7, #0
 8012440:	fb03 f908 	mul.w	r9, r3, r8
 8012444:	4638      	mov	r0, r7
 8012446:	ea6f 0909 	mvn.w	r9, r9
 801244a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801244e:	f1bc 0f09 	cmp.w	ip, #9
 8012452:	d814      	bhi.n	801247e <_strtoul_l.constprop.0+0x86>
 8012454:	4664      	mov	r4, ip
 8012456:	42a3      	cmp	r3, r4
 8012458:	dd22      	ble.n	80124a0 <_strtoul_l.constprop.0+0xa8>
 801245a:	2f00      	cmp	r7, #0
 801245c:	db1d      	blt.n	801249a <_strtoul_l.constprop.0+0xa2>
 801245e:	4580      	cmp	r8, r0
 8012460:	d31b      	bcc.n	801249a <_strtoul_l.constprop.0+0xa2>
 8012462:	d101      	bne.n	8012468 <_strtoul_l.constprop.0+0x70>
 8012464:	45a1      	cmp	r9, r4
 8012466:	db18      	blt.n	801249a <_strtoul_l.constprop.0+0xa2>
 8012468:	2701      	movs	r7, #1
 801246a:	fb00 4003 	mla	r0, r0, r3, r4
 801246e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012472:	e7ea      	b.n	801244a <_strtoul_l.constprop.0+0x52>
 8012474:	2c2b      	cmp	r4, #43	; 0x2b
 8012476:	bf04      	itt	eq
 8012478:	782c      	ldrbeq	r4, [r5, #0]
 801247a:	1c85      	addeq	r5, r0, #2
 801247c:	e7cd      	b.n	801241a <_strtoul_l.constprop.0+0x22>
 801247e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012482:	f1bc 0f19 	cmp.w	ip, #25
 8012486:	d801      	bhi.n	801248c <_strtoul_l.constprop.0+0x94>
 8012488:	3c37      	subs	r4, #55	; 0x37
 801248a:	e7e4      	b.n	8012456 <_strtoul_l.constprop.0+0x5e>
 801248c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012490:	f1bc 0f19 	cmp.w	ip, #25
 8012494:	d804      	bhi.n	80124a0 <_strtoul_l.constprop.0+0xa8>
 8012496:	3c57      	subs	r4, #87	; 0x57
 8012498:	e7dd      	b.n	8012456 <_strtoul_l.constprop.0+0x5e>
 801249a:	f04f 37ff 	mov.w	r7, #4294967295
 801249e:	e7e6      	b.n	801246e <_strtoul_l.constprop.0+0x76>
 80124a0:	2f00      	cmp	r7, #0
 80124a2:	da07      	bge.n	80124b4 <_strtoul_l.constprop.0+0xbc>
 80124a4:	2322      	movs	r3, #34	; 0x22
 80124a6:	f04f 30ff 	mov.w	r0, #4294967295
 80124aa:	f8ce 3000 	str.w	r3, [lr]
 80124ae:	b932      	cbnz	r2, 80124be <_strtoul_l.constprop.0+0xc6>
 80124b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124b4:	b106      	cbz	r6, 80124b8 <_strtoul_l.constprop.0+0xc0>
 80124b6:	4240      	negs	r0, r0
 80124b8:	2a00      	cmp	r2, #0
 80124ba:	d0f9      	beq.n	80124b0 <_strtoul_l.constprop.0+0xb8>
 80124bc:	b107      	cbz	r7, 80124c0 <_strtoul_l.constprop.0+0xc8>
 80124be:	1e69      	subs	r1, r5, #1
 80124c0:	6011      	str	r1, [r2, #0]
 80124c2:	e7f5      	b.n	80124b0 <_strtoul_l.constprop.0+0xb8>
 80124c4:	2430      	movs	r4, #48	; 0x30
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d1b5      	bne.n	8012436 <_strtoul_l.constprop.0+0x3e>
 80124ca:	2308      	movs	r3, #8
 80124cc:	e7b3      	b.n	8012436 <_strtoul_l.constprop.0+0x3e>
 80124ce:	2c30      	cmp	r4, #48	; 0x30
 80124d0:	d0a9      	beq.n	8012426 <_strtoul_l.constprop.0+0x2e>
 80124d2:	230a      	movs	r3, #10
 80124d4:	e7af      	b.n	8012436 <_strtoul_l.constprop.0+0x3e>
 80124d6:	bf00      	nop
 80124d8:	08015b49 	.word	0x08015b49

080124dc <strtoul>:
 80124dc:	4613      	mov	r3, r2
 80124de:	460a      	mov	r2, r1
 80124e0:	4601      	mov	r1, r0
 80124e2:	4802      	ldr	r0, [pc, #8]	; (80124ec <strtoul+0x10>)
 80124e4:	6800      	ldr	r0, [r0, #0]
 80124e6:	f7ff bf87 	b.w	80123f8 <_strtoul_l.constprop.0>
 80124ea:	bf00      	nop
 80124ec:	20000224 	.word	0x20000224

080124f0 <_write_r>:
 80124f0:	b538      	push	{r3, r4, r5, lr}
 80124f2:	4604      	mov	r4, r0
 80124f4:	4608      	mov	r0, r1
 80124f6:	4611      	mov	r1, r2
 80124f8:	2200      	movs	r2, #0
 80124fa:	4d05      	ldr	r5, [pc, #20]	; (8012510 <_write_r+0x20>)
 80124fc:	602a      	str	r2, [r5, #0]
 80124fe:	461a      	mov	r2, r3
 8012500:	f7f2 ff78 	bl	80053f4 <_write>
 8012504:	1c43      	adds	r3, r0, #1
 8012506:	d102      	bne.n	801250e <_write_r+0x1e>
 8012508:	682b      	ldr	r3, [r5, #0]
 801250a:	b103      	cbz	r3, 801250e <_write_r+0x1e>
 801250c:	6023      	str	r3, [r4, #0]
 801250e:	bd38      	pop	{r3, r4, r5, pc}
 8012510:	2000cc54 	.word	0x2000cc54

08012514 <__assert_func>:
 8012514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012516:	4614      	mov	r4, r2
 8012518:	461a      	mov	r2, r3
 801251a:	4b09      	ldr	r3, [pc, #36]	; (8012540 <__assert_func+0x2c>)
 801251c:	4605      	mov	r5, r0
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	68d8      	ldr	r0, [r3, #12]
 8012522:	b14c      	cbz	r4, 8012538 <__assert_func+0x24>
 8012524:	4b07      	ldr	r3, [pc, #28]	; (8012544 <__assert_func+0x30>)
 8012526:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801252a:	9100      	str	r1, [sp, #0]
 801252c:	462b      	mov	r3, r5
 801252e:	4906      	ldr	r1, [pc, #24]	; (8012548 <__assert_func+0x34>)
 8012530:	f000 ff56 	bl	80133e0 <fiprintf>
 8012534:	f002 fb8c 	bl	8014c50 <abort>
 8012538:	4b04      	ldr	r3, [pc, #16]	; (801254c <__assert_func+0x38>)
 801253a:	461c      	mov	r4, r3
 801253c:	e7f3      	b.n	8012526 <__assert_func+0x12>
 801253e:	bf00      	nop
 8012540:	20000224 	.word	0x20000224
 8012544:	08015b0c 	.word	0x08015b0c
 8012548:	08015b19 	.word	0x08015b19
 801254c:	08015b47 	.word	0x08015b47

08012550 <_close_r>:
 8012550:	b538      	push	{r3, r4, r5, lr}
 8012552:	2300      	movs	r3, #0
 8012554:	4d05      	ldr	r5, [pc, #20]	; (801256c <_close_r+0x1c>)
 8012556:	4604      	mov	r4, r0
 8012558:	4608      	mov	r0, r1
 801255a:	602b      	str	r3, [r5, #0]
 801255c:	f7f2 ff66 	bl	800542c <_close>
 8012560:	1c43      	adds	r3, r0, #1
 8012562:	d102      	bne.n	801256a <_close_r+0x1a>
 8012564:	682b      	ldr	r3, [r5, #0]
 8012566:	b103      	cbz	r3, 801256a <_close_r+0x1a>
 8012568:	6023      	str	r3, [r4, #0]
 801256a:	bd38      	pop	{r3, r4, r5, pc}
 801256c:	2000cc54 	.word	0x2000cc54

08012570 <quorem>:
 8012570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012574:	6903      	ldr	r3, [r0, #16]
 8012576:	690c      	ldr	r4, [r1, #16]
 8012578:	4607      	mov	r7, r0
 801257a:	42a3      	cmp	r3, r4
 801257c:	f2c0 8082 	blt.w	8012684 <quorem+0x114>
 8012580:	3c01      	subs	r4, #1
 8012582:	f100 0514 	add.w	r5, r0, #20
 8012586:	f101 0814 	add.w	r8, r1, #20
 801258a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801258e:	9301      	str	r3, [sp, #4]
 8012590:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012594:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012598:	3301      	adds	r3, #1
 801259a:	429a      	cmp	r2, r3
 801259c:	fbb2 f6f3 	udiv	r6, r2, r3
 80125a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80125a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80125a8:	d331      	bcc.n	801260e <quorem+0x9e>
 80125aa:	f04f 0e00 	mov.w	lr, #0
 80125ae:	4640      	mov	r0, r8
 80125b0:	46ac      	mov	ip, r5
 80125b2:	46f2      	mov	sl, lr
 80125b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80125b8:	b293      	uxth	r3, r2
 80125ba:	fb06 e303 	mla	r3, r6, r3, lr
 80125be:	0c12      	lsrs	r2, r2, #16
 80125c0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80125c4:	b29b      	uxth	r3, r3
 80125c6:	fb06 e202 	mla	r2, r6, r2, lr
 80125ca:	ebaa 0303 	sub.w	r3, sl, r3
 80125ce:	f8dc a000 	ldr.w	sl, [ip]
 80125d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80125d6:	fa1f fa8a 	uxth.w	sl, sl
 80125da:	4453      	add	r3, sl
 80125dc:	f8dc a000 	ldr.w	sl, [ip]
 80125e0:	b292      	uxth	r2, r2
 80125e2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80125e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80125ea:	b29b      	uxth	r3, r3
 80125ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80125f0:	4581      	cmp	r9, r0
 80125f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80125f6:	f84c 3b04 	str.w	r3, [ip], #4
 80125fa:	d2db      	bcs.n	80125b4 <quorem+0x44>
 80125fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8012600:	b92b      	cbnz	r3, 801260e <quorem+0x9e>
 8012602:	9b01      	ldr	r3, [sp, #4]
 8012604:	3b04      	subs	r3, #4
 8012606:	429d      	cmp	r5, r3
 8012608:	461a      	mov	r2, r3
 801260a:	d32f      	bcc.n	801266c <quorem+0xfc>
 801260c:	613c      	str	r4, [r7, #16]
 801260e:	4638      	mov	r0, r7
 8012610:	f001 fd68 	bl	80140e4 <__mcmp>
 8012614:	2800      	cmp	r0, #0
 8012616:	db25      	blt.n	8012664 <quorem+0xf4>
 8012618:	4628      	mov	r0, r5
 801261a:	f04f 0c00 	mov.w	ip, #0
 801261e:	3601      	adds	r6, #1
 8012620:	f858 1b04 	ldr.w	r1, [r8], #4
 8012624:	f8d0 e000 	ldr.w	lr, [r0]
 8012628:	b28b      	uxth	r3, r1
 801262a:	ebac 0303 	sub.w	r3, ip, r3
 801262e:	fa1f f28e 	uxth.w	r2, lr
 8012632:	4413      	add	r3, r2
 8012634:	0c0a      	lsrs	r2, r1, #16
 8012636:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801263a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801263e:	b29b      	uxth	r3, r3
 8012640:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012644:	45c1      	cmp	r9, r8
 8012646:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801264a:	f840 3b04 	str.w	r3, [r0], #4
 801264e:	d2e7      	bcs.n	8012620 <quorem+0xb0>
 8012650:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012654:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012658:	b922      	cbnz	r2, 8012664 <quorem+0xf4>
 801265a:	3b04      	subs	r3, #4
 801265c:	429d      	cmp	r5, r3
 801265e:	461a      	mov	r2, r3
 8012660:	d30a      	bcc.n	8012678 <quorem+0x108>
 8012662:	613c      	str	r4, [r7, #16]
 8012664:	4630      	mov	r0, r6
 8012666:	b003      	add	sp, #12
 8012668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801266c:	6812      	ldr	r2, [r2, #0]
 801266e:	3b04      	subs	r3, #4
 8012670:	2a00      	cmp	r2, #0
 8012672:	d1cb      	bne.n	801260c <quorem+0x9c>
 8012674:	3c01      	subs	r4, #1
 8012676:	e7c6      	b.n	8012606 <quorem+0x96>
 8012678:	6812      	ldr	r2, [r2, #0]
 801267a:	3b04      	subs	r3, #4
 801267c:	2a00      	cmp	r2, #0
 801267e:	d1f0      	bne.n	8012662 <quorem+0xf2>
 8012680:	3c01      	subs	r4, #1
 8012682:	e7eb      	b.n	801265c <quorem+0xec>
 8012684:	2000      	movs	r0, #0
 8012686:	e7ee      	b.n	8012666 <quorem+0xf6>

08012688 <_dtoa_r>:
 8012688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801268c:	4616      	mov	r6, r2
 801268e:	461f      	mov	r7, r3
 8012690:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8012692:	b099      	sub	sp, #100	; 0x64
 8012694:	4605      	mov	r5, r0
 8012696:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801269a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 801269e:	b974      	cbnz	r4, 80126be <_dtoa_r+0x36>
 80126a0:	2010      	movs	r0, #16
 80126a2:	f7fe f8ff 	bl	80108a4 <malloc>
 80126a6:	4602      	mov	r2, r0
 80126a8:	6268      	str	r0, [r5, #36]	; 0x24
 80126aa:	b920      	cbnz	r0, 80126b6 <_dtoa_r+0x2e>
 80126ac:	21ea      	movs	r1, #234	; 0xea
 80126ae:	4ba8      	ldr	r3, [pc, #672]	; (8012950 <_dtoa_r+0x2c8>)
 80126b0:	48a8      	ldr	r0, [pc, #672]	; (8012954 <_dtoa_r+0x2cc>)
 80126b2:	f7ff ff2f 	bl	8012514 <__assert_func>
 80126b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80126ba:	6004      	str	r4, [r0, #0]
 80126bc:	60c4      	str	r4, [r0, #12]
 80126be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80126c0:	6819      	ldr	r1, [r3, #0]
 80126c2:	b151      	cbz	r1, 80126da <_dtoa_r+0x52>
 80126c4:	685a      	ldr	r2, [r3, #4]
 80126c6:	2301      	movs	r3, #1
 80126c8:	4093      	lsls	r3, r2
 80126ca:	604a      	str	r2, [r1, #4]
 80126cc:	608b      	str	r3, [r1, #8]
 80126ce:	4628      	mov	r0, r5
 80126d0:	f001 fa80 	bl	8013bd4 <_Bfree>
 80126d4:	2200      	movs	r2, #0
 80126d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80126d8:	601a      	str	r2, [r3, #0]
 80126da:	1e3b      	subs	r3, r7, #0
 80126dc:	bfaf      	iteee	ge
 80126de:	2300      	movge	r3, #0
 80126e0:	2201      	movlt	r2, #1
 80126e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80126e6:	9305      	strlt	r3, [sp, #20]
 80126e8:	bfa8      	it	ge
 80126ea:	f8c8 3000 	strge.w	r3, [r8]
 80126ee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80126f2:	4b99      	ldr	r3, [pc, #612]	; (8012958 <_dtoa_r+0x2d0>)
 80126f4:	bfb8      	it	lt
 80126f6:	f8c8 2000 	strlt.w	r2, [r8]
 80126fa:	ea33 0309 	bics.w	r3, r3, r9
 80126fe:	d119      	bne.n	8012734 <_dtoa_r+0xac>
 8012700:	f242 730f 	movw	r3, #9999	; 0x270f
 8012704:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012706:	6013      	str	r3, [r2, #0]
 8012708:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801270c:	4333      	orrs	r3, r6
 801270e:	f000 857f 	beq.w	8013210 <_dtoa_r+0xb88>
 8012712:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012714:	b953      	cbnz	r3, 801272c <_dtoa_r+0xa4>
 8012716:	4b91      	ldr	r3, [pc, #580]	; (801295c <_dtoa_r+0x2d4>)
 8012718:	e022      	b.n	8012760 <_dtoa_r+0xd8>
 801271a:	4b91      	ldr	r3, [pc, #580]	; (8012960 <_dtoa_r+0x2d8>)
 801271c:	9303      	str	r3, [sp, #12]
 801271e:	3308      	adds	r3, #8
 8012720:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8012722:	6013      	str	r3, [r2, #0]
 8012724:	9803      	ldr	r0, [sp, #12]
 8012726:	b019      	add	sp, #100	; 0x64
 8012728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801272c:	4b8b      	ldr	r3, [pc, #556]	; (801295c <_dtoa_r+0x2d4>)
 801272e:	9303      	str	r3, [sp, #12]
 8012730:	3303      	adds	r3, #3
 8012732:	e7f5      	b.n	8012720 <_dtoa_r+0x98>
 8012734:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8012738:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 801273c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012740:	2200      	movs	r2, #0
 8012742:	2300      	movs	r3, #0
 8012744:	f7ee f9a0 	bl	8000a88 <__aeabi_dcmpeq>
 8012748:	4680      	mov	r8, r0
 801274a:	b158      	cbz	r0, 8012764 <_dtoa_r+0xdc>
 801274c:	2301      	movs	r3, #1
 801274e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012750:	6013      	str	r3, [r2, #0]
 8012752:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012754:	2b00      	cmp	r3, #0
 8012756:	f000 8558 	beq.w	801320a <_dtoa_r+0xb82>
 801275a:	4882      	ldr	r0, [pc, #520]	; (8012964 <_dtoa_r+0x2dc>)
 801275c:	6018      	str	r0, [r3, #0]
 801275e:	1e43      	subs	r3, r0, #1
 8012760:	9303      	str	r3, [sp, #12]
 8012762:	e7df      	b.n	8012724 <_dtoa_r+0x9c>
 8012764:	ab16      	add	r3, sp, #88	; 0x58
 8012766:	9301      	str	r3, [sp, #4]
 8012768:	ab17      	add	r3, sp, #92	; 0x5c
 801276a:	9300      	str	r3, [sp, #0]
 801276c:	4628      	mov	r0, r5
 801276e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012772:	f001 fdd9 	bl	8014328 <__d2b>
 8012776:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801277a:	4683      	mov	fp, r0
 801277c:	2c00      	cmp	r4, #0
 801277e:	d07f      	beq.n	8012880 <_dtoa_r+0x1f8>
 8012780:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012786:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801278a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801278e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8012792:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8012796:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801279a:	2200      	movs	r2, #0
 801279c:	4b72      	ldr	r3, [pc, #456]	; (8012968 <_dtoa_r+0x2e0>)
 801279e:	f7ed fd53 	bl	8000248 <__aeabi_dsub>
 80127a2:	a365      	add	r3, pc, #404	; (adr r3, 8012938 <_dtoa_r+0x2b0>)
 80127a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127a8:	f7ed ff06 	bl	80005b8 <__aeabi_dmul>
 80127ac:	a364      	add	r3, pc, #400	; (adr r3, 8012940 <_dtoa_r+0x2b8>)
 80127ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127b2:	f7ed fd4b 	bl	800024c <__adddf3>
 80127b6:	4606      	mov	r6, r0
 80127b8:	4620      	mov	r0, r4
 80127ba:	460f      	mov	r7, r1
 80127bc:	f7ed fe92 	bl	80004e4 <__aeabi_i2d>
 80127c0:	a361      	add	r3, pc, #388	; (adr r3, 8012948 <_dtoa_r+0x2c0>)
 80127c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127c6:	f7ed fef7 	bl	80005b8 <__aeabi_dmul>
 80127ca:	4602      	mov	r2, r0
 80127cc:	460b      	mov	r3, r1
 80127ce:	4630      	mov	r0, r6
 80127d0:	4639      	mov	r1, r7
 80127d2:	f7ed fd3b 	bl	800024c <__adddf3>
 80127d6:	4606      	mov	r6, r0
 80127d8:	460f      	mov	r7, r1
 80127da:	f7ee f99d 	bl	8000b18 <__aeabi_d2iz>
 80127de:	2200      	movs	r2, #0
 80127e0:	4682      	mov	sl, r0
 80127e2:	2300      	movs	r3, #0
 80127e4:	4630      	mov	r0, r6
 80127e6:	4639      	mov	r1, r7
 80127e8:	f7ee f958 	bl	8000a9c <__aeabi_dcmplt>
 80127ec:	b148      	cbz	r0, 8012802 <_dtoa_r+0x17a>
 80127ee:	4650      	mov	r0, sl
 80127f0:	f7ed fe78 	bl	80004e4 <__aeabi_i2d>
 80127f4:	4632      	mov	r2, r6
 80127f6:	463b      	mov	r3, r7
 80127f8:	f7ee f946 	bl	8000a88 <__aeabi_dcmpeq>
 80127fc:	b908      	cbnz	r0, 8012802 <_dtoa_r+0x17a>
 80127fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012802:	f1ba 0f16 	cmp.w	sl, #22
 8012806:	d858      	bhi.n	80128ba <_dtoa_r+0x232>
 8012808:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801280c:	4b57      	ldr	r3, [pc, #348]	; (801296c <_dtoa_r+0x2e4>)
 801280e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012816:	f7ee f941 	bl	8000a9c <__aeabi_dcmplt>
 801281a:	2800      	cmp	r0, #0
 801281c:	d04f      	beq.n	80128be <_dtoa_r+0x236>
 801281e:	2300      	movs	r3, #0
 8012820:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012824:	930f      	str	r3, [sp, #60]	; 0x3c
 8012826:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012828:	1b1c      	subs	r4, r3, r4
 801282a:	1e63      	subs	r3, r4, #1
 801282c:	9309      	str	r3, [sp, #36]	; 0x24
 801282e:	bf49      	itett	mi
 8012830:	f1c4 0301 	rsbmi	r3, r4, #1
 8012834:	2300      	movpl	r3, #0
 8012836:	9306      	strmi	r3, [sp, #24]
 8012838:	2300      	movmi	r3, #0
 801283a:	bf54      	ite	pl
 801283c:	9306      	strpl	r3, [sp, #24]
 801283e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8012840:	f1ba 0f00 	cmp.w	sl, #0
 8012844:	db3d      	blt.n	80128c2 <_dtoa_r+0x23a>
 8012846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012848:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801284c:	4453      	add	r3, sl
 801284e:	9309      	str	r3, [sp, #36]	; 0x24
 8012850:	2300      	movs	r3, #0
 8012852:	930a      	str	r3, [sp, #40]	; 0x28
 8012854:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012856:	2b09      	cmp	r3, #9
 8012858:	f200 808c 	bhi.w	8012974 <_dtoa_r+0x2ec>
 801285c:	2b05      	cmp	r3, #5
 801285e:	bfc4      	itt	gt
 8012860:	3b04      	subgt	r3, #4
 8012862:	9322      	strgt	r3, [sp, #136]	; 0x88
 8012864:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012866:	bfc8      	it	gt
 8012868:	2400      	movgt	r4, #0
 801286a:	f1a3 0302 	sub.w	r3, r3, #2
 801286e:	bfd8      	it	le
 8012870:	2401      	movle	r4, #1
 8012872:	2b03      	cmp	r3, #3
 8012874:	f200 808a 	bhi.w	801298c <_dtoa_r+0x304>
 8012878:	e8df f003 	tbb	[pc, r3]
 801287c:	5b4d4f2d 	.word	0x5b4d4f2d
 8012880:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8012884:	441c      	add	r4, r3
 8012886:	f204 4332 	addw	r3, r4, #1074	; 0x432
 801288a:	2b20      	cmp	r3, #32
 801288c:	bfc3      	ittte	gt
 801288e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012892:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8012896:	fa09 f303 	lslgt.w	r3, r9, r3
 801289a:	f1c3 0320 	rsble	r3, r3, #32
 801289e:	bfc6      	itte	gt
 80128a0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80128a4:	4318      	orrgt	r0, r3
 80128a6:	fa06 f003 	lslle.w	r0, r6, r3
 80128aa:	f7ed fe0b 	bl	80004c4 <__aeabi_ui2d>
 80128ae:	2301      	movs	r3, #1
 80128b0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80128b4:	3c01      	subs	r4, #1
 80128b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80128b8:	e76f      	b.n	801279a <_dtoa_r+0x112>
 80128ba:	2301      	movs	r3, #1
 80128bc:	e7b2      	b.n	8012824 <_dtoa_r+0x19c>
 80128be:	900f      	str	r0, [sp, #60]	; 0x3c
 80128c0:	e7b1      	b.n	8012826 <_dtoa_r+0x19e>
 80128c2:	9b06      	ldr	r3, [sp, #24]
 80128c4:	eba3 030a 	sub.w	r3, r3, sl
 80128c8:	9306      	str	r3, [sp, #24]
 80128ca:	f1ca 0300 	rsb	r3, sl, #0
 80128ce:	930a      	str	r3, [sp, #40]	; 0x28
 80128d0:	2300      	movs	r3, #0
 80128d2:	930e      	str	r3, [sp, #56]	; 0x38
 80128d4:	e7be      	b.n	8012854 <_dtoa_r+0x1cc>
 80128d6:	2300      	movs	r3, #0
 80128d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80128da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80128dc:	2b00      	cmp	r3, #0
 80128de:	dc58      	bgt.n	8012992 <_dtoa_r+0x30a>
 80128e0:	f04f 0901 	mov.w	r9, #1
 80128e4:	464b      	mov	r3, r9
 80128e6:	f8cd 9020 	str.w	r9, [sp, #32]
 80128ea:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80128ee:	2200      	movs	r2, #0
 80128f0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80128f2:	6042      	str	r2, [r0, #4]
 80128f4:	2204      	movs	r2, #4
 80128f6:	f102 0614 	add.w	r6, r2, #20
 80128fa:	429e      	cmp	r6, r3
 80128fc:	6841      	ldr	r1, [r0, #4]
 80128fe:	d94e      	bls.n	801299e <_dtoa_r+0x316>
 8012900:	4628      	mov	r0, r5
 8012902:	f001 f927 	bl	8013b54 <_Balloc>
 8012906:	9003      	str	r0, [sp, #12]
 8012908:	2800      	cmp	r0, #0
 801290a:	d14c      	bne.n	80129a6 <_dtoa_r+0x31e>
 801290c:	4602      	mov	r2, r0
 801290e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012912:	4b17      	ldr	r3, [pc, #92]	; (8012970 <_dtoa_r+0x2e8>)
 8012914:	e6cc      	b.n	80126b0 <_dtoa_r+0x28>
 8012916:	2301      	movs	r3, #1
 8012918:	e7de      	b.n	80128d8 <_dtoa_r+0x250>
 801291a:	2300      	movs	r3, #0
 801291c:	930b      	str	r3, [sp, #44]	; 0x2c
 801291e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012920:	eb0a 0903 	add.w	r9, sl, r3
 8012924:	f109 0301 	add.w	r3, r9, #1
 8012928:	2b01      	cmp	r3, #1
 801292a:	9308      	str	r3, [sp, #32]
 801292c:	bfb8      	it	lt
 801292e:	2301      	movlt	r3, #1
 8012930:	e7dd      	b.n	80128ee <_dtoa_r+0x266>
 8012932:	2301      	movs	r3, #1
 8012934:	e7f2      	b.n	801291c <_dtoa_r+0x294>
 8012936:	bf00      	nop
 8012938:	636f4361 	.word	0x636f4361
 801293c:	3fd287a7 	.word	0x3fd287a7
 8012940:	8b60c8b3 	.word	0x8b60c8b3
 8012944:	3fc68a28 	.word	0x3fc68a28
 8012948:	509f79fb 	.word	0x509f79fb
 801294c:	3fd34413 	.word	0x3fd34413
 8012950:	08015a98 	.word	0x08015a98
 8012954:	08015c56 	.word	0x08015c56
 8012958:	7ff00000 	.word	0x7ff00000
 801295c:	08015c52 	.word	0x08015c52
 8012960:	08015c49 	.word	0x08015c49
 8012964:	08015a21 	.word	0x08015a21
 8012968:	3ff80000 	.word	0x3ff80000
 801296c:	08015dc0 	.word	0x08015dc0
 8012970:	08015cb1 	.word	0x08015cb1
 8012974:	2401      	movs	r4, #1
 8012976:	2300      	movs	r3, #0
 8012978:	940b      	str	r4, [sp, #44]	; 0x2c
 801297a:	9322      	str	r3, [sp, #136]	; 0x88
 801297c:	f04f 39ff 	mov.w	r9, #4294967295
 8012980:	2200      	movs	r2, #0
 8012982:	2312      	movs	r3, #18
 8012984:	f8cd 9020 	str.w	r9, [sp, #32]
 8012988:	9223      	str	r2, [sp, #140]	; 0x8c
 801298a:	e7b0      	b.n	80128ee <_dtoa_r+0x266>
 801298c:	2301      	movs	r3, #1
 801298e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012990:	e7f4      	b.n	801297c <_dtoa_r+0x2f4>
 8012992:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8012996:	464b      	mov	r3, r9
 8012998:	f8cd 9020 	str.w	r9, [sp, #32]
 801299c:	e7a7      	b.n	80128ee <_dtoa_r+0x266>
 801299e:	3101      	adds	r1, #1
 80129a0:	6041      	str	r1, [r0, #4]
 80129a2:	0052      	lsls	r2, r2, #1
 80129a4:	e7a7      	b.n	80128f6 <_dtoa_r+0x26e>
 80129a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80129a8:	9a03      	ldr	r2, [sp, #12]
 80129aa:	601a      	str	r2, [r3, #0]
 80129ac:	9b08      	ldr	r3, [sp, #32]
 80129ae:	2b0e      	cmp	r3, #14
 80129b0:	f200 80a8 	bhi.w	8012b04 <_dtoa_r+0x47c>
 80129b4:	2c00      	cmp	r4, #0
 80129b6:	f000 80a5 	beq.w	8012b04 <_dtoa_r+0x47c>
 80129ba:	f1ba 0f00 	cmp.w	sl, #0
 80129be:	dd34      	ble.n	8012a2a <_dtoa_r+0x3a2>
 80129c0:	4a9a      	ldr	r2, [pc, #616]	; (8012c2c <_dtoa_r+0x5a4>)
 80129c2:	f00a 030f 	and.w	r3, sl, #15
 80129c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80129ca:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80129ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80129d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80129d6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80129da:	d016      	beq.n	8012a0a <_dtoa_r+0x382>
 80129dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80129e0:	4b93      	ldr	r3, [pc, #588]	; (8012c30 <_dtoa_r+0x5a8>)
 80129e2:	2703      	movs	r7, #3
 80129e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80129e8:	f7ed ff10 	bl	800080c <__aeabi_ddiv>
 80129ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80129f0:	f004 040f 	and.w	r4, r4, #15
 80129f4:	4e8e      	ldr	r6, [pc, #568]	; (8012c30 <_dtoa_r+0x5a8>)
 80129f6:	b954      	cbnz	r4, 8012a0e <_dtoa_r+0x386>
 80129f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80129fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012a00:	f7ed ff04 	bl	800080c <__aeabi_ddiv>
 8012a04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a08:	e029      	b.n	8012a5e <_dtoa_r+0x3d6>
 8012a0a:	2702      	movs	r7, #2
 8012a0c:	e7f2      	b.n	80129f4 <_dtoa_r+0x36c>
 8012a0e:	07e1      	lsls	r1, r4, #31
 8012a10:	d508      	bpl.n	8012a24 <_dtoa_r+0x39c>
 8012a12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012a16:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012a1a:	f7ed fdcd 	bl	80005b8 <__aeabi_dmul>
 8012a1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012a22:	3701      	adds	r7, #1
 8012a24:	1064      	asrs	r4, r4, #1
 8012a26:	3608      	adds	r6, #8
 8012a28:	e7e5      	b.n	80129f6 <_dtoa_r+0x36e>
 8012a2a:	f000 80a5 	beq.w	8012b78 <_dtoa_r+0x4f0>
 8012a2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012a32:	f1ca 0400 	rsb	r4, sl, #0
 8012a36:	4b7d      	ldr	r3, [pc, #500]	; (8012c2c <_dtoa_r+0x5a4>)
 8012a38:	f004 020f 	and.w	r2, r4, #15
 8012a3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a44:	f7ed fdb8 	bl	80005b8 <__aeabi_dmul>
 8012a48:	2702      	movs	r7, #2
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a50:	4e77      	ldr	r6, [pc, #476]	; (8012c30 <_dtoa_r+0x5a8>)
 8012a52:	1124      	asrs	r4, r4, #4
 8012a54:	2c00      	cmp	r4, #0
 8012a56:	f040 8084 	bne.w	8012b62 <_dtoa_r+0x4da>
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d1d2      	bne.n	8012a04 <_dtoa_r+0x37c>
 8012a5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	f000 808b 	beq.w	8012b7c <_dtoa_r+0x4f4>
 8012a66:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8012a6a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8012a6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012a72:	2200      	movs	r2, #0
 8012a74:	4b6f      	ldr	r3, [pc, #444]	; (8012c34 <_dtoa_r+0x5ac>)
 8012a76:	f7ee f811 	bl	8000a9c <__aeabi_dcmplt>
 8012a7a:	2800      	cmp	r0, #0
 8012a7c:	d07e      	beq.n	8012b7c <_dtoa_r+0x4f4>
 8012a7e:	9b08      	ldr	r3, [sp, #32]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d07b      	beq.n	8012b7c <_dtoa_r+0x4f4>
 8012a84:	f1b9 0f00 	cmp.w	r9, #0
 8012a88:	dd38      	ble.n	8012afc <_dtoa_r+0x474>
 8012a8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012a8e:	2200      	movs	r2, #0
 8012a90:	4b69      	ldr	r3, [pc, #420]	; (8012c38 <_dtoa_r+0x5b0>)
 8012a92:	f7ed fd91 	bl	80005b8 <__aeabi_dmul>
 8012a96:	464c      	mov	r4, r9
 8012a98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a9c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8012aa0:	3701      	adds	r7, #1
 8012aa2:	4638      	mov	r0, r7
 8012aa4:	f7ed fd1e 	bl	80004e4 <__aeabi_i2d>
 8012aa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012aac:	f7ed fd84 	bl	80005b8 <__aeabi_dmul>
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	4b62      	ldr	r3, [pc, #392]	; (8012c3c <_dtoa_r+0x5b4>)
 8012ab4:	f7ed fbca 	bl	800024c <__adddf3>
 8012ab8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8012abc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012ac0:	9611      	str	r6, [sp, #68]	; 0x44
 8012ac2:	2c00      	cmp	r4, #0
 8012ac4:	d15d      	bne.n	8012b82 <_dtoa_r+0x4fa>
 8012ac6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012aca:	2200      	movs	r2, #0
 8012acc:	4b5c      	ldr	r3, [pc, #368]	; (8012c40 <_dtoa_r+0x5b8>)
 8012ace:	f7ed fbbb 	bl	8000248 <__aeabi_dsub>
 8012ad2:	4602      	mov	r2, r0
 8012ad4:	460b      	mov	r3, r1
 8012ad6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012ada:	4633      	mov	r3, r6
 8012adc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012ade:	f7ed fffb 	bl	8000ad8 <__aeabi_dcmpgt>
 8012ae2:	2800      	cmp	r0, #0
 8012ae4:	f040 829c 	bne.w	8013020 <_dtoa_r+0x998>
 8012ae8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012aec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012aee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012af2:	f7ed ffd3 	bl	8000a9c <__aeabi_dcmplt>
 8012af6:	2800      	cmp	r0, #0
 8012af8:	f040 8290 	bne.w	801301c <_dtoa_r+0x994>
 8012afc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8012b00:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8012b04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	f2c0 8152 	blt.w	8012db0 <_dtoa_r+0x728>
 8012b0c:	f1ba 0f0e 	cmp.w	sl, #14
 8012b10:	f300 814e 	bgt.w	8012db0 <_dtoa_r+0x728>
 8012b14:	4b45      	ldr	r3, [pc, #276]	; (8012c2c <_dtoa_r+0x5a4>)
 8012b16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012b1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012b1e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8012b22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	f280 80db 	bge.w	8012ce0 <_dtoa_r+0x658>
 8012b2a:	9b08      	ldr	r3, [sp, #32]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	f300 80d7 	bgt.w	8012ce0 <_dtoa_r+0x658>
 8012b32:	f040 8272 	bne.w	801301a <_dtoa_r+0x992>
 8012b36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	4b40      	ldr	r3, [pc, #256]	; (8012c40 <_dtoa_r+0x5b8>)
 8012b3e:	f7ed fd3b 	bl	80005b8 <__aeabi_dmul>
 8012b42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b46:	f7ed ffbd 	bl	8000ac4 <__aeabi_dcmpge>
 8012b4a:	9c08      	ldr	r4, [sp, #32]
 8012b4c:	4626      	mov	r6, r4
 8012b4e:	2800      	cmp	r0, #0
 8012b50:	f040 8248 	bne.w	8012fe4 <_dtoa_r+0x95c>
 8012b54:	2331      	movs	r3, #49	; 0x31
 8012b56:	9f03      	ldr	r7, [sp, #12]
 8012b58:	f10a 0a01 	add.w	sl, sl, #1
 8012b5c:	f807 3b01 	strb.w	r3, [r7], #1
 8012b60:	e244      	b.n	8012fec <_dtoa_r+0x964>
 8012b62:	07e2      	lsls	r2, r4, #31
 8012b64:	d505      	bpl.n	8012b72 <_dtoa_r+0x4ea>
 8012b66:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012b6a:	f7ed fd25 	bl	80005b8 <__aeabi_dmul>
 8012b6e:	2301      	movs	r3, #1
 8012b70:	3701      	adds	r7, #1
 8012b72:	1064      	asrs	r4, r4, #1
 8012b74:	3608      	adds	r6, #8
 8012b76:	e76d      	b.n	8012a54 <_dtoa_r+0x3cc>
 8012b78:	2702      	movs	r7, #2
 8012b7a:	e770      	b.n	8012a5e <_dtoa_r+0x3d6>
 8012b7c:	46d0      	mov	r8, sl
 8012b7e:	9c08      	ldr	r4, [sp, #32]
 8012b80:	e78f      	b.n	8012aa2 <_dtoa_r+0x41a>
 8012b82:	9903      	ldr	r1, [sp, #12]
 8012b84:	4b29      	ldr	r3, [pc, #164]	; (8012c2c <_dtoa_r+0x5a4>)
 8012b86:	4421      	add	r1, r4
 8012b88:	9112      	str	r1, [sp, #72]	; 0x48
 8012b8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012b8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012b90:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8012b94:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012b98:	2900      	cmp	r1, #0
 8012b9a:	d055      	beq.n	8012c48 <_dtoa_r+0x5c0>
 8012b9c:	2000      	movs	r0, #0
 8012b9e:	4929      	ldr	r1, [pc, #164]	; (8012c44 <_dtoa_r+0x5bc>)
 8012ba0:	f7ed fe34 	bl	800080c <__aeabi_ddiv>
 8012ba4:	463b      	mov	r3, r7
 8012ba6:	4632      	mov	r2, r6
 8012ba8:	f7ed fb4e 	bl	8000248 <__aeabi_dsub>
 8012bac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012bb0:	9f03      	ldr	r7, [sp, #12]
 8012bb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012bb6:	f7ed ffaf 	bl	8000b18 <__aeabi_d2iz>
 8012bba:	4604      	mov	r4, r0
 8012bbc:	f7ed fc92 	bl	80004e4 <__aeabi_i2d>
 8012bc0:	4602      	mov	r2, r0
 8012bc2:	460b      	mov	r3, r1
 8012bc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012bc8:	f7ed fb3e 	bl	8000248 <__aeabi_dsub>
 8012bcc:	4602      	mov	r2, r0
 8012bce:	460b      	mov	r3, r1
 8012bd0:	3430      	adds	r4, #48	; 0x30
 8012bd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012bd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012bda:	f807 4b01 	strb.w	r4, [r7], #1
 8012bde:	f7ed ff5d 	bl	8000a9c <__aeabi_dcmplt>
 8012be2:	2800      	cmp	r0, #0
 8012be4:	d174      	bne.n	8012cd0 <_dtoa_r+0x648>
 8012be6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012bea:	2000      	movs	r0, #0
 8012bec:	4911      	ldr	r1, [pc, #68]	; (8012c34 <_dtoa_r+0x5ac>)
 8012bee:	f7ed fb2b 	bl	8000248 <__aeabi_dsub>
 8012bf2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012bf6:	f7ed ff51 	bl	8000a9c <__aeabi_dcmplt>
 8012bfa:	2800      	cmp	r0, #0
 8012bfc:	f040 80b7 	bne.w	8012d6e <_dtoa_r+0x6e6>
 8012c00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012c02:	429f      	cmp	r7, r3
 8012c04:	f43f af7a 	beq.w	8012afc <_dtoa_r+0x474>
 8012c08:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	4b0a      	ldr	r3, [pc, #40]	; (8012c38 <_dtoa_r+0x5b0>)
 8012c10:	f7ed fcd2 	bl	80005b8 <__aeabi_dmul>
 8012c14:	2200      	movs	r2, #0
 8012c16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012c1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012c1e:	4b06      	ldr	r3, [pc, #24]	; (8012c38 <_dtoa_r+0x5b0>)
 8012c20:	f7ed fcca 	bl	80005b8 <__aeabi_dmul>
 8012c24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012c28:	e7c3      	b.n	8012bb2 <_dtoa_r+0x52a>
 8012c2a:	bf00      	nop
 8012c2c:	08015dc0 	.word	0x08015dc0
 8012c30:	08015d98 	.word	0x08015d98
 8012c34:	3ff00000 	.word	0x3ff00000
 8012c38:	40240000 	.word	0x40240000
 8012c3c:	401c0000 	.word	0x401c0000
 8012c40:	40140000 	.word	0x40140000
 8012c44:	3fe00000 	.word	0x3fe00000
 8012c48:	4630      	mov	r0, r6
 8012c4a:	4639      	mov	r1, r7
 8012c4c:	f7ed fcb4 	bl	80005b8 <__aeabi_dmul>
 8012c50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012c52:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012c56:	9c03      	ldr	r4, [sp, #12]
 8012c58:	9314      	str	r3, [sp, #80]	; 0x50
 8012c5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012c5e:	f7ed ff5b 	bl	8000b18 <__aeabi_d2iz>
 8012c62:	9015      	str	r0, [sp, #84]	; 0x54
 8012c64:	f7ed fc3e 	bl	80004e4 <__aeabi_i2d>
 8012c68:	4602      	mov	r2, r0
 8012c6a:	460b      	mov	r3, r1
 8012c6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012c70:	f7ed faea 	bl	8000248 <__aeabi_dsub>
 8012c74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012c76:	4606      	mov	r6, r0
 8012c78:	3330      	adds	r3, #48	; 0x30
 8012c7a:	f804 3b01 	strb.w	r3, [r4], #1
 8012c7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012c80:	460f      	mov	r7, r1
 8012c82:	429c      	cmp	r4, r3
 8012c84:	f04f 0200 	mov.w	r2, #0
 8012c88:	d124      	bne.n	8012cd4 <_dtoa_r+0x64c>
 8012c8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012c8e:	4bb0      	ldr	r3, [pc, #704]	; (8012f50 <_dtoa_r+0x8c8>)
 8012c90:	f7ed fadc 	bl	800024c <__adddf3>
 8012c94:	4602      	mov	r2, r0
 8012c96:	460b      	mov	r3, r1
 8012c98:	4630      	mov	r0, r6
 8012c9a:	4639      	mov	r1, r7
 8012c9c:	f7ed ff1c 	bl	8000ad8 <__aeabi_dcmpgt>
 8012ca0:	2800      	cmp	r0, #0
 8012ca2:	d163      	bne.n	8012d6c <_dtoa_r+0x6e4>
 8012ca4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012ca8:	2000      	movs	r0, #0
 8012caa:	49a9      	ldr	r1, [pc, #676]	; (8012f50 <_dtoa_r+0x8c8>)
 8012cac:	f7ed facc 	bl	8000248 <__aeabi_dsub>
 8012cb0:	4602      	mov	r2, r0
 8012cb2:	460b      	mov	r3, r1
 8012cb4:	4630      	mov	r0, r6
 8012cb6:	4639      	mov	r1, r7
 8012cb8:	f7ed fef0 	bl	8000a9c <__aeabi_dcmplt>
 8012cbc:	2800      	cmp	r0, #0
 8012cbe:	f43f af1d 	beq.w	8012afc <_dtoa_r+0x474>
 8012cc2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8012cc4:	1e7b      	subs	r3, r7, #1
 8012cc6:	9314      	str	r3, [sp, #80]	; 0x50
 8012cc8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8012ccc:	2b30      	cmp	r3, #48	; 0x30
 8012cce:	d0f8      	beq.n	8012cc2 <_dtoa_r+0x63a>
 8012cd0:	46c2      	mov	sl, r8
 8012cd2:	e03b      	b.n	8012d4c <_dtoa_r+0x6c4>
 8012cd4:	4b9f      	ldr	r3, [pc, #636]	; (8012f54 <_dtoa_r+0x8cc>)
 8012cd6:	f7ed fc6f 	bl	80005b8 <__aeabi_dmul>
 8012cda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012cde:	e7bc      	b.n	8012c5a <_dtoa_r+0x5d2>
 8012ce0:	9f03      	ldr	r7, [sp, #12]
 8012ce2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8012ce6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012cea:	4640      	mov	r0, r8
 8012cec:	4649      	mov	r1, r9
 8012cee:	f7ed fd8d 	bl	800080c <__aeabi_ddiv>
 8012cf2:	f7ed ff11 	bl	8000b18 <__aeabi_d2iz>
 8012cf6:	4604      	mov	r4, r0
 8012cf8:	f7ed fbf4 	bl	80004e4 <__aeabi_i2d>
 8012cfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012d00:	f7ed fc5a 	bl	80005b8 <__aeabi_dmul>
 8012d04:	4602      	mov	r2, r0
 8012d06:	460b      	mov	r3, r1
 8012d08:	4640      	mov	r0, r8
 8012d0a:	4649      	mov	r1, r9
 8012d0c:	f7ed fa9c 	bl	8000248 <__aeabi_dsub>
 8012d10:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8012d14:	f807 6b01 	strb.w	r6, [r7], #1
 8012d18:	9e03      	ldr	r6, [sp, #12]
 8012d1a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8012d1e:	1bbe      	subs	r6, r7, r6
 8012d20:	45b4      	cmp	ip, r6
 8012d22:	4602      	mov	r2, r0
 8012d24:	460b      	mov	r3, r1
 8012d26:	d136      	bne.n	8012d96 <_dtoa_r+0x70e>
 8012d28:	f7ed fa90 	bl	800024c <__adddf3>
 8012d2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012d30:	4680      	mov	r8, r0
 8012d32:	4689      	mov	r9, r1
 8012d34:	f7ed fed0 	bl	8000ad8 <__aeabi_dcmpgt>
 8012d38:	bb58      	cbnz	r0, 8012d92 <_dtoa_r+0x70a>
 8012d3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012d3e:	4640      	mov	r0, r8
 8012d40:	4649      	mov	r1, r9
 8012d42:	f7ed fea1 	bl	8000a88 <__aeabi_dcmpeq>
 8012d46:	b108      	cbz	r0, 8012d4c <_dtoa_r+0x6c4>
 8012d48:	07e1      	lsls	r1, r4, #31
 8012d4a:	d422      	bmi.n	8012d92 <_dtoa_r+0x70a>
 8012d4c:	4628      	mov	r0, r5
 8012d4e:	4659      	mov	r1, fp
 8012d50:	f000 ff40 	bl	8013bd4 <_Bfree>
 8012d54:	2300      	movs	r3, #0
 8012d56:	703b      	strb	r3, [r7, #0]
 8012d58:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012d5a:	f10a 0001 	add.w	r0, sl, #1
 8012d5e:	6018      	str	r0, [r3, #0]
 8012d60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	f43f acde 	beq.w	8012724 <_dtoa_r+0x9c>
 8012d68:	601f      	str	r7, [r3, #0]
 8012d6a:	e4db      	b.n	8012724 <_dtoa_r+0x9c>
 8012d6c:	4627      	mov	r7, r4
 8012d6e:	463b      	mov	r3, r7
 8012d70:	461f      	mov	r7, r3
 8012d72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012d76:	2a39      	cmp	r2, #57	; 0x39
 8012d78:	d107      	bne.n	8012d8a <_dtoa_r+0x702>
 8012d7a:	9a03      	ldr	r2, [sp, #12]
 8012d7c:	429a      	cmp	r2, r3
 8012d7e:	d1f7      	bne.n	8012d70 <_dtoa_r+0x6e8>
 8012d80:	2230      	movs	r2, #48	; 0x30
 8012d82:	9903      	ldr	r1, [sp, #12]
 8012d84:	f108 0801 	add.w	r8, r8, #1
 8012d88:	700a      	strb	r2, [r1, #0]
 8012d8a:	781a      	ldrb	r2, [r3, #0]
 8012d8c:	3201      	adds	r2, #1
 8012d8e:	701a      	strb	r2, [r3, #0]
 8012d90:	e79e      	b.n	8012cd0 <_dtoa_r+0x648>
 8012d92:	46d0      	mov	r8, sl
 8012d94:	e7eb      	b.n	8012d6e <_dtoa_r+0x6e6>
 8012d96:	2200      	movs	r2, #0
 8012d98:	4b6e      	ldr	r3, [pc, #440]	; (8012f54 <_dtoa_r+0x8cc>)
 8012d9a:	f7ed fc0d 	bl	80005b8 <__aeabi_dmul>
 8012d9e:	2200      	movs	r2, #0
 8012da0:	2300      	movs	r3, #0
 8012da2:	4680      	mov	r8, r0
 8012da4:	4689      	mov	r9, r1
 8012da6:	f7ed fe6f 	bl	8000a88 <__aeabi_dcmpeq>
 8012daa:	2800      	cmp	r0, #0
 8012dac:	d09b      	beq.n	8012ce6 <_dtoa_r+0x65e>
 8012dae:	e7cd      	b.n	8012d4c <_dtoa_r+0x6c4>
 8012db0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012db2:	2a00      	cmp	r2, #0
 8012db4:	f000 80d0 	beq.w	8012f58 <_dtoa_r+0x8d0>
 8012db8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012dba:	2a01      	cmp	r2, #1
 8012dbc:	f300 80ae 	bgt.w	8012f1c <_dtoa_r+0x894>
 8012dc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012dc2:	2a00      	cmp	r2, #0
 8012dc4:	f000 80a6 	beq.w	8012f14 <_dtoa_r+0x88c>
 8012dc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012dcc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012dce:	9f06      	ldr	r7, [sp, #24]
 8012dd0:	9a06      	ldr	r2, [sp, #24]
 8012dd2:	2101      	movs	r1, #1
 8012dd4:	441a      	add	r2, r3
 8012dd6:	9206      	str	r2, [sp, #24]
 8012dd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012dda:	4628      	mov	r0, r5
 8012ddc:	441a      	add	r2, r3
 8012dde:	9209      	str	r2, [sp, #36]	; 0x24
 8012de0:	f000 fff8 	bl	8013dd4 <__i2b>
 8012de4:	4606      	mov	r6, r0
 8012de6:	2f00      	cmp	r7, #0
 8012de8:	dd0c      	ble.n	8012e04 <_dtoa_r+0x77c>
 8012dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	dd09      	ble.n	8012e04 <_dtoa_r+0x77c>
 8012df0:	42bb      	cmp	r3, r7
 8012df2:	bfa8      	it	ge
 8012df4:	463b      	movge	r3, r7
 8012df6:	9a06      	ldr	r2, [sp, #24]
 8012df8:	1aff      	subs	r7, r7, r3
 8012dfa:	1ad2      	subs	r2, r2, r3
 8012dfc:	9206      	str	r2, [sp, #24]
 8012dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012e00:	1ad3      	subs	r3, r2, r3
 8012e02:	9309      	str	r3, [sp, #36]	; 0x24
 8012e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e06:	b1f3      	cbz	r3, 8012e46 <_dtoa_r+0x7be>
 8012e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	f000 80a8 	beq.w	8012f60 <_dtoa_r+0x8d8>
 8012e10:	2c00      	cmp	r4, #0
 8012e12:	dd10      	ble.n	8012e36 <_dtoa_r+0x7ae>
 8012e14:	4631      	mov	r1, r6
 8012e16:	4622      	mov	r2, r4
 8012e18:	4628      	mov	r0, r5
 8012e1a:	f001 f899 	bl	8013f50 <__pow5mult>
 8012e1e:	465a      	mov	r2, fp
 8012e20:	4601      	mov	r1, r0
 8012e22:	4606      	mov	r6, r0
 8012e24:	4628      	mov	r0, r5
 8012e26:	f000 ffeb 	bl	8013e00 <__multiply>
 8012e2a:	4680      	mov	r8, r0
 8012e2c:	4659      	mov	r1, fp
 8012e2e:	4628      	mov	r0, r5
 8012e30:	f000 fed0 	bl	8013bd4 <_Bfree>
 8012e34:	46c3      	mov	fp, r8
 8012e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e38:	1b1a      	subs	r2, r3, r4
 8012e3a:	d004      	beq.n	8012e46 <_dtoa_r+0x7be>
 8012e3c:	4659      	mov	r1, fp
 8012e3e:	4628      	mov	r0, r5
 8012e40:	f001 f886 	bl	8013f50 <__pow5mult>
 8012e44:	4683      	mov	fp, r0
 8012e46:	2101      	movs	r1, #1
 8012e48:	4628      	mov	r0, r5
 8012e4a:	f000 ffc3 	bl	8013dd4 <__i2b>
 8012e4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e50:	4604      	mov	r4, r0
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	f340 8086 	ble.w	8012f64 <_dtoa_r+0x8dc>
 8012e58:	461a      	mov	r2, r3
 8012e5a:	4601      	mov	r1, r0
 8012e5c:	4628      	mov	r0, r5
 8012e5e:	f001 f877 	bl	8013f50 <__pow5mult>
 8012e62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012e64:	4604      	mov	r4, r0
 8012e66:	2b01      	cmp	r3, #1
 8012e68:	dd7f      	ble.n	8012f6a <_dtoa_r+0x8e2>
 8012e6a:	f04f 0800 	mov.w	r8, #0
 8012e6e:	6923      	ldr	r3, [r4, #16]
 8012e70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012e74:	6918      	ldr	r0, [r3, #16]
 8012e76:	f000 ff5f 	bl	8013d38 <__hi0bits>
 8012e7a:	f1c0 0020 	rsb	r0, r0, #32
 8012e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e80:	4418      	add	r0, r3
 8012e82:	f010 001f 	ands.w	r0, r0, #31
 8012e86:	f000 8092 	beq.w	8012fae <_dtoa_r+0x926>
 8012e8a:	f1c0 0320 	rsb	r3, r0, #32
 8012e8e:	2b04      	cmp	r3, #4
 8012e90:	f340 808a 	ble.w	8012fa8 <_dtoa_r+0x920>
 8012e94:	f1c0 001c 	rsb	r0, r0, #28
 8012e98:	9b06      	ldr	r3, [sp, #24]
 8012e9a:	4407      	add	r7, r0
 8012e9c:	4403      	add	r3, r0
 8012e9e:	9306      	str	r3, [sp, #24]
 8012ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ea2:	4403      	add	r3, r0
 8012ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8012ea6:	9b06      	ldr	r3, [sp, #24]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	dd05      	ble.n	8012eb8 <_dtoa_r+0x830>
 8012eac:	4659      	mov	r1, fp
 8012eae:	461a      	mov	r2, r3
 8012eb0:	4628      	mov	r0, r5
 8012eb2:	f001 f8a7 	bl	8014004 <__lshift>
 8012eb6:	4683      	mov	fp, r0
 8012eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	dd05      	ble.n	8012eca <_dtoa_r+0x842>
 8012ebe:	4621      	mov	r1, r4
 8012ec0:	461a      	mov	r2, r3
 8012ec2:	4628      	mov	r0, r5
 8012ec4:	f001 f89e 	bl	8014004 <__lshift>
 8012ec8:	4604      	mov	r4, r0
 8012eca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d070      	beq.n	8012fb2 <_dtoa_r+0x92a>
 8012ed0:	4621      	mov	r1, r4
 8012ed2:	4658      	mov	r0, fp
 8012ed4:	f001 f906 	bl	80140e4 <__mcmp>
 8012ed8:	2800      	cmp	r0, #0
 8012eda:	da6a      	bge.n	8012fb2 <_dtoa_r+0x92a>
 8012edc:	2300      	movs	r3, #0
 8012ede:	4659      	mov	r1, fp
 8012ee0:	220a      	movs	r2, #10
 8012ee2:	4628      	mov	r0, r5
 8012ee4:	f000 fe98 	bl	8013c18 <__multadd>
 8012ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012eea:	4683      	mov	fp, r0
 8012eec:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	f000 8194 	beq.w	801321e <_dtoa_r+0xb96>
 8012ef6:	4631      	mov	r1, r6
 8012ef8:	2300      	movs	r3, #0
 8012efa:	220a      	movs	r2, #10
 8012efc:	4628      	mov	r0, r5
 8012efe:	f000 fe8b 	bl	8013c18 <__multadd>
 8012f02:	f1b9 0f00 	cmp.w	r9, #0
 8012f06:	4606      	mov	r6, r0
 8012f08:	f300 8093 	bgt.w	8013032 <_dtoa_r+0x9aa>
 8012f0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012f0e:	2b02      	cmp	r3, #2
 8012f10:	dc57      	bgt.n	8012fc2 <_dtoa_r+0x93a>
 8012f12:	e08e      	b.n	8013032 <_dtoa_r+0x9aa>
 8012f14:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012f16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012f1a:	e757      	b.n	8012dcc <_dtoa_r+0x744>
 8012f1c:	9b08      	ldr	r3, [sp, #32]
 8012f1e:	1e5c      	subs	r4, r3, #1
 8012f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f22:	42a3      	cmp	r3, r4
 8012f24:	bfb7      	itett	lt
 8012f26:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012f28:	1b1c      	subge	r4, r3, r4
 8012f2a:	1ae2      	sublt	r2, r4, r3
 8012f2c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012f2e:	bfbe      	ittt	lt
 8012f30:	940a      	strlt	r4, [sp, #40]	; 0x28
 8012f32:	189b      	addlt	r3, r3, r2
 8012f34:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012f36:	9b08      	ldr	r3, [sp, #32]
 8012f38:	bfb8      	it	lt
 8012f3a:	2400      	movlt	r4, #0
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	bfbb      	ittet	lt
 8012f40:	9b06      	ldrlt	r3, [sp, #24]
 8012f42:	9a08      	ldrlt	r2, [sp, #32]
 8012f44:	9f06      	ldrge	r7, [sp, #24]
 8012f46:	1a9f      	sublt	r7, r3, r2
 8012f48:	bfac      	ite	ge
 8012f4a:	9b08      	ldrge	r3, [sp, #32]
 8012f4c:	2300      	movlt	r3, #0
 8012f4e:	e73f      	b.n	8012dd0 <_dtoa_r+0x748>
 8012f50:	3fe00000 	.word	0x3fe00000
 8012f54:	40240000 	.word	0x40240000
 8012f58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012f5a:	9f06      	ldr	r7, [sp, #24]
 8012f5c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8012f5e:	e742      	b.n	8012de6 <_dtoa_r+0x75e>
 8012f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f62:	e76b      	b.n	8012e3c <_dtoa_r+0x7b4>
 8012f64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012f66:	2b01      	cmp	r3, #1
 8012f68:	dc19      	bgt.n	8012f9e <_dtoa_r+0x916>
 8012f6a:	9b04      	ldr	r3, [sp, #16]
 8012f6c:	b9bb      	cbnz	r3, 8012f9e <_dtoa_r+0x916>
 8012f6e:	9b05      	ldr	r3, [sp, #20]
 8012f70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012f74:	b99b      	cbnz	r3, 8012f9e <_dtoa_r+0x916>
 8012f76:	9b05      	ldr	r3, [sp, #20]
 8012f78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012f7c:	0d1b      	lsrs	r3, r3, #20
 8012f7e:	051b      	lsls	r3, r3, #20
 8012f80:	b183      	cbz	r3, 8012fa4 <_dtoa_r+0x91c>
 8012f82:	f04f 0801 	mov.w	r8, #1
 8012f86:	9b06      	ldr	r3, [sp, #24]
 8012f88:	3301      	adds	r3, #1
 8012f8a:	9306      	str	r3, [sp, #24]
 8012f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f8e:	3301      	adds	r3, #1
 8012f90:	9309      	str	r3, [sp, #36]	; 0x24
 8012f92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	f47f af6a 	bne.w	8012e6e <_dtoa_r+0x7e6>
 8012f9a:	2001      	movs	r0, #1
 8012f9c:	e76f      	b.n	8012e7e <_dtoa_r+0x7f6>
 8012f9e:	f04f 0800 	mov.w	r8, #0
 8012fa2:	e7f6      	b.n	8012f92 <_dtoa_r+0x90a>
 8012fa4:	4698      	mov	r8, r3
 8012fa6:	e7f4      	b.n	8012f92 <_dtoa_r+0x90a>
 8012fa8:	f43f af7d 	beq.w	8012ea6 <_dtoa_r+0x81e>
 8012fac:	4618      	mov	r0, r3
 8012fae:	301c      	adds	r0, #28
 8012fb0:	e772      	b.n	8012e98 <_dtoa_r+0x810>
 8012fb2:	9b08      	ldr	r3, [sp, #32]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	dc36      	bgt.n	8013026 <_dtoa_r+0x99e>
 8012fb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012fba:	2b02      	cmp	r3, #2
 8012fbc:	dd33      	ble.n	8013026 <_dtoa_r+0x99e>
 8012fbe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012fc2:	f1b9 0f00 	cmp.w	r9, #0
 8012fc6:	d10d      	bne.n	8012fe4 <_dtoa_r+0x95c>
 8012fc8:	4621      	mov	r1, r4
 8012fca:	464b      	mov	r3, r9
 8012fcc:	2205      	movs	r2, #5
 8012fce:	4628      	mov	r0, r5
 8012fd0:	f000 fe22 	bl	8013c18 <__multadd>
 8012fd4:	4601      	mov	r1, r0
 8012fd6:	4604      	mov	r4, r0
 8012fd8:	4658      	mov	r0, fp
 8012fda:	f001 f883 	bl	80140e4 <__mcmp>
 8012fde:	2800      	cmp	r0, #0
 8012fe0:	f73f adb8 	bgt.w	8012b54 <_dtoa_r+0x4cc>
 8012fe4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012fe6:	9f03      	ldr	r7, [sp, #12]
 8012fe8:	ea6f 0a03 	mvn.w	sl, r3
 8012fec:	f04f 0800 	mov.w	r8, #0
 8012ff0:	4621      	mov	r1, r4
 8012ff2:	4628      	mov	r0, r5
 8012ff4:	f000 fdee 	bl	8013bd4 <_Bfree>
 8012ff8:	2e00      	cmp	r6, #0
 8012ffa:	f43f aea7 	beq.w	8012d4c <_dtoa_r+0x6c4>
 8012ffe:	f1b8 0f00 	cmp.w	r8, #0
 8013002:	d005      	beq.n	8013010 <_dtoa_r+0x988>
 8013004:	45b0      	cmp	r8, r6
 8013006:	d003      	beq.n	8013010 <_dtoa_r+0x988>
 8013008:	4641      	mov	r1, r8
 801300a:	4628      	mov	r0, r5
 801300c:	f000 fde2 	bl	8013bd4 <_Bfree>
 8013010:	4631      	mov	r1, r6
 8013012:	4628      	mov	r0, r5
 8013014:	f000 fdde 	bl	8013bd4 <_Bfree>
 8013018:	e698      	b.n	8012d4c <_dtoa_r+0x6c4>
 801301a:	2400      	movs	r4, #0
 801301c:	4626      	mov	r6, r4
 801301e:	e7e1      	b.n	8012fe4 <_dtoa_r+0x95c>
 8013020:	46c2      	mov	sl, r8
 8013022:	4626      	mov	r6, r4
 8013024:	e596      	b.n	8012b54 <_dtoa_r+0x4cc>
 8013026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013028:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801302c:	2b00      	cmp	r3, #0
 801302e:	f000 80fd 	beq.w	801322c <_dtoa_r+0xba4>
 8013032:	2f00      	cmp	r7, #0
 8013034:	dd05      	ble.n	8013042 <_dtoa_r+0x9ba>
 8013036:	4631      	mov	r1, r6
 8013038:	463a      	mov	r2, r7
 801303a:	4628      	mov	r0, r5
 801303c:	f000 ffe2 	bl	8014004 <__lshift>
 8013040:	4606      	mov	r6, r0
 8013042:	f1b8 0f00 	cmp.w	r8, #0
 8013046:	d05c      	beq.n	8013102 <_dtoa_r+0xa7a>
 8013048:	4628      	mov	r0, r5
 801304a:	6871      	ldr	r1, [r6, #4]
 801304c:	f000 fd82 	bl	8013b54 <_Balloc>
 8013050:	4607      	mov	r7, r0
 8013052:	b928      	cbnz	r0, 8013060 <_dtoa_r+0x9d8>
 8013054:	4602      	mov	r2, r0
 8013056:	f240 21ea 	movw	r1, #746	; 0x2ea
 801305a:	4b7f      	ldr	r3, [pc, #508]	; (8013258 <_dtoa_r+0xbd0>)
 801305c:	f7ff bb28 	b.w	80126b0 <_dtoa_r+0x28>
 8013060:	6932      	ldr	r2, [r6, #16]
 8013062:	f106 010c 	add.w	r1, r6, #12
 8013066:	3202      	adds	r2, #2
 8013068:	0092      	lsls	r2, r2, #2
 801306a:	300c      	adds	r0, #12
 801306c:	f7fd fc2a 	bl	80108c4 <memcpy>
 8013070:	2201      	movs	r2, #1
 8013072:	4639      	mov	r1, r7
 8013074:	4628      	mov	r0, r5
 8013076:	f000 ffc5 	bl	8014004 <__lshift>
 801307a:	46b0      	mov	r8, r6
 801307c:	4606      	mov	r6, r0
 801307e:	9b03      	ldr	r3, [sp, #12]
 8013080:	3301      	adds	r3, #1
 8013082:	9308      	str	r3, [sp, #32]
 8013084:	9b03      	ldr	r3, [sp, #12]
 8013086:	444b      	add	r3, r9
 8013088:	930a      	str	r3, [sp, #40]	; 0x28
 801308a:	9b04      	ldr	r3, [sp, #16]
 801308c:	f003 0301 	and.w	r3, r3, #1
 8013090:	9309      	str	r3, [sp, #36]	; 0x24
 8013092:	9b08      	ldr	r3, [sp, #32]
 8013094:	4621      	mov	r1, r4
 8013096:	3b01      	subs	r3, #1
 8013098:	4658      	mov	r0, fp
 801309a:	9304      	str	r3, [sp, #16]
 801309c:	f7ff fa68 	bl	8012570 <quorem>
 80130a0:	4603      	mov	r3, r0
 80130a2:	4641      	mov	r1, r8
 80130a4:	3330      	adds	r3, #48	; 0x30
 80130a6:	9006      	str	r0, [sp, #24]
 80130a8:	4658      	mov	r0, fp
 80130aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80130ac:	f001 f81a 	bl	80140e4 <__mcmp>
 80130b0:	4632      	mov	r2, r6
 80130b2:	4681      	mov	r9, r0
 80130b4:	4621      	mov	r1, r4
 80130b6:	4628      	mov	r0, r5
 80130b8:	f001 f830 	bl	801411c <__mdiff>
 80130bc:	68c2      	ldr	r2, [r0, #12]
 80130be:	4607      	mov	r7, r0
 80130c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80130c2:	bb02      	cbnz	r2, 8013106 <_dtoa_r+0xa7e>
 80130c4:	4601      	mov	r1, r0
 80130c6:	4658      	mov	r0, fp
 80130c8:	f001 f80c 	bl	80140e4 <__mcmp>
 80130cc:	4602      	mov	r2, r0
 80130ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80130d0:	4639      	mov	r1, r7
 80130d2:	4628      	mov	r0, r5
 80130d4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80130d8:	f000 fd7c 	bl	8013bd4 <_Bfree>
 80130dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80130de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80130e0:	9f08      	ldr	r7, [sp, #32]
 80130e2:	ea43 0102 	orr.w	r1, r3, r2
 80130e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130e8:	430b      	orrs	r3, r1
 80130ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80130ec:	d10d      	bne.n	801310a <_dtoa_r+0xa82>
 80130ee:	2b39      	cmp	r3, #57	; 0x39
 80130f0:	d029      	beq.n	8013146 <_dtoa_r+0xabe>
 80130f2:	f1b9 0f00 	cmp.w	r9, #0
 80130f6:	dd01      	ble.n	80130fc <_dtoa_r+0xa74>
 80130f8:	9b06      	ldr	r3, [sp, #24]
 80130fa:	3331      	adds	r3, #49	; 0x31
 80130fc:	9a04      	ldr	r2, [sp, #16]
 80130fe:	7013      	strb	r3, [r2, #0]
 8013100:	e776      	b.n	8012ff0 <_dtoa_r+0x968>
 8013102:	4630      	mov	r0, r6
 8013104:	e7b9      	b.n	801307a <_dtoa_r+0x9f2>
 8013106:	2201      	movs	r2, #1
 8013108:	e7e2      	b.n	80130d0 <_dtoa_r+0xa48>
 801310a:	f1b9 0f00 	cmp.w	r9, #0
 801310e:	db06      	blt.n	801311e <_dtoa_r+0xa96>
 8013110:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013112:	ea41 0909 	orr.w	r9, r1, r9
 8013116:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013118:	ea59 0101 	orrs.w	r1, r9, r1
 801311c:	d120      	bne.n	8013160 <_dtoa_r+0xad8>
 801311e:	2a00      	cmp	r2, #0
 8013120:	ddec      	ble.n	80130fc <_dtoa_r+0xa74>
 8013122:	4659      	mov	r1, fp
 8013124:	2201      	movs	r2, #1
 8013126:	4628      	mov	r0, r5
 8013128:	9308      	str	r3, [sp, #32]
 801312a:	f000 ff6b 	bl	8014004 <__lshift>
 801312e:	4621      	mov	r1, r4
 8013130:	4683      	mov	fp, r0
 8013132:	f000 ffd7 	bl	80140e4 <__mcmp>
 8013136:	2800      	cmp	r0, #0
 8013138:	9b08      	ldr	r3, [sp, #32]
 801313a:	dc02      	bgt.n	8013142 <_dtoa_r+0xaba>
 801313c:	d1de      	bne.n	80130fc <_dtoa_r+0xa74>
 801313e:	07da      	lsls	r2, r3, #31
 8013140:	d5dc      	bpl.n	80130fc <_dtoa_r+0xa74>
 8013142:	2b39      	cmp	r3, #57	; 0x39
 8013144:	d1d8      	bne.n	80130f8 <_dtoa_r+0xa70>
 8013146:	2339      	movs	r3, #57	; 0x39
 8013148:	9a04      	ldr	r2, [sp, #16]
 801314a:	7013      	strb	r3, [r2, #0]
 801314c:	463b      	mov	r3, r7
 801314e:	461f      	mov	r7, r3
 8013150:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8013154:	3b01      	subs	r3, #1
 8013156:	2a39      	cmp	r2, #57	; 0x39
 8013158:	d050      	beq.n	80131fc <_dtoa_r+0xb74>
 801315a:	3201      	adds	r2, #1
 801315c:	701a      	strb	r2, [r3, #0]
 801315e:	e747      	b.n	8012ff0 <_dtoa_r+0x968>
 8013160:	2a00      	cmp	r2, #0
 8013162:	dd03      	ble.n	801316c <_dtoa_r+0xae4>
 8013164:	2b39      	cmp	r3, #57	; 0x39
 8013166:	d0ee      	beq.n	8013146 <_dtoa_r+0xabe>
 8013168:	3301      	adds	r3, #1
 801316a:	e7c7      	b.n	80130fc <_dtoa_r+0xa74>
 801316c:	9a08      	ldr	r2, [sp, #32]
 801316e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013170:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013174:	428a      	cmp	r2, r1
 8013176:	d02a      	beq.n	80131ce <_dtoa_r+0xb46>
 8013178:	4659      	mov	r1, fp
 801317a:	2300      	movs	r3, #0
 801317c:	220a      	movs	r2, #10
 801317e:	4628      	mov	r0, r5
 8013180:	f000 fd4a 	bl	8013c18 <__multadd>
 8013184:	45b0      	cmp	r8, r6
 8013186:	4683      	mov	fp, r0
 8013188:	f04f 0300 	mov.w	r3, #0
 801318c:	f04f 020a 	mov.w	r2, #10
 8013190:	4641      	mov	r1, r8
 8013192:	4628      	mov	r0, r5
 8013194:	d107      	bne.n	80131a6 <_dtoa_r+0xb1e>
 8013196:	f000 fd3f 	bl	8013c18 <__multadd>
 801319a:	4680      	mov	r8, r0
 801319c:	4606      	mov	r6, r0
 801319e:	9b08      	ldr	r3, [sp, #32]
 80131a0:	3301      	adds	r3, #1
 80131a2:	9308      	str	r3, [sp, #32]
 80131a4:	e775      	b.n	8013092 <_dtoa_r+0xa0a>
 80131a6:	f000 fd37 	bl	8013c18 <__multadd>
 80131aa:	4631      	mov	r1, r6
 80131ac:	4680      	mov	r8, r0
 80131ae:	2300      	movs	r3, #0
 80131b0:	220a      	movs	r2, #10
 80131b2:	4628      	mov	r0, r5
 80131b4:	f000 fd30 	bl	8013c18 <__multadd>
 80131b8:	4606      	mov	r6, r0
 80131ba:	e7f0      	b.n	801319e <_dtoa_r+0xb16>
 80131bc:	f1b9 0f00 	cmp.w	r9, #0
 80131c0:	bfcc      	ite	gt
 80131c2:	464f      	movgt	r7, r9
 80131c4:	2701      	movle	r7, #1
 80131c6:	f04f 0800 	mov.w	r8, #0
 80131ca:	9a03      	ldr	r2, [sp, #12]
 80131cc:	4417      	add	r7, r2
 80131ce:	4659      	mov	r1, fp
 80131d0:	2201      	movs	r2, #1
 80131d2:	4628      	mov	r0, r5
 80131d4:	9308      	str	r3, [sp, #32]
 80131d6:	f000 ff15 	bl	8014004 <__lshift>
 80131da:	4621      	mov	r1, r4
 80131dc:	4683      	mov	fp, r0
 80131de:	f000 ff81 	bl	80140e4 <__mcmp>
 80131e2:	2800      	cmp	r0, #0
 80131e4:	dcb2      	bgt.n	801314c <_dtoa_r+0xac4>
 80131e6:	d102      	bne.n	80131ee <_dtoa_r+0xb66>
 80131e8:	9b08      	ldr	r3, [sp, #32]
 80131ea:	07db      	lsls	r3, r3, #31
 80131ec:	d4ae      	bmi.n	801314c <_dtoa_r+0xac4>
 80131ee:	463b      	mov	r3, r7
 80131f0:	461f      	mov	r7, r3
 80131f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80131f6:	2a30      	cmp	r2, #48	; 0x30
 80131f8:	d0fa      	beq.n	80131f0 <_dtoa_r+0xb68>
 80131fa:	e6f9      	b.n	8012ff0 <_dtoa_r+0x968>
 80131fc:	9a03      	ldr	r2, [sp, #12]
 80131fe:	429a      	cmp	r2, r3
 8013200:	d1a5      	bne.n	801314e <_dtoa_r+0xac6>
 8013202:	2331      	movs	r3, #49	; 0x31
 8013204:	f10a 0a01 	add.w	sl, sl, #1
 8013208:	e779      	b.n	80130fe <_dtoa_r+0xa76>
 801320a:	4b14      	ldr	r3, [pc, #80]	; (801325c <_dtoa_r+0xbd4>)
 801320c:	f7ff baa8 	b.w	8012760 <_dtoa_r+0xd8>
 8013210:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013212:	2b00      	cmp	r3, #0
 8013214:	f47f aa81 	bne.w	801271a <_dtoa_r+0x92>
 8013218:	4b11      	ldr	r3, [pc, #68]	; (8013260 <_dtoa_r+0xbd8>)
 801321a:	f7ff baa1 	b.w	8012760 <_dtoa_r+0xd8>
 801321e:	f1b9 0f00 	cmp.w	r9, #0
 8013222:	dc03      	bgt.n	801322c <_dtoa_r+0xba4>
 8013224:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013226:	2b02      	cmp	r3, #2
 8013228:	f73f aecb 	bgt.w	8012fc2 <_dtoa_r+0x93a>
 801322c:	9f03      	ldr	r7, [sp, #12]
 801322e:	4621      	mov	r1, r4
 8013230:	4658      	mov	r0, fp
 8013232:	f7ff f99d 	bl	8012570 <quorem>
 8013236:	9a03      	ldr	r2, [sp, #12]
 8013238:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801323c:	f807 3b01 	strb.w	r3, [r7], #1
 8013240:	1aba      	subs	r2, r7, r2
 8013242:	4591      	cmp	r9, r2
 8013244:	ddba      	ble.n	80131bc <_dtoa_r+0xb34>
 8013246:	4659      	mov	r1, fp
 8013248:	2300      	movs	r3, #0
 801324a:	220a      	movs	r2, #10
 801324c:	4628      	mov	r0, r5
 801324e:	f000 fce3 	bl	8013c18 <__multadd>
 8013252:	4683      	mov	fp, r0
 8013254:	e7eb      	b.n	801322e <_dtoa_r+0xba6>
 8013256:	bf00      	nop
 8013258:	08015cb1 	.word	0x08015cb1
 801325c:	08015a20 	.word	0x08015a20
 8013260:	08015c49 	.word	0x08015c49

08013264 <__sflush_r>:
 8013264:	898a      	ldrh	r2, [r1, #12]
 8013266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013268:	4605      	mov	r5, r0
 801326a:	0710      	lsls	r0, r2, #28
 801326c:	460c      	mov	r4, r1
 801326e:	d457      	bmi.n	8013320 <__sflush_r+0xbc>
 8013270:	684b      	ldr	r3, [r1, #4]
 8013272:	2b00      	cmp	r3, #0
 8013274:	dc04      	bgt.n	8013280 <__sflush_r+0x1c>
 8013276:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013278:	2b00      	cmp	r3, #0
 801327a:	dc01      	bgt.n	8013280 <__sflush_r+0x1c>
 801327c:	2000      	movs	r0, #0
 801327e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013282:	2e00      	cmp	r6, #0
 8013284:	d0fa      	beq.n	801327c <__sflush_r+0x18>
 8013286:	2300      	movs	r3, #0
 8013288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801328c:	682f      	ldr	r7, [r5, #0]
 801328e:	602b      	str	r3, [r5, #0]
 8013290:	d032      	beq.n	80132f8 <__sflush_r+0x94>
 8013292:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013294:	89a3      	ldrh	r3, [r4, #12]
 8013296:	075a      	lsls	r2, r3, #29
 8013298:	d505      	bpl.n	80132a6 <__sflush_r+0x42>
 801329a:	6863      	ldr	r3, [r4, #4]
 801329c:	1ac0      	subs	r0, r0, r3
 801329e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80132a0:	b10b      	cbz	r3, 80132a6 <__sflush_r+0x42>
 80132a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80132a4:	1ac0      	subs	r0, r0, r3
 80132a6:	2300      	movs	r3, #0
 80132a8:	4602      	mov	r2, r0
 80132aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80132ac:	4628      	mov	r0, r5
 80132ae:	6a21      	ldr	r1, [r4, #32]
 80132b0:	47b0      	blx	r6
 80132b2:	1c43      	adds	r3, r0, #1
 80132b4:	89a3      	ldrh	r3, [r4, #12]
 80132b6:	d106      	bne.n	80132c6 <__sflush_r+0x62>
 80132b8:	6829      	ldr	r1, [r5, #0]
 80132ba:	291d      	cmp	r1, #29
 80132bc:	d82c      	bhi.n	8013318 <__sflush_r+0xb4>
 80132be:	4a29      	ldr	r2, [pc, #164]	; (8013364 <__sflush_r+0x100>)
 80132c0:	40ca      	lsrs	r2, r1
 80132c2:	07d6      	lsls	r6, r2, #31
 80132c4:	d528      	bpl.n	8013318 <__sflush_r+0xb4>
 80132c6:	2200      	movs	r2, #0
 80132c8:	6062      	str	r2, [r4, #4]
 80132ca:	6922      	ldr	r2, [r4, #16]
 80132cc:	04d9      	lsls	r1, r3, #19
 80132ce:	6022      	str	r2, [r4, #0]
 80132d0:	d504      	bpl.n	80132dc <__sflush_r+0x78>
 80132d2:	1c42      	adds	r2, r0, #1
 80132d4:	d101      	bne.n	80132da <__sflush_r+0x76>
 80132d6:	682b      	ldr	r3, [r5, #0]
 80132d8:	b903      	cbnz	r3, 80132dc <__sflush_r+0x78>
 80132da:	6560      	str	r0, [r4, #84]	; 0x54
 80132dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80132de:	602f      	str	r7, [r5, #0]
 80132e0:	2900      	cmp	r1, #0
 80132e2:	d0cb      	beq.n	801327c <__sflush_r+0x18>
 80132e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80132e8:	4299      	cmp	r1, r3
 80132ea:	d002      	beq.n	80132f2 <__sflush_r+0x8e>
 80132ec:	4628      	mov	r0, r5
 80132ee:	f7fd faff 	bl	80108f0 <_free_r>
 80132f2:	2000      	movs	r0, #0
 80132f4:	6360      	str	r0, [r4, #52]	; 0x34
 80132f6:	e7c2      	b.n	801327e <__sflush_r+0x1a>
 80132f8:	6a21      	ldr	r1, [r4, #32]
 80132fa:	2301      	movs	r3, #1
 80132fc:	4628      	mov	r0, r5
 80132fe:	47b0      	blx	r6
 8013300:	1c41      	adds	r1, r0, #1
 8013302:	d1c7      	bne.n	8013294 <__sflush_r+0x30>
 8013304:	682b      	ldr	r3, [r5, #0]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d0c4      	beq.n	8013294 <__sflush_r+0x30>
 801330a:	2b1d      	cmp	r3, #29
 801330c:	d001      	beq.n	8013312 <__sflush_r+0xae>
 801330e:	2b16      	cmp	r3, #22
 8013310:	d101      	bne.n	8013316 <__sflush_r+0xb2>
 8013312:	602f      	str	r7, [r5, #0]
 8013314:	e7b2      	b.n	801327c <__sflush_r+0x18>
 8013316:	89a3      	ldrh	r3, [r4, #12]
 8013318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801331c:	81a3      	strh	r3, [r4, #12]
 801331e:	e7ae      	b.n	801327e <__sflush_r+0x1a>
 8013320:	690f      	ldr	r7, [r1, #16]
 8013322:	2f00      	cmp	r7, #0
 8013324:	d0aa      	beq.n	801327c <__sflush_r+0x18>
 8013326:	0793      	lsls	r3, r2, #30
 8013328:	bf18      	it	ne
 801332a:	2300      	movne	r3, #0
 801332c:	680e      	ldr	r6, [r1, #0]
 801332e:	bf08      	it	eq
 8013330:	694b      	ldreq	r3, [r1, #20]
 8013332:	1bf6      	subs	r6, r6, r7
 8013334:	600f      	str	r7, [r1, #0]
 8013336:	608b      	str	r3, [r1, #8]
 8013338:	2e00      	cmp	r6, #0
 801333a:	dd9f      	ble.n	801327c <__sflush_r+0x18>
 801333c:	4633      	mov	r3, r6
 801333e:	463a      	mov	r2, r7
 8013340:	4628      	mov	r0, r5
 8013342:	6a21      	ldr	r1, [r4, #32]
 8013344:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8013348:	47e0      	blx	ip
 801334a:	2800      	cmp	r0, #0
 801334c:	dc06      	bgt.n	801335c <__sflush_r+0xf8>
 801334e:	89a3      	ldrh	r3, [r4, #12]
 8013350:	f04f 30ff 	mov.w	r0, #4294967295
 8013354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013358:	81a3      	strh	r3, [r4, #12]
 801335a:	e790      	b.n	801327e <__sflush_r+0x1a>
 801335c:	4407      	add	r7, r0
 801335e:	1a36      	subs	r6, r6, r0
 8013360:	e7ea      	b.n	8013338 <__sflush_r+0xd4>
 8013362:	bf00      	nop
 8013364:	20400001 	.word	0x20400001

08013368 <_fflush_r>:
 8013368:	b538      	push	{r3, r4, r5, lr}
 801336a:	690b      	ldr	r3, [r1, #16]
 801336c:	4605      	mov	r5, r0
 801336e:	460c      	mov	r4, r1
 8013370:	b913      	cbnz	r3, 8013378 <_fflush_r+0x10>
 8013372:	2500      	movs	r5, #0
 8013374:	4628      	mov	r0, r5
 8013376:	bd38      	pop	{r3, r4, r5, pc}
 8013378:	b118      	cbz	r0, 8013382 <_fflush_r+0x1a>
 801337a:	6983      	ldr	r3, [r0, #24]
 801337c:	b90b      	cbnz	r3, 8013382 <_fflush_r+0x1a>
 801337e:	f7fd f9cb 	bl	8010718 <__sinit>
 8013382:	4b14      	ldr	r3, [pc, #80]	; (80133d4 <_fflush_r+0x6c>)
 8013384:	429c      	cmp	r4, r3
 8013386:	d11b      	bne.n	80133c0 <_fflush_r+0x58>
 8013388:	686c      	ldr	r4, [r5, #4]
 801338a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d0ef      	beq.n	8013372 <_fflush_r+0xa>
 8013392:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013394:	07d0      	lsls	r0, r2, #31
 8013396:	d404      	bmi.n	80133a2 <_fflush_r+0x3a>
 8013398:	0599      	lsls	r1, r3, #22
 801339a:	d402      	bmi.n	80133a2 <_fflush_r+0x3a>
 801339c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801339e:	f7fd fa7e 	bl	801089e <__retarget_lock_acquire_recursive>
 80133a2:	4628      	mov	r0, r5
 80133a4:	4621      	mov	r1, r4
 80133a6:	f7ff ff5d 	bl	8013264 <__sflush_r>
 80133aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80133ac:	4605      	mov	r5, r0
 80133ae:	07da      	lsls	r2, r3, #31
 80133b0:	d4e0      	bmi.n	8013374 <_fflush_r+0xc>
 80133b2:	89a3      	ldrh	r3, [r4, #12]
 80133b4:	059b      	lsls	r3, r3, #22
 80133b6:	d4dd      	bmi.n	8013374 <_fflush_r+0xc>
 80133b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80133ba:	f7fd fa71 	bl	80108a0 <__retarget_lock_release_recursive>
 80133be:	e7d9      	b.n	8013374 <_fflush_r+0xc>
 80133c0:	4b05      	ldr	r3, [pc, #20]	; (80133d8 <_fflush_r+0x70>)
 80133c2:	429c      	cmp	r4, r3
 80133c4:	d101      	bne.n	80133ca <_fflush_r+0x62>
 80133c6:	68ac      	ldr	r4, [r5, #8]
 80133c8:	e7df      	b.n	801338a <_fflush_r+0x22>
 80133ca:	4b04      	ldr	r3, [pc, #16]	; (80133dc <_fflush_r+0x74>)
 80133cc:	429c      	cmp	r4, r3
 80133ce:	bf08      	it	eq
 80133d0:	68ec      	ldreq	r4, [r5, #12]
 80133d2:	e7da      	b.n	801338a <_fflush_r+0x22>
 80133d4:	080159cc 	.word	0x080159cc
 80133d8:	080159ec 	.word	0x080159ec
 80133dc:	080159ac 	.word	0x080159ac

080133e0 <fiprintf>:
 80133e0:	b40e      	push	{r1, r2, r3}
 80133e2:	b503      	push	{r0, r1, lr}
 80133e4:	4601      	mov	r1, r0
 80133e6:	ab03      	add	r3, sp, #12
 80133e8:	4805      	ldr	r0, [pc, #20]	; (8013400 <fiprintf+0x20>)
 80133ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80133ee:	6800      	ldr	r0, [r0, #0]
 80133f0:	9301      	str	r3, [sp, #4]
 80133f2:	f001 f9ff 	bl	80147f4 <_vfiprintf_r>
 80133f6:	b002      	add	sp, #8
 80133f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80133fc:	b003      	add	sp, #12
 80133fe:	4770      	bx	lr
 8013400:	20000224 	.word	0x20000224

08013404 <rshift>:
 8013404:	6903      	ldr	r3, [r0, #16]
 8013406:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801340a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801340e:	f100 0414 	add.w	r4, r0, #20
 8013412:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013416:	dd46      	ble.n	80134a6 <rshift+0xa2>
 8013418:	f011 011f 	ands.w	r1, r1, #31
 801341c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013420:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013424:	d10c      	bne.n	8013440 <rshift+0x3c>
 8013426:	4629      	mov	r1, r5
 8013428:	f100 0710 	add.w	r7, r0, #16
 801342c:	42b1      	cmp	r1, r6
 801342e:	d335      	bcc.n	801349c <rshift+0x98>
 8013430:	1a9b      	subs	r3, r3, r2
 8013432:	009b      	lsls	r3, r3, #2
 8013434:	1eea      	subs	r2, r5, #3
 8013436:	4296      	cmp	r6, r2
 8013438:	bf38      	it	cc
 801343a:	2300      	movcc	r3, #0
 801343c:	4423      	add	r3, r4
 801343e:	e015      	b.n	801346c <rshift+0x68>
 8013440:	46a1      	mov	r9, r4
 8013442:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013446:	f1c1 0820 	rsb	r8, r1, #32
 801344a:	40cf      	lsrs	r7, r1
 801344c:	f105 0e04 	add.w	lr, r5, #4
 8013450:	4576      	cmp	r6, lr
 8013452:	46f4      	mov	ip, lr
 8013454:	d816      	bhi.n	8013484 <rshift+0x80>
 8013456:	1a9a      	subs	r2, r3, r2
 8013458:	0092      	lsls	r2, r2, #2
 801345a:	3a04      	subs	r2, #4
 801345c:	3501      	adds	r5, #1
 801345e:	42ae      	cmp	r6, r5
 8013460:	bf38      	it	cc
 8013462:	2200      	movcc	r2, #0
 8013464:	18a3      	adds	r3, r4, r2
 8013466:	50a7      	str	r7, [r4, r2]
 8013468:	b107      	cbz	r7, 801346c <rshift+0x68>
 801346a:	3304      	adds	r3, #4
 801346c:	42a3      	cmp	r3, r4
 801346e:	eba3 0204 	sub.w	r2, r3, r4
 8013472:	bf08      	it	eq
 8013474:	2300      	moveq	r3, #0
 8013476:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801347a:	6102      	str	r2, [r0, #16]
 801347c:	bf08      	it	eq
 801347e:	6143      	streq	r3, [r0, #20]
 8013480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013484:	f8dc c000 	ldr.w	ip, [ip]
 8013488:	fa0c fc08 	lsl.w	ip, ip, r8
 801348c:	ea4c 0707 	orr.w	r7, ip, r7
 8013490:	f849 7b04 	str.w	r7, [r9], #4
 8013494:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013498:	40cf      	lsrs	r7, r1
 801349a:	e7d9      	b.n	8013450 <rshift+0x4c>
 801349c:	f851 cb04 	ldr.w	ip, [r1], #4
 80134a0:	f847 cf04 	str.w	ip, [r7, #4]!
 80134a4:	e7c2      	b.n	801342c <rshift+0x28>
 80134a6:	4623      	mov	r3, r4
 80134a8:	e7e0      	b.n	801346c <rshift+0x68>

080134aa <__hexdig_fun>:
 80134aa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80134ae:	2b09      	cmp	r3, #9
 80134b0:	d802      	bhi.n	80134b8 <__hexdig_fun+0xe>
 80134b2:	3820      	subs	r0, #32
 80134b4:	b2c0      	uxtb	r0, r0
 80134b6:	4770      	bx	lr
 80134b8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80134bc:	2b05      	cmp	r3, #5
 80134be:	d801      	bhi.n	80134c4 <__hexdig_fun+0x1a>
 80134c0:	3847      	subs	r0, #71	; 0x47
 80134c2:	e7f7      	b.n	80134b4 <__hexdig_fun+0xa>
 80134c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80134c8:	2b05      	cmp	r3, #5
 80134ca:	d801      	bhi.n	80134d0 <__hexdig_fun+0x26>
 80134cc:	3827      	subs	r0, #39	; 0x27
 80134ce:	e7f1      	b.n	80134b4 <__hexdig_fun+0xa>
 80134d0:	2000      	movs	r0, #0
 80134d2:	4770      	bx	lr

080134d4 <__gethex>:
 80134d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134d8:	b08b      	sub	sp, #44	; 0x2c
 80134da:	9305      	str	r3, [sp, #20]
 80134dc:	4bb2      	ldr	r3, [pc, #712]	; (80137a8 <__gethex+0x2d4>)
 80134de:	9002      	str	r0, [sp, #8]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	468b      	mov	fp, r1
 80134e4:	4618      	mov	r0, r3
 80134e6:	4690      	mov	r8, r2
 80134e8:	9303      	str	r3, [sp, #12]
 80134ea:	f7ec fea1 	bl	8000230 <strlen>
 80134ee:	4682      	mov	sl, r0
 80134f0:	9b03      	ldr	r3, [sp, #12]
 80134f2:	f8db 2000 	ldr.w	r2, [fp]
 80134f6:	4403      	add	r3, r0
 80134f8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80134fc:	9306      	str	r3, [sp, #24]
 80134fe:	1c93      	adds	r3, r2, #2
 8013500:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013504:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013508:	32fe      	adds	r2, #254	; 0xfe
 801350a:	18d1      	adds	r1, r2, r3
 801350c:	461f      	mov	r7, r3
 801350e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013512:	9101      	str	r1, [sp, #4]
 8013514:	2830      	cmp	r0, #48	; 0x30
 8013516:	d0f8      	beq.n	801350a <__gethex+0x36>
 8013518:	f7ff ffc7 	bl	80134aa <__hexdig_fun>
 801351c:	4604      	mov	r4, r0
 801351e:	2800      	cmp	r0, #0
 8013520:	d13a      	bne.n	8013598 <__gethex+0xc4>
 8013522:	4652      	mov	r2, sl
 8013524:	4638      	mov	r0, r7
 8013526:	9903      	ldr	r1, [sp, #12]
 8013528:	f001 fab0 	bl	8014a8c <strncmp>
 801352c:	4605      	mov	r5, r0
 801352e:	2800      	cmp	r0, #0
 8013530:	d166      	bne.n	8013600 <__gethex+0x12c>
 8013532:	f817 000a 	ldrb.w	r0, [r7, sl]
 8013536:	eb07 060a 	add.w	r6, r7, sl
 801353a:	f7ff ffb6 	bl	80134aa <__hexdig_fun>
 801353e:	2800      	cmp	r0, #0
 8013540:	d060      	beq.n	8013604 <__gethex+0x130>
 8013542:	4633      	mov	r3, r6
 8013544:	7818      	ldrb	r0, [r3, #0]
 8013546:	461f      	mov	r7, r3
 8013548:	2830      	cmp	r0, #48	; 0x30
 801354a:	f103 0301 	add.w	r3, r3, #1
 801354e:	d0f9      	beq.n	8013544 <__gethex+0x70>
 8013550:	f7ff ffab 	bl	80134aa <__hexdig_fun>
 8013554:	2301      	movs	r3, #1
 8013556:	fab0 f480 	clz	r4, r0
 801355a:	4635      	mov	r5, r6
 801355c:	0964      	lsrs	r4, r4, #5
 801355e:	9301      	str	r3, [sp, #4]
 8013560:	463a      	mov	r2, r7
 8013562:	4616      	mov	r6, r2
 8013564:	7830      	ldrb	r0, [r6, #0]
 8013566:	3201      	adds	r2, #1
 8013568:	f7ff ff9f 	bl	80134aa <__hexdig_fun>
 801356c:	2800      	cmp	r0, #0
 801356e:	d1f8      	bne.n	8013562 <__gethex+0x8e>
 8013570:	4652      	mov	r2, sl
 8013572:	4630      	mov	r0, r6
 8013574:	9903      	ldr	r1, [sp, #12]
 8013576:	f001 fa89 	bl	8014a8c <strncmp>
 801357a:	b980      	cbnz	r0, 801359e <__gethex+0xca>
 801357c:	b94d      	cbnz	r5, 8013592 <__gethex+0xbe>
 801357e:	eb06 050a 	add.w	r5, r6, sl
 8013582:	462a      	mov	r2, r5
 8013584:	4616      	mov	r6, r2
 8013586:	7830      	ldrb	r0, [r6, #0]
 8013588:	3201      	adds	r2, #1
 801358a:	f7ff ff8e 	bl	80134aa <__hexdig_fun>
 801358e:	2800      	cmp	r0, #0
 8013590:	d1f8      	bne.n	8013584 <__gethex+0xb0>
 8013592:	1bad      	subs	r5, r5, r6
 8013594:	00ad      	lsls	r5, r5, #2
 8013596:	e004      	b.n	80135a2 <__gethex+0xce>
 8013598:	2400      	movs	r4, #0
 801359a:	4625      	mov	r5, r4
 801359c:	e7e0      	b.n	8013560 <__gethex+0x8c>
 801359e:	2d00      	cmp	r5, #0
 80135a0:	d1f7      	bne.n	8013592 <__gethex+0xbe>
 80135a2:	7833      	ldrb	r3, [r6, #0]
 80135a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80135a8:	2b50      	cmp	r3, #80	; 0x50
 80135aa:	d139      	bne.n	8013620 <__gethex+0x14c>
 80135ac:	7873      	ldrb	r3, [r6, #1]
 80135ae:	2b2b      	cmp	r3, #43	; 0x2b
 80135b0:	d02a      	beq.n	8013608 <__gethex+0x134>
 80135b2:	2b2d      	cmp	r3, #45	; 0x2d
 80135b4:	d02c      	beq.n	8013610 <__gethex+0x13c>
 80135b6:	f04f 0900 	mov.w	r9, #0
 80135ba:	1c71      	adds	r1, r6, #1
 80135bc:	7808      	ldrb	r0, [r1, #0]
 80135be:	f7ff ff74 	bl	80134aa <__hexdig_fun>
 80135c2:	1e43      	subs	r3, r0, #1
 80135c4:	b2db      	uxtb	r3, r3
 80135c6:	2b18      	cmp	r3, #24
 80135c8:	d82a      	bhi.n	8013620 <__gethex+0x14c>
 80135ca:	f1a0 0210 	sub.w	r2, r0, #16
 80135ce:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80135d2:	f7ff ff6a 	bl	80134aa <__hexdig_fun>
 80135d6:	1e43      	subs	r3, r0, #1
 80135d8:	b2db      	uxtb	r3, r3
 80135da:	2b18      	cmp	r3, #24
 80135dc:	d91b      	bls.n	8013616 <__gethex+0x142>
 80135de:	f1b9 0f00 	cmp.w	r9, #0
 80135e2:	d000      	beq.n	80135e6 <__gethex+0x112>
 80135e4:	4252      	negs	r2, r2
 80135e6:	4415      	add	r5, r2
 80135e8:	f8cb 1000 	str.w	r1, [fp]
 80135ec:	b1d4      	cbz	r4, 8013624 <__gethex+0x150>
 80135ee:	9b01      	ldr	r3, [sp, #4]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	bf14      	ite	ne
 80135f4:	2700      	movne	r7, #0
 80135f6:	2706      	moveq	r7, #6
 80135f8:	4638      	mov	r0, r7
 80135fa:	b00b      	add	sp, #44	; 0x2c
 80135fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013600:	463e      	mov	r6, r7
 8013602:	4625      	mov	r5, r4
 8013604:	2401      	movs	r4, #1
 8013606:	e7cc      	b.n	80135a2 <__gethex+0xce>
 8013608:	f04f 0900 	mov.w	r9, #0
 801360c:	1cb1      	adds	r1, r6, #2
 801360e:	e7d5      	b.n	80135bc <__gethex+0xe8>
 8013610:	f04f 0901 	mov.w	r9, #1
 8013614:	e7fa      	b.n	801360c <__gethex+0x138>
 8013616:	230a      	movs	r3, #10
 8013618:	fb03 0202 	mla	r2, r3, r2, r0
 801361c:	3a10      	subs	r2, #16
 801361e:	e7d6      	b.n	80135ce <__gethex+0xfa>
 8013620:	4631      	mov	r1, r6
 8013622:	e7e1      	b.n	80135e8 <__gethex+0x114>
 8013624:	4621      	mov	r1, r4
 8013626:	1bf3      	subs	r3, r6, r7
 8013628:	3b01      	subs	r3, #1
 801362a:	2b07      	cmp	r3, #7
 801362c:	dc0a      	bgt.n	8013644 <__gethex+0x170>
 801362e:	9802      	ldr	r0, [sp, #8]
 8013630:	f000 fa90 	bl	8013b54 <_Balloc>
 8013634:	4604      	mov	r4, r0
 8013636:	b940      	cbnz	r0, 801364a <__gethex+0x176>
 8013638:	4602      	mov	r2, r0
 801363a:	21de      	movs	r1, #222	; 0xde
 801363c:	4b5b      	ldr	r3, [pc, #364]	; (80137ac <__gethex+0x2d8>)
 801363e:	485c      	ldr	r0, [pc, #368]	; (80137b0 <__gethex+0x2dc>)
 8013640:	f7fe ff68 	bl	8012514 <__assert_func>
 8013644:	3101      	adds	r1, #1
 8013646:	105b      	asrs	r3, r3, #1
 8013648:	e7ef      	b.n	801362a <__gethex+0x156>
 801364a:	f04f 0b00 	mov.w	fp, #0
 801364e:	f100 0914 	add.w	r9, r0, #20
 8013652:	f1ca 0301 	rsb	r3, sl, #1
 8013656:	f8cd 9010 	str.w	r9, [sp, #16]
 801365a:	f8cd b004 	str.w	fp, [sp, #4]
 801365e:	9308      	str	r3, [sp, #32]
 8013660:	42b7      	cmp	r7, r6
 8013662:	d33f      	bcc.n	80136e4 <__gethex+0x210>
 8013664:	9f04      	ldr	r7, [sp, #16]
 8013666:	9b01      	ldr	r3, [sp, #4]
 8013668:	f847 3b04 	str.w	r3, [r7], #4
 801366c:	eba7 0709 	sub.w	r7, r7, r9
 8013670:	10bf      	asrs	r7, r7, #2
 8013672:	6127      	str	r7, [r4, #16]
 8013674:	4618      	mov	r0, r3
 8013676:	f000 fb5f 	bl	8013d38 <__hi0bits>
 801367a:	017f      	lsls	r7, r7, #5
 801367c:	f8d8 6000 	ldr.w	r6, [r8]
 8013680:	1a3f      	subs	r7, r7, r0
 8013682:	42b7      	cmp	r7, r6
 8013684:	dd62      	ble.n	801374c <__gethex+0x278>
 8013686:	1bbf      	subs	r7, r7, r6
 8013688:	4639      	mov	r1, r7
 801368a:	4620      	mov	r0, r4
 801368c:	f000 fef9 	bl	8014482 <__any_on>
 8013690:	4682      	mov	sl, r0
 8013692:	b1a8      	cbz	r0, 80136c0 <__gethex+0x1ec>
 8013694:	f04f 0a01 	mov.w	sl, #1
 8013698:	1e7b      	subs	r3, r7, #1
 801369a:	1159      	asrs	r1, r3, #5
 801369c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80136a0:	f003 021f 	and.w	r2, r3, #31
 80136a4:	fa0a f202 	lsl.w	r2, sl, r2
 80136a8:	420a      	tst	r2, r1
 80136aa:	d009      	beq.n	80136c0 <__gethex+0x1ec>
 80136ac:	4553      	cmp	r3, sl
 80136ae:	dd05      	ble.n	80136bc <__gethex+0x1e8>
 80136b0:	4620      	mov	r0, r4
 80136b2:	1eb9      	subs	r1, r7, #2
 80136b4:	f000 fee5 	bl	8014482 <__any_on>
 80136b8:	2800      	cmp	r0, #0
 80136ba:	d144      	bne.n	8013746 <__gethex+0x272>
 80136bc:	f04f 0a02 	mov.w	sl, #2
 80136c0:	4639      	mov	r1, r7
 80136c2:	4620      	mov	r0, r4
 80136c4:	f7ff fe9e 	bl	8013404 <rshift>
 80136c8:	443d      	add	r5, r7
 80136ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80136ce:	42ab      	cmp	r3, r5
 80136d0:	da4a      	bge.n	8013768 <__gethex+0x294>
 80136d2:	4621      	mov	r1, r4
 80136d4:	9802      	ldr	r0, [sp, #8]
 80136d6:	f000 fa7d 	bl	8013bd4 <_Bfree>
 80136da:	2300      	movs	r3, #0
 80136dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80136de:	27a3      	movs	r7, #163	; 0xa3
 80136e0:	6013      	str	r3, [r2, #0]
 80136e2:	e789      	b.n	80135f8 <__gethex+0x124>
 80136e4:	1e73      	subs	r3, r6, #1
 80136e6:	9a06      	ldr	r2, [sp, #24]
 80136e8:	9307      	str	r3, [sp, #28]
 80136ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80136ee:	4293      	cmp	r3, r2
 80136f0:	d019      	beq.n	8013726 <__gethex+0x252>
 80136f2:	f1bb 0f20 	cmp.w	fp, #32
 80136f6:	d107      	bne.n	8013708 <__gethex+0x234>
 80136f8:	9b04      	ldr	r3, [sp, #16]
 80136fa:	9a01      	ldr	r2, [sp, #4]
 80136fc:	f843 2b04 	str.w	r2, [r3], #4
 8013700:	9304      	str	r3, [sp, #16]
 8013702:	2300      	movs	r3, #0
 8013704:	469b      	mov	fp, r3
 8013706:	9301      	str	r3, [sp, #4]
 8013708:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801370c:	f7ff fecd 	bl	80134aa <__hexdig_fun>
 8013710:	9b01      	ldr	r3, [sp, #4]
 8013712:	f000 000f 	and.w	r0, r0, #15
 8013716:	fa00 f00b 	lsl.w	r0, r0, fp
 801371a:	4303      	orrs	r3, r0
 801371c:	9301      	str	r3, [sp, #4]
 801371e:	f10b 0b04 	add.w	fp, fp, #4
 8013722:	9b07      	ldr	r3, [sp, #28]
 8013724:	e00d      	b.n	8013742 <__gethex+0x26e>
 8013726:	9a08      	ldr	r2, [sp, #32]
 8013728:	1e73      	subs	r3, r6, #1
 801372a:	4413      	add	r3, r2
 801372c:	42bb      	cmp	r3, r7
 801372e:	d3e0      	bcc.n	80136f2 <__gethex+0x21e>
 8013730:	4618      	mov	r0, r3
 8013732:	4652      	mov	r2, sl
 8013734:	9903      	ldr	r1, [sp, #12]
 8013736:	9309      	str	r3, [sp, #36]	; 0x24
 8013738:	f001 f9a8 	bl	8014a8c <strncmp>
 801373c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801373e:	2800      	cmp	r0, #0
 8013740:	d1d7      	bne.n	80136f2 <__gethex+0x21e>
 8013742:	461e      	mov	r6, r3
 8013744:	e78c      	b.n	8013660 <__gethex+0x18c>
 8013746:	f04f 0a03 	mov.w	sl, #3
 801374a:	e7b9      	b.n	80136c0 <__gethex+0x1ec>
 801374c:	da09      	bge.n	8013762 <__gethex+0x28e>
 801374e:	1bf7      	subs	r7, r6, r7
 8013750:	4621      	mov	r1, r4
 8013752:	463a      	mov	r2, r7
 8013754:	9802      	ldr	r0, [sp, #8]
 8013756:	f000 fc55 	bl	8014004 <__lshift>
 801375a:	4604      	mov	r4, r0
 801375c:	1bed      	subs	r5, r5, r7
 801375e:	f100 0914 	add.w	r9, r0, #20
 8013762:	f04f 0a00 	mov.w	sl, #0
 8013766:	e7b0      	b.n	80136ca <__gethex+0x1f6>
 8013768:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801376c:	42a8      	cmp	r0, r5
 801376e:	dd72      	ble.n	8013856 <__gethex+0x382>
 8013770:	1b45      	subs	r5, r0, r5
 8013772:	42ae      	cmp	r6, r5
 8013774:	dc35      	bgt.n	80137e2 <__gethex+0x30e>
 8013776:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801377a:	2b02      	cmp	r3, #2
 801377c:	d029      	beq.n	80137d2 <__gethex+0x2fe>
 801377e:	2b03      	cmp	r3, #3
 8013780:	d02b      	beq.n	80137da <__gethex+0x306>
 8013782:	2b01      	cmp	r3, #1
 8013784:	d11c      	bne.n	80137c0 <__gethex+0x2ec>
 8013786:	42ae      	cmp	r6, r5
 8013788:	d11a      	bne.n	80137c0 <__gethex+0x2ec>
 801378a:	2e01      	cmp	r6, #1
 801378c:	d112      	bne.n	80137b4 <__gethex+0x2e0>
 801378e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013792:	9a05      	ldr	r2, [sp, #20]
 8013794:	2762      	movs	r7, #98	; 0x62
 8013796:	6013      	str	r3, [r2, #0]
 8013798:	2301      	movs	r3, #1
 801379a:	6123      	str	r3, [r4, #16]
 801379c:	f8c9 3000 	str.w	r3, [r9]
 80137a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80137a2:	601c      	str	r4, [r3, #0]
 80137a4:	e728      	b.n	80135f8 <__gethex+0x124>
 80137a6:	bf00      	nop
 80137a8:	08015d28 	.word	0x08015d28
 80137ac:	08015cb1 	.word	0x08015cb1
 80137b0:	08015cc2 	.word	0x08015cc2
 80137b4:	4620      	mov	r0, r4
 80137b6:	1e71      	subs	r1, r6, #1
 80137b8:	f000 fe63 	bl	8014482 <__any_on>
 80137bc:	2800      	cmp	r0, #0
 80137be:	d1e6      	bne.n	801378e <__gethex+0x2ba>
 80137c0:	4621      	mov	r1, r4
 80137c2:	9802      	ldr	r0, [sp, #8]
 80137c4:	f000 fa06 	bl	8013bd4 <_Bfree>
 80137c8:	2300      	movs	r3, #0
 80137ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80137cc:	2750      	movs	r7, #80	; 0x50
 80137ce:	6013      	str	r3, [r2, #0]
 80137d0:	e712      	b.n	80135f8 <__gethex+0x124>
 80137d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d1f3      	bne.n	80137c0 <__gethex+0x2ec>
 80137d8:	e7d9      	b.n	801378e <__gethex+0x2ba>
 80137da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d1d6      	bne.n	801378e <__gethex+0x2ba>
 80137e0:	e7ee      	b.n	80137c0 <__gethex+0x2ec>
 80137e2:	1e6f      	subs	r7, r5, #1
 80137e4:	f1ba 0f00 	cmp.w	sl, #0
 80137e8:	d132      	bne.n	8013850 <__gethex+0x37c>
 80137ea:	b127      	cbz	r7, 80137f6 <__gethex+0x322>
 80137ec:	4639      	mov	r1, r7
 80137ee:	4620      	mov	r0, r4
 80137f0:	f000 fe47 	bl	8014482 <__any_on>
 80137f4:	4682      	mov	sl, r0
 80137f6:	2101      	movs	r1, #1
 80137f8:	117b      	asrs	r3, r7, #5
 80137fa:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80137fe:	f007 071f 	and.w	r7, r7, #31
 8013802:	fa01 f707 	lsl.w	r7, r1, r7
 8013806:	421f      	tst	r7, r3
 8013808:	f04f 0702 	mov.w	r7, #2
 801380c:	4629      	mov	r1, r5
 801380e:	4620      	mov	r0, r4
 8013810:	bf18      	it	ne
 8013812:	f04a 0a02 	orrne.w	sl, sl, #2
 8013816:	1b76      	subs	r6, r6, r5
 8013818:	f7ff fdf4 	bl	8013404 <rshift>
 801381c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013820:	f1ba 0f00 	cmp.w	sl, #0
 8013824:	d048      	beq.n	80138b8 <__gethex+0x3e4>
 8013826:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801382a:	2b02      	cmp	r3, #2
 801382c:	d015      	beq.n	801385a <__gethex+0x386>
 801382e:	2b03      	cmp	r3, #3
 8013830:	d017      	beq.n	8013862 <__gethex+0x38e>
 8013832:	2b01      	cmp	r3, #1
 8013834:	d109      	bne.n	801384a <__gethex+0x376>
 8013836:	f01a 0f02 	tst.w	sl, #2
 801383a:	d006      	beq.n	801384a <__gethex+0x376>
 801383c:	f8d9 0000 	ldr.w	r0, [r9]
 8013840:	ea4a 0a00 	orr.w	sl, sl, r0
 8013844:	f01a 0f01 	tst.w	sl, #1
 8013848:	d10e      	bne.n	8013868 <__gethex+0x394>
 801384a:	f047 0710 	orr.w	r7, r7, #16
 801384e:	e033      	b.n	80138b8 <__gethex+0x3e4>
 8013850:	f04f 0a01 	mov.w	sl, #1
 8013854:	e7cf      	b.n	80137f6 <__gethex+0x322>
 8013856:	2701      	movs	r7, #1
 8013858:	e7e2      	b.n	8013820 <__gethex+0x34c>
 801385a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801385c:	f1c3 0301 	rsb	r3, r3, #1
 8013860:	9315      	str	r3, [sp, #84]	; 0x54
 8013862:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013864:	2b00      	cmp	r3, #0
 8013866:	d0f0      	beq.n	801384a <__gethex+0x376>
 8013868:	f04f 0c00 	mov.w	ip, #0
 801386c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013870:	f104 0314 	add.w	r3, r4, #20
 8013874:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013878:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801387c:	4618      	mov	r0, r3
 801387e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013882:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013886:	d01c      	beq.n	80138c2 <__gethex+0x3ee>
 8013888:	3201      	adds	r2, #1
 801388a:	6002      	str	r2, [r0, #0]
 801388c:	2f02      	cmp	r7, #2
 801388e:	f104 0314 	add.w	r3, r4, #20
 8013892:	d13d      	bne.n	8013910 <__gethex+0x43c>
 8013894:	f8d8 2000 	ldr.w	r2, [r8]
 8013898:	3a01      	subs	r2, #1
 801389a:	42b2      	cmp	r2, r6
 801389c:	d10a      	bne.n	80138b4 <__gethex+0x3e0>
 801389e:	2201      	movs	r2, #1
 80138a0:	1171      	asrs	r1, r6, #5
 80138a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80138a6:	f006 061f 	and.w	r6, r6, #31
 80138aa:	fa02 f606 	lsl.w	r6, r2, r6
 80138ae:	421e      	tst	r6, r3
 80138b0:	bf18      	it	ne
 80138b2:	4617      	movne	r7, r2
 80138b4:	f047 0720 	orr.w	r7, r7, #32
 80138b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80138ba:	601c      	str	r4, [r3, #0]
 80138bc:	9b05      	ldr	r3, [sp, #20]
 80138be:	601d      	str	r5, [r3, #0]
 80138c0:	e69a      	b.n	80135f8 <__gethex+0x124>
 80138c2:	4299      	cmp	r1, r3
 80138c4:	f843 cc04 	str.w	ip, [r3, #-4]
 80138c8:	d8d8      	bhi.n	801387c <__gethex+0x3a8>
 80138ca:	68a3      	ldr	r3, [r4, #8]
 80138cc:	459b      	cmp	fp, r3
 80138ce:	db17      	blt.n	8013900 <__gethex+0x42c>
 80138d0:	6861      	ldr	r1, [r4, #4]
 80138d2:	9802      	ldr	r0, [sp, #8]
 80138d4:	3101      	adds	r1, #1
 80138d6:	f000 f93d 	bl	8013b54 <_Balloc>
 80138da:	4681      	mov	r9, r0
 80138dc:	b918      	cbnz	r0, 80138e6 <__gethex+0x412>
 80138de:	4602      	mov	r2, r0
 80138e0:	2184      	movs	r1, #132	; 0x84
 80138e2:	4b19      	ldr	r3, [pc, #100]	; (8013948 <__gethex+0x474>)
 80138e4:	e6ab      	b.n	801363e <__gethex+0x16a>
 80138e6:	6922      	ldr	r2, [r4, #16]
 80138e8:	f104 010c 	add.w	r1, r4, #12
 80138ec:	3202      	adds	r2, #2
 80138ee:	0092      	lsls	r2, r2, #2
 80138f0:	300c      	adds	r0, #12
 80138f2:	f7fc ffe7 	bl	80108c4 <memcpy>
 80138f6:	4621      	mov	r1, r4
 80138f8:	9802      	ldr	r0, [sp, #8]
 80138fa:	f000 f96b 	bl	8013bd4 <_Bfree>
 80138fe:	464c      	mov	r4, r9
 8013900:	6923      	ldr	r3, [r4, #16]
 8013902:	1c5a      	adds	r2, r3, #1
 8013904:	6122      	str	r2, [r4, #16]
 8013906:	2201      	movs	r2, #1
 8013908:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801390c:	615a      	str	r2, [r3, #20]
 801390e:	e7bd      	b.n	801388c <__gethex+0x3b8>
 8013910:	6922      	ldr	r2, [r4, #16]
 8013912:	455a      	cmp	r2, fp
 8013914:	dd0b      	ble.n	801392e <__gethex+0x45a>
 8013916:	2101      	movs	r1, #1
 8013918:	4620      	mov	r0, r4
 801391a:	f7ff fd73 	bl	8013404 <rshift>
 801391e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013922:	3501      	adds	r5, #1
 8013924:	42ab      	cmp	r3, r5
 8013926:	f6ff aed4 	blt.w	80136d2 <__gethex+0x1fe>
 801392a:	2701      	movs	r7, #1
 801392c:	e7c2      	b.n	80138b4 <__gethex+0x3e0>
 801392e:	f016 061f 	ands.w	r6, r6, #31
 8013932:	d0fa      	beq.n	801392a <__gethex+0x456>
 8013934:	4453      	add	r3, sl
 8013936:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801393a:	f000 f9fd 	bl	8013d38 <__hi0bits>
 801393e:	f1c6 0620 	rsb	r6, r6, #32
 8013942:	42b0      	cmp	r0, r6
 8013944:	dbe7      	blt.n	8013916 <__gethex+0x442>
 8013946:	e7f0      	b.n	801392a <__gethex+0x456>
 8013948:	08015cb1 	.word	0x08015cb1

0801394c <L_shift>:
 801394c:	f1c2 0208 	rsb	r2, r2, #8
 8013950:	0092      	lsls	r2, r2, #2
 8013952:	b570      	push	{r4, r5, r6, lr}
 8013954:	f1c2 0620 	rsb	r6, r2, #32
 8013958:	6843      	ldr	r3, [r0, #4]
 801395a:	6804      	ldr	r4, [r0, #0]
 801395c:	fa03 f506 	lsl.w	r5, r3, r6
 8013960:	432c      	orrs	r4, r5
 8013962:	40d3      	lsrs	r3, r2
 8013964:	6004      	str	r4, [r0, #0]
 8013966:	f840 3f04 	str.w	r3, [r0, #4]!
 801396a:	4288      	cmp	r0, r1
 801396c:	d3f4      	bcc.n	8013958 <L_shift+0xc>
 801396e:	bd70      	pop	{r4, r5, r6, pc}

08013970 <__match>:
 8013970:	b530      	push	{r4, r5, lr}
 8013972:	6803      	ldr	r3, [r0, #0]
 8013974:	3301      	adds	r3, #1
 8013976:	f811 4b01 	ldrb.w	r4, [r1], #1
 801397a:	b914      	cbnz	r4, 8013982 <__match+0x12>
 801397c:	6003      	str	r3, [r0, #0]
 801397e:	2001      	movs	r0, #1
 8013980:	bd30      	pop	{r4, r5, pc}
 8013982:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013986:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801398a:	2d19      	cmp	r5, #25
 801398c:	bf98      	it	ls
 801398e:	3220      	addls	r2, #32
 8013990:	42a2      	cmp	r2, r4
 8013992:	d0f0      	beq.n	8013976 <__match+0x6>
 8013994:	2000      	movs	r0, #0
 8013996:	e7f3      	b.n	8013980 <__match+0x10>

08013998 <__hexnan>:
 8013998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801399c:	2500      	movs	r5, #0
 801399e:	680b      	ldr	r3, [r1, #0]
 80139a0:	4682      	mov	sl, r0
 80139a2:	115e      	asrs	r6, r3, #5
 80139a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80139a8:	f013 031f 	ands.w	r3, r3, #31
 80139ac:	bf18      	it	ne
 80139ae:	3604      	addne	r6, #4
 80139b0:	1f37      	subs	r7, r6, #4
 80139b2:	46b9      	mov	r9, r7
 80139b4:	463c      	mov	r4, r7
 80139b6:	46ab      	mov	fp, r5
 80139b8:	b087      	sub	sp, #28
 80139ba:	4690      	mov	r8, r2
 80139bc:	6802      	ldr	r2, [r0, #0]
 80139be:	9301      	str	r3, [sp, #4]
 80139c0:	f846 5c04 	str.w	r5, [r6, #-4]
 80139c4:	9502      	str	r5, [sp, #8]
 80139c6:	7851      	ldrb	r1, [r2, #1]
 80139c8:	1c53      	adds	r3, r2, #1
 80139ca:	9303      	str	r3, [sp, #12]
 80139cc:	b341      	cbz	r1, 8013a20 <__hexnan+0x88>
 80139ce:	4608      	mov	r0, r1
 80139d0:	9205      	str	r2, [sp, #20]
 80139d2:	9104      	str	r1, [sp, #16]
 80139d4:	f7ff fd69 	bl	80134aa <__hexdig_fun>
 80139d8:	2800      	cmp	r0, #0
 80139da:	d14f      	bne.n	8013a7c <__hexnan+0xe4>
 80139dc:	9904      	ldr	r1, [sp, #16]
 80139de:	9a05      	ldr	r2, [sp, #20]
 80139e0:	2920      	cmp	r1, #32
 80139e2:	d818      	bhi.n	8013a16 <__hexnan+0x7e>
 80139e4:	9b02      	ldr	r3, [sp, #8]
 80139e6:	459b      	cmp	fp, r3
 80139e8:	dd13      	ble.n	8013a12 <__hexnan+0x7a>
 80139ea:	454c      	cmp	r4, r9
 80139ec:	d206      	bcs.n	80139fc <__hexnan+0x64>
 80139ee:	2d07      	cmp	r5, #7
 80139f0:	dc04      	bgt.n	80139fc <__hexnan+0x64>
 80139f2:	462a      	mov	r2, r5
 80139f4:	4649      	mov	r1, r9
 80139f6:	4620      	mov	r0, r4
 80139f8:	f7ff ffa8 	bl	801394c <L_shift>
 80139fc:	4544      	cmp	r4, r8
 80139fe:	d950      	bls.n	8013aa2 <__hexnan+0x10a>
 8013a00:	2300      	movs	r3, #0
 8013a02:	f1a4 0904 	sub.w	r9, r4, #4
 8013a06:	f844 3c04 	str.w	r3, [r4, #-4]
 8013a0a:	461d      	mov	r5, r3
 8013a0c:	464c      	mov	r4, r9
 8013a0e:	f8cd b008 	str.w	fp, [sp, #8]
 8013a12:	9a03      	ldr	r2, [sp, #12]
 8013a14:	e7d7      	b.n	80139c6 <__hexnan+0x2e>
 8013a16:	2929      	cmp	r1, #41	; 0x29
 8013a18:	d156      	bne.n	8013ac8 <__hexnan+0x130>
 8013a1a:	3202      	adds	r2, #2
 8013a1c:	f8ca 2000 	str.w	r2, [sl]
 8013a20:	f1bb 0f00 	cmp.w	fp, #0
 8013a24:	d050      	beq.n	8013ac8 <__hexnan+0x130>
 8013a26:	454c      	cmp	r4, r9
 8013a28:	d206      	bcs.n	8013a38 <__hexnan+0xa0>
 8013a2a:	2d07      	cmp	r5, #7
 8013a2c:	dc04      	bgt.n	8013a38 <__hexnan+0xa0>
 8013a2e:	462a      	mov	r2, r5
 8013a30:	4649      	mov	r1, r9
 8013a32:	4620      	mov	r0, r4
 8013a34:	f7ff ff8a 	bl	801394c <L_shift>
 8013a38:	4544      	cmp	r4, r8
 8013a3a:	d934      	bls.n	8013aa6 <__hexnan+0x10e>
 8013a3c:	4623      	mov	r3, r4
 8013a3e:	f1a8 0204 	sub.w	r2, r8, #4
 8013a42:	f853 1b04 	ldr.w	r1, [r3], #4
 8013a46:	429f      	cmp	r7, r3
 8013a48:	f842 1f04 	str.w	r1, [r2, #4]!
 8013a4c:	d2f9      	bcs.n	8013a42 <__hexnan+0xaa>
 8013a4e:	1b3b      	subs	r3, r7, r4
 8013a50:	f023 0303 	bic.w	r3, r3, #3
 8013a54:	3304      	adds	r3, #4
 8013a56:	3401      	adds	r4, #1
 8013a58:	3e03      	subs	r6, #3
 8013a5a:	42b4      	cmp	r4, r6
 8013a5c:	bf88      	it	hi
 8013a5e:	2304      	movhi	r3, #4
 8013a60:	2200      	movs	r2, #0
 8013a62:	4443      	add	r3, r8
 8013a64:	f843 2b04 	str.w	r2, [r3], #4
 8013a68:	429f      	cmp	r7, r3
 8013a6a:	d2fb      	bcs.n	8013a64 <__hexnan+0xcc>
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	b91b      	cbnz	r3, 8013a78 <__hexnan+0xe0>
 8013a70:	4547      	cmp	r7, r8
 8013a72:	d127      	bne.n	8013ac4 <__hexnan+0x12c>
 8013a74:	2301      	movs	r3, #1
 8013a76:	603b      	str	r3, [r7, #0]
 8013a78:	2005      	movs	r0, #5
 8013a7a:	e026      	b.n	8013aca <__hexnan+0x132>
 8013a7c:	3501      	adds	r5, #1
 8013a7e:	2d08      	cmp	r5, #8
 8013a80:	f10b 0b01 	add.w	fp, fp, #1
 8013a84:	dd06      	ble.n	8013a94 <__hexnan+0xfc>
 8013a86:	4544      	cmp	r4, r8
 8013a88:	d9c3      	bls.n	8013a12 <__hexnan+0x7a>
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	2501      	movs	r5, #1
 8013a8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013a92:	3c04      	subs	r4, #4
 8013a94:	6822      	ldr	r2, [r4, #0]
 8013a96:	f000 000f 	and.w	r0, r0, #15
 8013a9a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8013a9e:	6022      	str	r2, [r4, #0]
 8013aa0:	e7b7      	b.n	8013a12 <__hexnan+0x7a>
 8013aa2:	2508      	movs	r5, #8
 8013aa4:	e7b5      	b.n	8013a12 <__hexnan+0x7a>
 8013aa6:	9b01      	ldr	r3, [sp, #4]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d0df      	beq.n	8013a6c <__hexnan+0xd4>
 8013aac:	f04f 32ff 	mov.w	r2, #4294967295
 8013ab0:	f1c3 0320 	rsb	r3, r3, #32
 8013ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8013ab8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013abc:	401a      	ands	r2, r3
 8013abe:	f846 2c04 	str.w	r2, [r6, #-4]
 8013ac2:	e7d3      	b.n	8013a6c <__hexnan+0xd4>
 8013ac4:	3f04      	subs	r7, #4
 8013ac6:	e7d1      	b.n	8013a6c <__hexnan+0xd4>
 8013ac8:	2004      	movs	r0, #4
 8013aca:	b007      	add	sp, #28
 8013acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013ad0 <_localeconv_r>:
 8013ad0:	4800      	ldr	r0, [pc, #0]	; (8013ad4 <_localeconv_r+0x4>)
 8013ad2:	4770      	bx	lr
 8013ad4:	2000037c 	.word	0x2000037c

08013ad8 <_lseek_r>:
 8013ad8:	b538      	push	{r3, r4, r5, lr}
 8013ada:	4604      	mov	r4, r0
 8013adc:	4608      	mov	r0, r1
 8013ade:	4611      	mov	r1, r2
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	4d05      	ldr	r5, [pc, #20]	; (8013af8 <_lseek_r+0x20>)
 8013ae4:	602a      	str	r2, [r5, #0]
 8013ae6:	461a      	mov	r2, r3
 8013ae8:	f7f1 fcc4 	bl	8005474 <_lseek>
 8013aec:	1c43      	adds	r3, r0, #1
 8013aee:	d102      	bne.n	8013af6 <_lseek_r+0x1e>
 8013af0:	682b      	ldr	r3, [r5, #0]
 8013af2:	b103      	cbz	r3, 8013af6 <_lseek_r+0x1e>
 8013af4:	6023      	str	r3, [r4, #0]
 8013af6:	bd38      	pop	{r3, r4, r5, pc}
 8013af8:	2000cc54 	.word	0x2000cc54

08013afc <__ascii_mbtowc>:
 8013afc:	b082      	sub	sp, #8
 8013afe:	b901      	cbnz	r1, 8013b02 <__ascii_mbtowc+0x6>
 8013b00:	a901      	add	r1, sp, #4
 8013b02:	b142      	cbz	r2, 8013b16 <__ascii_mbtowc+0x1a>
 8013b04:	b14b      	cbz	r3, 8013b1a <__ascii_mbtowc+0x1e>
 8013b06:	7813      	ldrb	r3, [r2, #0]
 8013b08:	600b      	str	r3, [r1, #0]
 8013b0a:	7812      	ldrb	r2, [r2, #0]
 8013b0c:	1e10      	subs	r0, r2, #0
 8013b0e:	bf18      	it	ne
 8013b10:	2001      	movne	r0, #1
 8013b12:	b002      	add	sp, #8
 8013b14:	4770      	bx	lr
 8013b16:	4610      	mov	r0, r2
 8013b18:	e7fb      	b.n	8013b12 <__ascii_mbtowc+0x16>
 8013b1a:	f06f 0001 	mvn.w	r0, #1
 8013b1e:	e7f8      	b.n	8013b12 <__ascii_mbtowc+0x16>

08013b20 <memchr>:
 8013b20:	4603      	mov	r3, r0
 8013b22:	b510      	push	{r4, lr}
 8013b24:	b2c9      	uxtb	r1, r1
 8013b26:	4402      	add	r2, r0
 8013b28:	4293      	cmp	r3, r2
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	d101      	bne.n	8013b32 <memchr+0x12>
 8013b2e:	2000      	movs	r0, #0
 8013b30:	e003      	b.n	8013b3a <memchr+0x1a>
 8013b32:	7804      	ldrb	r4, [r0, #0]
 8013b34:	3301      	adds	r3, #1
 8013b36:	428c      	cmp	r4, r1
 8013b38:	d1f6      	bne.n	8013b28 <memchr+0x8>
 8013b3a:	bd10      	pop	{r4, pc}

08013b3c <__malloc_lock>:
 8013b3c:	4801      	ldr	r0, [pc, #4]	; (8013b44 <__malloc_lock+0x8>)
 8013b3e:	f7fc beae 	b.w	801089e <__retarget_lock_acquire_recursive>
 8013b42:	bf00      	nop
 8013b44:	2000cc48 	.word	0x2000cc48

08013b48 <__malloc_unlock>:
 8013b48:	4801      	ldr	r0, [pc, #4]	; (8013b50 <__malloc_unlock+0x8>)
 8013b4a:	f7fc bea9 	b.w	80108a0 <__retarget_lock_release_recursive>
 8013b4e:	bf00      	nop
 8013b50:	2000cc48 	.word	0x2000cc48

08013b54 <_Balloc>:
 8013b54:	b570      	push	{r4, r5, r6, lr}
 8013b56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013b58:	4604      	mov	r4, r0
 8013b5a:	460d      	mov	r5, r1
 8013b5c:	b976      	cbnz	r6, 8013b7c <_Balloc+0x28>
 8013b5e:	2010      	movs	r0, #16
 8013b60:	f7fc fea0 	bl	80108a4 <malloc>
 8013b64:	4602      	mov	r2, r0
 8013b66:	6260      	str	r0, [r4, #36]	; 0x24
 8013b68:	b920      	cbnz	r0, 8013b74 <_Balloc+0x20>
 8013b6a:	2166      	movs	r1, #102	; 0x66
 8013b6c:	4b17      	ldr	r3, [pc, #92]	; (8013bcc <_Balloc+0x78>)
 8013b6e:	4818      	ldr	r0, [pc, #96]	; (8013bd0 <_Balloc+0x7c>)
 8013b70:	f7fe fcd0 	bl	8012514 <__assert_func>
 8013b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013b78:	6006      	str	r6, [r0, #0]
 8013b7a:	60c6      	str	r6, [r0, #12]
 8013b7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013b7e:	68f3      	ldr	r3, [r6, #12]
 8013b80:	b183      	cbz	r3, 8013ba4 <_Balloc+0x50>
 8013b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b84:	68db      	ldr	r3, [r3, #12]
 8013b86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013b8a:	b9b8      	cbnz	r0, 8013bbc <_Balloc+0x68>
 8013b8c:	2101      	movs	r1, #1
 8013b8e:	fa01 f605 	lsl.w	r6, r1, r5
 8013b92:	1d72      	adds	r2, r6, #5
 8013b94:	4620      	mov	r0, r4
 8013b96:	0092      	lsls	r2, r2, #2
 8013b98:	f000 fc94 	bl	80144c4 <_calloc_r>
 8013b9c:	b160      	cbz	r0, 8013bb8 <_Balloc+0x64>
 8013b9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013ba2:	e00e      	b.n	8013bc2 <_Balloc+0x6e>
 8013ba4:	2221      	movs	r2, #33	; 0x21
 8013ba6:	2104      	movs	r1, #4
 8013ba8:	4620      	mov	r0, r4
 8013baa:	f000 fc8b 	bl	80144c4 <_calloc_r>
 8013bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013bb0:	60f0      	str	r0, [r6, #12]
 8013bb2:	68db      	ldr	r3, [r3, #12]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d1e4      	bne.n	8013b82 <_Balloc+0x2e>
 8013bb8:	2000      	movs	r0, #0
 8013bba:	bd70      	pop	{r4, r5, r6, pc}
 8013bbc:	6802      	ldr	r2, [r0, #0]
 8013bbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013bc8:	e7f7      	b.n	8013bba <_Balloc+0x66>
 8013bca:	bf00      	nop
 8013bcc:	08015a98 	.word	0x08015a98
 8013bd0:	08015d3c 	.word	0x08015d3c

08013bd4 <_Bfree>:
 8013bd4:	b570      	push	{r4, r5, r6, lr}
 8013bd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013bd8:	4605      	mov	r5, r0
 8013bda:	460c      	mov	r4, r1
 8013bdc:	b976      	cbnz	r6, 8013bfc <_Bfree+0x28>
 8013bde:	2010      	movs	r0, #16
 8013be0:	f7fc fe60 	bl	80108a4 <malloc>
 8013be4:	4602      	mov	r2, r0
 8013be6:	6268      	str	r0, [r5, #36]	; 0x24
 8013be8:	b920      	cbnz	r0, 8013bf4 <_Bfree+0x20>
 8013bea:	218a      	movs	r1, #138	; 0x8a
 8013bec:	4b08      	ldr	r3, [pc, #32]	; (8013c10 <_Bfree+0x3c>)
 8013bee:	4809      	ldr	r0, [pc, #36]	; (8013c14 <_Bfree+0x40>)
 8013bf0:	f7fe fc90 	bl	8012514 <__assert_func>
 8013bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013bf8:	6006      	str	r6, [r0, #0]
 8013bfa:	60c6      	str	r6, [r0, #12]
 8013bfc:	b13c      	cbz	r4, 8013c0e <_Bfree+0x3a>
 8013bfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013c00:	6862      	ldr	r2, [r4, #4]
 8013c02:	68db      	ldr	r3, [r3, #12]
 8013c04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013c08:	6021      	str	r1, [r4, #0]
 8013c0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013c0e:	bd70      	pop	{r4, r5, r6, pc}
 8013c10:	08015a98 	.word	0x08015a98
 8013c14:	08015d3c 	.word	0x08015d3c

08013c18 <__multadd>:
 8013c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c1c:	4607      	mov	r7, r0
 8013c1e:	460c      	mov	r4, r1
 8013c20:	461e      	mov	r6, r3
 8013c22:	2000      	movs	r0, #0
 8013c24:	690d      	ldr	r5, [r1, #16]
 8013c26:	f101 0c14 	add.w	ip, r1, #20
 8013c2a:	f8dc 3000 	ldr.w	r3, [ip]
 8013c2e:	3001      	adds	r0, #1
 8013c30:	b299      	uxth	r1, r3
 8013c32:	fb02 6101 	mla	r1, r2, r1, r6
 8013c36:	0c1e      	lsrs	r6, r3, #16
 8013c38:	0c0b      	lsrs	r3, r1, #16
 8013c3a:	fb02 3306 	mla	r3, r2, r6, r3
 8013c3e:	b289      	uxth	r1, r1
 8013c40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013c44:	4285      	cmp	r5, r0
 8013c46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013c4a:	f84c 1b04 	str.w	r1, [ip], #4
 8013c4e:	dcec      	bgt.n	8013c2a <__multadd+0x12>
 8013c50:	b30e      	cbz	r6, 8013c96 <__multadd+0x7e>
 8013c52:	68a3      	ldr	r3, [r4, #8]
 8013c54:	42ab      	cmp	r3, r5
 8013c56:	dc19      	bgt.n	8013c8c <__multadd+0x74>
 8013c58:	6861      	ldr	r1, [r4, #4]
 8013c5a:	4638      	mov	r0, r7
 8013c5c:	3101      	adds	r1, #1
 8013c5e:	f7ff ff79 	bl	8013b54 <_Balloc>
 8013c62:	4680      	mov	r8, r0
 8013c64:	b928      	cbnz	r0, 8013c72 <__multadd+0x5a>
 8013c66:	4602      	mov	r2, r0
 8013c68:	21b5      	movs	r1, #181	; 0xb5
 8013c6a:	4b0c      	ldr	r3, [pc, #48]	; (8013c9c <__multadd+0x84>)
 8013c6c:	480c      	ldr	r0, [pc, #48]	; (8013ca0 <__multadd+0x88>)
 8013c6e:	f7fe fc51 	bl	8012514 <__assert_func>
 8013c72:	6922      	ldr	r2, [r4, #16]
 8013c74:	f104 010c 	add.w	r1, r4, #12
 8013c78:	3202      	adds	r2, #2
 8013c7a:	0092      	lsls	r2, r2, #2
 8013c7c:	300c      	adds	r0, #12
 8013c7e:	f7fc fe21 	bl	80108c4 <memcpy>
 8013c82:	4621      	mov	r1, r4
 8013c84:	4638      	mov	r0, r7
 8013c86:	f7ff ffa5 	bl	8013bd4 <_Bfree>
 8013c8a:	4644      	mov	r4, r8
 8013c8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013c90:	3501      	adds	r5, #1
 8013c92:	615e      	str	r6, [r3, #20]
 8013c94:	6125      	str	r5, [r4, #16]
 8013c96:	4620      	mov	r0, r4
 8013c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c9c:	08015cb1 	.word	0x08015cb1
 8013ca0:	08015d3c 	.word	0x08015d3c

08013ca4 <__s2b>:
 8013ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ca8:	4615      	mov	r5, r2
 8013caa:	2209      	movs	r2, #9
 8013cac:	461f      	mov	r7, r3
 8013cae:	3308      	adds	r3, #8
 8013cb0:	460c      	mov	r4, r1
 8013cb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8013cb6:	4606      	mov	r6, r0
 8013cb8:	2201      	movs	r2, #1
 8013cba:	2100      	movs	r1, #0
 8013cbc:	429a      	cmp	r2, r3
 8013cbe:	db09      	blt.n	8013cd4 <__s2b+0x30>
 8013cc0:	4630      	mov	r0, r6
 8013cc2:	f7ff ff47 	bl	8013b54 <_Balloc>
 8013cc6:	b940      	cbnz	r0, 8013cda <__s2b+0x36>
 8013cc8:	4602      	mov	r2, r0
 8013cca:	21ce      	movs	r1, #206	; 0xce
 8013ccc:	4b18      	ldr	r3, [pc, #96]	; (8013d30 <__s2b+0x8c>)
 8013cce:	4819      	ldr	r0, [pc, #100]	; (8013d34 <__s2b+0x90>)
 8013cd0:	f7fe fc20 	bl	8012514 <__assert_func>
 8013cd4:	0052      	lsls	r2, r2, #1
 8013cd6:	3101      	adds	r1, #1
 8013cd8:	e7f0      	b.n	8013cbc <__s2b+0x18>
 8013cda:	9b08      	ldr	r3, [sp, #32]
 8013cdc:	2d09      	cmp	r5, #9
 8013cde:	6143      	str	r3, [r0, #20]
 8013ce0:	f04f 0301 	mov.w	r3, #1
 8013ce4:	6103      	str	r3, [r0, #16]
 8013ce6:	dd16      	ble.n	8013d16 <__s2b+0x72>
 8013ce8:	f104 0909 	add.w	r9, r4, #9
 8013cec:	46c8      	mov	r8, r9
 8013cee:	442c      	add	r4, r5
 8013cf0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013cf4:	4601      	mov	r1, r0
 8013cf6:	220a      	movs	r2, #10
 8013cf8:	4630      	mov	r0, r6
 8013cfa:	3b30      	subs	r3, #48	; 0x30
 8013cfc:	f7ff ff8c 	bl	8013c18 <__multadd>
 8013d00:	45a0      	cmp	r8, r4
 8013d02:	d1f5      	bne.n	8013cf0 <__s2b+0x4c>
 8013d04:	f1a5 0408 	sub.w	r4, r5, #8
 8013d08:	444c      	add	r4, r9
 8013d0a:	1b2d      	subs	r5, r5, r4
 8013d0c:	1963      	adds	r3, r4, r5
 8013d0e:	42bb      	cmp	r3, r7
 8013d10:	db04      	blt.n	8013d1c <__s2b+0x78>
 8013d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d16:	2509      	movs	r5, #9
 8013d18:	340a      	adds	r4, #10
 8013d1a:	e7f6      	b.n	8013d0a <__s2b+0x66>
 8013d1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013d20:	4601      	mov	r1, r0
 8013d22:	220a      	movs	r2, #10
 8013d24:	4630      	mov	r0, r6
 8013d26:	3b30      	subs	r3, #48	; 0x30
 8013d28:	f7ff ff76 	bl	8013c18 <__multadd>
 8013d2c:	e7ee      	b.n	8013d0c <__s2b+0x68>
 8013d2e:	bf00      	nop
 8013d30:	08015cb1 	.word	0x08015cb1
 8013d34:	08015d3c 	.word	0x08015d3c

08013d38 <__hi0bits>:
 8013d38:	0c02      	lsrs	r2, r0, #16
 8013d3a:	0412      	lsls	r2, r2, #16
 8013d3c:	4603      	mov	r3, r0
 8013d3e:	b9ca      	cbnz	r2, 8013d74 <__hi0bits+0x3c>
 8013d40:	0403      	lsls	r3, r0, #16
 8013d42:	2010      	movs	r0, #16
 8013d44:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013d48:	bf04      	itt	eq
 8013d4a:	021b      	lsleq	r3, r3, #8
 8013d4c:	3008      	addeq	r0, #8
 8013d4e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013d52:	bf04      	itt	eq
 8013d54:	011b      	lsleq	r3, r3, #4
 8013d56:	3004      	addeq	r0, #4
 8013d58:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013d5c:	bf04      	itt	eq
 8013d5e:	009b      	lsleq	r3, r3, #2
 8013d60:	3002      	addeq	r0, #2
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	db05      	blt.n	8013d72 <__hi0bits+0x3a>
 8013d66:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8013d6a:	f100 0001 	add.w	r0, r0, #1
 8013d6e:	bf08      	it	eq
 8013d70:	2020      	moveq	r0, #32
 8013d72:	4770      	bx	lr
 8013d74:	2000      	movs	r0, #0
 8013d76:	e7e5      	b.n	8013d44 <__hi0bits+0xc>

08013d78 <__lo0bits>:
 8013d78:	6803      	ldr	r3, [r0, #0]
 8013d7a:	4602      	mov	r2, r0
 8013d7c:	f013 0007 	ands.w	r0, r3, #7
 8013d80:	d00b      	beq.n	8013d9a <__lo0bits+0x22>
 8013d82:	07d9      	lsls	r1, r3, #31
 8013d84:	d421      	bmi.n	8013dca <__lo0bits+0x52>
 8013d86:	0798      	lsls	r0, r3, #30
 8013d88:	bf49      	itett	mi
 8013d8a:	085b      	lsrmi	r3, r3, #1
 8013d8c:	089b      	lsrpl	r3, r3, #2
 8013d8e:	2001      	movmi	r0, #1
 8013d90:	6013      	strmi	r3, [r2, #0]
 8013d92:	bf5c      	itt	pl
 8013d94:	2002      	movpl	r0, #2
 8013d96:	6013      	strpl	r3, [r2, #0]
 8013d98:	4770      	bx	lr
 8013d9a:	b299      	uxth	r1, r3
 8013d9c:	b909      	cbnz	r1, 8013da2 <__lo0bits+0x2a>
 8013d9e:	2010      	movs	r0, #16
 8013da0:	0c1b      	lsrs	r3, r3, #16
 8013da2:	b2d9      	uxtb	r1, r3
 8013da4:	b909      	cbnz	r1, 8013daa <__lo0bits+0x32>
 8013da6:	3008      	adds	r0, #8
 8013da8:	0a1b      	lsrs	r3, r3, #8
 8013daa:	0719      	lsls	r1, r3, #28
 8013dac:	bf04      	itt	eq
 8013dae:	091b      	lsreq	r3, r3, #4
 8013db0:	3004      	addeq	r0, #4
 8013db2:	0799      	lsls	r1, r3, #30
 8013db4:	bf04      	itt	eq
 8013db6:	089b      	lsreq	r3, r3, #2
 8013db8:	3002      	addeq	r0, #2
 8013dba:	07d9      	lsls	r1, r3, #31
 8013dbc:	d403      	bmi.n	8013dc6 <__lo0bits+0x4e>
 8013dbe:	085b      	lsrs	r3, r3, #1
 8013dc0:	f100 0001 	add.w	r0, r0, #1
 8013dc4:	d003      	beq.n	8013dce <__lo0bits+0x56>
 8013dc6:	6013      	str	r3, [r2, #0]
 8013dc8:	4770      	bx	lr
 8013dca:	2000      	movs	r0, #0
 8013dcc:	4770      	bx	lr
 8013dce:	2020      	movs	r0, #32
 8013dd0:	4770      	bx	lr
	...

08013dd4 <__i2b>:
 8013dd4:	b510      	push	{r4, lr}
 8013dd6:	460c      	mov	r4, r1
 8013dd8:	2101      	movs	r1, #1
 8013dda:	f7ff febb 	bl	8013b54 <_Balloc>
 8013dde:	4602      	mov	r2, r0
 8013de0:	b928      	cbnz	r0, 8013dee <__i2b+0x1a>
 8013de2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013de6:	4b04      	ldr	r3, [pc, #16]	; (8013df8 <__i2b+0x24>)
 8013de8:	4804      	ldr	r0, [pc, #16]	; (8013dfc <__i2b+0x28>)
 8013dea:	f7fe fb93 	bl	8012514 <__assert_func>
 8013dee:	2301      	movs	r3, #1
 8013df0:	6144      	str	r4, [r0, #20]
 8013df2:	6103      	str	r3, [r0, #16]
 8013df4:	bd10      	pop	{r4, pc}
 8013df6:	bf00      	nop
 8013df8:	08015cb1 	.word	0x08015cb1
 8013dfc:	08015d3c 	.word	0x08015d3c

08013e00 <__multiply>:
 8013e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e04:	4691      	mov	r9, r2
 8013e06:	690a      	ldr	r2, [r1, #16]
 8013e08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013e0c:	460c      	mov	r4, r1
 8013e0e:	429a      	cmp	r2, r3
 8013e10:	bfbe      	ittt	lt
 8013e12:	460b      	movlt	r3, r1
 8013e14:	464c      	movlt	r4, r9
 8013e16:	4699      	movlt	r9, r3
 8013e18:	6927      	ldr	r7, [r4, #16]
 8013e1a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013e1e:	68a3      	ldr	r3, [r4, #8]
 8013e20:	6861      	ldr	r1, [r4, #4]
 8013e22:	eb07 060a 	add.w	r6, r7, sl
 8013e26:	42b3      	cmp	r3, r6
 8013e28:	b085      	sub	sp, #20
 8013e2a:	bfb8      	it	lt
 8013e2c:	3101      	addlt	r1, #1
 8013e2e:	f7ff fe91 	bl	8013b54 <_Balloc>
 8013e32:	b930      	cbnz	r0, 8013e42 <__multiply+0x42>
 8013e34:	4602      	mov	r2, r0
 8013e36:	f240 115d 	movw	r1, #349	; 0x15d
 8013e3a:	4b43      	ldr	r3, [pc, #268]	; (8013f48 <__multiply+0x148>)
 8013e3c:	4843      	ldr	r0, [pc, #268]	; (8013f4c <__multiply+0x14c>)
 8013e3e:	f7fe fb69 	bl	8012514 <__assert_func>
 8013e42:	f100 0514 	add.w	r5, r0, #20
 8013e46:	462b      	mov	r3, r5
 8013e48:	2200      	movs	r2, #0
 8013e4a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013e4e:	4543      	cmp	r3, r8
 8013e50:	d321      	bcc.n	8013e96 <__multiply+0x96>
 8013e52:	f104 0314 	add.w	r3, r4, #20
 8013e56:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013e5a:	f109 0314 	add.w	r3, r9, #20
 8013e5e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013e62:	9202      	str	r2, [sp, #8]
 8013e64:	1b3a      	subs	r2, r7, r4
 8013e66:	3a15      	subs	r2, #21
 8013e68:	f022 0203 	bic.w	r2, r2, #3
 8013e6c:	3204      	adds	r2, #4
 8013e6e:	f104 0115 	add.w	r1, r4, #21
 8013e72:	428f      	cmp	r7, r1
 8013e74:	bf38      	it	cc
 8013e76:	2204      	movcc	r2, #4
 8013e78:	9201      	str	r2, [sp, #4]
 8013e7a:	9a02      	ldr	r2, [sp, #8]
 8013e7c:	9303      	str	r3, [sp, #12]
 8013e7e:	429a      	cmp	r2, r3
 8013e80:	d80c      	bhi.n	8013e9c <__multiply+0x9c>
 8013e82:	2e00      	cmp	r6, #0
 8013e84:	dd03      	ble.n	8013e8e <__multiply+0x8e>
 8013e86:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d059      	beq.n	8013f42 <__multiply+0x142>
 8013e8e:	6106      	str	r6, [r0, #16]
 8013e90:	b005      	add	sp, #20
 8013e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e96:	f843 2b04 	str.w	r2, [r3], #4
 8013e9a:	e7d8      	b.n	8013e4e <__multiply+0x4e>
 8013e9c:	f8b3 a000 	ldrh.w	sl, [r3]
 8013ea0:	f1ba 0f00 	cmp.w	sl, #0
 8013ea4:	d023      	beq.n	8013eee <__multiply+0xee>
 8013ea6:	46a9      	mov	r9, r5
 8013ea8:	f04f 0c00 	mov.w	ip, #0
 8013eac:	f104 0e14 	add.w	lr, r4, #20
 8013eb0:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013eb4:	f8d9 1000 	ldr.w	r1, [r9]
 8013eb8:	fa1f fb82 	uxth.w	fp, r2
 8013ebc:	b289      	uxth	r1, r1
 8013ebe:	fb0a 110b 	mla	r1, sl, fp, r1
 8013ec2:	4461      	add	r1, ip
 8013ec4:	f8d9 c000 	ldr.w	ip, [r9]
 8013ec8:	0c12      	lsrs	r2, r2, #16
 8013eca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8013ece:	fb0a c202 	mla	r2, sl, r2, ip
 8013ed2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013ed6:	b289      	uxth	r1, r1
 8013ed8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013edc:	4577      	cmp	r7, lr
 8013ede:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013ee2:	f849 1b04 	str.w	r1, [r9], #4
 8013ee6:	d8e3      	bhi.n	8013eb0 <__multiply+0xb0>
 8013ee8:	9a01      	ldr	r2, [sp, #4]
 8013eea:	f845 c002 	str.w	ip, [r5, r2]
 8013eee:	9a03      	ldr	r2, [sp, #12]
 8013ef0:	3304      	adds	r3, #4
 8013ef2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013ef6:	f1b9 0f00 	cmp.w	r9, #0
 8013efa:	d020      	beq.n	8013f3e <__multiply+0x13e>
 8013efc:	46ae      	mov	lr, r5
 8013efe:	f04f 0a00 	mov.w	sl, #0
 8013f02:	6829      	ldr	r1, [r5, #0]
 8013f04:	f104 0c14 	add.w	ip, r4, #20
 8013f08:	f8bc b000 	ldrh.w	fp, [ip]
 8013f0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013f10:	b289      	uxth	r1, r1
 8013f12:	fb09 220b 	mla	r2, r9, fp, r2
 8013f16:	4492      	add	sl, r2
 8013f18:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013f1c:	f84e 1b04 	str.w	r1, [lr], #4
 8013f20:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013f24:	f8be 1000 	ldrh.w	r1, [lr]
 8013f28:	0c12      	lsrs	r2, r2, #16
 8013f2a:	fb09 1102 	mla	r1, r9, r2, r1
 8013f2e:	4567      	cmp	r7, ip
 8013f30:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013f34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013f38:	d8e6      	bhi.n	8013f08 <__multiply+0x108>
 8013f3a:	9a01      	ldr	r2, [sp, #4]
 8013f3c:	50a9      	str	r1, [r5, r2]
 8013f3e:	3504      	adds	r5, #4
 8013f40:	e79b      	b.n	8013e7a <__multiply+0x7a>
 8013f42:	3e01      	subs	r6, #1
 8013f44:	e79d      	b.n	8013e82 <__multiply+0x82>
 8013f46:	bf00      	nop
 8013f48:	08015cb1 	.word	0x08015cb1
 8013f4c:	08015d3c 	.word	0x08015d3c

08013f50 <__pow5mult>:
 8013f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f54:	4615      	mov	r5, r2
 8013f56:	f012 0203 	ands.w	r2, r2, #3
 8013f5a:	4606      	mov	r6, r0
 8013f5c:	460f      	mov	r7, r1
 8013f5e:	d007      	beq.n	8013f70 <__pow5mult+0x20>
 8013f60:	4c25      	ldr	r4, [pc, #148]	; (8013ff8 <__pow5mult+0xa8>)
 8013f62:	3a01      	subs	r2, #1
 8013f64:	2300      	movs	r3, #0
 8013f66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013f6a:	f7ff fe55 	bl	8013c18 <__multadd>
 8013f6e:	4607      	mov	r7, r0
 8013f70:	10ad      	asrs	r5, r5, #2
 8013f72:	d03d      	beq.n	8013ff0 <__pow5mult+0xa0>
 8013f74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013f76:	b97c      	cbnz	r4, 8013f98 <__pow5mult+0x48>
 8013f78:	2010      	movs	r0, #16
 8013f7a:	f7fc fc93 	bl	80108a4 <malloc>
 8013f7e:	4602      	mov	r2, r0
 8013f80:	6270      	str	r0, [r6, #36]	; 0x24
 8013f82:	b928      	cbnz	r0, 8013f90 <__pow5mult+0x40>
 8013f84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013f88:	4b1c      	ldr	r3, [pc, #112]	; (8013ffc <__pow5mult+0xac>)
 8013f8a:	481d      	ldr	r0, [pc, #116]	; (8014000 <__pow5mult+0xb0>)
 8013f8c:	f7fe fac2 	bl	8012514 <__assert_func>
 8013f90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013f94:	6004      	str	r4, [r0, #0]
 8013f96:	60c4      	str	r4, [r0, #12]
 8013f98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013f9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013fa0:	b94c      	cbnz	r4, 8013fb6 <__pow5mult+0x66>
 8013fa2:	f240 2171 	movw	r1, #625	; 0x271
 8013fa6:	4630      	mov	r0, r6
 8013fa8:	f7ff ff14 	bl	8013dd4 <__i2b>
 8013fac:	2300      	movs	r3, #0
 8013fae:	4604      	mov	r4, r0
 8013fb0:	f8c8 0008 	str.w	r0, [r8, #8]
 8013fb4:	6003      	str	r3, [r0, #0]
 8013fb6:	f04f 0900 	mov.w	r9, #0
 8013fba:	07eb      	lsls	r3, r5, #31
 8013fbc:	d50a      	bpl.n	8013fd4 <__pow5mult+0x84>
 8013fbe:	4639      	mov	r1, r7
 8013fc0:	4622      	mov	r2, r4
 8013fc2:	4630      	mov	r0, r6
 8013fc4:	f7ff ff1c 	bl	8013e00 <__multiply>
 8013fc8:	4680      	mov	r8, r0
 8013fca:	4639      	mov	r1, r7
 8013fcc:	4630      	mov	r0, r6
 8013fce:	f7ff fe01 	bl	8013bd4 <_Bfree>
 8013fd2:	4647      	mov	r7, r8
 8013fd4:	106d      	asrs	r5, r5, #1
 8013fd6:	d00b      	beq.n	8013ff0 <__pow5mult+0xa0>
 8013fd8:	6820      	ldr	r0, [r4, #0]
 8013fda:	b938      	cbnz	r0, 8013fec <__pow5mult+0x9c>
 8013fdc:	4622      	mov	r2, r4
 8013fde:	4621      	mov	r1, r4
 8013fe0:	4630      	mov	r0, r6
 8013fe2:	f7ff ff0d 	bl	8013e00 <__multiply>
 8013fe6:	6020      	str	r0, [r4, #0]
 8013fe8:	f8c0 9000 	str.w	r9, [r0]
 8013fec:	4604      	mov	r4, r0
 8013fee:	e7e4      	b.n	8013fba <__pow5mult+0x6a>
 8013ff0:	4638      	mov	r0, r7
 8013ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ff6:	bf00      	nop
 8013ff8:	08015e88 	.word	0x08015e88
 8013ffc:	08015a98 	.word	0x08015a98
 8014000:	08015d3c 	.word	0x08015d3c

08014004 <__lshift>:
 8014004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014008:	460c      	mov	r4, r1
 801400a:	4607      	mov	r7, r0
 801400c:	4691      	mov	r9, r2
 801400e:	6923      	ldr	r3, [r4, #16]
 8014010:	6849      	ldr	r1, [r1, #4]
 8014012:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014016:	68a3      	ldr	r3, [r4, #8]
 8014018:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801401c:	f108 0601 	add.w	r6, r8, #1
 8014020:	42b3      	cmp	r3, r6
 8014022:	db0b      	blt.n	801403c <__lshift+0x38>
 8014024:	4638      	mov	r0, r7
 8014026:	f7ff fd95 	bl	8013b54 <_Balloc>
 801402a:	4605      	mov	r5, r0
 801402c:	b948      	cbnz	r0, 8014042 <__lshift+0x3e>
 801402e:	4602      	mov	r2, r0
 8014030:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014034:	4b29      	ldr	r3, [pc, #164]	; (80140dc <__lshift+0xd8>)
 8014036:	482a      	ldr	r0, [pc, #168]	; (80140e0 <__lshift+0xdc>)
 8014038:	f7fe fa6c 	bl	8012514 <__assert_func>
 801403c:	3101      	adds	r1, #1
 801403e:	005b      	lsls	r3, r3, #1
 8014040:	e7ee      	b.n	8014020 <__lshift+0x1c>
 8014042:	2300      	movs	r3, #0
 8014044:	f100 0114 	add.w	r1, r0, #20
 8014048:	f100 0210 	add.w	r2, r0, #16
 801404c:	4618      	mov	r0, r3
 801404e:	4553      	cmp	r3, sl
 8014050:	db37      	blt.n	80140c2 <__lshift+0xbe>
 8014052:	6920      	ldr	r0, [r4, #16]
 8014054:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014058:	f104 0314 	add.w	r3, r4, #20
 801405c:	f019 091f 	ands.w	r9, r9, #31
 8014060:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014064:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014068:	d02f      	beq.n	80140ca <__lshift+0xc6>
 801406a:	468a      	mov	sl, r1
 801406c:	f04f 0c00 	mov.w	ip, #0
 8014070:	f1c9 0e20 	rsb	lr, r9, #32
 8014074:	681a      	ldr	r2, [r3, #0]
 8014076:	fa02 f209 	lsl.w	r2, r2, r9
 801407a:	ea42 020c 	orr.w	r2, r2, ip
 801407e:	f84a 2b04 	str.w	r2, [sl], #4
 8014082:	f853 2b04 	ldr.w	r2, [r3], #4
 8014086:	4298      	cmp	r0, r3
 8014088:	fa22 fc0e 	lsr.w	ip, r2, lr
 801408c:	d8f2      	bhi.n	8014074 <__lshift+0x70>
 801408e:	1b03      	subs	r3, r0, r4
 8014090:	3b15      	subs	r3, #21
 8014092:	f023 0303 	bic.w	r3, r3, #3
 8014096:	3304      	adds	r3, #4
 8014098:	f104 0215 	add.w	r2, r4, #21
 801409c:	4290      	cmp	r0, r2
 801409e:	bf38      	it	cc
 80140a0:	2304      	movcc	r3, #4
 80140a2:	f841 c003 	str.w	ip, [r1, r3]
 80140a6:	f1bc 0f00 	cmp.w	ip, #0
 80140aa:	d001      	beq.n	80140b0 <__lshift+0xac>
 80140ac:	f108 0602 	add.w	r6, r8, #2
 80140b0:	3e01      	subs	r6, #1
 80140b2:	4638      	mov	r0, r7
 80140b4:	4621      	mov	r1, r4
 80140b6:	612e      	str	r6, [r5, #16]
 80140b8:	f7ff fd8c 	bl	8013bd4 <_Bfree>
 80140bc:	4628      	mov	r0, r5
 80140be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80140c6:	3301      	adds	r3, #1
 80140c8:	e7c1      	b.n	801404e <__lshift+0x4a>
 80140ca:	3904      	subs	r1, #4
 80140cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80140d0:	4298      	cmp	r0, r3
 80140d2:	f841 2f04 	str.w	r2, [r1, #4]!
 80140d6:	d8f9      	bhi.n	80140cc <__lshift+0xc8>
 80140d8:	e7ea      	b.n	80140b0 <__lshift+0xac>
 80140da:	bf00      	nop
 80140dc:	08015cb1 	.word	0x08015cb1
 80140e0:	08015d3c 	.word	0x08015d3c

080140e4 <__mcmp>:
 80140e4:	4603      	mov	r3, r0
 80140e6:	690a      	ldr	r2, [r1, #16]
 80140e8:	6900      	ldr	r0, [r0, #16]
 80140ea:	b530      	push	{r4, r5, lr}
 80140ec:	1a80      	subs	r0, r0, r2
 80140ee:	d10d      	bne.n	801410c <__mcmp+0x28>
 80140f0:	3314      	adds	r3, #20
 80140f2:	3114      	adds	r1, #20
 80140f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80140f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80140fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014100:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014104:	4295      	cmp	r5, r2
 8014106:	d002      	beq.n	801410e <__mcmp+0x2a>
 8014108:	d304      	bcc.n	8014114 <__mcmp+0x30>
 801410a:	2001      	movs	r0, #1
 801410c:	bd30      	pop	{r4, r5, pc}
 801410e:	42a3      	cmp	r3, r4
 8014110:	d3f4      	bcc.n	80140fc <__mcmp+0x18>
 8014112:	e7fb      	b.n	801410c <__mcmp+0x28>
 8014114:	f04f 30ff 	mov.w	r0, #4294967295
 8014118:	e7f8      	b.n	801410c <__mcmp+0x28>
	...

0801411c <__mdiff>:
 801411c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014120:	460d      	mov	r5, r1
 8014122:	4607      	mov	r7, r0
 8014124:	4611      	mov	r1, r2
 8014126:	4628      	mov	r0, r5
 8014128:	4614      	mov	r4, r2
 801412a:	f7ff ffdb 	bl	80140e4 <__mcmp>
 801412e:	1e06      	subs	r6, r0, #0
 8014130:	d111      	bne.n	8014156 <__mdiff+0x3a>
 8014132:	4631      	mov	r1, r6
 8014134:	4638      	mov	r0, r7
 8014136:	f7ff fd0d 	bl	8013b54 <_Balloc>
 801413a:	4602      	mov	r2, r0
 801413c:	b928      	cbnz	r0, 801414a <__mdiff+0x2e>
 801413e:	f240 2132 	movw	r1, #562	; 0x232
 8014142:	4b3a      	ldr	r3, [pc, #232]	; (801422c <__mdiff+0x110>)
 8014144:	483a      	ldr	r0, [pc, #232]	; (8014230 <__mdiff+0x114>)
 8014146:	f7fe f9e5 	bl	8012514 <__assert_func>
 801414a:	2301      	movs	r3, #1
 801414c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014150:	4610      	mov	r0, r2
 8014152:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014156:	bfa4      	itt	ge
 8014158:	4623      	movge	r3, r4
 801415a:	462c      	movge	r4, r5
 801415c:	4638      	mov	r0, r7
 801415e:	6861      	ldr	r1, [r4, #4]
 8014160:	bfa6      	itte	ge
 8014162:	461d      	movge	r5, r3
 8014164:	2600      	movge	r6, #0
 8014166:	2601      	movlt	r6, #1
 8014168:	f7ff fcf4 	bl	8013b54 <_Balloc>
 801416c:	4602      	mov	r2, r0
 801416e:	b918      	cbnz	r0, 8014178 <__mdiff+0x5c>
 8014170:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014174:	4b2d      	ldr	r3, [pc, #180]	; (801422c <__mdiff+0x110>)
 8014176:	e7e5      	b.n	8014144 <__mdiff+0x28>
 8014178:	f102 0814 	add.w	r8, r2, #20
 801417c:	46c2      	mov	sl, r8
 801417e:	f04f 0c00 	mov.w	ip, #0
 8014182:	6927      	ldr	r7, [r4, #16]
 8014184:	60c6      	str	r6, [r0, #12]
 8014186:	692e      	ldr	r6, [r5, #16]
 8014188:	f104 0014 	add.w	r0, r4, #20
 801418c:	f105 0914 	add.w	r9, r5, #20
 8014190:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8014194:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014198:	3410      	adds	r4, #16
 801419a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801419e:	f859 3b04 	ldr.w	r3, [r9], #4
 80141a2:	fa1f f18b 	uxth.w	r1, fp
 80141a6:	448c      	add	ip, r1
 80141a8:	b299      	uxth	r1, r3
 80141aa:	0c1b      	lsrs	r3, r3, #16
 80141ac:	ebac 0101 	sub.w	r1, ip, r1
 80141b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80141b4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80141b8:	b289      	uxth	r1, r1
 80141ba:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80141be:	454e      	cmp	r6, r9
 80141c0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80141c4:	f84a 3b04 	str.w	r3, [sl], #4
 80141c8:	d8e7      	bhi.n	801419a <__mdiff+0x7e>
 80141ca:	1b73      	subs	r3, r6, r5
 80141cc:	3b15      	subs	r3, #21
 80141ce:	f023 0303 	bic.w	r3, r3, #3
 80141d2:	3515      	adds	r5, #21
 80141d4:	3304      	adds	r3, #4
 80141d6:	42ae      	cmp	r6, r5
 80141d8:	bf38      	it	cc
 80141da:	2304      	movcc	r3, #4
 80141dc:	4418      	add	r0, r3
 80141de:	4443      	add	r3, r8
 80141e0:	461e      	mov	r6, r3
 80141e2:	4605      	mov	r5, r0
 80141e4:	4575      	cmp	r5, lr
 80141e6:	d30e      	bcc.n	8014206 <__mdiff+0xea>
 80141e8:	f10e 0103 	add.w	r1, lr, #3
 80141ec:	1a09      	subs	r1, r1, r0
 80141ee:	f021 0103 	bic.w	r1, r1, #3
 80141f2:	3803      	subs	r0, #3
 80141f4:	4586      	cmp	lr, r0
 80141f6:	bf38      	it	cc
 80141f8:	2100      	movcc	r1, #0
 80141fa:	4419      	add	r1, r3
 80141fc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8014200:	b18b      	cbz	r3, 8014226 <__mdiff+0x10a>
 8014202:	6117      	str	r7, [r2, #16]
 8014204:	e7a4      	b.n	8014150 <__mdiff+0x34>
 8014206:	f855 8b04 	ldr.w	r8, [r5], #4
 801420a:	fa1f f188 	uxth.w	r1, r8
 801420e:	4461      	add	r1, ip
 8014210:	140c      	asrs	r4, r1, #16
 8014212:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014216:	b289      	uxth	r1, r1
 8014218:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801421c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8014220:	f846 1b04 	str.w	r1, [r6], #4
 8014224:	e7de      	b.n	80141e4 <__mdiff+0xc8>
 8014226:	3f01      	subs	r7, #1
 8014228:	e7e8      	b.n	80141fc <__mdiff+0xe0>
 801422a:	bf00      	nop
 801422c:	08015cb1 	.word	0x08015cb1
 8014230:	08015d3c 	.word	0x08015d3c

08014234 <__ulp>:
 8014234:	4b11      	ldr	r3, [pc, #68]	; (801427c <__ulp+0x48>)
 8014236:	400b      	ands	r3, r1
 8014238:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801423c:	2b00      	cmp	r3, #0
 801423e:	dd02      	ble.n	8014246 <__ulp+0x12>
 8014240:	2000      	movs	r0, #0
 8014242:	4619      	mov	r1, r3
 8014244:	4770      	bx	lr
 8014246:	425b      	negs	r3, r3
 8014248:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801424c:	f04f 0000 	mov.w	r0, #0
 8014250:	f04f 0100 	mov.w	r1, #0
 8014254:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014258:	da04      	bge.n	8014264 <__ulp+0x30>
 801425a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801425e:	fa43 f102 	asr.w	r1, r3, r2
 8014262:	4770      	bx	lr
 8014264:	f1a2 0314 	sub.w	r3, r2, #20
 8014268:	2b1e      	cmp	r3, #30
 801426a:	bfd6      	itet	le
 801426c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8014270:	2301      	movgt	r3, #1
 8014272:	fa22 f303 	lsrle.w	r3, r2, r3
 8014276:	4618      	mov	r0, r3
 8014278:	4770      	bx	lr
 801427a:	bf00      	nop
 801427c:	7ff00000 	.word	0x7ff00000

08014280 <__b2d>:
 8014280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014284:	6907      	ldr	r7, [r0, #16]
 8014286:	f100 0914 	add.w	r9, r0, #20
 801428a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 801428e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8014292:	f1a7 0804 	sub.w	r8, r7, #4
 8014296:	4630      	mov	r0, r6
 8014298:	f7ff fd4e 	bl	8013d38 <__hi0bits>
 801429c:	f1c0 0320 	rsb	r3, r0, #32
 80142a0:	280a      	cmp	r0, #10
 80142a2:	600b      	str	r3, [r1, #0]
 80142a4:	491f      	ldr	r1, [pc, #124]	; (8014324 <__b2d+0xa4>)
 80142a6:	dc17      	bgt.n	80142d8 <__b2d+0x58>
 80142a8:	45c1      	cmp	r9, r8
 80142aa:	bf28      	it	cs
 80142ac:	2200      	movcs	r2, #0
 80142ae:	f1c0 0c0b 	rsb	ip, r0, #11
 80142b2:	fa26 f30c 	lsr.w	r3, r6, ip
 80142b6:	bf38      	it	cc
 80142b8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80142bc:	ea43 0501 	orr.w	r5, r3, r1
 80142c0:	f100 0315 	add.w	r3, r0, #21
 80142c4:	fa06 f303 	lsl.w	r3, r6, r3
 80142c8:	fa22 f20c 	lsr.w	r2, r2, ip
 80142cc:	ea43 0402 	orr.w	r4, r3, r2
 80142d0:	4620      	mov	r0, r4
 80142d2:	4629      	mov	r1, r5
 80142d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142d8:	45c1      	cmp	r9, r8
 80142da:	bf2e      	itee	cs
 80142dc:	2200      	movcs	r2, #0
 80142de:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80142e2:	f1a7 0808 	subcc.w	r8, r7, #8
 80142e6:	f1b0 030b 	subs.w	r3, r0, #11
 80142ea:	d016      	beq.n	801431a <__b2d+0x9a>
 80142ec:	f1c3 0720 	rsb	r7, r3, #32
 80142f0:	fa22 f107 	lsr.w	r1, r2, r7
 80142f4:	45c8      	cmp	r8, r9
 80142f6:	fa06 f603 	lsl.w	r6, r6, r3
 80142fa:	ea46 0601 	orr.w	r6, r6, r1
 80142fe:	bf94      	ite	ls
 8014300:	2100      	movls	r1, #0
 8014302:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8014306:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 801430a:	fa02 f003 	lsl.w	r0, r2, r3
 801430e:	40f9      	lsrs	r1, r7
 8014310:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014314:	ea40 0401 	orr.w	r4, r0, r1
 8014318:	e7da      	b.n	80142d0 <__b2d+0x50>
 801431a:	4614      	mov	r4, r2
 801431c:	ea46 0501 	orr.w	r5, r6, r1
 8014320:	e7d6      	b.n	80142d0 <__b2d+0x50>
 8014322:	bf00      	nop
 8014324:	3ff00000 	.word	0x3ff00000

08014328 <__d2b>:
 8014328:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801432c:	2101      	movs	r1, #1
 801432e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8014332:	4690      	mov	r8, r2
 8014334:	461d      	mov	r5, r3
 8014336:	f7ff fc0d 	bl	8013b54 <_Balloc>
 801433a:	4604      	mov	r4, r0
 801433c:	b930      	cbnz	r0, 801434c <__d2b+0x24>
 801433e:	4602      	mov	r2, r0
 8014340:	f240 310a 	movw	r1, #778	; 0x30a
 8014344:	4b24      	ldr	r3, [pc, #144]	; (80143d8 <__d2b+0xb0>)
 8014346:	4825      	ldr	r0, [pc, #148]	; (80143dc <__d2b+0xb4>)
 8014348:	f7fe f8e4 	bl	8012514 <__assert_func>
 801434c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8014350:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8014354:	bb2d      	cbnz	r5, 80143a2 <__d2b+0x7a>
 8014356:	9301      	str	r3, [sp, #4]
 8014358:	f1b8 0300 	subs.w	r3, r8, #0
 801435c:	d026      	beq.n	80143ac <__d2b+0x84>
 801435e:	4668      	mov	r0, sp
 8014360:	9300      	str	r3, [sp, #0]
 8014362:	f7ff fd09 	bl	8013d78 <__lo0bits>
 8014366:	9900      	ldr	r1, [sp, #0]
 8014368:	b1f0      	cbz	r0, 80143a8 <__d2b+0x80>
 801436a:	9a01      	ldr	r2, [sp, #4]
 801436c:	f1c0 0320 	rsb	r3, r0, #32
 8014370:	fa02 f303 	lsl.w	r3, r2, r3
 8014374:	430b      	orrs	r3, r1
 8014376:	40c2      	lsrs	r2, r0
 8014378:	6163      	str	r3, [r4, #20]
 801437a:	9201      	str	r2, [sp, #4]
 801437c:	9b01      	ldr	r3, [sp, #4]
 801437e:	2b00      	cmp	r3, #0
 8014380:	bf14      	ite	ne
 8014382:	2102      	movne	r1, #2
 8014384:	2101      	moveq	r1, #1
 8014386:	61a3      	str	r3, [r4, #24]
 8014388:	6121      	str	r1, [r4, #16]
 801438a:	b1c5      	cbz	r5, 80143be <__d2b+0x96>
 801438c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014390:	4405      	add	r5, r0
 8014392:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014396:	603d      	str	r5, [r7, #0]
 8014398:	6030      	str	r0, [r6, #0]
 801439a:	4620      	mov	r0, r4
 801439c:	b002      	add	sp, #8
 801439e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80143a6:	e7d6      	b.n	8014356 <__d2b+0x2e>
 80143a8:	6161      	str	r1, [r4, #20]
 80143aa:	e7e7      	b.n	801437c <__d2b+0x54>
 80143ac:	a801      	add	r0, sp, #4
 80143ae:	f7ff fce3 	bl	8013d78 <__lo0bits>
 80143b2:	2101      	movs	r1, #1
 80143b4:	9b01      	ldr	r3, [sp, #4]
 80143b6:	6121      	str	r1, [r4, #16]
 80143b8:	6163      	str	r3, [r4, #20]
 80143ba:	3020      	adds	r0, #32
 80143bc:	e7e5      	b.n	801438a <__d2b+0x62>
 80143be:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80143c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80143c6:	6038      	str	r0, [r7, #0]
 80143c8:	6918      	ldr	r0, [r3, #16]
 80143ca:	f7ff fcb5 	bl	8013d38 <__hi0bits>
 80143ce:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80143d2:	6031      	str	r1, [r6, #0]
 80143d4:	e7e1      	b.n	801439a <__d2b+0x72>
 80143d6:	bf00      	nop
 80143d8:	08015cb1 	.word	0x08015cb1
 80143dc:	08015d3c 	.word	0x08015d3c

080143e0 <__ratio>:
 80143e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143e4:	4688      	mov	r8, r1
 80143e6:	4669      	mov	r1, sp
 80143e8:	4681      	mov	r9, r0
 80143ea:	f7ff ff49 	bl	8014280 <__b2d>
 80143ee:	460f      	mov	r7, r1
 80143f0:	4604      	mov	r4, r0
 80143f2:	460d      	mov	r5, r1
 80143f4:	4640      	mov	r0, r8
 80143f6:	a901      	add	r1, sp, #4
 80143f8:	f7ff ff42 	bl	8014280 <__b2d>
 80143fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014400:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014404:	468b      	mov	fp, r1
 8014406:	eba3 0c02 	sub.w	ip, r3, r2
 801440a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801440e:	1a9b      	subs	r3, r3, r2
 8014410:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014414:	2b00      	cmp	r3, #0
 8014416:	bfd5      	itete	le
 8014418:	460a      	movle	r2, r1
 801441a:	462a      	movgt	r2, r5
 801441c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014420:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014424:	bfd8      	it	le
 8014426:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801442a:	465b      	mov	r3, fp
 801442c:	4602      	mov	r2, r0
 801442e:	4639      	mov	r1, r7
 8014430:	4620      	mov	r0, r4
 8014432:	f7ec f9eb 	bl	800080c <__aeabi_ddiv>
 8014436:	b003      	add	sp, #12
 8014438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801443c <__copybits>:
 801443c:	3901      	subs	r1, #1
 801443e:	b570      	push	{r4, r5, r6, lr}
 8014440:	1149      	asrs	r1, r1, #5
 8014442:	6914      	ldr	r4, [r2, #16]
 8014444:	3101      	adds	r1, #1
 8014446:	f102 0314 	add.w	r3, r2, #20
 801444a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801444e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014452:	1f05      	subs	r5, r0, #4
 8014454:	42a3      	cmp	r3, r4
 8014456:	d30c      	bcc.n	8014472 <__copybits+0x36>
 8014458:	1aa3      	subs	r3, r4, r2
 801445a:	3b11      	subs	r3, #17
 801445c:	f023 0303 	bic.w	r3, r3, #3
 8014460:	3211      	adds	r2, #17
 8014462:	42a2      	cmp	r2, r4
 8014464:	bf88      	it	hi
 8014466:	2300      	movhi	r3, #0
 8014468:	4418      	add	r0, r3
 801446a:	2300      	movs	r3, #0
 801446c:	4288      	cmp	r0, r1
 801446e:	d305      	bcc.n	801447c <__copybits+0x40>
 8014470:	bd70      	pop	{r4, r5, r6, pc}
 8014472:	f853 6b04 	ldr.w	r6, [r3], #4
 8014476:	f845 6f04 	str.w	r6, [r5, #4]!
 801447a:	e7eb      	b.n	8014454 <__copybits+0x18>
 801447c:	f840 3b04 	str.w	r3, [r0], #4
 8014480:	e7f4      	b.n	801446c <__copybits+0x30>

08014482 <__any_on>:
 8014482:	f100 0214 	add.w	r2, r0, #20
 8014486:	6900      	ldr	r0, [r0, #16]
 8014488:	114b      	asrs	r3, r1, #5
 801448a:	4298      	cmp	r0, r3
 801448c:	b510      	push	{r4, lr}
 801448e:	db11      	blt.n	80144b4 <__any_on+0x32>
 8014490:	dd0a      	ble.n	80144a8 <__any_on+0x26>
 8014492:	f011 011f 	ands.w	r1, r1, #31
 8014496:	d007      	beq.n	80144a8 <__any_on+0x26>
 8014498:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801449c:	fa24 f001 	lsr.w	r0, r4, r1
 80144a0:	fa00 f101 	lsl.w	r1, r0, r1
 80144a4:	428c      	cmp	r4, r1
 80144a6:	d10b      	bne.n	80144c0 <__any_on+0x3e>
 80144a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80144ac:	4293      	cmp	r3, r2
 80144ae:	d803      	bhi.n	80144b8 <__any_on+0x36>
 80144b0:	2000      	movs	r0, #0
 80144b2:	bd10      	pop	{r4, pc}
 80144b4:	4603      	mov	r3, r0
 80144b6:	e7f7      	b.n	80144a8 <__any_on+0x26>
 80144b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80144bc:	2900      	cmp	r1, #0
 80144be:	d0f5      	beq.n	80144ac <__any_on+0x2a>
 80144c0:	2001      	movs	r0, #1
 80144c2:	e7f6      	b.n	80144b2 <__any_on+0x30>

080144c4 <_calloc_r>:
 80144c4:	b570      	push	{r4, r5, r6, lr}
 80144c6:	fba1 5402 	umull	r5, r4, r1, r2
 80144ca:	b934      	cbnz	r4, 80144da <_calloc_r+0x16>
 80144cc:	4629      	mov	r1, r5
 80144ce:	f7fc fa77 	bl	80109c0 <_malloc_r>
 80144d2:	4606      	mov	r6, r0
 80144d4:	b928      	cbnz	r0, 80144e2 <_calloc_r+0x1e>
 80144d6:	4630      	mov	r0, r6
 80144d8:	bd70      	pop	{r4, r5, r6, pc}
 80144da:	220c      	movs	r2, #12
 80144dc:	2600      	movs	r6, #0
 80144de:	6002      	str	r2, [r0, #0]
 80144e0:	e7f9      	b.n	80144d6 <_calloc_r+0x12>
 80144e2:	462a      	mov	r2, r5
 80144e4:	4621      	mov	r1, r4
 80144e6:	f7fc f9fb 	bl	80108e0 <memset>
 80144ea:	e7f4      	b.n	80144d6 <_calloc_r+0x12>

080144ec <__ssputs_r>:
 80144ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144f0:	688e      	ldr	r6, [r1, #8]
 80144f2:	4682      	mov	sl, r0
 80144f4:	429e      	cmp	r6, r3
 80144f6:	460c      	mov	r4, r1
 80144f8:	4690      	mov	r8, r2
 80144fa:	461f      	mov	r7, r3
 80144fc:	d838      	bhi.n	8014570 <__ssputs_r+0x84>
 80144fe:	898a      	ldrh	r2, [r1, #12]
 8014500:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014504:	d032      	beq.n	801456c <__ssputs_r+0x80>
 8014506:	6825      	ldr	r5, [r4, #0]
 8014508:	6909      	ldr	r1, [r1, #16]
 801450a:	3301      	adds	r3, #1
 801450c:	eba5 0901 	sub.w	r9, r5, r1
 8014510:	6965      	ldr	r5, [r4, #20]
 8014512:	444b      	add	r3, r9
 8014514:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014518:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801451c:	106d      	asrs	r5, r5, #1
 801451e:	429d      	cmp	r5, r3
 8014520:	bf38      	it	cc
 8014522:	461d      	movcc	r5, r3
 8014524:	0553      	lsls	r3, r2, #21
 8014526:	d531      	bpl.n	801458c <__ssputs_r+0xa0>
 8014528:	4629      	mov	r1, r5
 801452a:	f7fc fa49 	bl	80109c0 <_malloc_r>
 801452e:	4606      	mov	r6, r0
 8014530:	b950      	cbnz	r0, 8014548 <__ssputs_r+0x5c>
 8014532:	230c      	movs	r3, #12
 8014534:	f04f 30ff 	mov.w	r0, #4294967295
 8014538:	f8ca 3000 	str.w	r3, [sl]
 801453c:	89a3      	ldrh	r3, [r4, #12]
 801453e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014542:	81a3      	strh	r3, [r4, #12]
 8014544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014548:	464a      	mov	r2, r9
 801454a:	6921      	ldr	r1, [r4, #16]
 801454c:	f7fc f9ba 	bl	80108c4 <memcpy>
 8014550:	89a3      	ldrh	r3, [r4, #12]
 8014552:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801455a:	81a3      	strh	r3, [r4, #12]
 801455c:	6126      	str	r6, [r4, #16]
 801455e:	444e      	add	r6, r9
 8014560:	6026      	str	r6, [r4, #0]
 8014562:	463e      	mov	r6, r7
 8014564:	6165      	str	r5, [r4, #20]
 8014566:	eba5 0509 	sub.w	r5, r5, r9
 801456a:	60a5      	str	r5, [r4, #8]
 801456c:	42be      	cmp	r6, r7
 801456e:	d900      	bls.n	8014572 <__ssputs_r+0x86>
 8014570:	463e      	mov	r6, r7
 8014572:	4632      	mov	r2, r6
 8014574:	4641      	mov	r1, r8
 8014576:	6820      	ldr	r0, [r4, #0]
 8014578:	f000 fbd6 	bl	8014d28 <memmove>
 801457c:	68a3      	ldr	r3, [r4, #8]
 801457e:	2000      	movs	r0, #0
 8014580:	1b9b      	subs	r3, r3, r6
 8014582:	60a3      	str	r3, [r4, #8]
 8014584:	6823      	ldr	r3, [r4, #0]
 8014586:	4433      	add	r3, r6
 8014588:	6023      	str	r3, [r4, #0]
 801458a:	e7db      	b.n	8014544 <__ssputs_r+0x58>
 801458c:	462a      	mov	r2, r5
 801458e:	f000 fbe5 	bl	8014d5c <_realloc_r>
 8014592:	4606      	mov	r6, r0
 8014594:	2800      	cmp	r0, #0
 8014596:	d1e1      	bne.n	801455c <__ssputs_r+0x70>
 8014598:	4650      	mov	r0, sl
 801459a:	6921      	ldr	r1, [r4, #16]
 801459c:	f7fc f9a8 	bl	80108f0 <_free_r>
 80145a0:	e7c7      	b.n	8014532 <__ssputs_r+0x46>
	...

080145a4 <_svfiprintf_r>:
 80145a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145a8:	4698      	mov	r8, r3
 80145aa:	898b      	ldrh	r3, [r1, #12]
 80145ac:	4607      	mov	r7, r0
 80145ae:	061b      	lsls	r3, r3, #24
 80145b0:	460d      	mov	r5, r1
 80145b2:	4614      	mov	r4, r2
 80145b4:	b09d      	sub	sp, #116	; 0x74
 80145b6:	d50e      	bpl.n	80145d6 <_svfiprintf_r+0x32>
 80145b8:	690b      	ldr	r3, [r1, #16]
 80145ba:	b963      	cbnz	r3, 80145d6 <_svfiprintf_r+0x32>
 80145bc:	2140      	movs	r1, #64	; 0x40
 80145be:	f7fc f9ff 	bl	80109c0 <_malloc_r>
 80145c2:	6028      	str	r0, [r5, #0]
 80145c4:	6128      	str	r0, [r5, #16]
 80145c6:	b920      	cbnz	r0, 80145d2 <_svfiprintf_r+0x2e>
 80145c8:	230c      	movs	r3, #12
 80145ca:	603b      	str	r3, [r7, #0]
 80145cc:	f04f 30ff 	mov.w	r0, #4294967295
 80145d0:	e0d1      	b.n	8014776 <_svfiprintf_r+0x1d2>
 80145d2:	2340      	movs	r3, #64	; 0x40
 80145d4:	616b      	str	r3, [r5, #20]
 80145d6:	2300      	movs	r3, #0
 80145d8:	9309      	str	r3, [sp, #36]	; 0x24
 80145da:	2320      	movs	r3, #32
 80145dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80145e0:	2330      	movs	r3, #48	; 0x30
 80145e2:	f04f 0901 	mov.w	r9, #1
 80145e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80145ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014790 <_svfiprintf_r+0x1ec>
 80145ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80145f2:	4623      	mov	r3, r4
 80145f4:	469a      	mov	sl, r3
 80145f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80145fa:	b10a      	cbz	r2, 8014600 <_svfiprintf_r+0x5c>
 80145fc:	2a25      	cmp	r2, #37	; 0x25
 80145fe:	d1f9      	bne.n	80145f4 <_svfiprintf_r+0x50>
 8014600:	ebba 0b04 	subs.w	fp, sl, r4
 8014604:	d00b      	beq.n	801461e <_svfiprintf_r+0x7a>
 8014606:	465b      	mov	r3, fp
 8014608:	4622      	mov	r2, r4
 801460a:	4629      	mov	r1, r5
 801460c:	4638      	mov	r0, r7
 801460e:	f7ff ff6d 	bl	80144ec <__ssputs_r>
 8014612:	3001      	adds	r0, #1
 8014614:	f000 80aa 	beq.w	801476c <_svfiprintf_r+0x1c8>
 8014618:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801461a:	445a      	add	r2, fp
 801461c:	9209      	str	r2, [sp, #36]	; 0x24
 801461e:	f89a 3000 	ldrb.w	r3, [sl]
 8014622:	2b00      	cmp	r3, #0
 8014624:	f000 80a2 	beq.w	801476c <_svfiprintf_r+0x1c8>
 8014628:	2300      	movs	r3, #0
 801462a:	f04f 32ff 	mov.w	r2, #4294967295
 801462e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014632:	f10a 0a01 	add.w	sl, sl, #1
 8014636:	9304      	str	r3, [sp, #16]
 8014638:	9307      	str	r3, [sp, #28]
 801463a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801463e:	931a      	str	r3, [sp, #104]	; 0x68
 8014640:	4654      	mov	r4, sl
 8014642:	2205      	movs	r2, #5
 8014644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014648:	4851      	ldr	r0, [pc, #324]	; (8014790 <_svfiprintf_r+0x1ec>)
 801464a:	f7ff fa69 	bl	8013b20 <memchr>
 801464e:	9a04      	ldr	r2, [sp, #16]
 8014650:	b9d8      	cbnz	r0, 801468a <_svfiprintf_r+0xe6>
 8014652:	06d0      	lsls	r0, r2, #27
 8014654:	bf44      	itt	mi
 8014656:	2320      	movmi	r3, #32
 8014658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801465c:	0711      	lsls	r1, r2, #28
 801465e:	bf44      	itt	mi
 8014660:	232b      	movmi	r3, #43	; 0x2b
 8014662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014666:	f89a 3000 	ldrb.w	r3, [sl]
 801466a:	2b2a      	cmp	r3, #42	; 0x2a
 801466c:	d015      	beq.n	801469a <_svfiprintf_r+0xf6>
 801466e:	4654      	mov	r4, sl
 8014670:	2000      	movs	r0, #0
 8014672:	f04f 0c0a 	mov.w	ip, #10
 8014676:	9a07      	ldr	r2, [sp, #28]
 8014678:	4621      	mov	r1, r4
 801467a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801467e:	3b30      	subs	r3, #48	; 0x30
 8014680:	2b09      	cmp	r3, #9
 8014682:	d94e      	bls.n	8014722 <_svfiprintf_r+0x17e>
 8014684:	b1b0      	cbz	r0, 80146b4 <_svfiprintf_r+0x110>
 8014686:	9207      	str	r2, [sp, #28]
 8014688:	e014      	b.n	80146b4 <_svfiprintf_r+0x110>
 801468a:	eba0 0308 	sub.w	r3, r0, r8
 801468e:	fa09 f303 	lsl.w	r3, r9, r3
 8014692:	4313      	orrs	r3, r2
 8014694:	46a2      	mov	sl, r4
 8014696:	9304      	str	r3, [sp, #16]
 8014698:	e7d2      	b.n	8014640 <_svfiprintf_r+0x9c>
 801469a:	9b03      	ldr	r3, [sp, #12]
 801469c:	1d19      	adds	r1, r3, #4
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	9103      	str	r1, [sp, #12]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	bfbb      	ittet	lt
 80146a6:	425b      	neglt	r3, r3
 80146a8:	f042 0202 	orrlt.w	r2, r2, #2
 80146ac:	9307      	strge	r3, [sp, #28]
 80146ae:	9307      	strlt	r3, [sp, #28]
 80146b0:	bfb8      	it	lt
 80146b2:	9204      	strlt	r2, [sp, #16]
 80146b4:	7823      	ldrb	r3, [r4, #0]
 80146b6:	2b2e      	cmp	r3, #46	; 0x2e
 80146b8:	d10c      	bne.n	80146d4 <_svfiprintf_r+0x130>
 80146ba:	7863      	ldrb	r3, [r4, #1]
 80146bc:	2b2a      	cmp	r3, #42	; 0x2a
 80146be:	d135      	bne.n	801472c <_svfiprintf_r+0x188>
 80146c0:	9b03      	ldr	r3, [sp, #12]
 80146c2:	3402      	adds	r4, #2
 80146c4:	1d1a      	adds	r2, r3, #4
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	9203      	str	r2, [sp, #12]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	bfb8      	it	lt
 80146ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80146d2:	9305      	str	r3, [sp, #20]
 80146d4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8014794 <_svfiprintf_r+0x1f0>
 80146d8:	2203      	movs	r2, #3
 80146da:	4650      	mov	r0, sl
 80146dc:	7821      	ldrb	r1, [r4, #0]
 80146de:	f7ff fa1f 	bl	8013b20 <memchr>
 80146e2:	b140      	cbz	r0, 80146f6 <_svfiprintf_r+0x152>
 80146e4:	2340      	movs	r3, #64	; 0x40
 80146e6:	eba0 000a 	sub.w	r0, r0, sl
 80146ea:	fa03 f000 	lsl.w	r0, r3, r0
 80146ee:	9b04      	ldr	r3, [sp, #16]
 80146f0:	3401      	adds	r4, #1
 80146f2:	4303      	orrs	r3, r0
 80146f4:	9304      	str	r3, [sp, #16]
 80146f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146fa:	2206      	movs	r2, #6
 80146fc:	4826      	ldr	r0, [pc, #152]	; (8014798 <_svfiprintf_r+0x1f4>)
 80146fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014702:	f7ff fa0d 	bl	8013b20 <memchr>
 8014706:	2800      	cmp	r0, #0
 8014708:	d038      	beq.n	801477c <_svfiprintf_r+0x1d8>
 801470a:	4b24      	ldr	r3, [pc, #144]	; (801479c <_svfiprintf_r+0x1f8>)
 801470c:	bb1b      	cbnz	r3, 8014756 <_svfiprintf_r+0x1b2>
 801470e:	9b03      	ldr	r3, [sp, #12]
 8014710:	3307      	adds	r3, #7
 8014712:	f023 0307 	bic.w	r3, r3, #7
 8014716:	3308      	adds	r3, #8
 8014718:	9303      	str	r3, [sp, #12]
 801471a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801471c:	4433      	add	r3, r6
 801471e:	9309      	str	r3, [sp, #36]	; 0x24
 8014720:	e767      	b.n	80145f2 <_svfiprintf_r+0x4e>
 8014722:	460c      	mov	r4, r1
 8014724:	2001      	movs	r0, #1
 8014726:	fb0c 3202 	mla	r2, ip, r2, r3
 801472a:	e7a5      	b.n	8014678 <_svfiprintf_r+0xd4>
 801472c:	2300      	movs	r3, #0
 801472e:	f04f 0c0a 	mov.w	ip, #10
 8014732:	4619      	mov	r1, r3
 8014734:	3401      	adds	r4, #1
 8014736:	9305      	str	r3, [sp, #20]
 8014738:	4620      	mov	r0, r4
 801473a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801473e:	3a30      	subs	r2, #48	; 0x30
 8014740:	2a09      	cmp	r2, #9
 8014742:	d903      	bls.n	801474c <_svfiprintf_r+0x1a8>
 8014744:	2b00      	cmp	r3, #0
 8014746:	d0c5      	beq.n	80146d4 <_svfiprintf_r+0x130>
 8014748:	9105      	str	r1, [sp, #20]
 801474a:	e7c3      	b.n	80146d4 <_svfiprintf_r+0x130>
 801474c:	4604      	mov	r4, r0
 801474e:	2301      	movs	r3, #1
 8014750:	fb0c 2101 	mla	r1, ip, r1, r2
 8014754:	e7f0      	b.n	8014738 <_svfiprintf_r+0x194>
 8014756:	ab03      	add	r3, sp, #12
 8014758:	9300      	str	r3, [sp, #0]
 801475a:	462a      	mov	r2, r5
 801475c:	4638      	mov	r0, r7
 801475e:	4b10      	ldr	r3, [pc, #64]	; (80147a0 <_svfiprintf_r+0x1fc>)
 8014760:	a904      	add	r1, sp, #16
 8014762:	f7fc fa3f 	bl	8010be4 <_printf_float>
 8014766:	1c42      	adds	r2, r0, #1
 8014768:	4606      	mov	r6, r0
 801476a:	d1d6      	bne.n	801471a <_svfiprintf_r+0x176>
 801476c:	89ab      	ldrh	r3, [r5, #12]
 801476e:	065b      	lsls	r3, r3, #25
 8014770:	f53f af2c 	bmi.w	80145cc <_svfiprintf_r+0x28>
 8014774:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014776:	b01d      	add	sp, #116	; 0x74
 8014778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801477c:	ab03      	add	r3, sp, #12
 801477e:	9300      	str	r3, [sp, #0]
 8014780:	462a      	mov	r2, r5
 8014782:	4638      	mov	r0, r7
 8014784:	4b06      	ldr	r3, [pc, #24]	; (80147a0 <_svfiprintf_r+0x1fc>)
 8014786:	a904      	add	r1, sp, #16
 8014788:	f7fc fcc8 	bl	801111c <_printf_i>
 801478c:	e7eb      	b.n	8014766 <_svfiprintf_r+0x1c2>
 801478e:	bf00      	nop
 8014790:	08015e94 	.word	0x08015e94
 8014794:	08015e9a 	.word	0x08015e9a
 8014798:	08015e9e 	.word	0x08015e9e
 801479c:	08010be5 	.word	0x08010be5
 80147a0:	080144ed 	.word	0x080144ed

080147a4 <__sfputc_r>:
 80147a4:	6893      	ldr	r3, [r2, #8]
 80147a6:	b410      	push	{r4}
 80147a8:	3b01      	subs	r3, #1
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	6093      	str	r3, [r2, #8]
 80147ae:	da07      	bge.n	80147c0 <__sfputc_r+0x1c>
 80147b0:	6994      	ldr	r4, [r2, #24]
 80147b2:	42a3      	cmp	r3, r4
 80147b4:	db01      	blt.n	80147ba <__sfputc_r+0x16>
 80147b6:	290a      	cmp	r1, #10
 80147b8:	d102      	bne.n	80147c0 <__sfputc_r+0x1c>
 80147ba:	bc10      	pop	{r4}
 80147bc:	f000 b97a 	b.w	8014ab4 <__swbuf_r>
 80147c0:	6813      	ldr	r3, [r2, #0]
 80147c2:	1c58      	adds	r0, r3, #1
 80147c4:	6010      	str	r0, [r2, #0]
 80147c6:	7019      	strb	r1, [r3, #0]
 80147c8:	4608      	mov	r0, r1
 80147ca:	bc10      	pop	{r4}
 80147cc:	4770      	bx	lr

080147ce <__sfputs_r>:
 80147ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147d0:	4606      	mov	r6, r0
 80147d2:	460f      	mov	r7, r1
 80147d4:	4614      	mov	r4, r2
 80147d6:	18d5      	adds	r5, r2, r3
 80147d8:	42ac      	cmp	r4, r5
 80147da:	d101      	bne.n	80147e0 <__sfputs_r+0x12>
 80147dc:	2000      	movs	r0, #0
 80147de:	e007      	b.n	80147f0 <__sfputs_r+0x22>
 80147e0:	463a      	mov	r2, r7
 80147e2:	4630      	mov	r0, r6
 80147e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147e8:	f7ff ffdc 	bl	80147a4 <__sfputc_r>
 80147ec:	1c43      	adds	r3, r0, #1
 80147ee:	d1f3      	bne.n	80147d8 <__sfputs_r+0xa>
 80147f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080147f4 <_vfiprintf_r>:
 80147f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147f8:	460d      	mov	r5, r1
 80147fa:	4614      	mov	r4, r2
 80147fc:	4698      	mov	r8, r3
 80147fe:	4606      	mov	r6, r0
 8014800:	b09d      	sub	sp, #116	; 0x74
 8014802:	b118      	cbz	r0, 801480c <_vfiprintf_r+0x18>
 8014804:	6983      	ldr	r3, [r0, #24]
 8014806:	b90b      	cbnz	r3, 801480c <_vfiprintf_r+0x18>
 8014808:	f7fb ff86 	bl	8010718 <__sinit>
 801480c:	4b89      	ldr	r3, [pc, #548]	; (8014a34 <_vfiprintf_r+0x240>)
 801480e:	429d      	cmp	r5, r3
 8014810:	d11b      	bne.n	801484a <_vfiprintf_r+0x56>
 8014812:	6875      	ldr	r5, [r6, #4]
 8014814:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014816:	07d9      	lsls	r1, r3, #31
 8014818:	d405      	bmi.n	8014826 <_vfiprintf_r+0x32>
 801481a:	89ab      	ldrh	r3, [r5, #12]
 801481c:	059a      	lsls	r2, r3, #22
 801481e:	d402      	bmi.n	8014826 <_vfiprintf_r+0x32>
 8014820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014822:	f7fc f83c 	bl	801089e <__retarget_lock_acquire_recursive>
 8014826:	89ab      	ldrh	r3, [r5, #12]
 8014828:	071b      	lsls	r3, r3, #28
 801482a:	d501      	bpl.n	8014830 <_vfiprintf_r+0x3c>
 801482c:	692b      	ldr	r3, [r5, #16]
 801482e:	b9eb      	cbnz	r3, 801486c <_vfiprintf_r+0x78>
 8014830:	4629      	mov	r1, r5
 8014832:	4630      	mov	r0, r6
 8014834:	f000 f99e 	bl	8014b74 <__swsetup_r>
 8014838:	b1c0      	cbz	r0, 801486c <_vfiprintf_r+0x78>
 801483a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801483c:	07dc      	lsls	r4, r3, #31
 801483e:	d50e      	bpl.n	801485e <_vfiprintf_r+0x6a>
 8014840:	f04f 30ff 	mov.w	r0, #4294967295
 8014844:	b01d      	add	sp, #116	; 0x74
 8014846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801484a:	4b7b      	ldr	r3, [pc, #492]	; (8014a38 <_vfiprintf_r+0x244>)
 801484c:	429d      	cmp	r5, r3
 801484e:	d101      	bne.n	8014854 <_vfiprintf_r+0x60>
 8014850:	68b5      	ldr	r5, [r6, #8]
 8014852:	e7df      	b.n	8014814 <_vfiprintf_r+0x20>
 8014854:	4b79      	ldr	r3, [pc, #484]	; (8014a3c <_vfiprintf_r+0x248>)
 8014856:	429d      	cmp	r5, r3
 8014858:	bf08      	it	eq
 801485a:	68f5      	ldreq	r5, [r6, #12]
 801485c:	e7da      	b.n	8014814 <_vfiprintf_r+0x20>
 801485e:	89ab      	ldrh	r3, [r5, #12]
 8014860:	0598      	lsls	r0, r3, #22
 8014862:	d4ed      	bmi.n	8014840 <_vfiprintf_r+0x4c>
 8014864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014866:	f7fc f81b 	bl	80108a0 <__retarget_lock_release_recursive>
 801486a:	e7e9      	b.n	8014840 <_vfiprintf_r+0x4c>
 801486c:	2300      	movs	r3, #0
 801486e:	9309      	str	r3, [sp, #36]	; 0x24
 8014870:	2320      	movs	r3, #32
 8014872:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014876:	2330      	movs	r3, #48	; 0x30
 8014878:	f04f 0901 	mov.w	r9, #1
 801487c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014880:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8014a40 <_vfiprintf_r+0x24c>
 8014884:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014888:	4623      	mov	r3, r4
 801488a:	469a      	mov	sl, r3
 801488c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014890:	b10a      	cbz	r2, 8014896 <_vfiprintf_r+0xa2>
 8014892:	2a25      	cmp	r2, #37	; 0x25
 8014894:	d1f9      	bne.n	801488a <_vfiprintf_r+0x96>
 8014896:	ebba 0b04 	subs.w	fp, sl, r4
 801489a:	d00b      	beq.n	80148b4 <_vfiprintf_r+0xc0>
 801489c:	465b      	mov	r3, fp
 801489e:	4622      	mov	r2, r4
 80148a0:	4629      	mov	r1, r5
 80148a2:	4630      	mov	r0, r6
 80148a4:	f7ff ff93 	bl	80147ce <__sfputs_r>
 80148a8:	3001      	adds	r0, #1
 80148aa:	f000 80aa 	beq.w	8014a02 <_vfiprintf_r+0x20e>
 80148ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80148b0:	445a      	add	r2, fp
 80148b2:	9209      	str	r2, [sp, #36]	; 0x24
 80148b4:	f89a 3000 	ldrb.w	r3, [sl]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	f000 80a2 	beq.w	8014a02 <_vfiprintf_r+0x20e>
 80148be:	2300      	movs	r3, #0
 80148c0:	f04f 32ff 	mov.w	r2, #4294967295
 80148c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80148c8:	f10a 0a01 	add.w	sl, sl, #1
 80148cc:	9304      	str	r3, [sp, #16]
 80148ce:	9307      	str	r3, [sp, #28]
 80148d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80148d4:	931a      	str	r3, [sp, #104]	; 0x68
 80148d6:	4654      	mov	r4, sl
 80148d8:	2205      	movs	r2, #5
 80148da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148de:	4858      	ldr	r0, [pc, #352]	; (8014a40 <_vfiprintf_r+0x24c>)
 80148e0:	f7ff f91e 	bl	8013b20 <memchr>
 80148e4:	9a04      	ldr	r2, [sp, #16]
 80148e6:	b9d8      	cbnz	r0, 8014920 <_vfiprintf_r+0x12c>
 80148e8:	06d1      	lsls	r1, r2, #27
 80148ea:	bf44      	itt	mi
 80148ec:	2320      	movmi	r3, #32
 80148ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80148f2:	0713      	lsls	r3, r2, #28
 80148f4:	bf44      	itt	mi
 80148f6:	232b      	movmi	r3, #43	; 0x2b
 80148f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80148fc:	f89a 3000 	ldrb.w	r3, [sl]
 8014900:	2b2a      	cmp	r3, #42	; 0x2a
 8014902:	d015      	beq.n	8014930 <_vfiprintf_r+0x13c>
 8014904:	4654      	mov	r4, sl
 8014906:	2000      	movs	r0, #0
 8014908:	f04f 0c0a 	mov.w	ip, #10
 801490c:	9a07      	ldr	r2, [sp, #28]
 801490e:	4621      	mov	r1, r4
 8014910:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014914:	3b30      	subs	r3, #48	; 0x30
 8014916:	2b09      	cmp	r3, #9
 8014918:	d94e      	bls.n	80149b8 <_vfiprintf_r+0x1c4>
 801491a:	b1b0      	cbz	r0, 801494a <_vfiprintf_r+0x156>
 801491c:	9207      	str	r2, [sp, #28]
 801491e:	e014      	b.n	801494a <_vfiprintf_r+0x156>
 8014920:	eba0 0308 	sub.w	r3, r0, r8
 8014924:	fa09 f303 	lsl.w	r3, r9, r3
 8014928:	4313      	orrs	r3, r2
 801492a:	46a2      	mov	sl, r4
 801492c:	9304      	str	r3, [sp, #16]
 801492e:	e7d2      	b.n	80148d6 <_vfiprintf_r+0xe2>
 8014930:	9b03      	ldr	r3, [sp, #12]
 8014932:	1d19      	adds	r1, r3, #4
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	9103      	str	r1, [sp, #12]
 8014938:	2b00      	cmp	r3, #0
 801493a:	bfbb      	ittet	lt
 801493c:	425b      	neglt	r3, r3
 801493e:	f042 0202 	orrlt.w	r2, r2, #2
 8014942:	9307      	strge	r3, [sp, #28]
 8014944:	9307      	strlt	r3, [sp, #28]
 8014946:	bfb8      	it	lt
 8014948:	9204      	strlt	r2, [sp, #16]
 801494a:	7823      	ldrb	r3, [r4, #0]
 801494c:	2b2e      	cmp	r3, #46	; 0x2e
 801494e:	d10c      	bne.n	801496a <_vfiprintf_r+0x176>
 8014950:	7863      	ldrb	r3, [r4, #1]
 8014952:	2b2a      	cmp	r3, #42	; 0x2a
 8014954:	d135      	bne.n	80149c2 <_vfiprintf_r+0x1ce>
 8014956:	9b03      	ldr	r3, [sp, #12]
 8014958:	3402      	adds	r4, #2
 801495a:	1d1a      	adds	r2, r3, #4
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	9203      	str	r2, [sp, #12]
 8014960:	2b00      	cmp	r3, #0
 8014962:	bfb8      	it	lt
 8014964:	f04f 33ff 	movlt.w	r3, #4294967295
 8014968:	9305      	str	r3, [sp, #20]
 801496a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8014a44 <_vfiprintf_r+0x250>
 801496e:	2203      	movs	r2, #3
 8014970:	4650      	mov	r0, sl
 8014972:	7821      	ldrb	r1, [r4, #0]
 8014974:	f7ff f8d4 	bl	8013b20 <memchr>
 8014978:	b140      	cbz	r0, 801498c <_vfiprintf_r+0x198>
 801497a:	2340      	movs	r3, #64	; 0x40
 801497c:	eba0 000a 	sub.w	r0, r0, sl
 8014980:	fa03 f000 	lsl.w	r0, r3, r0
 8014984:	9b04      	ldr	r3, [sp, #16]
 8014986:	3401      	adds	r4, #1
 8014988:	4303      	orrs	r3, r0
 801498a:	9304      	str	r3, [sp, #16]
 801498c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014990:	2206      	movs	r2, #6
 8014992:	482d      	ldr	r0, [pc, #180]	; (8014a48 <_vfiprintf_r+0x254>)
 8014994:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014998:	f7ff f8c2 	bl	8013b20 <memchr>
 801499c:	2800      	cmp	r0, #0
 801499e:	d03f      	beq.n	8014a20 <_vfiprintf_r+0x22c>
 80149a0:	4b2a      	ldr	r3, [pc, #168]	; (8014a4c <_vfiprintf_r+0x258>)
 80149a2:	bb1b      	cbnz	r3, 80149ec <_vfiprintf_r+0x1f8>
 80149a4:	9b03      	ldr	r3, [sp, #12]
 80149a6:	3307      	adds	r3, #7
 80149a8:	f023 0307 	bic.w	r3, r3, #7
 80149ac:	3308      	adds	r3, #8
 80149ae:	9303      	str	r3, [sp, #12]
 80149b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149b2:	443b      	add	r3, r7
 80149b4:	9309      	str	r3, [sp, #36]	; 0x24
 80149b6:	e767      	b.n	8014888 <_vfiprintf_r+0x94>
 80149b8:	460c      	mov	r4, r1
 80149ba:	2001      	movs	r0, #1
 80149bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80149c0:	e7a5      	b.n	801490e <_vfiprintf_r+0x11a>
 80149c2:	2300      	movs	r3, #0
 80149c4:	f04f 0c0a 	mov.w	ip, #10
 80149c8:	4619      	mov	r1, r3
 80149ca:	3401      	adds	r4, #1
 80149cc:	9305      	str	r3, [sp, #20]
 80149ce:	4620      	mov	r0, r4
 80149d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80149d4:	3a30      	subs	r2, #48	; 0x30
 80149d6:	2a09      	cmp	r2, #9
 80149d8:	d903      	bls.n	80149e2 <_vfiprintf_r+0x1ee>
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d0c5      	beq.n	801496a <_vfiprintf_r+0x176>
 80149de:	9105      	str	r1, [sp, #20]
 80149e0:	e7c3      	b.n	801496a <_vfiprintf_r+0x176>
 80149e2:	4604      	mov	r4, r0
 80149e4:	2301      	movs	r3, #1
 80149e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80149ea:	e7f0      	b.n	80149ce <_vfiprintf_r+0x1da>
 80149ec:	ab03      	add	r3, sp, #12
 80149ee:	9300      	str	r3, [sp, #0]
 80149f0:	462a      	mov	r2, r5
 80149f2:	4630      	mov	r0, r6
 80149f4:	4b16      	ldr	r3, [pc, #88]	; (8014a50 <_vfiprintf_r+0x25c>)
 80149f6:	a904      	add	r1, sp, #16
 80149f8:	f7fc f8f4 	bl	8010be4 <_printf_float>
 80149fc:	4607      	mov	r7, r0
 80149fe:	1c78      	adds	r0, r7, #1
 8014a00:	d1d6      	bne.n	80149b0 <_vfiprintf_r+0x1bc>
 8014a02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a04:	07d9      	lsls	r1, r3, #31
 8014a06:	d405      	bmi.n	8014a14 <_vfiprintf_r+0x220>
 8014a08:	89ab      	ldrh	r3, [r5, #12]
 8014a0a:	059a      	lsls	r2, r3, #22
 8014a0c:	d402      	bmi.n	8014a14 <_vfiprintf_r+0x220>
 8014a0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a10:	f7fb ff46 	bl	80108a0 <__retarget_lock_release_recursive>
 8014a14:	89ab      	ldrh	r3, [r5, #12]
 8014a16:	065b      	lsls	r3, r3, #25
 8014a18:	f53f af12 	bmi.w	8014840 <_vfiprintf_r+0x4c>
 8014a1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a1e:	e711      	b.n	8014844 <_vfiprintf_r+0x50>
 8014a20:	ab03      	add	r3, sp, #12
 8014a22:	9300      	str	r3, [sp, #0]
 8014a24:	462a      	mov	r2, r5
 8014a26:	4630      	mov	r0, r6
 8014a28:	4b09      	ldr	r3, [pc, #36]	; (8014a50 <_vfiprintf_r+0x25c>)
 8014a2a:	a904      	add	r1, sp, #16
 8014a2c:	f7fc fb76 	bl	801111c <_printf_i>
 8014a30:	e7e4      	b.n	80149fc <_vfiprintf_r+0x208>
 8014a32:	bf00      	nop
 8014a34:	080159cc 	.word	0x080159cc
 8014a38:	080159ec 	.word	0x080159ec
 8014a3c:	080159ac 	.word	0x080159ac
 8014a40:	08015e94 	.word	0x08015e94
 8014a44:	08015e9a 	.word	0x08015e9a
 8014a48:	08015e9e 	.word	0x08015e9e
 8014a4c:	08010be5 	.word	0x08010be5
 8014a50:	080147cf 	.word	0x080147cf

08014a54 <_read_r>:
 8014a54:	b538      	push	{r3, r4, r5, lr}
 8014a56:	4604      	mov	r4, r0
 8014a58:	4608      	mov	r0, r1
 8014a5a:	4611      	mov	r1, r2
 8014a5c:	2200      	movs	r2, #0
 8014a5e:	4d05      	ldr	r5, [pc, #20]	; (8014a74 <_read_r+0x20>)
 8014a60:	602a      	str	r2, [r5, #0]
 8014a62:	461a      	mov	r2, r3
 8014a64:	f7f0 fca9 	bl	80053ba <_read>
 8014a68:	1c43      	adds	r3, r0, #1
 8014a6a:	d102      	bne.n	8014a72 <_read_r+0x1e>
 8014a6c:	682b      	ldr	r3, [r5, #0]
 8014a6e:	b103      	cbz	r3, 8014a72 <_read_r+0x1e>
 8014a70:	6023      	str	r3, [r4, #0]
 8014a72:	bd38      	pop	{r3, r4, r5, pc}
 8014a74:	2000cc54 	.word	0x2000cc54

08014a78 <nan>:
 8014a78:	2000      	movs	r0, #0
 8014a7a:	4901      	ldr	r1, [pc, #4]	; (8014a80 <nan+0x8>)
 8014a7c:	4770      	bx	lr
 8014a7e:	bf00      	nop
 8014a80:	7ff80000 	.word	0x7ff80000

08014a84 <nanf>:
 8014a84:	4800      	ldr	r0, [pc, #0]	; (8014a88 <nanf+0x4>)
 8014a86:	4770      	bx	lr
 8014a88:	7fc00000 	.word	0x7fc00000

08014a8c <strncmp>:
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	b510      	push	{r4, lr}
 8014a90:	b172      	cbz	r2, 8014ab0 <strncmp+0x24>
 8014a92:	3901      	subs	r1, #1
 8014a94:	1884      	adds	r4, r0, r2
 8014a96:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014a9a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014a9e:	4290      	cmp	r0, r2
 8014aa0:	d101      	bne.n	8014aa6 <strncmp+0x1a>
 8014aa2:	42a3      	cmp	r3, r4
 8014aa4:	d101      	bne.n	8014aaa <strncmp+0x1e>
 8014aa6:	1a80      	subs	r0, r0, r2
 8014aa8:	bd10      	pop	{r4, pc}
 8014aaa:	2800      	cmp	r0, #0
 8014aac:	d1f3      	bne.n	8014a96 <strncmp+0xa>
 8014aae:	e7fa      	b.n	8014aa6 <strncmp+0x1a>
 8014ab0:	4610      	mov	r0, r2
 8014ab2:	e7f9      	b.n	8014aa8 <strncmp+0x1c>

08014ab4 <__swbuf_r>:
 8014ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ab6:	460e      	mov	r6, r1
 8014ab8:	4614      	mov	r4, r2
 8014aba:	4605      	mov	r5, r0
 8014abc:	b118      	cbz	r0, 8014ac6 <__swbuf_r+0x12>
 8014abe:	6983      	ldr	r3, [r0, #24]
 8014ac0:	b90b      	cbnz	r3, 8014ac6 <__swbuf_r+0x12>
 8014ac2:	f7fb fe29 	bl	8010718 <__sinit>
 8014ac6:	4b21      	ldr	r3, [pc, #132]	; (8014b4c <__swbuf_r+0x98>)
 8014ac8:	429c      	cmp	r4, r3
 8014aca:	d12b      	bne.n	8014b24 <__swbuf_r+0x70>
 8014acc:	686c      	ldr	r4, [r5, #4]
 8014ace:	69a3      	ldr	r3, [r4, #24]
 8014ad0:	60a3      	str	r3, [r4, #8]
 8014ad2:	89a3      	ldrh	r3, [r4, #12]
 8014ad4:	071a      	lsls	r2, r3, #28
 8014ad6:	d52f      	bpl.n	8014b38 <__swbuf_r+0x84>
 8014ad8:	6923      	ldr	r3, [r4, #16]
 8014ada:	b36b      	cbz	r3, 8014b38 <__swbuf_r+0x84>
 8014adc:	6923      	ldr	r3, [r4, #16]
 8014ade:	6820      	ldr	r0, [r4, #0]
 8014ae0:	b2f6      	uxtb	r6, r6
 8014ae2:	1ac0      	subs	r0, r0, r3
 8014ae4:	6963      	ldr	r3, [r4, #20]
 8014ae6:	4637      	mov	r7, r6
 8014ae8:	4283      	cmp	r3, r0
 8014aea:	dc04      	bgt.n	8014af6 <__swbuf_r+0x42>
 8014aec:	4621      	mov	r1, r4
 8014aee:	4628      	mov	r0, r5
 8014af0:	f7fe fc3a 	bl	8013368 <_fflush_r>
 8014af4:	bb30      	cbnz	r0, 8014b44 <__swbuf_r+0x90>
 8014af6:	68a3      	ldr	r3, [r4, #8]
 8014af8:	3001      	adds	r0, #1
 8014afa:	3b01      	subs	r3, #1
 8014afc:	60a3      	str	r3, [r4, #8]
 8014afe:	6823      	ldr	r3, [r4, #0]
 8014b00:	1c5a      	adds	r2, r3, #1
 8014b02:	6022      	str	r2, [r4, #0]
 8014b04:	701e      	strb	r6, [r3, #0]
 8014b06:	6963      	ldr	r3, [r4, #20]
 8014b08:	4283      	cmp	r3, r0
 8014b0a:	d004      	beq.n	8014b16 <__swbuf_r+0x62>
 8014b0c:	89a3      	ldrh	r3, [r4, #12]
 8014b0e:	07db      	lsls	r3, r3, #31
 8014b10:	d506      	bpl.n	8014b20 <__swbuf_r+0x6c>
 8014b12:	2e0a      	cmp	r6, #10
 8014b14:	d104      	bne.n	8014b20 <__swbuf_r+0x6c>
 8014b16:	4621      	mov	r1, r4
 8014b18:	4628      	mov	r0, r5
 8014b1a:	f7fe fc25 	bl	8013368 <_fflush_r>
 8014b1e:	b988      	cbnz	r0, 8014b44 <__swbuf_r+0x90>
 8014b20:	4638      	mov	r0, r7
 8014b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b24:	4b0a      	ldr	r3, [pc, #40]	; (8014b50 <__swbuf_r+0x9c>)
 8014b26:	429c      	cmp	r4, r3
 8014b28:	d101      	bne.n	8014b2e <__swbuf_r+0x7a>
 8014b2a:	68ac      	ldr	r4, [r5, #8]
 8014b2c:	e7cf      	b.n	8014ace <__swbuf_r+0x1a>
 8014b2e:	4b09      	ldr	r3, [pc, #36]	; (8014b54 <__swbuf_r+0xa0>)
 8014b30:	429c      	cmp	r4, r3
 8014b32:	bf08      	it	eq
 8014b34:	68ec      	ldreq	r4, [r5, #12]
 8014b36:	e7ca      	b.n	8014ace <__swbuf_r+0x1a>
 8014b38:	4621      	mov	r1, r4
 8014b3a:	4628      	mov	r0, r5
 8014b3c:	f000 f81a 	bl	8014b74 <__swsetup_r>
 8014b40:	2800      	cmp	r0, #0
 8014b42:	d0cb      	beq.n	8014adc <__swbuf_r+0x28>
 8014b44:	f04f 37ff 	mov.w	r7, #4294967295
 8014b48:	e7ea      	b.n	8014b20 <__swbuf_r+0x6c>
 8014b4a:	bf00      	nop
 8014b4c:	080159cc 	.word	0x080159cc
 8014b50:	080159ec 	.word	0x080159ec
 8014b54:	080159ac 	.word	0x080159ac

08014b58 <__ascii_wctomb>:
 8014b58:	4603      	mov	r3, r0
 8014b5a:	4608      	mov	r0, r1
 8014b5c:	b141      	cbz	r1, 8014b70 <__ascii_wctomb+0x18>
 8014b5e:	2aff      	cmp	r2, #255	; 0xff
 8014b60:	d904      	bls.n	8014b6c <__ascii_wctomb+0x14>
 8014b62:	228a      	movs	r2, #138	; 0x8a
 8014b64:	f04f 30ff 	mov.w	r0, #4294967295
 8014b68:	601a      	str	r2, [r3, #0]
 8014b6a:	4770      	bx	lr
 8014b6c:	2001      	movs	r0, #1
 8014b6e:	700a      	strb	r2, [r1, #0]
 8014b70:	4770      	bx	lr
	...

08014b74 <__swsetup_r>:
 8014b74:	4b32      	ldr	r3, [pc, #200]	; (8014c40 <__swsetup_r+0xcc>)
 8014b76:	b570      	push	{r4, r5, r6, lr}
 8014b78:	681d      	ldr	r5, [r3, #0]
 8014b7a:	4606      	mov	r6, r0
 8014b7c:	460c      	mov	r4, r1
 8014b7e:	b125      	cbz	r5, 8014b8a <__swsetup_r+0x16>
 8014b80:	69ab      	ldr	r3, [r5, #24]
 8014b82:	b913      	cbnz	r3, 8014b8a <__swsetup_r+0x16>
 8014b84:	4628      	mov	r0, r5
 8014b86:	f7fb fdc7 	bl	8010718 <__sinit>
 8014b8a:	4b2e      	ldr	r3, [pc, #184]	; (8014c44 <__swsetup_r+0xd0>)
 8014b8c:	429c      	cmp	r4, r3
 8014b8e:	d10f      	bne.n	8014bb0 <__swsetup_r+0x3c>
 8014b90:	686c      	ldr	r4, [r5, #4]
 8014b92:	89a3      	ldrh	r3, [r4, #12]
 8014b94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014b98:	0719      	lsls	r1, r3, #28
 8014b9a:	d42c      	bmi.n	8014bf6 <__swsetup_r+0x82>
 8014b9c:	06dd      	lsls	r5, r3, #27
 8014b9e:	d411      	bmi.n	8014bc4 <__swsetup_r+0x50>
 8014ba0:	2309      	movs	r3, #9
 8014ba2:	6033      	str	r3, [r6, #0]
 8014ba4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8014bac:	81a3      	strh	r3, [r4, #12]
 8014bae:	e03e      	b.n	8014c2e <__swsetup_r+0xba>
 8014bb0:	4b25      	ldr	r3, [pc, #148]	; (8014c48 <__swsetup_r+0xd4>)
 8014bb2:	429c      	cmp	r4, r3
 8014bb4:	d101      	bne.n	8014bba <__swsetup_r+0x46>
 8014bb6:	68ac      	ldr	r4, [r5, #8]
 8014bb8:	e7eb      	b.n	8014b92 <__swsetup_r+0x1e>
 8014bba:	4b24      	ldr	r3, [pc, #144]	; (8014c4c <__swsetup_r+0xd8>)
 8014bbc:	429c      	cmp	r4, r3
 8014bbe:	bf08      	it	eq
 8014bc0:	68ec      	ldreq	r4, [r5, #12]
 8014bc2:	e7e6      	b.n	8014b92 <__swsetup_r+0x1e>
 8014bc4:	0758      	lsls	r0, r3, #29
 8014bc6:	d512      	bpl.n	8014bee <__swsetup_r+0x7a>
 8014bc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014bca:	b141      	cbz	r1, 8014bde <__swsetup_r+0x6a>
 8014bcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014bd0:	4299      	cmp	r1, r3
 8014bd2:	d002      	beq.n	8014bda <__swsetup_r+0x66>
 8014bd4:	4630      	mov	r0, r6
 8014bd6:	f7fb fe8b 	bl	80108f0 <_free_r>
 8014bda:	2300      	movs	r3, #0
 8014bdc:	6363      	str	r3, [r4, #52]	; 0x34
 8014bde:	89a3      	ldrh	r3, [r4, #12]
 8014be0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014be4:	81a3      	strh	r3, [r4, #12]
 8014be6:	2300      	movs	r3, #0
 8014be8:	6063      	str	r3, [r4, #4]
 8014bea:	6923      	ldr	r3, [r4, #16]
 8014bec:	6023      	str	r3, [r4, #0]
 8014bee:	89a3      	ldrh	r3, [r4, #12]
 8014bf0:	f043 0308 	orr.w	r3, r3, #8
 8014bf4:	81a3      	strh	r3, [r4, #12]
 8014bf6:	6923      	ldr	r3, [r4, #16]
 8014bf8:	b94b      	cbnz	r3, 8014c0e <__swsetup_r+0x9a>
 8014bfa:	89a3      	ldrh	r3, [r4, #12]
 8014bfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014c04:	d003      	beq.n	8014c0e <__swsetup_r+0x9a>
 8014c06:	4621      	mov	r1, r4
 8014c08:	4630      	mov	r0, r6
 8014c0a:	f000 f84d 	bl	8014ca8 <__smakebuf_r>
 8014c0e:	89a0      	ldrh	r0, [r4, #12]
 8014c10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014c14:	f010 0301 	ands.w	r3, r0, #1
 8014c18:	d00a      	beq.n	8014c30 <__swsetup_r+0xbc>
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	60a3      	str	r3, [r4, #8]
 8014c1e:	6963      	ldr	r3, [r4, #20]
 8014c20:	425b      	negs	r3, r3
 8014c22:	61a3      	str	r3, [r4, #24]
 8014c24:	6923      	ldr	r3, [r4, #16]
 8014c26:	b943      	cbnz	r3, 8014c3a <__swsetup_r+0xc6>
 8014c28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014c2c:	d1ba      	bne.n	8014ba4 <__swsetup_r+0x30>
 8014c2e:	bd70      	pop	{r4, r5, r6, pc}
 8014c30:	0781      	lsls	r1, r0, #30
 8014c32:	bf58      	it	pl
 8014c34:	6963      	ldrpl	r3, [r4, #20]
 8014c36:	60a3      	str	r3, [r4, #8]
 8014c38:	e7f4      	b.n	8014c24 <__swsetup_r+0xb0>
 8014c3a:	2000      	movs	r0, #0
 8014c3c:	e7f7      	b.n	8014c2e <__swsetup_r+0xba>
 8014c3e:	bf00      	nop
 8014c40:	20000224 	.word	0x20000224
 8014c44:	080159cc 	.word	0x080159cc
 8014c48:	080159ec 	.word	0x080159ec
 8014c4c:	080159ac 	.word	0x080159ac

08014c50 <abort>:
 8014c50:	2006      	movs	r0, #6
 8014c52:	b508      	push	{r3, lr}
 8014c54:	f000 f8da 	bl	8014e0c <raise>
 8014c58:	2001      	movs	r0, #1
 8014c5a:	f7f0 fba4 	bl	80053a6 <_exit>

08014c5e <__swhatbuf_r>:
 8014c5e:	b570      	push	{r4, r5, r6, lr}
 8014c60:	460e      	mov	r6, r1
 8014c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c66:	4614      	mov	r4, r2
 8014c68:	2900      	cmp	r1, #0
 8014c6a:	461d      	mov	r5, r3
 8014c6c:	b096      	sub	sp, #88	; 0x58
 8014c6e:	da08      	bge.n	8014c82 <__swhatbuf_r+0x24>
 8014c70:	2200      	movs	r2, #0
 8014c72:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014c76:	602a      	str	r2, [r5, #0]
 8014c78:	061a      	lsls	r2, r3, #24
 8014c7a:	d410      	bmi.n	8014c9e <__swhatbuf_r+0x40>
 8014c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014c80:	e00e      	b.n	8014ca0 <__swhatbuf_r+0x42>
 8014c82:	466a      	mov	r2, sp
 8014c84:	f000 f8de 	bl	8014e44 <_fstat_r>
 8014c88:	2800      	cmp	r0, #0
 8014c8a:	dbf1      	blt.n	8014c70 <__swhatbuf_r+0x12>
 8014c8c:	9a01      	ldr	r2, [sp, #4]
 8014c8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014c92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014c96:	425a      	negs	r2, r3
 8014c98:	415a      	adcs	r2, r3
 8014c9a:	602a      	str	r2, [r5, #0]
 8014c9c:	e7ee      	b.n	8014c7c <__swhatbuf_r+0x1e>
 8014c9e:	2340      	movs	r3, #64	; 0x40
 8014ca0:	2000      	movs	r0, #0
 8014ca2:	6023      	str	r3, [r4, #0]
 8014ca4:	b016      	add	sp, #88	; 0x58
 8014ca6:	bd70      	pop	{r4, r5, r6, pc}

08014ca8 <__smakebuf_r>:
 8014ca8:	898b      	ldrh	r3, [r1, #12]
 8014caa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014cac:	079d      	lsls	r5, r3, #30
 8014cae:	4606      	mov	r6, r0
 8014cb0:	460c      	mov	r4, r1
 8014cb2:	d507      	bpl.n	8014cc4 <__smakebuf_r+0x1c>
 8014cb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014cb8:	6023      	str	r3, [r4, #0]
 8014cba:	6123      	str	r3, [r4, #16]
 8014cbc:	2301      	movs	r3, #1
 8014cbe:	6163      	str	r3, [r4, #20]
 8014cc0:	b002      	add	sp, #8
 8014cc2:	bd70      	pop	{r4, r5, r6, pc}
 8014cc4:	466a      	mov	r2, sp
 8014cc6:	ab01      	add	r3, sp, #4
 8014cc8:	f7ff ffc9 	bl	8014c5e <__swhatbuf_r>
 8014ccc:	9900      	ldr	r1, [sp, #0]
 8014cce:	4605      	mov	r5, r0
 8014cd0:	4630      	mov	r0, r6
 8014cd2:	f7fb fe75 	bl	80109c0 <_malloc_r>
 8014cd6:	b948      	cbnz	r0, 8014cec <__smakebuf_r+0x44>
 8014cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014cdc:	059a      	lsls	r2, r3, #22
 8014cde:	d4ef      	bmi.n	8014cc0 <__smakebuf_r+0x18>
 8014ce0:	f023 0303 	bic.w	r3, r3, #3
 8014ce4:	f043 0302 	orr.w	r3, r3, #2
 8014ce8:	81a3      	strh	r3, [r4, #12]
 8014cea:	e7e3      	b.n	8014cb4 <__smakebuf_r+0xc>
 8014cec:	4b0d      	ldr	r3, [pc, #52]	; (8014d24 <__smakebuf_r+0x7c>)
 8014cee:	62b3      	str	r3, [r6, #40]	; 0x28
 8014cf0:	89a3      	ldrh	r3, [r4, #12]
 8014cf2:	6020      	str	r0, [r4, #0]
 8014cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014cf8:	81a3      	strh	r3, [r4, #12]
 8014cfa:	9b00      	ldr	r3, [sp, #0]
 8014cfc:	6120      	str	r0, [r4, #16]
 8014cfe:	6163      	str	r3, [r4, #20]
 8014d00:	9b01      	ldr	r3, [sp, #4]
 8014d02:	b15b      	cbz	r3, 8014d1c <__smakebuf_r+0x74>
 8014d04:	4630      	mov	r0, r6
 8014d06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d0a:	f000 f8ad 	bl	8014e68 <_isatty_r>
 8014d0e:	b128      	cbz	r0, 8014d1c <__smakebuf_r+0x74>
 8014d10:	89a3      	ldrh	r3, [r4, #12]
 8014d12:	f023 0303 	bic.w	r3, r3, #3
 8014d16:	f043 0301 	orr.w	r3, r3, #1
 8014d1a:	81a3      	strh	r3, [r4, #12]
 8014d1c:	89a0      	ldrh	r0, [r4, #12]
 8014d1e:	4305      	orrs	r5, r0
 8014d20:	81a5      	strh	r5, [r4, #12]
 8014d22:	e7cd      	b.n	8014cc0 <__smakebuf_r+0x18>
 8014d24:	080106b1 	.word	0x080106b1

08014d28 <memmove>:
 8014d28:	4288      	cmp	r0, r1
 8014d2a:	b510      	push	{r4, lr}
 8014d2c:	eb01 0402 	add.w	r4, r1, r2
 8014d30:	d902      	bls.n	8014d38 <memmove+0x10>
 8014d32:	4284      	cmp	r4, r0
 8014d34:	4623      	mov	r3, r4
 8014d36:	d807      	bhi.n	8014d48 <memmove+0x20>
 8014d38:	1e43      	subs	r3, r0, #1
 8014d3a:	42a1      	cmp	r1, r4
 8014d3c:	d008      	beq.n	8014d50 <memmove+0x28>
 8014d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014d42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014d46:	e7f8      	b.n	8014d3a <memmove+0x12>
 8014d48:	4601      	mov	r1, r0
 8014d4a:	4402      	add	r2, r0
 8014d4c:	428a      	cmp	r2, r1
 8014d4e:	d100      	bne.n	8014d52 <memmove+0x2a>
 8014d50:	bd10      	pop	{r4, pc}
 8014d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014d56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014d5a:	e7f7      	b.n	8014d4c <memmove+0x24>

08014d5c <_realloc_r>:
 8014d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d60:	4680      	mov	r8, r0
 8014d62:	4614      	mov	r4, r2
 8014d64:	460e      	mov	r6, r1
 8014d66:	b921      	cbnz	r1, 8014d72 <_realloc_r+0x16>
 8014d68:	4611      	mov	r1, r2
 8014d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014d6e:	f7fb be27 	b.w	80109c0 <_malloc_r>
 8014d72:	b92a      	cbnz	r2, 8014d80 <_realloc_r+0x24>
 8014d74:	f7fb fdbc 	bl	80108f0 <_free_r>
 8014d78:	4625      	mov	r5, r4
 8014d7a:	4628      	mov	r0, r5
 8014d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d80:	f000 f882 	bl	8014e88 <_malloc_usable_size_r>
 8014d84:	4284      	cmp	r4, r0
 8014d86:	4607      	mov	r7, r0
 8014d88:	d802      	bhi.n	8014d90 <_realloc_r+0x34>
 8014d8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014d8e:	d812      	bhi.n	8014db6 <_realloc_r+0x5a>
 8014d90:	4621      	mov	r1, r4
 8014d92:	4640      	mov	r0, r8
 8014d94:	f7fb fe14 	bl	80109c0 <_malloc_r>
 8014d98:	4605      	mov	r5, r0
 8014d9a:	2800      	cmp	r0, #0
 8014d9c:	d0ed      	beq.n	8014d7a <_realloc_r+0x1e>
 8014d9e:	42bc      	cmp	r4, r7
 8014da0:	4622      	mov	r2, r4
 8014da2:	4631      	mov	r1, r6
 8014da4:	bf28      	it	cs
 8014da6:	463a      	movcs	r2, r7
 8014da8:	f7fb fd8c 	bl	80108c4 <memcpy>
 8014dac:	4631      	mov	r1, r6
 8014dae:	4640      	mov	r0, r8
 8014db0:	f7fb fd9e 	bl	80108f0 <_free_r>
 8014db4:	e7e1      	b.n	8014d7a <_realloc_r+0x1e>
 8014db6:	4635      	mov	r5, r6
 8014db8:	e7df      	b.n	8014d7a <_realloc_r+0x1e>

08014dba <_raise_r>:
 8014dba:	291f      	cmp	r1, #31
 8014dbc:	b538      	push	{r3, r4, r5, lr}
 8014dbe:	4604      	mov	r4, r0
 8014dc0:	460d      	mov	r5, r1
 8014dc2:	d904      	bls.n	8014dce <_raise_r+0x14>
 8014dc4:	2316      	movs	r3, #22
 8014dc6:	6003      	str	r3, [r0, #0]
 8014dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8014dcc:	bd38      	pop	{r3, r4, r5, pc}
 8014dce:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014dd0:	b112      	cbz	r2, 8014dd8 <_raise_r+0x1e>
 8014dd2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014dd6:	b94b      	cbnz	r3, 8014dec <_raise_r+0x32>
 8014dd8:	4620      	mov	r0, r4
 8014dda:	f000 f831 	bl	8014e40 <_getpid_r>
 8014dde:	462a      	mov	r2, r5
 8014de0:	4601      	mov	r1, r0
 8014de2:	4620      	mov	r0, r4
 8014de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014de8:	f000 b818 	b.w	8014e1c <_kill_r>
 8014dec:	2b01      	cmp	r3, #1
 8014dee:	d00a      	beq.n	8014e06 <_raise_r+0x4c>
 8014df0:	1c59      	adds	r1, r3, #1
 8014df2:	d103      	bne.n	8014dfc <_raise_r+0x42>
 8014df4:	2316      	movs	r3, #22
 8014df6:	6003      	str	r3, [r0, #0]
 8014df8:	2001      	movs	r0, #1
 8014dfa:	e7e7      	b.n	8014dcc <_raise_r+0x12>
 8014dfc:	2400      	movs	r4, #0
 8014dfe:	4628      	mov	r0, r5
 8014e00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014e04:	4798      	blx	r3
 8014e06:	2000      	movs	r0, #0
 8014e08:	e7e0      	b.n	8014dcc <_raise_r+0x12>
	...

08014e0c <raise>:
 8014e0c:	4b02      	ldr	r3, [pc, #8]	; (8014e18 <raise+0xc>)
 8014e0e:	4601      	mov	r1, r0
 8014e10:	6818      	ldr	r0, [r3, #0]
 8014e12:	f7ff bfd2 	b.w	8014dba <_raise_r>
 8014e16:	bf00      	nop
 8014e18:	20000224 	.word	0x20000224

08014e1c <_kill_r>:
 8014e1c:	b538      	push	{r3, r4, r5, lr}
 8014e1e:	2300      	movs	r3, #0
 8014e20:	4d06      	ldr	r5, [pc, #24]	; (8014e3c <_kill_r+0x20>)
 8014e22:	4604      	mov	r4, r0
 8014e24:	4608      	mov	r0, r1
 8014e26:	4611      	mov	r1, r2
 8014e28:	602b      	str	r3, [r5, #0]
 8014e2a:	f7f0 faac 	bl	8005386 <_kill>
 8014e2e:	1c43      	adds	r3, r0, #1
 8014e30:	d102      	bne.n	8014e38 <_kill_r+0x1c>
 8014e32:	682b      	ldr	r3, [r5, #0]
 8014e34:	b103      	cbz	r3, 8014e38 <_kill_r+0x1c>
 8014e36:	6023      	str	r3, [r4, #0]
 8014e38:	bd38      	pop	{r3, r4, r5, pc}
 8014e3a:	bf00      	nop
 8014e3c:	2000cc54 	.word	0x2000cc54

08014e40 <_getpid_r>:
 8014e40:	f7f0 ba9a 	b.w	8005378 <_getpid>

08014e44 <_fstat_r>:
 8014e44:	b538      	push	{r3, r4, r5, lr}
 8014e46:	2300      	movs	r3, #0
 8014e48:	4d06      	ldr	r5, [pc, #24]	; (8014e64 <_fstat_r+0x20>)
 8014e4a:	4604      	mov	r4, r0
 8014e4c:	4608      	mov	r0, r1
 8014e4e:	4611      	mov	r1, r2
 8014e50:	602b      	str	r3, [r5, #0]
 8014e52:	f7f0 faf6 	bl	8005442 <_fstat>
 8014e56:	1c43      	adds	r3, r0, #1
 8014e58:	d102      	bne.n	8014e60 <_fstat_r+0x1c>
 8014e5a:	682b      	ldr	r3, [r5, #0]
 8014e5c:	b103      	cbz	r3, 8014e60 <_fstat_r+0x1c>
 8014e5e:	6023      	str	r3, [r4, #0]
 8014e60:	bd38      	pop	{r3, r4, r5, pc}
 8014e62:	bf00      	nop
 8014e64:	2000cc54 	.word	0x2000cc54

08014e68 <_isatty_r>:
 8014e68:	b538      	push	{r3, r4, r5, lr}
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	4d05      	ldr	r5, [pc, #20]	; (8014e84 <_isatty_r+0x1c>)
 8014e6e:	4604      	mov	r4, r0
 8014e70:	4608      	mov	r0, r1
 8014e72:	602b      	str	r3, [r5, #0]
 8014e74:	f7f0 faf4 	bl	8005460 <_isatty>
 8014e78:	1c43      	adds	r3, r0, #1
 8014e7a:	d102      	bne.n	8014e82 <_isatty_r+0x1a>
 8014e7c:	682b      	ldr	r3, [r5, #0]
 8014e7e:	b103      	cbz	r3, 8014e82 <_isatty_r+0x1a>
 8014e80:	6023      	str	r3, [r4, #0]
 8014e82:	bd38      	pop	{r3, r4, r5, pc}
 8014e84:	2000cc54 	.word	0x2000cc54

08014e88 <_malloc_usable_size_r>:
 8014e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e8c:	1f18      	subs	r0, r3, #4
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	bfbc      	itt	lt
 8014e92:	580b      	ldrlt	r3, [r1, r0]
 8014e94:	18c0      	addlt	r0, r0, r3
 8014e96:	4770      	bx	lr

08014e98 <_init>:
 8014e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e9a:	bf00      	nop
 8014e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014e9e:	bc08      	pop	{r3}
 8014ea0:	469e      	mov	lr, r3
 8014ea2:	4770      	bx	lr

08014ea4 <_fini>:
 8014ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ea6:	bf00      	nop
 8014ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014eaa:	bc08      	pop	{r3}
 8014eac:	469e      	mov	lr, r3
 8014eae:	4770      	bx	lr
