
icListen_SD9_USB_R_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ec  08014b9c  08014b9c  00024b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015488  08015488  00030314  2**0
                  CONTENTS
  4 .ARM          00000008  08015488  08015488  00025488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015490  08015490  00030314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015490  08015490  00025490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015494  08015494  00025494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000314  20000000  08015498  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030314  2**0
                  CONTENTS
 10 .bss          0000c2b0  20000314  20000314  00030314  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000c5c4  2000c5c4  00030314  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002fe2b  00000000  00000000  00030344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006ea4  00000000  00000000  0006016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002338  00000000  00000000  00067018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002090  00000000  00000000  00069350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029b35  00000000  00000000  0006b3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00030867  00000000  00000000  00094f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4ae7  00000000  00000000  000c577c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019a263  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009d1c  00000000  00000000  0019a2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000314 	.word	0x20000314
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014b84 	.word	0x08014b84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000318 	.word	0x20000318
 80001cc:	08014b84 	.word	0x08014b84

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <UI_init>:
char temp_array[200];
const char* UI_commands_strings[]={"HELP HERE\r"};


void UI_init(UI_typedef* UI_obj)
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b096      	sub	sp, #88	; 0x58
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	UI_messages_init(UI_obj);
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f000 f967 	bl	8000880 <UI_messages_init>


	osMessageQDef(UI_events_q, 20, uint8_t);
 80005b2:	4b20      	ldr	r3, [pc, #128]	; (8000634 <UI_init+0x90>)
 80005b4:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80005b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->events_q= osMessageCreate(osMessageQ(UI_events_q), NULL);
 80005be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f010 fa8c 	bl	8010ae2 <osMessageCreate>
 80005ca:	4602      	mov	r2, r0
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	609a      	str	r2, [r3, #8]

	osMessageQDef(UI_media_rx_q, 20, uint16_t);
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <UI_init+0x94>)
 80005d2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->media_rx_messages_q= osMessageCreate(osMessageQ(UI_media_rx_q), NULL);
 80005dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f010 fa7d 	bl	8010ae2 <osMessageCreate>
 80005e8:	4602      	mov	r2, r0
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	601a      	str	r2, [r3, #0]

	osMessageQDef(UI_media_tx_q, 200, uint8_t);
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <UI_init+0x98>)
 80005f0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80005f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->media_tx_q = osMessageCreate(osMessageQ(UI_media_tx_q), NULL);
 80005fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f010 fa6e 	bl	8010ae2 <osMessageCreate>
 8000606:	4602      	mov	r2, r0
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	605a      	str	r2, [r3, #4]

	osThreadDef(UI_task, UI_loop, osPriorityNormal, 0, 256);
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <UI_init+0x9c>)
 800060e:	f107 040c 	add.w	r4, r7, #12
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(UI_task), UI_obj);
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	4618      	mov	r0, r3
 8000628:	f010 f9fb 	bl	8010a22 <osThreadCreate>
}
 800062c:	bf00      	nop
 800062e:	3758      	adds	r7, #88	; 0x58
 8000630:	46bd      	mov	sp, r7
 8000632:	bdb0      	pop	{r4, r5, r7, pc}
 8000634:	08014bb0 	.word	0x08014bb0
 8000638:	08014bc0 	.word	0x08014bc0
 800063c:	08014bd0 	.word	0x08014bd0
 8000640:	08014be0 	.word	0x08014be0

08000644 <UI_loop>:


void UI_loop(UI_typedef* UI_obj)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	 uint16_t msg_indx;
	 for(;;)
	 {
		if(xQueueReceive(UI_obj->media_rx_messages_q,&msg_indx,osWaitForever))
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f107 010a 	add.w	r1, r7, #10
 8000654:	f04f 32ff 	mov.w	r2, #4294967295
 8000658:	4618      	mov	r0, r3
 800065a:	f010 fea7 	bl	80113ac <xQueueReceive>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0f3      	beq.n	800064c <UI_loop+0x8>
		{   uint8_t* msg=UI_obj->rx_buffer+msg_indx;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	330e      	adds	r3, #14
 8000668:	897a      	ldrh	r2, [r7, #10]
 800066a:	4413      	add	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]
			UI_parse_message(UI_obj,msg);
 800066e:	68f9      	ldr	r1, [r7, #12]
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f000 f8c7 	bl	8000804 <UI_parse_message>
		if(xQueueReceive(UI_obj->media_rx_messages_q,&msg_indx,osWaitForever))
 8000676:	e7e9      	b.n	800064c <UI_loop+0x8>

08000678 <UI_media_process_byte>:

}


void UI_media_process_byte(UI_typedef* UI_obj,uint8_t rx_byte)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	if(UI_obj->media_status==UI_MEDIA_READY && rx_byte!=0x00)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7b5b      	ldrb	r3, [r3, #13]
 8000688:	2b0a      	cmp	r3, #10
 800068a:	d160      	bne.n	800074e <UI_media_process_byte+0xd6>
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d05d      	beq.n	800074e <UI_media_process_byte+0xd6>
	{
		UI_obj->rx_buffer[UI_obj->rx_buffer_indx]=rx_byte;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000698:	b29b      	uxth	r3, r3
 800069a:	461a      	mov	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4413      	add	r3, r2
 80006a0:	78fa      	ldrb	r2, [r7, #3]
 80006a2:	739a      	strb	r2, [r3, #14]
		if(rx_byte=='\r')
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	2b0d      	cmp	r3, #13
 80006a8:	d132      	bne.n	8000710 <UI_media_process_byte+0x98>
		{
			UI_obj->rx_buffer[UI_obj->rx_buffer_indx]=0x00;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4413      	add	r3, r2
 80006b8:	2200      	movs	r2, #0
 80006ba:	739a      	strb	r2, [r3, #14]
			osMessagePut(UI_obj->media_rx_messages_q,UI_obj->rx_buffer_new_string_indx,0);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6818      	ldr	r0, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	2200      	movs	r2, #0
 80006ca:	4619      	mov	r1, r3
 80006cc:	f010 fa32 	bl	8010b34 <osMessagePut>
			if(UI_obj->rx_buffer_indx>UI_RX_BUFFER_THR) UI_obj->rx_buffer_indx=0;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80006dc:	d907      	bls.n	80006ee <UI_media_process_byte+0x76>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 80006e6:	2200      	movs	r2, #0
 80006e8:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
 80006ec:	e008      	b.n	8000700 <UI_media_process_byte+0x88>
			else  UI_obj->rx_buffer_indx++;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	3301      	adds	r3, #1
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
			UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000706:	b29a      	uxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
 800070e:	e008      	b.n	8000722 <UI_media_process_byte+0xaa>
		}
		else UI_obj->rx_buffer_indx++;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000716:	b29b      	uxth	r3, r3
 8000718:	3301      	adds	r3, #1
 800071a:	b29a      	uxth	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
		if(UI_obj->rx_buffer_indx==UI_RX_BUFFER_SIZE)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000728:	b29b      	uxth	r3, r3
 800072a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800072e:	d11d      	bne.n	800076c <UI_media_process_byte+0xf4>
		{
			UI_obj->rx_buffer_indx=0;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2200      	movs	r2, #0
 8000734:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8000738:	2200      	movs	r2, #0
 800073a:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
			UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000744:	b29a      	uxth	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
		if(UI_obj->rx_buffer_indx==UI_RX_BUFFER_SIZE)
 800074c:	e00e      	b.n	800076c <UI_media_process_byte+0xf4>
		}
	}
	else
	{
		UI_obj->rx_buffer_indx=0;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8000756:	2200      	movs	r2, #0
 8000758:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
		UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000762:	b29a      	uxth	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
	}
}
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <UI_media_get_byte>:

uint8_t UI_media_get_byte(UI_typedef* UI_obj,uint8_t* tx_byte)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	osEvent res=osMessageGet(UI_obj->media_tx_q,0);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6859      	ldr	r1, [r3, #4]
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2200      	movs	r2, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f010 fa13 	bl	8010bb4 <osMessageGet>
	if(res.status==osEventMessage)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2b10      	cmp	r3, #16
 8000792:	d105      	bne.n	80007a0 <UI_media_get_byte+0x2c>
    {
		*tx_byte=res.value.v;
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	701a      	strb	r2, [r3, #0]
		return UI_F_OK;
 800079c:	2300      	movs	r3, #0
 800079e:	e000      	b.n	80007a2 <UI_media_get_byte+0x2e>
    }
  return UI_F_ERR;
 80007a0:	2301      	movs	r3, #1
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <UI_send_msg>:


void UI_send_msg(UI_typedef* UI_obj,uint8_t cmd_id,void* arg)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	60f8      	str	r0, [r7, #12]
 80007b2:	460b      	mov	r3, r1
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	72fb      	strb	r3, [r7, #11]
 memory_region_pointer*  ptr=arg;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	613b      	str	r3, [r7, #16]

 switch(cmd_id)
 80007bc:	7afb      	ldrb	r3, [r7, #11]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d01a      	beq.n	80007f8 <UI_send_msg+0x4e>
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d000      	beq.n	80007c8 <UI_send_msg+0x1e>
		   osMessagePut(UI_obj->media_tx_q,*((uint8_t*)(ptr->start_addr)+i),osWaitForever);
	   }
     break;
 }

}
 80007c6:	e018      	b.n	80007fa <UI_send_msg+0x50>
       for(int i=0;i<ptr->size;i++)
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	e00e      	b.n	80007ec <UI_send_msg+0x42>
		   osMessagePut(UI_obj->media_tx_q,*((uint8_t*)(ptr->start_addr)+i),osWaitForever);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6858      	ldr	r0, [r3, #4]
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	4413      	add	r3, r2
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	f04f 32ff 	mov.w	r2, #4294967295
 80007e0:	4619      	mov	r1, r3
 80007e2:	f010 f9a7 	bl	8010b34 <osMessagePut>
       for(int i=0;i<ptr->size;i++)
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	3301      	adds	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d8eb      	bhi.n	80007ce <UI_send_msg+0x24>
     break;
 80007f6:	e000      	b.n	80007fa <UI_send_msg+0x50>
	 break;
 80007f8:	bf00      	nop
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <UI_parse_message>:
	return UI_F_ERR;
}


int UI_parse_message(UI_typedef* UI_obj,uint8_t* msg)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
 char* pch;
 pch=strtok(msg," ");
 800080e:	4919      	ldr	r1, [pc, #100]	; (8000874 <UI_parse_message+0x70>)
 8000810:	6838      	ldr	r0, [r7, #0]
 8000812:	f013 f9e9 	bl	8013be8 <strtok>
 8000816:	60b8      	str	r0, [r7, #8]
 for(int i=0;i<UI_MSG_NUM_OF_FUNCTIONS;i++)
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	e022      	b.n	8000864 <UI_parse_message+0x60>
 {
	  if(strcmp(pch,UI_messages_strings[i])==0)
 800081e:	4a16      	ldr	r2, [pc, #88]	; (8000878 <UI_parse_message+0x74>)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000826:	4619      	mov	r1, r3
 8000828:	68b8      	ldr	r0, [r7, #8]
 800082a:	f7ff fcd1 	bl	80001d0 <strcmp>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d114      	bne.n	800085e <UI_parse_message+0x5a>
		{
			if(UI_functions[i](UI_obj,pch+strlen(pch)+1)==UI_F_OK) return UI_F_OK;
 8000834:	4a11      	ldr	r2, [pc, #68]	; (800087c <UI_parse_message+0x78>)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800083c:	68b8      	ldr	r0, [r7, #8]
 800083e:	f7ff fcd1 	bl	80001e4 <strlen>
 8000842:	4603      	mov	r3, r0
 8000844:	3301      	adds	r3, #1
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	4413      	add	r3, r2
 800084a:	4619      	mov	r1, r3
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	47a0      	blx	r4
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d101      	bne.n	800085a <UI_parse_message+0x56>
 8000856:	2300      	movs	r3, #0
 8000858:	e008      	b.n	800086c <UI_parse_message+0x68>
      else return UI_F_ERR;
 800085a:	2301      	movs	r3, #1
 800085c:	e006      	b.n	800086c <UI_parse_message+0x68>
 for(int i=0;i<UI_MSG_NUM_OF_FUNCTIONS;i++)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	3301      	adds	r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b03      	cmp	r3, #3
 8000868:	ddd9      	ble.n	800081e <UI_parse_message+0x1a>
		}

 }
 return UI_F_ERR;
 800086a:	2301      	movs	r3, #1
}
 800086c:	4618      	mov	r0, r3
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	bd90      	pop	{r4, r7, pc}
 8000874:	08014bfc 	.word	0x08014bfc
 8000878:	20000340 	.word	0x20000340
 800087c:	20000330 	.word	0x20000330

08000880 <UI_messages_init>:

void UI_messages_init(UI_typedef* UI_obj)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	UI_functions[UI_MSG_SET] = UI_MSG_SET_f;
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <UI_messages_init+0x44>)
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <UI_messages_init+0x48>)
 800088c:	601a      	str	r2, [r3, #0]
	UI_functions[UI_MSG_SHOW] = UI_MSG_SHOW_f;
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <UI_messages_init+0x44>)
 8000890:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <UI_messages_init+0x4c>)
 8000892:	605a      	str	r2, [r3, #4]
	UI_functions[UI_MSG_RESET] = UI_MSG_RESET_f;
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <UI_messages_init+0x44>)
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <UI_messages_init+0x50>)
 8000898:	609a      	str	r2, [r3, #8]
	UI_functions[UI_MSG_HELP] = UI_MSG_HELP_f;
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <UI_messages_init+0x44>)
 800089c:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <UI_messages_init+0x54>)
 800089e:	60da      	str	r2, [r3, #12]

	UI_messages_strings[UI_MSG_SET] = "SET";
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <UI_messages_init+0x58>)
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <UI_messages_init+0x5c>)
 80008a4:	601a      	str	r2, [r3, #0]
	UI_messages_strings[UI_MSG_SHOW] = "SHOW";
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <UI_messages_init+0x58>)
 80008a8:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <UI_messages_init+0x60>)
 80008aa:	605a      	str	r2, [r3, #4]
	UI_messages_strings[UI_MSG_RESET] = "RESET";
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <UI_messages_init+0x58>)
 80008ae:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <UI_messages_init+0x64>)
 80008b0:	609a      	str	r2, [r3, #8]
	UI_messages_strings[UI_MSG_HELP] = "HELP";
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <UI_messages_init+0x58>)
 80008b4:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <UI_messages_init+0x68>)
 80008b6:	60da      	str	r2, [r3, #12]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	20000330 	.word	0x20000330
 80008c8:	08000acd 	.word	0x08000acd
 80008cc:	080009b5 	.word	0x080009b5
 80008d0:	0800091d 	.word	0x0800091d
 80008d4:	080008ed 	.word	0x080008ed
 80008d8:	20000340 	.word	0x20000340
 80008dc:	08014c00 	.word	0x08014c00
 80008e0:	08014c04 	.word	0x08014c04
 80008e4:	08014c0c 	.word	0x08014c0c
 80008e8:	08014c14 	.word	0x08014c14

080008ec <UI_MSG_HELP_f>:

int UI_MSG_HELP_f(UI_typedef* UI_obj,uint8_t* msg)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
	char * pch;
	memory_region_pointer ptr;

	pch = strtok (NULL," ");//subcomand
 80008f6:	4908      	ldr	r1, [pc, #32]	; (8000918 <UI_MSG_HELP_f+0x2c>)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f013 f975 	bl	8013be8 <strtok>
 80008fe:	6178      	str	r0, [r7, #20]
	osMessagePut(UI_obj->events_q,UI_EVNT_HELP,1);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	2201      	movs	r2, #1
 8000906:	2103      	movs	r1, #3
 8000908:	4618      	mov	r0, r3
 800090a:	f010 f913 	bl	8010b34 <osMessagePut>
	return UI_F_OK;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	08014bfc 	.word	0x08014bfc

0800091c <UI_MSG_RESET_f>:

int UI_MSG_RESET_f(UI_typedef* UI_obj,uint8_t* msg)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	char * pch;
	memory_region_pointer ptr;

	pch = strtok (NULL," ");//subcomand
 8000926:	491f      	ldr	r1, [pc, #124]	; (80009a4 <UI_MSG_RESET_f+0x88>)
 8000928:	2000      	movs	r0, #0
 800092a:	f013 f95d 	bl	8013be8 <strtok>
 800092e:	6178      	str	r0, [r7, #20]
	if(strcmp(pch,"SETTINGS")==0){
 8000930:	491d      	ldr	r1, [pc, #116]	; (80009a8 <UI_MSG_RESET_f+0x8c>)
 8000932:	6978      	ldr	r0, [r7, #20]
 8000934:	f7ff fc4c 	bl	80001d0 <strcmp>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d126      	bne.n	800098c <UI_MSG_RESET_f+0x70>
		icListen.settings->wav_sample_rate=ICLISTEN_DEFAULT_WAV_SAMPLE_RATE;
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <UI_MSG_RESET_f+0x90>)
 8000940:	6a1b      	ldr	r3, [r3, #32]
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
 8000946:	2200      	movs	r2, #0
 8000948:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 800094c:	705a      	strb	r2, [r3, #1]
 800094e:	2200      	movs	r2, #0
 8000950:	709a      	strb	r2, [r3, #2]
 8000952:	2200      	movs	r2, #0
 8000954:	70da      	strb	r2, [r3, #3]
		icListen.settings->wav_sample_bit_depth=ICLISTEN_DEFAULT_WAV_SAMPLE_BIT_DEPTH;
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <UI_MSG_RESET_f+0x90>)
 8000958:	6a1b      	ldr	r3, [r3, #32]
 800095a:	2200      	movs	r2, #0
 800095c:	f042 0218 	orr.w	r2, r2, #24
 8000960:	711a      	strb	r2, [r3, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	715a      	strb	r2, [r3, #5]
 8000966:	2200      	movs	r2, #0
 8000968:	719a      	strb	r2, [r3, #6]
 800096a:	2200      	movs	r2, #0
 800096c:	71da      	strb	r2, [r3, #7]
		icListen.settings->file_duration=ICLISTEN_DEFAULT_FILE_DURATION;
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <UI_MSG_RESET_f+0x90>)
 8000970:	6a1b      	ldr	r3, [r3, #32]
 8000972:	2200      	movs	r2, #0
 8000974:	f042 0201 	orr.w	r2, r2, #1
 8000978:	721a      	strb	r2, [r3, #8]
 800097a:	2200      	movs	r2, #0
 800097c:	725a      	strb	r2, [r3, #9]
 800097e:	2200      	movs	r2, #0
 8000980:	729a      	strb	r2, [r3, #10]
 8000982:	2200      	movs	r2, #0
 8000984:	72da      	strb	r2, [r3, #11]
		mcu_flash_save(&mcu_flash);
 8000986:	480a      	ldr	r0, [pc, #40]	; (80009b0 <UI_MSG_RESET_f+0x94>)
 8000988:	f000 ff6c 	bl	8001864 <mcu_flash_save>
	}
	osMessagePut(UI_obj->events_q,UI_EVNT_RESET,1);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	2201      	movs	r2, #1
 8000992:	2102      	movs	r1, #2
 8000994:	4618      	mov	r0, r3
 8000996:	f010 f8cd 	bl	8010b34 <osMessagePut>
	return UI_F_OK;
 800099a:	2300      	movs	r3, #0
}
 800099c:	4618      	mov	r0, r3
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	08014bfc 	.word	0x08014bfc
 80009a8:	08014c1c 	.word	0x08014c1c
 80009ac:	200006d4 	.word	0x200006d4
 80009b0:	20000ce0 	.word	0x20000ce0

080009b4 <UI_MSG_SHOW_f>:

int UI_MSG_SHOW_f(UI_typedef* UI_obj,uint8_t* msg)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af04      	add	r7, sp, #16
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (NULL," ");//subcomand
 80009be:	4938      	ldr	r1, [pc, #224]	; (8000aa0 <UI_MSG_SHOW_f+0xec>)
 80009c0:	2000      	movs	r0, #0
 80009c2:	f013 f911 	bl	8013be8 <strtok>
 80009c6:	60f8      	str	r0, [r7, #12]

	if(strcmp(pch,"SENSOR")==0){
 80009c8:	4936      	ldr	r1, [pc, #216]	; (8000aa4 <UI_MSG_SHOW_f+0xf0>)
 80009ca:	68f8      	ldr	r0, [r7, #12]
 80009cc:	f7ff fc00 	bl	80001d0 <strcmp>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d120      	bne.n	8000a18 <UI_MSG_SHOW_f+0x64>
		sprintf(temp_array,"Device type: %d\rSerial num: %d\rFW version: %s\rBuild date: %s\rStatus: %d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status);
 80009d6:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <UI_MSG_SHOW_f+0xf4>)
 80009d8:	7f1b      	ldrb	r3, [r3, #28]
 80009da:	461a      	mov	r2, r3
 80009dc:	4b32      	ldr	r3, [pc, #200]	; (8000aa8 <UI_MSG_SHOW_f+0xf4>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
 80009e2:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <UI_MSG_SHOW_f+0xf4>)
 80009e4:	7f5b      	ldrb	r3, [r3, #29]
 80009e6:	9302      	str	r3, [sp, #8]
 80009e8:	4b30      	ldr	r3, [pc, #192]	; (8000aac <UI_MSG_SHOW_f+0xf8>)
 80009ea:	9301      	str	r3, [sp, #4]
 80009ec:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <UI_MSG_SHOW_f+0xfc>)
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	460b      	mov	r3, r1
 80009f2:	4930      	ldr	r1, [pc, #192]	; (8000ab4 <UI_MSG_SHOW_f+0x100>)
 80009f4:	4830      	ldr	r0, [pc, #192]	; (8000ab8 <UI_MSG_SHOW_f+0x104>)
 80009f6:	f013 f893 	bl	8013b20 <siprintf>
		temp_ptr.start_addr=temp_array;
 80009fa:	4b30      	ldr	r3, [pc, #192]	; (8000abc <UI_MSG_SHOW_f+0x108>)
 80009fc:	4a2e      	ldr	r2, [pc, #184]	; (8000ab8 <UI_MSG_SHOW_f+0x104>)
 80009fe:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000a00:	482d      	ldr	r0, [pc, #180]	; (8000ab8 <UI_MSG_SHOW_f+0x104>)
 8000a02:	f7ff fbef 	bl	80001e4 <strlen>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a2c      	ldr	r2, [pc, #176]	; (8000abc <UI_MSG_SHOW_f+0x108>)
 8000a0a:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000a0c:	4a2b      	ldr	r2, [pc, #172]	; (8000abc <UI_MSG_SHOW_f+0x108>)
 8000a0e:	2101      	movs	r1, #1
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff feca 	bl	80007aa <UI_send_msg>
 8000a16:	e036      	b.n	8000a86 <UI_MSG_SHOW_f+0xd2>
	}
	else if(strcmp(pch,"SETTINGS")==0){
 8000a18:	4929      	ldr	r1, [pc, #164]	; (8000ac0 <UI_MSG_SHOW_f+0x10c>)
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	f7ff fbd8 	bl	80001d0 <strcmp>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d11d      	bne.n	8000a62 <UI_MSG_SHOW_f+0xae>
		sprintf(temp_array,"File duration: %d\rWAV sample depth: %d\rWAV sample rate: %d\r",icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate);
 8000a26:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <UI_MSG_SHOW_f+0xf4>)
 8000a28:	6a1b      	ldr	r3, [r3, #32]
 8000a2a:	689a      	ldr	r2, [r3, #8]
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <UI_MSG_SHOW_f+0xf4>)
 8000a2e:	6a1b      	ldr	r3, [r3, #32]
 8000a30:	6859      	ldr	r1, [r3, #4]
 8000a32:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <UI_MSG_SHOW_f+0xf4>)
 8000a34:	6a1b      	ldr	r3, [r3, #32]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	4921      	ldr	r1, [pc, #132]	; (8000ac4 <UI_MSG_SHOW_f+0x110>)
 8000a3e:	481e      	ldr	r0, [pc, #120]	; (8000ab8 <UI_MSG_SHOW_f+0x104>)
 8000a40:	f013 f86e 	bl	8013b20 <siprintf>
		temp_ptr.start_addr=temp_array;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <UI_MSG_SHOW_f+0x108>)
 8000a46:	4a1c      	ldr	r2, [pc, #112]	; (8000ab8 <UI_MSG_SHOW_f+0x104>)
 8000a48:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000a4a:	481b      	ldr	r0, [pc, #108]	; (8000ab8 <UI_MSG_SHOW_f+0x104>)
 8000a4c:	f7ff fbca 	bl	80001e4 <strlen>
 8000a50:	4603      	mov	r3, r0
 8000a52:	4a1a      	ldr	r2, [pc, #104]	; (8000abc <UI_MSG_SHOW_f+0x108>)
 8000a54:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000a56:	4a19      	ldr	r2, [pc, #100]	; (8000abc <UI_MSG_SHOW_f+0x108>)
 8000a58:	2101      	movs	r1, #1
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff fea5 	bl	80007aa <UI_send_msg>
 8000a60:	e011      	b.n	8000a86 <UI_MSG_SHOW_f+0xd2>
	}
	else{
		sprintf(temp_array,"SETTINGS\rSENSOR\r");
 8000a62:	4919      	ldr	r1, [pc, #100]	; (8000ac8 <UI_MSG_SHOW_f+0x114>)
 8000a64:	4814      	ldr	r0, [pc, #80]	; (8000ab8 <UI_MSG_SHOW_f+0x104>)
 8000a66:	f013 f85b 	bl	8013b20 <siprintf>
		temp_ptr.start_addr=temp_array;
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <UI_MSG_SHOW_f+0x108>)
 8000a6c:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <UI_MSG_SHOW_f+0x104>)
 8000a6e:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000a70:	4811      	ldr	r0, [pc, #68]	; (8000ab8 <UI_MSG_SHOW_f+0x104>)
 8000a72:	f7ff fbb7 	bl	80001e4 <strlen>
 8000a76:	4603      	mov	r3, r0
 8000a78:	4a10      	ldr	r2, [pc, #64]	; (8000abc <UI_MSG_SHOW_f+0x108>)
 8000a7a:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000a7c:	4a0f      	ldr	r2, [pc, #60]	; (8000abc <UI_MSG_SHOW_f+0x108>)
 8000a7e:	2101      	movs	r1, #1
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff fe92 	bl	80007aa <UI_send_msg>
	}
	osMessagePut(UI_obj->events_q,UI_EVNT_SHOW,1);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f010 f850 	bl	8010b34 <osMessagePut>
	return UI_F_OK;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	08014bfc 	.word	0x08014bfc
 8000aa4:	08014c28 	.word	0x08014c28
 8000aa8:	200006d4 	.word	0x200006d4
 8000aac:	200006de 	.word	0x200006de
 8000ab0:	200006d6 	.word	0x200006d6
 8000ab4:	08014c30 	.word	0x08014c30
 8000ab8:	20000358 	.word	0x20000358
 8000abc:	20000350 	.word	0x20000350
 8000ac0:	08014c1c 	.word	0x08014c1c
 8000ac4:	08014c7c 	.word	0x08014c7c
 8000ac8:	08014cb8 	.word	0x08014cb8

08000acc <UI_MSG_SET_f>:

int UI_MSG_SET_f(UI_typedef* UI_obj,uint8_t* msg)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
	memcpy(UI_obj->date,pch,8);
	pch = strtok (NULL,",");//time
	memcpy(UI_obj->time,pch,6);
    */

	osMessagePut(UI_obj->events_q,UI_EVNT_SET,1);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	2201      	movs	r2, #1
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f010 f828 	bl	8010b34 <osMessagePut>
	return UI_F_OK;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <crc16_arc_update>:
};



uint16_t crc16_arc_update( char data, uint16_t accum )
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	460a      	mov	r2, r1
 8000afa:	71fb      	strb	r3, [r7, #7]
 8000afc:	4613      	mov	r3, r2
 8000afe:	80bb      	strh	r3, [r7, #4]
  unsigned char comb_value;
  comb_value = ( accum&0x00ff ) ^ (unsigned char)data;
 8000b00:	88bb      	ldrh	r3, [r7, #4]
 8000b02:	b25a      	sxtb	r2, r3
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	4053      	eors	r3, r2
 8000b0a:	b25b      	sxtb	r3, r3
 8000b0c:	73fb      	strb	r3, [r7, #15]
  accum = ( accum >> 8 ) ^ crc16_arc_table[ comb_value ];
 8000b0e:	88bb      	ldrh	r3, [r7, #4]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	4906      	ldr	r1, [pc, #24]	; (8000b30 <crc16_arc_update+0x40>)
 8000b18:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000b1c:	4053      	eors	r3, r2
 8000b1e:	80bb      	strh	r3, [r7, #4]
  return ( accum );
 8000b20:	88bb      	ldrh	r3, [r7, #4]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000000 	.word	0x20000000

08000b34 <get_crc16_arc>:

uint16_t get_crc16_arc( uint8_t* data,uint16_t length )
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	807b      	strh	r3, [r7, #2]
  uint16_t accm=0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	81fb      	strh	r3, [r7, #14]

  for(int i=0;i<length;i++)
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	e00d      	b.n	8000b66 <get_crc16_arc+0x32>
  {
    accm=crc16_arc_update(data[i], accm);
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	4413      	add	r3, r2
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	89fa      	ldrh	r2, [r7, #14]
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ffca 	bl	8000af0 <crc16_arc_update>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	81fb      	strh	r3, [r7, #14]
  for(int i=0;i<length;i++)
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	3301      	adds	r3, #1
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	887b      	ldrh	r3, [r7, #2]
 8000b68:	68ba      	ldr	r2, [r7, #8]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	dbed      	blt.n	8000b4a <get_crc16_arc+0x16>
  }

  return accm;
 8000b6e:	89fb      	ldrh	r3, [r7, #14]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <sd_storage_disk_init>:

extern ss_pp sd_cards_ss[4];
extern UART_HandleTypeDef huart1;

F_RES sd_storage_disk_init(FATFS* fs,char* path)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
	if(f_mount(fs,path,1)==FR_OK) return F_OK;
 8000b82:	2201      	movs	r2, #1
 8000b84:	6839      	ldr	r1, [r7, #0]
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f00e fb26 	bl	800f1d8 <f_mount>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d101      	bne.n	8000b96 <sd_storage_disk_init+0x1e>
 8000b92:	2300      	movs	r3, #0
 8000b94:	e000      	b.n	8000b98 <sd_storage_disk_init+0x20>
	else return F_ERR;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <sd_storage_init>:
F_RES sd_storage_init(sd_storage_t* self_object)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  //char t5[10];
  FRESULT res;
  DWORD fre_clust, fre_sect, tot_sect;
  FATFS*  fs;

  MX_FATFS_Init();
 8000ba8:	f008 f9f8 	bl	8008f9c <MX_FATFS_Init>

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
 8000bb0:	e078      	b.n	8000ca4 <sd_storage_init+0x104>
  {
	  sprintf(tt,"%d:",i);
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bb8:	493e      	ldr	r1, [pc, #248]	; (8000cb4 <sd_storage_init+0x114>)
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f012 ffb0 	bl	8013b20 <siprintf>
	  if(sd_storage_disk_init(&self_object->disks[i].fs,tt)==F_OK){
 8000bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc2:	f44f 7211 	mov.w	r2, #580	; 0x244
 8000bc6:	fb02 f303 	mul.w	r3, r2, r3
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	f107 0210 	add.w	r2, r7, #16
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ffcf 	bl	8000b78 <sd_storage_disk_init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d153      	bne.n	8000c88 <sd_storage_init+0xe8>
		  self_object->disks[i].status=DISK_PRESENT;
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be4:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000be8:	fb01 f303 	mul.w	r3, r1, r3
 8000bec:	4413      	add	r3, r2
 8000bee:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
		  //sprintf(t5,"InitID:%d\n",i);
  		  if(f_getfree(tt, &fre_clust, &fs)==FR_OK){
 8000bf6:	f107 0208 	add.w	r2, r7, #8
 8000bfa:	f107 010c 	add.w	r1, r7, #12
 8000bfe:	f107 0310 	add.w	r3, r7, #16
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00f fcb7 	bl	8010576 <f_getfree>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d147      	bne.n	8000c9e <sd_storage_init+0xfe>
		    tot_sect = (self_object->disks[i].fs.n_fatent - 2) * self_object->disks[i].fs.csize;
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c12:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000c16:	fb01 f303 	mul.w	r3, r1, r3
 8000c1a:	4413      	add	r3, r2
 8000c1c:	331c      	adds	r3, #28
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	3b02      	subs	r3, #2
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c26:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000c2a:	fb00 f202 	mul.w	r2, r0, r2
 8000c2e:	440a      	add	r2, r1
 8000c30:	320a      	adds	r2, #10
 8000c32:	8812      	ldrh	r2, [r2, #0]
 8000c34:	fb02 f303 	mul.w	r3, r2, r3
 8000c38:	623b      	str	r3, [r7, #32]
			fre_sect = fre_clust * self_object->disks[i].fs.csize;
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3e:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000c42:	fb01 f303 	mul.w	r3, r1, r3
 8000c46:	4413      	add	r3, r2
 8000c48:	330a      	adds	r3, #10
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	fb02 f303 	mul.w	r3, r2, r3
 8000c54:	61fb      	str	r3, [r7, #28]
			self_object->disks[i].size=tot_sect/2;
 8000c56:	6a3b      	ldr	r3, [r7, #32]
 8000c58:	085a      	lsrs	r2, r3, #1
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000c62:	fb00 f303 	mul.w	r3, r0, r3
 8000c66:	440b      	add	r3, r1
 8000c68:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000c6c:	601a      	str	r2, [r3, #0]
			self_object->disks[i].free_space=fre_sect/2;
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	085a      	lsrs	r2, r3, #1
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c76:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000c7a:	fb00 f303 	mul.w	r3, r0, r3
 8000c7e:	440b      	add	r3, r1
 8000c80:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	e00a      	b.n	8000c9e <sd_storage_init+0xfe>
		  }
	  }
	  else
	  {
		 self_object->disks[i].status=DISK_ABSENT;
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000c90:	fb01 f303 	mul.w	r3, r1, r3
 8000c94:	4413      	add	r3, r2
 8000c96:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca6:	2b03      	cmp	r3, #3
 8000ca8:	dd83      	ble.n	8000bb2 <sd_storage_init+0x12>
	  }
  }
  return F_OK;
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3728      	adds	r7, #40	; 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	08014ccc 	.word	0x08014ccc

08000cb8 <sd_storage_link_ss>:

F_RES sd_storage_link_ss(sd_storage_t* self_object,uint8_t disk_num, uint16_t sd_ss_pin,GPIO_TypeDef* sd_ss_port)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	72fb      	strb	r3, [r7, #11]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	813b      	strh	r3, [r7, #8]
	  sd_cards_ss[disk_num].sd_ss_pin=sd_ss_pin;
 8000cca:	7afb      	ldrb	r3, [r7, #11]
 8000ccc:	4908      	ldr	r1, [pc, #32]	; (8000cf0 <sd_storage_link_ss+0x38>)
 8000cce:	893a      	ldrh	r2, [r7, #8]
 8000cd0:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
	  sd_cards_ss[disk_num].sd_ss_port=sd_ss_port;
 8000cd4:	7afb      	ldrb	r3, [r7, #11]
 8000cd6:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <sd_storage_link_ss+0x38>)
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	4413      	add	r3, r2
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	605a      	str	r2, [r3, #4]
	  return F_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	200019d4 	.word	0x200019d4

08000cf4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <vApplicationGetIdleTaskMemory+0x30>)
 8000d0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000420 	.word	0x20000420
 8000d24:	200004d4 	.word	0x200004d4

08000d28 <icListen_prepare_collect_msg>:
	msg->basic_hdr.length=sizeof(icListen_setup_full_msg)-4-2;
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_setup_full_msg)-2);
}

void icListen_prepare_collect_msg(icListen_collect_short_mask_msg* msg,uint8_t mask)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
	msg->basic_hdr.sync=MSG_SYNC;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	222a      	movs	r2, #42	; 0x2a
 8000d38:	701a      	strb	r2, [r3, #0]
    msg->basic_hdr.type=MSG_TYPE_COLLECT_DATA;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2243      	movs	r2, #67	; 0x43
 8000d3e:	705a      	strb	r2, [r3, #1]
    msg->mask_hdr.mask=mask;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	78fa      	ldrb	r2, [r7, #3]
 8000d44:	711a      	strb	r2, [r3, #4]
    msg->basic_hdr.length=1;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f042 0201 	orr.w	r2, r2, #1
 8000d4e:	709a      	strb	r2, [r3, #2]
 8000d50:	2200      	movs	r2, #0
 8000d52:	70da      	strb	r2, [r3, #3]
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_collect_short_mask_msg)-2);
 8000d54:	2105      	movs	r1, #5
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff feec 	bl	8000b34 <get_crc16_arc>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	461a      	mov	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f8a3 2005 	strh.w	r2, [r3, #5]
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <icListen_parse_msg>:
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_enquire_device_msg)-2);

}

F_RES icListen_parse_msg(uint8_t* msg,icListen_object_typedef* self_object)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]

	icListen_basic_header* basic_header=(icListen_basic_header*)msg;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	617b      	str	r3, [r7, #20]
	icListen_status_basic_msg* status_msg=(icListen_status_basic_msg*)msg;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	613b      	str	r3, [r7, #16]

	uint16_t crc_msg=*(uint16_t*)(msg+basic_header->length+4);
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	885b      	ldrh	r3, [r3, #2]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	3304      	adds	r3, #4
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	81fb      	strh	r3, [r7, #14]

	if(basic_header->sync==MSG_SYNC){
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b2a      	cmp	r3, #42	; 0x2a
 8000d98:	d14a      	bne.n	8000e30 <icListen_parse_msg+0xc0>

	switch(basic_header->type){
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	785b      	ldrb	r3, [r3, #1]
 8000d9e:	2b43      	cmp	r3, #67	; 0x43
 8000da0:	d033      	beq.n	8000e0a <icListen_parse_msg+0x9a>
 8000da2:	2b45      	cmp	r3, #69	; 0x45
 8000da4:	d146      	bne.n	8000e34 <icListen_parse_msg+0xc4>
	     case MSG_TYPE_ENQUIRE_DEVICE:
	    	 if(crc_msg==get_crc16_arc(msg,(uint16_t)basic_header->length+4)){
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	885b      	ldrh	r3, [r3, #2]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	3304      	adds	r3, #4
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	4619      	mov	r1, r3
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff febe 	bl	8000b34 <get_crc16_arc>
 8000db8:	4603      	mov	r3, r0
 8000dba:	461a      	mov	r2, r3
 8000dbc:	89fb      	ldrh	r3, [r7, #14]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d121      	bne.n	8000e06 <icListen_parse_msg+0x96>
		    	  self_object->status=status_msg->status;
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	775a      	strb	r2, [r3, #29]
		    	  memcpy(self_object->build_date,status_msg->build_date,18);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	f103 000a 	add.w	r0, r3, #10
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	330e      	adds	r3, #14
 8000dd6:	2212      	movs	r2, #18
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f012 fd31 	bl	8013840 <memcpy>
		    	  memcpy(self_object->firmware_version,status_msg->firmware_version,8);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	1c98      	adds	r0, r3, #2
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	3306      	adds	r3, #6
 8000de6:	2208      	movs	r2, #8
 8000de8:	4619      	mov	r1, r3
 8000dea:	f012 fd29 	bl	8013840 <memcpy>
		    	  self_object->serial_number=status_msg->serial_number;
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	889b      	ldrh	r3, [r3, #4]
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	801a      	strh	r2, [r3, #0]
		    	  self_object->device_type=status_msg->device_type;
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	771a      	strb	r2, [r3, #28]
		    	  return F_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	e017      	b.n	8000e36 <icListen_parse_msg+0xc6>
	    	  }
	    	 else return F_ERR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e015      	b.n	8000e36 <icListen_parse_msg+0xc6>
	     break;
		 case MSG_TYPE_COLLECT_DATA:
		    	  msg_ptr2.start_addr=msg+sizeof(icListen_basic_header);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	4a0c      	ldr	r2, [pc, #48]	; (8000e40 <icListen_parse_msg+0xd0>)
 8000e10:	6013      	str	r3, [r2, #0]
		    	  msg_ptr2.size=basic_header->length;
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	885b      	ldrh	r3, [r3, #2]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <icListen_parse_msg+0xd0>)
 8000e1c:	605a      	str	r2, [r3, #4]
		    	  osMessagePut(storage_wHandle,&msg_ptr2,0);
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <icListen_parse_msg+0xd4>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4907      	ldr	r1, [pc, #28]	; (8000e40 <icListen_parse_msg+0xd0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f00f fe84 	bl	8010b34 <osMessagePut>
		    	  return F_OK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	e002      	b.n	8000e36 <icListen_parse_msg+0xc6>
		 break;
	 };
	}
	else{
		return F_ERR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e000      	b.n	8000e36 <icListen_parse_msg+0xc6>
	}
	return F_ERR;
 8000e34:	2301      	movs	r3, #1
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200006f8 	.word	0x200006f8
 8000e44:	200008c0 	.word	0x200008c0

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b5b0      	push	{r4, r5, r7, lr}
 8000e4a:	b0ac      	sub	sp, #176	; 0xb0
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4e:	f001 fba5 	bl	800259c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e52:	f000 f8c5 	bl	8000fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e56:	f000 fa01 	bl	800125c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e5a:	f000 f92b 	bl	80010b4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000e5e:	f000 f9ab 	bl	80011b8 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000e62:	f000 f9d3 	bl	800120c <MX_DMA_Init>
  MX_TIM2_Init();
 8000e66:	f000 f95b 	bl	8001120 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  UI_init(&user_interface);
 8000e6a:	484a      	ldr	r0, [pc, #296]	; (8000f94 <main+0x14c>)
 8000e6c:	f7ff fb9a 	bl	80005a4 <UI_init>
  HAL_UART_Receive_IT(&UI_UART,&(user_interface.media_rx_byte),1);
 8000e70:	2201      	movs	r2, #1
 8000e72:	4949      	ldr	r1, [pc, #292]	; (8000f98 <main+0x150>)
 8000e74:	4849      	ldr	r0, [pc, #292]	; (8000f9c <main+0x154>)
 8000e76:	f006 f91d 	bl	80070b4 <HAL_UART_Receive_IT>

  mcu_flash_init(&mcu_flash,FLASH_SECTOR_11);
 8000e7a:	210b      	movs	r1, #11
 8000e7c:	4848      	ldr	r0, [pc, #288]	; (8000fa0 <main+0x158>)
 8000e7e:	f000 fc7f 	bl	8001780 <mcu_flash_init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of AppliEvent */
  osMessageQDef(AppliEvent, 16, uint16_t);
 8000e82:	4b48      	ldr	r3, [pc, #288]	; (8000fa4 <main+0x15c>)
 8000e84:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8000e88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AppliEventHandle = osMessageCreate(osMessageQ(AppliEvent), NULL);
 8000e8e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f00f fe24 	bl	8010ae2 <osMessageCreate>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4a42      	ldr	r2, [pc, #264]	; (8000fa8 <main+0x160>)
 8000e9e:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_rx */
  osMessageQDef(USB_rx, 10, uint32_t);
 8000ea0:	4b42      	ldr	r3, [pc, #264]	; (8000fac <main+0x164>)
 8000ea2:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000ea6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ea8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  USB_rxHandle = osMessageCreate(osMessageQ(USB_rx), NULL);
 8000eac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f00f fe15 	bl	8010ae2 <osMessageCreate>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	4a3d      	ldr	r2, [pc, #244]	; (8000fb0 <main+0x168>)
 8000ebc:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_tx */
  osMessageQDef(USB_tx, 10, uint32_t);
 8000ebe:	4b3b      	ldr	r3, [pc, #236]	; (8000fac <main+0x164>)
 8000ec0:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000ec4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ec6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  USB_txHandle = osMessageCreate(osMessageQ(USB_tx), NULL);
 8000eca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f00f fe06 	bl	8010ae2 <osMessageCreate>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4a36      	ldr	r2, [pc, #216]	; (8000fb4 <main+0x16c>)
 8000eda:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_w */
  osMessageQDef(storage_w, 5, uint32_t);
 8000edc:	4b36      	ldr	r3, [pc, #216]	; (8000fb8 <main+0x170>)
 8000ede:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000ee2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ee4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  storage_wHandle = osMessageCreate(osMessageQ(storage_w), NULL);
 8000ee8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f00f fdf7 	bl	8010ae2 <osMessageCreate>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4a31      	ldr	r2, [pc, #196]	; (8000fbc <main+0x174>)
 8000ef8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000efa:	4b31      	ldr	r3, [pc, #196]	; (8000fc0 <main+0x178>)
 8000efc:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000f00:	461d      	mov	r5, r3
 8000f02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f00f fd84 	bl	8010a22 <osThreadCreate>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a29      	ldr	r2, [pc, #164]	; (8000fc4 <main+0x17c>)
 8000f1e:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_t */
  osThreadDef(storage_t, storage_f, osPriorityNormal, 0, 512);
 8000f20:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <main+0x180>)
 8000f22:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000f26:	461d      	mov	r5, r3
 8000f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  storage_tHandle = osThreadCreate(osThread(storage_t), NULL);
 8000f34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f00f fd71 	bl	8010a22 <osThreadCreate>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a22      	ldr	r2, [pc, #136]	; (8000fcc <main+0x184>)
 8000f44:	6013      	str	r3, [r2, #0]

  /* definition and creation of main_t */
  osThreadDef(main_t, main_f, osPriorityNormal, 0, 512);
 8000f46:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <main+0x188>)
 8000f48:	f107 041c 	add.w	r4, r7, #28
 8000f4c:	461d      	mov	r5, r3
 8000f4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  main_tHandle = osThreadCreate(osThread(main_t), NULL);
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f00f fd5e 	bl	8010a22 <osThreadCreate>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a1a      	ldr	r2, [pc, #104]	; (8000fd4 <main+0x18c>)
 8000f6a:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart_t */
  osThreadDef(uart_t, uart_f, osPriorityNormal, 0, 256);
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <main+0x190>)
 8000f6e:	463c      	mov	r4, r7
 8000f70:	461d      	mov	r5, r3
 8000f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart_tHandle = osThreadCreate(osThread(uart_t), NULL);
 8000f7e:	463b      	mov	r3, r7
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f00f fd4d 	bl	8010a22 <osThreadCreate>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <main+0x194>)
 8000f8c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f8e:	f00f fd41 	bl	8010a14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <main+0x14a>
 8000f94:	200008cc 	.word	0x200008cc
 8000f98:	200008d8 	.word	0x200008d8
 8000f9c:	20000860 	.word	0x20000860
 8000fa0:	20000ce0 	.word	0x20000ce0
 8000fa4:	08014cf8 	.word	0x08014cf8
 8000fa8:	200008b4 	.word	0x200008b4
 8000fac:	08014d08 	.word	0x08014d08
 8000fb0:	200008b8 	.word	0x200008b8
 8000fb4:	200008bc 	.word	0x200008bc
 8000fb8:	08014d18 	.word	0x08014d18
 8000fbc:	200008c0 	.word	0x200008c0
 8000fc0:	08014d28 	.word	0x08014d28
 8000fc4:	200008a4 	.word	0x200008a4
 8000fc8:	08014d44 	.word	0x08014d44
 8000fcc:	200008a8 	.word	0x200008a8
 8000fd0:	08014d60 	.word	0x08014d60
 8000fd4:	200008ac 	.word	0x200008ac
 8000fd8:	08014d7c 	.word	0x08014d7c
 8000fdc:	200008b0 	.word	0x200008b0

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b094      	sub	sp, #80	; 0x50
 8000fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe6:	f107 0320 	add.w	r3, r7, #32
 8000fea:	2230      	movs	r2, #48	; 0x30
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f012 fc34 	bl	801385c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	4b28      	ldr	r3, [pc, #160]	; (80010ac <SystemClock_Config+0xcc>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	4a27      	ldr	r2, [pc, #156]	; (80010ac <SystemClock_Config+0xcc>)
 800100e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001012:	6413      	str	r3, [r2, #64]	; 0x40
 8001014:	4b25      	ldr	r3, [pc, #148]	; (80010ac <SystemClock_Config+0xcc>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <SystemClock_Config+0xd0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a21      	ldr	r2, [pc, #132]	; (80010b0 <SystemClock_Config+0xd0>)
 800102a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <SystemClock_Config+0xd0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800103c:	2301      	movs	r3, #1
 800103e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001040:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001046:	2302      	movs	r3, #2
 8001048:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800104a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001050:	230f      	movs	r3, #15
 8001052:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001054:	2390      	movs	r3, #144	; 0x90
 8001056:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001058:	2302      	movs	r3, #2
 800105a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800105c:	2305      	movs	r3, #5
 800105e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001060:	f107 0320 	add.w	r3, r7, #32
 8001064:	4618      	mov	r0, r3
 8001066:	f003 fff5 	bl	8005054 <HAL_RCC_OscConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001070:	f000 fb80 	bl	8001774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001074:	230f      	movs	r3, #15
 8001076:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001078:	2302      	movs	r3, #2
 800107a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001080:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001084:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2103      	movs	r1, #3
 8001092:	4618      	mov	r0, r3
 8001094:	f004 fa56 	bl	8005544 <HAL_RCC_ClockConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800109e:	f000 fb69 	bl	8001774 <Error_Handler>
  }
}
 80010a2:	bf00      	nop
 80010a4:	3750      	adds	r7, #80	; 0x50
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40007000 	.word	0x40007000

080010b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <MX_SPI1_Init+0x64>)
 80010ba:	4a18      	ldr	r2, [pc, #96]	; (800111c <MX_SPI1_Init+0x68>)
 80010bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <MX_SPI1_Init+0x64>)
 80010c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010c6:	4b14      	ldr	r3, [pc, #80]	; (8001118 <MX_SPI1_Init+0x64>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <MX_SPI1_Init+0x64>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_SPI1_Init+0x64>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <MX_SPI1_Init+0x64>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_SPI1_Init+0x64>)
 80010e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_SPI1_Init+0x64>)
 80010e8:	2208      	movs	r2, #8
 80010ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <MX_SPI1_Init+0x64>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_SPI1_Init+0x64>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <MX_SPI1_Init+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_SPI1_Init+0x64>)
 8001100:	220a      	movs	r2, #10
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <MX_SPI1_Init+0x64>)
 8001106:	f004 fc2f 	bl	8005968 <HAL_SPI_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001110:	f000 fb30 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000700 	.word	0x20000700
 800111c:	40013000 	.word	0x40013000

08001120 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001134:	463b      	mov	r3, r7
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <MX_TIM2_Init+0x94>)
 800113e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001142:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <MX_TIM2_Init+0x94>)
 8001146:	2200      	movs	r2, #0
 8001148:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <MX_TIM2_Init+0x94>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001150:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <MX_TIM2_Init+0x94>)
 8001152:	f04f 32ff 	mov.w	r2, #4294967295
 8001156:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <MX_TIM2_Init+0x94>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <MX_TIM2_Init+0x94>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001164:	4813      	ldr	r0, [pc, #76]	; (80011b4 <MX_TIM2_Init+0x94>)
 8001166:	f005 f9ff 	bl	8006568 <HAL_TIM_Base_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001170:	f000 fb00 	bl	8001774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001178:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	4619      	mov	r1, r3
 8001180:	480c      	ldr	r0, [pc, #48]	; (80011b4 <MX_TIM2_Init+0x94>)
 8001182:	f005 fbb9 	bl	80068f8 <HAL_TIM_ConfigClockSource>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800118c:	f000 faf2 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_TIM2_Init+0x94>)
 800119e:	f005 fdd5 	bl	8006d4c <HAL_TIMEx_MasterConfigSynchronization>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011a8:	f000 fae4 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000818 	.word	0x20000818

080011b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_USART1_UART_Init+0x4c>)
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <MX_USART1_UART_Init+0x50>)
 80011c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <MX_USART1_UART_Init+0x4c>)
 80011c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_USART1_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_USART1_UART_Init+0x4c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <MX_USART1_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_USART1_UART_Init+0x4c>)
 80011de:	220c      	movs	r2, #12
 80011e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <MX_USART1_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_USART1_UART_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_USART1_UART_Init+0x4c>)
 80011f0:	f005 fe3c 	bl	8006e6c <HAL_UART_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011fa:	f000 fabb 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000860 	.word	0x20000860
 8001208:	40011000 	.word	0x40011000

0800120c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <MX_DMA_Init+0x4c>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <MX_DMA_Init+0x4c>)
 800121c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <MX_DMA_Init+0x4c>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2105      	movs	r1, #5
 8001232:	2038      	movs	r0, #56	; 0x38
 8001234:	f001 fad0 	bl	80027d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001238:	2038      	movs	r0, #56	; 0x38
 800123a:	f001 fae9 	bl	8002810 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2105      	movs	r1, #5
 8001242:	203b      	movs	r0, #59	; 0x3b
 8001244:	f001 fac8 	bl	80027d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001248:	203b      	movs	r0, #59	; 0x3b
 800124a:	f001 fae1 	bl	8002810 <HAL_NVIC_EnableIRQ>

}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800

0800125c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b39      	ldr	r3, [pc, #228]	; (800135c <MX_GPIO_Init+0x100>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a38      	ldr	r2, [pc, #224]	; (800135c <MX_GPIO_Init+0x100>)
 800127c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b36      	ldr	r3, [pc, #216]	; (800135c <MX_GPIO_Init+0x100>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b32      	ldr	r3, [pc, #200]	; (800135c <MX_GPIO_Init+0x100>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a31      	ldr	r2, [pc, #196]	; (800135c <MX_GPIO_Init+0x100>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b2f      	ldr	r3, [pc, #188]	; (800135c <MX_GPIO_Init+0x100>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	4b2b      	ldr	r3, [pc, #172]	; (800135c <MX_GPIO_Init+0x100>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a2a      	ldr	r2, [pc, #168]	; (800135c <MX_GPIO_Init+0x100>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b28      	ldr	r3, [pc, #160]	; (800135c <MX_GPIO_Init+0x100>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b24      	ldr	r3, [pc, #144]	; (800135c <MX_GPIO_Init+0x100>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a23      	ldr	r2, [pc, #140]	; (800135c <MX_GPIO_Init+0x100>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b21      	ldr	r3, [pc, #132]	; (800135c <MX_GPIO_Init+0x100>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_SD3_GPIO_Port, SS_SD3_Pin, GPIO_PIN_SET);
 80012e2:	2201      	movs	r2, #1
 80012e4:	2102      	movs	r1, #2
 80012e6:	481e      	ldr	r0, [pc, #120]	; (8001360 <MX_GPIO_Init+0x104>)
 80012e8:	f002 fa90 	bl	800380c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin, GPIO_PIN_SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	2186      	movs	r1, #134	; 0x86
 80012f0:	481c      	ldr	r0, [pc, #112]	; (8001364 <MX_GPIO_Init+0x108>)
 80012f2:	f002 fa8b 	bl	800380c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_VBUS_GPIO_Port, USB_VBUS_Pin, GPIO_PIN_SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	2101      	movs	r1, #1
 80012fa:	481b      	ldr	r0, [pc, #108]	; (8001368 <MX_GPIO_Init+0x10c>)
 80012fc:	f002 fa86 	bl	800380c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS_SD3_Pin */
  GPIO_InitStruct.Pin = SS_SD3_Pin;
 8001300:	2302      	movs	r3, #2
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SS_SD3_GPIO_Port, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	4812      	ldr	r0, [pc, #72]	; (8001360 <MX_GPIO_Init+0x104>)
 8001318:	f002 f8dc 	bl	80034d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_SD1_Pin SS_SD2_Pin SS_SD4_Pin */
  GPIO_InitStruct.Pin = SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin;
 800131c:	2386      	movs	r3, #134	; 0x86
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	480c      	ldr	r0, [pc, #48]	; (8001364 <MX_GPIO_Init+0x108>)
 8001334:	f002 f8ce 	bl	80034d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001338:	2301      	movs	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4806      	ldr	r0, [pc, #24]	; (8001368 <MX_GPIO_Init+0x10c>)
 8001350:	f002 f8c0 	bl	80034d4 <HAL_GPIO_Init>

}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	; 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	40020800 	.word	0x40020800
 8001364:	40020000 	.word	0x40020000
 8001368:	40020400 	.word	0x40020400

0800136c <HAL_UART_RxCpltCallback>:

uint8_t tmp1;
uint8_t tmp2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 if(huart==&UI_UART)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a09      	ldr	r2, [pc, #36]	; (800139c <HAL_UART_RxCpltCallback+0x30>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d10a      	bne.n	8001392 <HAL_UART_RxCpltCallback+0x26>
 {
	 UI_media_process_byte(&user_interface,user_interface.media_rx_byte);
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <HAL_UART_RxCpltCallback+0x34>)
 800137e:	7b1b      	ldrb	r3, [r3, #12]
 8001380:	4619      	mov	r1, r3
 8001382:	4807      	ldr	r0, [pc, #28]	; (80013a0 <HAL_UART_RxCpltCallback+0x34>)
 8001384:	f7ff f978 	bl	8000678 <UI_media_process_byte>
	 HAL_UART_Receive_IT(&UI_UART,&(user_interface.media_rx_byte),1);
 8001388:	2201      	movs	r2, #1
 800138a:	4906      	ldr	r1, [pc, #24]	; (80013a4 <HAL_UART_RxCpltCallback+0x38>)
 800138c:	4803      	ldr	r0, [pc, #12]	; (800139c <HAL_UART_RxCpltCallback+0x30>)
 800138e:	f005 fe91 	bl	80070b4 <HAL_UART_Receive_IT>
 }
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000860 	.word	0x20000860
 80013a0:	200008cc 	.word	0x200008cc
 80013a4:	200008d8 	.word	0x200008d8

080013a8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

 if(huart==&UI_UART)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a09      	ldr	r2, [pc, #36]	; (80013d8 <HAL_UART_TxCpltCallback+0x30>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d10b      	bne.n	80013d0 <HAL_UART_TxCpltCallback+0x28>
 {
	 if(UI_media_get_byte(&user_interface,&tmp2)==UI_F_OK)
 80013b8:	4908      	ldr	r1, [pc, #32]	; (80013dc <HAL_UART_TxCpltCallback+0x34>)
 80013ba:	4809      	ldr	r0, [pc, #36]	; (80013e0 <HAL_UART_TxCpltCallback+0x38>)
 80013bc:	f7ff f9da 	bl	8000774 <UI_media_get_byte>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d104      	bne.n	80013d0 <HAL_UART_TxCpltCallback+0x28>
	 {
	    HAL_UART_Transmit_IT(&UI_UART,&tmp2,1);
 80013c6:	2201      	movs	r2, #1
 80013c8:	4904      	ldr	r1, [pc, #16]	; (80013dc <HAL_UART_TxCpltCallback+0x34>)
 80013ca:	4803      	ldr	r0, [pc, #12]	; (80013d8 <HAL_UART_TxCpltCallback+0x30>)
 80013cc:	f005 fe2d 	bl	800702a <HAL_UART_Transmit_IT>
	 }
 }
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000860 	.word	0x20000860
 80013dc:	200019c8 	.word	0x200019c8
 80013e0:	200008cc 	.word	0x200008cc

080013e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80013ec:	f011 fdec 	bl	8012fc8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
   osEvent event;
  /* Infinite loop */
  for(;;)
  {
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 80013f0:	4b17      	ldr	r3, [pc, #92]	; (8001450 <StartDefaultTask+0x6c>)
 80013f2:	6819      	ldr	r1, [r3, #0]
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	4618      	mov	r0, r3
 80013fe:	f00f fbd9 	bl	8010bb4 <osMessageGet>

	  if(event.status == osEventMessage)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2b10      	cmp	r3, #16
 8001406:	d11f      	bne.n	8001448 <StartDefaultTask+0x64>
	  {
		switch(event.value.v)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	2b03      	cmp	r3, #3
 800140c:	d006      	beq.n	800141c <StartDefaultTask+0x38>
 800140e:	2b03      	cmp	r3, #3
 8001410:	d81c      	bhi.n	800144c <StartDefaultTask+0x68>
 8001412:	2b01      	cmp	r3, #1
 8001414:	d015      	beq.n	8001442 <StartDefaultTask+0x5e>
 8001416:	2b02      	cmp	r3, #2
 8001418:	d004      	beq.n	8001424 <StartDefaultTask+0x40>
		 case APPLICATION_START:
		   USB_set_line_coding();
		 break;

		 default:
		 break;
 800141a:	e017      	b.n	800144c <StartDefaultTask+0x68>
			 icListen.status=DISCONNECTED;
 800141c:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <StartDefaultTask+0x70>)
 800141e:	2201      	movs	r2, #1
 8001420:	775a      	strb	r2, [r3, #29]
		 break;
 8001422:	e014      	b.n	800144e <StartDefaultTask+0x6a>
			 osDelay(5000);
 8001424:	f241 3088 	movw	r0, #5000	; 0x1388
 8001428:	f00f fb47 	bl	8010aba <osDelay>
			 icListen.status=CONNECTED;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <StartDefaultTask+0x70>)
 800142e:	2200      	movs	r2, #0
 8001430:	775a      	strb	r2, [r3, #29]
			 osMessagePut(USB_txHandle,&collect_msg_ptr, 0);
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <StartDefaultTask+0x74>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4909      	ldr	r1, [pc, #36]	; (800145c <StartDefaultTask+0x78>)
 8001438:	2200      	movs	r2, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f00f fb7a 	bl	8010b34 <osMessagePut>
		 break;
 8001440:	e005      	b.n	800144e <StartDefaultTask+0x6a>
		   USB_set_line_coding();
 8001442:	f011 fd93 	bl	8012f6c <USB_set_line_coding>
		 break;
 8001446:	e002      	b.n	800144e <StartDefaultTask+0x6a>
		 }
	   }
 8001448:	bf00      	nop
 800144a:	e7d1      	b.n	80013f0 <StartDefaultTask+0xc>
		 break;
 800144c:	bf00      	nop
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 800144e:	e7cf      	b.n	80013f0 <StartDefaultTask+0xc>
 8001450:	200008b4 	.word	0x200008b4
 8001454:	200006d4 	.word	0x200006d4
 8001458:	200008bc 	.word	0x200008bc
 800145c:	200008c4 	.word	0x200008c4

08001460 <storage_f>:
* @retval None
*/

/* USER CODE END Header_storage_f */
void storage_f(void const * argument)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b094      	sub	sp, #80	; 0x50
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN storage_f */
  osDelay(500);
 8001468:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800146c:	f00f fb25 	bl	8010aba <osDelay>
  char ttr[20];
  memory_region_pointer msg_ptr;
  memory_region_pointer* data_ptr;
  msg_ptr.start_addr=ttr;
 8001470:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28

  osEvent storage_w_event;

  sd_storage_link_ss(&microsd_storage,0,SS_SD1_Pin,GPIOA);
 8001476:	4b4d      	ldr	r3, [pc, #308]	; (80015ac <storage_f+0x14c>)
 8001478:	2202      	movs	r2, #2
 800147a:	2100      	movs	r1, #0
 800147c:	484c      	ldr	r0, [pc, #304]	; (80015b0 <storage_f+0x150>)
 800147e:	f7ff fc1b 	bl	8000cb8 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,1,SS_SD2_Pin,GPIOA);
 8001482:	4b4a      	ldr	r3, [pc, #296]	; (80015ac <storage_f+0x14c>)
 8001484:	2204      	movs	r2, #4
 8001486:	2101      	movs	r1, #1
 8001488:	4849      	ldr	r0, [pc, #292]	; (80015b0 <storage_f+0x150>)
 800148a:	f7ff fc15 	bl	8000cb8 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,2,SS_SD3_Pin,SS_SD3_GPIO_Port);
 800148e:	4b49      	ldr	r3, [pc, #292]	; (80015b4 <storage_f+0x154>)
 8001490:	2202      	movs	r2, #2
 8001492:	2102      	movs	r1, #2
 8001494:	4846      	ldr	r0, [pc, #280]	; (80015b0 <storage_f+0x150>)
 8001496:	f7ff fc0f 	bl	8000cb8 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,3,SS_SD4_Pin,GPIOA);
 800149a:	4b44      	ldr	r3, [pc, #272]	; (80015ac <storage_f+0x14c>)
 800149c:	2280      	movs	r2, #128	; 0x80
 800149e:	2103      	movs	r1, #3
 80014a0:	4843      	ldr	r0, [pc, #268]	; (80015b0 <storage_f+0x150>)
 80014a2:	f7ff fc09 	bl	8000cb8 <sd_storage_link_ss>
  sd_storage_init(&microsd_storage);
 80014a6:	4842      	ldr	r0, [pc, #264]	; (80015b0 <storage_f+0x150>)
 80014a8:	f7ff fb7a 	bl	8000ba0 <sd_storage_init>

  if(wav_file_open(&wav_file,"0:test.wav")==F_ERR)
 80014ac:	4942      	ldr	r1, [pc, #264]	; (80015b8 <storage_f+0x158>)
 80014ae:	4843      	ldr	r0, [pc, #268]	; (80015bc <storage_f+0x15c>)
 80014b0:	f000 ff9c 	bl	80023ec <wav_file_open>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d130      	bne.n	800151c <storage_f+0xbc>
  {
   if(wav_file_open(&wav_file,"1:test.wav")==F_ERR)
 80014ba:	4941      	ldr	r1, [pc, #260]	; (80015c0 <storage_f+0x160>)
 80014bc:	483f      	ldr	r0, [pc, #252]	; (80015bc <storage_f+0x15c>)
 80014be:	f000 ff95 	bl	80023ec <wav_file_open>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d122      	bne.n	800150e <storage_f+0xae>
   {
	if(wav_file_open(&wav_file,"2:test.wav")==F_ERR)
 80014c8:	493e      	ldr	r1, [pc, #248]	; (80015c4 <storage_f+0x164>)
 80014ca:	483c      	ldr	r0, [pc, #240]	; (80015bc <storage_f+0x15c>)
 80014cc:	f000 ff8e 	bl	80023ec <wav_file_open>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d114      	bne.n	8001500 <storage_f+0xa0>
	{
	 if(wav_file_open(&wav_file,"3:test.wav")==F_ERR)
 80014d6:	493c      	ldr	r1, [pc, #240]	; (80015c8 <storage_f+0x168>)
 80014d8:	4838      	ldr	r0, [pc, #224]	; (80015bc <storage_f+0x15c>)
 80014da:	f000 ff87 	bl	80023ec <wav_file_open>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d106      	bne.n	80014f2 <storage_f+0x92>
	 {
		 sprintf(ttr,"SD error\r");
 80014e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014e8:	4938      	ldr	r1, [pc, #224]	; (80015cc <storage_f+0x16c>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	f012 fb18 	bl	8013b20 <siprintf>
 80014f0:	e01a      	b.n	8001528 <storage_f+0xc8>
	 }
	 else sprintf(ttr,"SD3 detected\r");
 80014f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014f6:	4936      	ldr	r1, [pc, #216]	; (80015d0 <storage_f+0x170>)
 80014f8:	4618      	mov	r0, r3
 80014fa:	f012 fb11 	bl	8013b20 <siprintf>
 80014fe:	e013      	b.n	8001528 <storage_f+0xc8>
	}
	else sprintf(ttr,"SD2 detected\r");
 8001500:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001504:	4933      	ldr	r1, [pc, #204]	; (80015d4 <storage_f+0x174>)
 8001506:	4618      	mov	r0, r3
 8001508:	f012 fb0a 	bl	8013b20 <siprintf>
 800150c:	e00c      	b.n	8001528 <storage_f+0xc8>
   }
   else sprintf(ttr,"SD1 detected\r");
 800150e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001512:	4931      	ldr	r1, [pc, #196]	; (80015d8 <storage_f+0x178>)
 8001514:	4618      	mov	r0, r3
 8001516:	f012 fb03 	bl	8013b20 <siprintf>
 800151a:	e005      	b.n	8001528 <storage_f+0xc8>
  }
  else sprintf(ttr,"SD0 detected\r");
 800151c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001520:	492e      	ldr	r1, [pc, #184]	; (80015dc <storage_f+0x17c>)
 8001522:	4618      	mov	r0, r3
 8001524:	f012 fafc 	bl	8013b20 <siprintf>
  msg_ptr.size=strlen(msg_ptr.start_addr);
 8001528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe fe5a 	bl	80001e4 <strlen>
 8001530:	4603      	mov	r3, r0
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
  UI_send_msg(&user_interface,UI_CMD_SEND_DATA,&msg_ptr);
 8001534:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001538:	461a      	mov	r2, r3
 800153a:	2101      	movs	r1, #1
 800153c:	4828      	ldr	r0, [pc, #160]	; (80015e0 <storage_f+0x180>)
 800153e:	f7ff f934 	bl	80007aa <UI_send_msg>
  uint32_t tick1,tick2;
  char xxx[20];
  /* Infinite loop */
  for(;;)
  {
	  storage_w_event = osMessageGet(storage_wHandle, osWaitForever);
 8001542:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <storage_f+0x184>)
 8001544:	6819      	ldr	r1, [r3, #0]
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	f04f 32ff 	mov.w	r2, #4294967295
 800154e:	4618      	mov	r0, r3
 8001550:	f00f fb30 	bl	8010bb4 <osMessageGet>
	  if(storage_w_event.status == osEventMessage){
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	2b10      	cmp	r3, #16
 8001558:	d1f3      	bne.n	8001542 <storage_f+0xe2>
		data_ptr=(memory_region_pointer*)storage_w_event.value.v;
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	64fb      	str	r3, [r7, #76]	; 0x4c
		tick1=xTaskGetTickCount();
 800155e:	f010 fc87 	bl	8011e70 <xTaskGetTickCount>
 8001562:	64b8      	str	r0, [r7, #72]	; 0x48
		wav_file_write(&wav_file,data_ptr->start_addr,data_ptr->size);
 8001564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001566:	6819      	ldr	r1, [r3, #0]
 8001568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	461a      	mov	r2, r3
 800156e:	4813      	ldr	r0, [pc, #76]	; (80015bc <storage_f+0x15c>)
 8001570:	f000 ffbe 	bl	80024f0 <wav_file_write>
		tick2=xTaskGetTickCount();
 8001574:	f010 fc7c 	bl	8011e70 <xTaskGetTickCount>
 8001578:	6478      	str	r0, [r7, #68]	; 0x44
		sprintf(xxx,"P:%d",tick2-tick1);
 800157a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800157c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800157e:	1ad2      	subs	r2, r2, r3
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	4918      	ldr	r1, [pc, #96]	; (80015e8 <storage_f+0x188>)
 8001586:	4618      	mov	r0, r3
 8001588:	f012 faca 	bl	8013b20 <siprintf>
		wav_file_write(&wav_file,xxx,strlen(xxx));
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe fe27 	bl	80001e4 <strlen>
 8001596:	4602      	mov	r2, r0
 8001598:	f107 0308 	add.w	r3, r7, #8
 800159c:	4619      	mov	r1, r3
 800159e:	4807      	ldr	r0, [pc, #28]	; (80015bc <storage_f+0x15c>)
 80015a0:	f000 ffa6 	bl	80024f0 <wav_file_write>
		wav_file_close(&wav_file);
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <storage_f+0x15c>)
 80015a6:	f000 ff71 	bl	800248c <wav_file_close>
	  storage_w_event = osMessageGet(storage_wHandle, osWaitForever);
 80015aa:	e7ca      	b.n	8001542 <storage_f+0xe2>
 80015ac:	40020000 	.word	0x40020000
 80015b0:	20000d00 	.word	0x20000d00
 80015b4:	40020800 	.word	0x40020800
 80015b8:	08014d98 	.word	0x08014d98
 80015bc:	20001610 	.word	0x20001610
 80015c0:	08014da4 	.word	0x08014da4
 80015c4:	08014db0 	.word	0x08014db0
 80015c8:	08014dbc 	.word	0x08014dbc
 80015cc:	08014dc8 	.word	0x08014dc8
 80015d0:	08014dd4 	.word	0x08014dd4
 80015d4:	08014de4 	.word	0x08014de4
 80015d8:	08014df4 	.word	0x08014df4
 80015dc:	08014e04 	.word	0x08014e04
 80015e0:	200008cc 	.word	0x200008cc
 80015e4:	200008c0 	.word	0x200008c0
 80015e8:	08014e14 	.word	0x08014e14

080015ec <main_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_main_f */
void main_f(void const * argument)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08c      	sub	sp, #48	; 0x30
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN main_f */
  icListen.settings=(icListen_settings_typedef*)mcu_flash.data.raw_data;
 80015f4:	4b3d      	ldr	r3, [pc, #244]	; (80016ec <main_f+0x100>)
 80015f6:	4a3e      	ldr	r2, [pc, #248]	; (80016f0 <main_f+0x104>)
 80015f8:	621a      	str	r2, [r3, #32]
  memory_region_pointer* mem_ptr;


  icListen_collect_short_mask_msg collect_msg;
  icListen_prepare_collect_msg(&collect_msg,0x20);
 80015fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fe:	2120      	movs	r1, #32
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fb91 	bl	8000d28 <icListen_prepare_collect_msg>

  collect_msg_ptr.start_addr=(uint8_t*)&collect_msg;
 8001606:	4a3b      	ldr	r2, [pc, #236]	; (80016f4 <main_f+0x108>)
 8001608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160c:	6013      	str	r3, [r2, #0]
  collect_msg_ptr.size=sizeof(icListen_collect_short_mask_msg);
 800160e:	4b39      	ldr	r3, [pc, #228]	; (80016f4 <main_f+0x108>)
 8001610:	2207      	movs	r2, #7
 8001612:	605a      	str	r2, [r3, #4]

  osEvent event;

  if(mcu_flash_read(&mcu_flash)!=F_OK){
 8001614:	4838      	ldr	r0, [pc, #224]	; (80016f8 <main_f+0x10c>)
 8001616:	f000 f905 	bl	8001824 <mcu_flash_read>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d026      	beq.n	800166e <main_f+0x82>
		icListen.settings->wav_sample_rate=ICLISTEN_DEFAULT_WAV_SAMPLE_RATE;
 8001620:	4b32      	ldr	r3, [pc, #200]	; (80016ec <main_f+0x100>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
 8001628:	2200      	movs	r2, #0
 800162a:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 800162e:	705a      	strb	r2, [r3, #1]
 8001630:	2200      	movs	r2, #0
 8001632:	709a      	strb	r2, [r3, #2]
 8001634:	2200      	movs	r2, #0
 8001636:	70da      	strb	r2, [r3, #3]
		icListen.settings->wav_sample_bit_depth=ICLISTEN_DEFAULT_WAV_SAMPLE_BIT_DEPTH;
 8001638:	4b2c      	ldr	r3, [pc, #176]	; (80016ec <main_f+0x100>)
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	2200      	movs	r2, #0
 800163e:	f042 0218 	orr.w	r2, r2, #24
 8001642:	711a      	strb	r2, [r3, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	715a      	strb	r2, [r3, #5]
 8001648:	2200      	movs	r2, #0
 800164a:	719a      	strb	r2, [r3, #6]
 800164c:	2200      	movs	r2, #0
 800164e:	71da      	strb	r2, [r3, #7]
		icListen.settings->file_duration=ICLISTEN_DEFAULT_FILE_DURATION;
 8001650:	4b26      	ldr	r3, [pc, #152]	; (80016ec <main_f+0x100>)
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	2200      	movs	r2, #0
 8001656:	f042 0201 	orr.w	r2, r2, #1
 800165a:	721a      	strb	r2, [r3, #8]
 800165c:	2200      	movs	r2, #0
 800165e:	725a      	strb	r2, [r3, #9]
 8001660:	2200      	movs	r2, #0
 8001662:	729a      	strb	r2, [r3, #10]
 8001664:	2200      	movs	r2, #0
 8001666:	72da      	strb	r2, [r3, #11]
		mcu_flash_save(&mcu_flash);
 8001668:	4823      	ldr	r0, [pc, #140]	; (80016f8 <main_f+0x10c>)
 800166a:	f000 f8fb 	bl	8001864 <mcu_flash_save>
  }
  icListen.status=DISCONNECTED;
 800166e:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <main_f+0x100>)
 8001670:	2201      	movs	r2, #1
 8001672:	775a      	strb	r2, [r3, #29]

  while(icListen.status==DISCONNECTED) osDelay(1);
 8001674:	e002      	b.n	800167c <main_f+0x90>
 8001676:	2001      	movs	r0, #1
 8001678:	f00f fa1f 	bl	8010aba <osDelay>
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <main_f+0x100>)
 800167e:	7f5b      	ldrb	r3, [r3, #29]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d0f8      	beq.n	8001676 <main_f+0x8a>

  /* Infinite loop */
  for(;;)
  {
	  if(icListen.status==CONNECTED){
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <main_f+0x100>)
 8001686:	7f5b      	ldrb	r3, [r3, #29]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d12a      	bne.n	80016e2 <main_f+0xf6>
	   event = osMessageGet(USB_txHandle, osWaitForever);
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <main_f+0x110>)
 800168e:	6819      	ldr	r1, [r3, #0]
 8001690:	f107 0318 	add.w	r3, r7, #24
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	4618      	mov	r0, r3
 800169a:	f00f fa8b 	bl	8010bb4 <osMessageGet>
	   if(event.status == osEventMessage){
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	2b10      	cmp	r3, #16
 80016a2:	d109      	bne.n	80016b8 <main_f+0xcc>
		   mem_ptr=(memory_region_pointer*)event.value.v;
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
		   USB_transmit_msg(mem_ptr->start_addr,mem_ptr->size);
 80016a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	4619      	mov	r1, r3
 80016b2:	4610      	mov	r0, r2
 80016b4:	f011 fc2a 	bl	8012f0c <USB_transmit_msg>
		   //osMessagePut(USB_txHandle,(uint8_t*)&collect_msg_ptr, 0);
	   }
	   event = osMessageGet(USB_rxHandle, 10);
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <main_f+0x114>)
 80016ba:	6819      	ldr	r1, [r3, #0]
 80016bc:	463b      	mov	r3, r7
 80016be:	220a      	movs	r2, #10
 80016c0:	4618      	mov	r0, r3
 80016c2:	f00f fa77 	bl	8010bb4 <osMessageGet>
 80016c6:	f107 0318 	add.w	r3, r7, #24
 80016ca:	463a      	mov	r2, r7
 80016cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80016ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	   if(event.status == osEventMessage){
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2b10      	cmp	r3, #16
 80016d6:	d104      	bne.n	80016e2 <main_f+0xf6>
		   icListen_parse_msg((uint8_t*)event.value.v,&icListen);
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	4904      	ldr	r1, [pc, #16]	; (80016ec <main_f+0x100>)
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fb47 	bl	8000d70 <icListen_parse_msg>
	   }
	  }
   	  osDelay(2);
 80016e2:	2002      	movs	r0, #2
 80016e4:	f00f f9e9 	bl	8010aba <osDelay>
	  if(icListen.status==CONNECTED){
 80016e8:	e7cc      	b.n	8001684 <main_f+0x98>
 80016ea:	bf00      	nop
 80016ec:	200006d4 	.word	0x200006d4
 80016f0:	20000cec 	.word	0x20000cec
 80016f4:	200008c4 	.word	0x200008c4
 80016f8:	20000ce0 	.word	0x20000ce0
 80016fc:	200008bc 	.word	0x200008bc
 8001700:	200008b8 	.word	0x200008b8

08001704 <uart_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_f */
void uart_f(void const * argument)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart_f */
  uint8_t tmp;
  /* Infinite loop */
  user_interface.media_status=UI_MEDIA_READY;
 800170c:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <uart_f+0x44>)
 800170e:	220a      	movs	r2, #10
 8001710:	735a      	strb	r2, [r3, #13]
  for(;;)
  {
	   if(UI_UART.gState!=HAL_UART_STATE_BUSY_TX)
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <uart_f+0x48>)
 8001714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b21      	cmp	r3, #33	; 0x21
 800171c:	d00f      	beq.n	800173e <uart_f+0x3a>
	   {
		if(UI_media_get_byte(&user_interface,&tmp)==UI_F_OK)
 800171e:	f107 030f 	add.w	r3, r7, #15
 8001722:	4619      	mov	r1, r3
 8001724:	4808      	ldr	r0, [pc, #32]	; (8001748 <uart_f+0x44>)
 8001726:	f7ff f825 	bl	8000774 <UI_media_get_byte>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d106      	bne.n	800173e <uart_f+0x3a>
		{
		   HAL_UART_Transmit_IT(&UI_UART,&tmp,1);
 8001730:	f107 030f 	add.w	r3, r7, #15
 8001734:	2201      	movs	r2, #1
 8001736:	4619      	mov	r1, r3
 8001738:	4804      	ldr	r0, [pc, #16]	; (800174c <uart_f+0x48>)
 800173a:	f005 fc76 	bl	800702a <HAL_UART_Transmit_IT>
		}
	   }
	  osDelay(1);
 800173e:	2001      	movs	r0, #1
 8001740:	f00f f9bb 	bl	8010aba <osDelay>
	   if(UI_UART.gState!=HAL_UART_STATE_BUSY_TX)
 8001744:	e7e5      	b.n	8001712 <uart_f+0xe>
 8001746:	bf00      	nop
 8001748:	200008cc 	.word	0x200008cc
 800174c:	20000860 	.word	0x20000860

08001750 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d101      	bne.n	8001766 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001762:	f000 ff3d 	bl	80025e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40010000 	.word	0x40010000

08001774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001778:	b672      	cpsid	i
}
 800177a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800177c:	e7fe      	b.n	800177c <Error_Handler+0x8>
	...

08001780 <mcu_flash_init>:
#if defined(STM32F205xx)  //KB
uint32_t  flash_block_size[]={16,16,16,16,64,128,128,128,128,128,128,128};
#endif

void mcu_flash_init(mcu_flash_typedef* mcu_flash_obj,uint32_t first_block)
{
 8001780:	b480      	push	{r7}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
	uint32_t temp=0;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
	int32_t temp2=0;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
	if(first_block<FLASH_NUM_OF_BLOCKS){
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	2b0b      	cmp	r3, #11
 8001796:	d83d      	bhi.n	8001814 <mcu_flash_init+0x94>
      mcu_flash_obj->first_block_num=first_block;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	605a      	str	r2, [r3, #4]
      for(int i=0;i<first_block;i++) temp+=flash_block_size[i];
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	e009      	b.n	80017b8 <mcu_flash_init+0x38>
 80017a4:	4a1e      	ldr	r2, [pc, #120]	; (8001820 <mcu_flash_init+0xa0>)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	4413      	add	r3, r2
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	3301      	adds	r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d8f1      	bhi.n	80017a4 <mcu_flash_init+0x24>
	  mcu_flash_obj->first_block_addr=FLASH_BASE+(temp*1024);
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80017c6:	029a      	lsls	r2, r3, #10
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	601a      	str	r2, [r3, #0]

	  temp2=FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE;
 80017cc:	2312      	movs	r3, #18
 80017ce:	613b      	str	r3, [r7, #16]
	  mcu_flash_obj->num_of_blocks=0;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	721a      	strb	r2, [r3, #8]
 80017d6:	2200      	movs	r2, #0
 80017d8:	725a      	strb	r2, [r3, #9]
 80017da:	2200      	movs	r2, #0
 80017dc:	729a      	strb	r2, [r3, #10]
 80017de:	2200      	movs	r2, #0
 80017e0:	72da      	strb	r2, [r3, #11]
	  for(int i=mcu_flash_obj->first_block_num;i<FLASH_NUM_OF_BLOCKS&&temp2>0;i++) {
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	e00e      	b.n	8001808 <mcu_flash_init+0x88>
		  temp2-=flash_block_size[i];
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	490c      	ldr	r1, [pc, #48]	; (8001820 <mcu_flash_init+0xa0>)
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	613b      	str	r3, [r7, #16]
		  mcu_flash_obj->num_of_blocks++;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	609a      	str	r2, [r3, #8]
	  for(int i=mcu_flash_obj->first_block_num;i<FLASH_NUM_OF_BLOCKS&&temp2>0;i++) {
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	3301      	adds	r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b0b      	cmp	r3, #11
 800180c:	dc02      	bgt.n	8001814 <mcu_flash_init+0x94>
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	2b00      	cmp	r3, #0
 8001812:	dcea      	bgt.n	80017ea <mcu_flash_init+0x6a>
	  }
	}
}
 8001814:	bf00      	nop
 8001816:	371c      	adds	r7, #28
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	20000200 	.word	0x20000200

08001824 <mcu_flash_read>:

F_RES mcu_flash_read(mcu_flash_typedef* mcu_flash_obj)
{
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	 memcpy((uint8_t*)&(mcu_flash_obj->data),(uint8_t*)mcu_flash_obj->first_block_addr,FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f103 000c 	add.w	r0, r3, #12
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2212      	movs	r2, #18
 8001838:	4619      	mov	r1, r3
 800183a:	f012 f801 	bl	8013840 <memcpy>
	 if(mcu_flash_obj->data.crc==get_crc16_arc(mcu_flash_obj->data.raw_data,FLASH_DATA_SIZE)){
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	8b9b      	ldrh	r3, [r3, #28]
 8001842:	b29c      	uxth	r4, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	330c      	adds	r3, #12
 8001848:	2110      	movs	r1, #16
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff f972 	bl	8000b34 <get_crc16_arc>
 8001850:	4603      	mov	r3, r0
 8001852:	429c      	cmp	r4, r3
 8001854:	d101      	bne.n	800185a <mcu_flash_read+0x36>
		 return F_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e000      	b.n	800185c <mcu_flash_read+0x38>
	 }
	 else{
		 return F_ERR;
 800185a:	2301      	movs	r3, #1
	 }

}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bd90      	pop	{r4, r7, pc}

08001864 <mcu_flash_save>:
void mcu_flash_save(mcu_flash_typedef* mcu_flash_obj)
{
 8001864:	b5b0      	push	{r4, r5, r7, lr}
 8001866:	b08c      	sub	sp, #48	; 0x30
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	uint32_t i=0;
 800186c:	2300      	movs	r3, #0
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t tmp;
	uint32_t pgerr = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	623b      	str	r3, [r7, #32]
	uint8_t* data=(uint8_t*)&mcu_flash_obj->data;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	330c      	adds	r3, #12
 8001878:	627b      	str	r3, [r7, #36]	; 0x24

	mcu_flash_obj->data.crc=get_crc16_arc(mcu_flash_obj->data.raw_data,FLASH_DATA_SIZE);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	330c      	adds	r3, #12
 800187e:	2110      	movs	r1, #16
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff f957 	bl	8000b34 <get_crc16_arc>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	839a      	strh	r2, [r3, #28]

    HAL_FLASH_Unlock();
 800188e:	f001 fb9d 	bl	8002fcc <HAL_FLASH_Unlock>
    #if defined(STM32F405xx)
	FLASH_EraseInitTypeDef erase_info = {
 8001892:	f107 030c 	add.w	r3, r7, #12
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	611a      	str	r2, [r3, #16]
		.TypeErase = FLASH_TYPEERASE_SECTORS,
		.Sector = mcu_flash_obj->first_block_num,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
	FLASH_EraseInitTypeDef erase_info = {
 80018a6:	617b      	str	r3, [r7, #20]
		.NbSectors = mcu_flash_obj->num_of_blocks,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
	FLASH_EraseInitTypeDef erase_info = {
 80018ac:	61bb      	str	r3, [r7, #24]
	.NbPages = mcu_flash_obj->num_of_blocks,
    };
    #endif


	HAL_FLASHEx_Erase(&erase_info, &pgerr);
 80018ae:	f107 0220 	add.w	r2, r7, #32
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f001 fce9 	bl	8003290 <HAL_FLASHEx_Erase>

	if(pgerr != 0xFFFFFFFFul)
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c4:	d027      	beq.n	8001916 <mcu_flash_save+0xb2>
	{
		HAL_FLASH_Lock();
 80018c6:	f001 fba3 	bl	8003010 <HAL_FLASH_Lock>
 80018ca:	e029      	b.n	8001920 <mcu_flash_save+0xbc>
		return ;
	}

	while(i<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE))
	{
        tmp=(tmp&0x0000)|(data[i]&0x00FF);
 80018cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d0:	4413      	add	r3, r2
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	857b      	strh	r3, [r7, #42]	; 0x2a
		if((i+1)<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE)) tmp=tmp|(data[i+1]<<8&0xFF00);
 80018d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d8:	3301      	adds	r3, #1
 80018da:	2b11      	cmp	r3, #17
 80018dc:	d80b      	bhi.n	80018f6 <mcu_flash_save+0x92>
 80018de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e0:	3301      	adds	r3, #1
 80018e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e4:	4413      	add	r3, r2
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	857b      	strh	r3, [r7, #42]	; 0x2a
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,mcu_flash_obj->first_block_addr+i,tmp);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fc:	18d1      	adds	r1, r2, r3
 80018fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001900:	2200      	movs	r2, #0
 8001902:	461c      	mov	r4, r3
 8001904:	4615      	mov	r5, r2
 8001906:	4622      	mov	r2, r4
 8001908:	462b      	mov	r3, r5
 800190a:	2001      	movs	r0, #1
 800190c:	f001 fb0a 	bl	8002f24 <HAL_FLASH_Program>
		i=i+2;
 8001910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001912:	3302      	adds	r3, #2
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(i<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE))
 8001916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001918:	2b11      	cmp	r3, #17
 800191a:	d9d7      	bls.n	80018cc <mcu_flash_save+0x68>
	}

	HAL_FLASH_Lock();
 800191c:	f001 fb78 	bl	8003010 <HAL_FLASH_Lock>
}
 8001920:	3730      	adds	r7, #48	; 0x30
 8001922:	46bd      	mov	sp, r7
 8001924:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001928 <sd_ss_set_active>:
extern volatile uint16_t htim2;

uint8_t spi_rx_buffer[512];

void sd_ss_set_active(uint8_t drv)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  active_sd_ss_pin=sd_cards_ss[drv].sd_ss_pin;
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	4a08      	ldr	r2, [pc, #32]	; (8001958 <sd_ss_set_active+0x30>)
 8001936:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <sd_ss_set_active+0x34>)
 800193c:	801a      	strh	r2, [r3, #0]
  active_sd_ss_port=sd_cards_ss[drv].sd_ss_port;
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	4a05      	ldr	r2, [pc, #20]	; (8001958 <sd_ss_set_active+0x30>)
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4413      	add	r3, r2
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4a05      	ldr	r2, [pc, #20]	; (8001960 <sd_ss_set_active+0x38>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	200019d4 	.word	0x200019d4
 800195c:	200019ce 	.word	0x200019ce
 8001960:	200019d0 	.word	0x200019d0

08001964 <sd_ss_active_pin_down>:

void sd_ss_active_pin_down()
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_RESET);
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <sd_ss_active_pin_down+0x18>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a04      	ldr	r2, [pc, #16]	; (8001980 <sd_ss_active_pin_down+0x1c>)
 800196e:	8811      	ldrh	r1, [r2, #0]
 8001970:	2200      	movs	r2, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f001 ff4a 	bl	800380c <HAL_GPIO_WritePin>
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200019d0 	.word	0x200019d0
 8001980:	200019ce 	.word	0x200019ce

08001984 <sd_ss_active_pin_up>:
void sd_ss_active_pin_up()
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_SET);
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <sd_ss_active_pin_up+0x18>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <sd_ss_active_pin_up+0x1c>)
 800198e:	8811      	ldrh	r1, [r2, #0]
 8001990:	2201      	movs	r2, #1
 8001992:	4618      	mov	r0, r3
 8001994:	f001 ff3a 	bl	800380c <HAL_GPIO_WritePin>
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200019d0 	.word	0x200019d0
 80019a0:	200019ce 	.word	0x200019ce

080019a4 <SD_cmd>:



//-----------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	71fb      	strb	r3, [r7, #7]
  uint8_t n, res;
  // ACMD<n> is the command sequense of CMD55-CMD<n>
  if (cmd & 0x80)
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	da0e      	bge.n	80019d6 <SD_cmd+0x32>
  {
    cmd &= 0x7F;
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019be:	71fb      	strb	r3, [r7, #7]
    res = SD_cmd(CMD55, 0);
 80019c0:	2100      	movs	r1, #0
 80019c2:	2077      	movs	r0, #119	; 0x77
 80019c4:	f7ff ffee 	bl	80019a4 <SD_cmd>
 80019c8:	4603      	mov	r3, r0
 80019ca:	73bb      	strb	r3, [r7, #14]
    if (res > 1) return res;
 80019cc:	7bbb      	ldrb	r3, [r7, #14]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d901      	bls.n	80019d6 <SD_cmd+0x32>
 80019d2:	7bbb      	ldrb	r3, [r7, #14]
 80019d4:	e043      	b.n	8001a5e <SD_cmd+0xba>
  }
  // Select the card
  SS_SD_DESELECT();
 80019d6:	f7ff ffd5 	bl	8001984 <sd_ss_active_pin_up>
  SPI_ReceiveByte();
 80019da:	f000 f976 	bl	8001cca <SPI_ReceiveByte>

  SS_SD_SELECT();
 80019de:	f7ff ffc1 	bl	8001964 <sd_ss_active_pin_down>
  SPI_ReceiveByte();
 80019e2:	f000 f972 	bl	8001cca <SPI_ReceiveByte>
  // Send a command packet
  SPI_SendByte(cmd); // Start + Command index
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 f961 	bl	8001cb0 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	0e1b      	lsrs	r3, r3, #24
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 f95b 	bl	8001cb0 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	0c1b      	lsrs	r3, r3, #16
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 f955 	bl	8001cb0 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 f94f 	bl	8001cb0 <SPI_SendByte>
  SPI_SendByte((uint8_t)arg); // Argument[7..0]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 f94a 	bl	8001cb0 <SPI_SendByte>

  n = 0x01; // Dummy CRC + Stop
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	2b40      	cmp	r3, #64	; 0x40
 8001a24:	d101      	bne.n	8001a2a <SD_cmd+0x86>
 8001a26:	2395      	movs	r3, #149	; 0x95
 8001a28:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	2b48      	cmp	r3, #72	; 0x48
 8001a2e:	d101      	bne.n	8001a34 <SD_cmd+0x90>
 8001a30:	2387      	movs	r3, #135	; 0x87
 8001a32:	73fb      	strb	r3, [r7, #15]
  SPI_SendByte(n);
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f93a 	bl	8001cb0 <SPI_SendByte>
  // Receive a command response
  n = 10; // Wait for a valid response in timeout of 10 attempts
 8001a3c:	230a      	movs	r3, #10
 8001a3e:	73fb      	strb	r3, [r7, #15]
  do {
    res = SPI_ReceiveByte();
 8001a40:	f000 f943 	bl	8001cca <SPI_ReceiveByte>
 8001a44:	4603      	mov	r3, r0
 8001a46:	73bb      	strb	r3, [r7, #14]
  } while ((res & 0x80) && --n);
 8001a48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	da05      	bge.n	8001a5c <SD_cmd+0xb8>
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	73fb      	strb	r3, [r7, #15]
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f1      	bne.n	8001a40 <SD_cmd+0x9c>
  return res;
 8001a5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <sd_ini>:

uint8_t sd_ini(void)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
	  uint8_t i, cmd;;
	  uint8_t ocr[4];
	  int16_t tmr;
	  uint32_t temp;
	  //LD_OFF;
	  sdinfo.type = 0;
 8001a6e:	4b57      	ldr	r3, [pc, #348]	; (8001bcc <sd_ini+0x164>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]

	  hspi1.Init.BaudRatePrescaler = temp;
	  HAL_SPI_Init(&hspi1);
	  */

	  SS_SD_SELECT();
 8001a74:	f7ff ff76 	bl	8001964 <sd_ss_active_pin_down>
	  if (SD_cmd(CMD0, 0) == 1) // Enter Idle state
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2040      	movs	r0, #64	; 0x40
 8001a7c:	f7ff ff92 	bl	80019a4 <SD_cmd>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	f040 809a 	bne.w	8001bbc <sd_ini+0x154>
	  {
		  SPI_Release();
 8001a88:	f000 f92c 	bl	8001ce4 <SPI_Release>
		  if (SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8001a8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001a90:	2048      	movs	r0, #72	; 0x48
 8001a92:	f7ff ff87 	bl	80019a4 <SD_cmd>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d157      	bne.n	8001b4c <sd_ini+0xe4>
		  {
			  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	71fb      	strb	r3, [r7, #7]
 8001aa0:	e00c      	b.n	8001abc <sd_ini+0x54>
 8001aa2:	79fc      	ldrb	r4, [r7, #7]
 8001aa4:	f000 f911 	bl	8001cca <SPI_ReceiveByte>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f104 0308 	add.w	r3, r4, #8
 8001ab0:	443b      	add	r3, r7
 8001ab2:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	71fb      	strb	r3, [r7, #7]
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d9ef      	bls.n	8001aa2 <sd_ini+0x3a>

			    // Get trailing return value of R7 resp
			    if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8001ac2:	78bb      	ldrb	r3, [r7, #2]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d17b      	bne.n	8001bc0 <sd_ini+0x158>
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	2baa      	cmp	r3, #170	; 0xaa
 8001acc:	d178      	bne.n	8001bc0 <sd_ini+0x158>
			    {
			    	for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--)
 8001ace:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8001ad2:	80bb      	strh	r3, [r7, #4]
 8001ad4:	e005      	b.n	8001ae2 <sd_ini+0x7a>
 8001ad6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	80bb      	strh	r3, [r7, #4]
 8001ae2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d007      	beq.n	8001afa <sd_ini+0x92>
 8001aea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001aee:	20e9      	movs	r0, #233	; 0xe9
 8001af0:	f7ff ff58 	bl	80019a4 <SD_cmd>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1ed      	bne.n	8001ad6 <sd_ini+0x6e>
			    	    ; // Wait for leaving idle state (ACMD41 with HCS bit)
			    	if (tmr && SD_cmd(CMD58, 0) == 0)
 8001afa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d05e      	beq.n	8001bc0 <sd_ini+0x158>
 8001b02:	2100      	movs	r1, #0
 8001b04:	207a      	movs	r0, #122	; 0x7a
 8001b06:	f7ff ff4d 	bl	80019a4 <SD_cmd>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d157      	bne.n	8001bc0 <sd_ini+0x158>
			    	 { // Check CCS bit in the OCR
			    	  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8001b10:	2300      	movs	r3, #0
 8001b12:	71fb      	strb	r3, [r7, #7]
 8001b14:	e00c      	b.n	8001b30 <sd_ini+0xc8>
 8001b16:	79fc      	ldrb	r4, [r7, #7]
 8001b18:	f000 f8d7 	bl	8001cca <SPI_ReceiveByte>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	461a      	mov	r2, r3
 8001b20:	f104 0308 	add.w	r3, r4, #8
 8001b24:	443b      	add	r3, r7
 8001b26:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	71fb      	strb	r3, [r7, #7]
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d9ef      	bls.n	8001b16 <sd_ini+0xae>
			     	   sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8001b36:	783b      	ldrb	r3, [r7, #0]
 8001b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <sd_ini+0xdc>
 8001b40:	220c      	movs	r2, #12
 8001b42:	e000      	b.n	8001b46 <sd_ini+0xde>
 8001b44:	2204      	movs	r2, #4
 8001b46:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <sd_ini+0x164>)
 8001b48:	701a      	strb	r2, [r3, #0]
 8001b4a:	e039      	b.n	8001bc0 <sd_ini+0x158>
			    	}
			    }
		  }
		  else //SDv1 or MMCv3
		  {
			  if (SD_cmd(ACMD41, 0) <= 1)
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	20e9      	movs	r0, #233	; 0xe9
 8001b50:	f7ff ff28 	bl	80019a4 <SD_cmd>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d805      	bhi.n	8001b66 <sd_ini+0xfe>
			    {
			      sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <sd_ini+0x164>)
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	701a      	strb	r2, [r3, #0]
 8001b60:	23e9      	movs	r3, #233	; 0xe9
 8001b62:	71bb      	strb	r3, [r7, #6]
 8001b64:	e004      	b.n	8001b70 <sd_ini+0x108>
			    }
			    else
			    {
			      sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 8001b66:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <sd_ini+0x164>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	701a      	strb	r2, [r3, #0]
 8001b6c:	2341      	movs	r3, #65	; 0x41
 8001b6e:	71bb      	strb	r3, [r7, #6]
			    }
			    for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 8001b70:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8001b74:	80bb      	strh	r3, [r7, #4]
 8001b76:	e005      	b.n	8001b84 <sd_ini+0x11c>
 8001b78:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	80bb      	strh	r3, [r7, #4]
 8001b84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d007      	beq.n	8001b9c <sd_ini+0x134>
 8001b8c:	79bb      	ldrb	r3, [r7, #6]
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff07 	bl	80019a4 <SD_cmd>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1ed      	bne.n	8001b78 <sd_ini+0x110>
			    if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8001b9c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d007      	beq.n	8001bb4 <sd_ini+0x14c>
 8001ba4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ba8:	2050      	movs	r0, #80	; 0x50
 8001baa:	f7ff fefb 	bl	80019a4 <SD_cmd>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <sd_ini+0x158>
			    sdinfo.type = 0;
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <sd_ini+0x164>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
 8001bba:	e001      	b.n	8001bc0 <sd_ini+0x158>

	  }
	  else
	  {

	    return 1;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e000      	b.n	8001bc2 <sd_ini+0x15a>
	  }




  return 0;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd90      	pop	{r4, r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200019cc 	.word	0x200019cc

08001bd0 <Error>:

static void Error (void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  //LD_ON;
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <SPI_wait_ready>:

uint8_t SPI_wait_ready(void)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
  uint8_t res;
  uint16_t cnt;
  cnt=0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	80fb      	strh	r3, [r7, #6]
  do {
    res=SPI_ReceiveByte();
 8001be8:	f000 f86f 	bl	8001cca <SPI_ReceiveByte>
 8001bec:	4603      	mov	r3, r0
 8001bee:	717b      	strb	r3, [r7, #5]
    cnt++;
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	80fb      	strh	r3, [r7, #6]
  } while ( (res!=0xFF)&&(cnt<0xFFFF) );
 8001bf6:	797b      	ldrb	r3, [r7, #5]
 8001bf8:	2bff      	cmp	r3, #255	; 0xff
 8001bfa:	d004      	beq.n	8001c06 <SPI_wait_ready+0x28>
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d1f0      	bne.n	8001be8 <SPI_wait_ready+0xa>
  if (cnt>=0xFFFF) return 1;
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d101      	bne.n	8001c14 <SPI_wait_ready+0x36>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <SPI_wait_ready+0x38>
  return res;
 8001c14:	797b      	ldrb	r3, [r7, #5]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <SPIx_Get_Status>:

F_RES SPIx_Get_Status()
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
	if(HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_READY) return F_OK;
 8001c24:	4805      	ldr	r0, [pc, #20]	; (8001c3c <SPIx_Get_Status+0x1c>)
 8001c26:	f004 fa7d 	bl	8006124 <HAL_SPI_GetState>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <SPIx_Get_Status+0x14>
 8001c30:	2300      	movs	r3, #0
 8001c32:	e000      	b.n	8001c36 <SPIx_Get_Status+0x16>
	else return F_ERR;
 8001c34:	2301      	movs	r3, #1
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000700 	.word	0x20000700

08001c40 <SPIx_WriteRead_IT>:
F_RES SPIx_WriteRead_IT(uint8_t* rx_buf,uint8_t* tx_buf,uint32_t size)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
	if(HAL_SPI_TransmitReceive_IT(&hspi1, tx_buf, rx_buf, size)==HAL_OK) return F_OK;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	68b9      	ldr	r1, [r7, #8]
 8001c54:	4806      	ldr	r0, [pc, #24]	; (8001c70 <SPIx_WriteRead_IT+0x30>)
 8001c56:	f004 f8b3 	bl	8005dc0 <HAL_SPI_TransmitReceive_IT>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <SPIx_WriteRead_IT+0x24>
 8001c60:	2300      	movs	r3, #0
 8001c62:	e000      	b.n	8001c66 <SPIx_WriteRead_IT+0x26>
	else return F_ERR;
 8001c64:	2301      	movs	r3, #1
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000700 	.word	0x20000700

08001c74 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af02      	add	r7, sp, #8
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8001c82:	f107 020f 	add.w	r2, r7, #15
 8001c86:	1df9      	adds	r1, r7, #7
 8001c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2301      	movs	r3, #1
 8001c90:	4806      	ldr	r0, [pc, #24]	; (8001cac <SPIx_WriteRead+0x38>)
 8001c92:	f003 fef2 	bl	8005a7a <HAL_SPI_TransmitReceive>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <SPIx_WriteRead+0x2c>
  {
    Error();
 8001c9c:	f7ff ff98 	bl	8001bd0 <Error>
  }
  return receivedbyte;
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000700 	.word	0x20000700

08001cb0 <SPI_SendByte>:

void SPI_SendByte(uint8_t bt)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(bt);
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ffd9 	bl	8001c74 <SPIx_WriteRead>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <SPI_ReceiveByte>:

uint8_t SPI_ReceiveByte(void)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
  uint8_t bt = SPIx_WriteRead(0xFF);
 8001cd0:	20ff      	movs	r0, #255	; 0xff
 8001cd2:	f7ff ffcf 	bl	8001c74 <SPIx_WriteRead>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
  return bt;
 8001cda:	79fb      	ldrb	r3, [r7, #7]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <SPI_Release>:
void SPI_Release(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 8001ce8:	20ff      	movs	r0, #255	; 0xff
 8001cea:	f7ff ffc3 	bl	8001c74 <SPIx_WriteRead>
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <SD_Read_Block>:

uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)
{
 8001cf2:	b590      	push	{r4, r7, lr}
 8001cf4:	b085      	sub	sp, #20
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;

  result=SD_cmd (CMD17, lba);
 8001cfc:	6839      	ldr	r1, [r7, #0]
 8001cfe:	2051      	movs	r0, #81	; 0x51
 8001d00:	f7ff fe50 	bl	80019a4 <SD_cmd>
 8001d04:	4603      	mov	r3, r0
 8001d06:	737b      	strb	r3, [r7, #13]
  if (result!=0x00){
 8001d08:	7b7b      	ldrb	r3, [r7, #13]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <SD_Read_Block+0x20>
	  return 5;
 8001d0e:	2305      	movs	r3, #5
 8001d10:	e02f      	b.n	8001d72 <SD_Read_Block+0x80>
  }

  SPI_Release();
 8001d12:	f7ff ffe7 	bl	8001ce4 <SPI_Release>
   cnt=0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	81fb      	strh	r3, [r7, #14]
   do{
     result=SPI_ReceiveByte();
 8001d1a:	f7ff ffd6 	bl	8001cca <SPI_ReceiveByte>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	737b      	strb	r3, [r7, #13]
     cnt++;
 8001d22:	89fb      	ldrh	r3, [r7, #14]
 8001d24:	3301      	adds	r3, #1
 8001d26:	81fb      	strh	r3, [r7, #14]
   } while ( (result!=0xFE)&&(cnt<0xFFFF) );
 8001d28:	7b7b      	ldrb	r3, [r7, #13]
 8001d2a:	2bfe      	cmp	r3, #254	; 0xfe
 8001d2c:	d004      	beq.n	8001d38 <SD_Read_Block+0x46>
 8001d2e:	89fb      	ldrh	r3, [r7, #14]
 8001d30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d1f0      	bne.n	8001d1a <SD_Read_Block+0x28>
   if (cnt>=0xFFFF) {
 8001d38:	89fb      	ldrh	r3, [r7, #14]
 8001d3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d101      	bne.n	8001d46 <SD_Read_Block+0x54>
	   return 5;
 8001d42:	2305      	movs	r3, #5
 8001d44:	e015      	b.n	8001d72 <SD_Read_Block+0x80>
   }
   for (cnt=0;cnt<512;cnt++) buff[cnt]=SPI_ReceiveByte();
 8001d46:	2300      	movs	r3, #0
 8001d48:	81fb      	strh	r3, [r7, #14]
 8001d4a:	e009      	b.n	8001d60 <SD_Read_Block+0x6e>
 8001d4c:	89fb      	ldrh	r3, [r7, #14]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	18d4      	adds	r4, r2, r3
 8001d52:	f7ff ffba 	bl	8001cca <SPI_ReceiveByte>
 8001d56:	4603      	mov	r3, r0
 8001d58:	7023      	strb	r3, [r4, #0]
 8001d5a:	89fb      	ldrh	r3, [r7, #14]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	81fb      	strh	r3, [r7, #14]
 8001d60:	89fb      	ldrh	r3, [r7, #14]
 8001d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d66:	d3f1      	bcc.n	8001d4c <SD_Read_Block+0x5a>
   SPI_Release();
 8001d68:	f7ff ffbc 	bl	8001ce4 <SPI_Release>
   SPI_Release();
 8001d6c:	f7ff ffba 	bl	8001ce4 <SPI_Release>



  return 0;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd90      	pop	{r4, r7, pc}
	...

08001d7c <SD_Write_Block>:

uint8_t SD_Write_Block (uint8_t *buff, uint32_t lba)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]

  uint8_t result;
  uint16_t cnt;
  result=SD_cmd(CMD24,lba);
 8001d86:	6839      	ldr	r1, [r7, #0]
 8001d88:	2058      	movs	r0, #88	; 0x58
 8001d8a:	f7ff fe0b 	bl	80019a4 <SD_cmd>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	737b      	strb	r3, [r7, #13]
  if (result!=0x00){
 8001d92:	7b7b      	ldrb	r3, [r7, #13]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <SD_Write_Block+0x20>
	  return 6;
 8001d98:	2306      	movs	r3, #6
 8001d9a:	e03b      	b.n	8001e14 <SD_Write_Block+0x98>
  }
  SPI_Release();
 8001d9c:	f7ff ffa2 	bl	8001ce4 <SPI_Release>
  SPI_SendByte (0xFE);
 8001da0:	20fe      	movs	r0, #254	; 0xfe
 8001da2:	f7ff ff85 	bl	8001cb0 <SPI_SendByte>
  //for (cnt=0;cnt<512;cnt++) SPI_SendByte(buff[cnt]);
  if(SPIx_WriteRead_IT(spi_rx_buffer,buff,512)==F_OK)
 8001da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	481b      	ldr	r0, [pc, #108]	; (8001e1c <SD_Write_Block+0xa0>)
 8001dae:	f7ff ff47 	bl	8001c40 <SPIx_WriteRead_IT>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d105      	bne.n	8001dc4 <SD_Write_Block+0x48>
  {
   while(SPIx_Get_Status()==F_ERR){}
 8001db8:	bf00      	nop
 8001dba:	f7ff ff31 	bl	8001c20 <SPIx_Get_Status>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d0fa      	beq.n	8001dba <SD_Write_Block+0x3e>
  }

  SPI_Release();
 8001dc4:	f7ff ff8e 	bl	8001ce4 <SPI_Release>
  SPI_Release();
 8001dc8:	f7ff ff8c 	bl	8001ce4 <SPI_Release>
  result=SPI_ReceiveByte();
 8001dcc:	f7ff ff7d 	bl	8001cca <SPI_ReceiveByte>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	737b      	strb	r3, [r7, #13]
  if ((result&0x05)!=0x05) {
 8001dd4:	7b7b      	ldrb	r3, [r7, #13]
 8001dd6:	f003 0305 	and.w	r3, r3, #5
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d001      	beq.n	8001de2 <SD_Write_Block+0x66>
	  return 6;
 8001dde:	2306      	movs	r3, #6
 8001de0:	e018      	b.n	8001e14 <SD_Write_Block+0x98>
  }
  cnt=0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	81fb      	strh	r3, [r7, #14]
  do {
    result=SPI_ReceiveByte();
 8001de6:	f7ff ff70 	bl	8001cca <SPI_ReceiveByte>
 8001dea:	4603      	mov	r3, r0
 8001dec:	737b      	strb	r3, [r7, #13]
    cnt++;
 8001dee:	89fb      	ldrh	r3, [r7, #14]
 8001df0:	3301      	adds	r3, #1
 8001df2:	81fb      	strh	r3, [r7, #14]
  } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 8001df4:	7b7b      	ldrb	r3, [r7, #13]
 8001df6:	2bff      	cmp	r3, #255	; 0xff
 8001df8:	d004      	beq.n	8001e04 <SD_Write_Block+0x88>
 8001dfa:	89fb      	ldrh	r3, [r7, #14]
 8001dfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d1f0      	bne.n	8001de6 <SD_Write_Block+0x6a>
  if (cnt>=0xFFFF) {
 8001e04:	89fb      	ldrh	r3, [r7, #14]
 8001e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d101      	bne.n	8001e12 <SD_Write_Block+0x96>
	  return 6;
 8001e0e:	2306      	movs	r3, #6
 8001e10:	e000      	b.n	8001e14 <SD_Write_Block+0x98>
  }

  return 0;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	200019f4 	.word	0x200019f4

08001e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_MspInit+0x54>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	4a11      	ldr	r2, [pc, #68]	; (8001e74 <HAL_MspInit+0x54>)
 8001e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e34:	6453      	str	r3, [r2, #68]	; 0x44
 8001e36:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <HAL_MspInit+0x54>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <HAL_MspInit+0x54>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <HAL_MspInit+0x54>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e50:	6413      	str	r3, [r2, #64]	; 0x40
 8001e52:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <HAL_MspInit+0x54>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	210f      	movs	r1, #15
 8001e62:	f06f 0001 	mvn.w	r0, #1
 8001e66:	f000 fcb7 	bl	80027d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800

08001e78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08a      	sub	sp, #40	; 0x28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a4c      	ldr	r2, [pc, #304]	; (8001fc8 <HAL_SPI_MspInit+0x150>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	f040 8092 	bne.w	8001fc0 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	4b4a      	ldr	r3, [pc, #296]	; (8001fcc <HAL_SPI_MspInit+0x154>)
 8001ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea4:	4a49      	ldr	r2, [pc, #292]	; (8001fcc <HAL_SPI_MspInit+0x154>)
 8001ea6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eaa:	6453      	str	r3, [r2, #68]	; 0x44
 8001eac:	4b47      	ldr	r3, [pc, #284]	; (8001fcc <HAL_SPI_MspInit+0x154>)
 8001eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	4b43      	ldr	r3, [pc, #268]	; (8001fcc <HAL_SPI_MspInit+0x154>)
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	4a42      	ldr	r2, [pc, #264]	; (8001fcc <HAL_SPI_MspInit+0x154>)
 8001ec2:	f043 0302 	orr.w	r3, r3, #2
 8001ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec8:	4b40      	ldr	r3, [pc, #256]	; (8001fcc <HAL_SPI_MspInit+0x154>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001ed4:	2338      	movs	r3, #56	; 0x38
 8001ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ee4:	2305      	movs	r3, #5
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	4619      	mov	r1, r3
 8001eee:	4838      	ldr	r0, [pc, #224]	; (8001fd0 <HAL_SPI_MspInit+0x158>)
 8001ef0:	f001 faf0 	bl	80034d4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001ef4:	4b37      	ldr	r3, [pc, #220]	; (8001fd4 <HAL_SPI_MspInit+0x15c>)
 8001ef6:	4a38      	ldr	r2, [pc, #224]	; (8001fd8 <HAL_SPI_MspInit+0x160>)
 8001ef8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001efa:	4b36      	ldr	r3, [pc, #216]	; (8001fd4 <HAL_SPI_MspInit+0x15c>)
 8001efc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001f00:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f02:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <HAL_SPI_MspInit+0x15c>)
 8001f04:	2240      	movs	r2, #64	; 0x40
 8001f06:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f08:	4b32      	ldr	r3, [pc, #200]	; (8001fd4 <HAL_SPI_MspInit+0x15c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f0e:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <HAL_SPI_MspInit+0x15c>)
 8001f10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f14:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f16:	4b2f      	ldr	r3, [pc, #188]	; (8001fd4 <HAL_SPI_MspInit+0x15c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f1c:	4b2d      	ldr	r3, [pc, #180]	; (8001fd4 <HAL_SPI_MspInit+0x15c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001f22:	4b2c      	ldr	r3, [pc, #176]	; (8001fd4 <HAL_SPI_MspInit+0x15c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001f28:	4b2a      	ldr	r3, [pc, #168]	; (8001fd4 <HAL_SPI_MspInit+0x15c>)
 8001f2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f2e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f30:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <HAL_SPI_MspInit+0x15c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001f36:	4827      	ldr	r0, [pc, #156]	; (8001fd4 <HAL_SPI_MspInit+0x15c>)
 8001f38:	f000 fc78 	bl	800282c <HAL_DMA_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001f42:	f7ff fc17 	bl	8001774 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a22      	ldr	r2, [pc, #136]	; (8001fd4 <HAL_SPI_MspInit+0x15c>)
 8001f4a:	649a      	str	r2, [r3, #72]	; 0x48
 8001f4c:	4a21      	ldr	r2, [pc, #132]	; (8001fd4 <HAL_SPI_MspInit+0x15c>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001f52:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <HAL_SPI_MspInit+0x164>)
 8001f54:	4a22      	ldr	r2, [pc, #136]	; (8001fe0 <HAL_SPI_MspInit+0x168>)
 8001f56:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001f58:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <HAL_SPI_MspInit+0x164>)
 8001f5a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001f5e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f60:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <HAL_SPI_MspInit+0x164>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f66:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <HAL_SPI_MspInit+0x164>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_SPI_MspInit+0x164>)
 8001f6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f72:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f74:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <HAL_SPI_MspInit+0x164>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <HAL_SPI_MspInit+0x164>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001f80:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <HAL_SPI_MspInit+0x164>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <HAL_SPI_MspInit+0x164>)
 8001f88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f8c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f8e:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <HAL_SPI_MspInit+0x164>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001f94:	4811      	ldr	r0, [pc, #68]	; (8001fdc <HAL_SPI_MspInit+0x164>)
 8001f96:	f000 fc49 	bl	800282c <HAL_DMA_Init>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8001fa0:	f7ff fbe8 	bl	8001774 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a0d      	ldr	r2, [pc, #52]	; (8001fdc <HAL_SPI_MspInit+0x164>)
 8001fa8:	64da      	str	r2, [r3, #76]	; 0x4c
 8001faa:	4a0c      	ldr	r2, [pc, #48]	; (8001fdc <HAL_SPI_MspInit+0x164>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2105      	movs	r1, #5
 8001fb4:	2023      	movs	r0, #35	; 0x23
 8001fb6:	f000 fc0f 	bl	80027d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001fba:	2023      	movs	r0, #35	; 0x23
 8001fbc:	f000 fc28 	bl	8002810 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fc0:	bf00      	nop
 8001fc2:	3728      	adds	r7, #40	; 0x28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40013000 	.word	0x40013000
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40020400 	.word	0x40020400
 8001fd4:	20000758 	.word	0x20000758
 8001fd8:	40026458 	.word	0x40026458
 8001fdc:	200007b8 	.word	0x200007b8
 8001fe0:	40026410 	.word	0x40026410

08001fe4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff4:	d115      	bne.n	8002022 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	4b0c      	ldr	r3, [pc, #48]	; (800202c <HAL_TIM_Base_MspInit+0x48>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4a0b      	ldr	r2, [pc, #44]	; (800202c <HAL_TIM_Base_MspInit+0x48>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6413      	str	r3, [r2, #64]	; 0x40
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_TIM_Base_MspInit+0x48>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002012:	2200      	movs	r2, #0
 8002014:	2105      	movs	r1, #5
 8002016:	201c      	movs	r0, #28
 8002018:	f000 fbde 	bl	80027d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800201c:	201c      	movs	r0, #28
 800201e:	f000 fbf7 	bl	8002810 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40023800 	.word	0x40023800

08002030 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a1d      	ldr	r2, [pc, #116]	; (80020c4 <HAL_UART_MspInit+0x94>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d134      	bne.n	80020bc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <HAL_UART_MspInit+0x98>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	4a1b      	ldr	r2, [pc, #108]	; (80020c8 <HAL_UART_MspInit+0x98>)
 800205c:	f043 0310 	orr.w	r3, r3, #16
 8002060:	6453      	str	r3, [r2, #68]	; 0x44
 8002062:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <HAL_UART_MspInit+0x98>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <HAL_UART_MspInit+0x98>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a14      	ldr	r2, [pc, #80]	; (80020c8 <HAL_UART_MspInit+0x98>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_UART_MspInit+0x98>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800208a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800208e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002098:	2303      	movs	r3, #3
 800209a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800209c:	2307      	movs	r3, #7
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	4619      	mov	r1, r3
 80020a6:	4809      	ldr	r0, [pc, #36]	; (80020cc <HAL_UART_MspInit+0x9c>)
 80020a8:	f001 fa14 	bl	80034d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2105      	movs	r1, #5
 80020b0:	2025      	movs	r0, #37	; 0x25
 80020b2:	f000 fb91 	bl	80027d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020b6:	2025      	movs	r0, #37	; 0x25
 80020b8:	f000 fbaa 	bl	8002810 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80020bc:	bf00      	nop
 80020be:	3728      	adds	r7, #40	; 0x28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40011000 	.word	0x40011000
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020000 	.word	0x40020000

080020d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08c      	sub	sp, #48	; 0x30
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80020e0:	2200      	movs	r2, #0
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	2019      	movs	r0, #25
 80020e6:	f000 fb77 	bl	80027d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020ea:	2019      	movs	r0, #25
 80020ec:	f000 fb90 	bl	8002810 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <HAL_InitTick+0xa4>)
 80020f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f8:	4a1e      	ldr	r2, [pc, #120]	; (8002174 <HAL_InitTick+0xa4>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	6453      	str	r3, [r2, #68]	; 0x44
 8002100:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <HAL_InitTick+0xa4>)
 8002102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800210c:	f107 0210 	add.w	r2, r7, #16
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f003 fbf4 	bl	8005904 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800211c:	f003 fbde 	bl	80058dc <HAL_RCC_GetPCLK2Freq>
 8002120:	4603      	mov	r3, r0
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002128:	4a13      	ldr	r2, [pc, #76]	; (8002178 <HAL_InitTick+0xa8>)
 800212a:	fba2 2303 	umull	r2, r3, r2, r3
 800212e:	0c9b      	lsrs	r3, r3, #18
 8002130:	3b01      	subs	r3, #1
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <HAL_InitTick+0xac>)
 8002136:	4a12      	ldr	r2, [pc, #72]	; (8002180 <HAL_InitTick+0xb0>)
 8002138:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800213a:	4b10      	ldr	r3, [pc, #64]	; (800217c <HAL_InitTick+0xac>)
 800213c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002140:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002142:	4a0e      	ldr	r2, [pc, #56]	; (800217c <HAL_InitTick+0xac>)
 8002144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002146:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <HAL_InitTick+0xac>)
 800214a:	2200      	movs	r2, #0
 800214c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_InitTick+0xac>)
 8002150:	2200      	movs	r2, #0
 8002152:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002154:	4809      	ldr	r0, [pc, #36]	; (800217c <HAL_InitTick+0xac>)
 8002156:	f004 fa07 	bl	8006568 <HAL_TIM_Base_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d104      	bne.n	800216a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002160:	4806      	ldr	r0, [pc, #24]	; (800217c <HAL_InitTick+0xac>)
 8002162:	f004 fa51 	bl	8006608 <HAL_TIM_Base_Start_IT>
 8002166:	4603      	mov	r3, r0
 8002168:	e000      	b.n	800216c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
}
 800216c:	4618      	mov	r0, r3
 800216e:	3730      	adds	r7, #48	; 0x30
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40023800 	.word	0x40023800
 8002178:	431bde83 	.word	0x431bde83
 800217c:	20001bf4 	.word	0x20001bf4
 8002180:	40010000 	.word	0x40010000

08002184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002188:	e7fe      	b.n	8002188 <NMI_Handler+0x4>

0800218a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800218e:	e7fe      	b.n	800218e <HardFault_Handler+0x4>

08002190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002194:	e7fe      	b.n	8002194 <MemManage_Handler+0x4>

08002196 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800219a:	e7fe      	b.n	800219a <BusFault_Handler+0x4>

0800219c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <UsageFault_Handler+0x4>

080021a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021b4:	4802      	ldr	r0, [pc, #8]	; (80021c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80021b6:	f004 fa97 	bl	80066e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20001bf4 	.word	0x20001bf4

080021c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021c8:	4802      	ldr	r0, [pc, #8]	; (80021d4 <TIM2_IRQHandler+0x10>)
 80021ca:	f004 fa8d 	bl	80066e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000818 	.word	0x20000818

080021d8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <SPI1_IRQHandler+0x10>)
 80021de:	f003 fe83 	bl	8005ee8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000700 	.word	0x20000700

080021ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <USART1_IRQHandler+0x10>)
 80021f2:	f004 ff8f 	bl	8007114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000860 	.word	0x20000860

08002200 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <DMA2_Stream0_IRQHandler+0x10>)
 8002206:	f000 fc51 	bl	8002aac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200007b8 	.word	0x200007b8

08002214 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <DMA2_Stream3_IRQHandler+0x10>)
 800221a:	f000 fc47 	bl	8002aac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000758 	.word	0x20000758

08002228 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <OTG_FS_IRQHandler+0x10>)
 800222e:	f001 fd71 	bl	8003d14 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	2000c2b0 	.word	0x2000c2b0

0800223c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
	return 1;
 8002240:	2301      	movs	r3, #1
}
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <_kill>:

int _kill(int pid, int sig)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002256:	f011 f9bf 	bl	80135d8 <__errno>
 800225a:	4603      	mov	r3, r0
 800225c:	2216      	movs	r2, #22
 800225e:	601a      	str	r2, [r3, #0]
	return -1;
 8002260:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <_exit>:

void _exit (int status)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002274:	f04f 31ff 	mov.w	r1, #4294967295
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ffe7 	bl	800224c <_kill>
	while (1) {}		/* Make sure we hang here */
 800227e:	e7fe      	b.n	800227e <_exit+0x12>

08002280 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	e00a      	b.n	80022a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002292:	f3af 8000 	nop.w
 8002296:	4601      	mov	r1, r0
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	60ba      	str	r2, [r7, #8]
 800229e:	b2ca      	uxtb	r2, r1
 80022a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	3301      	adds	r3, #1
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	dbf0      	blt.n	8002292 <_read+0x12>
	}

return len;
 80022b0:	687b      	ldr	r3, [r7, #4]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b086      	sub	sp, #24
 80022be:	af00      	add	r7, sp, #0
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	e009      	b.n	80022e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	60ba      	str	r2, [r7, #8]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	3301      	adds	r3, #1
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	dbf1      	blt.n	80022cc <_write+0x12>
	}
	return len;
 80022e8:	687b      	ldr	r3, [r7, #4]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <_close>:

int _close(int file)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
	return -1;
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800231a:	605a      	str	r2, [r3, #4]
	return 0;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <_isatty>:

int _isatty(int file)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
	return 1;
 8002332:	2301      	movs	r3, #1
}
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
	return 0;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002364:	4a14      	ldr	r2, [pc, #80]	; (80023b8 <_sbrk+0x5c>)
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <_sbrk+0x60>)
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002370:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <_sbrk+0x64>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d102      	bne.n	800237e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <_sbrk+0x64>)
 800237a:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <_sbrk+0x68>)
 800237c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800237e:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <_sbrk+0x64>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	429a      	cmp	r2, r3
 800238a:	d207      	bcs.n	800239c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800238c:	f011 f924 	bl	80135d8 <__errno>
 8002390:	4603      	mov	r3, r0
 8002392:	220c      	movs	r2, #12
 8002394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002396:	f04f 33ff 	mov.w	r3, #4294967295
 800239a:	e009      	b.n	80023b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <_sbrk+0x64>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <_sbrk+0x64>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <_sbrk+0x64>)
 80023ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ae:	68fb      	ldr	r3, [r7, #12]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20020000 	.word	0x20020000
 80023bc:	00000400 	.word	0x00000400
 80023c0:	20001c3c 	.word	0x20001c3c
 80023c4:	2000c5c8 	.word	0x2000c5c8

080023c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <SystemInit+0x20>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d2:	4a05      	ldr	r2, [pc, #20]	; (80023e8 <SystemInit+0x20>)
 80023d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <wav_file_open>:


extern UART_HandleTypeDef huart1;

F_RES wav_file_open(wav_file_typedef* self_object,char* filename)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  memcpy(self_object->header.chunk.prefix,"RIFF",4);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2204      	movs	r2, #4
 80023fa:	4920      	ldr	r1, [pc, #128]	; (800247c <wav_file_open+0x90>)
 80023fc:	4618      	mov	r0, r3
 80023fe:	f011 fa1f 	bl	8013840 <memcpy>
  memcpy(self_object->header.chunk.postfix,"WAVE",4);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3308      	adds	r3, #8
 8002406:	2204      	movs	r2, #4
 8002408:	491d      	ldr	r1, [pc, #116]	; (8002480 <wav_file_open+0x94>)
 800240a:	4618      	mov	r0, r3
 800240c:	f011 fa18 	bl	8013840 <memcpy>
  memcpy(self_object->header.subchunk_fmt.prefix,"fmt ",4);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	330c      	adds	r3, #12
 8002414:	2204      	movs	r2, #4
 8002416:	491b      	ldr	r1, [pc, #108]	; (8002484 <wav_file_open+0x98>)
 8002418:	4618      	mov	r0, r3
 800241a:	f011 fa11 	bl	8013840 <memcpy>
  memcpy(self_object->header.subchunk_data.prefix,"data",4);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3324      	adds	r3, #36	; 0x24
 8002422:	2204      	movs	r2, #4
 8002424:	4918      	ldr	r1, [pc, #96]	; (8002488 <wav_file_open+0x9c>)
 8002426:	4618      	mov	r0, r3
 8002428:	f011 fa0a 	bl	8013840 <memcpy>
  self_object->data_counter=0;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002434:	2200      	movs	r2, #0
 8002436:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800243a:	2200      	movs	r2, #0
 800243c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8002440:	2200      	movs	r2, #0
 8002442:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  if(f_open(&self_object->media.file,filename,FA_CREATE_ALWAYS|FA_WRITE)==FR_OK){
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3330      	adds	r3, #48	; 0x30
 800244a:	220a      	movs	r2, #10
 800244c:	6839      	ldr	r1, [r7, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f00c ff08 	bl	800f264 <f_open>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10b      	bne.n	8002472 <wav_file_open+0x86>
   f_lseek(&self_object->media.file, sizeof(self_object->header));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002460:	f04f 022c 	mov.w	r2, #44	; 0x2c
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	4608      	mov	r0, r1
 800246a:	f00d fcb8 	bl	800fdde <f_lseek>
   return F_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	e000      	b.n	8002474 <wav_file_open+0x88>
  }
  return F_ERR;
 8002472:	2301      	movs	r3, #1
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	08014e1c 	.word	0x08014e1c
 8002480:	08014e24 	.word	0x08014e24
 8002484:	08014e2c 	.word	0x08014e2c
 8002488:	08014e34 	.word	0x08014e34

0800248c <wav_file_close>:

F_RES wav_file_close(wav_file_typedef* self_object)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
	self_object->header.subchunk_data.size=self_object->data_counter;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	629a      	str	r2, [r3, #40]	; 0x28
	self_object->header.chunk.size=36+self_object->data_counter;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	605a      	str	r2, [r3, #4]
 	f_lseek(&self_object->media.file, 0);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	f04f 0300 	mov.w	r3, #0
 80024b6:	4608      	mov	r0, r1
 80024b8:	f00d fc91 	bl	800fdde <f_lseek>
 	if(f_write(&self_object->media.file,(uint8_t*)&self_object->header,sizeof(self_object->header),(void*)&self_object->media.byteswritten)==FR_OK){
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 80024ca:	222c      	movs	r2, #44	; 0x2c
 80024cc:	f00d f98b 	bl	800f7e6 <f_write>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <wav_file_close+0x58>
 	  f_close(&self_object->media.file);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3330      	adds	r3, #48	; 0x30
 80024da:	4618      	mov	r0, r3
 80024dc:	f00d fc55 	bl	800fd8a <f_close>
 	  return F_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	e000      	b.n	80024e6 <wav_file_close+0x5a>
 	}
 	return F_ERR;
 80024e4:	2301      	movs	r3, #1
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <wav_file_write>:

F_RES wav_file_write(wav_file_typedef* self_object,uint8_t* data,uint32_t length)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
	FRESULT res;
	self_object->data_counter+=length;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	441a      	add	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	62da      	str	r2, [r3, #44]	; 0x2c
	res=f_write(&self_object->media.file,data,length,(void*)&self_object->media.byteswritten);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	68b9      	ldr	r1, [r7, #8]
 8002518:	f00d f965 	bl	800f7e6 <f_write>
 800251c:	4603      	mov	r3, r0
 800251e:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit(&huart1,(uint8_t*)&res,1,100);
 8002520:	f107 0117 	add.w	r1, r7, #23
 8002524:	2364      	movs	r3, #100	; 0x64
 8002526:	2201      	movs	r2, #1
 8002528:	4806      	ldr	r0, [pc, #24]	; (8002544 <wav_file_write+0x54>)
 800252a:	f004 fcec 	bl	8006f06 <HAL_UART_Transmit>
	if(res==FR_OK) return F_OK;
 800252e:	7dfb      	ldrb	r3, [r7, #23]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <wav_file_write+0x48>
 8002534:	2300      	movs	r3, #0
 8002536:	e000      	b.n	800253a <wav_file_write+0x4a>
	return F_ERR;
 8002538:	2301      	movs	r3, #1
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000860 	.word	0x20000860

08002548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002580 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800254c:	480d      	ldr	r0, [pc, #52]	; (8002584 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800254e:	490e      	ldr	r1, [pc, #56]	; (8002588 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002550:	4a0e      	ldr	r2, [pc, #56]	; (800258c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002554:	e002      	b.n	800255c <LoopCopyDataInit>

08002556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800255a:	3304      	adds	r3, #4

0800255c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800255c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002560:	d3f9      	bcc.n	8002556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002562:	4a0b      	ldr	r2, [pc, #44]	; (8002590 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002564:	4c0b      	ldr	r4, [pc, #44]	; (8002594 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002568:	e001      	b.n	800256e <LoopFillZerobss>

0800256a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800256a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800256c:	3204      	adds	r2, #4

0800256e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002570:	d3fb      	bcc.n	800256a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002572:	f7ff ff29 	bl	80023c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002576:	f011 f92b 	bl	80137d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800257a:	f7fe fc65 	bl	8000e48 <main>
  bx  lr    
 800257e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002580:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002588:	20000314 	.word	0x20000314
  ldr r2, =_sidata
 800258c:	08015498 	.word	0x08015498
  ldr r2, =_sbss
 8002590:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 8002594:	2000c5c4 	.word	0x2000c5c4

08002598 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002598:	e7fe      	b.n	8002598 <ADC_IRQHandler>
	...

0800259c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025a0:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <HAL_Init+0x40>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0d      	ldr	r2, [pc, #52]	; (80025dc <HAL_Init+0x40>)
 80025a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_Init+0x40>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <HAL_Init+0x40>)
 80025b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025b8:	4b08      	ldr	r3, [pc, #32]	; (80025dc <HAL_Init+0x40>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a07      	ldr	r2, [pc, #28]	; (80025dc <HAL_Init+0x40>)
 80025be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c4:	2003      	movs	r0, #3
 80025c6:	f000 f8fc 	bl	80027c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ca:	200f      	movs	r0, #15
 80025cc:	f7ff fd80 	bl	80020d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025d0:	f7ff fc26 	bl	8001e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40023c00 	.word	0x40023c00

080025e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e4:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_IncTick+0x20>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_IncTick+0x24>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4413      	add	r3, r2
 80025f0:	4a04      	ldr	r2, [pc, #16]	; (8002604 <HAL_IncTick+0x24>)
 80025f2:	6013      	str	r3, [r2, #0]
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000238 	.word	0x20000238
 8002604:	20001c40 	.word	0x20001c40

08002608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return uwTick;
 800260c:	4b03      	ldr	r3, [pc, #12]	; (800261c <HAL_GetTick+0x14>)
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20001c40 	.word	0x20001c40

08002620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002628:	f7ff ffee 	bl	8002608 <HAL_GetTick>
 800262c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002638:	d005      	beq.n	8002646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <HAL_Delay+0x44>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4413      	add	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002646:	bf00      	nop
 8002648:	f7ff ffde 	bl	8002608 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	429a      	cmp	r2, r3
 8002656:	d8f7      	bhi.n	8002648 <HAL_Delay+0x28>
  {
  }
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000238 	.word	0x20000238

08002668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <__NVIC_SetPriorityGrouping+0x44>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002684:	4013      	ands	r3, r2
 8002686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800269a:	4a04      	ldr	r2, [pc, #16]	; (80026ac <__NVIC_SetPriorityGrouping+0x44>)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	60d3      	str	r3, [r2, #12]
}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b4:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <__NVIC_GetPriorityGrouping+0x18>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	f003 0307 	and.w	r3, r3, #7
}
 80026be:	4618      	mov	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	db0b      	blt.n	80026f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	f003 021f 	and.w	r2, r3, #31
 80026e4:	4907      	ldr	r1, [pc, #28]	; (8002704 <__NVIC_EnableIRQ+0x38>)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	2001      	movs	r0, #1
 80026ee:	fa00 f202 	lsl.w	r2, r0, r2
 80026f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000e100 	.word	0xe000e100

08002708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	6039      	str	r1, [r7, #0]
 8002712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002718:	2b00      	cmp	r3, #0
 800271a:	db0a      	blt.n	8002732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	490c      	ldr	r1, [pc, #48]	; (8002754 <__NVIC_SetPriority+0x4c>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	0112      	lsls	r2, r2, #4
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	440b      	add	r3, r1
 800272c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002730:	e00a      	b.n	8002748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4908      	ldr	r1, [pc, #32]	; (8002758 <__NVIC_SetPriority+0x50>)
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	3b04      	subs	r3, #4
 8002740:	0112      	lsls	r2, r2, #4
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	440b      	add	r3, r1
 8002746:	761a      	strb	r2, [r3, #24]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000e100 	.word	0xe000e100
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	; 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f1c3 0307 	rsb	r3, r3, #7
 8002776:	2b04      	cmp	r3, #4
 8002778:	bf28      	it	cs
 800277a:	2304      	movcs	r3, #4
 800277c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3304      	adds	r3, #4
 8002782:	2b06      	cmp	r3, #6
 8002784:	d902      	bls.n	800278c <NVIC_EncodePriority+0x30>
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3b03      	subs	r3, #3
 800278a:	e000      	b.n	800278e <NVIC_EncodePriority+0x32>
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	f04f 32ff 	mov.w	r2, #4294967295
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	401a      	ands	r2, r3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a4:	f04f 31ff 	mov.w	r1, #4294967295
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	43d9      	mvns	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	4313      	orrs	r3, r2
         );
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3724      	adds	r7, #36	; 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff ff4c 	bl	8002668 <__NVIC_SetPriorityGrouping>
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027ea:	f7ff ff61 	bl	80026b0 <__NVIC_GetPriorityGrouping>
 80027ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	68b9      	ldr	r1, [r7, #8]
 80027f4:	6978      	ldr	r0, [r7, #20]
 80027f6:	f7ff ffb1 	bl	800275c <NVIC_EncodePriority>
 80027fa:	4602      	mov	r2, r0
 80027fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff ff80 	bl	8002708 <__NVIC_SetPriority>
}
 8002808:	bf00      	nop
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff ff54 	bl	80026cc <__NVIC_EnableIRQ>
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002838:	f7ff fee6 	bl	8002608 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e099      	b.n	800297c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002868:	e00f      	b.n	800288a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800286a:	f7ff fecd 	bl	8002608 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b05      	cmp	r3, #5
 8002876:	d908      	bls.n	800288a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2220      	movs	r2, #32
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2203      	movs	r2, #3
 8002882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e078      	b.n	800297c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1e8      	bne.n	800286a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	4b38      	ldr	r3, [pc, #224]	; (8002984 <HAL_DMA_Init+0x158>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d107      	bne.n	80028f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	4313      	orrs	r3, r2
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f023 0307 	bic.w	r3, r3, #7
 800290a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	4313      	orrs	r3, r2
 8002914:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	2b04      	cmp	r3, #4
 800291c:	d117      	bne.n	800294e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4313      	orrs	r3, r2
 8002926:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00e      	beq.n	800294e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 fa7b 	bl	8002e2c <DMA_CheckFifoParam>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2240      	movs	r2, #64	; 0x40
 8002940:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800294a:	2301      	movs	r3, #1
 800294c:	e016      	b.n	800297c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fa32 	bl	8002dc0 <DMA_CalcBaseAndBitshift>
 800295c:	4603      	mov	r3, r0
 800295e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002964:	223f      	movs	r2, #63	; 0x3f
 8002966:	409a      	lsls	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	f010803f 	.word	0xf010803f

08002988 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002994:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002996:	f7ff fe37 	bl	8002608 <HAL_GetTick>
 800299a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d008      	beq.n	80029ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2280      	movs	r2, #128	; 0x80
 80029ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e052      	b.n	8002a60 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0216 	bic.w	r2, r2, #22
 80029c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d103      	bne.n	80029ea <HAL_DMA_Abort+0x62>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d007      	beq.n	80029fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0208 	bic.w	r2, r2, #8
 80029f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0201 	bic.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a0a:	e013      	b.n	8002a34 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a0c:	f7ff fdfc 	bl	8002608 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b05      	cmp	r3, #5
 8002a18:	d90c      	bls.n	8002a34 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2203      	movs	r2, #3
 8002a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e015      	b.n	8002a60 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1e4      	bne.n	8002a0c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a46:	223f      	movs	r2, #63	; 0x3f
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d004      	beq.n	8002a86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2280      	movs	r2, #128	; 0x80
 8002a80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e00c      	b.n	8002aa0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2205      	movs	r2, #5
 8002a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0201 	bic.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ab8:	4b8e      	ldr	r3, [pc, #568]	; (8002cf4 <HAL_DMA_IRQHandler+0x248>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a8e      	ldr	r2, [pc, #568]	; (8002cf8 <HAL_DMA_IRQHandler+0x24c>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	0a9b      	lsrs	r3, r3, #10
 8002ac4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad6:	2208      	movs	r2, #8
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d01a      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d013      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0204 	bic.w	r2, r2, #4
 8002afe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b04:	2208      	movs	r2, #8
 8002b06:	409a      	lsls	r2, r3
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b10:	f043 0201 	orr.w	r2, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d012      	beq.n	8002b4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00b      	beq.n	8002b4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b46:	f043 0202 	orr.w	r2, r3, #2
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b52:	2204      	movs	r2, #4
 8002b54:	409a      	lsls	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d012      	beq.n	8002b84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00b      	beq.n	8002b84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b70:	2204      	movs	r2, #4
 8002b72:	409a      	lsls	r2, r3
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7c:	f043 0204 	orr.w	r2, r3, #4
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b88:	2210      	movs	r2, #16
 8002b8a:	409a      	lsls	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d043      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d03c      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba6:	2210      	movs	r2, #16
 8002ba8:	409a      	lsls	r2, r3
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d018      	beq.n	8002bee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d108      	bne.n	8002bdc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d024      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4798      	blx	r3
 8002bda:	e01f      	b.n	8002c1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01b      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	4798      	blx	r3
 8002bec:	e016      	b.n	8002c1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d107      	bne.n	8002c0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0208 	bic.w	r2, r2, #8
 8002c0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c20:	2220      	movs	r2, #32
 8002c22:	409a      	lsls	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 808f 	beq.w	8002d4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0310 	and.w	r3, r3, #16
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8087 	beq.w	8002d4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c42:	2220      	movs	r2, #32
 8002c44:	409a      	lsls	r2, r3
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b05      	cmp	r3, #5
 8002c54:	d136      	bne.n	8002cc4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0216 	bic.w	r2, r2, #22
 8002c64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695a      	ldr	r2, [r3, #20]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d103      	bne.n	8002c86 <HAL_DMA_IRQHandler+0x1da>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d007      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0208 	bic.w	r2, r2, #8
 8002c94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9a:	223f      	movs	r2, #63	; 0x3f
 8002c9c:	409a      	lsls	r2, r3
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d07e      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	4798      	blx	r3
        }
        return;
 8002cc2:	e079      	b.n	8002db8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d01d      	beq.n	8002d0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10d      	bne.n	8002cfc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d031      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	4798      	blx	r3
 8002cf0:	e02c      	b.n	8002d4c <HAL_DMA_IRQHandler+0x2a0>
 8002cf2:	bf00      	nop
 8002cf4:	20000230 	.word	0x20000230
 8002cf8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d023      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	4798      	blx	r3
 8002d0c:	e01e      	b.n	8002d4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10f      	bne.n	8002d3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0210 	bic.w	r2, r2, #16
 8002d2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d032      	beq.n	8002dba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d022      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2205      	movs	r2, #5
 8002d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0201 	bic.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d307      	bcc.n	8002d94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f2      	bne.n	8002d78 <HAL_DMA_IRQHandler+0x2cc>
 8002d92:	e000      	b.n	8002d96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d005      	beq.n	8002dba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	4798      	blx	r3
 8002db6:	e000      	b.n	8002dba <HAL_DMA_IRQHandler+0x30e>
        return;
 8002db8:	bf00      	nop
    }
  }
}
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	3b10      	subs	r3, #16
 8002dd0:	4a14      	ldr	r2, [pc, #80]	; (8002e24 <DMA_CalcBaseAndBitshift+0x64>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	091b      	lsrs	r3, r3, #4
 8002dd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002dda:	4a13      	ldr	r2, [pc, #76]	; (8002e28 <DMA_CalcBaseAndBitshift+0x68>)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4413      	add	r3, r2
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	d909      	bls.n	8002e02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002df6:	f023 0303 	bic.w	r3, r3, #3
 8002dfa:	1d1a      	adds	r2, r3, #4
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	659a      	str	r2, [r3, #88]	; 0x58
 8002e00:	e007      	b.n	8002e12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e0a:	f023 0303 	bic.w	r3, r3, #3
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	aaaaaaab 	.word	0xaaaaaaab
 8002e28:	08014ef8 	.word	0x08014ef8

08002e2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d11f      	bne.n	8002e86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b03      	cmp	r3, #3
 8002e4a:	d856      	bhi.n	8002efa <DMA_CheckFifoParam+0xce>
 8002e4c:	a201      	add	r2, pc, #4	; (adr r2, 8002e54 <DMA_CheckFifoParam+0x28>)
 8002e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e52:	bf00      	nop
 8002e54:	08002e65 	.word	0x08002e65
 8002e58:	08002e77 	.word	0x08002e77
 8002e5c:	08002e65 	.word	0x08002e65
 8002e60:	08002efb 	.word	0x08002efb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d046      	beq.n	8002efe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e74:	e043      	b.n	8002efe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e7e:	d140      	bne.n	8002f02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e84:	e03d      	b.n	8002f02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e8e:	d121      	bne.n	8002ed4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d837      	bhi.n	8002f06 <DMA_CheckFifoParam+0xda>
 8002e96:	a201      	add	r2, pc, #4	; (adr r2, 8002e9c <DMA_CheckFifoParam+0x70>)
 8002e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9c:	08002ead 	.word	0x08002ead
 8002ea0:	08002eb3 	.word	0x08002eb3
 8002ea4:	08002ead 	.word	0x08002ead
 8002ea8:	08002ec5 	.word	0x08002ec5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb0:	e030      	b.n	8002f14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d025      	beq.n	8002f0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec2:	e022      	b.n	8002f0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ecc:	d11f      	bne.n	8002f0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ed2:	e01c      	b.n	8002f0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d903      	bls.n	8002ee2 <DMA_CheckFifoParam+0xb6>
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d003      	beq.n	8002ee8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ee0:	e018      	b.n	8002f14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee6:	e015      	b.n	8002f14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00e      	beq.n	8002f12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ef8:	e00b      	b.n	8002f12 <DMA_CheckFifoParam+0xe6>
      break;
 8002efa:	bf00      	nop
 8002efc:	e00a      	b.n	8002f14 <DMA_CheckFifoParam+0xe8>
      break;
 8002efe:	bf00      	nop
 8002f00:	e008      	b.n	8002f14 <DMA_CheckFifoParam+0xe8>
      break;
 8002f02:	bf00      	nop
 8002f04:	e006      	b.n	8002f14 <DMA_CheckFifoParam+0xe8>
      break;
 8002f06:	bf00      	nop
 8002f08:	e004      	b.n	8002f14 <DMA_CheckFifoParam+0xe8>
      break;
 8002f0a:	bf00      	nop
 8002f0c:	e002      	b.n	8002f14 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f0e:	bf00      	nop
 8002f10:	e000      	b.n	8002f14 <DMA_CheckFifoParam+0xe8>
      break;
 8002f12:	bf00      	nop
    }
  } 
  
  return status; 
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop

08002f24 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f36:	4b23      	ldr	r3, [pc, #140]	; (8002fc4 <HAL_FLASH_Program+0xa0>)
 8002f38:	7e1b      	ldrb	r3, [r3, #24]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_FLASH_Program+0x1e>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e03b      	b.n	8002fba <HAL_FLASH_Program+0x96>
 8002f42:	4b20      	ldr	r3, [pc, #128]	; (8002fc4 <HAL_FLASH_Program+0xa0>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f4c:	f000 f870 	bl	8003030 <FLASH_WaitForLastOperation>
 8002f50:	4603      	mov	r3, r0
 8002f52:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002f54:	7dfb      	ldrb	r3, [r7, #23]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d12b      	bne.n	8002fb2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d105      	bne.n	8002f6c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002f60:	783b      	ldrb	r3, [r7, #0]
 8002f62:	4619      	mov	r1, r3
 8002f64:	68b8      	ldr	r0, [r7, #8]
 8002f66:	f000 f91b 	bl	80031a0 <FLASH_Program_Byte>
 8002f6a:	e016      	b.n	8002f9a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d105      	bne.n	8002f7e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002f72:	883b      	ldrh	r3, [r7, #0]
 8002f74:	4619      	mov	r1, r3
 8002f76:	68b8      	ldr	r0, [r7, #8]
 8002f78:	f000 f8ee 	bl	8003158 <FLASH_Program_HalfWord>
 8002f7c:	e00d      	b.n	8002f9a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d105      	bne.n	8002f90 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	4619      	mov	r1, r3
 8002f88:	68b8      	ldr	r0, [r7, #8]
 8002f8a:	f000 f8c3 	bl	8003114 <FLASH_Program_Word>
 8002f8e:	e004      	b.n	8002f9a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f94:	68b8      	ldr	r0, [r7, #8]
 8002f96:	f000 f88b 	bl	80030b0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f9a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f9e:	f000 f847 	bl	8003030 <FLASH_WaitForLastOperation>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002fa6:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <HAL_FLASH_Program+0xa4>)
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	4a07      	ldr	r2, [pc, #28]	; (8002fc8 <HAL_FLASH_Program+0xa4>)
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002fb2:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <HAL_FLASH_Program+0xa0>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20001c44 	.word	0x20001c44
 8002fc8:	40023c00 	.word	0x40023c00

08002fcc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <HAL_FLASH_Unlock+0x38>)
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	da0b      	bge.n	8002ff6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002fde:	4b09      	ldr	r3, [pc, #36]	; (8003004 <HAL_FLASH_Unlock+0x38>)
 8002fe0:	4a09      	ldr	r2, [pc, #36]	; (8003008 <HAL_FLASH_Unlock+0x3c>)
 8002fe2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002fe4:	4b07      	ldr	r3, [pc, #28]	; (8003004 <HAL_FLASH_Unlock+0x38>)
 8002fe6:	4a09      	ldr	r2, [pc, #36]	; (800300c <HAL_FLASH_Unlock+0x40>)
 8002fe8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_FLASH_Unlock+0x38>)
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	da01      	bge.n	8002ff6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	40023c00 	.word	0x40023c00
 8003008:	45670123 	.word	0x45670123
 800300c:	cdef89ab 	.word	0xcdef89ab

08003010 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003014:	4b05      	ldr	r3, [pc, #20]	; (800302c <HAL_FLASH_Lock+0x1c>)
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	4a04      	ldr	r2, [pc, #16]	; (800302c <HAL_FLASH_Lock+0x1c>)
 800301a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800301e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	40023c00 	.word	0x40023c00

08003030 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800303c:	4b1a      	ldr	r3, [pc, #104]	; (80030a8 <FLASH_WaitForLastOperation+0x78>)
 800303e:	2200      	movs	r2, #0
 8003040:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003042:	f7ff fae1 	bl	8002608 <HAL_GetTick>
 8003046:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003048:	e010      	b.n	800306c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d00c      	beq.n	800306c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <FLASH_WaitForLastOperation+0x38>
 8003058:	f7ff fad6 	bl	8002608 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	429a      	cmp	r2, r3
 8003066:	d201      	bcs.n	800306c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e019      	b.n	80030a0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800306c:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <FLASH_WaitForLastOperation+0x7c>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1e8      	bne.n	800304a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003078:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <FLASH_WaitForLastOperation+0x7c>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003084:	4b09      	ldr	r3, [pc, #36]	; (80030ac <FLASH_WaitForLastOperation+0x7c>)
 8003086:	2201      	movs	r2, #1
 8003088:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800308a:	4b08      	ldr	r3, [pc, #32]	; (80030ac <FLASH_WaitForLastOperation+0x7c>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003096:	f000 f8a5 	bl	80031e4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
  
}  
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	20001c44 	.word	0x20001c44
 80030ac:	40023c00 	.word	0x40023c00

080030b0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80030bc:	4b14      	ldr	r3, [pc, #80]	; (8003110 <FLASH_Program_DoubleWord+0x60>)
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	4a13      	ldr	r2, [pc, #76]	; (8003110 <FLASH_Program_DoubleWord+0x60>)
 80030c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <FLASH_Program_DoubleWord+0x60>)
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	4a10      	ldr	r2, [pc, #64]	; (8003110 <FLASH_Program_DoubleWord+0x60>)
 80030ce:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80030d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80030d4:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <FLASH_Program_DoubleWord+0x60>)
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	4a0d      	ldr	r2, [pc, #52]	; (8003110 <FLASH_Program_DoubleWord+0x60>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80030e6:	f3bf 8f6f 	isb	sy
}
 80030ea:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80030ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	000a      	movs	r2, r1
 80030fa:	2300      	movs	r3, #0
 80030fc:	68f9      	ldr	r1, [r7, #12]
 80030fe:	3104      	adds	r1, #4
 8003100:	4613      	mov	r3, r2
 8003102:	600b      	str	r3, [r1, #0]
}
 8003104:	bf00      	nop
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	40023c00 	.word	0x40023c00

08003114 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800311e:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <FLASH_Program_Word+0x40>)
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	4a0c      	ldr	r2, [pc, #48]	; (8003154 <FLASH_Program_Word+0x40>)
 8003124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003128:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800312a:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <FLASH_Program_Word+0x40>)
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	4a09      	ldr	r2, [pc, #36]	; (8003154 <FLASH_Program_Word+0x40>)
 8003130:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003134:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003136:	4b07      	ldr	r3, [pc, #28]	; (8003154 <FLASH_Program_Word+0x40>)
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	4a06      	ldr	r2, [pc, #24]	; (8003154 <FLASH_Program_Word+0x40>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	601a      	str	r2, [r3, #0]
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	40023c00 	.word	0x40023c00

08003158 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003164:	4b0d      	ldr	r3, [pc, #52]	; (800319c <FLASH_Program_HalfWord+0x44>)
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	4a0c      	ldr	r2, [pc, #48]	; (800319c <FLASH_Program_HalfWord+0x44>)
 800316a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800316e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003170:	4b0a      	ldr	r3, [pc, #40]	; (800319c <FLASH_Program_HalfWord+0x44>)
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	4a09      	ldr	r2, [pc, #36]	; (800319c <FLASH_Program_HalfWord+0x44>)
 8003176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800317c:	4b07      	ldr	r3, [pc, #28]	; (800319c <FLASH_Program_HalfWord+0x44>)
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	4a06      	ldr	r2, [pc, #24]	; (800319c <FLASH_Program_HalfWord+0x44>)
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	887a      	ldrh	r2, [r7, #2]
 800318c:	801a      	strh	r2, [r3, #0]
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40023c00 	.word	0x40023c00

080031a0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <FLASH_Program_Byte+0x40>)
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	4a0b      	ldr	r2, [pc, #44]	; (80031e0 <FLASH_Program_Byte+0x40>)
 80031b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80031b8:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <FLASH_Program_Byte+0x40>)
 80031ba:	4a09      	ldr	r2, [pc, #36]	; (80031e0 <FLASH_Program_Byte+0x40>)
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80031c0:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <FLASH_Program_Byte+0x40>)
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	4a06      	ldr	r2, [pc, #24]	; (80031e0 <FLASH_Program_Byte+0x40>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	701a      	strb	r2, [r3, #0]
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40023c00 	.word	0x40023c00

080031e4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80031e8:	4b27      	ldr	r3, [pc, #156]	; (8003288 <FLASH_SetErrorCode+0xa4>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80031f4:	4b25      	ldr	r3, [pc, #148]	; (800328c <FLASH_SetErrorCode+0xa8>)
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	f043 0310 	orr.w	r3, r3, #16
 80031fc:	4a23      	ldr	r2, [pc, #140]	; (800328c <FLASH_SetErrorCode+0xa8>)
 80031fe:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003200:	4b21      	ldr	r3, [pc, #132]	; (8003288 <FLASH_SetErrorCode+0xa4>)
 8003202:	2210      	movs	r2, #16
 8003204:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003206:	4b20      	ldr	r3, [pc, #128]	; (8003288 <FLASH_SetErrorCode+0xa4>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b00      	cmp	r3, #0
 8003210:	d008      	beq.n	8003224 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003212:	4b1e      	ldr	r3, [pc, #120]	; (800328c <FLASH_SetErrorCode+0xa8>)
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	f043 0308 	orr.w	r3, r3, #8
 800321a:	4a1c      	ldr	r2, [pc, #112]	; (800328c <FLASH_SetErrorCode+0xa8>)
 800321c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800321e:	4b1a      	ldr	r3, [pc, #104]	; (8003288 <FLASH_SetErrorCode+0xa4>)
 8003220:	2220      	movs	r2, #32
 8003222:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003224:	4b18      	ldr	r3, [pc, #96]	; (8003288 <FLASH_SetErrorCode+0xa4>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003230:	4b16      	ldr	r3, [pc, #88]	; (800328c <FLASH_SetErrorCode+0xa8>)
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	f043 0304 	orr.w	r3, r3, #4
 8003238:	4a14      	ldr	r2, [pc, #80]	; (800328c <FLASH_SetErrorCode+0xa8>)
 800323a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800323c:	4b12      	ldr	r3, [pc, #72]	; (8003288 <FLASH_SetErrorCode+0xa4>)
 800323e:	2240      	movs	r2, #64	; 0x40
 8003240:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003242:	4b11      	ldr	r3, [pc, #68]	; (8003288 <FLASH_SetErrorCode+0xa4>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324a:	2b00      	cmp	r3, #0
 800324c:	d008      	beq.n	8003260 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800324e:	4b0f      	ldr	r3, [pc, #60]	; (800328c <FLASH_SetErrorCode+0xa8>)
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f043 0302 	orr.w	r3, r3, #2
 8003256:	4a0d      	ldr	r2, [pc, #52]	; (800328c <FLASH_SetErrorCode+0xa8>)
 8003258:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800325a:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <FLASH_SetErrorCode+0xa4>)
 800325c:	2280      	movs	r2, #128	; 0x80
 800325e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003260:	4b09      	ldr	r3, [pc, #36]	; (8003288 <FLASH_SetErrorCode+0xa4>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800326c:	4b07      	ldr	r3, [pc, #28]	; (800328c <FLASH_SetErrorCode+0xa8>)
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	f043 0320 	orr.w	r3, r3, #32
 8003274:	4a05      	ldr	r2, [pc, #20]	; (800328c <FLASH_SetErrorCode+0xa8>)
 8003276:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003278:	4b03      	ldr	r3, [pc, #12]	; (8003288 <FLASH_SetErrorCode+0xa4>)
 800327a:	2202      	movs	r2, #2
 800327c:	60da      	str	r2, [r3, #12]
  }
}
 800327e:	bf00      	nop
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	40023c00 	.word	0x40023c00
 800328c:	20001c44 	.word	0x20001c44

08003290 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80032a2:	4b31      	ldr	r3, [pc, #196]	; (8003368 <HAL_FLASHEx_Erase+0xd8>)
 80032a4:	7e1b      	ldrb	r3, [r3, #24]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d101      	bne.n	80032ae <HAL_FLASHEx_Erase+0x1e>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e058      	b.n	8003360 <HAL_FLASHEx_Erase+0xd0>
 80032ae:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <HAL_FLASHEx_Erase+0xd8>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032b8:	f7ff feba 	bl	8003030 <FLASH_WaitForLastOperation>
 80032bc:	4603      	mov	r3, r0
 80032be:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d148      	bne.n	8003358 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	f04f 32ff 	mov.w	r2, #4294967295
 80032cc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d115      	bne.n	8003302 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	4619      	mov	r1, r3
 80032e2:	4610      	mov	r0, r2
 80032e4:	f000 f844 	bl	8003370 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032ec:	f7ff fea0 	bl	8003030 <FLASH_WaitForLastOperation>
 80032f0:	4603      	mov	r3, r0
 80032f2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80032f4:	4b1d      	ldr	r3, [pc, #116]	; (800336c <HAL_FLASHEx_Erase+0xdc>)
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	4a1c      	ldr	r2, [pc, #112]	; (800336c <HAL_FLASHEx_Erase+0xdc>)
 80032fa:	f023 0304 	bic.w	r3, r3, #4
 80032fe:	6113      	str	r3, [r2, #16]
 8003300:	e028      	b.n	8003354 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	60bb      	str	r3, [r7, #8]
 8003308:	e01c      	b.n	8003344 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	4619      	mov	r1, r3
 8003312:	68b8      	ldr	r0, [r7, #8]
 8003314:	f000 f850 	bl	80033b8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003318:	f24c 3050 	movw	r0, #50000	; 0xc350
 800331c:	f7ff fe88 	bl	8003030 <FLASH_WaitForLastOperation>
 8003320:	4603      	mov	r3, r0
 8003322:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003324:	4b11      	ldr	r3, [pc, #68]	; (800336c <HAL_FLASHEx_Erase+0xdc>)
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	4a10      	ldr	r2, [pc, #64]	; (800336c <HAL_FLASHEx_Erase+0xdc>)
 800332a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800332e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	601a      	str	r2, [r3, #0]
          break;
 800333c:	e00a      	b.n	8003354 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	3301      	adds	r3, #1
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4413      	add	r3, r2
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	429a      	cmp	r2, r3
 8003352:	d3da      	bcc.n	800330a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003354:	f000 f878 	bl	8003448 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003358:	4b03      	ldr	r3, [pc, #12]	; (8003368 <HAL_FLASHEx_Erase+0xd8>)
 800335a:	2200      	movs	r2, #0
 800335c:	761a      	strb	r2, [r3, #24]

  return status;
 800335e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20001c44 	.word	0x20001c44
 800336c:	40023c00 	.word	0x40023c00

08003370 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	6039      	str	r1, [r7, #0]
 800337a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800337c:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <FLASH_MassErase+0x44>)
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	4a0c      	ldr	r2, [pc, #48]	; (80033b4 <FLASH_MassErase+0x44>)
 8003382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003386:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8003388:	4b0a      	ldr	r3, [pc, #40]	; (80033b4 <FLASH_MassErase+0x44>)
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	4a09      	ldr	r2, [pc, #36]	; (80033b4 <FLASH_MassErase+0x44>)
 800338e:	f043 0304 	orr.w	r3, r3, #4
 8003392:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003394:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <FLASH_MassErase+0x44>)
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	79fb      	ldrb	r3, [r7, #7]
 800339a:	021b      	lsls	r3, r3, #8
 800339c:	4313      	orrs	r3, r2
 800339e:	4a05      	ldr	r2, [pc, #20]	; (80033b4 <FLASH_MassErase+0x44>)
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a4:	6113      	str	r3, [r2, #16]
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40023c00 	.word	0x40023c00

080033b8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d102      	bne.n	80033d4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	e010      	b.n	80033f6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d103      	bne.n	80033e2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80033da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	e009      	b.n	80033f6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80033e2:	78fb      	ldrb	r3, [r7, #3]
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d103      	bne.n	80033f0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80033e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	e002      	b.n	80033f6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80033f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033f4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80033f6:	4b13      	ldr	r3, [pc, #76]	; (8003444 <FLASH_Erase_Sector+0x8c>)
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	4a12      	ldr	r2, [pc, #72]	; (8003444 <FLASH_Erase_Sector+0x8c>)
 80033fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003400:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003402:	4b10      	ldr	r3, [pc, #64]	; (8003444 <FLASH_Erase_Sector+0x8c>)
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	490f      	ldr	r1, [pc, #60]	; (8003444 <FLASH_Erase_Sector+0x8c>)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800340e:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <FLASH_Erase_Sector+0x8c>)
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	4a0c      	ldr	r2, [pc, #48]	; (8003444 <FLASH_Erase_Sector+0x8c>)
 8003414:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003418:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800341a:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <FLASH_Erase_Sector+0x8c>)
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	4313      	orrs	r3, r2
 8003424:	4a07      	ldr	r2, [pc, #28]	; (8003444 <FLASH_Erase_Sector+0x8c>)
 8003426:	f043 0302 	orr.w	r3, r3, #2
 800342a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <FLASH_Erase_Sector+0x8c>)
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	4a04      	ldr	r2, [pc, #16]	; (8003444 <FLASH_Erase_Sector+0x8c>)
 8003432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003436:	6113      	str	r3, [r2, #16]
}
 8003438:	bf00      	nop
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	40023c00 	.word	0x40023c00

08003448 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800344c:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <FLASH_FlushCaches+0x88>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003454:	2b00      	cmp	r3, #0
 8003456:	d017      	beq.n	8003488 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003458:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <FLASH_FlushCaches+0x88>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1c      	ldr	r2, [pc, #112]	; (80034d0 <FLASH_FlushCaches+0x88>)
 800345e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003462:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003464:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <FLASH_FlushCaches+0x88>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a19      	ldr	r2, [pc, #100]	; (80034d0 <FLASH_FlushCaches+0x88>)
 800346a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <FLASH_FlushCaches+0x88>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a16      	ldr	r2, [pc, #88]	; (80034d0 <FLASH_FlushCaches+0x88>)
 8003476:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800347a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800347c:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <FLASH_FlushCaches+0x88>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a13      	ldr	r2, [pc, #76]	; (80034d0 <FLASH_FlushCaches+0x88>)
 8003482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003486:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <FLASH_FlushCaches+0x88>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003490:	2b00      	cmp	r3, #0
 8003492:	d017      	beq.n	80034c4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003494:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <FLASH_FlushCaches+0x88>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a0d      	ldr	r2, [pc, #52]	; (80034d0 <FLASH_FlushCaches+0x88>)
 800349a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800349e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <FLASH_FlushCaches+0x88>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a0a      	ldr	r2, [pc, #40]	; (80034d0 <FLASH_FlushCaches+0x88>)
 80034a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <FLASH_FlushCaches+0x88>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a07      	ldr	r2, [pc, #28]	; (80034d0 <FLASH_FlushCaches+0x88>)
 80034b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034b6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80034b8:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <FLASH_FlushCaches+0x88>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a04      	ldr	r2, [pc, #16]	; (80034d0 <FLASH_FlushCaches+0x88>)
 80034be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034c2:	6013      	str	r3, [r2, #0]
  }
}
 80034c4:	bf00      	nop
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40023c00 	.word	0x40023c00

080034d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b089      	sub	sp, #36	; 0x24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
 80034ee:	e16b      	b.n	80037c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034f0:	2201      	movs	r2, #1
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4013      	ands	r3, r2
 8003502:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	429a      	cmp	r2, r3
 800350a:	f040 815a 	bne.w	80037c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b01      	cmp	r3, #1
 8003518:	d005      	beq.n	8003526 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003522:	2b02      	cmp	r3, #2
 8003524:	d130      	bne.n	8003588 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	2203      	movs	r2, #3
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4313      	orrs	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800355c:	2201      	movs	r2, #1
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	091b      	lsrs	r3, r3, #4
 8003572:	f003 0201 	and.w	r2, r3, #1
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4313      	orrs	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	2b03      	cmp	r3, #3
 8003592:	d017      	beq.n	80035c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	2203      	movs	r2, #3
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4013      	ands	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d123      	bne.n	8003618 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	08da      	lsrs	r2, r3, #3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3208      	adds	r2, #8
 80035d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	220f      	movs	r2, #15
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4013      	ands	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4313      	orrs	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	08da      	lsrs	r2, r3, #3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3208      	adds	r2, #8
 8003612:	69b9      	ldr	r1, [r7, #24]
 8003614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	2203      	movs	r2, #3
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 0203 	and.w	r2, r3, #3
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4313      	orrs	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80b4 	beq.w	80037c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	4b60      	ldr	r3, [pc, #384]	; (80037e0 <HAL_GPIO_Init+0x30c>)
 8003660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003662:	4a5f      	ldr	r2, [pc, #380]	; (80037e0 <HAL_GPIO_Init+0x30c>)
 8003664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003668:	6453      	str	r3, [r2, #68]	; 0x44
 800366a:	4b5d      	ldr	r3, [pc, #372]	; (80037e0 <HAL_GPIO_Init+0x30c>)
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003676:	4a5b      	ldr	r2, [pc, #364]	; (80037e4 <HAL_GPIO_Init+0x310>)
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	089b      	lsrs	r3, r3, #2
 800367c:	3302      	adds	r3, #2
 800367e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	220f      	movs	r2, #15
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43db      	mvns	r3, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4013      	ands	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a52      	ldr	r2, [pc, #328]	; (80037e8 <HAL_GPIO_Init+0x314>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d02b      	beq.n	80036fa <HAL_GPIO_Init+0x226>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a51      	ldr	r2, [pc, #324]	; (80037ec <HAL_GPIO_Init+0x318>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d025      	beq.n	80036f6 <HAL_GPIO_Init+0x222>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a50      	ldr	r2, [pc, #320]	; (80037f0 <HAL_GPIO_Init+0x31c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d01f      	beq.n	80036f2 <HAL_GPIO_Init+0x21e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a4f      	ldr	r2, [pc, #316]	; (80037f4 <HAL_GPIO_Init+0x320>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d019      	beq.n	80036ee <HAL_GPIO_Init+0x21a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a4e      	ldr	r2, [pc, #312]	; (80037f8 <HAL_GPIO_Init+0x324>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <HAL_GPIO_Init+0x216>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a4d      	ldr	r2, [pc, #308]	; (80037fc <HAL_GPIO_Init+0x328>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00d      	beq.n	80036e6 <HAL_GPIO_Init+0x212>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a4c      	ldr	r2, [pc, #304]	; (8003800 <HAL_GPIO_Init+0x32c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d007      	beq.n	80036e2 <HAL_GPIO_Init+0x20e>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a4b      	ldr	r2, [pc, #300]	; (8003804 <HAL_GPIO_Init+0x330>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d101      	bne.n	80036de <HAL_GPIO_Init+0x20a>
 80036da:	2307      	movs	r3, #7
 80036dc:	e00e      	b.n	80036fc <HAL_GPIO_Init+0x228>
 80036de:	2308      	movs	r3, #8
 80036e0:	e00c      	b.n	80036fc <HAL_GPIO_Init+0x228>
 80036e2:	2306      	movs	r3, #6
 80036e4:	e00a      	b.n	80036fc <HAL_GPIO_Init+0x228>
 80036e6:	2305      	movs	r3, #5
 80036e8:	e008      	b.n	80036fc <HAL_GPIO_Init+0x228>
 80036ea:	2304      	movs	r3, #4
 80036ec:	e006      	b.n	80036fc <HAL_GPIO_Init+0x228>
 80036ee:	2303      	movs	r3, #3
 80036f0:	e004      	b.n	80036fc <HAL_GPIO_Init+0x228>
 80036f2:	2302      	movs	r3, #2
 80036f4:	e002      	b.n	80036fc <HAL_GPIO_Init+0x228>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <HAL_GPIO_Init+0x228>
 80036fa:	2300      	movs	r3, #0
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	f002 0203 	and.w	r2, r2, #3
 8003702:	0092      	lsls	r2, r2, #2
 8003704:	4093      	lsls	r3, r2
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800370c:	4935      	ldr	r1, [pc, #212]	; (80037e4 <HAL_GPIO_Init+0x310>)
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	089b      	lsrs	r3, r3, #2
 8003712:	3302      	adds	r3, #2
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800371a:	4b3b      	ldr	r3, [pc, #236]	; (8003808 <HAL_GPIO_Init+0x334>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	43db      	mvns	r3, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4013      	ands	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800373e:	4a32      	ldr	r2, [pc, #200]	; (8003808 <HAL_GPIO_Init+0x334>)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003744:	4b30      	ldr	r3, [pc, #192]	; (8003808 <HAL_GPIO_Init+0x334>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003768:	4a27      	ldr	r2, [pc, #156]	; (8003808 <HAL_GPIO_Init+0x334>)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800376e:	4b26      	ldr	r3, [pc, #152]	; (8003808 <HAL_GPIO_Init+0x334>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	43db      	mvns	r3, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4013      	ands	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003792:	4a1d      	ldr	r2, [pc, #116]	; (8003808 <HAL_GPIO_Init+0x334>)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003798:	4b1b      	ldr	r3, [pc, #108]	; (8003808 <HAL_GPIO_Init+0x334>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037bc:	4a12      	ldr	r2, [pc, #72]	; (8003808 <HAL_GPIO_Init+0x334>)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	3301      	adds	r3, #1
 80037c6:	61fb      	str	r3, [r7, #28]
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	2b0f      	cmp	r3, #15
 80037cc:	f67f ae90 	bls.w	80034f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037d0:	bf00      	nop
 80037d2:	bf00      	nop
 80037d4:	3724      	adds	r7, #36	; 0x24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40013800 	.word	0x40013800
 80037e8:	40020000 	.word	0x40020000
 80037ec:	40020400 	.word	0x40020400
 80037f0:	40020800 	.word	0x40020800
 80037f4:	40020c00 	.word	0x40020c00
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40021400 	.word	0x40021400
 8003800:	40021800 	.word	0x40021800
 8003804:	40021c00 	.word	0x40021c00
 8003808:	40013c00 	.word	0x40013c00

0800380c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	807b      	strh	r3, [r7, #2]
 8003818:	4613      	mov	r3, r2
 800381a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800381c:	787b      	ldrb	r3, [r7, #1]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003822:	887a      	ldrh	r2, [r7, #2]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003828:	e003      	b.n	8003832 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800382a:	887b      	ldrh	r3, [r7, #2]
 800382c:	041a      	lsls	r2, r3, #16
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	619a      	str	r2, [r3, #24]
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800383e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003840:	b08f      	sub	sp, #60	; 0x3c
 8003842:	af0a      	add	r7, sp, #40	; 0x28
 8003844:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e054      	b.n	80038fa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d106      	bne.n	8003870 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f00f fc14 	bl	8013098 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2203      	movs	r2, #3
 8003874:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d102      	bne.n	800388a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f004 fc10 	bl	80080b4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	603b      	str	r3, [r7, #0]
 800389a:	687e      	ldr	r6, [r7, #4]
 800389c:	466d      	mov	r5, sp
 800389e:	f106 0410 	add.w	r4, r6, #16
 80038a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80038b2:	1d33      	adds	r3, r6, #4
 80038b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038b6:	6838      	ldr	r0, [r7, #0]
 80038b8:	f004 fb8a 	bl	8007fd0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2101      	movs	r1, #1
 80038c2:	4618      	mov	r0, r3
 80038c4:	f004 fc07 	bl	80080d6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	603b      	str	r3, [r7, #0]
 80038ce:	687e      	ldr	r6, [r7, #4]
 80038d0:	466d      	mov	r5, sp
 80038d2:	f106 0410 	add.w	r4, r6, #16
 80038d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80038e6:	1d33      	adds	r3, r6, #4
 80038e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038ea:	6838      	ldr	r0, [r7, #0]
 80038ec:	f004 fd90 	bl	8008410 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003902 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003902:	b590      	push	{r4, r7, lr}
 8003904:	b089      	sub	sp, #36	; 0x24
 8003906:	af04      	add	r7, sp, #16
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	4608      	mov	r0, r1
 800390c:	4611      	mov	r1, r2
 800390e:	461a      	mov	r2, r3
 8003910:	4603      	mov	r3, r0
 8003912:	70fb      	strb	r3, [r7, #3]
 8003914:	460b      	mov	r3, r1
 8003916:	70bb      	strb	r3, [r7, #2]
 8003918:	4613      	mov	r3, r2
 800391a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003922:	2b01      	cmp	r3, #1
 8003924:	d101      	bne.n	800392a <HAL_HCD_HC_Init+0x28>
 8003926:	2302      	movs	r3, #2
 8003928:	e076      	b.n	8003a18 <HAL_HCD_HC_Init+0x116>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003932:	78fb      	ldrb	r3, [r7, #3]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	212c      	movs	r1, #44	; 0x2c
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	4413      	add	r3, r2
 800393e:	333d      	adds	r3, #61	; 0x3d
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003944:	78fb      	ldrb	r3, [r7, #3]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	212c      	movs	r1, #44	; 0x2c
 800394a:	fb01 f303 	mul.w	r3, r1, r3
 800394e:	4413      	add	r3, r2
 8003950:	3338      	adds	r3, #56	; 0x38
 8003952:	787a      	ldrb	r2, [r7, #1]
 8003954:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003956:	78fb      	ldrb	r3, [r7, #3]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	212c      	movs	r1, #44	; 0x2c
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	4413      	add	r3, r2
 8003962:	3340      	adds	r3, #64	; 0x40
 8003964:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003966:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003968:	78fb      	ldrb	r3, [r7, #3]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	212c      	movs	r1, #44	; 0x2c
 800396e:	fb01 f303 	mul.w	r3, r1, r3
 8003972:	4413      	add	r3, r2
 8003974:	3339      	adds	r3, #57	; 0x39
 8003976:	78fa      	ldrb	r2, [r7, #3]
 8003978:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	212c      	movs	r1, #44	; 0x2c
 8003980:	fb01 f303 	mul.w	r3, r1, r3
 8003984:	4413      	add	r3, r2
 8003986:	333f      	adds	r3, #63	; 0x3f
 8003988:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800398c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800398e:	78fb      	ldrb	r3, [r7, #3]
 8003990:	78ba      	ldrb	r2, [r7, #2]
 8003992:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003996:	b2d0      	uxtb	r0, r2
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	212c      	movs	r1, #44	; 0x2c
 800399c:	fb01 f303 	mul.w	r3, r1, r3
 80039a0:	4413      	add	r3, r2
 80039a2:	333a      	adds	r3, #58	; 0x3a
 80039a4:	4602      	mov	r2, r0
 80039a6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80039a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	da09      	bge.n	80039c4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	212c      	movs	r1, #44	; 0x2c
 80039b6:	fb01 f303 	mul.w	r3, r1, r3
 80039ba:	4413      	add	r3, r2
 80039bc:	333b      	adds	r3, #59	; 0x3b
 80039be:	2201      	movs	r2, #1
 80039c0:	701a      	strb	r2, [r3, #0]
 80039c2:	e008      	b.n	80039d6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80039c4:	78fb      	ldrb	r3, [r7, #3]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	212c      	movs	r1, #44	; 0x2c
 80039ca:	fb01 f303 	mul.w	r3, r1, r3
 80039ce:	4413      	add	r3, r2
 80039d0:	333b      	adds	r3, #59	; 0x3b
 80039d2:	2200      	movs	r2, #0
 80039d4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	212c      	movs	r1, #44	; 0x2c
 80039dc:	fb01 f303 	mul.w	r3, r1, r3
 80039e0:	4413      	add	r3, r2
 80039e2:	333c      	adds	r3, #60	; 0x3c
 80039e4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80039e8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	787c      	ldrb	r4, [r7, #1]
 80039f0:	78ba      	ldrb	r2, [r7, #2]
 80039f2:	78f9      	ldrb	r1, [r7, #3]
 80039f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80039f6:	9302      	str	r3, [sp, #8]
 80039f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80039fc:	9301      	str	r3, [sp, #4]
 80039fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	4623      	mov	r3, r4
 8003a06:	f004 fe89 	bl	800871c <USB_HC_Init>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd90      	pop	{r4, r7, pc}

08003a20 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_HCD_HC_Halt+0x1e>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e00f      	b.n	8003a5e <HAL_HCD_HC_Halt+0x3e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	78fa      	ldrb	r2, [r7, #3]
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f005 f8d9 	bl	8008c06 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	4608      	mov	r0, r1
 8003a72:	4611      	mov	r1, r2
 8003a74:	461a      	mov	r2, r3
 8003a76:	4603      	mov	r3, r0
 8003a78:	70fb      	strb	r3, [r7, #3]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	70bb      	strb	r3, [r7, #2]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003a82:	78fb      	ldrb	r3, [r7, #3]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	212c      	movs	r1, #44	; 0x2c
 8003a88:	fb01 f303 	mul.w	r3, r1, r3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	333b      	adds	r3, #59	; 0x3b
 8003a90:	78ba      	ldrb	r2, [r7, #2]
 8003a92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	212c      	movs	r1, #44	; 0x2c
 8003a9a:	fb01 f303 	mul.w	r3, r1, r3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	333f      	adds	r3, #63	; 0x3f
 8003aa2:	787a      	ldrb	r2, [r7, #1]
 8003aa4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003aa6:	7c3b      	ldrb	r3, [r7, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d112      	bne.n	8003ad2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	212c      	movs	r1, #44	; 0x2c
 8003ab2:	fb01 f303 	mul.w	r3, r1, r3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3342      	adds	r3, #66	; 0x42
 8003aba:	2203      	movs	r2, #3
 8003abc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003abe:	78fb      	ldrb	r3, [r7, #3]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	212c      	movs	r1, #44	; 0x2c
 8003ac4:	fb01 f303 	mul.w	r3, r1, r3
 8003ac8:	4413      	add	r3, r2
 8003aca:	333d      	adds	r3, #61	; 0x3d
 8003acc:	7f3a      	ldrb	r2, [r7, #28]
 8003ace:	701a      	strb	r2, [r3, #0]
 8003ad0:	e008      	b.n	8003ae4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ad2:	78fb      	ldrb	r3, [r7, #3]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	212c      	movs	r1, #44	; 0x2c
 8003ad8:	fb01 f303 	mul.w	r3, r1, r3
 8003adc:	4413      	add	r3, r2
 8003ade:	3342      	adds	r3, #66	; 0x42
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003ae4:	787b      	ldrb	r3, [r7, #1]
 8003ae6:	2b03      	cmp	r3, #3
 8003ae8:	f200 80c6 	bhi.w	8003c78 <HAL_HCD_HC_SubmitRequest+0x210>
 8003aec:	a201      	add	r2, pc, #4	; (adr r2, 8003af4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af2:	bf00      	nop
 8003af4:	08003b05 	.word	0x08003b05
 8003af8:	08003c65 	.word	0x08003c65
 8003afc:	08003b69 	.word	0x08003b69
 8003b00:	08003be7 	.word	0x08003be7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003b04:	7c3b      	ldrb	r3, [r7, #16]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	f040 80b8 	bne.w	8003c7c <HAL_HCD_HC_SubmitRequest+0x214>
 8003b0c:	78bb      	ldrb	r3, [r7, #2]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f040 80b4 	bne.w	8003c7c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003b14:	8b3b      	ldrh	r3, [r7, #24]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d108      	bne.n	8003b2c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003b1a:	78fb      	ldrb	r3, [r7, #3]
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	212c      	movs	r1, #44	; 0x2c
 8003b20:	fb01 f303 	mul.w	r3, r1, r3
 8003b24:	4413      	add	r3, r2
 8003b26:	3355      	adds	r3, #85	; 0x55
 8003b28:	2201      	movs	r2, #1
 8003b2a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	212c      	movs	r1, #44	; 0x2c
 8003b32:	fb01 f303 	mul.w	r3, r1, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	3355      	adds	r3, #85	; 0x55
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d109      	bne.n	8003b54 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	212c      	movs	r1, #44	; 0x2c
 8003b46:	fb01 f303 	mul.w	r3, r1, r3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	3342      	adds	r3, #66	; 0x42
 8003b4e:	2200      	movs	r2, #0
 8003b50:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003b52:	e093      	b.n	8003c7c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	212c      	movs	r1, #44	; 0x2c
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	3342      	adds	r3, #66	; 0x42
 8003b62:	2202      	movs	r2, #2
 8003b64:	701a      	strb	r2, [r3, #0]
      break;
 8003b66:	e089      	b.n	8003c7c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003b68:	78bb      	ldrb	r3, [r7, #2]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d11d      	bne.n	8003baa <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b6e:	78fb      	ldrb	r3, [r7, #3]
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	212c      	movs	r1, #44	; 0x2c
 8003b74:	fb01 f303 	mul.w	r3, r1, r3
 8003b78:	4413      	add	r3, r2
 8003b7a:	3355      	adds	r3, #85	; 0x55
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d109      	bne.n	8003b96 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b82:	78fb      	ldrb	r3, [r7, #3]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	212c      	movs	r1, #44	; 0x2c
 8003b88:	fb01 f303 	mul.w	r3, r1, r3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3342      	adds	r3, #66	; 0x42
 8003b90:	2200      	movs	r2, #0
 8003b92:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003b94:	e073      	b.n	8003c7e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b96:	78fb      	ldrb	r3, [r7, #3]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	212c      	movs	r1, #44	; 0x2c
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3342      	adds	r3, #66	; 0x42
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	701a      	strb	r2, [r3, #0]
      break;
 8003ba8:	e069      	b.n	8003c7e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003baa:	78fb      	ldrb	r3, [r7, #3]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	212c      	movs	r1, #44	; 0x2c
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3354      	adds	r3, #84	; 0x54
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	212c      	movs	r1, #44	; 0x2c
 8003bc4:	fb01 f303 	mul.w	r3, r1, r3
 8003bc8:	4413      	add	r3, r2
 8003bca:	3342      	adds	r3, #66	; 0x42
 8003bcc:	2200      	movs	r2, #0
 8003bce:	701a      	strb	r2, [r3, #0]
      break;
 8003bd0:	e055      	b.n	8003c7e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	212c      	movs	r1, #44	; 0x2c
 8003bd8:	fb01 f303 	mul.w	r3, r1, r3
 8003bdc:	4413      	add	r3, r2
 8003bde:	3342      	adds	r3, #66	; 0x42
 8003be0:	2202      	movs	r2, #2
 8003be2:	701a      	strb	r2, [r3, #0]
      break;
 8003be4:	e04b      	b.n	8003c7e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003be6:	78bb      	ldrb	r3, [r7, #2]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d11d      	bne.n	8003c28 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	212c      	movs	r1, #44	; 0x2c
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3355      	adds	r3, #85	; 0x55
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d109      	bne.n	8003c14 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	212c      	movs	r1, #44	; 0x2c
 8003c06:	fb01 f303 	mul.w	r3, r1, r3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	3342      	adds	r3, #66	; 0x42
 8003c0e:	2200      	movs	r2, #0
 8003c10:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003c12:	e034      	b.n	8003c7e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	212c      	movs	r1, #44	; 0x2c
 8003c1a:	fb01 f303 	mul.w	r3, r1, r3
 8003c1e:	4413      	add	r3, r2
 8003c20:	3342      	adds	r3, #66	; 0x42
 8003c22:	2202      	movs	r2, #2
 8003c24:	701a      	strb	r2, [r3, #0]
      break;
 8003c26:	e02a      	b.n	8003c7e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003c28:	78fb      	ldrb	r3, [r7, #3]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	212c      	movs	r1, #44	; 0x2c
 8003c2e:	fb01 f303 	mul.w	r3, r1, r3
 8003c32:	4413      	add	r3, r2
 8003c34:	3354      	adds	r3, #84	; 0x54
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d109      	bne.n	8003c50 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c3c:	78fb      	ldrb	r3, [r7, #3]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	212c      	movs	r1, #44	; 0x2c
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	3342      	adds	r3, #66	; 0x42
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	701a      	strb	r2, [r3, #0]
      break;
 8003c4e:	e016      	b.n	8003c7e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	212c      	movs	r1, #44	; 0x2c
 8003c56:	fb01 f303 	mul.w	r3, r1, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3342      	adds	r3, #66	; 0x42
 8003c5e:	2202      	movs	r2, #2
 8003c60:	701a      	strb	r2, [r3, #0]
      break;
 8003c62:	e00c      	b.n	8003c7e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	212c      	movs	r1, #44	; 0x2c
 8003c6a:	fb01 f303 	mul.w	r3, r1, r3
 8003c6e:	4413      	add	r3, r2
 8003c70:	3342      	adds	r3, #66	; 0x42
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
      break;
 8003c76:	e002      	b.n	8003c7e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003c78:	bf00      	nop
 8003c7a:	e000      	b.n	8003c7e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003c7c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003c7e:	78fb      	ldrb	r3, [r7, #3]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	212c      	movs	r1, #44	; 0x2c
 8003c84:	fb01 f303 	mul.w	r3, r1, r3
 8003c88:	4413      	add	r3, r2
 8003c8a:	3344      	adds	r3, #68	; 0x44
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	8b3a      	ldrh	r2, [r7, #24]
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	202c      	movs	r0, #44	; 0x2c
 8003c98:	fb00 f303 	mul.w	r3, r0, r3
 8003c9c:	440b      	add	r3, r1
 8003c9e:	334c      	adds	r3, #76	; 0x4c
 8003ca0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	212c      	movs	r1, #44	; 0x2c
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	4413      	add	r3, r2
 8003cae:	3360      	adds	r3, #96	; 0x60
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	212c      	movs	r1, #44	; 0x2c
 8003cba:	fb01 f303 	mul.w	r3, r1, r3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	3350      	adds	r3, #80	; 0x50
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003cc6:	78fb      	ldrb	r3, [r7, #3]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	212c      	movs	r1, #44	; 0x2c
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	3339      	adds	r3, #57	; 0x39
 8003cd4:	78fa      	ldrb	r2, [r7, #3]
 8003cd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	212c      	movs	r1, #44	; 0x2c
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3361      	adds	r3, #97	; 0x61
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	78fb      	ldrb	r3, [r7, #3]
 8003cf0:	222c      	movs	r2, #44	; 0x2c
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
 8003cf6:	3338      	adds	r3, #56	; 0x38
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	18d1      	adds	r1, r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	f004 fe2c 	bl	8008960 <USB_HC_StartXfer>
 8003d08:	4603      	mov	r3, r0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop

08003d14 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f004 fb2d 	bl	800838a <USB_GetMode>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	f040 80f6 	bne.w	8003f24 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f004 fb11 	bl	8008364 <USB_ReadInterrupts>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 80ec 	beq.w	8003f22 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f004 fb08 	bl	8008364 <USB_ReadInterrupts>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d5e:	d104      	bne.n	8003d6a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003d68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f004 faf8 	bl	8008364 <USB_ReadInterrupts>
 8003d74:	4603      	mov	r3, r0
 8003d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d7e:	d104      	bne.n	8003d8a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f004 fae8 	bl	8008364 <USB_ReadInterrupts>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d9e:	d104      	bne.n	8003daa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003da8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f004 fad8 	bl	8008364 <USB_ReadInterrupts>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d103      	bne.n	8003dc6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f004 faca 	bl	8008364 <USB_ReadInterrupts>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dda:	d11c      	bne.n	8003e16 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003de4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10f      	bne.n	8003e16 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003df6:	2110      	movs	r1, #16
 8003df8:	6938      	ldr	r0, [r7, #16]
 8003dfa:	f004 f9b9 	bl	8008170 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003dfe:	6938      	ldr	r0, [r7, #16]
 8003e00:	f004 f9ea 	bl	80081d8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2101      	movs	r1, #1
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f004 fbc0 	bl	8008590 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f00f f9b1 	bl	8013178 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f004 faa2 	bl	8008364 <USB_ReadInterrupts>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e2a:	d102      	bne.n	8003e32 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f001 f89e 	bl	8004f6e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f004 fa94 	bl	8008364 <USB_ReadInterrupts>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d106      	bne.n	8003e54 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f00f f97a 	bl	8013140 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2208      	movs	r2, #8
 8003e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f004 fa83 	bl	8008364 <USB_ReadInterrupts>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b10      	cmp	r3, #16
 8003e66:	d101      	bne.n	8003e6c <HAL_HCD_IRQHandler+0x158>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e000      	b.n	8003e6e <HAL_HCD_IRQHandler+0x15a>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d012      	beq.n	8003e98 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	699a      	ldr	r2, [r3, #24]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0210 	bic.w	r2, r2, #16
 8003e80:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 ffa1 	bl	8004dca <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0210 	orr.w	r2, r2, #16
 8003e96:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f004 fa61 	bl	8008364 <USB_ReadInterrupts>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eac:	d13a      	bne.n	8003f24 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f004 fe96 	bl	8008be4 <USB_HC_ReadInterrupt>
 8003eb8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]
 8003ebe:	e025      	b.n	8003f0c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d018      	beq.n	8003f06 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eea:	d106      	bne.n	8003efa <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f8ab 	bl	800404e <HCD_HC_IN_IRQHandler>
 8003ef8:	e005      	b.n	8003f06 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	4619      	mov	r1, r3
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 fbf9 	bl	80046f8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d3d4      	bcc.n	8003ec0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f1e:	615a      	str	r2, [r3, #20]
 8003f20:	e000      	b.n	8003f24 <HAL_HCD_IRQHandler+0x210>
      return;
 8003f22:	bf00      	nop
    }
  }
}
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <HAL_HCD_Start+0x16>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e013      	b.n	8003f68 <HAL_HCD_Start+0x3e>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f004 fb82 	bl	8008658 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f004 f89a 	bl	8008092 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <HAL_HCD_Stop+0x16>
 8003f82:	2302      	movs	r3, #2
 8003f84:	e00d      	b.n	8003fa2 <HAL_HCD_Stop+0x32>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f004 ff70 	bl	8008e78 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f004 fb24 	bl	8008604 <USB_ResetPort>
 8003fbc:	4603      	mov	r3, r0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003fd2:	78fb      	ldrb	r3, [r7, #3]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	212c      	movs	r1, #44	; 0x2c
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	4413      	add	r3, r2
 8003fde:	3360      	adds	r3, #96	; 0x60
 8003fe0:	781b      	ldrb	r3, [r3, #0]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003ffa:	78fb      	ldrb	r3, [r7, #3]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	212c      	movs	r1, #44	; 0x2c
 8004000:	fb01 f303 	mul.w	r3, r1, r3
 8004004:	4413      	add	r3, r2
 8004006:	3350      	adds	r3, #80	; 0x50
 8004008:	681b      	ldr	r3, [r3, #0]
}
 800400a:	4618      	mov	r0, r3
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b082      	sub	sp, #8
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f004 fb68 	bl	80086f8 <USB_GetCurrentFrame>
 8004028:	4603      	mov	r3, r0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f004 fb43 	bl	80086ca <USB_GetHostSpeed>
 8004044:	4603      	mov	r3, r0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b086      	sub	sp, #24
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	460b      	mov	r3, r1
 8004058:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4413      	add	r3, r2
 8004070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b04      	cmp	r3, #4
 800407c:	d11a      	bne.n	80040b4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4413      	add	r3, r2
 8004086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408a:	461a      	mov	r2, r3
 800408c:	2304      	movs	r3, #4
 800408e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	212c      	movs	r1, #44	; 0x2c
 8004096:	fb01 f303 	mul.w	r3, r1, r3
 800409a:	4413      	add	r3, r2
 800409c:	3361      	adds	r3, #97	; 0x61
 800409e:	2206      	movs	r2, #6
 80040a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	4611      	mov	r1, r2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f004 fdaa 	bl	8008c06 <USB_HC_Halt>
 80040b2:	e0af      	b.n	8004214 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ca:	d11b      	bne.n	8004104 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d8:	461a      	mov	r2, r3
 80040da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	212c      	movs	r1, #44	; 0x2c
 80040e6:	fb01 f303 	mul.w	r3, r1, r3
 80040ea:	4413      	add	r3, r2
 80040ec:	3361      	adds	r3, #97	; 0x61
 80040ee:	2207      	movs	r2, #7
 80040f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	4611      	mov	r1, r2
 80040fc:	4618      	mov	r0, r3
 80040fe:	f004 fd82 	bl	8008c06 <USB_HC_Halt>
 8004102:	e087      	b.n	8004214 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4413      	add	r3, r2
 800410c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 0320 	and.w	r3, r3, #32
 8004116:	2b20      	cmp	r3, #32
 8004118:	d109      	bne.n	800412e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4413      	add	r3, r2
 8004122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004126:	461a      	mov	r2, r3
 8004128:	2320      	movs	r3, #32
 800412a:	6093      	str	r3, [r2, #8]
 800412c:	e072      	b.n	8004214 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	4413      	add	r3, r2
 8004136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b08      	cmp	r3, #8
 8004142:	d11a      	bne.n	800417a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4413      	add	r3, r2
 800414c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004150:	461a      	mov	r2, r3
 8004152:	2308      	movs	r3, #8
 8004154:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	212c      	movs	r1, #44	; 0x2c
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	4413      	add	r3, r2
 8004162:	3361      	adds	r3, #97	; 0x61
 8004164:	2205      	movs	r2, #5
 8004166:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	4611      	mov	r1, r2
 8004172:	4618      	mov	r0, r3
 8004174:	f004 fd47 	bl	8008c06 <USB_HC_Halt>
 8004178:	e04c      	b.n	8004214 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	4413      	add	r3, r2
 8004182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004190:	d11b      	bne.n	80041ca <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	4413      	add	r3, r2
 800419a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800419e:	461a      	mov	r2, r3
 80041a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	212c      	movs	r1, #44	; 0x2c
 80041ac:	fb01 f303 	mul.w	r3, r1, r3
 80041b0:	4413      	add	r3, r2
 80041b2:	3361      	adds	r3, #97	; 0x61
 80041b4:	2208      	movs	r2, #8
 80041b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	4611      	mov	r1, r2
 80041c2:	4618      	mov	r0, r3
 80041c4:	f004 fd1f 	bl	8008c06 <USB_HC_Halt>
 80041c8:	e024      	b.n	8004214 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041dc:	2b80      	cmp	r3, #128	; 0x80
 80041de:	d119      	bne.n	8004214 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ec:	461a      	mov	r2, r3
 80041ee:	2380      	movs	r3, #128	; 0x80
 80041f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	212c      	movs	r1, #44	; 0x2c
 80041f8:	fb01 f303 	mul.w	r3, r1, r3
 80041fc:	4413      	add	r3, r2
 80041fe:	3361      	adds	r3, #97	; 0x61
 8004200:	2206      	movs	r2, #6
 8004202:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	4611      	mov	r1, r2
 800420e:	4618      	mov	r0, r3
 8004210:	f004 fcf9 	bl	8008c06 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	4413      	add	r3, r2
 800421c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800422a:	d112      	bne.n	8004252 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	4611      	mov	r1, r2
 8004236:	4618      	mov	r0, r3
 8004238:	f004 fce5 	bl	8008c06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4413      	add	r3, r2
 8004244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004248:	461a      	mov	r2, r3
 800424a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800424e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004250:	e24e      	b.n	80046f0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	4413      	add	r3, r2
 800425a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b01      	cmp	r3, #1
 8004266:	f040 80df 	bne.w	8004428 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d019      	beq.n	80042a6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	212c      	movs	r1, #44	; 0x2c
 8004278:	fb01 f303 	mul.w	r3, r1, r3
 800427c:	4413      	add	r3, r2
 800427e:	3348      	adds	r3, #72	; 0x48
 8004280:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	0159      	lsls	r1, r3, #5
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	440b      	add	r3, r1
 800428a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004294:	1ad2      	subs	r2, r2, r3
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	202c      	movs	r0, #44	; 0x2c
 800429c:	fb00 f303 	mul.w	r3, r0, r3
 80042a0:	440b      	add	r3, r1
 80042a2:	3350      	adds	r3, #80	; 0x50
 80042a4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	212c      	movs	r1, #44	; 0x2c
 80042ac:	fb01 f303 	mul.w	r3, r1, r3
 80042b0:	4413      	add	r3, r2
 80042b2:	3361      	adds	r3, #97	; 0x61
 80042b4:	2201      	movs	r2, #1
 80042b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	212c      	movs	r1, #44	; 0x2c
 80042be:	fb01 f303 	mul.w	r3, r1, r3
 80042c2:	4413      	add	r3, r2
 80042c4:	335c      	adds	r3, #92	; 0x5c
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d6:	461a      	mov	r2, r3
 80042d8:	2301      	movs	r3, #1
 80042da:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	212c      	movs	r1, #44	; 0x2c
 80042e2:	fb01 f303 	mul.w	r3, r1, r3
 80042e6:	4413      	add	r3, r2
 80042e8:	333f      	adds	r3, #63	; 0x3f
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d009      	beq.n	8004304 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	212c      	movs	r1, #44	; 0x2c
 80042f6:	fb01 f303 	mul.w	r3, r1, r3
 80042fa:	4413      	add	r3, r2
 80042fc:	333f      	adds	r3, #63	; 0x3f
 80042fe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004300:	2b02      	cmp	r3, #2
 8004302:	d111      	bne.n	8004328 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	4611      	mov	r1, r2
 800430e:	4618      	mov	r0, r3
 8004310:	f004 fc79 	bl	8008c06 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4413      	add	r3, r2
 800431c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004320:	461a      	mov	r2, r3
 8004322:	2310      	movs	r3, #16
 8004324:	6093      	str	r3, [r2, #8]
 8004326:	e03a      	b.n	800439e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	212c      	movs	r1, #44	; 0x2c
 800432e:	fb01 f303 	mul.w	r3, r1, r3
 8004332:	4413      	add	r3, r2
 8004334:	333f      	adds	r3, #63	; 0x3f
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2b03      	cmp	r3, #3
 800433a:	d009      	beq.n	8004350 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	212c      	movs	r1, #44	; 0x2c
 8004342:	fb01 f303 	mul.w	r3, r1, r3
 8004346:	4413      	add	r3, r2
 8004348:	333f      	adds	r3, #63	; 0x3f
 800434a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800434c:	2b01      	cmp	r3, #1
 800434e:	d126      	bne.n	800439e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4413      	add	r3, r2
 8004358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	0151      	lsls	r1, r2, #5
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	440a      	add	r2, r1
 8004366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800436a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800436e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	212c      	movs	r1, #44	; 0x2c
 8004376:	fb01 f303 	mul.w	r3, r1, r3
 800437a:	4413      	add	r3, r2
 800437c:	3360      	adds	r3, #96	; 0x60
 800437e:	2201      	movs	r2, #1
 8004380:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	b2d9      	uxtb	r1, r3
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	202c      	movs	r0, #44	; 0x2c
 800438c:	fb00 f303 	mul.w	r3, r0, r3
 8004390:	4413      	add	r3, r2
 8004392:	3360      	adds	r3, #96	; 0x60
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	461a      	mov	r2, r3
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f00e fefb 	bl	8013194 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d12b      	bne.n	80043fe <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	212c      	movs	r1, #44	; 0x2c
 80043ac:	fb01 f303 	mul.w	r3, r1, r3
 80043b0:	4413      	add	r3, r2
 80043b2:	3348      	adds	r3, #72	; 0x48
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	202c      	movs	r0, #44	; 0x2c
 80043bc:	fb00 f202 	mul.w	r2, r0, r2
 80043c0:	440a      	add	r2, r1
 80043c2:	3240      	adds	r2, #64	; 0x40
 80043c4:	8812      	ldrh	r2, [r2, #0]
 80043c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 818e 	beq.w	80046f0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	212c      	movs	r1, #44	; 0x2c
 80043da:	fb01 f303 	mul.w	r3, r1, r3
 80043de:	4413      	add	r3, r2
 80043e0:	3354      	adds	r3, #84	; 0x54
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	f083 0301 	eor.w	r3, r3, #1
 80043e8:	b2d8      	uxtb	r0, r3
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	212c      	movs	r1, #44	; 0x2c
 80043f0:	fb01 f303 	mul.w	r3, r1, r3
 80043f4:	4413      	add	r3, r2
 80043f6:	3354      	adds	r3, #84	; 0x54
 80043f8:	4602      	mov	r2, r0
 80043fa:	701a      	strb	r2, [r3, #0]
}
 80043fc:	e178      	b.n	80046f0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	212c      	movs	r1, #44	; 0x2c
 8004404:	fb01 f303 	mul.w	r3, r1, r3
 8004408:	4413      	add	r3, r2
 800440a:	3354      	adds	r3, #84	; 0x54
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	f083 0301 	eor.w	r3, r3, #1
 8004412:	b2d8      	uxtb	r0, r3
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	212c      	movs	r1, #44	; 0x2c
 800441a:	fb01 f303 	mul.w	r3, r1, r3
 800441e:	4413      	add	r3, r2
 8004420:	3354      	adds	r3, #84	; 0x54
 8004422:	4602      	mov	r2, r0
 8004424:	701a      	strb	r2, [r3, #0]
}
 8004426:	e163      	b.n	80046f0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	4413      	add	r3, r2
 8004430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b02      	cmp	r3, #2
 800443c:	f040 80f6 	bne.w	800462c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	212c      	movs	r1, #44	; 0x2c
 8004446:	fb01 f303 	mul.w	r3, r1, r3
 800444a:	4413      	add	r3, r2
 800444c:	3361      	adds	r3, #97	; 0x61
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d109      	bne.n	8004468 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	212c      	movs	r1, #44	; 0x2c
 800445a:	fb01 f303 	mul.w	r3, r1, r3
 800445e:	4413      	add	r3, r2
 8004460:	3360      	adds	r3, #96	; 0x60
 8004462:	2201      	movs	r2, #1
 8004464:	701a      	strb	r2, [r3, #0]
 8004466:	e0c9      	b.n	80045fc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	212c      	movs	r1, #44	; 0x2c
 800446e:	fb01 f303 	mul.w	r3, r1, r3
 8004472:	4413      	add	r3, r2
 8004474:	3361      	adds	r3, #97	; 0x61
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b05      	cmp	r3, #5
 800447a:	d109      	bne.n	8004490 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	212c      	movs	r1, #44	; 0x2c
 8004482:	fb01 f303 	mul.w	r3, r1, r3
 8004486:	4413      	add	r3, r2
 8004488:	3360      	adds	r3, #96	; 0x60
 800448a:	2205      	movs	r2, #5
 800448c:	701a      	strb	r2, [r3, #0]
 800448e:	e0b5      	b.n	80045fc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	212c      	movs	r1, #44	; 0x2c
 8004496:	fb01 f303 	mul.w	r3, r1, r3
 800449a:	4413      	add	r3, r2
 800449c:	3361      	adds	r3, #97	; 0x61
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b06      	cmp	r3, #6
 80044a2:	d009      	beq.n	80044b8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	212c      	movs	r1, #44	; 0x2c
 80044aa:	fb01 f303 	mul.w	r3, r1, r3
 80044ae:	4413      	add	r3, r2
 80044b0:	3361      	adds	r3, #97	; 0x61
 80044b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d150      	bne.n	800455a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	212c      	movs	r1, #44	; 0x2c
 80044be:	fb01 f303 	mul.w	r3, r1, r3
 80044c2:	4413      	add	r3, r2
 80044c4:	335c      	adds	r3, #92	; 0x5c
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	202c      	movs	r0, #44	; 0x2c
 80044d0:	fb00 f303 	mul.w	r3, r0, r3
 80044d4:	440b      	add	r3, r1
 80044d6:	335c      	adds	r3, #92	; 0x5c
 80044d8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	212c      	movs	r1, #44	; 0x2c
 80044e0:	fb01 f303 	mul.w	r3, r1, r3
 80044e4:	4413      	add	r3, r2
 80044e6:	335c      	adds	r3, #92	; 0x5c
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d912      	bls.n	8004514 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	212c      	movs	r1, #44	; 0x2c
 80044f4:	fb01 f303 	mul.w	r3, r1, r3
 80044f8:	4413      	add	r3, r2
 80044fa:	335c      	adds	r3, #92	; 0x5c
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	212c      	movs	r1, #44	; 0x2c
 8004506:	fb01 f303 	mul.w	r3, r1, r3
 800450a:	4413      	add	r3, r2
 800450c:	3360      	adds	r3, #96	; 0x60
 800450e:	2204      	movs	r2, #4
 8004510:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004512:	e073      	b.n	80045fc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	212c      	movs	r1, #44	; 0x2c
 800451a:	fb01 f303 	mul.w	r3, r1, r3
 800451e:	4413      	add	r3, r2
 8004520:	3360      	adds	r3, #96	; 0x60
 8004522:	2202      	movs	r2, #2
 8004524:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	4413      	add	r3, r2
 800452e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800453c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004544:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	4413      	add	r3, r2
 800454e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004552:	461a      	mov	r2, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004558:	e050      	b.n	80045fc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	212c      	movs	r1, #44	; 0x2c
 8004560:	fb01 f303 	mul.w	r3, r1, r3
 8004564:	4413      	add	r3, r2
 8004566:	3361      	adds	r3, #97	; 0x61
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b03      	cmp	r3, #3
 800456c:	d122      	bne.n	80045b4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	212c      	movs	r1, #44	; 0x2c
 8004574:	fb01 f303 	mul.w	r3, r1, r3
 8004578:	4413      	add	r3, r2
 800457a:	3360      	adds	r3, #96	; 0x60
 800457c:	2202      	movs	r2, #2
 800457e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	4413      	add	r3, r2
 8004588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004596:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800459e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ac:	461a      	mov	r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	e023      	b.n	80045fc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	212c      	movs	r1, #44	; 0x2c
 80045ba:	fb01 f303 	mul.w	r3, r1, r3
 80045be:	4413      	add	r3, r2
 80045c0:	3361      	adds	r3, #97	; 0x61
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b07      	cmp	r3, #7
 80045c6:	d119      	bne.n	80045fc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	212c      	movs	r1, #44	; 0x2c
 80045ce:	fb01 f303 	mul.w	r3, r1, r3
 80045d2:	4413      	add	r3, r2
 80045d4:	335c      	adds	r3, #92	; 0x5c
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	202c      	movs	r0, #44	; 0x2c
 80045e0:	fb00 f303 	mul.w	r3, r0, r3
 80045e4:	440b      	add	r3, r1
 80045e6:	335c      	adds	r3, #92	; 0x5c
 80045e8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	212c      	movs	r1, #44	; 0x2c
 80045f0:	fb01 f303 	mul.w	r3, r1, r3
 80045f4:	4413      	add	r3, r2
 80045f6:	3360      	adds	r3, #96	; 0x60
 80045f8:	2204      	movs	r2, #4
 80045fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	4413      	add	r3, r2
 8004604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004608:	461a      	mov	r2, r3
 800460a:	2302      	movs	r3, #2
 800460c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	b2d9      	uxtb	r1, r3
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	202c      	movs	r0, #44	; 0x2c
 8004618:	fb00 f303 	mul.w	r3, r0, r3
 800461c:	4413      	add	r3, r2
 800461e:	3360      	adds	r3, #96	; 0x60
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	461a      	mov	r2, r3
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f00e fdb5 	bl	8013194 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800462a:	e061      	b.n	80046f0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4413      	add	r3, r2
 8004634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	2b10      	cmp	r3, #16
 8004640:	d156      	bne.n	80046f0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	212c      	movs	r1, #44	; 0x2c
 8004648:	fb01 f303 	mul.w	r3, r1, r3
 800464c:	4413      	add	r3, r2
 800464e:	333f      	adds	r3, #63	; 0x3f
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b03      	cmp	r3, #3
 8004654:	d111      	bne.n	800467a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	212c      	movs	r1, #44	; 0x2c
 800465c:	fb01 f303 	mul.w	r3, r1, r3
 8004660:	4413      	add	r3, r2
 8004662:	335c      	adds	r3, #92	; 0x5c
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	4611      	mov	r1, r2
 8004672:	4618      	mov	r0, r3
 8004674:	f004 fac7 	bl	8008c06 <USB_HC_Halt>
 8004678:	e031      	b.n	80046de <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	212c      	movs	r1, #44	; 0x2c
 8004680:	fb01 f303 	mul.w	r3, r1, r3
 8004684:	4413      	add	r3, r2
 8004686:	333f      	adds	r3, #63	; 0x3f
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d009      	beq.n	80046a2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	212c      	movs	r1, #44	; 0x2c
 8004694:	fb01 f303 	mul.w	r3, r1, r3
 8004698:	4413      	add	r3, r2
 800469a:	333f      	adds	r3, #63	; 0x3f
 800469c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d11d      	bne.n	80046de <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	212c      	movs	r1, #44	; 0x2c
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	4413      	add	r3, r2
 80046ae:	335c      	adds	r3, #92	; 0x5c
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d110      	bne.n	80046de <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	212c      	movs	r1, #44	; 0x2c
 80046c2:	fb01 f303 	mul.w	r3, r1, r3
 80046c6:	4413      	add	r3, r2
 80046c8:	3361      	adds	r3, #97	; 0x61
 80046ca:	2203      	movs	r2, #3
 80046cc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	4611      	mov	r1, r2
 80046d8:	4618      	mov	r0, r3
 80046da:	f004 fa94 	bl	8008c06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ea:	461a      	mov	r2, r3
 80046ec:	2310      	movs	r3, #16
 80046ee:	6093      	str	r3, [r2, #8]
}
 80046f0:	bf00      	nop
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800470e:	78fb      	ldrb	r3, [r7, #3]
 8004710:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	4413      	add	r3, r2
 800471a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b04      	cmp	r3, #4
 8004726:	d11a      	bne.n	800475e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	4413      	add	r3, r2
 8004730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004734:	461a      	mov	r2, r3
 8004736:	2304      	movs	r3, #4
 8004738:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	212c      	movs	r1, #44	; 0x2c
 8004740:	fb01 f303 	mul.w	r3, r1, r3
 8004744:	4413      	add	r3, r2
 8004746:	3361      	adds	r3, #97	; 0x61
 8004748:	2206      	movs	r2, #6
 800474a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	4611      	mov	r1, r2
 8004756:	4618      	mov	r0, r3
 8004758:	f004 fa55 	bl	8008c06 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800475c:	e331      	b.n	8004dc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	4413      	add	r3, r2
 8004766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 0320 	and.w	r3, r3, #32
 8004770:	2b20      	cmp	r3, #32
 8004772:	d12e      	bne.n	80047d2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	4413      	add	r3, r2
 800477c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004780:	461a      	mov	r2, r3
 8004782:	2320      	movs	r3, #32
 8004784:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	212c      	movs	r1, #44	; 0x2c
 800478c:	fb01 f303 	mul.w	r3, r1, r3
 8004790:	4413      	add	r3, r2
 8004792:	333d      	adds	r3, #61	; 0x3d
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b01      	cmp	r3, #1
 8004798:	f040 8313 	bne.w	8004dc2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	212c      	movs	r1, #44	; 0x2c
 80047a2:	fb01 f303 	mul.w	r3, r1, r3
 80047a6:	4413      	add	r3, r2
 80047a8:	333d      	adds	r3, #61	; 0x3d
 80047aa:	2200      	movs	r2, #0
 80047ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	212c      	movs	r1, #44	; 0x2c
 80047b4:	fb01 f303 	mul.w	r3, r1, r3
 80047b8:	4413      	add	r3, r2
 80047ba:	3360      	adds	r3, #96	; 0x60
 80047bc:	2202      	movs	r2, #2
 80047be:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	4611      	mov	r1, r2
 80047ca:	4618      	mov	r0, r3
 80047cc:	f004 fa1b 	bl	8008c06 <USB_HC_Halt>
}
 80047d0:	e2f7      	b.n	8004dc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e8:	d112      	bne.n	8004810 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f6:	461a      	mov	r2, r3
 80047f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047fc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	4611      	mov	r1, r2
 8004808:	4618      	mov	r0, r3
 800480a:	f004 f9fc 	bl	8008c06 <USB_HC_Halt>
}
 800480e:	e2d8      	b.n	8004dc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	4413      	add	r3, r2
 8004818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b01      	cmp	r3, #1
 8004824:	d140      	bne.n	80048a8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	212c      	movs	r1, #44	; 0x2c
 800482c:	fb01 f303 	mul.w	r3, r1, r3
 8004830:	4413      	add	r3, r2
 8004832:	335c      	adds	r3, #92	; 0x5c
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	4413      	add	r3, r2
 8004840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484a:	2b40      	cmp	r3, #64	; 0x40
 800484c:	d111      	bne.n	8004872 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	212c      	movs	r1, #44	; 0x2c
 8004854:	fb01 f303 	mul.w	r3, r1, r3
 8004858:	4413      	add	r3, r2
 800485a:	333d      	adds	r3, #61	; 0x3d
 800485c:	2201      	movs	r2, #1
 800485e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	4413      	add	r3, r2
 8004868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486c:	461a      	mov	r2, r3
 800486e:	2340      	movs	r3, #64	; 0x40
 8004870:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	4413      	add	r3, r2
 800487a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800487e:	461a      	mov	r2, r3
 8004880:	2301      	movs	r3, #1
 8004882:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	212c      	movs	r1, #44	; 0x2c
 800488a:	fb01 f303 	mul.w	r3, r1, r3
 800488e:	4413      	add	r3, r2
 8004890:	3361      	adds	r3, #97	; 0x61
 8004892:	2201      	movs	r2, #1
 8004894:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	b2d2      	uxtb	r2, r2
 800489e:	4611      	mov	r1, r2
 80048a0:	4618      	mov	r0, r3
 80048a2:	f004 f9b0 	bl	8008c06 <USB_HC_Halt>
}
 80048a6:	e28c      	b.n	8004dc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ba:	2b40      	cmp	r3, #64	; 0x40
 80048bc:	d12c      	bne.n	8004918 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	212c      	movs	r1, #44	; 0x2c
 80048c4:	fb01 f303 	mul.w	r3, r1, r3
 80048c8:	4413      	add	r3, r2
 80048ca:	3361      	adds	r3, #97	; 0x61
 80048cc:	2204      	movs	r2, #4
 80048ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	212c      	movs	r1, #44	; 0x2c
 80048d6:	fb01 f303 	mul.w	r3, r1, r3
 80048da:	4413      	add	r3, r2
 80048dc:	333d      	adds	r3, #61	; 0x3d
 80048de:	2201      	movs	r2, #1
 80048e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	212c      	movs	r1, #44	; 0x2c
 80048e8:	fb01 f303 	mul.w	r3, r1, r3
 80048ec:	4413      	add	r3, r2
 80048ee:	335c      	adds	r3, #92	; 0x5c
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	4611      	mov	r1, r2
 80048fe:	4618      	mov	r0, r3
 8004900:	f004 f981 	bl	8008c06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	4413      	add	r3, r2
 800490c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004910:	461a      	mov	r2, r3
 8004912:	2340      	movs	r3, #64	; 0x40
 8004914:	6093      	str	r3, [r2, #8]
}
 8004916:	e254      	b.n	8004dc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	4413      	add	r3, r2
 8004920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b08      	cmp	r3, #8
 800492c:	d11a      	bne.n	8004964 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	4413      	add	r3, r2
 8004936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800493a:	461a      	mov	r2, r3
 800493c:	2308      	movs	r3, #8
 800493e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	212c      	movs	r1, #44	; 0x2c
 8004946:	fb01 f303 	mul.w	r3, r1, r3
 800494a:	4413      	add	r3, r2
 800494c:	3361      	adds	r3, #97	; 0x61
 800494e:	2205      	movs	r2, #5
 8004950:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	4611      	mov	r1, r2
 800495c:	4618      	mov	r0, r3
 800495e:	f004 f952 	bl	8008c06 <USB_HC_Halt>
}
 8004962:	e22e      	b.n	8004dc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	4413      	add	r3, r2
 800496c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	2b10      	cmp	r3, #16
 8004978:	d140      	bne.n	80049fc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	212c      	movs	r1, #44	; 0x2c
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	4413      	add	r3, r2
 8004986:	335c      	adds	r3, #92	; 0x5c
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	212c      	movs	r1, #44	; 0x2c
 8004992:	fb01 f303 	mul.w	r3, r1, r3
 8004996:	4413      	add	r3, r2
 8004998:	3361      	adds	r3, #97	; 0x61
 800499a:	2203      	movs	r2, #3
 800499c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	212c      	movs	r1, #44	; 0x2c
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	4413      	add	r3, r2
 80049aa:	333d      	adds	r3, #61	; 0x3d
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d112      	bne.n	80049d8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	212c      	movs	r1, #44	; 0x2c
 80049b8:	fb01 f303 	mul.w	r3, r1, r3
 80049bc:	4413      	add	r3, r2
 80049be:	333c      	adds	r3, #60	; 0x3c
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d108      	bne.n	80049d8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	212c      	movs	r1, #44	; 0x2c
 80049cc:	fb01 f303 	mul.w	r3, r1, r3
 80049d0:	4413      	add	r3, r2
 80049d2:	333d      	adds	r3, #61	; 0x3d
 80049d4:	2201      	movs	r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	4611      	mov	r1, r2
 80049e2:	4618      	mov	r0, r3
 80049e4:	f004 f90f 	bl	8008c06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f4:	461a      	mov	r2, r3
 80049f6:	2310      	movs	r3, #16
 80049f8:	6093      	str	r3, [r2, #8]
}
 80049fa:	e1e2      	b.n	8004dc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0e:	2b80      	cmp	r3, #128	; 0x80
 8004a10:	d164      	bne.n	8004adc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d111      	bne.n	8004a3e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	212c      	movs	r1, #44	; 0x2c
 8004a20:	fb01 f303 	mul.w	r3, r1, r3
 8004a24:	4413      	add	r3, r2
 8004a26:	3361      	adds	r3, #97	; 0x61
 8004a28:	2206      	movs	r2, #6
 8004a2a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	4611      	mov	r1, r2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f004 f8e5 	bl	8008c06 <USB_HC_Halt>
 8004a3c:	e044      	b.n	8004ac8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	212c      	movs	r1, #44	; 0x2c
 8004a44:	fb01 f303 	mul.w	r3, r1, r3
 8004a48:	4413      	add	r3, r2
 8004a4a:	335c      	adds	r3, #92	; 0x5c
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	202c      	movs	r0, #44	; 0x2c
 8004a56:	fb00 f303 	mul.w	r3, r0, r3
 8004a5a:	440b      	add	r3, r1
 8004a5c:	335c      	adds	r3, #92	; 0x5c
 8004a5e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	212c      	movs	r1, #44	; 0x2c
 8004a66:	fb01 f303 	mul.w	r3, r1, r3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	335c      	adds	r3, #92	; 0x5c
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d920      	bls.n	8004ab6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	212c      	movs	r1, #44	; 0x2c
 8004a7a:	fb01 f303 	mul.w	r3, r1, r3
 8004a7e:	4413      	add	r3, r2
 8004a80:	335c      	adds	r3, #92	; 0x5c
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	212c      	movs	r1, #44	; 0x2c
 8004a8c:	fb01 f303 	mul.w	r3, r1, r3
 8004a90:	4413      	add	r3, r2
 8004a92:	3360      	adds	r3, #96	; 0x60
 8004a94:	2204      	movs	r2, #4
 8004a96:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	b2d9      	uxtb	r1, r3
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	202c      	movs	r0, #44	; 0x2c
 8004aa2:	fb00 f303 	mul.w	r3, r0, r3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3360      	adds	r3, #96	; 0x60
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	461a      	mov	r2, r3
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f00e fb70 	bl	8013194 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004ab4:	e008      	b.n	8004ac8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	212c      	movs	r1, #44	; 0x2c
 8004abc:	fb01 f303 	mul.w	r3, r1, r3
 8004ac0:	4413      	add	r3, r2
 8004ac2:	3360      	adds	r3, #96	; 0x60
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	2380      	movs	r3, #128	; 0x80
 8004ad8:	6093      	str	r3, [r2, #8]
}
 8004ada:	e172      	b.n	8004dc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af2:	d11b      	bne.n	8004b2c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	212c      	movs	r1, #44	; 0x2c
 8004afa:	fb01 f303 	mul.w	r3, r1, r3
 8004afe:	4413      	add	r3, r2
 8004b00:	3361      	adds	r3, #97	; 0x61
 8004b02:	2208      	movs	r2, #8
 8004b04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	4611      	mov	r1, r2
 8004b10:	4618      	mov	r0, r3
 8004b12:	f004 f878 	bl	8008c06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b22:	461a      	mov	r2, r3
 8004b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b28:	6093      	str	r3, [r2, #8]
}
 8004b2a:	e14a      	b.n	8004dc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	f040 813f 	bne.w	8004dc2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	212c      	movs	r1, #44	; 0x2c
 8004b4a:	fb01 f303 	mul.w	r3, r1, r3
 8004b4e:	4413      	add	r3, r2
 8004b50:	3361      	adds	r3, #97	; 0x61
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d17d      	bne.n	8004c54 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	212c      	movs	r1, #44	; 0x2c
 8004b5e:	fb01 f303 	mul.w	r3, r1, r3
 8004b62:	4413      	add	r3, r2
 8004b64:	3360      	adds	r3, #96	; 0x60
 8004b66:	2201      	movs	r2, #1
 8004b68:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	212c      	movs	r1, #44	; 0x2c
 8004b70:	fb01 f303 	mul.w	r3, r1, r3
 8004b74:	4413      	add	r3, r2
 8004b76:	333f      	adds	r3, #63	; 0x3f
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d00a      	beq.n	8004b94 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	212c      	movs	r1, #44	; 0x2c
 8004b84:	fb01 f303 	mul.w	r3, r1, r3
 8004b88:	4413      	add	r3, r2
 8004b8a:	333f      	adds	r3, #63	; 0x3f
 8004b8c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	f040 8100 	bne.w	8004d94 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d113      	bne.n	8004bc4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	212c      	movs	r1, #44	; 0x2c
 8004ba2:	fb01 f303 	mul.w	r3, r1, r3
 8004ba6:	4413      	add	r3, r2
 8004ba8:	3355      	adds	r3, #85	; 0x55
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	f083 0301 	eor.w	r3, r3, #1
 8004bb0:	b2d8      	uxtb	r0, r3
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	212c      	movs	r1, #44	; 0x2c
 8004bb8:	fb01 f303 	mul.w	r3, r1, r3
 8004bbc:	4413      	add	r3, r2
 8004bbe:	3355      	adds	r3, #85	; 0x55
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	f040 80e3 	bne.w	8004d94 <HCD_HC_OUT_IRQHandler+0x69c>
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	212c      	movs	r1, #44	; 0x2c
 8004bd4:	fb01 f303 	mul.w	r3, r1, r3
 8004bd8:	4413      	add	r3, r2
 8004bda:	334c      	adds	r3, #76	; 0x4c
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 80d8 	beq.w	8004d94 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	212c      	movs	r1, #44	; 0x2c
 8004bea:	fb01 f303 	mul.w	r3, r1, r3
 8004bee:	4413      	add	r3, r2
 8004bf0:	334c      	adds	r3, #76	; 0x4c
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	202c      	movs	r0, #44	; 0x2c
 8004bfa:	fb00 f202 	mul.w	r2, r0, r2
 8004bfe:	440a      	add	r2, r1
 8004c00:	3240      	adds	r2, #64	; 0x40
 8004c02:	8812      	ldrh	r2, [r2, #0]
 8004c04:	4413      	add	r3, r2
 8004c06:	3b01      	subs	r3, #1
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	202c      	movs	r0, #44	; 0x2c
 8004c0e:	fb00 f202 	mul.w	r2, r0, r2
 8004c12:	440a      	add	r2, r1
 8004c14:	3240      	adds	r2, #64	; 0x40
 8004c16:	8812      	ldrh	r2, [r2, #0]
 8004c18:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 80b5 	beq.w	8004d94 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	212c      	movs	r1, #44	; 0x2c
 8004c30:	fb01 f303 	mul.w	r3, r1, r3
 8004c34:	4413      	add	r3, r2
 8004c36:	3355      	adds	r3, #85	; 0x55
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	f083 0301 	eor.w	r3, r3, #1
 8004c3e:	b2d8      	uxtb	r0, r3
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	212c      	movs	r1, #44	; 0x2c
 8004c46:	fb01 f303 	mul.w	r3, r1, r3
 8004c4a:	4413      	add	r3, r2
 8004c4c:	3355      	adds	r3, #85	; 0x55
 8004c4e:	4602      	mov	r2, r0
 8004c50:	701a      	strb	r2, [r3, #0]
 8004c52:	e09f      	b.n	8004d94 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	212c      	movs	r1, #44	; 0x2c
 8004c5a:	fb01 f303 	mul.w	r3, r1, r3
 8004c5e:	4413      	add	r3, r2
 8004c60:	3361      	adds	r3, #97	; 0x61
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	d109      	bne.n	8004c7c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	212c      	movs	r1, #44	; 0x2c
 8004c6e:	fb01 f303 	mul.w	r3, r1, r3
 8004c72:	4413      	add	r3, r2
 8004c74:	3360      	adds	r3, #96	; 0x60
 8004c76:	2202      	movs	r2, #2
 8004c78:	701a      	strb	r2, [r3, #0]
 8004c7a:	e08b      	b.n	8004d94 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	212c      	movs	r1, #44	; 0x2c
 8004c82:	fb01 f303 	mul.w	r3, r1, r3
 8004c86:	4413      	add	r3, r2
 8004c88:	3361      	adds	r3, #97	; 0x61
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d109      	bne.n	8004ca4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	212c      	movs	r1, #44	; 0x2c
 8004c96:	fb01 f303 	mul.w	r3, r1, r3
 8004c9a:	4413      	add	r3, r2
 8004c9c:	3360      	adds	r3, #96	; 0x60
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	e077      	b.n	8004d94 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	212c      	movs	r1, #44	; 0x2c
 8004caa:	fb01 f303 	mul.w	r3, r1, r3
 8004cae:	4413      	add	r3, r2
 8004cb0:	3361      	adds	r3, #97	; 0x61
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b05      	cmp	r3, #5
 8004cb6:	d109      	bne.n	8004ccc <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	212c      	movs	r1, #44	; 0x2c
 8004cbe:	fb01 f303 	mul.w	r3, r1, r3
 8004cc2:	4413      	add	r3, r2
 8004cc4:	3360      	adds	r3, #96	; 0x60
 8004cc6:	2205      	movs	r2, #5
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	e063      	b.n	8004d94 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	212c      	movs	r1, #44	; 0x2c
 8004cd2:	fb01 f303 	mul.w	r3, r1, r3
 8004cd6:	4413      	add	r3, r2
 8004cd8:	3361      	adds	r3, #97	; 0x61
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b06      	cmp	r3, #6
 8004cde:	d009      	beq.n	8004cf4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	212c      	movs	r1, #44	; 0x2c
 8004ce6:	fb01 f303 	mul.w	r3, r1, r3
 8004cea:	4413      	add	r3, r2
 8004cec:	3361      	adds	r3, #97	; 0x61
 8004cee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d14f      	bne.n	8004d94 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	212c      	movs	r1, #44	; 0x2c
 8004cfa:	fb01 f303 	mul.w	r3, r1, r3
 8004cfe:	4413      	add	r3, r2
 8004d00:	335c      	adds	r3, #92	; 0x5c
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	202c      	movs	r0, #44	; 0x2c
 8004d0c:	fb00 f303 	mul.w	r3, r0, r3
 8004d10:	440b      	add	r3, r1
 8004d12:	335c      	adds	r3, #92	; 0x5c
 8004d14:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	212c      	movs	r1, #44	; 0x2c
 8004d1c:	fb01 f303 	mul.w	r3, r1, r3
 8004d20:	4413      	add	r3, r2
 8004d22:	335c      	adds	r3, #92	; 0x5c
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d912      	bls.n	8004d50 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	212c      	movs	r1, #44	; 0x2c
 8004d30:	fb01 f303 	mul.w	r3, r1, r3
 8004d34:	4413      	add	r3, r2
 8004d36:	335c      	adds	r3, #92	; 0x5c
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	212c      	movs	r1, #44	; 0x2c
 8004d42:	fb01 f303 	mul.w	r3, r1, r3
 8004d46:	4413      	add	r3, r2
 8004d48:	3360      	adds	r3, #96	; 0x60
 8004d4a:	2204      	movs	r2, #4
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	e021      	b.n	8004d94 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	212c      	movs	r1, #44	; 0x2c
 8004d56:	fb01 f303 	mul.w	r3, r1, r3
 8004d5a:	4413      	add	r3, r2
 8004d5c:	3360      	adds	r3, #96	; 0x60
 8004d5e:	2202      	movs	r2, #2
 8004d60:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d78:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d80:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8e:	461a      	mov	r2, r3
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da0:	461a      	mov	r2, r3
 8004da2:	2302      	movs	r3, #2
 8004da4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	b2d9      	uxtb	r1, r3
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	202c      	movs	r0, #44	; 0x2c
 8004db0:	fb00 f303 	mul.w	r3, r0, r3
 8004db4:	4413      	add	r3, r2
 8004db6:	3360      	adds	r3, #96	; 0x60
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f00e f9e9 	bl	8013194 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004dc2:	bf00      	nop
 8004dc4:	3720      	adds	r7, #32
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b08a      	sub	sp, #40	; 0x28
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	0c5b      	lsrs	r3, r3, #17
 8004df0:	f003 030f 	and.w	r3, r3, #15
 8004df4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	091b      	lsrs	r3, r3, #4
 8004dfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dfe:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d004      	beq.n	8004e10 <HCD_RXQLVL_IRQHandler+0x46>
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2b05      	cmp	r3, #5
 8004e0a:	f000 80a9 	beq.w	8004f60 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004e0e:	e0aa      	b.n	8004f66 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 80a6 	beq.w	8004f64 <HCD_RXQLVL_IRQHandler+0x19a>
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	212c      	movs	r1, #44	; 0x2c
 8004e1e:	fb01 f303 	mul.w	r3, r1, r3
 8004e22:	4413      	add	r3, r2
 8004e24:	3344      	adds	r3, #68	; 0x44
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 809b 	beq.w	8004f64 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	212c      	movs	r1, #44	; 0x2c
 8004e34:	fb01 f303 	mul.w	r3, r1, r3
 8004e38:	4413      	add	r3, r2
 8004e3a:	3350      	adds	r3, #80	; 0x50
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	441a      	add	r2, r3
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	202c      	movs	r0, #44	; 0x2c
 8004e48:	fb00 f303 	mul.w	r3, r0, r3
 8004e4c:	440b      	add	r3, r1
 8004e4e:	334c      	adds	r3, #76	; 0x4c
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d87a      	bhi.n	8004f4c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	212c      	movs	r1, #44	; 0x2c
 8004e60:	fb01 f303 	mul.w	r3, r1, r3
 8004e64:	4413      	add	r3, r2
 8004e66:	3344      	adds	r3, #68	; 0x44
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	b292      	uxth	r2, r2
 8004e6e:	4619      	mov	r1, r3
 8004e70:	f003 fa20 	bl	80082b4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	212c      	movs	r1, #44	; 0x2c
 8004e7a:	fb01 f303 	mul.w	r3, r1, r3
 8004e7e:	4413      	add	r3, r2
 8004e80:	3344      	adds	r3, #68	; 0x44
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	441a      	add	r2, r3
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	202c      	movs	r0, #44	; 0x2c
 8004e8e:	fb00 f303 	mul.w	r3, r0, r3
 8004e92:	440b      	add	r3, r1
 8004e94:	3344      	adds	r3, #68	; 0x44
 8004e96:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	212c      	movs	r1, #44	; 0x2c
 8004e9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ea2:	4413      	add	r3, r2
 8004ea4:	3350      	adds	r3, #80	; 0x50
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	441a      	add	r2, r3
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	202c      	movs	r0, #44	; 0x2c
 8004eb2:	fb00 f303 	mul.w	r3, r0, r3
 8004eb6:	440b      	add	r3, r1
 8004eb8:	3350      	adds	r3, #80	; 0x50
 8004eba:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	0cdb      	lsrs	r3, r3, #19
 8004ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ed0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	212c      	movs	r1, #44	; 0x2c
 8004ed8:	fb01 f303 	mul.w	r3, r1, r3
 8004edc:	4413      	add	r3, r2
 8004ede:	3340      	adds	r3, #64	; 0x40
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d13c      	bne.n	8004f64 <HCD_RXQLVL_IRQHandler+0x19a>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d039      	beq.n	8004f64 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f06:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f0e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	212c      	movs	r1, #44	; 0x2c
 8004f28:	fb01 f303 	mul.w	r3, r1, r3
 8004f2c:	4413      	add	r3, r2
 8004f2e:	3354      	adds	r3, #84	; 0x54
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	f083 0301 	eor.w	r3, r3, #1
 8004f36:	b2d8      	uxtb	r0, r3
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	212c      	movs	r1, #44	; 0x2c
 8004f3e:	fb01 f303 	mul.w	r3, r1, r3
 8004f42:	4413      	add	r3, r2
 8004f44:	3354      	adds	r3, #84	; 0x54
 8004f46:	4602      	mov	r2, r0
 8004f48:	701a      	strb	r2, [r3, #0]
      break;
 8004f4a:	e00b      	b.n	8004f64 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	212c      	movs	r1, #44	; 0x2c
 8004f52:	fb01 f303 	mul.w	r3, r1, r3
 8004f56:	4413      	add	r3, r2
 8004f58:	3360      	adds	r3, #96	; 0x60
 8004f5a:	2204      	movs	r2, #4
 8004f5c:	701a      	strb	r2, [r3, #0]
      break;
 8004f5e:	e001      	b.n	8004f64 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004f60:	bf00      	nop
 8004f62:	e000      	b.n	8004f66 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004f64:	bf00      	nop
  }
}
 8004f66:	bf00      	nop
 8004f68:	3728      	adds	r7, #40	; 0x28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b086      	sub	sp, #24
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004f9a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d10b      	bne.n	8004fbe <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d102      	bne.n	8004fb6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f00e f8d3 	bl	801315c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f043 0302 	orr.w	r3, r3, #2
 8004fbc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f003 0308 	and.w	r3, r3, #8
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d132      	bne.n	800502e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f043 0308 	orr.w	r3, r3, #8
 8004fce:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f003 0304 	and.w	r3, r3, #4
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d126      	bne.n	8005028 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d113      	bne.n	800500a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004fe8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fec:	d106      	bne.n	8004ffc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2102      	movs	r1, #2
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f003 facb 	bl	8008590 <USB_InitFSLSPClkSel>
 8004ffa:	e011      	b.n	8005020 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2101      	movs	r1, #1
 8005002:	4618      	mov	r0, r3
 8005004:	f003 fac4 	bl	8008590 <USB_InitFSLSPClkSel>
 8005008:	e00a      	b.n	8005020 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d106      	bne.n	8005020 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005018:	461a      	mov	r2, r3
 800501a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800501e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f00e f8c9 	bl	80131b8 <HAL_HCD_PortEnabled_Callback>
 8005026:	e002      	b.n	800502e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f00e f8d3 	bl	80131d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b20      	cmp	r3, #32
 8005036:	d103      	bne.n	8005040 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f043 0320 	orr.w	r3, r3, #32
 800503e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005046:	461a      	mov	r2, r3
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	6013      	str	r3, [r2, #0]
}
 800504c:	bf00      	nop
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e267      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d075      	beq.n	800515e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005072:	4b88      	ldr	r3, [pc, #544]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 030c 	and.w	r3, r3, #12
 800507a:	2b04      	cmp	r3, #4
 800507c:	d00c      	beq.n	8005098 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800507e:	4b85      	ldr	r3, [pc, #532]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005086:	2b08      	cmp	r3, #8
 8005088:	d112      	bne.n	80050b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800508a:	4b82      	ldr	r3, [pc, #520]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005092:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005096:	d10b      	bne.n	80050b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005098:	4b7e      	ldr	r3, [pc, #504]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d05b      	beq.n	800515c <HAL_RCC_OscConfig+0x108>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d157      	bne.n	800515c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e242      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b8:	d106      	bne.n	80050c8 <HAL_RCC_OscConfig+0x74>
 80050ba:	4b76      	ldr	r3, [pc, #472]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a75      	ldr	r2, [pc, #468]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	e01d      	b.n	8005104 <HAL_RCC_OscConfig+0xb0>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050d0:	d10c      	bne.n	80050ec <HAL_RCC_OscConfig+0x98>
 80050d2:	4b70      	ldr	r3, [pc, #448]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a6f      	ldr	r2, [pc, #444]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	4b6d      	ldr	r3, [pc, #436]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a6c      	ldr	r2, [pc, #432]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	e00b      	b.n	8005104 <HAL_RCC_OscConfig+0xb0>
 80050ec:	4b69      	ldr	r3, [pc, #420]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a68      	ldr	r2, [pc, #416]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	4b66      	ldr	r3, [pc, #408]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a65      	ldr	r2, [pc, #404]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d013      	beq.n	8005134 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510c:	f7fd fa7c 	bl	8002608 <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005114:	f7fd fa78 	bl	8002608 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b64      	cmp	r3, #100	; 0x64
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e207      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005126:	4b5b      	ldr	r3, [pc, #364]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f0      	beq.n	8005114 <HAL_RCC_OscConfig+0xc0>
 8005132:	e014      	b.n	800515e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005134:	f7fd fa68 	bl	8002608 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800513c:	f7fd fa64 	bl	8002608 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b64      	cmp	r3, #100	; 0x64
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e1f3      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800514e:	4b51      	ldr	r3, [pc, #324]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f0      	bne.n	800513c <HAL_RCC_OscConfig+0xe8>
 800515a:	e000      	b.n	800515e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800515c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d063      	beq.n	8005232 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800516a:	4b4a      	ldr	r3, [pc, #296]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 030c 	and.w	r3, r3, #12
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00b      	beq.n	800518e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005176:	4b47      	ldr	r3, [pc, #284]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800517e:	2b08      	cmp	r3, #8
 8005180:	d11c      	bne.n	80051bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005182:	4b44      	ldr	r3, [pc, #272]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d116      	bne.n	80051bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800518e:	4b41      	ldr	r3, [pc, #260]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d005      	beq.n	80051a6 <HAL_RCC_OscConfig+0x152>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d001      	beq.n	80051a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e1c7      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a6:	4b3b      	ldr	r3, [pc, #236]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	4937      	ldr	r1, [pc, #220]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ba:	e03a      	b.n	8005232 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d020      	beq.n	8005206 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051c4:	4b34      	ldr	r3, [pc, #208]	; (8005298 <HAL_RCC_OscConfig+0x244>)
 80051c6:	2201      	movs	r2, #1
 80051c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ca:	f7fd fa1d 	bl	8002608 <HAL_GetTick>
 80051ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051d0:	e008      	b.n	80051e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051d2:	f7fd fa19 	bl	8002608 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e1a8      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e4:	4b2b      	ldr	r3, [pc, #172]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0f0      	beq.n	80051d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f0:	4b28      	ldr	r3, [pc, #160]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	4925      	ldr	r1, [pc, #148]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005200:	4313      	orrs	r3, r2
 8005202:	600b      	str	r3, [r1, #0]
 8005204:	e015      	b.n	8005232 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005206:	4b24      	ldr	r3, [pc, #144]	; (8005298 <HAL_RCC_OscConfig+0x244>)
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520c:	f7fd f9fc 	bl	8002608 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005214:	f7fd f9f8 	bl	8002608 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e187      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005226:	4b1b      	ldr	r3, [pc, #108]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f0      	bne.n	8005214 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d036      	beq.n	80052ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d016      	beq.n	8005274 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005246:	4b15      	ldr	r3, [pc, #84]	; (800529c <HAL_RCC_OscConfig+0x248>)
 8005248:	2201      	movs	r2, #1
 800524a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800524c:	f7fd f9dc 	bl	8002608 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005254:	f7fd f9d8 	bl	8002608 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e167      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005266:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0f0      	beq.n	8005254 <HAL_RCC_OscConfig+0x200>
 8005272:	e01b      	b.n	80052ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005274:	4b09      	ldr	r3, [pc, #36]	; (800529c <HAL_RCC_OscConfig+0x248>)
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800527a:	f7fd f9c5 	bl	8002608 <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005280:	e00e      	b.n	80052a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005282:	f7fd f9c1 	bl	8002608 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d907      	bls.n	80052a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e150      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
 8005294:	40023800 	.word	0x40023800
 8005298:	42470000 	.word	0x42470000
 800529c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052a0:	4b88      	ldr	r3, [pc, #544]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 80052a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1ea      	bne.n	8005282 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 8097 	beq.w	80053e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ba:	2300      	movs	r3, #0
 80052bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052be:	4b81      	ldr	r3, [pc, #516]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10f      	bne.n	80052ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ca:	2300      	movs	r3, #0
 80052cc:	60bb      	str	r3, [r7, #8]
 80052ce:	4b7d      	ldr	r3, [pc, #500]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	4a7c      	ldr	r2, [pc, #496]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 80052d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d8:	6413      	str	r3, [r2, #64]	; 0x40
 80052da:	4b7a      	ldr	r3, [pc, #488]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e2:	60bb      	str	r3, [r7, #8]
 80052e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052e6:	2301      	movs	r3, #1
 80052e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ea:	4b77      	ldr	r3, [pc, #476]	; (80054c8 <HAL_RCC_OscConfig+0x474>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d118      	bne.n	8005328 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052f6:	4b74      	ldr	r3, [pc, #464]	; (80054c8 <HAL_RCC_OscConfig+0x474>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a73      	ldr	r2, [pc, #460]	; (80054c8 <HAL_RCC_OscConfig+0x474>)
 80052fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005302:	f7fd f981 	bl	8002608 <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005308:	e008      	b.n	800531c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800530a:	f7fd f97d 	bl	8002608 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e10c      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800531c:	4b6a      	ldr	r3, [pc, #424]	; (80054c8 <HAL_RCC_OscConfig+0x474>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0f0      	beq.n	800530a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d106      	bne.n	800533e <HAL_RCC_OscConfig+0x2ea>
 8005330:	4b64      	ldr	r3, [pc, #400]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005334:	4a63      	ldr	r2, [pc, #396]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005336:	f043 0301 	orr.w	r3, r3, #1
 800533a:	6713      	str	r3, [r2, #112]	; 0x70
 800533c:	e01c      	b.n	8005378 <HAL_RCC_OscConfig+0x324>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	2b05      	cmp	r3, #5
 8005344:	d10c      	bne.n	8005360 <HAL_RCC_OscConfig+0x30c>
 8005346:	4b5f      	ldr	r3, [pc, #380]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534a:	4a5e      	ldr	r2, [pc, #376]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 800534c:	f043 0304 	orr.w	r3, r3, #4
 8005350:	6713      	str	r3, [r2, #112]	; 0x70
 8005352:	4b5c      	ldr	r3, [pc, #368]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005356:	4a5b      	ldr	r2, [pc, #364]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005358:	f043 0301 	orr.w	r3, r3, #1
 800535c:	6713      	str	r3, [r2, #112]	; 0x70
 800535e:	e00b      	b.n	8005378 <HAL_RCC_OscConfig+0x324>
 8005360:	4b58      	ldr	r3, [pc, #352]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005364:	4a57      	ldr	r2, [pc, #348]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005366:	f023 0301 	bic.w	r3, r3, #1
 800536a:	6713      	str	r3, [r2, #112]	; 0x70
 800536c:	4b55      	ldr	r3, [pc, #340]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 800536e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005370:	4a54      	ldr	r2, [pc, #336]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005372:	f023 0304 	bic.w	r3, r3, #4
 8005376:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d015      	beq.n	80053ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005380:	f7fd f942 	bl	8002608 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005386:	e00a      	b.n	800539e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005388:	f7fd f93e 	bl	8002608 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	f241 3288 	movw	r2, #5000	; 0x1388
 8005396:	4293      	cmp	r3, r2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e0cb      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800539e:	4b49      	ldr	r3, [pc, #292]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0ee      	beq.n	8005388 <HAL_RCC_OscConfig+0x334>
 80053aa:	e014      	b.n	80053d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ac:	f7fd f92c 	bl	8002608 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053b2:	e00a      	b.n	80053ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053b4:	f7fd f928 	bl	8002608 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e0b5      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ca:	4b3e      	ldr	r3, [pc, #248]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 80053cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1ee      	bne.n	80053b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053d6:	7dfb      	ldrb	r3, [r7, #23]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d105      	bne.n	80053e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053dc:	4b39      	ldr	r3, [pc, #228]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 80053de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e0:	4a38      	ldr	r2, [pc, #224]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 80053e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80a1 	beq.w	8005534 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053f2:	4b34      	ldr	r3, [pc, #208]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 030c 	and.w	r3, r3, #12
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d05c      	beq.n	80054b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	2b02      	cmp	r3, #2
 8005404:	d141      	bne.n	800548a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005406:	4b31      	ldr	r3, [pc, #196]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540c:	f7fd f8fc 	bl	8002608 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005414:	f7fd f8f8 	bl	8002608 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e087      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005426:	4b27      	ldr	r3, [pc, #156]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f0      	bne.n	8005414 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69da      	ldr	r2, [r3, #28]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	019b      	lsls	r3, r3, #6
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005448:	085b      	lsrs	r3, r3, #1
 800544a:	3b01      	subs	r3, #1
 800544c:	041b      	lsls	r3, r3, #16
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	061b      	lsls	r3, r3, #24
 8005456:	491b      	ldr	r1, [pc, #108]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005458:	4313      	orrs	r3, r2
 800545a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800545c:	4b1b      	ldr	r3, [pc, #108]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 800545e:	2201      	movs	r2, #1
 8005460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005462:	f7fd f8d1 	bl	8002608 <HAL_GetTick>
 8005466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005468:	e008      	b.n	800547c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800546a:	f7fd f8cd 	bl	8002608 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e05c      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800547c:	4b11      	ldr	r3, [pc, #68]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d0f0      	beq.n	800546a <HAL_RCC_OscConfig+0x416>
 8005488:	e054      	b.n	8005534 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800548a:	4b10      	ldr	r3, [pc, #64]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005490:	f7fd f8ba 	bl	8002608 <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005498:	f7fd f8b6 	bl	8002608 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e045      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054aa:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f0      	bne.n	8005498 <HAL_RCC_OscConfig+0x444>
 80054b6:	e03d      	b.n	8005534 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d107      	bne.n	80054d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e038      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
 80054c4:	40023800 	.word	0x40023800
 80054c8:	40007000 	.word	0x40007000
 80054cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054d0:	4b1b      	ldr	r3, [pc, #108]	; (8005540 <HAL_RCC_OscConfig+0x4ec>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d028      	beq.n	8005530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d121      	bne.n	8005530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d11a      	bne.n	8005530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005500:	4013      	ands	r3, r2
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005506:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005508:	4293      	cmp	r3, r2
 800550a:	d111      	bne.n	8005530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	085b      	lsrs	r3, r3, #1
 8005518:	3b01      	subs	r3, #1
 800551a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800551c:	429a      	cmp	r2, r3
 800551e:	d107      	bne.n	8005530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800552c:	429a      	cmp	r2, r3
 800552e:	d001      	beq.n	8005534 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e000      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40023800 	.word	0x40023800

08005544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e0cc      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005558:	4b68      	ldr	r3, [pc, #416]	; (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	429a      	cmp	r2, r3
 8005564:	d90c      	bls.n	8005580 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005566:	4b65      	ldr	r3, [pc, #404]	; (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800556e:	4b63      	ldr	r3, [pc, #396]	; (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	429a      	cmp	r2, r3
 800557a:	d001      	beq.n	8005580 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e0b8      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d020      	beq.n	80055ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005598:	4b59      	ldr	r3, [pc, #356]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	4a58      	ldr	r2, [pc, #352]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 800559e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055b0:	4b53      	ldr	r3, [pc, #332]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	4a52      	ldr	r2, [pc, #328]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80055b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055bc:	4b50      	ldr	r3, [pc, #320]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	494d      	ldr	r1, [pc, #308]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d044      	beq.n	8005664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d107      	bne.n	80055f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055e2:	4b47      	ldr	r3, [pc, #284]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d119      	bne.n	8005622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e07f      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d003      	beq.n	8005602 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d107      	bne.n	8005612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005602:	4b3f      	ldr	r3, [pc, #252]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d109      	bne.n	8005622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e06f      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005612:	4b3b      	ldr	r3, [pc, #236]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e067      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005622:	4b37      	ldr	r3, [pc, #220]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f023 0203 	bic.w	r2, r3, #3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	4934      	ldr	r1, [pc, #208]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 8005630:	4313      	orrs	r3, r2
 8005632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005634:	f7fc ffe8 	bl	8002608 <HAL_GetTick>
 8005638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800563a:	e00a      	b.n	8005652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800563c:	f7fc ffe4 	bl	8002608 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	f241 3288 	movw	r2, #5000	; 0x1388
 800564a:	4293      	cmp	r3, r2
 800564c:	d901      	bls.n	8005652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e04f      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005652:	4b2b      	ldr	r3, [pc, #172]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 020c 	and.w	r2, r3, #12
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	429a      	cmp	r2, r3
 8005662:	d1eb      	bne.n	800563c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005664:	4b25      	ldr	r3, [pc, #148]	; (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d20c      	bcs.n	800568c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005672:	4b22      	ldr	r3, [pc, #136]	; (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800567a:	4b20      	ldr	r3, [pc, #128]	; (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d001      	beq.n	800568c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e032      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b00      	cmp	r3, #0
 8005696:	d008      	beq.n	80056aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005698:	4b19      	ldr	r3, [pc, #100]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	4916      	ldr	r1, [pc, #88]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d009      	beq.n	80056ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056b6:	4b12      	ldr	r3, [pc, #72]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	490e      	ldr	r1, [pc, #56]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056ca:	f000 f821 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 80056ce:	4602      	mov	r2, r0
 80056d0:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	091b      	lsrs	r3, r3, #4
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	490a      	ldr	r1, [pc, #40]	; (8005704 <HAL_RCC_ClockConfig+0x1c0>)
 80056dc:	5ccb      	ldrb	r3, [r1, r3]
 80056de:	fa22 f303 	lsr.w	r3, r2, r3
 80056e2:	4a09      	ldr	r2, [pc, #36]	; (8005708 <HAL_RCC_ClockConfig+0x1c4>)
 80056e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056e6:	4b09      	ldr	r3, [pc, #36]	; (800570c <HAL_RCC_ClockConfig+0x1c8>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fc fcf0 	bl	80020d0 <HAL_InitTick>

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40023c00 	.word	0x40023c00
 8005700:	40023800 	.word	0x40023800
 8005704:	08014ee0 	.word	0x08014ee0
 8005708:	20000230 	.word	0x20000230
 800570c:	20000234 	.word	0x20000234

08005710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005714:	b090      	sub	sp, #64	; 0x40
 8005716:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	637b      	str	r3, [r7, #52]	; 0x34
 800571c:	2300      	movs	r3, #0
 800571e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005720:	2300      	movs	r3, #0
 8005722:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005724:	2300      	movs	r3, #0
 8005726:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005728:	4b59      	ldr	r3, [pc, #356]	; (8005890 <HAL_RCC_GetSysClockFreq+0x180>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f003 030c 	and.w	r3, r3, #12
 8005730:	2b08      	cmp	r3, #8
 8005732:	d00d      	beq.n	8005750 <HAL_RCC_GetSysClockFreq+0x40>
 8005734:	2b08      	cmp	r3, #8
 8005736:	f200 80a1 	bhi.w	800587c <HAL_RCC_GetSysClockFreq+0x16c>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <HAL_RCC_GetSysClockFreq+0x34>
 800573e:	2b04      	cmp	r3, #4
 8005740:	d003      	beq.n	800574a <HAL_RCC_GetSysClockFreq+0x3a>
 8005742:	e09b      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005744:	4b53      	ldr	r3, [pc, #332]	; (8005894 <HAL_RCC_GetSysClockFreq+0x184>)
 8005746:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005748:	e09b      	b.n	8005882 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800574a:	4b53      	ldr	r3, [pc, #332]	; (8005898 <HAL_RCC_GetSysClockFreq+0x188>)
 800574c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800574e:	e098      	b.n	8005882 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005750:	4b4f      	ldr	r3, [pc, #316]	; (8005890 <HAL_RCC_GetSysClockFreq+0x180>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005758:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800575a:	4b4d      	ldr	r3, [pc, #308]	; (8005890 <HAL_RCC_GetSysClockFreq+0x180>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d028      	beq.n	80057b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005766:	4b4a      	ldr	r3, [pc, #296]	; (8005890 <HAL_RCC_GetSysClockFreq+0x180>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	099b      	lsrs	r3, r3, #6
 800576c:	2200      	movs	r2, #0
 800576e:	623b      	str	r3, [r7, #32]
 8005770:	627a      	str	r2, [r7, #36]	; 0x24
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005778:	2100      	movs	r1, #0
 800577a:	4b47      	ldr	r3, [pc, #284]	; (8005898 <HAL_RCC_GetSysClockFreq+0x188>)
 800577c:	fb03 f201 	mul.w	r2, r3, r1
 8005780:	2300      	movs	r3, #0
 8005782:	fb00 f303 	mul.w	r3, r0, r3
 8005786:	4413      	add	r3, r2
 8005788:	4a43      	ldr	r2, [pc, #268]	; (8005898 <HAL_RCC_GetSysClockFreq+0x188>)
 800578a:	fba0 1202 	umull	r1, r2, r0, r2
 800578e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005790:	460a      	mov	r2, r1
 8005792:	62ba      	str	r2, [r7, #40]	; 0x28
 8005794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005796:	4413      	add	r3, r2
 8005798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800579a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579c:	2200      	movs	r2, #0
 800579e:	61bb      	str	r3, [r7, #24]
 80057a0:	61fa      	str	r2, [r7, #28]
 80057a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80057aa:	f7fa fd79 	bl	80002a0 <__aeabi_uldivmod>
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	4613      	mov	r3, r2
 80057b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057b6:	e053      	b.n	8005860 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057b8:	4b35      	ldr	r3, [pc, #212]	; (8005890 <HAL_RCC_GetSysClockFreq+0x180>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	099b      	lsrs	r3, r3, #6
 80057be:	2200      	movs	r2, #0
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	617a      	str	r2, [r7, #20]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80057ca:	f04f 0b00 	mov.w	fp, #0
 80057ce:	4652      	mov	r2, sl
 80057d0:	465b      	mov	r3, fp
 80057d2:	f04f 0000 	mov.w	r0, #0
 80057d6:	f04f 0100 	mov.w	r1, #0
 80057da:	0159      	lsls	r1, r3, #5
 80057dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057e0:	0150      	lsls	r0, r2, #5
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	ebb2 080a 	subs.w	r8, r2, sl
 80057ea:	eb63 090b 	sbc.w	r9, r3, fp
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	f04f 0300 	mov.w	r3, #0
 80057f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80057fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80057fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005802:	ebb2 0408 	subs.w	r4, r2, r8
 8005806:	eb63 0509 	sbc.w	r5, r3, r9
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	f04f 0300 	mov.w	r3, #0
 8005812:	00eb      	lsls	r3, r5, #3
 8005814:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005818:	00e2      	lsls	r2, r4, #3
 800581a:	4614      	mov	r4, r2
 800581c:	461d      	mov	r5, r3
 800581e:	eb14 030a 	adds.w	r3, r4, sl
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	eb45 030b 	adc.w	r3, r5, fp
 8005828:	607b      	str	r3, [r7, #4]
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	f04f 0300 	mov.w	r3, #0
 8005832:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005836:	4629      	mov	r1, r5
 8005838:	028b      	lsls	r3, r1, #10
 800583a:	4621      	mov	r1, r4
 800583c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005840:	4621      	mov	r1, r4
 8005842:	028a      	lsls	r2, r1, #10
 8005844:	4610      	mov	r0, r2
 8005846:	4619      	mov	r1, r3
 8005848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584a:	2200      	movs	r2, #0
 800584c:	60bb      	str	r3, [r7, #8]
 800584e:	60fa      	str	r2, [r7, #12]
 8005850:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005854:	f7fa fd24 	bl	80002a0 <__aeabi_uldivmod>
 8005858:	4602      	mov	r2, r0
 800585a:	460b      	mov	r3, r1
 800585c:	4613      	mov	r3, r2
 800585e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005860:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <HAL_RCC_GetSysClockFreq+0x180>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	0c1b      	lsrs	r3, r3, #16
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	3301      	adds	r3, #1
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005870:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	fbb2 f3f3 	udiv	r3, r2, r3
 8005878:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800587a:	e002      	b.n	8005882 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800587c:	4b05      	ldr	r3, [pc, #20]	; (8005894 <HAL_RCC_GetSysClockFreq+0x184>)
 800587e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005884:	4618      	mov	r0, r3
 8005886:	3740      	adds	r7, #64	; 0x40
 8005888:	46bd      	mov	sp, r7
 800588a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800588e:	bf00      	nop
 8005890:	40023800 	.word	0x40023800
 8005894:	00f42400 	.word	0x00f42400
 8005898:	017d7840 	.word	0x017d7840

0800589c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058a0:	4b03      	ldr	r3, [pc, #12]	; (80058b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80058a2:	681b      	ldr	r3, [r3, #0]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	20000230 	.word	0x20000230

080058b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058b8:	f7ff fff0 	bl	800589c <HAL_RCC_GetHCLKFreq>
 80058bc:	4602      	mov	r2, r0
 80058be:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	0a9b      	lsrs	r3, r3, #10
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	4903      	ldr	r1, [pc, #12]	; (80058d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058ca:	5ccb      	ldrb	r3, [r1, r3]
 80058cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	40023800 	.word	0x40023800
 80058d8:	08014ef0 	.word	0x08014ef0

080058dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058e0:	f7ff ffdc 	bl	800589c <HAL_RCC_GetHCLKFreq>
 80058e4:	4602      	mov	r2, r0
 80058e6:	4b05      	ldr	r3, [pc, #20]	; (80058fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	0b5b      	lsrs	r3, r3, #13
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	4903      	ldr	r1, [pc, #12]	; (8005900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058f2:	5ccb      	ldrb	r3, [r1, r3]
 80058f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40023800 	.word	0x40023800
 8005900:	08014ef0 	.word	0x08014ef0

08005904 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	220f      	movs	r2, #15
 8005912:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005914:	4b12      	ldr	r3, [pc, #72]	; (8005960 <HAL_RCC_GetClockConfig+0x5c>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 0203 	and.w	r2, r3, #3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005920:	4b0f      	ldr	r3, [pc, #60]	; (8005960 <HAL_RCC_GetClockConfig+0x5c>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800592c:	4b0c      	ldr	r3, [pc, #48]	; (8005960 <HAL_RCC_GetClockConfig+0x5c>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005938:	4b09      	ldr	r3, [pc, #36]	; (8005960 <HAL_RCC_GetClockConfig+0x5c>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	08db      	lsrs	r3, r3, #3
 800593e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005946:	4b07      	ldr	r3, [pc, #28]	; (8005964 <HAL_RCC_GetClockConfig+0x60>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0207 	and.w	r2, r3, #7
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	601a      	str	r2, [r3, #0]
}
 8005952:	bf00      	nop
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	40023800 	.word	0x40023800
 8005964:	40023c00 	.word	0x40023c00

08005968 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e07b      	b.n	8005a72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	2b00      	cmp	r3, #0
 8005980:	d108      	bne.n	8005994 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800598a:	d009      	beq.n	80059a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	61da      	str	r2, [r3, #28]
 8005992:	e005      	b.n	80059a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d106      	bne.n	80059c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7fc fa5c 	bl	8001e78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059e8:	431a      	orrs	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059f2:	431a      	orrs	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	431a      	orrs	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a10:	431a      	orrs	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a24:	ea42 0103 	orr.w	r1, r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	0c1b      	lsrs	r3, r3, #16
 8005a3e:	f003 0104 	and.w	r1, r3, #4
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	f003 0210 	and.w	r2, r3, #16
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69da      	ldr	r2, [r3, #28]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b08c      	sub	sp, #48	; 0x30
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	60f8      	str	r0, [r7, #12]
 8005a82:	60b9      	str	r1, [r7, #8]
 8005a84:	607a      	str	r2, [r7, #4]
 8005a86:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_SPI_TransmitReceive+0x26>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e18a      	b.n	8005db6 <HAL_SPI_TransmitReceive+0x33c>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005aa8:	f7fc fdae 	bl	8002608 <HAL_GetTick>
 8005aac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ab4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005abe:	887b      	ldrh	r3, [r7, #2]
 8005ac0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ac2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d00f      	beq.n	8005aea <HAL_SPI_TransmitReceive+0x70>
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ad0:	d107      	bne.n	8005ae2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d103      	bne.n	8005ae2 <HAL_SPI_TransmitReceive+0x68>
 8005ada:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	d003      	beq.n	8005aea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ae8:	e15b      	b.n	8005da2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d005      	beq.n	8005afc <HAL_SPI_TransmitReceive+0x82>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <HAL_SPI_TransmitReceive+0x82>
 8005af6:	887b      	ldrh	r3, [r7, #2]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d103      	bne.n	8005b04 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b02:	e14e      	b.n	8005da2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b04      	cmp	r3, #4
 8005b0e:	d003      	beq.n	8005b18 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2205      	movs	r2, #5
 8005b14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	887a      	ldrh	r2, [r7, #2]
 8005b28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	887a      	ldrh	r2, [r7, #2]
 8005b2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	887a      	ldrh	r2, [r7, #2]
 8005b3a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	887a      	ldrh	r2, [r7, #2]
 8005b40:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b58:	2b40      	cmp	r3, #64	; 0x40
 8005b5a:	d007      	beq.n	8005b6c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b74:	d178      	bne.n	8005c68 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <HAL_SPI_TransmitReceive+0x10a>
 8005b7e:	8b7b      	ldrh	r3, [r7, #26]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d166      	bne.n	8005c52 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b88:	881a      	ldrh	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	1c9a      	adds	r2, r3, #2
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ba8:	e053      	b.n	8005c52 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d11b      	bne.n	8005bf0 <HAL_SPI_TransmitReceive+0x176>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d016      	beq.n	8005bf0 <HAL_SPI_TransmitReceive+0x176>
 8005bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d113      	bne.n	8005bf0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bcc:	881a      	ldrh	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd8:	1c9a      	adds	r2, r3, #2
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	3b01      	subs	r3, #1
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d119      	bne.n	8005c32 <HAL_SPI_TransmitReceive+0x1b8>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d014      	beq.n	8005c32 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c12:	b292      	uxth	r2, r2
 8005c14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1a:	1c9a      	adds	r2, r3, #2
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c32:	f7fc fce9 	bl	8002608 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d807      	bhi.n	8005c52 <HAL_SPI_TransmitReceive+0x1d8>
 8005c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c48:	d003      	beq.n	8005c52 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c50:	e0a7      	b.n	8005da2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1a6      	bne.n	8005baa <HAL_SPI_TransmitReceive+0x130>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1a1      	bne.n	8005baa <HAL_SPI_TransmitReceive+0x130>
 8005c66:	e07c      	b.n	8005d62 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <HAL_SPI_TransmitReceive+0x1fc>
 8005c70:	8b7b      	ldrh	r3, [r7, #26]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d16b      	bne.n	8005d4e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	330c      	adds	r3, #12
 8005c80:	7812      	ldrb	r2, [r2, #0]
 8005c82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c9c:	e057      	b.n	8005d4e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d11c      	bne.n	8005ce6 <HAL_SPI_TransmitReceive+0x26c>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d017      	beq.n	8005ce6 <HAL_SPI_TransmitReceive+0x26c>
 8005cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d114      	bne.n	8005ce6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	330c      	adds	r3, #12
 8005cc6:	7812      	ldrb	r2, [r2, #0]
 8005cc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cce:	1c5a      	adds	r2, r3, #1
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f003 0301 	and.w	r3, r3, #1
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d119      	bne.n	8005d28 <HAL_SPI_TransmitReceive+0x2ae>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d014      	beq.n	8005d28 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d24:	2301      	movs	r3, #1
 8005d26:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d28:	f7fc fc6e 	bl	8002608 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d803      	bhi.n	8005d40 <HAL_SPI_TransmitReceive+0x2c6>
 8005d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3e:	d102      	bne.n	8005d46 <HAL_SPI_TransmitReceive+0x2cc>
 8005d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d103      	bne.n	8005d4e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d4c:	e029      	b.n	8005da2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1a2      	bne.n	8005c9e <HAL_SPI_TransmitReceive+0x224>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d19d      	bne.n	8005c9e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 fb48 	bl	80063fc <SPI_EndRxTxTransaction>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d006      	beq.n	8005d80 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d7e:	e010      	b.n	8005da2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10b      	bne.n	8005da0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d88:	2300      	movs	r3, #0
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	617b      	str	r3, [r7, #20]
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	e000      	b.n	8005da2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005da0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005db2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3730      	adds	r7, #48	; 0x30
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
 8005dcc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_SPI_TransmitReceive_IT+0x20>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e075      	b.n	8005ecc <HAL_SPI_TransmitReceive_IT+0x10c>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dee:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005df6:	7dbb      	ldrb	r3, [r7, #22]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d00d      	beq.n	8005e18 <HAL_SPI_TransmitReceive_IT+0x58>
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e02:	d106      	bne.n	8005e12 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d102      	bne.n	8005e12 <HAL_SPI_TransmitReceive_IT+0x52>
 8005e0c:	7dbb      	ldrb	r3, [r7, #22]
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d002      	beq.n	8005e18 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8005e12:	2302      	movs	r3, #2
 8005e14:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e16:	e054      	b.n	8005ec2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d005      	beq.n	8005e2a <HAL_SPI_TransmitReceive_IT+0x6a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <HAL_SPI_TransmitReceive_IT+0x6a>
 8005e24:	887b      	ldrh	r3, [r7, #2]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d102      	bne.n	8005e30 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e2e:	e048      	b.n	8005ec2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d003      	beq.n	8005e44 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2205      	movs	r2, #5
 8005e40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	887a      	ldrh	r2, [r7, #2]
 8005e54:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	887a      	ldrh	r2, [r7, #2]
 8005e5a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	887a      	ldrh	r2, [r7, #2]
 8005e66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	887a      	ldrh	r2, [r7, #2]
 8005e6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d006      	beq.n	8005e84 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4a17      	ldr	r2, [pc, #92]	; (8005ed8 <HAL_SPI_TransmitReceive_IT+0x118>)
 8005e7a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4a17      	ldr	r2, [pc, #92]	; (8005edc <HAL_SPI_TransmitReceive_IT+0x11c>)
 8005e80:	645a      	str	r2, [r3, #68]	; 0x44
 8005e82:	e005      	b.n	8005e90 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4a16      	ldr	r2, [pc, #88]	; (8005ee0 <HAL_SPI_TransmitReceive_IT+0x120>)
 8005e88:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4a15      	ldr	r2, [pc, #84]	; (8005ee4 <HAL_SPI_TransmitReceive_IT+0x124>)
 8005e8e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8005e9e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eaa:	2b40      	cmp	r3, #64	; 0x40
 8005eac:	d008      	beq.n	8005ec0 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	e000      	b.n	8005ec2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8005ec0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	371c      	adds	r7, #28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	0800622d 	.word	0x0800622d
 8005edc:	0800628d 	.word	0x0800628d
 8005ee0:	08006169 	.word	0x08006169
 8005ee4:	080061cd 	.word	0x080061cd

08005ee8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b088      	sub	sp, #32
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	099b      	lsrs	r3, r3, #6
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10f      	bne.n	8005f2c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	099b      	lsrs	r3, r3, #6
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d004      	beq.n	8005f2c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	4798      	blx	r3
    return;
 8005f2a:	e0d7      	b.n	80060dc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	085b      	lsrs	r3, r3, #1
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00a      	beq.n	8005f4e <HAL_SPI_IRQHandler+0x66>
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	09db      	lsrs	r3, r3, #7
 8005f3c:	f003 0301 	and.w	r3, r3, #1
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d004      	beq.n	8005f4e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	4798      	blx	r3
    return;
 8005f4c:	e0c6      	b.n	80060dc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	095b      	lsrs	r3, r3, #5
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10c      	bne.n	8005f74 <HAL_SPI_IRQHandler+0x8c>
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	099b      	lsrs	r3, r3, #6
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	0a1b      	lsrs	r3, r3, #8
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 80b4 	beq.w	80060dc <HAL_SPI_IRQHandler+0x1f4>
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	095b      	lsrs	r3, r3, #5
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 80ad 	beq.w	80060dc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	099b      	lsrs	r3, r3, #6
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d023      	beq.n	8005fd6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d011      	beq.n	8005fbe <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9e:	f043 0204 	orr.w	r2, r3, #4
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	e00b      	b.n	8005fd6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	613b      	str	r3, [r7, #16]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	613b      	str	r3, [r7, #16]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	613b      	str	r3, [r7, #16]
 8005fd2:	693b      	ldr	r3, [r7, #16]
        return;
 8005fd4:	e082      	b.n	80060dc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	095b      	lsrs	r3, r3, #5
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d014      	beq.n	800600c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe6:	f043 0201 	orr.w	r2, r3, #1
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	0a1b      	lsrs	r3, r3, #8
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00c      	beq.n	8006032 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601c:	f043 0208 	orr.w	r2, r3, #8
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006024:	2300      	movs	r3, #0
 8006026:	60bb      	str	r3, [r7, #8]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	60bb      	str	r3, [r7, #8]
 8006030:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006036:	2b00      	cmp	r3, #0
 8006038:	d04f      	beq.n	80060da <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006048:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d104      	bne.n	8006066 <HAL_SPI_IRQHandler+0x17e>
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d034      	beq.n	80060d0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 0203 	bic.w	r2, r2, #3
 8006074:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607a:	2b00      	cmp	r3, #0
 800607c:	d011      	beq.n	80060a2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006082:	4a18      	ldr	r2, [pc, #96]	; (80060e4 <HAL_SPI_IRQHandler+0x1fc>)
 8006084:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800608a:	4618      	mov	r0, r3
 800608c:	f7fc fcec 	bl	8002a68 <HAL_DMA_Abort_IT>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d005      	beq.n	80060a2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d016      	beq.n	80060d8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ae:	4a0d      	ldr	r2, [pc, #52]	; (80060e4 <HAL_SPI_IRQHandler+0x1fc>)
 80060b0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fc fcd6 	bl	8002a68 <HAL_DMA_Abort_IT>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00a      	beq.n	80060d8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80060ce:	e003      	b.n	80060d8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f81d 	bl	8006110 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80060d6:	e000      	b.n	80060da <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80060d8:	bf00      	nop
    return;
 80060da:	bf00      	nop
  }
}
 80060dc:	3720      	adds	r7, #32
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	08006141 	.word	0x08006141

080060e8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006132:	b2db      	uxtb	r3, r3
}
 8006134:	4618      	mov	r0, r3
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f7ff ffd8 	bl	8006110 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006160:	bf00      	nop
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f103 020c 	add.w	r2, r3, #12
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617c:	7812      	ldrb	r2, [r2, #0]
 800617e:	b2d2      	uxtb	r2, r2
 8006180:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006190:	b29b      	uxth	r3, r3
 8006192:	3b01      	subs	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800619e:	b29b      	uxth	r3, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10f      	bne.n	80061c4 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80061b2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d102      	bne.n	80061c4 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f95e 	bl	8006480 <SPI_CloseRxTx_ISR>
    }
  }
}
 80061c4:	bf00      	nop
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	330c      	adds	r3, #12
 80061de:	7812      	ldrb	r2, [r2, #0]
 80061e0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061fe:	b29b      	uxth	r3, r3
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10f      	bne.n	8006224 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006212:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006218:	b29b      	uxth	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d102      	bne.n	8006224 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f92e 	bl	8006480 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006224:	bf00      	nop
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	b292      	uxth	r2, r2
 8006240:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006246:	1c9a      	adds	r2, r3, #2
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800625e:	b29b      	uxth	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10f      	bne.n	8006284 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006272:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006278:	b29b      	uxth	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d102      	bne.n	8006284 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f8fe 	bl	8006480 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006284:	bf00      	nop
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006298:	881a      	ldrh	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a4:	1c9a      	adds	r2, r3, #2
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	3b01      	subs	r3, #1
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062bc:	b29b      	uxth	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10f      	bne.n	80062e2 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062d0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d102      	bne.n	80062e2 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f8cf 	bl	8006480 <SPI_CloseRxTx_ISR>
    }
  }
}
 80062e2:	bf00      	nop
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
	...

080062ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	603b      	str	r3, [r7, #0]
 80062f8:	4613      	mov	r3, r2
 80062fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062fc:	f7fc f984 	bl	8002608 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	1a9b      	subs	r3, r3, r2
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	4413      	add	r3, r2
 800630a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800630c:	f7fc f97c 	bl	8002608 <HAL_GetTick>
 8006310:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006312:	4b39      	ldr	r3, [pc, #228]	; (80063f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	015b      	lsls	r3, r3, #5
 8006318:	0d1b      	lsrs	r3, r3, #20
 800631a:	69fa      	ldr	r2, [r7, #28]
 800631c:	fb02 f303 	mul.w	r3, r2, r3
 8006320:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006322:	e054      	b.n	80063ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632a:	d050      	beq.n	80063ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800632c:	f7fc f96c 	bl	8002608 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	69fa      	ldr	r2, [r7, #28]
 8006338:	429a      	cmp	r2, r3
 800633a:	d902      	bls.n	8006342 <SPI_WaitFlagStateUntilTimeout+0x56>
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d13d      	bne.n	80063be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006350:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800635a:	d111      	bne.n	8006380 <SPI_WaitFlagStateUntilTimeout+0x94>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006364:	d004      	beq.n	8006370 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800636e:	d107      	bne.n	8006380 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800637e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006388:	d10f      	bne.n	80063aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e017      	b.n	80063ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	3b01      	subs	r3, #1
 80063cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	4013      	ands	r3, r2
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	429a      	cmp	r2, r3
 80063dc:	bf0c      	ite	eq
 80063de:	2301      	moveq	r3, #1
 80063e0:	2300      	movne	r3, #0
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	461a      	mov	r2, r3
 80063e6:	79fb      	ldrb	r3, [r7, #7]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d19b      	bne.n	8006324 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3720      	adds	r7, #32
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20000230 	.word	0x20000230

080063fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b088      	sub	sp, #32
 8006400:	af02      	add	r7, sp, #8
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006408:	4b1b      	ldr	r3, [pc, #108]	; (8006478 <SPI_EndRxTxTransaction+0x7c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a1b      	ldr	r2, [pc, #108]	; (800647c <SPI_EndRxTxTransaction+0x80>)
 800640e:	fba2 2303 	umull	r2, r3, r2, r3
 8006412:	0d5b      	lsrs	r3, r3, #21
 8006414:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006418:	fb02 f303 	mul.w	r3, r2, r3
 800641c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006426:	d112      	bne.n	800644e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2200      	movs	r2, #0
 8006430:	2180      	movs	r1, #128	; 0x80
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f7ff ff5a 	bl	80062ec <SPI_WaitFlagStateUntilTimeout>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d016      	beq.n	800646c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006442:	f043 0220 	orr.w	r2, r3, #32
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e00f      	b.n	800646e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00a      	beq.n	800646a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	3b01      	subs	r3, #1
 8006458:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006464:	2b80      	cmp	r3, #128	; 0x80
 8006466:	d0f2      	beq.n	800644e <SPI_EndRxTxTransaction+0x52>
 8006468:	e000      	b.n	800646c <SPI_EndRxTxTransaction+0x70>
        break;
 800646a:	bf00      	nop
  }

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	20000230 	.word	0x20000230
 800647c:	165e9f81 	.word	0x165e9f81

08006480 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8006488:	4b35      	ldr	r3, [pc, #212]	; (8006560 <SPI_CloseRxTx_ISR+0xe0>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a35      	ldr	r2, [pc, #212]	; (8006564 <SPI_CloseRxTx_ISR+0xe4>)
 800648e:	fba2 2303 	umull	r2, r3, r2, r3
 8006492:	0a5b      	lsrs	r3, r3, #9
 8006494:	2264      	movs	r2, #100	; 0x64
 8006496:	fb02 f303 	mul.w	r3, r2, r3
 800649a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800649c:	f7fc f8b4 	bl	8002608 <HAL_GetTick>
 80064a0:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 0220 	bic.w	r2, r2, #32
 80064b0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d106      	bne.n	80064c6 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064bc:	f043 0220 	orr.w	r2, r3, #32
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80064c4:	e009      	b.n	80064da <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d0eb      	beq.n	80064b2 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	2164      	movs	r1, #100	; 0x64
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff ff8c 	bl	80063fc <SPI_EndRxTxTransaction>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d005      	beq.n	80064f6 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ee:	f043 0220 	orr.w	r2, r3, #32
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10a      	bne.n	8006514 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064fe:	2300      	movs	r3, #0
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	60fb      	str	r3, [r7, #12]
 8006512:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006518:	2b00      	cmp	r3, #0
 800651a:	d115      	bne.n	8006548 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b04      	cmp	r3, #4
 8006526:	d107      	bne.n	8006538 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7ff fdd9 	bl	80060e8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006536:	e00e      	b.n	8006556 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7ff fddb 	bl	80060fc <HAL_SPI_TxRxCpltCallback>
}
 8006546:	e006      	b.n	8006556 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff fddd 	bl	8006110 <HAL_SPI_ErrorCallback>
}
 8006556:	bf00      	nop
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	20000230 	.word	0x20000230
 8006564:	057619f1 	.word	0x057619f1

08006568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e041      	b.n	80065fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d106      	bne.n	8006594 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7fb fd28 	bl	8001fe4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	3304      	adds	r3, #4
 80065a4:	4619      	mov	r1, r3
 80065a6:	4610      	mov	r0, r2
 80065a8:	f000 fa96 	bl	8006ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
	...

08006608 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b01      	cmp	r3, #1
 800661a:	d001      	beq.n	8006620 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e04e      	b.n	80066be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f042 0201 	orr.w	r2, r2, #1
 8006636:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a23      	ldr	r2, [pc, #140]	; (80066cc <HAL_TIM_Base_Start_IT+0xc4>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d022      	beq.n	8006688 <HAL_TIM_Base_Start_IT+0x80>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800664a:	d01d      	beq.n	8006688 <HAL_TIM_Base_Start_IT+0x80>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a1f      	ldr	r2, [pc, #124]	; (80066d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d018      	beq.n	8006688 <HAL_TIM_Base_Start_IT+0x80>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a1e      	ldr	r2, [pc, #120]	; (80066d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d013      	beq.n	8006688 <HAL_TIM_Base_Start_IT+0x80>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a1c      	ldr	r2, [pc, #112]	; (80066d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00e      	beq.n	8006688 <HAL_TIM_Base_Start_IT+0x80>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a1b      	ldr	r2, [pc, #108]	; (80066dc <HAL_TIM_Base_Start_IT+0xd4>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d009      	beq.n	8006688 <HAL_TIM_Base_Start_IT+0x80>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a19      	ldr	r2, [pc, #100]	; (80066e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d004      	beq.n	8006688 <HAL_TIM_Base_Start_IT+0x80>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a18      	ldr	r2, [pc, #96]	; (80066e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d111      	bne.n	80066ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 0307 	and.w	r3, r3, #7
 8006692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b06      	cmp	r3, #6
 8006698:	d010      	beq.n	80066bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f042 0201 	orr.w	r2, r2, #1
 80066a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066aa:	e007      	b.n	80066bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f042 0201 	orr.w	r2, r2, #1
 80066ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	40010000 	.word	0x40010000
 80066d0:	40000400 	.word	0x40000400
 80066d4:	40000800 	.word	0x40000800
 80066d8:	40000c00 	.word	0x40000c00
 80066dc:	40010400 	.word	0x40010400
 80066e0:	40014000 	.word	0x40014000
 80066e4:	40001800 	.word	0x40001800

080066e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d122      	bne.n	8006744 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f003 0302 	and.w	r3, r3, #2
 8006708:	2b02      	cmp	r3, #2
 800670a:	d11b      	bne.n	8006744 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f06f 0202 	mvn.w	r2, #2
 8006714:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	f003 0303 	and.w	r3, r3, #3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f9b5 	bl	8006a9a <HAL_TIM_IC_CaptureCallback>
 8006730:	e005      	b.n	800673e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f9a7 	bl	8006a86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f9b8 	bl	8006aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f003 0304 	and.w	r3, r3, #4
 800674e:	2b04      	cmp	r3, #4
 8006750:	d122      	bne.n	8006798 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b04      	cmp	r3, #4
 800675e:	d11b      	bne.n	8006798 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f06f 0204 	mvn.w	r2, #4
 8006768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2202      	movs	r2, #2
 800676e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f98b 	bl	8006a9a <HAL_TIM_IC_CaptureCallback>
 8006784:	e005      	b.n	8006792 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f97d 	bl	8006a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f98e 	bl	8006aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	f003 0308 	and.w	r3, r3, #8
 80067a2:	2b08      	cmp	r3, #8
 80067a4:	d122      	bne.n	80067ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f003 0308 	and.w	r3, r3, #8
 80067b0:	2b08      	cmp	r3, #8
 80067b2:	d11b      	bne.n	80067ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f06f 0208 	mvn.w	r2, #8
 80067bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2204      	movs	r2, #4
 80067c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	f003 0303 	and.w	r3, r3, #3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f961 	bl	8006a9a <HAL_TIM_IC_CaptureCallback>
 80067d8:	e005      	b.n	80067e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f953 	bl	8006a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f964 	bl	8006aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 0310 	and.w	r3, r3, #16
 80067f6:	2b10      	cmp	r3, #16
 80067f8:	d122      	bne.n	8006840 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f003 0310 	and.w	r3, r3, #16
 8006804:	2b10      	cmp	r3, #16
 8006806:	d11b      	bne.n	8006840 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f06f 0210 	mvn.w	r2, #16
 8006810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2208      	movs	r2, #8
 8006816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f937 	bl	8006a9a <HAL_TIM_IC_CaptureCallback>
 800682c:	e005      	b.n	800683a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f929 	bl	8006a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f93a 	bl	8006aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b01      	cmp	r3, #1
 800684c:	d10e      	bne.n	800686c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b01      	cmp	r3, #1
 800685a:	d107      	bne.n	800686c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f06f 0201 	mvn.w	r2, #1
 8006864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7fa ff72 	bl	8001750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006876:	2b80      	cmp	r3, #128	; 0x80
 8006878:	d10e      	bne.n	8006898 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006884:	2b80      	cmp	r3, #128	; 0x80
 8006886:	d107      	bne.n	8006898 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fae0 	bl	8006e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a2:	2b40      	cmp	r3, #64	; 0x40
 80068a4:	d10e      	bne.n	80068c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b0:	2b40      	cmp	r3, #64	; 0x40
 80068b2:	d107      	bne.n	80068c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f8ff 	bl	8006ac2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	f003 0320 	and.w	r3, r3, #32
 80068ce:	2b20      	cmp	r3, #32
 80068d0:	d10e      	bne.n	80068f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f003 0320 	and.w	r3, r3, #32
 80068dc:	2b20      	cmp	r3, #32
 80068de:	d107      	bne.n	80068f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f06f 0220 	mvn.w	r2, #32
 80068e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 faaa 	bl	8006e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068f0:	bf00      	nop
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006902:	2300      	movs	r3, #0
 8006904:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800690c:	2b01      	cmp	r3, #1
 800690e:	d101      	bne.n	8006914 <HAL_TIM_ConfigClockSource+0x1c>
 8006910:	2302      	movs	r3, #2
 8006912:	e0b4      	b.n	8006a7e <HAL_TIM_ConfigClockSource+0x186>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800693a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800694c:	d03e      	beq.n	80069cc <HAL_TIM_ConfigClockSource+0xd4>
 800694e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006952:	f200 8087 	bhi.w	8006a64 <HAL_TIM_ConfigClockSource+0x16c>
 8006956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695a:	f000 8086 	beq.w	8006a6a <HAL_TIM_ConfigClockSource+0x172>
 800695e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006962:	d87f      	bhi.n	8006a64 <HAL_TIM_ConfigClockSource+0x16c>
 8006964:	2b70      	cmp	r3, #112	; 0x70
 8006966:	d01a      	beq.n	800699e <HAL_TIM_ConfigClockSource+0xa6>
 8006968:	2b70      	cmp	r3, #112	; 0x70
 800696a:	d87b      	bhi.n	8006a64 <HAL_TIM_ConfigClockSource+0x16c>
 800696c:	2b60      	cmp	r3, #96	; 0x60
 800696e:	d050      	beq.n	8006a12 <HAL_TIM_ConfigClockSource+0x11a>
 8006970:	2b60      	cmp	r3, #96	; 0x60
 8006972:	d877      	bhi.n	8006a64 <HAL_TIM_ConfigClockSource+0x16c>
 8006974:	2b50      	cmp	r3, #80	; 0x50
 8006976:	d03c      	beq.n	80069f2 <HAL_TIM_ConfigClockSource+0xfa>
 8006978:	2b50      	cmp	r3, #80	; 0x50
 800697a:	d873      	bhi.n	8006a64 <HAL_TIM_ConfigClockSource+0x16c>
 800697c:	2b40      	cmp	r3, #64	; 0x40
 800697e:	d058      	beq.n	8006a32 <HAL_TIM_ConfigClockSource+0x13a>
 8006980:	2b40      	cmp	r3, #64	; 0x40
 8006982:	d86f      	bhi.n	8006a64 <HAL_TIM_ConfigClockSource+0x16c>
 8006984:	2b30      	cmp	r3, #48	; 0x30
 8006986:	d064      	beq.n	8006a52 <HAL_TIM_ConfigClockSource+0x15a>
 8006988:	2b30      	cmp	r3, #48	; 0x30
 800698a:	d86b      	bhi.n	8006a64 <HAL_TIM_ConfigClockSource+0x16c>
 800698c:	2b20      	cmp	r3, #32
 800698e:	d060      	beq.n	8006a52 <HAL_TIM_ConfigClockSource+0x15a>
 8006990:	2b20      	cmp	r3, #32
 8006992:	d867      	bhi.n	8006a64 <HAL_TIM_ConfigClockSource+0x16c>
 8006994:	2b00      	cmp	r3, #0
 8006996:	d05c      	beq.n	8006a52 <HAL_TIM_ConfigClockSource+0x15a>
 8006998:	2b10      	cmp	r3, #16
 800699a:	d05a      	beq.n	8006a52 <HAL_TIM_ConfigClockSource+0x15a>
 800699c:	e062      	b.n	8006a64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6818      	ldr	r0, [r3, #0]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	6899      	ldr	r1, [r3, #8]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	f000 f9ad 	bl	8006d0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	609a      	str	r2, [r3, #8]
      break;
 80069ca:	e04f      	b.n	8006a6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6818      	ldr	r0, [r3, #0]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	6899      	ldr	r1, [r3, #8]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f000 f996 	bl	8006d0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689a      	ldr	r2, [r3, #8]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069ee:	609a      	str	r2, [r3, #8]
      break;
 80069f0:	e03c      	b.n	8006a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6818      	ldr	r0, [r3, #0]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	6859      	ldr	r1, [r3, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	461a      	mov	r2, r3
 8006a00:	f000 f90a 	bl	8006c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2150      	movs	r1, #80	; 0x50
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 f963 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 8006a10:	e02c      	b.n	8006a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6818      	ldr	r0, [r3, #0]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	6859      	ldr	r1, [r3, #4]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f000 f929 	bl	8006c76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2160      	movs	r1, #96	; 0x60
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 f953 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 8006a30:	e01c      	b.n	8006a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6818      	ldr	r0, [r3, #0]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	6859      	ldr	r1, [r3, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f000 f8ea 	bl	8006c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2140      	movs	r1, #64	; 0x40
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 f943 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 8006a50:	e00c      	b.n	8006a6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	f000 f93a 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 8006a62:	e003      	b.n	8006a6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	73fb      	strb	r3, [r7, #15]
      break;
 8006a68:	e000      	b.n	8006a6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b083      	sub	sp, #12
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a8e:	bf00      	nop
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006aa2:	bf00      	nop
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b083      	sub	sp, #12
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ab6:	bf00      	nop
 8006ab8:	370c      	adds	r7, #12
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006aca:	bf00      	nop
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
	...

08006ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a40      	ldr	r2, [pc, #256]	; (8006bec <TIM_Base_SetConfig+0x114>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d013      	beq.n	8006b18 <TIM_Base_SetConfig+0x40>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af6:	d00f      	beq.n	8006b18 <TIM_Base_SetConfig+0x40>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a3d      	ldr	r2, [pc, #244]	; (8006bf0 <TIM_Base_SetConfig+0x118>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d00b      	beq.n	8006b18 <TIM_Base_SetConfig+0x40>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a3c      	ldr	r2, [pc, #240]	; (8006bf4 <TIM_Base_SetConfig+0x11c>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d007      	beq.n	8006b18 <TIM_Base_SetConfig+0x40>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a3b      	ldr	r2, [pc, #236]	; (8006bf8 <TIM_Base_SetConfig+0x120>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d003      	beq.n	8006b18 <TIM_Base_SetConfig+0x40>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a3a      	ldr	r2, [pc, #232]	; (8006bfc <TIM_Base_SetConfig+0x124>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d108      	bne.n	8006b2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a2f      	ldr	r2, [pc, #188]	; (8006bec <TIM_Base_SetConfig+0x114>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d02b      	beq.n	8006b8a <TIM_Base_SetConfig+0xb2>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b38:	d027      	beq.n	8006b8a <TIM_Base_SetConfig+0xb2>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a2c      	ldr	r2, [pc, #176]	; (8006bf0 <TIM_Base_SetConfig+0x118>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d023      	beq.n	8006b8a <TIM_Base_SetConfig+0xb2>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a2b      	ldr	r2, [pc, #172]	; (8006bf4 <TIM_Base_SetConfig+0x11c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d01f      	beq.n	8006b8a <TIM_Base_SetConfig+0xb2>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a2a      	ldr	r2, [pc, #168]	; (8006bf8 <TIM_Base_SetConfig+0x120>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d01b      	beq.n	8006b8a <TIM_Base_SetConfig+0xb2>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a29      	ldr	r2, [pc, #164]	; (8006bfc <TIM_Base_SetConfig+0x124>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d017      	beq.n	8006b8a <TIM_Base_SetConfig+0xb2>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a28      	ldr	r2, [pc, #160]	; (8006c00 <TIM_Base_SetConfig+0x128>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d013      	beq.n	8006b8a <TIM_Base_SetConfig+0xb2>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a27      	ldr	r2, [pc, #156]	; (8006c04 <TIM_Base_SetConfig+0x12c>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d00f      	beq.n	8006b8a <TIM_Base_SetConfig+0xb2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a26      	ldr	r2, [pc, #152]	; (8006c08 <TIM_Base_SetConfig+0x130>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d00b      	beq.n	8006b8a <TIM_Base_SetConfig+0xb2>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a25      	ldr	r2, [pc, #148]	; (8006c0c <TIM_Base_SetConfig+0x134>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d007      	beq.n	8006b8a <TIM_Base_SetConfig+0xb2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a24      	ldr	r2, [pc, #144]	; (8006c10 <TIM_Base_SetConfig+0x138>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d003      	beq.n	8006b8a <TIM_Base_SetConfig+0xb2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a23      	ldr	r2, [pc, #140]	; (8006c14 <TIM_Base_SetConfig+0x13c>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d108      	bne.n	8006b9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	689a      	ldr	r2, [r3, #8]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a0a      	ldr	r2, [pc, #40]	; (8006bec <TIM_Base_SetConfig+0x114>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d003      	beq.n	8006bd0 <TIM_Base_SetConfig+0xf8>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a0c      	ldr	r2, [pc, #48]	; (8006bfc <TIM_Base_SetConfig+0x124>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d103      	bne.n	8006bd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	691a      	ldr	r2, [r3, #16]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	615a      	str	r2, [r3, #20]
}
 8006bde:	bf00      	nop
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	40010000 	.word	0x40010000
 8006bf0:	40000400 	.word	0x40000400
 8006bf4:	40000800 	.word	0x40000800
 8006bf8:	40000c00 	.word	0x40000c00
 8006bfc:	40010400 	.word	0x40010400
 8006c00:	40014000 	.word	0x40014000
 8006c04:	40014400 	.word	0x40014400
 8006c08:	40014800 	.word	0x40014800
 8006c0c:	40001800 	.word	0x40001800
 8006c10:	40001c00 	.word	0x40001c00
 8006c14:	40002000 	.word	0x40002000

08006c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	f023 0201 	bic.w	r2, r3, #1
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f023 030a 	bic.w	r3, r3, #10
 8006c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	621a      	str	r2, [r3, #32]
}
 8006c6a:	bf00      	nop
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b087      	sub	sp, #28
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	60f8      	str	r0, [r7, #12]
 8006c7e:	60b9      	str	r1, [r7, #8]
 8006c80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	f023 0210 	bic.w	r2, r3, #16
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	031b      	lsls	r3, r3, #12
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	011b      	lsls	r3, r3, #4
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	621a      	str	r2, [r3, #32]
}
 8006cca:	bf00      	nop
 8006ccc:	371c      	adds	r7, #28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b085      	sub	sp, #20
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	f043 0307 	orr.w	r3, r3, #7
 8006cf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	609a      	str	r2, [r3, #8]
}
 8006d00:	bf00      	nop
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b087      	sub	sp, #28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	021a      	lsls	r2, r3, #8
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	431a      	orrs	r2, r3
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	697a      	ldr	r2, [r7, #20]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	609a      	str	r2, [r3, #8]
}
 8006d40:	bf00      	nop
 8006d42:	371c      	adds	r7, #28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d101      	bne.n	8006d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d60:	2302      	movs	r3, #2
 8006d62:	e05a      	b.n	8006e1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a21      	ldr	r2, [pc, #132]	; (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d022      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db0:	d01d      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a1d      	ldr	r2, [pc, #116]	; (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d018      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a1b      	ldr	r2, [pc, #108]	; (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d013      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a1a      	ldr	r2, [pc, #104]	; (8006e34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d00e      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a18      	ldr	r2, [pc, #96]	; (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d009      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a17      	ldr	r2, [pc, #92]	; (8006e3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d004      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a15      	ldr	r2, [pc, #84]	; (8006e40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d10c      	bne.n	8006e08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006df4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	40010000 	.word	0x40010000
 8006e2c:	40000400 	.word	0x40000400
 8006e30:	40000800 	.word	0x40000800
 8006e34:	40000c00 	.word	0x40000c00
 8006e38:	40010400 	.word	0x40010400
 8006e3c:	40014000 	.word	0x40014000
 8006e40:	40001800 	.word	0x40001800

08006e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e03f      	b.n	8006efe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d106      	bne.n	8006e98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7fb f8cc 	bl	8002030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2224      	movs	r2, #36	; 0x24
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68da      	ldr	r2, [r3, #12]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006eae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fe19 	bl	8007ae8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	691a      	ldr	r2, [r3, #16]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ec4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	695a      	ldr	r2, [r3, #20]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ed4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68da      	ldr	r2, [r3, #12]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ee4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b08a      	sub	sp, #40	; 0x28
 8006f0a:	af02      	add	r7, sp, #8
 8006f0c:	60f8      	str	r0, [r7, #12]
 8006f0e:	60b9      	str	r1, [r7, #8]
 8006f10:	603b      	str	r3, [r7, #0]
 8006f12:	4613      	mov	r3, r2
 8006f14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b20      	cmp	r3, #32
 8006f24:	d17c      	bne.n	8007020 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <HAL_UART_Transmit+0x2c>
 8006f2c:	88fb      	ldrh	r3, [r7, #6]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e075      	b.n	8007022 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d101      	bne.n	8006f44 <HAL_UART_Transmit+0x3e>
 8006f40:	2302      	movs	r3, #2
 8006f42:	e06e      	b.n	8007022 <HAL_UART_Transmit+0x11c>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2221      	movs	r2, #33	; 0x21
 8006f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f5a:	f7fb fb55 	bl	8002608 <HAL_GetTick>
 8006f5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	88fa      	ldrh	r2, [r7, #6]
 8006f64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	88fa      	ldrh	r2, [r7, #6]
 8006f6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f74:	d108      	bne.n	8006f88 <HAL_UART_Transmit+0x82>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d104      	bne.n	8006f88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	61bb      	str	r3, [r7, #24]
 8006f86:	e003      	b.n	8006f90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006f98:	e02a      	b.n	8006ff0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	2180      	movs	r1, #128	; 0x80
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 fb59 	bl	800765c <UART_WaitOnFlagUntilTimeout>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e036      	b.n	8007022 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10b      	bne.n	8006fd2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	3302      	adds	r3, #2
 8006fce:	61bb      	str	r3, [r7, #24]
 8006fd0:	e007      	b.n	8006fe2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	781a      	ldrb	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1cf      	bne.n	8006f9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2200      	movs	r2, #0
 8007002:	2140      	movs	r1, #64	; 0x40
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 fb29 	bl	800765c <UART_WaitOnFlagUntilTimeout>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d001      	beq.n	8007014 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e006      	b.n	8007022 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2220      	movs	r2, #32
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	e000      	b.n	8007022 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007020:	2302      	movs	r3, #2
  }
}
 8007022:	4618      	mov	r0, r3
 8007024:	3720      	adds	r7, #32
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800702a:	b480      	push	{r7}
 800702c:	b085      	sub	sp, #20
 800702e:	af00      	add	r7, sp, #0
 8007030:	60f8      	str	r0, [r7, #12]
 8007032:	60b9      	str	r1, [r7, #8]
 8007034:	4613      	mov	r3, r2
 8007036:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2b20      	cmp	r3, #32
 8007042:	d130      	bne.n	80070a6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d002      	beq.n	8007050 <HAL_UART_Transmit_IT+0x26>
 800704a:	88fb      	ldrh	r3, [r7, #6]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e029      	b.n	80070a8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800705a:	2b01      	cmp	r3, #1
 800705c:	d101      	bne.n	8007062 <HAL_UART_Transmit_IT+0x38>
 800705e:	2302      	movs	r3, #2
 8007060:	e022      	b.n	80070a8 <HAL_UART_Transmit_IT+0x7e>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	88fa      	ldrh	r2, [r7, #6]
 8007074:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	88fa      	ldrh	r2, [r7, #6]
 800707a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2221      	movs	r2, #33	; 0x21
 8007086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68da      	ldr	r2, [r3, #12]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80070a0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	e000      	b.n	80070a8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80070a6:	2302      	movs	r3, #2
  }
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3714      	adds	r7, #20
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	4613      	mov	r3, r2
 80070c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b20      	cmp	r3, #32
 80070cc:	d11d      	bne.n	800710a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <HAL_UART_Receive_IT+0x26>
 80070d4:	88fb      	ldrh	r3, [r7, #6]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e016      	b.n	800710c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d101      	bne.n	80070ec <HAL_UART_Receive_IT+0x38>
 80070e8:	2302      	movs	r3, #2
 80070ea:	e00f      	b.n	800710c <HAL_UART_Receive_IT+0x58>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80070fa:	88fb      	ldrh	r3, [r7, #6]
 80070fc:	461a      	mov	r2, r3
 80070fe:	68b9      	ldr	r1, [r7, #8]
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f000 fb19 	bl	8007738 <UART_Start_Receive_IT>
 8007106:	4603      	mov	r3, r0
 8007108:	e000      	b.n	800710c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800710a:	2302      	movs	r3, #2
  }
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b0ba      	sub	sp, #232	; 0xe8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800713a:	2300      	movs	r3, #0
 800713c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007140:	2300      	movs	r3, #0
 8007142:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800714a:	f003 030f 	and.w	r3, r3, #15
 800714e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007152:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10f      	bne.n	800717a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800715a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800715e:	f003 0320 	and.w	r3, r3, #32
 8007162:	2b00      	cmp	r3, #0
 8007164:	d009      	beq.n	800717a <HAL_UART_IRQHandler+0x66>
 8007166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800716a:	f003 0320 	and.w	r3, r3, #32
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fbfd 	bl	8007972 <UART_Receive_IT>
      return;
 8007178:	e256      	b.n	8007628 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800717a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 80de 	beq.w	8007340 <HAL_UART_IRQHandler+0x22c>
 8007184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007188:	f003 0301 	and.w	r3, r3, #1
 800718c:	2b00      	cmp	r3, #0
 800718e:	d106      	bne.n	800719e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007194:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 80d1 	beq.w	8007340 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800719e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00b      	beq.n	80071c2 <HAL_UART_IRQHandler+0xae>
 80071aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d005      	beq.n	80071c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ba:	f043 0201 	orr.w	r2, r3, #1
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c6:	f003 0304 	and.w	r3, r3, #4
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00b      	beq.n	80071e6 <HAL_UART_IRQHandler+0xd2>
 80071ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d005      	beq.n	80071e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	f043 0202 	orr.w	r2, r3, #2
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00b      	beq.n	800720a <HAL_UART_IRQHandler+0xf6>
 80071f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071f6:	f003 0301 	and.w	r3, r3, #1
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d005      	beq.n	800720a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	f043 0204 	orr.w	r2, r3, #4
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800720a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800720e:	f003 0308 	and.w	r3, r3, #8
 8007212:	2b00      	cmp	r3, #0
 8007214:	d011      	beq.n	800723a <HAL_UART_IRQHandler+0x126>
 8007216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800721a:	f003 0320 	and.w	r3, r3, #32
 800721e:	2b00      	cmp	r3, #0
 8007220:	d105      	bne.n	800722e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b00      	cmp	r3, #0
 800722c:	d005      	beq.n	800723a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007232:	f043 0208 	orr.w	r2, r3, #8
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 81ed 	beq.w	800761e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007248:	f003 0320 	and.w	r3, r3, #32
 800724c:	2b00      	cmp	r3, #0
 800724e:	d008      	beq.n	8007262 <HAL_UART_IRQHandler+0x14e>
 8007250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007254:	f003 0320 	and.w	r3, r3, #32
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fb88 	bl	8007972 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726c:	2b40      	cmp	r3, #64	; 0x40
 800726e:	bf0c      	ite	eq
 8007270:	2301      	moveq	r3, #1
 8007272:	2300      	movne	r3, #0
 8007274:	b2db      	uxtb	r3, r3
 8007276:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	f003 0308 	and.w	r3, r3, #8
 8007282:	2b00      	cmp	r3, #0
 8007284:	d103      	bne.n	800728e <HAL_UART_IRQHandler+0x17a>
 8007286:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800728a:	2b00      	cmp	r3, #0
 800728c:	d04f      	beq.n	800732e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fa90 	bl	80077b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729e:	2b40      	cmp	r3, #64	; 0x40
 80072a0:	d141      	bne.n	8007326 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3314      	adds	r3, #20
 80072a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80072b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3314      	adds	r3, #20
 80072ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80072ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80072d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80072da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072de:	e841 2300 	strex	r3, r2, [r1]
 80072e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80072e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1d9      	bne.n	80072a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d013      	beq.n	800731e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fa:	4a7d      	ldr	r2, [pc, #500]	; (80074f0 <HAL_UART_IRQHandler+0x3dc>)
 80072fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007302:	4618      	mov	r0, r3
 8007304:	f7fb fbb0 	bl	8002a68 <HAL_DMA_Abort_IT>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d016      	beq.n	800733c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007318:	4610      	mov	r0, r2
 800731a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800731c:	e00e      	b.n	800733c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f986 	bl	8007630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007324:	e00a      	b.n	800733c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f982 	bl	8007630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800732c:	e006      	b.n	800733c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f97e 	bl	8007630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800733a:	e170      	b.n	800761e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800733c:	bf00      	nop
    return;
 800733e:	e16e      	b.n	800761e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007344:	2b01      	cmp	r3, #1
 8007346:	f040 814a 	bne.w	80075de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800734a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800734e:	f003 0310 	and.w	r3, r3, #16
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 8143 	beq.w	80075de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800735c:	f003 0310 	and.w	r3, r3, #16
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 813c 	beq.w	80075de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007366:	2300      	movs	r3, #0
 8007368:	60bb      	str	r3, [r7, #8]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	60bb      	str	r3, [r7, #8]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	60bb      	str	r3, [r7, #8]
 800737a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007386:	2b40      	cmp	r3, #64	; 0x40
 8007388:	f040 80b4 	bne.w	80074f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007398:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 8140 	beq.w	8007622 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073aa:	429a      	cmp	r2, r3
 80073ac:	f080 8139 	bcs.w	8007622 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073c2:	f000 8088 	beq.w	80074d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	330c      	adds	r3, #12
 80073cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073d4:	e853 3f00 	ldrex	r3, [r3]
 80073d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80073dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	330c      	adds	r3, #12
 80073ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80073f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007402:	e841 2300 	strex	r3, r2, [r1]
 8007406:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800740a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1d9      	bne.n	80073c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3314      	adds	r3, #20
 8007418:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800741c:	e853 3f00 	ldrex	r3, [r3]
 8007420:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007424:	f023 0301 	bic.w	r3, r3, #1
 8007428:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3314      	adds	r3, #20
 8007432:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007436:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800743a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800743e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007442:	e841 2300 	strex	r3, r2, [r1]
 8007446:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007448:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1e1      	bne.n	8007412 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3314      	adds	r3, #20
 8007454:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007458:	e853 3f00 	ldrex	r3, [r3]
 800745c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800745e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007464:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3314      	adds	r3, #20
 800746e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007472:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007474:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007476:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007478:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800747a:	e841 2300 	strex	r3, r2, [r1]
 800747e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1e3      	bne.n	800744e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2220      	movs	r2, #32
 800748a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	330c      	adds	r3, #12
 800749a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800749e:	e853 3f00 	ldrex	r3, [r3]
 80074a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80074a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074a6:	f023 0310 	bic.w	r3, r3, #16
 80074aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	330c      	adds	r3, #12
 80074b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80074b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80074ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074c0:	e841 2300 	strex	r3, r2, [r1]
 80074c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80074c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1e3      	bne.n	8007494 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7fb fa59 	bl	8002988 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074de:	b29b      	uxth	r3, r3
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f8ac 	bl	8007644 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074ec:	e099      	b.n	8007622 <HAL_UART_IRQHandler+0x50e>
 80074ee:	bf00      	nop
 80074f0:	0800787b 	.word	0x0800787b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007508:	b29b      	uxth	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	f000 808b 	beq.w	8007626 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007510:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 8086 	beq.w	8007626 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	330c      	adds	r3, #12
 8007520:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007524:	e853 3f00 	ldrex	r3, [r3]
 8007528:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800752a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007530:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	330c      	adds	r3, #12
 800753a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800753e:	647a      	str	r2, [r7, #68]	; 0x44
 8007540:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007542:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007544:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007546:	e841 2300 	strex	r3, r2, [r1]
 800754a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800754c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1e3      	bne.n	800751a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3314      	adds	r3, #20
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	e853 3f00 	ldrex	r3, [r3]
 8007560:	623b      	str	r3, [r7, #32]
   return(result);
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	f023 0301 	bic.w	r3, r3, #1
 8007568:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	3314      	adds	r3, #20
 8007572:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007576:	633a      	str	r2, [r7, #48]	; 0x30
 8007578:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800757c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800757e:	e841 2300 	strex	r3, r2, [r1]
 8007582:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1e3      	bne.n	8007552 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2220      	movs	r2, #32
 800758e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	330c      	adds	r3, #12
 800759e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	e853 3f00 	ldrex	r3, [r3]
 80075a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f023 0310 	bic.w	r3, r3, #16
 80075ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	330c      	adds	r3, #12
 80075b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80075bc:	61fa      	str	r2, [r7, #28]
 80075be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c0:	69b9      	ldr	r1, [r7, #24]
 80075c2:	69fa      	ldr	r2, [r7, #28]
 80075c4:	e841 2300 	strex	r3, r2, [r1]
 80075c8:	617b      	str	r3, [r7, #20]
   return(result);
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1e3      	bne.n	8007598 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075d4:	4619      	mov	r1, r3
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f834 	bl	8007644 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075dc:	e023      	b.n	8007626 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d009      	beq.n	80075fe <HAL_UART_IRQHandler+0x4ea>
 80075ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f953 	bl	80078a2 <UART_Transmit_IT>
    return;
 80075fc:	e014      	b.n	8007628 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00e      	beq.n	8007628 <HAL_UART_IRQHandler+0x514>
 800760a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800760e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007612:	2b00      	cmp	r3, #0
 8007614:	d008      	beq.n	8007628 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f993 	bl	8007942 <UART_EndTransmit_IT>
    return;
 800761c:	e004      	b.n	8007628 <HAL_UART_IRQHandler+0x514>
    return;
 800761e:	bf00      	nop
 8007620:	e002      	b.n	8007628 <HAL_UART_IRQHandler+0x514>
      return;
 8007622:	bf00      	nop
 8007624:	e000      	b.n	8007628 <HAL_UART_IRQHandler+0x514>
      return;
 8007626:	bf00      	nop
  }
}
 8007628:	37e8      	adds	r7, #232	; 0xe8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop

08007630 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	460b      	mov	r3, r1
 800764e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b090      	sub	sp, #64	; 0x40
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	603b      	str	r3, [r7, #0]
 8007668:	4613      	mov	r3, r2
 800766a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800766c:	e050      	b.n	8007710 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800766e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007674:	d04c      	beq.n	8007710 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007678:	2b00      	cmp	r3, #0
 800767a:	d007      	beq.n	800768c <UART_WaitOnFlagUntilTimeout+0x30>
 800767c:	f7fa ffc4 	bl	8002608 <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007688:	429a      	cmp	r2, r3
 800768a:	d241      	bcs.n	8007710 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	330c      	adds	r3, #12
 8007692:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007696:	e853 3f00 	ldrex	r3, [r3]
 800769a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	330c      	adds	r3, #12
 80076aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076ac:	637a      	str	r2, [r7, #52]	; 0x34
 80076ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076b4:	e841 2300 	strex	r3, r2, [r1]
 80076b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80076ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1e5      	bne.n	800768c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3314      	adds	r3, #20
 80076c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	e853 3f00 	ldrex	r3, [r3]
 80076ce:	613b      	str	r3, [r7, #16]
   return(result);
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	f023 0301 	bic.w	r3, r3, #1
 80076d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3314      	adds	r3, #20
 80076de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076e0:	623a      	str	r2, [r7, #32]
 80076e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e4:	69f9      	ldr	r1, [r7, #28]
 80076e6:	6a3a      	ldr	r2, [r7, #32]
 80076e8:	e841 2300 	strex	r3, r2, [r1]
 80076ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1e5      	bne.n	80076c0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2220      	movs	r2, #32
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2220      	movs	r2, #32
 8007700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e00f      	b.n	8007730 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	4013      	ands	r3, r2
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	429a      	cmp	r2, r3
 800771e:	bf0c      	ite	eq
 8007720:	2301      	moveq	r3, #1
 8007722:	2300      	movne	r3, #0
 8007724:	b2db      	uxtb	r3, r3
 8007726:	461a      	mov	r2, r3
 8007728:	79fb      	ldrb	r3, [r7, #7]
 800772a:	429a      	cmp	r2, r3
 800772c:	d09f      	beq.n	800766e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3740      	adds	r7, #64	; 0x40
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	4613      	mov	r3, r2
 8007744:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	88fa      	ldrh	r2, [r7, #6]
 8007750:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	88fa      	ldrh	r2, [r7, #6]
 8007756:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2222      	movs	r2, #34	; 0x22
 8007762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d007      	beq.n	8007786 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68da      	ldr	r2, [r3, #12]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007784:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	695a      	ldr	r2, [r3, #20]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f042 0201 	orr.w	r2, r2, #1
 8007794:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0220 	orr.w	r2, r2, #32
 80077a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b095      	sub	sp, #84	; 0x54
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	330c      	adds	r3, #12
 80077c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c6:	e853 3f00 	ldrex	r3, [r3]
 80077ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	330c      	adds	r3, #12
 80077da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077dc:	643a      	str	r2, [r7, #64]	; 0x40
 80077de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077e4:	e841 2300 	strex	r3, r2, [r1]
 80077e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1e5      	bne.n	80077bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3314      	adds	r3, #20
 80077f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	e853 3f00 	ldrex	r3, [r3]
 80077fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	f023 0301 	bic.w	r3, r3, #1
 8007806:	64bb      	str	r3, [r7, #72]	; 0x48
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3314      	adds	r3, #20
 800780e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007810:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007818:	e841 2300 	strex	r3, r2, [r1]
 800781c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1e5      	bne.n	80077f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007828:	2b01      	cmp	r3, #1
 800782a:	d119      	bne.n	8007860 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	330c      	adds	r3, #12
 8007832:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	e853 3f00 	ldrex	r3, [r3]
 800783a:	60bb      	str	r3, [r7, #8]
   return(result);
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f023 0310 	bic.w	r3, r3, #16
 8007842:	647b      	str	r3, [r7, #68]	; 0x44
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	330c      	adds	r3, #12
 800784a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800784c:	61ba      	str	r2, [r7, #24]
 800784e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007850:	6979      	ldr	r1, [r7, #20]
 8007852:	69ba      	ldr	r2, [r7, #24]
 8007854:	e841 2300 	strex	r3, r2, [r1]
 8007858:	613b      	str	r3, [r7, #16]
   return(result);
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1e5      	bne.n	800782c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800786e:	bf00      	nop
 8007870:	3754      	adds	r7, #84	; 0x54
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007886:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f7ff fecb 	bl	8007630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800789a:	bf00      	nop
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078a2:	b480      	push	{r7}
 80078a4:	b085      	sub	sp, #20
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b21      	cmp	r3, #33	; 0x21
 80078b4:	d13e      	bne.n	8007934 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078be:	d114      	bne.n	80078ea <UART_Transmit_IT+0x48>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d110      	bne.n	80078ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a1b      	ldr	r3, [r3, #32]
 80078cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	461a      	mov	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	1c9a      	adds	r2, r3, #2
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	621a      	str	r2, [r3, #32]
 80078e8:	e008      	b.n	80078fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	1c59      	adds	r1, r3, #1
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	6211      	str	r1, [r2, #32]
 80078f4:	781a      	ldrb	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007900:	b29b      	uxth	r3, r3
 8007902:	3b01      	subs	r3, #1
 8007904:	b29b      	uxth	r3, r3
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	4619      	mov	r1, r3
 800790a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10f      	bne.n	8007930 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68da      	ldr	r2, [r3, #12]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800791e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68da      	ldr	r2, [r3, #12]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800792e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007930:	2300      	movs	r3, #0
 8007932:	e000      	b.n	8007936 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007934:	2302      	movs	r3, #2
  }
}
 8007936:	4618      	mov	r0, r3
 8007938:	3714      	adds	r7, #20
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b082      	sub	sp, #8
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68da      	ldr	r2, [r3, #12]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007958:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2220      	movs	r2, #32
 800795e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7f9 fd20 	bl	80013a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b08c      	sub	sp, #48	; 0x30
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b22      	cmp	r3, #34	; 0x22
 8007984:	f040 80ab 	bne.w	8007ade <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007990:	d117      	bne.n	80079c2 <UART_Receive_IT+0x50>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d113      	bne.n	80079c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800799a:	2300      	movs	r3, #0
 800799c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ba:	1c9a      	adds	r2, r3, #2
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	629a      	str	r2, [r3, #40]	; 0x28
 80079c0:	e026      	b.n	8007a10 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80079c8:	2300      	movs	r3, #0
 80079ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d4:	d007      	beq.n	80079e6 <UART_Receive_IT+0x74>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10a      	bne.n	80079f4 <UART_Receive_IT+0x82>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d106      	bne.n	80079f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f0:	701a      	strb	r2, [r3, #0]
 80079f2:	e008      	b.n	8007a06 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0a:	1c5a      	adds	r2, r3, #1
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	3b01      	subs	r3, #1
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d15a      	bne.n	8007ada <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68da      	ldr	r2, [r3, #12]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f022 0220 	bic.w	r2, r2, #32
 8007a32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68da      	ldr	r2, [r3, #12]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	695a      	ldr	r2, [r3, #20]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f022 0201 	bic.w	r2, r2, #1
 8007a52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2220      	movs	r2, #32
 8007a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d135      	bne.n	8007ad0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	330c      	adds	r3, #12
 8007a70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	e853 3f00 	ldrex	r3, [r3]
 8007a78:	613b      	str	r3, [r7, #16]
   return(result);
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	f023 0310 	bic.w	r3, r3, #16
 8007a80:	627b      	str	r3, [r7, #36]	; 0x24
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	330c      	adds	r3, #12
 8007a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a8a:	623a      	str	r2, [r7, #32]
 8007a8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8e:	69f9      	ldr	r1, [r7, #28]
 8007a90:	6a3a      	ldr	r2, [r7, #32]
 8007a92:	e841 2300 	strex	r3, r2, [r1]
 8007a96:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1e5      	bne.n	8007a6a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0310 	and.w	r3, r3, #16
 8007aa8:	2b10      	cmp	r3, #16
 8007aaa:	d10a      	bne.n	8007ac2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007aac:	2300      	movs	r3, #0
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	60fb      	str	r3, [r7, #12]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	60fb      	str	r3, [r7, #12]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f7ff fdbb 	bl	8007644 <HAL_UARTEx_RxEventCallback>
 8007ace:	e002      	b.n	8007ad6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7f9 fc4b 	bl	800136c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	e002      	b.n	8007ae0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	e000      	b.n	8007ae0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007ade:	2302      	movs	r3, #2
  }
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3730      	adds	r7, #48	; 0x30
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007aec:	b0c0      	sub	sp, #256	; 0x100
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b04:	68d9      	ldr	r1, [r3, #12]
 8007b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	ea40 0301 	orr.w	r3, r0, r1
 8007b10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	431a      	orrs	r2, r3
 8007b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b40:	f021 010c 	bic.w	r1, r1, #12
 8007b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b4e:	430b      	orrs	r3, r1
 8007b50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b62:	6999      	ldr	r1, [r3, #24]
 8007b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	ea40 0301 	orr.w	r3, r0, r1
 8007b6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	4b8f      	ldr	r3, [pc, #572]	; (8007db4 <UART_SetConfig+0x2cc>)
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d005      	beq.n	8007b88 <UART_SetConfig+0xa0>
 8007b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	4b8d      	ldr	r3, [pc, #564]	; (8007db8 <UART_SetConfig+0x2d0>)
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d104      	bne.n	8007b92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b88:	f7fd fea8 	bl	80058dc <HAL_RCC_GetPCLK2Freq>
 8007b8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007b90:	e003      	b.n	8007b9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b92:	f7fd fe8f 	bl	80058b4 <HAL_RCC_GetPCLK1Freq>
 8007b96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ba4:	f040 810c 	bne.w	8007dc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ba8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bac:	2200      	movs	r2, #0
 8007bae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007bb2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007bb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007bba:	4622      	mov	r2, r4
 8007bbc:	462b      	mov	r3, r5
 8007bbe:	1891      	adds	r1, r2, r2
 8007bc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8007bc2:	415b      	adcs	r3, r3
 8007bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007bca:	4621      	mov	r1, r4
 8007bcc:	eb12 0801 	adds.w	r8, r2, r1
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	eb43 0901 	adc.w	r9, r3, r1
 8007bd6:	f04f 0200 	mov.w	r2, #0
 8007bda:	f04f 0300 	mov.w	r3, #0
 8007bde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007be2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007be6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007bea:	4690      	mov	r8, r2
 8007bec:	4699      	mov	r9, r3
 8007bee:	4623      	mov	r3, r4
 8007bf0:	eb18 0303 	adds.w	r3, r8, r3
 8007bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007bf8:	462b      	mov	r3, r5
 8007bfa:	eb49 0303 	adc.w	r3, r9, r3
 8007bfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007c12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007c16:	460b      	mov	r3, r1
 8007c18:	18db      	adds	r3, r3, r3
 8007c1a:	653b      	str	r3, [r7, #80]	; 0x50
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	eb42 0303 	adc.w	r3, r2, r3
 8007c22:	657b      	str	r3, [r7, #84]	; 0x54
 8007c24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007c28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007c2c:	f7f8 fb38 	bl	80002a0 <__aeabi_uldivmod>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	4b61      	ldr	r3, [pc, #388]	; (8007dbc <UART_SetConfig+0x2d4>)
 8007c36:	fba3 2302 	umull	r2, r3, r3, r2
 8007c3a:	095b      	lsrs	r3, r3, #5
 8007c3c:	011c      	lsls	r4, r3, #4
 8007c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c42:	2200      	movs	r2, #0
 8007c44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007c4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007c50:	4642      	mov	r2, r8
 8007c52:	464b      	mov	r3, r9
 8007c54:	1891      	adds	r1, r2, r2
 8007c56:	64b9      	str	r1, [r7, #72]	; 0x48
 8007c58:	415b      	adcs	r3, r3
 8007c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007c60:	4641      	mov	r1, r8
 8007c62:	eb12 0a01 	adds.w	sl, r2, r1
 8007c66:	4649      	mov	r1, r9
 8007c68:	eb43 0b01 	adc.w	fp, r3, r1
 8007c6c:	f04f 0200 	mov.w	r2, #0
 8007c70:	f04f 0300 	mov.w	r3, #0
 8007c74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c80:	4692      	mov	sl, r2
 8007c82:	469b      	mov	fp, r3
 8007c84:	4643      	mov	r3, r8
 8007c86:	eb1a 0303 	adds.w	r3, sl, r3
 8007c8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c8e:	464b      	mov	r3, r9
 8007c90:	eb4b 0303 	adc.w	r3, fp, r3
 8007c94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ca4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007ca8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007cac:	460b      	mov	r3, r1
 8007cae:	18db      	adds	r3, r3, r3
 8007cb0:	643b      	str	r3, [r7, #64]	; 0x40
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	eb42 0303 	adc.w	r3, r2, r3
 8007cb8:	647b      	str	r3, [r7, #68]	; 0x44
 8007cba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007cbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007cc2:	f7f8 faed 	bl	80002a0 <__aeabi_uldivmod>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4611      	mov	r1, r2
 8007ccc:	4b3b      	ldr	r3, [pc, #236]	; (8007dbc <UART_SetConfig+0x2d4>)
 8007cce:	fba3 2301 	umull	r2, r3, r3, r1
 8007cd2:	095b      	lsrs	r3, r3, #5
 8007cd4:	2264      	movs	r2, #100	; 0x64
 8007cd6:	fb02 f303 	mul.w	r3, r2, r3
 8007cda:	1acb      	subs	r3, r1, r3
 8007cdc:	00db      	lsls	r3, r3, #3
 8007cde:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007ce2:	4b36      	ldr	r3, [pc, #216]	; (8007dbc <UART_SetConfig+0x2d4>)
 8007ce4:	fba3 2302 	umull	r2, r3, r3, r2
 8007ce8:	095b      	lsrs	r3, r3, #5
 8007cea:	005b      	lsls	r3, r3, #1
 8007cec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007cf0:	441c      	add	r4, r3
 8007cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cfc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007d00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007d04:	4642      	mov	r2, r8
 8007d06:	464b      	mov	r3, r9
 8007d08:	1891      	adds	r1, r2, r2
 8007d0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d0c:	415b      	adcs	r3, r3
 8007d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d14:	4641      	mov	r1, r8
 8007d16:	1851      	adds	r1, r2, r1
 8007d18:	6339      	str	r1, [r7, #48]	; 0x30
 8007d1a:	4649      	mov	r1, r9
 8007d1c:	414b      	adcs	r3, r1
 8007d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d20:	f04f 0200 	mov.w	r2, #0
 8007d24:	f04f 0300 	mov.w	r3, #0
 8007d28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007d2c:	4659      	mov	r1, fp
 8007d2e:	00cb      	lsls	r3, r1, #3
 8007d30:	4651      	mov	r1, sl
 8007d32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d36:	4651      	mov	r1, sl
 8007d38:	00ca      	lsls	r2, r1, #3
 8007d3a:	4610      	mov	r0, r2
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	4603      	mov	r3, r0
 8007d40:	4642      	mov	r2, r8
 8007d42:	189b      	adds	r3, r3, r2
 8007d44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d48:	464b      	mov	r3, r9
 8007d4a:	460a      	mov	r2, r1
 8007d4c:	eb42 0303 	adc.w	r3, r2, r3
 8007d50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007d64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007d68:	460b      	mov	r3, r1
 8007d6a:	18db      	adds	r3, r3, r3
 8007d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d6e:	4613      	mov	r3, r2
 8007d70:	eb42 0303 	adc.w	r3, r2, r3
 8007d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007d7e:	f7f8 fa8f 	bl	80002a0 <__aeabi_uldivmod>
 8007d82:	4602      	mov	r2, r0
 8007d84:	460b      	mov	r3, r1
 8007d86:	4b0d      	ldr	r3, [pc, #52]	; (8007dbc <UART_SetConfig+0x2d4>)
 8007d88:	fba3 1302 	umull	r1, r3, r3, r2
 8007d8c:	095b      	lsrs	r3, r3, #5
 8007d8e:	2164      	movs	r1, #100	; 0x64
 8007d90:	fb01 f303 	mul.w	r3, r1, r3
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	00db      	lsls	r3, r3, #3
 8007d98:	3332      	adds	r3, #50	; 0x32
 8007d9a:	4a08      	ldr	r2, [pc, #32]	; (8007dbc <UART_SetConfig+0x2d4>)
 8007d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007da0:	095b      	lsrs	r3, r3, #5
 8007da2:	f003 0207 	and.w	r2, r3, #7
 8007da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4422      	add	r2, r4
 8007dae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007db0:	e105      	b.n	8007fbe <UART_SetConfig+0x4d6>
 8007db2:	bf00      	nop
 8007db4:	40011000 	.word	0x40011000
 8007db8:	40011400 	.word	0x40011400
 8007dbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007dc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007dca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007dce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007dd2:	4642      	mov	r2, r8
 8007dd4:	464b      	mov	r3, r9
 8007dd6:	1891      	adds	r1, r2, r2
 8007dd8:	6239      	str	r1, [r7, #32]
 8007dda:	415b      	adcs	r3, r3
 8007ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8007dde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007de2:	4641      	mov	r1, r8
 8007de4:	1854      	adds	r4, r2, r1
 8007de6:	4649      	mov	r1, r9
 8007de8:	eb43 0501 	adc.w	r5, r3, r1
 8007dec:	f04f 0200 	mov.w	r2, #0
 8007df0:	f04f 0300 	mov.w	r3, #0
 8007df4:	00eb      	lsls	r3, r5, #3
 8007df6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007dfa:	00e2      	lsls	r2, r4, #3
 8007dfc:	4614      	mov	r4, r2
 8007dfe:	461d      	mov	r5, r3
 8007e00:	4643      	mov	r3, r8
 8007e02:	18e3      	adds	r3, r4, r3
 8007e04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e08:	464b      	mov	r3, r9
 8007e0a:	eb45 0303 	adc.w	r3, r5, r3
 8007e0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e22:	f04f 0200 	mov.w	r2, #0
 8007e26:	f04f 0300 	mov.w	r3, #0
 8007e2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007e2e:	4629      	mov	r1, r5
 8007e30:	008b      	lsls	r3, r1, #2
 8007e32:	4621      	mov	r1, r4
 8007e34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e38:	4621      	mov	r1, r4
 8007e3a:	008a      	lsls	r2, r1, #2
 8007e3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007e40:	f7f8 fa2e 	bl	80002a0 <__aeabi_uldivmod>
 8007e44:	4602      	mov	r2, r0
 8007e46:	460b      	mov	r3, r1
 8007e48:	4b60      	ldr	r3, [pc, #384]	; (8007fcc <UART_SetConfig+0x4e4>)
 8007e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8007e4e:	095b      	lsrs	r3, r3, #5
 8007e50:	011c      	lsls	r4, r3, #4
 8007e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e56:	2200      	movs	r2, #0
 8007e58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007e60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007e64:	4642      	mov	r2, r8
 8007e66:	464b      	mov	r3, r9
 8007e68:	1891      	adds	r1, r2, r2
 8007e6a:	61b9      	str	r1, [r7, #24]
 8007e6c:	415b      	adcs	r3, r3
 8007e6e:	61fb      	str	r3, [r7, #28]
 8007e70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e74:	4641      	mov	r1, r8
 8007e76:	1851      	adds	r1, r2, r1
 8007e78:	6139      	str	r1, [r7, #16]
 8007e7a:	4649      	mov	r1, r9
 8007e7c:	414b      	adcs	r3, r1
 8007e7e:	617b      	str	r3, [r7, #20]
 8007e80:	f04f 0200 	mov.w	r2, #0
 8007e84:	f04f 0300 	mov.w	r3, #0
 8007e88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e8c:	4659      	mov	r1, fp
 8007e8e:	00cb      	lsls	r3, r1, #3
 8007e90:	4651      	mov	r1, sl
 8007e92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e96:	4651      	mov	r1, sl
 8007e98:	00ca      	lsls	r2, r1, #3
 8007e9a:	4610      	mov	r0, r2
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	4642      	mov	r2, r8
 8007ea2:	189b      	adds	r3, r3, r2
 8007ea4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	460a      	mov	r2, r1
 8007eac:	eb42 0303 	adc.w	r3, r2, r3
 8007eb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ebe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007ec0:	f04f 0200 	mov.w	r2, #0
 8007ec4:	f04f 0300 	mov.w	r3, #0
 8007ec8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007ecc:	4649      	mov	r1, r9
 8007ece:	008b      	lsls	r3, r1, #2
 8007ed0:	4641      	mov	r1, r8
 8007ed2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ed6:	4641      	mov	r1, r8
 8007ed8:	008a      	lsls	r2, r1, #2
 8007eda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007ede:	f7f8 f9df 	bl	80002a0 <__aeabi_uldivmod>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4b39      	ldr	r3, [pc, #228]	; (8007fcc <UART_SetConfig+0x4e4>)
 8007ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8007eec:	095b      	lsrs	r3, r3, #5
 8007eee:	2164      	movs	r1, #100	; 0x64
 8007ef0:	fb01 f303 	mul.w	r3, r1, r3
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	011b      	lsls	r3, r3, #4
 8007ef8:	3332      	adds	r3, #50	; 0x32
 8007efa:	4a34      	ldr	r2, [pc, #208]	; (8007fcc <UART_SetConfig+0x4e4>)
 8007efc:	fba2 2303 	umull	r2, r3, r2, r3
 8007f00:	095b      	lsrs	r3, r3, #5
 8007f02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f06:	441c      	add	r4, r3
 8007f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	673b      	str	r3, [r7, #112]	; 0x70
 8007f10:	677a      	str	r2, [r7, #116]	; 0x74
 8007f12:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007f16:	4642      	mov	r2, r8
 8007f18:	464b      	mov	r3, r9
 8007f1a:	1891      	adds	r1, r2, r2
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	415b      	adcs	r3, r3
 8007f20:	60fb      	str	r3, [r7, #12]
 8007f22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f26:	4641      	mov	r1, r8
 8007f28:	1851      	adds	r1, r2, r1
 8007f2a:	6039      	str	r1, [r7, #0]
 8007f2c:	4649      	mov	r1, r9
 8007f2e:	414b      	adcs	r3, r1
 8007f30:	607b      	str	r3, [r7, #4]
 8007f32:	f04f 0200 	mov.w	r2, #0
 8007f36:	f04f 0300 	mov.w	r3, #0
 8007f3a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f3e:	4659      	mov	r1, fp
 8007f40:	00cb      	lsls	r3, r1, #3
 8007f42:	4651      	mov	r1, sl
 8007f44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f48:	4651      	mov	r1, sl
 8007f4a:	00ca      	lsls	r2, r1, #3
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	4619      	mov	r1, r3
 8007f50:	4603      	mov	r3, r0
 8007f52:	4642      	mov	r2, r8
 8007f54:	189b      	adds	r3, r3, r2
 8007f56:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f58:	464b      	mov	r3, r9
 8007f5a:	460a      	mov	r2, r1
 8007f5c:	eb42 0303 	adc.w	r3, r2, r3
 8007f60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	663b      	str	r3, [r7, #96]	; 0x60
 8007f6c:	667a      	str	r2, [r7, #100]	; 0x64
 8007f6e:	f04f 0200 	mov.w	r2, #0
 8007f72:	f04f 0300 	mov.w	r3, #0
 8007f76:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007f7a:	4649      	mov	r1, r9
 8007f7c:	008b      	lsls	r3, r1, #2
 8007f7e:	4641      	mov	r1, r8
 8007f80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f84:	4641      	mov	r1, r8
 8007f86:	008a      	lsls	r2, r1, #2
 8007f88:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007f8c:	f7f8 f988 	bl	80002a0 <__aeabi_uldivmod>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	4b0d      	ldr	r3, [pc, #52]	; (8007fcc <UART_SetConfig+0x4e4>)
 8007f96:	fba3 1302 	umull	r1, r3, r3, r2
 8007f9a:	095b      	lsrs	r3, r3, #5
 8007f9c:	2164      	movs	r1, #100	; 0x64
 8007f9e:	fb01 f303 	mul.w	r3, r1, r3
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	011b      	lsls	r3, r3, #4
 8007fa6:	3332      	adds	r3, #50	; 0x32
 8007fa8:	4a08      	ldr	r2, [pc, #32]	; (8007fcc <UART_SetConfig+0x4e4>)
 8007faa:	fba2 2303 	umull	r2, r3, r2, r3
 8007fae:	095b      	lsrs	r3, r3, #5
 8007fb0:	f003 020f 	and.w	r2, r3, #15
 8007fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4422      	add	r2, r4
 8007fbc:	609a      	str	r2, [r3, #8]
}
 8007fbe:	bf00      	nop
 8007fc0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fca:	bf00      	nop
 8007fcc:	51eb851f 	.word	0x51eb851f

08007fd0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fd0:	b084      	sub	sp, #16
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b084      	sub	sp, #16
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
 8007fda:	f107 001c 	add.w	r0, r7, #28
 8007fde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d122      	bne.n	800802e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008012:	2b01      	cmp	r3, #1
 8008014:	d105      	bne.n	8008022 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f9c0 	bl	80083a8 <USB_CoreReset>
 8008028:	4603      	mov	r3, r0
 800802a:	73fb      	strb	r3, [r7, #15]
 800802c:	e01a      	b.n	8008064 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f9b4 	bl	80083a8 <USB_CoreReset>
 8008040:	4603      	mov	r3, r0
 8008042:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008046:	2b00      	cmp	r3, #0
 8008048:	d106      	bne.n	8008058 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	639a      	str	r2, [r3, #56]	; 0x38
 8008056:	e005      	b.n	8008064 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008066:	2b01      	cmp	r3, #1
 8008068:	d10b      	bne.n	8008082 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	f043 0206 	orr.w	r2, r3, #6
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f043 0220 	orr.w	r2, r3, #32
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008082:	7bfb      	ldrb	r3, [r7, #15]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800808e:	b004      	add	sp, #16
 8008090:	4770      	bx	lr

08008092 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008092:	b480      	push	{r7}
 8008094:	b083      	sub	sp, #12
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f043 0201 	orr.w	r2, r3, #1
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	f023 0201 	bic.w	r2, r3, #1
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b084      	sub	sp, #16
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	460b      	mov	r3, r1
 80080e0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80080f2:	78fb      	ldrb	r3, [r7, #3]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d115      	bne.n	8008124 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008104:	2001      	movs	r0, #1
 8008106:	f7fa fa8b 	bl	8002620 <HAL_Delay>
      ms++;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	3301      	adds	r3, #1
 800810e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f93a 	bl	800838a <USB_GetMode>
 8008116:	4603      	mov	r3, r0
 8008118:	2b01      	cmp	r3, #1
 800811a:	d01e      	beq.n	800815a <USB_SetCurrentMode+0x84>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2b31      	cmp	r3, #49	; 0x31
 8008120:	d9f0      	bls.n	8008104 <USB_SetCurrentMode+0x2e>
 8008122:	e01a      	b.n	800815a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008124:	78fb      	ldrb	r3, [r7, #3]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d115      	bne.n	8008156 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008136:	2001      	movs	r0, #1
 8008138:	f7fa fa72 	bl	8002620 <HAL_Delay>
      ms++;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	3301      	adds	r3, #1
 8008140:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f921 	bl	800838a <USB_GetMode>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d005      	beq.n	800815a <USB_SetCurrentMode+0x84>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2b31      	cmp	r3, #49	; 0x31
 8008152:	d9f0      	bls.n	8008136 <USB_SetCurrentMode+0x60>
 8008154:	e001      	b.n	800815a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e005      	b.n	8008166 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b32      	cmp	r3, #50	; 0x32
 800815e:	d101      	bne.n	8008164 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e000      	b.n	8008166 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
	...

08008170 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800817a:	2300      	movs	r3, #0
 800817c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	3301      	adds	r3, #1
 8008182:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	4a13      	ldr	r2, [pc, #76]	; (80081d4 <USB_FlushTxFifo+0x64>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d901      	bls.n	8008190 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e01b      	b.n	80081c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	2b00      	cmp	r3, #0
 8008196:	daf2      	bge.n	800817e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008198:	2300      	movs	r3, #0
 800819a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	019b      	lsls	r3, r3, #6
 80081a0:	f043 0220 	orr.w	r2, r3, #32
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	3301      	adds	r3, #1
 80081ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	4a08      	ldr	r2, [pc, #32]	; (80081d4 <USB_FlushTxFifo+0x64>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d901      	bls.n	80081ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e006      	b.n	80081c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	f003 0320 	and.w	r3, r3, #32
 80081c2:	2b20      	cmp	r3, #32
 80081c4:	d0f0      	beq.n	80081a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
 80081d4:	00030d40 	.word	0x00030d40

080081d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081e0:	2300      	movs	r3, #0
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	3301      	adds	r3, #1
 80081e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	4a11      	ldr	r2, [pc, #68]	; (8008234 <USB_FlushRxFifo+0x5c>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d901      	bls.n	80081f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e018      	b.n	8008228 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	daf2      	bge.n	80081e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80081fe:	2300      	movs	r3, #0
 8008200:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2210      	movs	r2, #16
 8008206:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	3301      	adds	r3, #1
 800820c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	4a08      	ldr	r2, [pc, #32]	; (8008234 <USB_FlushRxFifo+0x5c>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d901      	bls.n	800821a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008216:	2303      	movs	r3, #3
 8008218:	e006      	b.n	8008228 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	f003 0310 	and.w	r3, r3, #16
 8008222:	2b10      	cmp	r3, #16
 8008224:	d0f0      	beq.n	8008208 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	00030d40 	.word	0x00030d40

08008238 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008238:	b480      	push	{r7}
 800823a:	b089      	sub	sp, #36	; 0x24
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	4611      	mov	r1, r2
 8008244:	461a      	mov	r2, r3
 8008246:	460b      	mov	r3, r1
 8008248:	71fb      	strb	r3, [r7, #7]
 800824a:	4613      	mov	r3, r2
 800824c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008256:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800825a:	2b00      	cmp	r3, #0
 800825c:	d123      	bne.n	80082a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800825e:	88bb      	ldrh	r3, [r7, #4]
 8008260:	3303      	adds	r3, #3
 8008262:	089b      	lsrs	r3, r3, #2
 8008264:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008266:	2300      	movs	r3, #0
 8008268:	61bb      	str	r3, [r7, #24]
 800826a:	e018      	b.n	800829e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800826c:	79fb      	ldrb	r3, [r7, #7]
 800826e:	031a      	lsls	r2, r3, #12
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	4413      	add	r3, r2
 8008274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008278:	461a      	mov	r2, r3
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	3301      	adds	r3, #1
 8008284:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	3301      	adds	r3, #1
 800828a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	3301      	adds	r3, #1
 8008290:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	3301      	adds	r3, #1
 8008296:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	3301      	adds	r3, #1
 800829c:	61bb      	str	r3, [r7, #24]
 800829e:	69ba      	ldr	r2, [r7, #24]
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d3e2      	bcc.n	800826c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3724      	adds	r7, #36	; 0x24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b08b      	sub	sp, #44	; 0x2c
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	4613      	mov	r3, r2
 80082c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80082ca:	88fb      	ldrh	r3, [r7, #6]
 80082cc:	089b      	lsrs	r3, r3, #2
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80082d2:	88fb      	ldrh	r3, [r7, #6]
 80082d4:	f003 0303 	and.w	r3, r3, #3
 80082d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80082da:	2300      	movs	r3, #0
 80082dc:	623b      	str	r3, [r7, #32]
 80082de:	e014      	b.n	800830a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80082ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ee:	3301      	adds	r3, #1
 80082f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	3301      	adds	r3, #1
 80082f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	3301      	adds	r3, #1
 80082fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	3301      	adds	r3, #1
 8008302:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008304:	6a3b      	ldr	r3, [r7, #32]
 8008306:	3301      	adds	r3, #1
 8008308:	623b      	str	r3, [r7, #32]
 800830a:	6a3a      	ldr	r2, [r7, #32]
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	429a      	cmp	r2, r3
 8008310:	d3e6      	bcc.n	80082e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008312:	8bfb      	ldrh	r3, [r7, #30]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d01e      	beq.n	8008356 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008318:	2300      	movs	r3, #0
 800831a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008322:	461a      	mov	r2, r3
 8008324:	f107 0310 	add.w	r3, r7, #16
 8008328:	6812      	ldr	r2, [r2, #0]
 800832a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	6a3b      	ldr	r3, [r7, #32]
 8008330:	b2db      	uxtb	r3, r3
 8008332:	00db      	lsls	r3, r3, #3
 8008334:	fa22 f303 	lsr.w	r3, r2, r3
 8008338:	b2da      	uxtb	r2, r3
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	701a      	strb	r2, [r3, #0]
      i++;
 800833e:	6a3b      	ldr	r3, [r7, #32]
 8008340:	3301      	adds	r3, #1
 8008342:	623b      	str	r3, [r7, #32]
      pDest++;
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	3301      	adds	r3, #1
 8008348:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800834a:	8bfb      	ldrh	r3, [r7, #30]
 800834c:	3b01      	subs	r3, #1
 800834e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008350:	8bfb      	ldrh	r3, [r7, #30]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1ea      	bne.n	800832c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008358:	4618      	mov	r0, r3
 800835a:	372c      	adds	r7, #44	; 0x2c
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	4013      	ands	r3, r2
 800837a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800837c:	68fb      	ldr	r3, [r7, #12]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3714      	adds	r7, #20
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800838a:	b480      	push	{r7}
 800838c:	b083      	sub	sp, #12
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	f003 0301 	and.w	r3, r3, #1
}
 800839a:	4618      	mov	r0, r3
 800839c:	370c      	adds	r7, #12
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
	...

080083a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083b0:	2300      	movs	r3, #0
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	3301      	adds	r3, #1
 80083b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	4a13      	ldr	r2, [pc, #76]	; (800840c <USB_CoreReset+0x64>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d901      	bls.n	80083c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e01b      	b.n	80083fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	daf2      	bge.n	80083b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80083ce:	2300      	movs	r3, #0
 80083d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	f043 0201 	orr.w	r2, r3, #1
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	3301      	adds	r3, #1
 80083e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	4a09      	ldr	r2, [pc, #36]	; (800840c <USB_CoreReset+0x64>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d901      	bls.n	80083f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80083ec:	2303      	movs	r3, #3
 80083ee:	e006      	b.n	80083fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d0f0      	beq.n	80083de <USB_CoreReset+0x36>

  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	00030d40 	.word	0x00030d40

08008410 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008410:	b084      	sub	sp, #16
 8008412:	b580      	push	{r7, lr}
 8008414:	b086      	sub	sp, #24
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800841e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008422:	2300      	movs	r3, #0
 8008424:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008430:	461a      	mov	r2, r3
 8008432:	2300      	movs	r3, #0
 8008434:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008446:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008452:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800845e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008462:	2b00      	cmp	r3, #0
 8008464:	d018      	beq.n	8008498 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008468:	2b01      	cmp	r3, #1
 800846a:	d10a      	bne.n	8008482 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800847a:	f043 0304 	orr.w	r3, r3, #4
 800847e:	6013      	str	r3, [r2, #0]
 8008480:	e014      	b.n	80084ac <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008490:	f023 0304 	bic.w	r3, r3, #4
 8008494:	6013      	str	r3, [r2, #0]
 8008496:	e009      	b.n	80084ac <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80084a6:	f023 0304 	bic.w	r3, r3, #4
 80084aa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80084ac:	2110      	movs	r1, #16
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7ff fe5e 	bl	8008170 <USB_FlushTxFifo>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7ff fe8a 	bl	80081d8 <USB_FlushRxFifo>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d001      	beq.n	80084ce <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80084ce:	2300      	movs	r3, #0
 80084d0:	613b      	str	r3, [r7, #16]
 80084d2:	e015      	b.n	8008500 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	015a      	lsls	r2, r3, #5
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	4413      	add	r3, r2
 80084dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084e0:	461a      	mov	r2, r3
 80084e2:	f04f 33ff 	mov.w	r3, #4294967295
 80084e6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	015a      	lsls	r2, r3, #5
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	4413      	add	r3, r2
 80084f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084f4:	461a      	mov	r2, r3
 80084f6:	2300      	movs	r3, #0
 80084f8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	3301      	adds	r3, #1
 80084fe:	613b      	str	r3, [r7, #16]
 8008500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008502:	693a      	ldr	r2, [r7, #16]
 8008504:	429a      	cmp	r2, r3
 8008506:	d3e5      	bcc.n	80084d4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f04f 32ff 	mov.w	r2, #4294967295
 8008514:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00b      	beq.n	800853a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008528:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a13      	ldr	r2, [pc, #76]	; (800857c <USB_HostInit+0x16c>)
 800852e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a13      	ldr	r2, [pc, #76]	; (8008580 <USB_HostInit+0x170>)
 8008534:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008538:	e009      	b.n	800854e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2280      	movs	r2, #128	; 0x80
 800853e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a10      	ldr	r2, [pc, #64]	; (8008584 <USB_HostInit+0x174>)
 8008544:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a0f      	ldr	r2, [pc, #60]	; (8008588 <USB_HostInit+0x178>)
 800854a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008550:	2b00      	cmp	r3, #0
 8008552:	d105      	bne.n	8008560 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	f043 0210 	orr.w	r2, r3, #16
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	699a      	ldr	r2, [r3, #24]
 8008564:	4b09      	ldr	r3, [pc, #36]	; (800858c <USB_HostInit+0x17c>)
 8008566:	4313      	orrs	r3, r2
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800856c:	7dfb      	ldrb	r3, [r7, #23]
}
 800856e:	4618      	mov	r0, r3
 8008570:	3718      	adds	r7, #24
 8008572:	46bd      	mov	sp, r7
 8008574:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008578:	b004      	add	sp, #16
 800857a:	4770      	bx	lr
 800857c:	01000200 	.word	0x01000200
 8008580:	00e00300 	.word	0x00e00300
 8008584:	00600080 	.word	0x00600080
 8008588:	004000e0 	.word	0x004000e0
 800858c:	a3200008 	.word	0xa3200008

08008590 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	460b      	mov	r3, r1
 800859a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085ae:	f023 0303 	bic.w	r3, r3, #3
 80085b2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	78fb      	ldrb	r3, [r7, #3]
 80085be:	f003 0303 	and.w	r3, r3, #3
 80085c2:	68f9      	ldr	r1, [r7, #12]
 80085c4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80085c8:	4313      	orrs	r3, r2
 80085ca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80085cc:	78fb      	ldrb	r3, [r7, #3]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d107      	bne.n	80085e2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085d8:	461a      	mov	r2, r3
 80085da:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80085de:	6053      	str	r3, [r2, #4]
 80085e0:	e009      	b.n	80085f6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80085e2:	78fb      	ldrb	r3, [r7, #3]
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d106      	bne.n	80085f6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085ee:	461a      	mov	r2, r3
 80085f0:	f241 7370 	movw	r3, #6000	; 0x1770
 80085f4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008610:	2300      	movs	r3, #0
 8008612:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008624:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800862e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008632:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008634:	2064      	movs	r0, #100	; 0x64
 8008636:	f7f9 fff3 	bl	8002620 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008642:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008646:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008648:	200a      	movs	r0, #10
 800864a:	f7f9 ffe9 	bl	8002620 <HAL_Delay>

  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	460b      	mov	r3, r1
 8008662:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008668:	2300      	movs	r3, #0
 800866a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800867c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d109      	bne.n	800869c <USB_DriveVbus+0x44>
 8008688:	78fb      	ldrb	r3, [r7, #3]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d106      	bne.n	800869c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008696:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800869a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a6:	d109      	bne.n	80086bc <USB_DriveVbus+0x64>
 80086a8:	78fb      	ldrb	r3, [r7, #3]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d106      	bne.n	80086bc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80086b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086ba:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3714      	adds	r7, #20
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80086ca:	b480      	push	{r7}
 80086cc:	b085      	sub	sp, #20
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80086d6:	2300      	movs	r3, #0
 80086d8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	0c5b      	lsrs	r3, r3, #17
 80086e8:	f003 0303 	and.w	r3, r3, #3
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	b29b      	uxth	r3, r3
}
 800870e:	4618      	mov	r0, r3
 8008710:	3714      	adds	r7, #20
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
	...

0800871c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b088      	sub	sp, #32
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	4608      	mov	r0, r1
 8008726:	4611      	mov	r1, r2
 8008728:	461a      	mov	r2, r3
 800872a:	4603      	mov	r3, r0
 800872c:	70fb      	strb	r3, [r7, #3]
 800872e:	460b      	mov	r3, r1
 8008730:	70bb      	strb	r3, [r7, #2]
 8008732:	4613      	mov	r3, r2
 8008734:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008736:	2300      	movs	r3, #0
 8008738:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800873e:	78fb      	ldrb	r3, [r7, #3]
 8008740:	015a      	lsls	r2, r3, #5
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	4413      	add	r3, r2
 8008746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800874a:	461a      	mov	r2, r3
 800874c:	f04f 33ff 	mov.w	r3, #4294967295
 8008750:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008752:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008756:	2b03      	cmp	r3, #3
 8008758:	d87e      	bhi.n	8008858 <USB_HC_Init+0x13c>
 800875a:	a201      	add	r2, pc, #4	; (adr r2, 8008760 <USB_HC_Init+0x44>)
 800875c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008760:	08008771 	.word	0x08008771
 8008764:	0800881b 	.word	0x0800881b
 8008768:	08008771 	.word	0x08008771
 800876c:	080087dd 	.word	0x080087dd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008770:	78fb      	ldrb	r3, [r7, #3]
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	4413      	add	r3, r2
 8008778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800877c:	461a      	mov	r2, r3
 800877e:	f240 439d 	movw	r3, #1181	; 0x49d
 8008782:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008784:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008788:	2b00      	cmp	r3, #0
 800878a:	da10      	bge.n	80087ae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800878c:	78fb      	ldrb	r3, [r7, #3]
 800878e:	015a      	lsls	r2, r3, #5
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	4413      	add	r3, r2
 8008794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	78fa      	ldrb	r2, [r7, #3]
 800879c:	0151      	lsls	r1, r2, #5
 800879e:	693a      	ldr	r2, [r7, #16]
 80087a0:	440a      	add	r2, r1
 80087a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087aa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80087ac:	e057      	b.n	800885e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d051      	beq.n	800885e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80087ba:	78fb      	ldrb	r3, [r7, #3]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	78fa      	ldrb	r2, [r7, #3]
 80087ca:	0151      	lsls	r1, r2, #5
 80087cc:	693a      	ldr	r2, [r7, #16]
 80087ce:	440a      	add	r2, r1
 80087d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80087d8:	60d3      	str	r3, [r2, #12]
      break;
 80087da:	e040      	b.n	800885e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80087dc:	78fb      	ldrb	r3, [r7, #3]
 80087de:	015a      	lsls	r2, r3, #5
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	4413      	add	r3, r2
 80087e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087e8:	461a      	mov	r2, r3
 80087ea:	f240 639d 	movw	r3, #1693	; 0x69d
 80087ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80087f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	da34      	bge.n	8008862 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80087f8:	78fb      	ldrb	r3, [r7, #3]
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	78fa      	ldrb	r2, [r7, #3]
 8008808:	0151      	lsls	r1, r2, #5
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	440a      	add	r2, r1
 800880e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008816:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008818:	e023      	b.n	8008862 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800881a:	78fb      	ldrb	r3, [r7, #3]
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	4413      	add	r3, r2
 8008822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008826:	461a      	mov	r2, r3
 8008828:	f240 2325 	movw	r3, #549	; 0x225
 800882c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800882e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008832:	2b00      	cmp	r3, #0
 8008834:	da17      	bge.n	8008866 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008836:	78fb      	ldrb	r3, [r7, #3]
 8008838:	015a      	lsls	r2, r3, #5
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	4413      	add	r3, r2
 800883e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	78fa      	ldrb	r2, [r7, #3]
 8008846:	0151      	lsls	r1, r2, #5
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	440a      	add	r2, r1
 800884c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008850:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008854:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008856:	e006      	b.n	8008866 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	77fb      	strb	r3, [r7, #31]
      break;
 800885c:	e004      	b.n	8008868 <USB_HC_Init+0x14c>
      break;
 800885e:	bf00      	nop
 8008860:	e002      	b.n	8008868 <USB_HC_Init+0x14c>
      break;
 8008862:	bf00      	nop
 8008864:	e000      	b.n	8008868 <USB_HC_Init+0x14c>
      break;
 8008866:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008868:	78fb      	ldrb	r3, [r7, #3]
 800886a:	015a      	lsls	r2, r3, #5
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	4413      	add	r3, r2
 8008870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	78fa      	ldrb	r2, [r7, #3]
 8008878:	0151      	lsls	r1, r2, #5
 800887a:	693a      	ldr	r2, [r7, #16]
 800887c:	440a      	add	r2, r1
 800887e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008882:	f043 0302 	orr.w	r3, r3, #2
 8008886:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800888e:	699a      	ldr	r2, [r3, #24]
 8008890:	78fb      	ldrb	r3, [r7, #3]
 8008892:	f003 030f 	and.w	r3, r3, #15
 8008896:	2101      	movs	r1, #1
 8008898:	fa01 f303 	lsl.w	r3, r1, r3
 800889c:	6939      	ldr	r1, [r7, #16]
 800889e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80088a2:	4313      	orrs	r3, r2
 80088a4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80088b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	da03      	bge.n	80088c2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80088ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088be:	61bb      	str	r3, [r7, #24]
 80088c0:	e001      	b.n	80088c6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80088c2:	2300      	movs	r3, #0
 80088c4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7ff feff 	bl	80086ca <USB_GetHostSpeed>
 80088cc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80088ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d106      	bne.n	80088e4 <USB_HC_Init+0x1c8>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d003      	beq.n	80088e4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80088dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80088e0:	617b      	str	r3, [r7, #20]
 80088e2:	e001      	b.n	80088e8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80088e4:	2300      	movs	r3, #0
 80088e6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80088e8:	787b      	ldrb	r3, [r7, #1]
 80088ea:	059b      	lsls	r3, r3, #22
 80088ec:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80088f0:	78bb      	ldrb	r3, [r7, #2]
 80088f2:	02db      	lsls	r3, r3, #11
 80088f4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80088f8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80088fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80088fe:	049b      	lsls	r3, r3, #18
 8008900:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008904:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008906:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008908:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800890c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008912:	78fb      	ldrb	r3, [r7, #3]
 8008914:	0159      	lsls	r1, r3, #5
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	440b      	add	r3, r1
 800891a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800891e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008924:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008926:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800892a:	2b03      	cmp	r3, #3
 800892c:	d003      	beq.n	8008936 <USB_HC_Init+0x21a>
 800892e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008932:	2b01      	cmp	r3, #1
 8008934:	d10f      	bne.n	8008956 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008936:	78fb      	ldrb	r3, [r7, #3]
 8008938:	015a      	lsls	r2, r3, #5
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	4413      	add	r3, r2
 800893e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	78fa      	ldrb	r2, [r7, #3]
 8008946:	0151      	lsls	r1, r2, #5
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	440a      	add	r2, r1
 800894c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008950:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008954:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008956:	7ffb      	ldrb	r3, [r7, #31]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3720      	adds	r7, #32
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b08c      	sub	sp, #48	; 0x30
 8008964:	af02      	add	r7, sp, #8
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	4613      	mov	r3, r2
 800896c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	785b      	ldrb	r3, [r3, #1]
 8008976:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800897c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008986:	2b00      	cmp	r3, #0
 8008988:	d02d      	beq.n	80089e6 <USB_HC_StartXfer+0x86>
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	791b      	ldrb	r3, [r3, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d129      	bne.n	80089e6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008992:	79fb      	ldrb	r3, [r7, #7]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d117      	bne.n	80089c8 <USB_HC_StartXfer+0x68>
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	79db      	ldrb	r3, [r3, #7]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d003      	beq.n	80089a8 <USB_HC_StartXfer+0x48>
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	79db      	ldrb	r3, [r3, #7]
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d10f      	bne.n	80089c8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	6a3b      	ldr	r3, [r7, #32]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	69fa      	ldr	r2, [r7, #28]
 80089b8:	0151      	lsls	r1, r2, #5
 80089ba:	6a3a      	ldr	r2, [r7, #32]
 80089bc:	440a      	add	r2, r1
 80089be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80089c8:	79fb      	ldrb	r3, [r7, #7]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10b      	bne.n	80089e6 <USB_HC_StartXfer+0x86>
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	795b      	ldrb	r3, [r3, #5]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d107      	bne.n	80089e6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	785b      	ldrb	r3, [r3, #1]
 80089da:	4619      	mov	r1, r3
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 fa0f 	bl	8008e00 <USB_DoPing>
      return HAL_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	e0f8      	b.n	8008bd8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d018      	beq.n	8008a20 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	8912      	ldrh	r2, [r2, #8]
 80089f6:	4413      	add	r3, r2
 80089f8:	3b01      	subs	r3, #1
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	8912      	ldrh	r2, [r2, #8]
 80089fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a02:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008a04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008a06:	8b7b      	ldrh	r3, [r7, #26]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d90b      	bls.n	8008a24 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008a0c:	8b7b      	ldrh	r3, [r7, #26]
 8008a0e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008a10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	8912      	ldrh	r2, [r2, #8]
 8008a16:	fb03 f202 	mul.w	r2, r3, r2
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	611a      	str	r2, [r3, #16]
 8008a1e:	e001      	b.n	8008a24 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008a20:	2301      	movs	r3, #1
 8008a22:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	78db      	ldrb	r3, [r3, #3]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d007      	beq.n	8008a3c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008a2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	8912      	ldrh	r2, [r2, #8]
 8008a32:	fb03 f202 	mul.w	r2, r3, r2
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	611a      	str	r2, [r3, #16]
 8008a3a:	e003      	b.n	8008a44 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	695a      	ldr	r2, [r3, #20]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008a4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a4e:	04d9      	lsls	r1, r3, #19
 8008a50:	4b63      	ldr	r3, [pc, #396]	; (8008be0 <USB_HC_StartXfer+0x280>)
 8008a52:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a54:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	7a9b      	ldrb	r3, [r3, #10]
 8008a5a:	075b      	lsls	r3, r3, #29
 8008a5c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a60:	69f9      	ldr	r1, [r7, #28]
 8008a62:	0148      	lsls	r0, r1, #5
 8008a64:	6a39      	ldr	r1, [r7, #32]
 8008a66:	4401      	add	r1, r0
 8008a68:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008a6c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a6e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008a70:	79fb      	ldrb	r3, [r7, #7]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d009      	beq.n	8008a8a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	68d9      	ldr	r1, [r3, #12]
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	015a      	lsls	r2, r3, #5
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	4413      	add	r3, r2
 8008a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a86:	460a      	mov	r2, r1
 8008a88:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008a8a:	6a3b      	ldr	r3, [r7, #32]
 8008a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f003 0301 	and.w	r3, r3, #1
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	bf0c      	ite	eq
 8008a9a:	2301      	moveq	r3, #1
 8008a9c:	2300      	movne	r3, #0
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	015a      	lsls	r2, r3, #5
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	69fa      	ldr	r2, [r7, #28]
 8008ab2:	0151      	lsls	r1, r2, #5
 8008ab4:	6a3a      	ldr	r2, [r7, #32]
 8008ab6:	440a      	add	r2, r1
 8008ab8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008abc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ac0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	015a      	lsls	r2, r3, #5
 8008ac6:	6a3b      	ldr	r3, [r7, #32]
 8008ac8:	4413      	add	r3, r2
 8008aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	7e7b      	ldrb	r3, [r7, #25]
 8008ad2:	075b      	lsls	r3, r3, #29
 8008ad4:	69f9      	ldr	r1, [r7, #28]
 8008ad6:	0148      	lsls	r0, r1, #5
 8008ad8:	6a39      	ldr	r1, [r7, #32]
 8008ada:	4401      	add	r1, r0
 8008adc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	015a      	lsls	r2, r3, #5
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	4413      	add	r3, r2
 8008aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008afa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	78db      	ldrb	r3, [r3, #3]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d004      	beq.n	8008b0e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b0a:	613b      	str	r3, [r7, #16]
 8008b0c:	e003      	b.n	8008b16 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b14:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b1c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	015a      	lsls	r2, r3, #5
 8008b22:	6a3b      	ldr	r3, [r7, #32]
 8008b24:	4413      	add	r3, r2
 8008b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008b30:	79fb      	ldrb	r3, [r7, #7]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d001      	beq.n	8008b3a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	e04e      	b.n	8008bd8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	78db      	ldrb	r3, [r3, #3]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d149      	bne.n	8008bd6 <USB_HC_StartXfer+0x276>
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d045      	beq.n	8008bd6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	79db      	ldrb	r3, [r3, #7]
 8008b4e:	2b03      	cmp	r3, #3
 8008b50:	d830      	bhi.n	8008bb4 <USB_HC_StartXfer+0x254>
 8008b52:	a201      	add	r2, pc, #4	; (adr r2, 8008b58 <USB_HC_StartXfer+0x1f8>)
 8008b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b58:	08008b69 	.word	0x08008b69
 8008b5c:	08008b8d 	.word	0x08008b8d
 8008b60:	08008b69 	.word	0x08008b69
 8008b64:	08008b8d 	.word	0x08008b8d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	695b      	ldr	r3, [r3, #20]
 8008b6c:	3303      	adds	r3, #3
 8008b6e:	089b      	lsrs	r3, r3, #2
 8008b70:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008b72:	8afa      	ldrh	r2, [r7, #22]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d91c      	bls.n	8008bb8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	f043 0220 	orr.w	r2, r3, #32
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	619a      	str	r2, [r3, #24]
        }
        break;
 8008b8a:	e015      	b.n	8008bb8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	3303      	adds	r3, #3
 8008b92:	089b      	lsrs	r3, r3, #2
 8008b94:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008b96:	8afa      	ldrh	r2, [r7, #22]
 8008b98:	6a3b      	ldr	r3, [r7, #32]
 8008b9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d90a      	bls.n	8008bbc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	699b      	ldr	r3, [r3, #24]
 8008baa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	619a      	str	r2, [r3, #24]
        }
        break;
 8008bb2:	e003      	b.n	8008bbc <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008bb4:	bf00      	nop
 8008bb6:	e002      	b.n	8008bbe <USB_HC_StartXfer+0x25e>
        break;
 8008bb8:	bf00      	nop
 8008bba:	e000      	b.n	8008bbe <USB_HC_StartXfer+0x25e>
        break;
 8008bbc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	68d9      	ldr	r1, [r3, #12]
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	785a      	ldrb	r2, [r3, #1]
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	2000      	movs	r0, #0
 8008bce:	9000      	str	r0, [sp, #0]
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f7ff fb31 	bl	8008238 <USB_WritePacket>
  }

  return HAL_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3728      	adds	r7, #40	; 0x28
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	1ff80000 	.word	0x1ff80000

08008be4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	b29b      	uxth	r3, r3
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3714      	adds	r7, #20
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr

08008c06 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008c06:	b480      	push	{r7}
 8008c08:	b089      	sub	sp, #36	; 0x24
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	460b      	mov	r3, r1
 8008c10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008c16:	78fb      	ldrb	r3, [r7, #3]
 8008c18:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	015a      	lsls	r2, r3, #5
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	0c9b      	lsrs	r3, r3, #18
 8008c2e:	f003 0303 	and.w	r3, r3, #3
 8008c32:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	015a      	lsls	r2, r3, #5
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	0fdb      	lsrs	r3, r3, #31
 8008c44:	f003 0301 	and.w	r3, r3, #1
 8008c48:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f003 0320 	and.w	r3, r3, #32
 8008c52:	2b20      	cmp	r3, #32
 8008c54:	d104      	bne.n	8008c60 <USB_HC_Halt+0x5a>
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d101      	bne.n	8008c60 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	e0c8      	b.n	8008df2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d002      	beq.n	8008c6c <USB_HC_Halt+0x66>
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d163      	bne.n	8008d34 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	015a      	lsls	r2, r3, #5
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	69ba      	ldr	r2, [r7, #24]
 8008c7c:	0151      	lsls	r1, r2, #5
 8008c7e:	69fa      	ldr	r2, [r7, #28]
 8008c80:	440a      	add	r2, r1
 8008c82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c8a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	f003 0320 	and.w	r3, r3, #32
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f040 80ab 	bne.w	8008df0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d133      	bne.n	8008d0e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	015a      	lsls	r2, r3, #5
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	69ba      	ldr	r2, [r7, #24]
 8008cb6:	0151      	lsls	r1, r2, #5
 8008cb8:	69fa      	ldr	r2, [r7, #28]
 8008cba:	440a      	add	r2, r1
 8008cbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008cc4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	015a      	lsls	r2, r3, #5
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	4413      	add	r3, r2
 8008cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	69ba      	ldr	r2, [r7, #24]
 8008cd6:	0151      	lsls	r1, r2, #5
 8008cd8:	69fa      	ldr	r2, [r7, #28]
 8008cda:	440a      	add	r2, r1
 8008cdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ce0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ce4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cf2:	d81d      	bhi.n	8008d30 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	015a      	lsls	r2, r3, #5
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d0a:	d0ec      	beq.n	8008ce6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d0c:	e070      	b.n	8008df0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	015a      	lsls	r2, r3, #5
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	4413      	add	r3, r2
 8008d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	69ba      	ldr	r2, [r7, #24]
 8008d1e:	0151      	lsls	r1, r2, #5
 8008d20:	69fa      	ldr	r2, [r7, #28]
 8008d22:	440a      	add	r2, r1
 8008d24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d2c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d2e:	e05f      	b.n	8008df0 <USB_HC_Halt+0x1ea>
            break;
 8008d30:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d32:	e05d      	b.n	8008df0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	015a      	lsls	r2, r3, #5
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	69ba      	ldr	r2, [r7, #24]
 8008d44:	0151      	lsls	r1, r2, #5
 8008d46:	69fa      	ldr	r2, [r7, #28]
 8008d48:	440a      	add	r2, r1
 8008d4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d52:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d133      	bne.n	8008dcc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	015a      	lsls	r2, r3, #5
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	69ba      	ldr	r2, [r7, #24]
 8008d74:	0151      	lsls	r1, r2, #5
 8008d76:	69fa      	ldr	r2, [r7, #28]
 8008d78:	440a      	add	r2, r1
 8008d7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d82:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	015a      	lsls	r2, r3, #5
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	69ba      	ldr	r2, [r7, #24]
 8008d94:	0151      	lsls	r1, r2, #5
 8008d96:	69fa      	ldr	r2, [r7, #28]
 8008d98:	440a      	add	r2, r1
 8008d9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008da2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	3301      	adds	r3, #1
 8008da8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008db0:	d81d      	bhi.n	8008dee <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	015a      	lsls	r2, r3, #5
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	4413      	add	r3, r2
 8008dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dc8:	d0ec      	beq.n	8008da4 <USB_HC_Halt+0x19e>
 8008dca:	e011      	b.n	8008df0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	015a      	lsls	r2, r3, #5
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	69ba      	ldr	r2, [r7, #24]
 8008ddc:	0151      	lsls	r1, r2, #5
 8008dde:	69fa      	ldr	r2, [r7, #28]
 8008de0:	440a      	add	r2, r1
 8008de2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008de6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008dea:	6013      	str	r3, [r2, #0]
 8008dec:	e000      	b.n	8008df0 <USB_HC_Halt+0x1ea>
          break;
 8008dee:	bf00      	nop
    }
  }

  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3724      	adds	r7, #36	; 0x24
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
	...

08008e00 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b087      	sub	sp, #28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	460b      	mov	r3, r1
 8008e0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008e10:	78fb      	ldrb	r3, [r7, #3]
 8008e12:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008e14:	2301      	movs	r3, #1
 8008e16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	04da      	lsls	r2, r3, #19
 8008e1c:	4b15      	ldr	r3, [pc, #84]	; (8008e74 <USB_DoPing+0x74>)
 8008e1e:	4013      	ands	r3, r2
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	0151      	lsls	r1, r2, #5
 8008e24:	697a      	ldr	r2, [r7, #20]
 8008e26:	440a      	add	r2, r1
 8008e28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e30:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	015a      	lsls	r2, r3, #5
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	4413      	add	r3, r2
 8008e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e48:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e50:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	015a      	lsls	r2, r3, #5
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	4413      	add	r3, r2
 8008e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e5e:	461a      	mov	r2, r3
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	371c      	adds	r7, #28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	1ff80000 	.word	0x1ff80000

08008e78 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b088      	sub	sp, #32
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f7ff f911 	bl	80080b4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e92:	2110      	movs	r1, #16
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f7ff f96b 	bl	8008170 <USB_FlushTxFifo>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d001      	beq.n	8008ea4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f7ff f997 	bl	80081d8 <USB_FlushRxFifo>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d001      	beq.n	8008eb4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	61bb      	str	r3, [r7, #24]
 8008eb8:	e01f      	b.n	8008efa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	015a      	lsls	r2, r3, #5
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ed0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ed8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ee0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	015a      	lsls	r2, r3, #5
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	4413      	add	r3, r2
 8008eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eee:	461a      	mov	r2, r3
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	61bb      	str	r3, [r7, #24]
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	2b0f      	cmp	r3, #15
 8008efe:	d9dc      	bls.n	8008eba <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008f00:	2300      	movs	r3, #0
 8008f02:	61bb      	str	r3, [r7, #24]
 8008f04:	e034      	b.n	8008f70 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	015a      	lsls	r2, r3, #5
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f1c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f24:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f2c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	3301      	adds	r3, #1
 8008f44:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f4c:	d80c      	bhi.n	8008f68 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	015a      	lsls	r2, r3, #5
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	4413      	add	r3, r2
 8008f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f64:	d0ec      	beq.n	8008f40 <USB_StopHost+0xc8>
 8008f66:	e000      	b.n	8008f6a <USB_StopHost+0xf2>
        break;
 8008f68:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	61bb      	str	r3, [r7, #24]
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	2b0f      	cmp	r3, #15
 8008f74:	d9c7      	bls.n	8008f06 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f82:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f04f 32ff 	mov.w	r2, #4294967295
 8008f8a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7ff f880 	bl	8008092 <USB_EnableGlobalInt>

  return ret;
 8008f92:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3720      	adds	r7, #32
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  //retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
	FATFS_LinkDriver(&SD0_Driver, SD0Path);
 8008fa0:	4908      	ldr	r1, [pc, #32]	; (8008fc4 <MX_FATFS_Init+0x28>)
 8008fa2:	4809      	ldr	r0, [pc, #36]	; (8008fc8 <MX_FATFS_Init+0x2c>)
 8008fa4:	f007 fc36 	bl	8010814 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD1_Driver, SD1Path);
 8008fa8:	4908      	ldr	r1, [pc, #32]	; (8008fcc <MX_FATFS_Init+0x30>)
 8008faa:	4809      	ldr	r0, [pc, #36]	; (8008fd0 <MX_FATFS_Init+0x34>)
 8008fac:	f007 fc32 	bl	8010814 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD2_Driver, SD2Path);
 8008fb0:	4908      	ldr	r1, [pc, #32]	; (8008fd4 <MX_FATFS_Init+0x38>)
 8008fb2:	4809      	ldr	r0, [pc, #36]	; (8008fd8 <MX_FATFS_Init+0x3c>)
 8008fb4:	f007 fc2e 	bl	8010814 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD3_Driver, SD3Path);
 8008fb8:	4908      	ldr	r1, [pc, #32]	; (8008fdc <MX_FATFS_Init+0x40>)
 8008fba:	4809      	ldr	r0, [pc, #36]	; (8008fe0 <MX_FATFS_Init+0x44>)
 8008fbc:	f007 fc2a 	bl	8010814 <FATFS_LinkDriver>


  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008fc0:	bf00      	nop
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	20001c64 	.word	0x20001c64
 8008fc8:	2000023c 	.word	0x2000023c
 8008fcc:	20001c68 	.word	0x20001c68
 8008fd0:	20000250 	.word	0x20000250
 8008fd4:	20001c6c 	.word	0x20001c6c
 8008fd8:	20000264 	.word	0x20000264
 8008fdc:	20001c70 	.word	0x20001c70
 8008fe0:	20000278 	.word	0x20000278

08008fe4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008fe8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <SD0_initialize>:
  * @brief  Initializes a Drive
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_initialize (BYTE pdrv)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 8008ffe:	2000      	movs	r0, #0
 8009000:	f7f8 fc92 	bl	8001928 <sd_ss_set_active>
	return USER_initialize(pdrv);
 8009004:	79fb      	ldrb	r3, [r7, #7]
 8009006:	4618      	mov	r0, r3
 8009008:	f000 f838 	bl	800907c <USER_initialize>
 800900c:	4603      	mov	r3, r0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3708      	adds	r7, #8
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <SD1_initialize>:
DSTATUS SD1_initialize (BYTE pdrv)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b082      	sub	sp, #8
 800901a:	af00      	add	r7, sp, #0
 800901c:	4603      	mov	r3, r0
 800901e:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 8009020:	2001      	movs	r0, #1
 8009022:	f7f8 fc81 	bl	8001928 <sd_ss_set_active>
	return USER_initialize(pdrv);
 8009026:	79fb      	ldrb	r3, [r7, #7]
 8009028:	4618      	mov	r0, r3
 800902a:	f000 f827 	bl	800907c <USER_initialize>
 800902e:	4603      	mov	r3, r0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <SD2_initialize>:
DSTATUS SD2_initialize (BYTE pdrv)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	4603      	mov	r3, r0
 8009040:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 8009042:	2002      	movs	r0, #2
 8009044:	f7f8 fc70 	bl	8001928 <sd_ss_set_active>
	return USER_initialize(pdrv);
 8009048:	79fb      	ldrb	r3, [r7, #7]
 800904a:	4618      	mov	r0, r3
 800904c:	f000 f816 	bl	800907c <USER_initialize>
 8009050:	4603      	mov	r3, r0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <SD3_initialize>:
DSTATUS SD3_initialize (BYTE pdrv)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b082      	sub	sp, #8
 800905e:	af00      	add	r7, sp, #0
 8009060:	4603      	mov	r3, r0
 8009062:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 8009064:	2003      	movs	r0, #3
 8009066:	f7f8 fc5f 	bl	8001928 <sd_ss_set_active>
	return USER_initialize(pdrv);
 800906a:	79fb      	ldrb	r3, [r7, #7]
 800906c:	4618      	mov	r0, r3
 800906e:	f000 f805 	bl	800907c <USER_initialize>
 8009072:	4603      	mov	r3, r0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USER_initialize>:

DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	4603      	mov	r3, r0
 8009084:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//SD_PowerOn();
	SS_SD_SELECT();
 8009086:	f7f8 fc6d 	bl	8001964 <sd_ss_active_pin_down>
	if(sd_ini()==0) {Stat &= ~STA_NOINIT;} // STA_NOINIT
 800908a:	f7f8 fced 	bl	8001a68 <sd_ini>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d107      	bne.n	80090a4 <USER_initialize+0x28>
 8009094:	4b08      	ldr	r3, [pc, #32]	; (80090b8 <USER_initialize+0x3c>)
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	b2db      	uxtb	r3, r3
 800909a:	f023 0301 	bic.w	r3, r3, #1
 800909e:	b2da      	uxtb	r2, r3
 80090a0:	4b05      	ldr	r3, [pc, #20]	; (80090b8 <USER_initialize+0x3c>)
 80090a2:	701a      	strb	r2, [r3, #0]
	SS_SD_DESELECT();
 80090a4:	f7f8 fc6e 	bl	8001984 <sd_ss_active_pin_up>
    return Stat;
 80090a8:	4b03      	ldr	r3, [pc, #12]	; (80090b8 <USER_initialize+0x3c>)
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3708      	adds	r7, #8
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	20000239 	.word	0x20000239

080090bc <SD0_status>:
  * @brief  Gets Disk Status
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_status (BYTE pdrv)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	4603      	mov	r3, r0
 80090c4:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 80090c6:	2000      	movs	r0, #0
 80090c8:	f7f8 fc2e 	bl	8001928 <sd_ss_set_active>
	return USER_status(pdrv);
 80090cc:	79fb      	ldrb	r3, [r7, #7]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 f838 	bl	8009144 <USER_status>
 80090d4:	4603      	mov	r3, r0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <SD1_status>:
DSTATUS SD1_status (BYTE pdrv)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b082      	sub	sp, #8
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	4603      	mov	r3, r0
 80090e6:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 80090e8:	2001      	movs	r0, #1
 80090ea:	f7f8 fc1d 	bl	8001928 <sd_ss_set_active>
	return USER_status(pdrv);
 80090ee:	79fb      	ldrb	r3, [r7, #7]
 80090f0:	4618      	mov	r0, r3
 80090f2:	f000 f827 	bl	8009144 <USER_status>
 80090f6:	4603      	mov	r3, r0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <SD2_status>:
DSTATUS SD2_status (BYTE pdrv)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	4603      	mov	r3, r0
 8009108:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 800910a:	2002      	movs	r0, #2
 800910c:	f7f8 fc0c 	bl	8001928 <sd_ss_set_active>
	return USER_status(pdrv);
 8009110:	79fb      	ldrb	r3, [r7, #7]
 8009112:	4618      	mov	r0, r3
 8009114:	f000 f816 	bl	8009144 <USER_status>
 8009118:	4603      	mov	r3, r0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3708      	adds	r7, #8
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <SD3_status>:
DSTATUS SD3_status (BYTE pdrv)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b082      	sub	sp, #8
 8009126:	af00      	add	r7, sp, #0
 8009128:	4603      	mov	r3, r0
 800912a:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 800912c:	2003      	movs	r0, #3
 800912e:	f7f8 fbfb 	bl	8001928 <sd_ss_set_active>
	return USER_status(pdrv);
 8009132:	79fb      	ldrb	r3, [r7, #7]
 8009134:	4618      	mov	r0, r3
 8009136:	f000 f805 	bl	8009144 <USER_status>
 800913a:	4603      	mov	r3, r0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USER_status>:

DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	4603      	mov	r3, r0
 800914c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	SS_SD_SELECT();
 800914e:	f7f8 fc09 	bl	8001964 <sd_ss_active_pin_down>
	if (pdrv) return STA_NOINIT;
 8009152:	79fb      	ldrb	r3, [r7, #7]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d001      	beq.n	800915c <USER_status+0x18>
 8009158:	2301      	movs	r3, #1
 800915a:	e004      	b.n	8009166 <USER_status+0x22>
	SS_SD_DESELECT();
 800915c:	f7f8 fc12 	bl	8001984 <sd_ss_active_pin_up>
    return Stat;
 8009160:	4b03      	ldr	r3, [pc, #12]	; (8009170 <USER_status+0x2c>)
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009166:	4618      	mov	r0, r3
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	20000239 	.word	0x20000239

08009174 <SD0_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DSTATUS SD0_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	60b9      	str	r1, [r7, #8]
 800917c:	607a      	str	r2, [r7, #4]
 800917e:	603b      	str	r3, [r7, #0]
 8009180:	4603      	mov	r3, r0
 8009182:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 8009184:	2000      	movs	r0, #0
 8009186:	f7f8 fbcf 	bl	8001928 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800918a:	7bf8      	ldrb	r0, [r7, #15]
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	68b9      	ldr	r1, [r7, #8]
 8009192:	f000 f847 	bl	8009224 <USER_read>
 8009196:	4603      	mov	r3, r0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <SD1_read>:
DSTATUS SD1_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60b9      	str	r1, [r7, #8]
 80091a8:	607a      	str	r2, [r7, #4]
 80091aa:	603b      	str	r3, [r7, #0]
 80091ac:	4603      	mov	r3, r0
 80091ae:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 80091b0:	2001      	movs	r0, #1
 80091b2:	f7f8 fbb9 	bl	8001928 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 80091b6:	7bf8      	ldrb	r0, [r7, #15]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	68b9      	ldr	r1, [r7, #8]
 80091be:	f000 f831 	bl	8009224 <USER_read>
 80091c2:	4603      	mov	r3, r0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3710      	adds	r7, #16
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <SD2_read>:
DSTATUS SD2_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60b9      	str	r1, [r7, #8]
 80091d4:	607a      	str	r2, [r7, #4]
 80091d6:	603b      	str	r3, [r7, #0]
 80091d8:	4603      	mov	r3, r0
 80091da:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 80091dc:	2002      	movs	r0, #2
 80091de:	f7f8 fba3 	bl	8001928 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 80091e2:	7bf8      	ldrb	r0, [r7, #15]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	68b9      	ldr	r1, [r7, #8]
 80091ea:	f000 f81b 	bl	8009224 <USER_read>
 80091ee:	4603      	mov	r3, r0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <SD3_read>:
DSTATUS SD3_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60b9      	str	r1, [r7, #8]
 8009200:	607a      	str	r2, [r7, #4]
 8009202:	603b      	str	r3, [r7, #0]
 8009204:	4603      	mov	r3, r0
 8009206:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 8009208:	2003      	movs	r0, #3
 800920a:	f7f8 fb8d 	bl	8001928 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800920e:	7bf8      	ldrb	r0, [r7, #15]
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	68b9      	ldr	r1, [r7, #8]
 8009216:	f000 f805 	bl	8009224 <USER_read>
 800921a:	4603      	mov	r3, r0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	607a      	str	r2, [r7, #4]
 800922e:	603b      	str	r3, [r7, #0]
 8009230:	4603      	mov	r3, r0
 8009232:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	SS_SD_SELECT();
 8009234:	f7f8 fb96 	bl	8001964 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 8009238:	7bfb      	ldrb	r3, [r7, #15]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d102      	bne.n	8009244 <USER_read+0x20>
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d101      	bne.n	8009248 <USER_read+0x24>
 8009244:	2304      	movs	r3, #4
 8009246:	e043      	b.n	80092d0 <USER_read+0xac>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009248:	4b23      	ldr	r3, [pc, #140]	; (80092d8 <USER_read+0xb4>)
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	b2db      	uxtb	r3, r3
 800924e:	f003 0301 	and.w	r3, r3, #1
 8009252:	2b00      	cmp	r3, #0
 8009254:	d001      	beq.n	800925a <USER_read+0x36>
 8009256:	2303      	movs	r3, #3
 8009258:	e03a      	b.n	80092d0 <USER_read+0xac>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800925a:	4b20      	ldr	r3, [pc, #128]	; (80092dc <USER_read+0xb8>)
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	b2db      	uxtb	r3, r3
 8009260:	f003 0304 	and.w	r3, r3, #4
 8009264:	2b00      	cmp	r3, #0
 8009266:	d102      	bne.n	800926e <USER_read+0x4a>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	025b      	lsls	r3, r3, #9
 800926c:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d106      	bne.n	8009282 <USER_read+0x5e>
	{
	  SD_Read_Block(buff,sector); //Ð¡Ñ‡Ð¸Ñ‚Ð°ÐµÐ¼ Ð±Ð»Ð¾Ðº Ð² Ð±ÑƒÑ„ÐµÑ€
 8009274:	6879      	ldr	r1, [r7, #4]
 8009276:	68b8      	ldr	r0, [r7, #8]
 8009278:	f7f8 fd3b 	bl	8001cf2 <SD_Read_Block>
	  count = 0;
 800927c:	2300      	movs	r3, #0
 800927e:	603b      	str	r3, [r7, #0]
 8009280:	e01c      	b.n	80092bc <USER_read+0x98>
	}
	else /* Multiple block read */
	{
		do{
			SD_Read_Block((BYTE*)buff,sector);
 8009282:	6879      	ldr	r1, [r7, #4]
 8009284:	68b8      	ldr	r0, [r7, #8]
 8009286:	f7f8 fd34 	bl	8001cf2 <SD_Read_Block>
			if (!(sdinfo.type & 4)){
 800928a:	4b14      	ldr	r3, [pc, #80]	; (80092dc <USER_read+0xb8>)
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	b2db      	uxtb	r3, r3
 8009290:	f003 0304 	and.w	r3, r3, #4
 8009294:	2b00      	cmp	r3, #0
 8009296:	d104      	bne.n	80092a2 <USER_read+0x7e>
				sector+=512;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800929e:	607b      	str	r3, [r7, #4]
 80092a0:	e002      	b.n	80092a8 <USER_read+0x84>
			}
			else sector++;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	3301      	adds	r3, #1
 80092a6:	607b      	str	r3, [r7, #4]
			buff+=512;
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80092ae:	60bb      	str	r3, [r7, #8]
			count--;
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	3b01      	subs	r3, #1
 80092b4:	603b      	str	r3, [r7, #0]
		}while(count>0);
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1e2      	bne.n	8009282 <USER_read+0x5e>
	}
	SPI_Release();
 80092bc:	f7f8 fd12 	bl	8001ce4 <SPI_Release>
	SS_SD_DESELECT();
 80092c0:	f7f8 fb60 	bl	8001984 <sd_ss_active_pin_up>
	return count ? RES_ERROR : RES_OK;
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	bf14      	ite	ne
 80092ca:	2301      	movne	r3, #1
 80092cc:	2300      	moveq	r3, #0
 80092ce:	b2db      	uxtb	r3, r3
    return RES_OK;
  /* USER CODE END READ */
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	20000239 	.word	0x20000239
 80092dc:	200019cc 	.word	0x200019cc

080092e0 <SD0_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DSTATUS SD0_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60b9      	str	r1, [r7, #8]
 80092e8:	607a      	str	r2, [r7, #4]
 80092ea:	603b      	str	r3, [r7, #0]
 80092ec:	4603      	mov	r3, r0
 80092ee:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 80092f0:	2000      	movs	r0, #0
 80092f2:	f7f8 fb19 	bl	8001928 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 80092f6:	7bf8      	ldrb	r0, [r7, #15]
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	68b9      	ldr	r1, [r7, #8]
 80092fe:	f000 f847 	bl	8009390 <USER_write>
 8009302:	4603      	mov	r3, r0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3710      	adds	r7, #16
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <SD1_write>:
DSTATUS SD1_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	60b9      	str	r1, [r7, #8]
 8009314:	607a      	str	r2, [r7, #4]
 8009316:	603b      	str	r3, [r7, #0]
 8009318:	4603      	mov	r3, r0
 800931a:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 800931c:	2001      	movs	r0, #1
 800931e:	f7f8 fb03 	bl	8001928 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8009322:	7bf8      	ldrb	r0, [r7, #15]
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	68b9      	ldr	r1, [r7, #8]
 800932a:	f000 f831 	bl	8009390 <USER_write>
 800932e:	4603      	mov	r3, r0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <SD2_write>:
DSTATUS SD2_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	60b9      	str	r1, [r7, #8]
 8009340:	607a      	str	r2, [r7, #4]
 8009342:	603b      	str	r3, [r7, #0]
 8009344:	4603      	mov	r3, r0
 8009346:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 8009348:	2002      	movs	r0, #2
 800934a:	f7f8 faed 	bl	8001928 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 800934e:	7bf8      	ldrb	r0, [r7, #15]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	68b9      	ldr	r1, [r7, #8]
 8009356:	f000 f81b 	bl	8009390 <USER_write>
 800935a:	4603      	mov	r3, r0
}
 800935c:	4618      	mov	r0, r3
 800935e:	3710      	adds	r7, #16
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <SD3_write>:
DSTATUS SD3_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	60b9      	str	r1, [r7, #8]
 800936c:	607a      	str	r2, [r7, #4]
 800936e:	603b      	str	r3, [r7, #0]
 8009370:	4603      	mov	r3, r0
 8009372:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 8009374:	2003      	movs	r0, #3
 8009376:	f7f8 fad7 	bl	8001928 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 800937a:	7bf8      	ldrb	r0, [r7, #15]
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	68b9      	ldr	r1, [r7, #8]
 8009382:	f000 f805 	bl	8009390 <USER_write>
 8009386:	4603      	mov	r3, r0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	60b9      	str	r1, [r7, #8]
 8009398:	607a      	str	r2, [r7, #4]
 800939a:	603b      	str	r3, [r7, #0]
 800939c:	4603      	mov	r3, r0
 800939e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	SS_SD_SELECT();
 80093a0:	f7f8 fae0 	bl	8001964 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d102      	bne.n	80093b0 <USER_write+0x20>
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d101      	bne.n	80093b4 <USER_write+0x24>
 80093b0:	2304      	movs	r3, #4
 80093b2:	e04c      	b.n	800944e <USER_write+0xbe>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80093b4:	4b28      	ldr	r3, [pc, #160]	; (8009458 <USER_write+0xc8>)
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	f003 0301 	and.w	r3, r3, #1
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d001      	beq.n	80093c6 <USER_write+0x36>
 80093c2:	2303      	movs	r3, #3
 80093c4:	e043      	b.n	800944e <USER_write+0xbe>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80093c6:	4b24      	ldr	r3, [pc, #144]	; (8009458 <USER_write+0xc8>)
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	f003 0304 	and.w	r3, r3, #4
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d001      	beq.n	80093d8 <USER_write+0x48>
 80093d4:	2302      	movs	r3, #2
 80093d6:	e03a      	b.n	800944e <USER_write+0xbe>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 80093d8:	4b20      	ldr	r3, [pc, #128]	; (800945c <USER_write+0xcc>)
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	f003 0304 	and.w	r3, r3, #4
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d102      	bne.n	80093ec <USER_write+0x5c>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	025b      	lsls	r3, r3, #9
 80093ea:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block write */
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d106      	bne.n	8009400 <USER_write+0x70>
	{
	    SD_Write_Block((BYTE*)buff,sector); //Ð¡Ñ‡Ð¸Ñ‚Ð°ÐµÐ¼ Ð±Ð»Ð¾Ðº Ð² Ð±ÑƒÑ„ÐµÑ€
 80093f2:	6879      	ldr	r1, [r7, #4]
 80093f4:	68b8      	ldr	r0, [r7, #8]
 80093f6:	f7f8 fcc1 	bl	8001d7c <SD_Write_Block>
	    count = 0;
 80093fa:	2300      	movs	r3, #0
 80093fc:	603b      	str	r3, [r7, #0]
 80093fe:	e01c      	b.n	800943a <USER_write+0xaa>
	}
	else /* Multiple block write */
	{
		do{
			SD_Write_Block((BYTE*)buff,sector);
 8009400:	6879      	ldr	r1, [r7, #4]
 8009402:	68b8      	ldr	r0, [r7, #8]
 8009404:	f7f8 fcba 	bl	8001d7c <SD_Write_Block>
			if (!(sdinfo.type & 4)){
 8009408:	4b14      	ldr	r3, [pc, #80]	; (800945c <USER_write+0xcc>)
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	b2db      	uxtb	r3, r3
 800940e:	f003 0304 	and.w	r3, r3, #4
 8009412:	2b00      	cmp	r3, #0
 8009414:	d104      	bne.n	8009420 <USER_write+0x90>
				sector+=512;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800941c:	607b      	str	r3, [r7, #4]
 800941e:	e002      	b.n	8009426 <USER_write+0x96>
			}
			else sector++;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	3301      	adds	r3, #1
 8009424:	607b      	str	r3, [r7, #4]
			buff+=512;
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800942c:	60bb      	str	r3, [r7, #8]
			count--;
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	3b01      	subs	r3, #1
 8009432:	603b      	str	r3, [r7, #0]

		}while(count>0);
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1e2      	bne.n	8009400 <USER_write+0x70>
	}
	SPI_Release();
 800943a:	f7f8 fc53 	bl	8001ce4 <SPI_Release>
	SS_SD_DESELECT();
 800943e:	f7f8 faa1 	bl	8001984 <sd_ss_active_pin_up>

	return count ? RES_ERROR : RES_OK;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	bf14      	ite	ne
 8009448:	2301      	movne	r3, #1
 800944a:	2300      	moveq	r3, #0
 800944c:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	20000239 	.word	0x20000239
 800945c:	200019cc 	.word	0x200019cc

08009460 <SD0_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DSTATUS SD0_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	4603      	mov	r3, r0
 8009468:	603a      	str	r2, [r7, #0]
 800946a:	71fb      	strb	r3, [r7, #7]
 800946c:	460b      	mov	r3, r1
 800946e:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(0);
 8009470:	2000      	movs	r0, #0
 8009472:	f7f8 fa59 	bl	8001928 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 8009476:	79b9      	ldrb	r1, [r7, #6]
 8009478:	79fb      	ldrb	r3, [r7, #7]
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	4618      	mov	r0, r3
 800947e:	f000 f847 	bl	8009510 <USER_ioctl>
 8009482:	4603      	mov	r3, r0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <SD1_ioctl>:
DSTATUS SD1_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	4603      	mov	r3, r0
 8009494:	603a      	str	r2, [r7, #0]
 8009496:	71fb      	strb	r3, [r7, #7]
 8009498:	460b      	mov	r3, r1
 800949a:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(1);
 800949c:	2001      	movs	r0, #1
 800949e:	f7f8 fa43 	bl	8001928 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 80094a2:	79b9      	ldrb	r1, [r7, #6]
 80094a4:	79fb      	ldrb	r3, [r7, #7]
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f000 f831 	bl	8009510 <USER_ioctl>
 80094ae:	4603      	mov	r3, r0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <SD2_ioctl>:
DSTATUS SD2_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	4603      	mov	r3, r0
 80094c0:	603a      	str	r2, [r7, #0]
 80094c2:	71fb      	strb	r3, [r7, #7]
 80094c4:	460b      	mov	r3, r1
 80094c6:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(2);
 80094c8:	2002      	movs	r0, #2
 80094ca:	f7f8 fa2d 	bl	8001928 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 80094ce:	79b9      	ldrb	r1, [r7, #6]
 80094d0:	79fb      	ldrb	r3, [r7, #7]
 80094d2:	683a      	ldr	r2, [r7, #0]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 f81b 	bl	8009510 <USER_ioctl>
 80094da:	4603      	mov	r3, r0
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3708      	adds	r7, #8
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <SD3_ioctl>:
DSTATUS SD3_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	4603      	mov	r3, r0
 80094ec:	603a      	str	r2, [r7, #0]
 80094ee:	71fb      	strb	r3, [r7, #7]
 80094f0:	460b      	mov	r3, r1
 80094f2:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(3);
 80094f4:	2003      	movs	r0, #3
 80094f6:	f7f8 fa17 	bl	8001928 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 80094fa:	79b9      	ldrb	r1, [r7, #6]
 80094fc:	79fb      	ldrb	r3, [r7, #7]
 80094fe:	683a      	ldr	r2, [r7, #0]
 8009500:	4618      	mov	r0, r3
 8009502:	f000 f805 	bl	8009510 <USER_ioctl>
 8009506:	4603      	mov	r3, r0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	4603      	mov	r3, r0
 8009518:	603a      	str	r2, [r7, #0]
 800951a:	71fb      	strb	r3, [r7, #7]
 800951c:	460b      	mov	r3, r1
 800951e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res;
	sd_ss_set_active(pdrv);
 8009520:	79fb      	ldrb	r3, [r7, #7]
 8009522:	4618      	mov	r0, r3
 8009524:	f7f8 fa00 	bl	8001928 <sd_ss_set_active>
	SS_SD_SELECT();
 8009528:	f7f8 fa1c 	bl	8001964 <sd_ss_active_pin_down>
	if (pdrv) return RES_PARERR;
 800952c:	79fb      	ldrb	r3, [r7, #7]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d001      	beq.n	8009536 <USER_ioctl+0x26>
 8009532:	2304      	movs	r3, #4
 8009534:	e02a      	b.n	800958c <USER_ioctl+0x7c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009536:	4b17      	ldr	r3, [pc, #92]	; (8009594 <USER_ioctl+0x84>)
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	b2db      	uxtb	r3, r3
 800953c:	f003 0301 	and.w	r3, r3, #1
 8009540:	2b00      	cmp	r3, #0
 8009542:	d001      	beq.n	8009548 <USER_ioctl+0x38>
 8009544:	2303      	movs	r3, #3
 8009546:	e021      	b.n	800958c <USER_ioctl+0x7c>
	res = RES_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	73fb      	strb	r3, [r7, #15]
	switch (cmd)
 800954c:	79bb      	ldrb	r3, [r7, #6]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d002      	beq.n	8009558 <USER_ioctl+0x48>
 8009552:	2b02      	cmp	r3, #2
 8009554:	d00a      	beq.n	800956c <USER_ioctl+0x5c>
 8009556:	e010      	b.n	800957a <USER_ioctl+0x6a>
	{
	  case CTRL_SYNC : /* Flush dirty buffer if present */
	    SS_SD_SELECT();
 8009558:	f7f8 fa04 	bl	8001964 <sd_ss_active_pin_down>
	    if (SPI_wait_ready() == 0xFF)
 800955c:	f7f8 fb3f 	bl	8001bde <SPI_wait_ready>
 8009560:	4603      	mov	r3, r0
 8009562:	2bff      	cmp	r3, #255	; 0xff
 8009564:	d10c      	bne.n	8009580 <USER_ioctl+0x70>
	    res = RES_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	73fb      	strb	r3, [r7, #15]
	    break;
 800956a:	e009      	b.n	8009580 <USER_ioctl+0x70>
	  case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
	    *(WORD*)buff = 512;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009572:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	73fb      	strb	r3, [r7, #15]
	    break;
 8009578:	e003      	b.n	8009582 <USER_ioctl+0x72>
	  default:
	    res = RES_PARERR;
 800957a:	2304      	movs	r3, #4
 800957c:	73fb      	strb	r3, [r7, #15]
 800957e:	e000      	b.n	8009582 <USER_ioctl+0x72>
	    break;
 8009580:	bf00      	nop
	}
	SPI_Release();
 8009582:	f7f8 fbaf 	bl	8001ce4 <SPI_Release>
	SS_SD_DESELECT();
 8009586:	f7f8 f9fd 	bl	8001984 <sd_ss_active_pin_up>
    return res;
 800958a:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800958c:	4618      	mov	r0, r3
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	20000239 	.word	0x20000239

08009598 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009598:	b590      	push	{r4, r7, lr}
 800959a:	b089      	sub	sp, #36	; 0x24
 800959c:	af04      	add	r7, sp, #16
 800959e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80095a0:	2301      	movs	r3, #1
 80095a2:	2202      	movs	r2, #2
 80095a4:	2102      	movs	r1, #2
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fda6 	bl	800a0f8 <USBH_FindInterface>
 80095ac:	4603      	mov	r3, r0
 80095ae:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	2bff      	cmp	r3, #255	; 0xff
 80095b4:	d002      	beq.n	80095bc <USBH_CDC_InterfaceInit+0x24>
 80095b6:	7bfb      	ldrb	r3, [r7, #15]
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d901      	bls.n	80095c0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80095bc:	2302      	movs	r3, #2
 80095be:	e13d      	b.n	800983c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
 80095c2:	4619      	mov	r1, r3
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fd7b 	bl	800a0c0 <USBH_SelectInterface>
 80095ca:	4603      	mov	r3, r0
 80095cc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80095ce:	7bbb      	ldrb	r3, [r7, #14]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80095d4:	2302      	movs	r3, #2
 80095d6:	e131      	b.n	800983c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80095de:	2050      	movs	r0, #80	; 0x50
 80095e0:	f00a f91e 	bl	8013820 <malloc>
 80095e4:	4603      	mov	r3, r0
 80095e6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095ee:	69db      	ldr	r3, [r3, #28]
 80095f0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d101      	bne.n	80095fc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80095f8:	2302      	movs	r3, #2
 80095fa:	e11f      	b.n	800983c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80095fc:	2250      	movs	r2, #80	; 0x50
 80095fe:	2100      	movs	r1, #0
 8009600:	68b8      	ldr	r0, [r7, #8]
 8009602:	f00a f92b 	bl	801385c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009606:	7bfb      	ldrb	r3, [r7, #15]
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	211a      	movs	r1, #26
 800960c:	fb01 f303 	mul.w	r3, r1, r3
 8009610:	4413      	add	r3, r2
 8009612:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	b25b      	sxtb	r3, r3
 800961a:	2b00      	cmp	r3, #0
 800961c:	da15      	bge.n	800964a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800961e:	7bfb      	ldrb	r3, [r7, #15]
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	211a      	movs	r1, #26
 8009624:	fb01 f303 	mul.w	r3, r1, r3
 8009628:	4413      	add	r3, r2
 800962a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800962e:	781a      	ldrb	r2, [r3, #0]
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009634:	7bfb      	ldrb	r3, [r7, #15]
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	211a      	movs	r1, #26
 800963a:	fb01 f303 	mul.w	r3, r1, r3
 800963e:	4413      	add	r3, r2
 8009640:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009644:	881a      	ldrh	r2, [r3, #0]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	785b      	ldrb	r3, [r3, #1]
 800964e:	4619      	mov	r1, r3
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f002 fa76 	bl	800bb42 <USBH_AllocPipe>
 8009656:	4603      	mov	r3, r0
 8009658:	461a      	mov	r2, r3
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	7819      	ldrb	r1, [r3, #0]
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	7858      	ldrb	r0, [r3, #1]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	8952      	ldrh	r2, [r2, #10]
 8009676:	9202      	str	r2, [sp, #8]
 8009678:	2203      	movs	r2, #3
 800967a:	9201      	str	r2, [sp, #4]
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	4623      	mov	r3, r4
 8009680:	4602      	mov	r2, r0
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f002 fa2e 	bl	800bae4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	2200      	movs	r2, #0
 800968e:	4619      	mov	r1, r3
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f009 ff1d 	bl	80134d0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009696:	2300      	movs	r3, #0
 8009698:	2200      	movs	r2, #0
 800969a:	210a      	movs	r1, #10
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 fd2b 	bl	800a0f8 <USBH_FindInterface>
 80096a2:	4603      	mov	r3, r0
 80096a4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80096a6:	7bfb      	ldrb	r3, [r7, #15]
 80096a8:	2bff      	cmp	r3, #255	; 0xff
 80096aa:	d002      	beq.n	80096b2 <USBH_CDC_InterfaceInit+0x11a>
 80096ac:	7bfb      	ldrb	r3, [r7, #15]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d901      	bls.n	80096b6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80096b2:	2302      	movs	r3, #2
 80096b4:	e0c2      	b.n	800983c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80096b6:	7bfb      	ldrb	r3, [r7, #15]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	211a      	movs	r1, #26
 80096bc:	fb01 f303 	mul.w	r3, r1, r3
 80096c0:	4413      	add	r3, r2
 80096c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	b25b      	sxtb	r3, r3
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	da16      	bge.n	80096fc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80096ce:	7bfb      	ldrb	r3, [r7, #15]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	211a      	movs	r1, #26
 80096d4:	fb01 f303 	mul.w	r3, r1, r3
 80096d8:	4413      	add	r3, r2
 80096da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80096de:	781a      	ldrb	r2, [r3, #0]
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80096e4:	7bfb      	ldrb	r3, [r7, #15]
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	211a      	movs	r1, #26
 80096ea:	fb01 f303 	mul.w	r3, r1, r3
 80096ee:	4413      	add	r3, r2
 80096f0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80096f4:	881a      	ldrh	r2, [r3, #0]
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	835a      	strh	r2, [r3, #26]
 80096fa:	e015      	b.n	8009728 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	211a      	movs	r1, #26
 8009702:	fb01 f303 	mul.w	r3, r1, r3
 8009706:	4413      	add	r3, r2
 8009708:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800970c:	781a      	ldrb	r2, [r3, #0]
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009712:	7bfb      	ldrb	r3, [r7, #15]
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	211a      	movs	r1, #26
 8009718:	fb01 f303 	mul.w	r3, r1, r3
 800971c:	4413      	add	r3, r2
 800971e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009722:	881a      	ldrh	r2, [r3, #0]
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009728:	7bfb      	ldrb	r3, [r7, #15]
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	211a      	movs	r1, #26
 800972e:	fb01 f303 	mul.w	r3, r1, r3
 8009732:	4413      	add	r3, r2
 8009734:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	b25b      	sxtb	r3, r3
 800973c:	2b00      	cmp	r3, #0
 800973e:	da16      	bge.n	800976e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009740:	7bfb      	ldrb	r3, [r7, #15]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	211a      	movs	r1, #26
 8009746:	fb01 f303 	mul.w	r3, r1, r3
 800974a:	4413      	add	r3, r2
 800974c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009750:	781a      	ldrb	r2, [r3, #0]
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009756:	7bfb      	ldrb	r3, [r7, #15]
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	211a      	movs	r1, #26
 800975c:	fb01 f303 	mul.w	r3, r1, r3
 8009760:	4413      	add	r3, r2
 8009762:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009766:	881a      	ldrh	r2, [r3, #0]
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	835a      	strh	r2, [r3, #26]
 800976c:	e015      	b.n	800979a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800976e:	7bfb      	ldrb	r3, [r7, #15]
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	211a      	movs	r1, #26
 8009774:	fb01 f303 	mul.w	r3, r1, r3
 8009778:	4413      	add	r3, r2
 800977a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800977e:	781a      	ldrb	r2, [r3, #0]
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009784:	7bfb      	ldrb	r3, [r7, #15]
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	211a      	movs	r1, #26
 800978a:	fb01 f303 	mul.w	r3, r1, r3
 800978e:	4413      	add	r3, r2
 8009790:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009794:	881a      	ldrh	r2, [r3, #0]
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	7b9b      	ldrb	r3, [r3, #14]
 800979e:	4619      	mov	r1, r3
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f002 f9ce 	bl	800bb42 <USBH_AllocPipe>
 80097a6:	4603      	mov	r3, r0
 80097a8:	461a      	mov	r2, r3
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	7bdb      	ldrb	r3, [r3, #15]
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f002 f9c4 	bl	800bb42 <USBH_AllocPipe>
 80097ba:	4603      	mov	r3, r0
 80097bc:	461a      	mov	r2, r3
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	7b59      	ldrb	r1, [r3, #13]
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	7b98      	ldrb	r0, [r3, #14]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	8b12      	ldrh	r2, [r2, #24]
 80097da:	9202      	str	r2, [sp, #8]
 80097dc:	2202      	movs	r2, #2
 80097de:	9201      	str	r2, [sp, #4]
 80097e0:	9300      	str	r3, [sp, #0]
 80097e2:	4623      	mov	r3, r4
 80097e4:	4602      	mov	r2, r0
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f002 f97c 	bl	800bae4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	7b19      	ldrb	r1, [r3, #12]
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	7bd8      	ldrb	r0, [r3, #15]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	8b52      	ldrh	r2, [r2, #26]
 8009804:	9202      	str	r2, [sp, #8]
 8009806:	2202      	movs	r2, #2
 8009808:	9201      	str	r2, [sp, #4]
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	4623      	mov	r3, r4
 800980e:	4602      	mov	r2, r0
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f002 f967 	bl	800bae4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	7b5b      	ldrb	r3, [r3, #13]
 8009822:	2200      	movs	r2, #0
 8009824:	4619      	mov	r1, r3
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f009 fe52 	bl	80134d0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	7b1b      	ldrb	r3, [r3, #12]
 8009830:	2200      	movs	r2, #0
 8009832:	4619      	mov	r1, r3
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f009 fe4b 	bl	80134d0 <USBH_LL_SetToggle>

  return USBH_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3714      	adds	r7, #20
 8009840:	46bd      	mov	sp, r7
 8009842:	bd90      	pop	{r4, r7, pc}

08009844 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009852:	69db      	ldr	r3, [r3, #28]
 8009854:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00e      	beq.n	800987c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	4619      	mov	r1, r3
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f002 f95c 	bl	800bb22 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	4619      	mov	r1, r3
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f002 f987 	bl	800bb84 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	7b1b      	ldrb	r3, [r3, #12]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00e      	beq.n	80098a2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	7b1b      	ldrb	r3, [r3, #12]
 8009888:	4619      	mov	r1, r3
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f002 f949 	bl	800bb22 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	7b1b      	ldrb	r3, [r3, #12]
 8009894:	4619      	mov	r1, r3
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f002 f974 	bl	800bb84 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2200      	movs	r2, #0
 80098a0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	7b5b      	ldrb	r3, [r3, #13]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d00e      	beq.n	80098c8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	7b5b      	ldrb	r3, [r3, #13]
 80098ae:	4619      	mov	r1, r3
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f002 f936 	bl	800bb22 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	7b5b      	ldrb	r3, [r3, #13]
 80098ba:	4619      	mov	r1, r3
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f002 f961 	bl	800bb84 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2200      	movs	r2, #0
 80098c6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098ce:	69db      	ldr	r3, [r3, #28]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00b      	beq.n	80098ec <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098da:	69db      	ldr	r3, [r3, #28]
 80098dc:	4618      	mov	r0, r3
 80098de:	f009 ffa7 	bl	8013830 <free>
    phost->pActiveClass->pData = 0U;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098e8:	2200      	movs	r2, #0
 80098ea:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b084      	sub	sp, #16
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009904:	69db      	ldr	r3, [r3, #28]
 8009906:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	3340      	adds	r3, #64	; 0x40
 800990c:	4619      	mov	r1, r3
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 f8da 	bl	8009ac8 <GetLineCoding>
 8009914:	4603      	mov	r3, r0
 8009916:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009918:	7afb      	ldrb	r3, [r7, #11]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d105      	bne.n	800992a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009924:	2102      	movs	r1, #2
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800992a:	7afb      	ldrb	r3, [r7, #11]
}
 800992c:	4618      	mov	r0, r3
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800993c:	2301      	movs	r3, #1
 800993e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009940:	2300      	movs	r3, #0
 8009942:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800994a:	69db      	ldr	r3, [r3, #28]
 800994c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009954:	2b04      	cmp	r3, #4
 8009956:	d877      	bhi.n	8009a48 <USBH_CDC_Process+0x114>
 8009958:	a201      	add	r2, pc, #4	; (adr r2, 8009960 <USBH_CDC_Process+0x2c>)
 800995a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995e:	bf00      	nop
 8009960:	08009975 	.word	0x08009975
 8009964:	0800997b 	.word	0x0800997b
 8009968:	080099ab 	.word	0x080099ab
 800996c:	08009a1f 	.word	0x08009a1f
 8009970:	08009a2d 	.word	0x08009a2d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009974:	2300      	movs	r3, #0
 8009976:	73fb      	strb	r3, [r7, #15]
      break;
 8009978:	e06d      	b.n	8009a56 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800997e:	4619      	mov	r1, r3
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f8c0 	bl	8009b06 <SetLineCoding>
 8009986:	4603      	mov	r3, r0
 8009988:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800998a:	7bbb      	ldrb	r3, [r7, #14]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d104      	bne.n	800999a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	2202      	movs	r2, #2
 8009994:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009998:	e058      	b.n	8009a4c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800999a:	7bbb      	ldrb	r3, [r7, #14]
 800999c:	2b01      	cmp	r3, #1
 800999e:	d055      	beq.n	8009a4c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	2204      	movs	r2, #4
 80099a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80099a8:	e050      	b.n	8009a4c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	3340      	adds	r3, #64	; 0x40
 80099ae:	4619      	mov	r1, r3
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f889 	bl	8009ac8 <GetLineCoding>
 80099b6:	4603      	mov	r3, r0
 80099b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80099ba:	7bbb      	ldrb	r3, [r7, #14]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d126      	bne.n	8009a0e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099d2:	791b      	ldrb	r3, [r3, #4]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d13b      	bne.n	8009a50 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099e2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d133      	bne.n	8009a50 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099f2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d12b      	bne.n	8009a50 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a00:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d124      	bne.n	8009a50 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 fa70 	bl	8009eec <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009a0c:	e020      	b.n	8009a50 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009a0e:	7bbb      	ldrb	r3, [r7, #14]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d01d      	beq.n	8009a50 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	2204      	movs	r2, #4
 8009a18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009a1c:	e018      	b.n	8009a50 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f934 	bl	8009c8c <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 f9c3 	bl	8009db0 <CDC_ProcessReception>
      break;
 8009a2a:	e014      	b.n	8009a56 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f001 fa49 	bl	800aec6 <USBH_ClrFeature>
 8009a34:	4603      	mov	r3, r0
 8009a36:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009a38:	7bbb      	ldrb	r3, [r7, #14]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d10a      	bne.n	8009a54 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009a46:	e005      	b.n	8009a54 <USBH_CDC_Process+0x120>

    default:
      break;
 8009a48:	bf00      	nop
 8009a4a:	e004      	b.n	8009a56 <USBH_CDC_Process+0x122>
      break;
 8009a4c:	bf00      	nop
 8009a4e:	e002      	b.n	8009a56 <USBH_CDC_Process+0x122>
      break;
 8009a50:	bf00      	nop
 8009a52:	e000      	b.n	8009a56 <USBH_CDC_Process+0x122>
      break;
 8009a54:	bf00      	nop

  }

  return status;
 8009a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3710      	adds	r7, #16
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	370c      	adds	r7, #12
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr

08009a76 <USBH_CDC_Stop>:
  *         Stop current CDC Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_CDC_Stop(USBH_HandleTypeDef *phost)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b084      	sub	sp, #16
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a84:	69db      	ldr	r3, [r3, #28]
 8009a86:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	2b0b      	cmp	r3, #11
 8009a90:	d115      	bne.n	8009abe <USBH_CDC_Stop+0x48>
  {
    CDC_Handle->state = CDC_IDLE_STATE;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f002 f83e 	bl	800bb22 <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	7b1b      	ldrb	r3, [r3, #12]
 8009aaa:	4619      	mov	r1, r3
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f002 f838 	bl	800bb22 <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	7b5b      	ldrb	r3, [r3, #13]
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f002 f832 	bl	800bb22 <USBH_ClosePipe>
  }
  return USBH_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	22a1      	movs	r2, #161	; 0xa1
 8009ad6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2221      	movs	r2, #33	; 0x21
 8009adc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2207      	movs	r2, #7
 8009aee:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	2207      	movs	r2, #7
 8009af4:	4619      	mov	r1, r3
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f001 fcb2 	bl	800b460 <USBH_CtlReq>
 8009afc:	4603      	mov	r3, r0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b082      	sub	sp, #8
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2221      	movs	r2, #33	; 0x21
 8009b14:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2220      	movs	r2, #32
 8009b1a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2207      	movs	r2, #7
 8009b2c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	2207      	movs	r2, #7
 8009b32:	4619      	mov	r1, r3
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f001 fc93 	bl	800b460 <USBH_CtlReq>
 8009b3a:	4603      	mov	r3, r0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <USBH_CDC_SetLineCoding>:
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef USBH_CDC_SetLineCoding(USBH_HandleTypeDef *phost,
                                          CDC_LineCodingTypeDef *linecoding)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b54:	69db      	ldr	r3, [r3, #28]
 8009b56:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2b0b      	cmp	r3, #11
 8009b60:	d114      	bne.n	8009b8c <USBH_CDC_SetLineCoding+0x48>
  {
    CDC_Handle->state = CDC_SET_LINE_CODING_STATE;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2201      	movs	r2, #1
 8009b66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->pUserLineCoding = linecoding;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	683a      	ldr	r2, [r7, #0]
 8009b6e:	649a      	str	r2, [r3, #72]	; 0x48

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2204      	movs	r2, #4
 8009b74:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009b84:	2200      	movs	r2, #0
 8009b86:	4619      	mov	r1, r3
 8009b88:	f006 ffd4 	bl	8010b34 <osMessagePut>
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }

  return USBH_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b086      	sub	sp, #24
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	60f8      	str	r0, [r7, #12]
 8009b9e:	60b9      	str	r1, [r7, #8]
 8009ba0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bac:	69db      	ldr	r3, [r3, #28]
 8009bae:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d004      	beq.n	8009bc4 <USBH_CDC_Transmit+0x2e>
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009bc0:	2b03      	cmp	r3, #3
 8009bc2:	d11d      	bne.n	8009c00 <USBH_CDC_Transmit+0x6a>
  {
    CDC_Handle->pTxData = pbuff;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	68ba      	ldr	r2, [r7, #8]
 8009bc8:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	2203      	movs	r2, #3
 8009bd4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 8009be0:	2300      	movs	r3, #0
 8009be2:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2204      	movs	r2, #4
 8009be8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	f006 ff9a 	bl	8010b34 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 8009c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3718      	adds	r7, #24
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
	...

08009c0c <USBH_CDC_Receive>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b086      	sub	sp, #24
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c22:	69db      	ldr	r3, [r3, #28]
 8009c24:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d004      	beq.n	8009c3a <USBH_CDC_Receive+0x2e>
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009c36:	2b03      	cmp	r3, #3
 8009c38:	d120      	bne.n	8009c7c <USBH_CDC_Receive+0x70>
  {
	icListen_rx_msg_basic_header=(icListen_wav_full_header*)pbuff;
 8009c3a:	4a13      	ldr	r2, [pc, #76]	; (8009c88 <USBH_CDC_Receive+0x7c>)
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	6013      	str	r3, [r2, #0]
    CDC_Handle->pRxData = pbuff;
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	68ba      	ldr	r2, [r7, #8]
 8009c44:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	2203      	movs	r2, #3
 8009c50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	2203      	movs	r2, #3
 8009c58:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2204      	movs	r2, #4
 8009c64:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009c74:	2200      	movs	r2, #0
 8009c76:	4619      	mov	r1, r3
 8009c78:	f006 ff5c 	bl	8010b34 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 8009c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3718      	adds	r7, #24
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	20001c74 	.word	0x20001c74

08009c8c <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b086      	sub	sp, #24
 8009c90:	af02      	add	r7, sp, #8
 8009c92:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c9a:	69db      	ldr	r3, [r3, #28]
 8009c9c:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d002      	beq.n	8009cb2 <CDC_ProcessTransmission+0x26>
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d023      	beq.n	8009cf8 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009cb0:	e07a      	b.n	8009da8 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	8b12      	ldrh	r2, [r2, #24]
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d90b      	bls.n	8009cd6 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	69d9      	ldr	r1, [r3, #28]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	8b1a      	ldrh	r2, [r3, #24]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	7b5b      	ldrb	r3, [r3, #13]
 8009cca:	2001      	movs	r0, #1
 8009ccc:	9000      	str	r0, [sp, #0]
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f001 fec5 	bl	800ba5e <USBH_BulkSendData>
 8009cd4:	e00b      	b.n	8009cee <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	7b5b      	ldrb	r3, [r3, #13]
 8009ce4:	2001      	movs	r0, #1
 8009ce6:	9000      	str	r0, [sp, #0]
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f001 feb8 	bl	800ba5e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2202      	movs	r2, #2
 8009cf2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009cf6:	e057      	b.n	8009da8 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	7b5b      	ldrb	r3, [r3, #13]
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f009 fbbc 	bl	801347c <USBH_LL_GetURBState>
 8009d04:	4603      	mov	r3, r0
 8009d06:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009d08:	7afb      	ldrb	r3, [r7, #11]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d136      	bne.n	8009d7c <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	8b12      	ldrh	r2, [r2, #24]
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d90e      	bls.n	8009d38 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	8b12      	ldrh	r2, [r2, #24]
 8009d22:	1a9a      	subs	r2, r3, r2
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	69db      	ldr	r3, [r3, #28]
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	8b12      	ldrh	r2, [r2, #24]
 8009d30:	441a      	add	r2, r3
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	61da      	str	r2, [r3, #28]
 8009d36:	e002      	b.n	8009d3e <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d004      	beq.n	8009d50 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8009d4e:	e006      	b.n	8009d5e <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f009 f921 	bl	8012fa0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2204      	movs	r2, #4
 8009d62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009d72:	2200      	movs	r2, #0
 8009d74:	4619      	mov	r1, r3
 8009d76:	f006 fedd 	bl	8010b34 <osMessagePut>
      break;
 8009d7a:	e014      	b.n	8009da6 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8009d7c:	7afb      	ldrb	r3, [r7, #11]
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d111      	bne.n	8009da6 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2204      	movs	r2, #4
 8009d8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009d9e:	2200      	movs	r2, #0
 8009da0:	4619      	mov	r1, r3
 8009da2:	f006 fec7 	bl	8010b34 <osMessagePut>
      break;
 8009da6:	bf00      	nop
  }
}
 8009da8:	bf00      	nop
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dbe:	69db      	ldr	r3, [r3, #28]
 8009dc0:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009dcc:	2b03      	cmp	r3, #3
 8009dce:	d002      	beq.n	8009dd6 <CDC_ProcessReception+0x26>
 8009dd0:	2b04      	cmp	r3, #4
 8009dd2:	d00e      	beq.n	8009df2 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009dd4:	e07e      	b.n	8009ed4 <CDC_ProcessReception+0x124>
      (void)USBH_BulkReceiveData(phost,
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	6a19      	ldr	r1, [r3, #32]
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	8b5a      	ldrh	r2, [r3, #26]
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	7b1b      	ldrb	r3, [r3, #12]
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f001 fe60 	bl	800baa8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	2204      	movs	r2, #4
 8009dec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009df0:	e070      	b.n	8009ed4 <CDC_ProcessReception+0x124>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	7b1b      	ldrb	r3, [r3, #12]
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f009 fb3f 	bl	801347c <USBH_LL_GetURBState>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009e02:	7cfb      	ldrb	r3, [r7, #19]
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d164      	bne.n	8009ed2 <CDC_ProcessReception+0x122>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	7b1b      	ldrb	r3, [r3, #12]
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f009 faa2 	bl	8013358 <USBH_LL_GetLastXferSize>
 8009e14:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (CDC_Handle->RxDataLength > CDC_Handle->DataItf.InEpSize))
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d043      	beq.n	8009ea8 <CDC_ProcessReception+0xf8>
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e24:	697a      	ldr	r2, [r7, #20]
 8009e26:	8b52      	ldrh	r2, [r2, #26]
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d93d      	bls.n	8009ea8 <CDC_ProcessReception+0xf8>
           CDC_Handle->RxDataLength -= length ;
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	1ad2      	subs	r2, r2, r3
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	629a      	str	r2, [r3, #40]	; 0x28
           CDC_Handle->pRxData += length;
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	6a1a      	ldr	r2, [r3, #32]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	441a      	add	r2, r3
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	621a      	str	r2, [r3, #32]
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 8009e44:	4b25      	ldr	r3, [pc, #148]	; (8009edc <CDC_ProcessReception+0x12c>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	885b      	ldrh	r3, [r3, #2]
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	3306      	adds	r3, #6
 8009e4e:	461a      	mov	r2, r3
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e54:	f5c3 637a 	rsb	r3, r3, #4000	; 0xfa0
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d120      	bne.n	8009e9e <CDC_ProcessReception+0xee>
               CDC_Handle->data_rx_state = CDC_IDLE;
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
               osMessagePut(USB_rxHandle, (uint8_t*)usb_rx_buff[usb_rx_buff_active], 0U);
 8009e64:	4b1e      	ldr	r3, [pc, #120]	; (8009ee0 <CDC_ProcessReception+0x130>)
 8009e66:	6818      	ldr	r0, [r3, #0]
 8009e68:	4b1e      	ldr	r3, [pc, #120]	; (8009ee4 <CDC_ProcessReception+0x134>)
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8009e72:	fb02 f303 	mul.w	r3, r2, r3
 8009e76:	4a1c      	ldr	r2, [pc, #112]	; (8009ee8 <CDC_ProcessReception+0x138>)
 8009e78:	4413      	add	r3, r2
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	f006 fe59 	bl	8010b34 <osMessagePut>
               usb_rx_buff_active++;
 8009e82:	4b18      	ldr	r3, [pc, #96]	; (8009ee4 <CDC_ProcessReception+0x134>)
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	3301      	adds	r3, #1
 8009e88:	b2da      	uxtb	r2, r3
 8009e8a:	4b16      	ldr	r3, [pc, #88]	; (8009ee4 <CDC_ProcessReception+0x134>)
 8009e8c:	701a      	strb	r2, [r3, #0]
               usb_rx_buff_active%=USB_RX_NUM_OF_BUFFERS;
 8009e8e:	4b15      	ldr	r3, [pc, #84]	; (8009ee4 <CDC_ProcessReception+0x134>)
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	f003 0303 	and.w	r3, r3, #3
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	4b12      	ldr	r3, [pc, #72]	; (8009ee4 <CDC_ProcessReception+0x134>)
 8009e9a:	701a      	strb	r2, [r3, #0]
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 8009e9c:	e00b      	b.n	8009eb6 <CDC_ProcessReception+0x106>
         	CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	2203      	movs	r2, #3
 8009ea2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 8009ea6:	e006      	b.n	8009eb6 <CDC_ProcessReception+0x106>
           CDC_Handle->data_rx_state = CDC_IDLE;
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
           USBH_CDC_ReceiveCallback(phost);
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f009 f87f 	bl	8012fb4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2204      	movs	r2, #4
 8009eba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009eca:	2200      	movs	r2, #0
 8009ecc:	4619      	mov	r1, r3
 8009ece:	f006 fe31 	bl	8010b34 <osMessagePut>
      break;
 8009ed2:	bf00      	nop
  }
}
 8009ed4:	bf00      	nop
 8009ed6:	3718      	adds	r7, #24
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	20001c74 	.word	0x20001c74
 8009ee0:	200008b8 	.word	0x200008b8
 8009ee4:	2000bec4 	.word	0x2000bec4
 8009ee8:	20008044 	.word	0x20008044

08009eec <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009ef4:	bf00      	nop
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009f00:	b5b0      	push	{r4, r5, r7, lr}
 8009f02:	b090      	sub	sp, #64	; 0x40
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d101      	bne.n	8009f18 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009f14:	2302      	movs	r3, #2
 8009f16:	e04d      	b.n	8009fb4 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	79fa      	ldrb	r2, [r7, #7]
 8009f1c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f000 f847 	bl	8009fc4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d003      	beq.n	8009f64 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8009f64:	4b15      	ldr	r3, [pc, #84]	; (8009fbc <USBH_Init+0xbc>)
 8009f66:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8009f6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009f6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8009f70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f74:	2100      	movs	r1, #0
 8009f76:	4618      	mov	r0, r3
 8009f78:	f006 fdb3 	bl	8010ae2 <osMessageCreate>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8009f84:	4b0e      	ldr	r3, [pc, #56]	; (8009fc0 <USBH_Init+0xc0>)
 8009f86:	f107 0414 	add.w	r4, r7, #20
 8009f8a:	461d      	mov	r5, r3
 8009f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009f94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8009f98:	f107 0314 	add.w	r3, r7, #20
 8009f9c:	68f9      	ldr	r1, [r7, #12]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f006 fd3f 	bl	8010a22 <osThreadCreate>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f009 f91f 	bl	80131f0 <USBH_LL_Init>

  return USBH_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3740      	adds	r7, #64	; 0x40
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bdb0      	pop	{r4, r5, r7, pc}
 8009fbc:	08014e58 	.word	0x08014e58
 8009fc0:	08014e68 	.word	0x08014e68

08009fc4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	60fb      	str	r3, [r7, #12]
 8009fd4:	e009      	b.n	8009fea <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	33e0      	adds	r3, #224	; 0xe0
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	4413      	add	r3, r2
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	60fb      	str	r3, [r7, #12]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2b0f      	cmp	r3, #15
 8009fee:	d9f2      	bls.n	8009fd6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	60fb      	str	r3, [r7, #12]
 8009ff4:	e009      	b.n	800a00a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a000:	2200      	movs	r2, #0
 800a002:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	3301      	adds	r3, #1
 800a008:	60fb      	str	r3, [r7, #12]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a010:	d3f1      	bcc.n	8009ff6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2201      	movs	r2, #1
 800a022:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2201      	movs	r2, #1
 800a030:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2240      	movs	r2, #64	; 0x40
 800a036:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3714      	adds	r7, #20
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a076:	2300      	movs	r3, #0
 800a078:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d016      	beq.n	800a0ae <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a086:	2b00      	cmp	r3, #0
 800a088:	d10e      	bne.n	800a0a8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a090:	1c59      	adds	r1, r3, #1
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	33de      	adds	r3, #222	; 0xde
 800a09c:	6839      	ldr	r1, [r7, #0]
 800a09e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	73fb      	strb	r3, [r7, #15]
 800a0a6:	e004      	b.n	800a0b2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	73fb      	strb	r3, [r7, #15]
 800a0ac:	e001      	b.n	800a0b2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a0ae:	2302      	movs	r3, #2
 800a0b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3714      	adds	r7, #20
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a0d6:	78fa      	ldrb	r2, [r7, #3]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d204      	bcs.n	800a0e6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	78fa      	ldrb	r2, [r7, #3]
 800a0e0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a0e4:	e001      	b.n	800a0ea <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a0e6:	2302      	movs	r3, #2
 800a0e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3714      	adds	r7, #20
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b087      	sub	sp, #28
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	4608      	mov	r0, r1
 800a102:	4611      	mov	r1, r2
 800a104:	461a      	mov	r2, r3
 800a106:	4603      	mov	r3, r0
 800a108:	70fb      	strb	r3, [r7, #3]
 800a10a:	460b      	mov	r3, r1
 800a10c:	70bb      	strb	r3, [r7, #2]
 800a10e:	4613      	mov	r3, r2
 800a110:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a112:	2300      	movs	r3, #0
 800a114:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a116:	2300      	movs	r3, #0
 800a118:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a120:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a122:	e025      	b.n	800a170 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a124:	7dfb      	ldrb	r3, [r7, #23]
 800a126:	221a      	movs	r2, #26
 800a128:	fb02 f303 	mul.w	r3, r2, r3
 800a12c:	3308      	adds	r3, #8
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	4413      	add	r3, r2
 800a132:	3302      	adds	r3, #2
 800a134:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	795b      	ldrb	r3, [r3, #5]
 800a13a:	78fa      	ldrb	r2, [r7, #3]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d002      	beq.n	800a146 <USBH_FindInterface+0x4e>
 800a140:	78fb      	ldrb	r3, [r7, #3]
 800a142:	2bff      	cmp	r3, #255	; 0xff
 800a144:	d111      	bne.n	800a16a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a14a:	78ba      	ldrb	r2, [r7, #2]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d002      	beq.n	800a156 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a150:	78bb      	ldrb	r3, [r7, #2]
 800a152:	2bff      	cmp	r3, #255	; 0xff
 800a154:	d109      	bne.n	800a16a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a15a:	787a      	ldrb	r2, [r7, #1]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d002      	beq.n	800a166 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a160:	787b      	ldrb	r3, [r7, #1]
 800a162:	2bff      	cmp	r3, #255	; 0xff
 800a164:	d101      	bne.n	800a16a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a166:	7dfb      	ldrb	r3, [r7, #23]
 800a168:	e006      	b.n	800a178 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a16a:	7dfb      	ldrb	r3, [r7, #23]
 800a16c:	3301      	adds	r3, #1
 800a16e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a170:	7dfb      	ldrb	r3, [r7, #23]
 800a172:	2b01      	cmp	r3, #1
 800a174:	d9d6      	bls.n	800a124 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a176:	23ff      	movs	r3, #255	; 0xff
}
 800a178:	4618      	mov	r0, r3
 800a17a:	371c      	adds	r7, #28
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f009 f86b 	bl	8013268 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a192:	2101      	movs	r1, #1
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f009 f984 	bl	80134a2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b088      	sub	sp, #32
 800a1a8:	af04      	add	r7, sp, #16
 800a1aa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d102      	bne.n	800a1c6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2203      	movs	r2, #3
 800a1c4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	2b0b      	cmp	r3, #11
 800a1ce:	f200 8247 	bhi.w	800a660 <USBH_Process+0x4bc>
 800a1d2:	a201      	add	r2, pc, #4	; (adr r2, 800a1d8 <USBH_Process+0x34>)
 800a1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d8:	0800a209 	.word	0x0800a209
 800a1dc:	0800a257 	.word	0x0800a257
 800a1e0:	0800a2db 	.word	0x0800a2db
 800a1e4:	0800a5df 	.word	0x0800a5df
 800a1e8:	0800a661 	.word	0x0800a661
 800a1ec:	0800a39b 	.word	0x0800a39b
 800a1f0:	0800a569 	.word	0x0800a569
 800a1f4:	0800a3ed 	.word	0x0800a3ed
 800a1f8:	0800a429 	.word	0x0800a429
 800a1fc:	0800a463 	.word	0x0800a463
 800a200:	0800a4c1 	.word	0x0800a4c1
 800a204:	0800a5c7 	.word	0x0800a5c7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	2b00      	cmp	r3, #0
 800a212:	f000 8227 	beq.w	800a664 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a21c:	20c8      	movs	r0, #200	; 0xc8
 800a21e:	f009 f987 	bl	8013530 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f009 f87d 	bl	8013322 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a24c:	2200      	movs	r2, #0
 800a24e:	4619      	mov	r1, r3
 800a250:	f006 fc70 	bl	8010b34 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a254:	e206      	b.n	800a664 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d107      	bne.n	800a270 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2202      	movs	r2, #2
 800a26c:	701a      	strb	r2, [r3, #0]
 800a26e:	e025      	b.n	800a2bc <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a276:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a27a:	d914      	bls.n	800a2a6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a282:	3301      	adds	r3, #1
 800a284:	b2da      	uxtb	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a292:	2b03      	cmp	r3, #3
 800a294:	d903      	bls.n	800a29e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	220d      	movs	r2, #13
 800a29a:	701a      	strb	r2, [r3, #0]
 800a29c:	e00e      	b.n	800a2bc <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	701a      	strb	r2, [r3, #0]
 800a2a4:	e00a      	b.n	800a2bc <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a2ac:	f103 020a 	add.w	r2, r3, #10
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a2b6:	200a      	movs	r0, #10
 800a2b8:	f009 f93a 	bl	8013530 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	f006 fc2e 	bl	8010b34 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a2d8:	e1cb      	b.n	800a672 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d005      	beq.n	800a2f0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a2ea:	2104      	movs	r1, #4
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a2f0:	2064      	movs	r0, #100	; 0x64
 800a2f2:	f009 f91d 	bl	8013530 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f008 ffec 	bl	80132d4 <USBH_LL_GetSpeed>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	461a      	mov	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2205      	movs	r2, #5
 800a30a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a30c:	2100      	movs	r1, #0
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f001 fc17 	bl	800bb42 <USBH_AllocPipe>
 800a314:	4603      	mov	r3, r0
 800a316:	461a      	mov	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a31c:	2180      	movs	r1, #128	; 0x80
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f001 fc0f 	bl	800bb42 <USBH_AllocPipe>
 800a324:	4603      	mov	r3, r0
 800a326:	461a      	mov	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	7919      	ldrb	r1, [r3, #4]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a340:	b292      	uxth	r2, r2
 800a342:	9202      	str	r2, [sp, #8]
 800a344:	2200      	movs	r2, #0
 800a346:	9201      	str	r2, [sp, #4]
 800a348:	9300      	str	r3, [sp, #0]
 800a34a:	4603      	mov	r3, r0
 800a34c:	2280      	movs	r2, #128	; 0x80
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f001 fbc8 	bl	800bae4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	7959      	ldrb	r1, [r3, #5]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a368:	b292      	uxth	r2, r2
 800a36a:	9202      	str	r2, [sp, #8]
 800a36c:	2200      	movs	r2, #0
 800a36e:	9201      	str	r2, [sp, #4]
 800a370:	9300      	str	r3, [sp, #0]
 800a372:	4603      	mov	r3, r0
 800a374:	2200      	movs	r2, #0
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f001 fbb4 	bl	800bae4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a390:	2200      	movs	r2, #0
 800a392:	4619      	mov	r1, r3
 800a394:	f006 fbce 	bl	8010b34 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a398:	e16b      	b.n	800a672 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 f96e 	bl	800a67c <USBH_HandleEnum>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a3a4:	7bbb      	ldrb	r3, [r7, #14]
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f040 815d 	bne.w	800a668 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d103      	bne.n	800a3c8 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2208      	movs	r2, #8
 800a3c4:	701a      	strb	r2, [r3, #0]
 800a3c6:	e002      	b.n	800a3ce <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2207      	movs	r2, #7
 800a3cc:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2205      	movs	r2, #5
 800a3d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	f006 fba5 	bl	8010b34 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a3ea:	e13d      	b.n	800a668 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	f000 813a 	beq.w	800a66c <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a3fe:	2101      	movs	r1, #1
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2208      	movs	r2, #8
 800a408:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2205      	movs	r2, #5
 800a40e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a41e:	2200      	movs	r2, #0
 800a420:	4619      	mov	r1, r3
 800a422:	f006 fb87 	bl	8010b34 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a426:	e121      	b.n	800a66c <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a42e:	b29b      	uxth	r3, r3
 800a430:	4619      	mov	r1, r3
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 fd00 	bl	800ae38 <USBH_SetCfg>
 800a438:	4603      	mov	r3, r0
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d102      	bne.n	800a444 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2209      	movs	r2, #9
 800a442:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2201      	movs	r2, #1
 800a448:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a458:	2200      	movs	r2, #0
 800a45a:	4619      	mov	r1, r3
 800a45c:	f006 fb6a 	bl	8010b34 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a460:	e107      	b.n	800a672 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a468:	f003 0320 	and.w	r3, r3, #32
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d015      	beq.n	800a49c <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a470:	2101      	movs	r1, #1
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 fd03 	bl	800ae7e <USBH_SetFeature>
 800a478:	4603      	mov	r3, r0
 800a47a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a47c:	7bbb      	ldrb	r3, [r7, #14]
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	2b00      	cmp	r3, #0
 800a482:	d103      	bne.n	800a48c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	220a      	movs	r2, #10
 800a488:	701a      	strb	r2, [r3, #0]
 800a48a:	e00a      	b.n	800a4a2 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800a48c:	7bbb      	ldrb	r3, [r7, #14]
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	2b03      	cmp	r3, #3
 800a492:	d106      	bne.n	800a4a2 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	220a      	movs	r2, #10
 800a498:	701a      	strb	r2, [r3, #0]
 800a49a:	e002      	b.n	800a4a2 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	220a      	movs	r2, #10
 800a4a0:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	f006 fb3b 	bl	8010b34 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a4be:	e0d8      	b.n	800a672 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d03f      	beq.n	800a54a <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	73fb      	strb	r3, [r7, #15]
 800a4d6:	e016      	b.n	800a506 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a4d8:	7bfa      	ldrb	r2, [r7, #15]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	32de      	adds	r2, #222	; 0xde
 800a4de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e2:	791a      	ldrb	r2, [r3, #4]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d108      	bne.n	800a500 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a4ee:	7bfa      	ldrb	r2, [r7, #15]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	32de      	adds	r2, #222	; 0xde
 800a4f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a4fe:	e005      	b.n	800a50c <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a500:	7bfb      	ldrb	r3, [r7, #15]
 800a502:	3301      	adds	r3, #1
 800a504:	73fb      	strb	r3, [r7, #15]
 800a506:	7bfb      	ldrb	r3, [r7, #15]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d0e5      	beq.n	800a4d8 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a512:	2b00      	cmp	r3, #0
 800a514:	d016      	beq.n	800a544 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	4798      	blx	r3
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d109      	bne.n	800a53c <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2206      	movs	r2, #6
 800a52c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a534:	2103      	movs	r1, #3
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	4798      	blx	r3
 800a53a:	e006      	b.n	800a54a <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	220d      	movs	r2, #13
 800a540:	701a      	strb	r2, [r3, #0]
 800a542:	e002      	b.n	800a54a <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	220d      	movs	r2, #13
 800a548:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2205      	movs	r2, #5
 800a54e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a55e:	2200      	movs	r2, #0
 800a560:	4619      	mov	r1, r3
 800a562:	f006 fae7 	bl	8010b34 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a566:	e084      	b.n	800a672 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d017      	beq.n	800a5a2 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	4798      	blx	r3
 800a57e:	4603      	mov	r3, r0
 800a580:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a582:	7bbb      	ldrb	r3, [r7, #14]
 800a584:	b2db      	uxtb	r3, r3
 800a586:	2b00      	cmp	r3, #0
 800a588:	d103      	bne.n	800a592 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	220b      	movs	r2, #11
 800a58e:	701a      	strb	r2, [r3, #0]
 800a590:	e00a      	b.n	800a5a8 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800a592:	7bbb      	ldrb	r3, [r7, #14]
 800a594:	b2db      	uxtb	r3, r3
 800a596:	2b02      	cmp	r3, #2
 800a598:	d106      	bne.n	800a5a8 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	220d      	movs	r2, #13
 800a59e:	701a      	strb	r2, [r3, #0]
 800a5a0:	e002      	b.n	800a5a8 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	220d      	movs	r2, #13
 800a5a6:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2205      	movs	r2, #5
 800a5ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a5bc:	2200      	movs	r2, #0
 800a5be:	4619      	mov	r1, r3
 800a5c0:	f006 fab8 	bl	8010b34 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a5c4:	e055      	b.n	800a672 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d04f      	beq.n	800a670 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5d6:	695b      	ldr	r3, [r3, #20]
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	4798      	blx	r3
      }
      break;
 800a5dc:	e048      	b.n	800a670 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f7ff fcec 	bl	8009fc4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d009      	beq.n	800a60a <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a610:	2b00      	cmp	r3, #0
 800a612:	d005      	beq.n	800a620 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a61a:	2105      	movs	r1, #5
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a626:	b2db      	uxtb	r3, r3
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d107      	bne.n	800a63c <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f7ff fda5 	bl	800a184 <USBH_Start>
 800a63a:	e002      	b.n	800a642 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f008 fe13 	bl	8013268 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2201      	movs	r2, #1
 800a646:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a656:	2200      	movs	r2, #0
 800a658:	4619      	mov	r1, r3
 800a65a:	f006 fa6b 	bl	8010b34 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a65e:	e008      	b.n	800a672 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800a660:	bf00      	nop
 800a662:	e006      	b.n	800a672 <USBH_Process+0x4ce>
      break;
 800a664:	bf00      	nop
 800a666:	e004      	b.n	800a672 <USBH_Process+0x4ce>
      break;
 800a668:	bf00      	nop
 800a66a:	e002      	b.n	800a672 <USBH_Process+0x4ce>
    break;
 800a66c:	bf00      	nop
 800a66e:	e000      	b.n	800a672 <USBH_Process+0x4ce>
      break;
 800a670:	bf00      	nop
  }
  return USBH_OK;
 800a672:	2300      	movs	r3, #0
}
 800a674:	4618      	mov	r0, r3
 800a676:	3710      	adds	r7, #16
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b088      	sub	sp, #32
 800a680:	af04      	add	r7, sp, #16
 800a682:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a684:	2301      	movs	r3, #1
 800a686:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a688:	2301      	movs	r3, #1
 800a68a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	785b      	ldrb	r3, [r3, #1]
 800a690:	2b07      	cmp	r3, #7
 800a692:	f200 8208 	bhi.w	800aaa6 <USBH_HandleEnum+0x42a>
 800a696:	a201      	add	r2, pc, #4	; (adr r2, 800a69c <USBH_HandleEnum+0x20>)
 800a698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a69c:	0800a6bd 	.word	0x0800a6bd
 800a6a0:	0800a77b 	.word	0x0800a77b
 800a6a4:	0800a7e5 	.word	0x0800a7e5
 800a6a8:	0800a873 	.word	0x0800a873
 800a6ac:	0800a8dd 	.word	0x0800a8dd
 800a6b0:	0800a94d 	.word	0x0800a94d
 800a6b4:	0800a9e9 	.word	0x0800a9e9
 800a6b8:	0800aa67 	.word	0x0800aa67
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a6bc:	2108      	movs	r1, #8
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 faea 	bl	800ac98 <USBH_Get_DevDesc>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a6c8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d130      	bne.n	800a730 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	7919      	ldrb	r1, [r3, #4]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a6f2:	b292      	uxth	r2, r2
 800a6f4:	9202      	str	r2, [sp, #8]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	9201      	str	r2, [sp, #4]
 800a6fa:	9300      	str	r3, [sp, #0]
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2280      	movs	r2, #128	; 0x80
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f001 f9ef 	bl	800bae4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	7959      	ldrb	r1, [r3, #5]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a71a:	b292      	uxth	r2, r2
 800a71c:	9202      	str	r2, [sp, #8]
 800a71e:	2200      	movs	r2, #0
 800a720:	9201      	str	r2, [sp, #4]
 800a722:	9300      	str	r3, [sp, #0]
 800a724:	4603      	mov	r3, r0
 800a726:	2200      	movs	r2, #0
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f001 f9db 	bl	800bae4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a72e:	e1bc      	b.n	800aaaa <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a730:	7bbb      	ldrb	r3, [r7, #14]
 800a732:	2b03      	cmp	r3, #3
 800a734:	f040 81b9 	bne.w	800aaaa <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a73e:	3301      	adds	r3, #1
 800a740:	b2da      	uxtb	r2, r3
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a74e:	2b03      	cmp	r3, #3
 800a750:	d903      	bls.n	800a75a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	220d      	movs	r2, #13
 800a756:	701a      	strb	r2, [r3, #0]
      break;
 800a758:	e1a7      	b.n	800aaaa <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	795b      	ldrb	r3, [r3, #5]
 800a75e:	4619      	mov	r1, r3
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f001 fa0f 	bl	800bb84 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	791b      	ldrb	r3, [r3, #4]
 800a76a:	4619      	mov	r1, r3
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f001 fa09 	bl	800bb84 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	701a      	strb	r2, [r3, #0]
      break;
 800a778:	e197      	b.n	800aaaa <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a77a:	2112      	movs	r1, #18
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 fa8b 	bl	800ac98 <USBH_Get_DevDesc>
 800a782:	4603      	mov	r3, r0
 800a784:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a786:	7bbb      	ldrb	r3, [r7, #14]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d103      	bne.n	800a794 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2202      	movs	r2, #2
 800a790:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a792:	e18c      	b.n	800aaae <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a794:	7bbb      	ldrb	r3, [r7, #14]
 800a796:	2b03      	cmp	r3, #3
 800a798:	f040 8189 	bne.w	800aaae <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	b2da      	uxtb	r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a7b2:	2b03      	cmp	r3, #3
 800a7b4:	d903      	bls.n	800a7be <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	220d      	movs	r2, #13
 800a7ba:	701a      	strb	r2, [r3, #0]
      break;
 800a7bc:	e177      	b.n	800aaae <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	795b      	ldrb	r3, [r3, #5]
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f001 f9dd 	bl	800bb84 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	791b      	ldrb	r3, [r3, #4]
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f001 f9d7 	bl	800bb84 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	701a      	strb	r2, [r3, #0]
      break;
 800a7e2:	e164      	b.n	800aaae <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a7e4:	2101      	movs	r1, #1
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fb02 	bl	800adf0 <USBH_SetAddress>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a7f0:	7bbb      	ldrb	r3, [r7, #14]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d132      	bne.n	800a85c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a7f6:	2002      	movs	r0, #2
 800a7f8:	f008 fe9a 	bl	8013530 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2203      	movs	r2, #3
 800a808:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	7919      	ldrb	r1, [r3, #4]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a81e:	b292      	uxth	r2, r2
 800a820:	9202      	str	r2, [sp, #8]
 800a822:	2200      	movs	r2, #0
 800a824:	9201      	str	r2, [sp, #4]
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	4603      	mov	r3, r0
 800a82a:	2280      	movs	r2, #128	; 0x80
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f001 f959 	bl	800bae4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	7959      	ldrb	r1, [r3, #5]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a846:	b292      	uxth	r2, r2
 800a848:	9202      	str	r2, [sp, #8]
 800a84a:	2200      	movs	r2, #0
 800a84c:	9201      	str	r2, [sp, #4]
 800a84e:	9300      	str	r3, [sp, #0]
 800a850:	4603      	mov	r3, r0
 800a852:	2200      	movs	r2, #0
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f001 f945 	bl	800bae4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a85a:	e12a      	b.n	800aab2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a85c:	7bbb      	ldrb	r3, [r7, #14]
 800a85e:	2b03      	cmp	r3, #3
 800a860:	f040 8127 	bne.w	800aab2 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	220d      	movs	r2, #13
 800a868:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	705a      	strb	r2, [r3, #1]
      break;
 800a870:	e11f      	b.n	800aab2 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a872:	2109      	movs	r1, #9
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 fa37 	bl	800ace8 <USBH_Get_CfgDesc>
 800a87a:	4603      	mov	r3, r0
 800a87c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a87e:	7bbb      	ldrb	r3, [r7, #14]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d103      	bne.n	800a88c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2204      	movs	r2, #4
 800a888:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a88a:	e114      	b.n	800aab6 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a88c:	7bbb      	ldrb	r3, [r7, #14]
 800a88e:	2b03      	cmp	r3, #3
 800a890:	f040 8111 	bne.w	800aab6 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a89a:	3301      	adds	r3, #1
 800a89c:	b2da      	uxtb	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a8aa:	2b03      	cmp	r3, #3
 800a8ac:	d903      	bls.n	800a8b6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	220d      	movs	r2, #13
 800a8b2:	701a      	strb	r2, [r3, #0]
      break;
 800a8b4:	e0ff      	b.n	800aab6 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	795b      	ldrb	r3, [r3, #5]
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f001 f961 	bl	800bb84 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	791b      	ldrb	r3, [r3, #4]
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f001 f95b 	bl	800bb84 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	701a      	strb	r2, [r3, #0]
      break;
 800a8da:	e0ec      	b.n	800aab6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 f9ff 	bl	800ace8 <USBH_Get_CfgDesc>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a8ee:	7bbb      	ldrb	r3, [r7, #14]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d103      	bne.n	800a8fc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2205      	movs	r2, #5
 800a8f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a8fa:	e0de      	b.n	800aaba <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8fc:	7bbb      	ldrb	r3, [r7, #14]
 800a8fe:	2b03      	cmp	r3, #3
 800a900:	f040 80db 	bne.w	800aaba <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a90a:	3301      	adds	r3, #1
 800a90c:	b2da      	uxtb	r2, r3
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a91a:	2b03      	cmp	r3, #3
 800a91c:	d903      	bls.n	800a926 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	220d      	movs	r2, #13
 800a922:	701a      	strb	r2, [r3, #0]
      break;
 800a924:	e0c9      	b.n	800aaba <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	795b      	ldrb	r3, [r3, #5]
 800a92a:	4619      	mov	r1, r3
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f001 f929 	bl	800bb84 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	791b      	ldrb	r3, [r3, #4]
 800a936:	4619      	mov	r1, r3
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f001 f923 	bl	800bb84 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	701a      	strb	r2, [r3, #0]
      break;
 800a94a:	e0b6      	b.n	800aaba <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a952:	2b00      	cmp	r3, #0
 800a954:	d036      	beq.n	800a9c4 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a962:	23ff      	movs	r3, #255	; 0xff
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 f9e3 	bl	800ad30 <USBH_Get_StringDesc>
 800a96a:	4603      	mov	r3, r0
 800a96c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a96e:	7bbb      	ldrb	r3, [r7, #14]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d111      	bne.n	800a998 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2206      	movs	r2, #6
 800a978:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2205      	movs	r2, #5
 800a97e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a98e:	2200      	movs	r2, #0
 800a990:	4619      	mov	r1, r3
 800a992:	f006 f8cf 	bl	8010b34 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a996:	e092      	b.n	800aabe <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a998:	7bbb      	ldrb	r3, [r7, #14]
 800a99a:	2b03      	cmp	r3, #3
 800a99c:	f040 808f 	bne.w	800aabe <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2206      	movs	r2, #6
 800a9a4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2205      	movs	r2, #5
 800a9aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	4619      	mov	r1, r3
 800a9be:	f006 f8b9 	bl	8010b34 <osMessagePut>
      break;
 800a9c2:	e07c      	b.n	800aabe <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2206      	movs	r2, #6
 800a9c8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2205      	movs	r2, #5
 800a9ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a9de:	2200      	movs	r2, #0
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	f006 f8a7 	bl	8010b34 <osMessagePut>
      break;
 800a9e6:	e06a      	b.n	800aabe <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d027      	beq.n	800aa42 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a9fe:	23ff      	movs	r3, #255	; 0xff
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 f995 	bl	800ad30 <USBH_Get_StringDesc>
 800aa06:	4603      	mov	r3, r0
 800aa08:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aa0a:	7bbb      	ldrb	r3, [r7, #14]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d103      	bne.n	800aa18 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2207      	movs	r2, #7
 800aa14:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800aa16:	e054      	b.n	800aac2 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa18:	7bbb      	ldrb	r3, [r7, #14]
 800aa1a:	2b03      	cmp	r3, #3
 800aa1c:	d151      	bne.n	800aac2 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2207      	movs	r2, #7
 800aa22:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2205      	movs	r2, #5
 800aa28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aa38:	2200      	movs	r2, #0
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	f006 f87a 	bl	8010b34 <osMessagePut>
      break;
 800aa40:	e03f      	b.n	800aac2 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2207      	movs	r2, #7
 800aa46:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2205      	movs	r2, #5
 800aa4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	4619      	mov	r1, r3
 800aa60:	f006 f868 	bl	8010b34 <osMessagePut>
      break;
 800aa64:	e02d      	b.n	800aac2 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d017      	beq.n	800aaa0 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800aa7c:	23ff      	movs	r3, #255	; 0xff
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 f956 	bl	800ad30 <USBH_Get_StringDesc>
 800aa84:	4603      	mov	r3, r0
 800aa86:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aa88:	7bbb      	ldrb	r3, [r7, #14]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d102      	bne.n	800aa94 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800aa92:	e018      	b.n	800aac6 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa94:	7bbb      	ldrb	r3, [r7, #14]
 800aa96:	2b03      	cmp	r3, #3
 800aa98:	d115      	bne.n	800aac6 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	73fb      	strb	r3, [r7, #15]
      break;
 800aa9e:	e012      	b.n	800aac6 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	73fb      	strb	r3, [r7, #15]
      break;
 800aaa4:	e00f      	b.n	800aac6 <USBH_HandleEnum+0x44a>

    default:
      break;
 800aaa6:	bf00      	nop
 800aaa8:	e00e      	b.n	800aac8 <USBH_HandleEnum+0x44c>
      break;
 800aaaa:	bf00      	nop
 800aaac:	e00c      	b.n	800aac8 <USBH_HandleEnum+0x44c>
      break;
 800aaae:	bf00      	nop
 800aab0:	e00a      	b.n	800aac8 <USBH_HandleEnum+0x44c>
      break;
 800aab2:	bf00      	nop
 800aab4:	e008      	b.n	800aac8 <USBH_HandleEnum+0x44c>
      break;
 800aab6:	bf00      	nop
 800aab8:	e006      	b.n	800aac8 <USBH_HandleEnum+0x44c>
      break;
 800aaba:	bf00      	nop
 800aabc:	e004      	b.n	800aac8 <USBH_HandleEnum+0x44c>
      break;
 800aabe:	bf00      	nop
 800aac0:	e002      	b.n	800aac8 <USBH_HandleEnum+0x44c>
      break;
 800aac2:	bf00      	nop
 800aac4:	e000      	b.n	800aac8 <USBH_HandleEnum+0x44c>
      break;
 800aac6:	bf00      	nop
  }
  return Status;
 800aac8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3710      	adds	r7, #16
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop

0800aad4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	683a      	ldr	r2, [r7, #0]
 800aae2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800aae6:	bf00      	nop
 800aae8:	370c      	adds	r7, #12
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr

0800aaf2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b082      	sub	sp, #8
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ab00:	1c5a      	adds	r2, r3, #1
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 f804 	bl	800ab16 <USBH_HandleSof>
}
 800ab0e:	bf00      	nop
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b082      	sub	sp, #8
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	2b0b      	cmp	r3, #11
 800ab26:	d10a      	bne.n	800ab3e <USBH_HandleSof+0x28>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d005      	beq.n	800ab3e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab38:	699b      	ldr	r3, [r3, #24]
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	4798      	blx	r3
  }
}
 800ab3e:	bf00      	nop
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b082      	sub	sp, #8
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2201      	movs	r2, #1
 800ab52:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	f005 ffe1 	bl	8010b34 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800ab72:	bf00      	nop
}
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ab7a:	b480      	push	{r7}
 800ab7c:	b083      	sub	sp, #12
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ab8a:	bf00      	nop
}
 800ab8c:	370c      	adds	r7, #12
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b082      	sub	sp, #8
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2201      	movs	r2, #1
 800aba2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2200      	movs	r2, #0
 800abaa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2201      	movs	r2, #1
 800abba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800abca:	2200      	movs	r2, #0
 800abcc:	4619      	mov	r1, r3
 800abce:	f005 ffb1 	bl	8010b34 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800abd2:	2300      	movs	r3, #0
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2200      	movs	r2, #0
 800abf0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f008 fb4e 	bl	801329e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	791b      	ldrb	r3, [r3, #4]
 800ac06:	4619      	mov	r1, r3
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 ffbb 	bl	800bb84 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	795b      	ldrb	r3, [r3, #5]
 800ac12:	4619      	mov	r1, r3
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 ffb5 	bl	800bb84 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ac2e:	2200      	movs	r2, #0
 800ac30:	4619      	mov	r1, r3
 800ac32:	f005 ff7f 	bl	8010b34 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b086      	sub	sp, #24
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800ac4e:	f107 030c 	add.w	r3, r7, #12
 800ac52:	f04f 32ff 	mov.w	r2, #4294967295
 800ac56:	4618      	mov	r0, r3
 800ac58:	f005 ffac 	bl	8010bb4 <osMessageGet>
    if (event.status == osEventMessage)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2b10      	cmp	r3, #16
 800ac60:	d1f2      	bne.n	800ac48 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f7ff fa9e 	bl	800a1a4 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800ac68:	e7ee      	b.n	800ac48 <USBH_Process_OS+0x8>

0800ac6a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b082      	sub	sp, #8
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2201      	movs	r2, #1
 800ac76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ac86:	2200      	movs	r2, #0
 800ac88:	4619      	mov	r1, r3
 800ac8a:	f005 ff53 	bl	8010b34 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800ac8e:	2300      	movs	r3, #0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3708      	adds	r7, #8
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b086      	sub	sp, #24
 800ac9c:	af02      	add	r7, sp, #8
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	460b      	mov	r3, r1
 800aca2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800acaa:	78fb      	ldrb	r3, [r7, #3]
 800acac:	b29b      	uxth	r3, r3
 800acae:	9300      	str	r3, [sp, #0]
 800acb0:	4613      	mov	r3, r2
 800acb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800acb6:	2100      	movs	r1, #0
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 f864 	bl	800ad86 <USBH_GetDescriptor>
 800acbe:	4603      	mov	r3, r0
 800acc0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800acc2:	7bfb      	ldrb	r3, [r7, #15]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d10a      	bne.n	800acde <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f203 3026 	addw	r0, r3, #806	; 0x326
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800acd4:	78fa      	ldrb	r2, [r7, #3]
 800acd6:	b292      	uxth	r2, r2
 800acd8:	4619      	mov	r1, r3
 800acda:	f000 f918 	bl	800af0e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800acde:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b086      	sub	sp, #24
 800acec:	af02      	add	r7, sp, #8
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	460b      	mov	r3, r1
 800acf2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	331c      	adds	r3, #28
 800acf8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800acfa:	887b      	ldrh	r3, [r7, #2]
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad04:	2100      	movs	r1, #0
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 f83d 	bl	800ad86 <USBH_GetDescriptor>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d107      	bne.n	800ad26 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800ad16:	887b      	ldrh	r3, [r7, #2]
 800ad18:	461a      	mov	r2, r3
 800ad1a:	68b9      	ldr	r1, [r7, #8]
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 f987 	bl	800b030 <USBH_ParseCfgDesc>
 800ad22:	4603      	mov	r3, r0
 800ad24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ad26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b088      	sub	sp, #32
 800ad34:	af02      	add	r7, sp, #8
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	607a      	str	r2, [r7, #4]
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	72fb      	strb	r3, [r7, #11]
 800ad40:	4613      	mov	r3, r2
 800ad42:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800ad44:	7afb      	ldrb	r3, [r7, #11]
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ad4c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800ad54:	893b      	ldrh	r3, [r7, #8]
 800ad56:	9300      	str	r3, [sp, #0]
 800ad58:	460b      	mov	r3, r1
 800ad5a:	2100      	movs	r1, #0
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f000 f812 	bl	800ad86 <USBH_GetDescriptor>
 800ad62:	4603      	mov	r3, r0
 800ad64:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ad66:	7dfb      	ldrb	r3, [r7, #23]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d107      	bne.n	800ad7c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ad72:	893a      	ldrh	r2, [r7, #8]
 800ad74:	6879      	ldr	r1, [r7, #4]
 800ad76:	4618      	mov	r0, r3
 800ad78:	f000 fb24 	bl	800b3c4 <USBH_ParseStringDesc>
  }

  return status;
 800ad7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3718      	adds	r7, #24
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b084      	sub	sp, #16
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	60f8      	str	r0, [r7, #12]
 800ad8e:	607b      	str	r3, [r7, #4]
 800ad90:	460b      	mov	r3, r1
 800ad92:	72fb      	strb	r3, [r7, #11]
 800ad94:	4613      	mov	r3, r2
 800ad96:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	789b      	ldrb	r3, [r3, #2]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d11c      	bne.n	800adda <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ada0:	7afb      	ldrb	r3, [r7, #11]
 800ada2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ada6:	b2da      	uxtb	r2, r3
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2206      	movs	r2, #6
 800adb0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	893a      	ldrh	r2, [r7, #8]
 800adb6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800adb8:	893b      	ldrh	r3, [r7, #8]
 800adba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800adbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adc2:	d104      	bne.n	800adce <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f240 4209 	movw	r2, #1033	; 0x409
 800adca:	829a      	strh	r2, [r3, #20]
 800adcc:	e002      	b.n	800add4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	8b3a      	ldrh	r2, [r7, #24]
 800add8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800adda:	8b3b      	ldrh	r3, [r7, #24]
 800addc:	461a      	mov	r2, r3
 800adde:	6879      	ldr	r1, [r7, #4]
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f000 fb3d 	bl	800b460 <USBH_CtlReq>
 800ade6:	4603      	mov	r3, r0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	460b      	mov	r3, r1
 800adfa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	789b      	ldrb	r3, [r3, #2]
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d10f      	bne.n	800ae24 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2205      	movs	r2, #5
 800ae0e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ae10:	78fb      	ldrb	r3, [r7, #3]
 800ae12:	b29a      	uxth	r2, r3
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2200      	movs	r2, #0
 800ae22:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ae24:	2200      	movs	r2, #0
 800ae26:	2100      	movs	r1, #0
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 fb19 	bl	800b460 <USBH_CtlReq>
 800ae2e:	4603      	mov	r3, r0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	460b      	mov	r3, r1
 800ae42:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	789b      	ldrb	r3, [r3, #2]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d10e      	bne.n	800ae6a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2209      	movs	r2, #9
 800ae56:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	887a      	ldrh	r2, [r7, #2]
 800ae5c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 faf6 	bl	800b460 <USBH_CtlReq>
 800ae74:	4603      	mov	r3, r0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3708      	adds	r7, #8
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b082      	sub	sp, #8
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
 800ae86:	460b      	mov	r3, r1
 800ae88:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	789b      	ldrb	r3, [r3, #2]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d10f      	bne.n	800aeb2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2203      	movs	r2, #3
 800ae9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ae9e:	78fb      	ldrb	r3, [r7, #3]
 800aea0:	b29a      	uxth	r2, r3
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 fad2 	bl	800b460 <USBH_CtlReq>
 800aebc:	4603      	mov	r3, r0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3708      	adds	r7, #8
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b082      	sub	sp, #8
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	460b      	mov	r3, r1
 800aed0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	789b      	ldrb	r3, [r3, #2]
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d10f      	bne.n	800aefa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2202      	movs	r2, #2
 800aede:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2201      	movs	r2, #1
 800aee4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800aeec:	78fb      	ldrb	r3, [r7, #3]
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800aefa:	2200      	movs	r2, #0
 800aefc:	2100      	movs	r1, #0
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 faae 	bl	800b460 <USBH_CtlReq>
 800af04:	4603      	mov	r3, r0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3708      	adds	r7, #8
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800af0e:	b480      	push	{r7}
 800af10:	b085      	sub	sp, #20
 800af12:	af00      	add	r7, sp, #0
 800af14:	60f8      	str	r0, [r7, #12]
 800af16:	60b9      	str	r1, [r7, #8]
 800af18:	4613      	mov	r3, r2
 800af1a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	781a      	ldrb	r2, [r3, #0]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	785a      	ldrb	r2, [r3, #1]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	3302      	adds	r3, #2
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	b29a      	uxth	r2, r3
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	3303      	adds	r3, #3
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	021b      	lsls	r3, r3, #8
 800af3e:	b29b      	uxth	r3, r3
 800af40:	4313      	orrs	r3, r2
 800af42:	b29a      	uxth	r2, r3
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	791a      	ldrb	r2, [r3, #4]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	795a      	ldrb	r2, [r3, #5]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	799a      	ldrb	r2, [r3, #6]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	79da      	ldrb	r2, [r3, #7]
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	79db      	ldrb	r3, [r3, #7]
 800af6c:	2b20      	cmp	r3, #32
 800af6e:	dc11      	bgt.n	800af94 <USBH_ParseDevDesc+0x86>
 800af70:	2b08      	cmp	r3, #8
 800af72:	db16      	blt.n	800afa2 <USBH_ParseDevDesc+0x94>
 800af74:	3b08      	subs	r3, #8
 800af76:	2201      	movs	r2, #1
 800af78:	fa02 f303 	lsl.w	r3, r2, r3
 800af7c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800af80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af84:	2b00      	cmp	r3, #0
 800af86:	bf14      	ite	ne
 800af88:	2301      	movne	r3, #1
 800af8a:	2300      	moveq	r3, #0
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d102      	bne.n	800af98 <USBH_ParseDevDesc+0x8a>
 800af92:	e006      	b.n	800afa2 <USBH_ParseDevDesc+0x94>
 800af94:	2b40      	cmp	r3, #64	; 0x40
 800af96:	d104      	bne.n	800afa2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	79da      	ldrb	r2, [r3, #7]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	71da      	strb	r2, [r3, #7]
      break;
 800afa0:	e003      	b.n	800afaa <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2240      	movs	r2, #64	; 0x40
 800afa6:	71da      	strb	r2, [r3, #7]
      break;
 800afa8:	bf00      	nop
  }

  if (length > 8U)
 800afaa:	88fb      	ldrh	r3, [r7, #6]
 800afac:	2b08      	cmp	r3, #8
 800afae:	d939      	bls.n	800b024 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	3308      	adds	r3, #8
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	b29a      	uxth	r2, r3
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	3309      	adds	r3, #9
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	021b      	lsls	r3, r3, #8
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	4313      	orrs	r3, r2
 800afc6:	b29a      	uxth	r2, r3
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	330a      	adds	r3, #10
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	b29a      	uxth	r2, r3
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	330b      	adds	r3, #11
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	b29b      	uxth	r3, r3
 800afdc:	021b      	lsls	r3, r3, #8
 800afde:	b29b      	uxth	r3, r3
 800afe0:	4313      	orrs	r3, r2
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	330c      	adds	r3, #12
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	b29a      	uxth	r2, r3
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	330d      	adds	r3, #13
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	021b      	lsls	r3, r3, #8
 800affa:	b29b      	uxth	r3, r3
 800affc:	4313      	orrs	r3, r2
 800affe:	b29a      	uxth	r2, r3
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	7b9a      	ldrb	r2, [r3, #14]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	7bda      	ldrb	r2, [r3, #15]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	7c1a      	ldrb	r2, [r3, #16]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	7c5a      	ldrb	r2, [r3, #17]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	745a      	strb	r2, [r3, #17]
  }
}
 800b024:	bf00      	nop
 800b026:	3714      	adds	r7, #20
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b08c      	sub	sp, #48	; 0x30
 800b034:	af00      	add	r7, sp, #0
 800b036:	60f8      	str	r0, [r7, #12]
 800b038:	60b9      	str	r1, [r7, #8]
 800b03a:	4613      	mov	r3, r2
 800b03c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b044:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b046:	2300      	movs	r3, #0
 800b048:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b050:	2300      	movs	r3, #0
 800b052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800b056:	2300      	movs	r3, #0
 800b058:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	781a      	ldrb	r2, [r3, #0]
 800b064:	6a3b      	ldr	r3, [r7, #32]
 800b066:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	785a      	ldrb	r2, [r3, #1]
 800b06c:	6a3b      	ldr	r3, [r7, #32]
 800b06e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	3302      	adds	r3, #2
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	b29a      	uxth	r2, r3
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	3303      	adds	r3, #3
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	b29b      	uxth	r3, r3
 800b080:	021b      	lsls	r3, r3, #8
 800b082:	b29b      	uxth	r3, r3
 800b084:	4313      	orrs	r3, r2
 800b086:	b29b      	uxth	r3, r3
 800b088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b08c:	bf28      	it	cs
 800b08e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800b092:	b29a      	uxth	r2, r3
 800b094:	6a3b      	ldr	r3, [r7, #32]
 800b096:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	791a      	ldrb	r2, [r3, #4]
 800b09c:	6a3b      	ldr	r3, [r7, #32]
 800b09e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	795a      	ldrb	r2, [r3, #5]
 800b0a4:	6a3b      	ldr	r3, [r7, #32]
 800b0a6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	799a      	ldrb	r2, [r3, #6]
 800b0ac:	6a3b      	ldr	r3, [r7, #32]
 800b0ae:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	79da      	ldrb	r2, [r3, #7]
 800b0b4:	6a3b      	ldr	r3, [r7, #32]
 800b0b6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	7a1a      	ldrb	r2, [r3, #8]
 800b0bc:	6a3b      	ldr	r3, [r7, #32]
 800b0be:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800b0c0:	6a3b      	ldr	r3, [r7, #32]
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	2b09      	cmp	r3, #9
 800b0c6:	d002      	beq.n	800b0ce <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b0c8:	6a3b      	ldr	r3, [r7, #32]
 800b0ca:	2209      	movs	r2, #9
 800b0cc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b0ce:	88fb      	ldrh	r3, [r7, #6]
 800b0d0:	2b09      	cmp	r3, #9
 800b0d2:	f240 809d 	bls.w	800b210 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800b0d6:	2309      	movs	r3, #9
 800b0d8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b0de:	e081      	b.n	800b1e4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b0e0:	f107 0316 	add.w	r3, r7, #22
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0e8:	f000 f99f 	bl	800b42a <USBH_GetNextDesc>
 800b0ec:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f0:	785b      	ldrb	r3, [r3, #1]
 800b0f2:	2b04      	cmp	r3, #4
 800b0f4:	d176      	bne.n	800b1e4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	2b09      	cmp	r3, #9
 800b0fc:	d002      	beq.n	800b104 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b100:	2209      	movs	r2, #9
 800b102:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b108:	221a      	movs	r2, #26
 800b10a:	fb02 f303 	mul.w	r3, r2, r3
 800b10e:	3308      	adds	r3, #8
 800b110:	6a3a      	ldr	r2, [r7, #32]
 800b112:	4413      	add	r3, r2
 800b114:	3302      	adds	r3, #2
 800b116:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b118:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b11a:	69f8      	ldr	r0, [r7, #28]
 800b11c:	f000 f87e 	bl	800b21c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b120:	2300      	movs	r3, #0
 800b122:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b126:	2300      	movs	r3, #0
 800b128:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b12a:	e043      	b.n	800b1b4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b12c:	f107 0316 	add.w	r3, r7, #22
 800b130:	4619      	mov	r1, r3
 800b132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b134:	f000 f979 	bl	800b42a <USBH_GetNextDesc>
 800b138:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13c:	785b      	ldrb	r3, [r3, #1]
 800b13e:	2b05      	cmp	r3, #5
 800b140:	d138      	bne.n	800b1b4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	795b      	ldrb	r3, [r3, #5]
 800b146:	2b01      	cmp	r3, #1
 800b148:	d10f      	bne.n	800b16a <USBH_ParseCfgDesc+0x13a>
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	799b      	ldrb	r3, [r3, #6]
 800b14e:	2b02      	cmp	r3, #2
 800b150:	d10b      	bne.n	800b16a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b152:	69fb      	ldr	r3, [r7, #28]
 800b154:	79db      	ldrb	r3, [r3, #7]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d10f      	bne.n	800b17a <USBH_ParseCfgDesc+0x14a>
 800b15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	2b09      	cmp	r3, #9
 800b160:	d00b      	beq.n	800b17a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800b162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b164:	2209      	movs	r2, #9
 800b166:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b168:	e007      	b.n	800b17a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800b16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	2b07      	cmp	r3, #7
 800b170:	d004      	beq.n	800b17c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b174:	2207      	movs	r2, #7
 800b176:	701a      	strb	r2, [r3, #0]
 800b178:	e000      	b.n	800b17c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b17a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b17c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b180:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b184:	3201      	adds	r2, #1
 800b186:	00d2      	lsls	r2, r2, #3
 800b188:	211a      	movs	r1, #26
 800b18a:	fb01 f303 	mul.w	r3, r1, r3
 800b18e:	4413      	add	r3, r2
 800b190:	3308      	adds	r3, #8
 800b192:	6a3a      	ldr	r2, [r7, #32]
 800b194:	4413      	add	r3, r2
 800b196:	3304      	adds	r3, #4
 800b198:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b19a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b19c:	69b9      	ldr	r1, [r7, #24]
 800b19e:	68f8      	ldr	r0, [r7, #12]
 800b1a0:	f000 f86b 	bl	800b27a <USBH_ParseEPDesc>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800b1aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b1b4:	69fb      	ldr	r3, [r7, #28]
 800b1b6:	791b      	ldrb	r3, [r3, #4]
 800b1b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d204      	bcs.n	800b1ca <USBH_ParseCfgDesc+0x19a>
 800b1c0:	6a3b      	ldr	r3, [r7, #32]
 800b1c2:	885a      	ldrh	r2, [r3, #2]
 800b1c4:	8afb      	ldrh	r3, [r7, #22]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d8b0      	bhi.n	800b12c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	791b      	ldrb	r3, [r3, #4]
 800b1ce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d201      	bcs.n	800b1da <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800b1d6:	2303      	movs	r3, #3
 800b1d8:	e01c      	b.n	800b214 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800b1da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1de:	3301      	adds	r3, #1
 800b1e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b1e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d805      	bhi.n	800b1f8 <USBH_ParseCfgDesc+0x1c8>
 800b1ec:	6a3b      	ldr	r3, [r7, #32]
 800b1ee:	885a      	ldrh	r2, [r3, #2]
 800b1f0:	8afb      	ldrh	r3, [r7, #22]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	f63f af74 	bhi.w	800b0e0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b1f8:	6a3b      	ldr	r3, [r7, #32]
 800b1fa:	791b      	ldrb	r3, [r3, #4]
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	bf28      	it	cs
 800b200:	2302      	movcs	r3, #2
 800b202:	b2db      	uxtb	r3, r3
 800b204:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b208:	429a      	cmp	r2, r3
 800b20a:	d201      	bcs.n	800b210 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800b20c:	2303      	movs	r3, #3
 800b20e:	e001      	b.n	800b214 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800b210:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b214:	4618      	mov	r0, r3
 800b216:	3730      	adds	r7, #48	; 0x30
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	781a      	ldrb	r2, [r3, #0]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	785a      	ldrb	r2, [r3, #1]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	789a      	ldrb	r2, [r3, #2]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	78da      	ldrb	r2, [r3, #3]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	791a      	ldrb	r2, [r3, #4]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	795a      	ldrb	r2, [r3, #5]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	799a      	ldrb	r2, [r3, #6]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	79da      	ldrb	r2, [r3, #7]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	7a1a      	ldrb	r2, [r3, #8]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	721a      	strb	r2, [r3, #8]
}
 800b26e:	bf00      	nop
 800b270:	370c      	adds	r7, #12
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr

0800b27a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800b27a:	b480      	push	{r7}
 800b27c:	b087      	sub	sp, #28
 800b27e:	af00      	add	r7, sp, #0
 800b280:	60f8      	str	r0, [r7, #12]
 800b282:	60b9      	str	r1, [r7, #8]
 800b284:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b286:	2300      	movs	r3, #0
 800b288:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	781a      	ldrb	r2, [r3, #0]
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	785a      	ldrb	r2, [r3, #1]
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	789a      	ldrb	r2, [r3, #2]
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	78da      	ldrb	r2, [r3, #3]
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	3304      	adds	r3, #4
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	b29a      	uxth	r2, r3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	3305      	adds	r3, #5
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	021b      	lsls	r3, r3, #8
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	799a      	ldrb	r2, [r3, #6]
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	889b      	ldrh	r3, [r3, #4]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d102      	bne.n	800b2dc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800b2d6:	2303      	movs	r3, #3
 800b2d8:	75fb      	strb	r3, [r7, #23]
 800b2da:	e033      	b.n	800b344 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	889b      	ldrh	r3, [r3, #4]
 800b2e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b2e4:	f023 0307 	bic.w	r3, r3, #7
 800b2e8:	b29a      	uxth	r2, r3
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	889b      	ldrh	r3, [r3, #4]
 800b2f2:	b21a      	sxth	r2, r3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	3304      	adds	r3, #4
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	b299      	uxth	r1, r3
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	3305      	adds	r3, #5
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	b29b      	uxth	r3, r3
 800b304:	021b      	lsls	r3, r3, #8
 800b306:	b29b      	uxth	r3, r3
 800b308:	430b      	orrs	r3, r1
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b310:	2b00      	cmp	r3, #0
 800b312:	d110      	bne.n	800b336 <USBH_ParseEPDesc+0xbc>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	3304      	adds	r3, #4
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	b299      	uxth	r1, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	3305      	adds	r3, #5
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	b29b      	uxth	r3, r3
 800b324:	021b      	lsls	r3, r3, #8
 800b326:	b29b      	uxth	r3, r3
 800b328:	430b      	orrs	r3, r1
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	b21b      	sxth	r3, r3
 800b32e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b332:	b21b      	sxth	r3, r3
 800b334:	e001      	b.n	800b33a <USBH_ParseEPDesc+0xc0>
 800b336:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b33a:	4313      	orrs	r3, r2
 800b33c:	b21b      	sxth	r3, r3
 800b33e:	b29a      	uxth	r2, r3
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d116      	bne.n	800b37c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	78db      	ldrb	r3, [r3, #3]
 800b352:	f003 0303 	and.w	r3, r3, #3
 800b356:	2b01      	cmp	r3, #1
 800b358:	d005      	beq.n	800b366 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	78db      	ldrb	r3, [r3, #3]
 800b35e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b362:	2b03      	cmp	r3, #3
 800b364:	d127      	bne.n	800b3b6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	799b      	ldrb	r3, [r3, #6]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d003      	beq.n	800b376 <USBH_ParseEPDesc+0xfc>
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	799b      	ldrb	r3, [r3, #6]
 800b372:	2b10      	cmp	r3, #16
 800b374:	d91f      	bls.n	800b3b6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b376:	2303      	movs	r3, #3
 800b378:	75fb      	strb	r3, [r7, #23]
 800b37a:	e01c      	b.n	800b3b6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	78db      	ldrb	r3, [r3, #3]
 800b380:	f003 0303 	and.w	r3, r3, #3
 800b384:	2b01      	cmp	r3, #1
 800b386:	d10a      	bne.n	800b39e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	799b      	ldrb	r3, [r3, #6]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d003      	beq.n	800b398 <USBH_ParseEPDesc+0x11e>
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	799b      	ldrb	r3, [r3, #6]
 800b394:	2b10      	cmp	r3, #16
 800b396:	d90e      	bls.n	800b3b6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b398:	2303      	movs	r3, #3
 800b39a:	75fb      	strb	r3, [r7, #23]
 800b39c:	e00b      	b.n	800b3b6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	78db      	ldrb	r3, [r3, #3]
 800b3a2:	f003 0303 	and.w	r3, r3, #3
 800b3a6:	2b03      	cmp	r3, #3
 800b3a8:	d105      	bne.n	800b3b6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	799b      	ldrb	r3, [r3, #6]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d101      	bne.n	800b3b6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b3b2:	2303      	movs	r3, #3
 800b3b4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b3b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	371c      	adds	r7, #28
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b087      	sub	sp, #28
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	2b03      	cmp	r3, #3
 800b3da:	d120      	bne.n	800b41e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	1e9a      	subs	r2, r3, #2
 800b3e2:	88fb      	ldrh	r3, [r7, #6]
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	bf28      	it	cs
 800b3e8:	4613      	movcs	r3, r2
 800b3ea:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	3302      	adds	r3, #2
 800b3f0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	82fb      	strh	r3, [r7, #22]
 800b3f6:	e00b      	b.n	800b410 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b3f8:	8afb      	ldrh	r3, [r7, #22]
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	781a      	ldrb	r2, [r3, #0]
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	3301      	adds	r3, #1
 800b408:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b40a:	8afb      	ldrh	r3, [r7, #22]
 800b40c:	3302      	adds	r3, #2
 800b40e:	82fb      	strh	r3, [r7, #22]
 800b410:	8afa      	ldrh	r2, [r7, #22]
 800b412:	8abb      	ldrh	r3, [r7, #20]
 800b414:	429a      	cmp	r2, r3
 800b416:	d3ef      	bcc.n	800b3f8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	2200      	movs	r2, #0
 800b41c:	701a      	strb	r2, [r3, #0]
  }
}
 800b41e:	bf00      	nop
 800b420:	371c      	adds	r7, #28
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr

0800b42a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b42a:	b480      	push	{r7}
 800b42c:	b085      	sub	sp, #20
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
 800b432:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	881a      	ldrh	r2, [r3, #0]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	4413      	add	r3, r2
 800b440:	b29a      	uxth	r2, r3
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4413      	add	r3, r2
 800b450:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b452:	68fb      	ldr	r3, [r7, #12]
}
 800b454:	4618      	mov	r0, r3
 800b456:	3714      	adds	r7, #20
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr

0800b460 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b086      	sub	sp, #24
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	4613      	mov	r3, r2
 800b46c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b46e:	2301      	movs	r3, #1
 800b470:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	789b      	ldrb	r3, [r3, #2]
 800b476:	2b01      	cmp	r3, #1
 800b478:	d002      	beq.n	800b480 <USBH_CtlReq+0x20>
 800b47a:	2b02      	cmp	r3, #2
 800b47c:	d01d      	beq.n	800b4ba <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800b47e:	e043      	b.n	800b508 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	68ba      	ldr	r2, [r7, #8]
 800b484:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	88fa      	ldrh	r2, [r7, #6]
 800b48a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2201      	movs	r2, #1
 800b490:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2202      	movs	r2, #2
 800b496:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b498:	2301      	movs	r3, #1
 800b49a:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2203      	movs	r2, #3
 800b4a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	f005 fb3e 	bl	8010b34 <osMessagePut>
      break;
 800b4b8:	e026      	b.n	800b508 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b4ba:	68f8      	ldr	r0, [r7, #12]
 800b4bc:	f000 f82a 	bl	800b514 <USBH_HandleControl>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b4c4:	7dfb      	ldrb	r3, [r7, #23]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d002      	beq.n	800b4d0 <USBH_CtlReq+0x70>
 800b4ca:	7dfb      	ldrb	r3, [r7, #23]
 800b4cc:	2b03      	cmp	r3, #3
 800b4ce:	d106      	bne.n	800b4de <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	761a      	strb	r2, [r3, #24]
 800b4dc:	e005      	b.n	800b4ea <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b4de:	7dfb      	ldrb	r3, [r7, #23]
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	d102      	bne.n	800b4ea <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2203      	movs	r2, #3
 800b4ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b4fe:	2200      	movs	r2, #0
 800b500:	4619      	mov	r1, r3
 800b502:	f005 fb17 	bl	8010b34 <osMessagePut>
      break;
 800b506:	bf00      	nop
  }
  return status;
 800b508:	7dfb      	ldrb	r3, [r7, #23]
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3718      	adds	r7, #24
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
	...

0800b514 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b086      	sub	sp, #24
 800b518:	af02      	add	r7, sp, #8
 800b51a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b51c:	2301      	movs	r3, #1
 800b51e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b520:	2300      	movs	r3, #0
 800b522:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	7e1b      	ldrb	r3, [r3, #24]
 800b528:	3b01      	subs	r3, #1
 800b52a:	2b0a      	cmp	r3, #10
 800b52c:	f200 8229 	bhi.w	800b982 <USBH_HandleControl+0x46e>
 800b530:	a201      	add	r2, pc, #4	; (adr r2, 800b538 <USBH_HandleControl+0x24>)
 800b532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b536:	bf00      	nop
 800b538:	0800b565 	.word	0x0800b565
 800b53c:	0800b57f 	.word	0x0800b57f
 800b540:	0800b621 	.word	0x0800b621
 800b544:	0800b647 	.word	0x0800b647
 800b548:	0800b6d3 	.word	0x0800b6d3
 800b54c:	0800b6fd 	.word	0x0800b6fd
 800b550:	0800b7bf 	.word	0x0800b7bf
 800b554:	0800b7e1 	.word	0x0800b7e1
 800b558:	0800b873 	.word	0x0800b873
 800b55c:	0800b899 	.word	0x0800b899
 800b560:	0800b92b 	.word	0x0800b92b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f103 0110 	add.w	r1, r3, #16
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	795b      	ldrb	r3, [r3, #5]
 800b56e:	461a      	mov	r2, r3
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 fa17 	bl	800b9a4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2202      	movs	r2, #2
 800b57a:	761a      	strb	r2, [r3, #24]
      break;
 800b57c:	e20c      	b.n	800b998 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	795b      	ldrb	r3, [r3, #5]
 800b582:	4619      	mov	r1, r3
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f007 ff79 	bl	801347c <USBH_LL_GetURBState>
 800b58a:	4603      	mov	r3, r0
 800b58c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b58e:	7bbb      	ldrb	r3, [r7, #14]
 800b590:	2b01      	cmp	r3, #1
 800b592:	d12c      	bne.n	800b5ee <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	7c1b      	ldrb	r3, [r3, #16]
 800b598:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b59c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	8adb      	ldrh	r3, [r3, #22]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d00a      	beq.n	800b5bc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b5a6:	7b7b      	ldrb	r3, [r7, #13]
 800b5a8:	2b80      	cmp	r3, #128	; 0x80
 800b5aa:	d103      	bne.n	800b5b4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2203      	movs	r2, #3
 800b5b0:	761a      	strb	r2, [r3, #24]
 800b5b2:	e00d      	b.n	800b5d0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2205      	movs	r2, #5
 800b5b8:	761a      	strb	r2, [r3, #24]
 800b5ba:	e009      	b.n	800b5d0 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b5bc:	7b7b      	ldrb	r3, [r7, #13]
 800b5be:	2b80      	cmp	r3, #128	; 0x80
 800b5c0:	d103      	bne.n	800b5ca <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2209      	movs	r2, #9
 800b5c6:	761a      	strb	r2, [r3, #24]
 800b5c8:	e002      	b.n	800b5d0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2207      	movs	r2, #7
 800b5ce:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2203      	movs	r2, #3
 800b5d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	f005 faa4 	bl	8010b34 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b5ec:	e1cb      	b.n	800b986 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b5ee:	7bbb      	ldrb	r3, [r7, #14]
 800b5f0:	2b04      	cmp	r3, #4
 800b5f2:	d003      	beq.n	800b5fc <USBH_HandleControl+0xe8>
 800b5f4:	7bbb      	ldrb	r3, [r7, #14]
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	f040 81c5 	bne.w	800b986 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	220b      	movs	r2, #11
 800b600:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2203      	movs	r2, #3
 800b606:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b616:	2200      	movs	r2, #0
 800b618:	4619      	mov	r1, r3
 800b61a:	f005 fa8b 	bl	8010b34 <osMessagePut>
      break;
 800b61e:	e1b2      	b.n	800b986 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b626:	b29a      	uxth	r2, r3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6899      	ldr	r1, [r3, #8]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	899a      	ldrh	r2, [r3, #12]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	791b      	ldrb	r3, [r3, #4]
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 f9f2 	bl	800ba22 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2204      	movs	r2, #4
 800b642:	761a      	strb	r2, [r3, #24]
      break;
 800b644:	e1a8      	b.n	800b998 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	791b      	ldrb	r3, [r3, #4]
 800b64a:	4619      	mov	r1, r3
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f007 ff15 	bl	801347c <USBH_LL_GetURBState>
 800b652:	4603      	mov	r3, r0
 800b654:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b656:	7bbb      	ldrb	r3, [r7, #14]
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d110      	bne.n	800b67e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2209      	movs	r2, #9
 800b660:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2203      	movs	r2, #3
 800b666:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b676:	2200      	movs	r2, #0
 800b678:	4619      	mov	r1, r3
 800b67a:	f005 fa5b 	bl	8010b34 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b67e:	7bbb      	ldrb	r3, [r7, #14]
 800b680:	2b05      	cmp	r3, #5
 800b682:	d110      	bne.n	800b6a6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b684:	2303      	movs	r3, #3
 800b686:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2203      	movs	r2, #3
 800b68c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b69c:	2200      	movs	r2, #0
 800b69e:	4619      	mov	r1, r3
 800b6a0:	f005 fa48 	bl	8010b34 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b6a4:	e171      	b.n	800b98a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800b6a6:	7bbb      	ldrb	r3, [r7, #14]
 800b6a8:	2b04      	cmp	r3, #4
 800b6aa:	f040 816e 	bne.w	800b98a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	220b      	movs	r2, #11
 800b6b2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2203      	movs	r2, #3
 800b6b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	f005 fa32 	bl	8010b34 <osMessagePut>
      break;
 800b6d0:	e15b      	b.n	800b98a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6899      	ldr	r1, [r3, #8]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	899a      	ldrh	r2, [r3, #12]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	795b      	ldrb	r3, [r3, #5]
 800b6de:	2001      	movs	r0, #1
 800b6e0:	9000      	str	r0, [sp, #0]
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 f978 	bl	800b9d8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2206      	movs	r2, #6
 800b6f8:	761a      	strb	r2, [r3, #24]
      break;
 800b6fa:	e14d      	b.n	800b998 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	795b      	ldrb	r3, [r3, #5]
 800b700:	4619      	mov	r1, r3
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f007 feba 	bl	801347c <USBH_LL_GetURBState>
 800b708:	4603      	mov	r3, r0
 800b70a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b70c:	7bbb      	ldrb	r3, [r7, #14]
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d111      	bne.n	800b736 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2207      	movs	r2, #7
 800b716:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2203      	movs	r2, #3
 800b71c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b72c:	2200      	movs	r2, #0
 800b72e:	4619      	mov	r1, r3
 800b730:	f005 fa00 	bl	8010b34 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b734:	e12b      	b.n	800b98e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800b736:	7bbb      	ldrb	r3, [r7, #14]
 800b738:	2b05      	cmp	r3, #5
 800b73a:	d113      	bne.n	800b764 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	220c      	movs	r2, #12
 800b740:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b742:	2303      	movs	r3, #3
 800b744:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2203      	movs	r2, #3
 800b74a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b75a:	2200      	movs	r2, #0
 800b75c:	4619      	mov	r1, r3
 800b75e:	f005 f9e9 	bl	8010b34 <osMessagePut>
      break;
 800b762:	e114      	b.n	800b98e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b764:	7bbb      	ldrb	r3, [r7, #14]
 800b766:	2b02      	cmp	r3, #2
 800b768:	d111      	bne.n	800b78e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2205      	movs	r2, #5
 800b76e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2203      	movs	r2, #3
 800b774:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b784:	2200      	movs	r2, #0
 800b786:	4619      	mov	r1, r3
 800b788:	f005 f9d4 	bl	8010b34 <osMessagePut>
      break;
 800b78c:	e0ff      	b.n	800b98e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800b78e:	7bbb      	ldrb	r3, [r7, #14]
 800b790:	2b04      	cmp	r3, #4
 800b792:	f040 80fc 	bne.w	800b98e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	220b      	movs	r2, #11
 800b79a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b79c:	2302      	movs	r3, #2
 800b79e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2203      	movs	r2, #3
 800b7a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	f005 f9bc 	bl	8010b34 <osMessagePut>
      break;
 800b7bc:	e0e7      	b.n	800b98e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	791b      	ldrb	r3, [r3, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	2100      	movs	r1, #0
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 f92b 	bl	800ba22 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b7d2:	b29a      	uxth	r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2208      	movs	r2, #8
 800b7dc:	761a      	strb	r2, [r3, #24]

      break;
 800b7de:	e0db      	b.n	800b998 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	791b      	ldrb	r3, [r3, #4]
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f007 fe48 	bl	801347c <USBH_LL_GetURBState>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b7f0:	7bbb      	ldrb	r3, [r7, #14]
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d113      	bne.n	800b81e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	220d      	movs	r2, #13
 800b7fa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2203      	movs	r2, #3
 800b804:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b814:	2200      	movs	r2, #0
 800b816:	4619      	mov	r1, r3
 800b818:	f005 f98c 	bl	8010b34 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b81c:	e0b9      	b.n	800b992 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800b81e:	7bbb      	ldrb	r3, [r7, #14]
 800b820:	2b04      	cmp	r3, #4
 800b822:	d111      	bne.n	800b848 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	220b      	movs	r2, #11
 800b828:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2203      	movs	r2, #3
 800b82e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b83e:	2200      	movs	r2, #0
 800b840:	4619      	mov	r1, r3
 800b842:	f005 f977 	bl	8010b34 <osMessagePut>
      break;
 800b846:	e0a4      	b.n	800b992 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800b848:	7bbb      	ldrb	r3, [r7, #14]
 800b84a:	2b05      	cmp	r3, #5
 800b84c:	f040 80a1 	bne.w	800b992 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800b850:	2303      	movs	r3, #3
 800b852:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2203      	movs	r2, #3
 800b858:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b868:	2200      	movs	r2, #0
 800b86a:	4619      	mov	r1, r3
 800b86c:	f005 f962 	bl	8010b34 <osMessagePut>
      break;
 800b870:	e08f      	b.n	800b992 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	795b      	ldrb	r3, [r3, #5]
 800b876:	2201      	movs	r2, #1
 800b878:	9200      	str	r2, [sp, #0]
 800b87a:	2200      	movs	r2, #0
 800b87c:	2100      	movs	r1, #0
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 f8aa 	bl	800b9d8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b88a:	b29a      	uxth	r2, r3
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	220a      	movs	r2, #10
 800b894:	761a      	strb	r2, [r3, #24]
      break;
 800b896:	e07f      	b.n	800b998 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	795b      	ldrb	r3, [r3, #5]
 800b89c:	4619      	mov	r1, r3
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f007 fdec 	bl	801347c <USBH_LL_GetURBState>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b8a8:	7bbb      	ldrb	r3, [r7, #14]
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d113      	bne.n	800b8d6 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	220d      	movs	r2, #13
 800b8b6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2203      	movs	r2, #3
 800b8bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	f005 f930 	bl	8010b34 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b8d4:	e05f      	b.n	800b996 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b8d6:	7bbb      	ldrb	r3, [r7, #14]
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d111      	bne.n	800b900 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2209      	movs	r2, #9
 800b8e0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2203      	movs	r2, #3
 800b8e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	f005 f91b 	bl	8010b34 <osMessagePut>
      break;
 800b8fe:	e04a      	b.n	800b996 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800b900:	7bbb      	ldrb	r3, [r7, #14]
 800b902:	2b04      	cmp	r3, #4
 800b904:	d147      	bne.n	800b996 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	220b      	movs	r2, #11
 800b90a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2203      	movs	r2, #3
 800b910:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b920:	2200      	movs	r2, #0
 800b922:	4619      	mov	r1, r3
 800b924:	f005 f906 	bl	8010b34 <osMessagePut>
      break;
 800b928:	e035      	b.n	800b996 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	7e5b      	ldrb	r3, [r3, #25]
 800b92e:	3301      	adds	r3, #1
 800b930:	b2da      	uxtb	r2, r3
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	765a      	strb	r2, [r3, #25]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	7e5b      	ldrb	r3, [r3, #25]
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	d806      	bhi.n	800b94c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2201      	movs	r2, #1
 800b942:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2201      	movs	r2, #1
 800b948:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b94a:	e025      	b.n	800b998 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b952:	2106      	movs	r1, #6
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	795b      	ldrb	r3, [r3, #5]
 800b962:	4619      	mov	r1, r3
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 f90d 	bl	800bb84 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	791b      	ldrb	r3, [r3, #4]
 800b96e:	4619      	mov	r1, r3
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 f907 	bl	800bb84 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b97c:	2302      	movs	r3, #2
 800b97e:	73fb      	strb	r3, [r7, #15]
      break;
 800b980:	e00a      	b.n	800b998 <USBH_HandleControl+0x484>

    default:
      break;
 800b982:	bf00      	nop
 800b984:	e008      	b.n	800b998 <USBH_HandleControl+0x484>
      break;
 800b986:	bf00      	nop
 800b988:	e006      	b.n	800b998 <USBH_HandleControl+0x484>
      break;
 800b98a:	bf00      	nop
 800b98c:	e004      	b.n	800b998 <USBH_HandleControl+0x484>
      break;
 800b98e:	bf00      	nop
 800b990:	e002      	b.n	800b998 <USBH_HandleControl+0x484>
      break;
 800b992:	bf00      	nop
 800b994:	e000      	b.n	800b998 <USBH_HandleControl+0x484>
      break;
 800b996:	bf00      	nop
  }

  return status;
 800b998:	7bfb      	ldrb	r3, [r7, #15]
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop

0800b9a4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b088      	sub	sp, #32
 800b9a8:	af04      	add	r7, sp, #16
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b9b2:	79f9      	ldrb	r1, [r7, #7]
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	9303      	str	r3, [sp, #12]
 800b9b8:	2308      	movs	r3, #8
 800b9ba:	9302      	str	r3, [sp, #8]
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	9301      	str	r3, [sp, #4]
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	9300      	str	r3, [sp, #0]
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	68f8      	ldr	r0, [r7, #12]
 800b9ca:	f007 fd26 	bl	801341a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3710      	adds	r7, #16
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b088      	sub	sp, #32
 800b9dc:	af04      	add	r7, sp, #16
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	4611      	mov	r1, r2
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	80fb      	strh	r3, [r7, #6]
 800b9ea:	4613      	mov	r3, r2
 800b9ec:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d001      	beq.n	800b9fc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b9fc:	7979      	ldrb	r1, [r7, #5]
 800b9fe:	7e3b      	ldrb	r3, [r7, #24]
 800ba00:	9303      	str	r3, [sp, #12]
 800ba02:	88fb      	ldrh	r3, [r7, #6]
 800ba04:	9302      	str	r3, [sp, #8]
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	9301      	str	r3, [sp, #4]
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	9300      	str	r3, [sp, #0]
 800ba0e:	2300      	movs	r3, #0
 800ba10:	2200      	movs	r2, #0
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	f007 fd01 	bl	801341a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ba18:	2300      	movs	r3, #0
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3710      	adds	r7, #16
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b088      	sub	sp, #32
 800ba26:	af04      	add	r7, sp, #16
 800ba28:	60f8      	str	r0, [r7, #12]
 800ba2a:	60b9      	str	r1, [r7, #8]
 800ba2c:	4611      	mov	r1, r2
 800ba2e:	461a      	mov	r2, r3
 800ba30:	460b      	mov	r3, r1
 800ba32:	80fb      	strh	r3, [r7, #6]
 800ba34:	4613      	mov	r3, r2
 800ba36:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ba38:	7979      	ldrb	r1, [r7, #5]
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	9303      	str	r3, [sp, #12]
 800ba3e:	88fb      	ldrh	r3, [r7, #6]
 800ba40:	9302      	str	r3, [sp, #8]
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	9301      	str	r3, [sp, #4]
 800ba46:	2301      	movs	r3, #1
 800ba48:	9300      	str	r3, [sp, #0]
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	68f8      	ldr	r0, [r7, #12]
 800ba50:	f007 fce3 	bl	801341a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ba54:	2300      	movs	r3, #0

}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3710      	adds	r7, #16
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}

0800ba5e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b088      	sub	sp, #32
 800ba62:	af04      	add	r7, sp, #16
 800ba64:	60f8      	str	r0, [r7, #12]
 800ba66:	60b9      	str	r1, [r7, #8]
 800ba68:	4611      	mov	r1, r2
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	80fb      	strh	r3, [r7, #6]
 800ba70:	4613      	mov	r3, r2
 800ba72:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d001      	beq.n	800ba82 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ba82:	7979      	ldrb	r1, [r7, #5]
 800ba84:	7e3b      	ldrb	r3, [r7, #24]
 800ba86:	9303      	str	r3, [sp, #12]
 800ba88:	88fb      	ldrh	r3, [r7, #6]
 800ba8a:	9302      	str	r3, [sp, #8]
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	9301      	str	r3, [sp, #4]
 800ba90:	2301      	movs	r3, #1
 800ba92:	9300      	str	r3, [sp, #0]
 800ba94:	2302      	movs	r3, #2
 800ba96:	2200      	movs	r2, #0
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f007 fcbe 	bl	801341a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b088      	sub	sp, #32
 800baac:	af04      	add	r7, sp, #16
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	4611      	mov	r1, r2
 800bab4:	461a      	mov	r2, r3
 800bab6:	460b      	mov	r3, r1
 800bab8:	80fb      	strh	r3, [r7, #6]
 800baba:	4613      	mov	r3, r2
 800babc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800babe:	7979      	ldrb	r1, [r7, #5]
 800bac0:	2300      	movs	r3, #0
 800bac2:	9303      	str	r3, [sp, #12]
 800bac4:	88fb      	ldrh	r3, [r7, #6]
 800bac6:	9302      	str	r3, [sp, #8]
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	9301      	str	r3, [sp, #4]
 800bacc:	2301      	movs	r3, #1
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	2302      	movs	r3, #2
 800bad2:	2201      	movs	r2, #1
 800bad4:	68f8      	ldr	r0, [r7, #12]
 800bad6:	f007 fca0 	bl	801341a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	3710      	adds	r7, #16
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b086      	sub	sp, #24
 800bae8:	af04      	add	r7, sp, #16
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	4608      	mov	r0, r1
 800baee:	4611      	mov	r1, r2
 800baf0:	461a      	mov	r2, r3
 800baf2:	4603      	mov	r3, r0
 800baf4:	70fb      	strb	r3, [r7, #3]
 800baf6:	460b      	mov	r3, r1
 800baf8:	70bb      	strb	r3, [r7, #2]
 800bafa:	4613      	mov	r3, r2
 800bafc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bafe:	7878      	ldrb	r0, [r7, #1]
 800bb00:	78ba      	ldrb	r2, [r7, #2]
 800bb02:	78f9      	ldrb	r1, [r7, #3]
 800bb04:	8b3b      	ldrh	r3, [r7, #24]
 800bb06:	9302      	str	r3, [sp, #8]
 800bb08:	7d3b      	ldrb	r3, [r7, #20]
 800bb0a:	9301      	str	r3, [sp, #4]
 800bb0c:	7c3b      	ldrb	r3, [r7, #16]
 800bb0e:	9300      	str	r3, [sp, #0]
 800bb10:	4603      	mov	r3, r0
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f007 fc33 	bl	801337e <USBH_LL_OpenPipe>

  return USBH_OK;
 800bb18:	2300      	movs	r3, #0
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3708      	adds	r7, #8
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}

0800bb22 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bb22:	b580      	push	{r7, lr}
 800bb24:	b082      	sub	sp, #8
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800bb2e:	78fb      	ldrb	r3, [r7, #3]
 800bb30:	4619      	mov	r1, r3
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f007 fc52 	bl	80133dc <USBH_LL_ClosePipe>

  return USBH_OK;
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3708      	adds	r7, #8
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b084      	sub	sp, #16
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 f836 	bl	800bbc0 <USBH_GetFreePipe>
 800bb54:	4603      	mov	r3, r0
 800bb56:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bb58:	89fb      	ldrh	r3, [r7, #14]
 800bb5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d00a      	beq.n	800bb78 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800bb62:	78fa      	ldrb	r2, [r7, #3]
 800bb64:	89fb      	ldrh	r3, [r7, #14]
 800bb66:	f003 030f 	and.w	r3, r3, #15
 800bb6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bb6e:	6879      	ldr	r1, [r7, #4]
 800bb70:	33e0      	adds	r3, #224	; 0xe0
 800bb72:	009b      	lsls	r3, r3, #2
 800bb74:	440b      	add	r3, r1
 800bb76:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bb78:	89fb      	ldrh	r3, [r7, #14]
 800bb7a:	b2db      	uxtb	r3, r3
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800bb90:	78fb      	ldrb	r3, [r7, #3]
 800bb92:	2b0f      	cmp	r3, #15
 800bb94:	d80d      	bhi.n	800bbb2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bb96:	78fb      	ldrb	r3, [r7, #3]
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	33e0      	adds	r3, #224	; 0xe0
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	4413      	add	r3, r2
 800bba0:	685a      	ldr	r2, [r3, #4]
 800bba2:	78fb      	ldrb	r3, [r7, #3]
 800bba4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bba8:	6879      	ldr	r1, [r7, #4]
 800bbaa:	33e0      	adds	r3, #224	; 0xe0
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	440b      	add	r3, r1
 800bbb0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bbb2:	2300      	movs	r3, #0
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	370c      	adds	r7, #12
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800bbcc:	2300      	movs	r3, #0
 800bbce:	73fb      	strb	r3, [r7, #15]
 800bbd0:	e00f      	b.n	800bbf2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bbd2:	7bfb      	ldrb	r3, [r7, #15]
 800bbd4:	687a      	ldr	r2, [r7, #4]
 800bbd6:	33e0      	adds	r3, #224	; 0xe0
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	4413      	add	r3, r2
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d102      	bne.n	800bbec <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bbe6:	7bfb      	ldrb	r3, [r7, #15]
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	e007      	b.n	800bbfc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800bbec:	7bfb      	ldrb	r3, [r7, #15]
 800bbee:	3301      	adds	r3, #1
 800bbf0:	73fb      	strb	r3, [r7, #15]
 800bbf2:	7bfb      	ldrb	r3, [r7, #15]
 800bbf4:	2b0f      	cmp	r3, #15
 800bbf6:	d9ec      	bls.n	800bbd2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bbf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3714      	adds	r7, #20
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	4603      	mov	r3, r0
 800bc10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bc12:	79fb      	ldrb	r3, [r7, #7]
 800bc14:	4a08      	ldr	r2, [pc, #32]	; (800bc38 <disk_status+0x30>)
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	4413      	add	r3, r2
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	79fa      	ldrb	r2, [r7, #7]
 800bc20:	4905      	ldr	r1, [pc, #20]	; (800bc38 <disk_status+0x30>)
 800bc22:	440a      	add	r2, r1
 800bc24:	7d12      	ldrb	r2, [r2, #20]
 800bc26:	4610      	mov	r0, r2
 800bc28:	4798      	blx	r3
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bc2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3710      	adds	r7, #16
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	2000210c 	.word	0x2000210c

0800bc3c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	4603      	mov	r3, r0
 800bc44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bc46:	2300      	movs	r3, #0
 800bc48:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bc4a:	79fb      	ldrb	r3, [r7, #7]
 800bc4c:	4a0d      	ldr	r2, [pc, #52]	; (800bc84 <disk_initialize+0x48>)
 800bc4e:	5cd3      	ldrb	r3, [r2, r3]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d111      	bne.n	800bc78 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bc54:	79fb      	ldrb	r3, [r7, #7]
 800bc56:	4a0b      	ldr	r2, [pc, #44]	; (800bc84 <disk_initialize+0x48>)
 800bc58:	2101      	movs	r1, #1
 800bc5a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bc5c:	79fb      	ldrb	r3, [r7, #7]
 800bc5e:	4a09      	ldr	r2, [pc, #36]	; (800bc84 <disk_initialize+0x48>)
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	4413      	add	r3, r2
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	79fa      	ldrb	r2, [r7, #7]
 800bc6a:	4906      	ldr	r1, [pc, #24]	; (800bc84 <disk_initialize+0x48>)
 800bc6c:	440a      	add	r2, r1
 800bc6e:	7d12      	ldrb	r2, [r2, #20]
 800bc70:	4610      	mov	r0, r2
 800bc72:	4798      	blx	r3
 800bc74:	4603      	mov	r3, r0
 800bc76:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bc78:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	2000210c 	.word	0x2000210c

0800bc88 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bc88:	b590      	push	{r4, r7, lr}
 800bc8a:	b087      	sub	sp, #28
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60b9      	str	r1, [r7, #8]
 800bc90:	607a      	str	r2, [r7, #4]
 800bc92:	603b      	str	r3, [r7, #0]
 800bc94:	4603      	mov	r3, r0
 800bc96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bc98:	7bfb      	ldrb	r3, [r7, #15]
 800bc9a:	4a0a      	ldr	r2, [pc, #40]	; (800bcc4 <disk_read+0x3c>)
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	4413      	add	r3, r2
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	689c      	ldr	r4, [r3, #8]
 800bca4:	7bfb      	ldrb	r3, [r7, #15]
 800bca6:	4a07      	ldr	r2, [pc, #28]	; (800bcc4 <disk_read+0x3c>)
 800bca8:	4413      	add	r3, r2
 800bcaa:	7d18      	ldrb	r0, [r3, #20]
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	68b9      	ldr	r1, [r7, #8]
 800bcb2:	47a0      	blx	r4
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	75fb      	strb	r3, [r7, #23]
  return res;
 800bcb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	371c      	adds	r7, #28
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd90      	pop	{r4, r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	2000210c 	.word	0x2000210c

0800bcc8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bcc8:	b590      	push	{r4, r7, lr}
 800bcca:	b087      	sub	sp, #28
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60b9      	str	r1, [r7, #8]
 800bcd0:	607a      	str	r2, [r7, #4]
 800bcd2:	603b      	str	r3, [r7, #0]
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bcd8:	7bfb      	ldrb	r3, [r7, #15]
 800bcda:	4a0a      	ldr	r2, [pc, #40]	; (800bd04 <disk_write+0x3c>)
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	4413      	add	r3, r2
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	68dc      	ldr	r4, [r3, #12]
 800bce4:	7bfb      	ldrb	r3, [r7, #15]
 800bce6:	4a07      	ldr	r2, [pc, #28]	; (800bd04 <disk_write+0x3c>)
 800bce8:	4413      	add	r3, r2
 800bcea:	7d18      	ldrb	r0, [r3, #20]
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	68b9      	ldr	r1, [r7, #8]
 800bcf2:	47a0      	blx	r4
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	75fb      	strb	r3, [r7, #23]
  return res;
 800bcf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	371c      	adds	r7, #28
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd90      	pop	{r4, r7, pc}
 800bd02:	bf00      	nop
 800bd04:	2000210c 	.word	0x2000210c

0800bd08 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	4603      	mov	r3, r0
 800bd10:	603a      	str	r2, [r7, #0]
 800bd12:	71fb      	strb	r3, [r7, #7]
 800bd14:	460b      	mov	r3, r1
 800bd16:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bd18:	79fb      	ldrb	r3, [r7, #7]
 800bd1a:	4a09      	ldr	r2, [pc, #36]	; (800bd40 <disk_ioctl+0x38>)
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	4413      	add	r3, r2
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	691b      	ldr	r3, [r3, #16]
 800bd24:	79fa      	ldrb	r2, [r7, #7]
 800bd26:	4906      	ldr	r1, [pc, #24]	; (800bd40 <disk_ioctl+0x38>)
 800bd28:	440a      	add	r2, r1
 800bd2a:	7d10      	ldrb	r0, [r2, #20]
 800bd2c:	79b9      	ldrb	r1, [r7, #6]
 800bd2e:	683a      	ldr	r2, [r7, #0]
 800bd30:	4798      	blx	r3
 800bd32:	4603      	mov	r3, r0
 800bd34:	73fb      	strb	r3, [r7, #15]
  return res;
 800bd36:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3710      	adds	r7, #16
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	2000210c 	.word	0x2000210c

0800bd44 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bd44:	b480      	push	{r7}
 800bd46:	b085      	sub	sp, #20
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bd54:	89fb      	ldrh	r3, [r7, #14]
 800bd56:	021b      	lsls	r3, r3, #8
 800bd58:	b21a      	sxth	r2, r3
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	b21b      	sxth	r3, r3
 800bd60:	4313      	orrs	r3, r2
 800bd62:	b21b      	sxth	r3, r3
 800bd64:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bd66:	89fb      	ldrh	r3, [r7, #14]
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3714      	adds	r7, #20
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr

0800bd74 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bd74:	b480      	push	{r7}
 800bd76:	b085      	sub	sp, #20
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	3303      	adds	r3, #3
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	021b      	lsls	r3, r3, #8
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	3202      	adds	r2, #2
 800bd8c:	7812      	ldrb	r2, [r2, #0]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	021b      	lsls	r3, r3, #8
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	3201      	adds	r2, #1
 800bd9a:	7812      	ldrb	r2, [r2, #0]
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	021b      	lsls	r3, r3, #8
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	7812      	ldrb	r2, [r2, #0]
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	60fb      	str	r3, [r7, #12]
	return rv;
 800bdac:	68fb      	ldr	r3, [r7, #12]
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3714      	adds	r7, #20
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr

0800bdba <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800bdba:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800bdbe:	b09d      	sub	sp, #116	; 0x74
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 800bdc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdc6:	3307      	adds	r3, #7
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	b2db      	uxtb	r3, r3
 800bdcc:	2200      	movs	r2, #0
 800bdce:	469a      	mov	sl, r3
 800bdd0:	4693      	mov	fp, r2
 800bdd2:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 800bdd6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800bdda:	f04f 0000 	mov.w	r0, #0
 800bdde:	f04f 0100 	mov.w	r1, #0
 800bde2:	0219      	lsls	r1, r3, #8
 800bde4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800bde8:	0210      	lsls	r0, r2, #8
 800bdea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdec:	3306      	adds	r3, #6
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	461c      	mov	r4, r3
 800bdf6:	4615      	mov	r5, r2
 800bdf8:	ea40 0804 	orr.w	r8, r0, r4
 800bdfc:	ea41 0905 	orr.w	r9, r1, r5
 800be00:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 800be04:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800be08:	f04f 0000 	mov.w	r0, #0
 800be0c:	f04f 0100 	mov.w	r1, #0
 800be10:	0219      	lsls	r1, r3, #8
 800be12:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800be16:	0210      	lsls	r0, r2, #8
 800be18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be1a:	3305      	adds	r3, #5
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	2200      	movs	r2, #0
 800be22:	65bb      	str	r3, [r7, #88]	; 0x58
 800be24:	65fa      	str	r2, [r7, #92]	; 0x5c
 800be26:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800be2a:	4623      	mov	r3, r4
 800be2c:	4303      	orrs	r3, r0
 800be2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800be30:	462b      	mov	r3, r5
 800be32:	430b      	orrs	r3, r1
 800be34:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be36:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800be3a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 800be3e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800be42:	f04f 0000 	mov.w	r0, #0
 800be46:	f04f 0100 	mov.w	r1, #0
 800be4a:	0219      	lsls	r1, r3, #8
 800be4c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800be50:	0210      	lsls	r0, r2, #8
 800be52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be54:	3304      	adds	r3, #4
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	2200      	movs	r2, #0
 800be5c:	653b      	str	r3, [r7, #80]	; 0x50
 800be5e:	657a      	str	r2, [r7, #84]	; 0x54
 800be60:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800be64:	4623      	mov	r3, r4
 800be66:	4303      	orrs	r3, r0
 800be68:	623b      	str	r3, [r7, #32]
 800be6a:	462b      	mov	r3, r5
 800be6c:	430b      	orrs	r3, r1
 800be6e:	627b      	str	r3, [r7, #36]	; 0x24
 800be70:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800be74:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 800be78:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800be7c:	f04f 0000 	mov.w	r0, #0
 800be80:	f04f 0100 	mov.w	r1, #0
 800be84:	0219      	lsls	r1, r3, #8
 800be86:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800be8a:	0210      	lsls	r0, r2, #8
 800be8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be8e:	3303      	adds	r3, #3
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	b2db      	uxtb	r3, r3
 800be94:	2200      	movs	r2, #0
 800be96:	64bb      	str	r3, [r7, #72]	; 0x48
 800be98:	64fa      	str	r2, [r7, #76]	; 0x4c
 800be9a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800be9e:	4623      	mov	r3, r4
 800bea0:	4303      	orrs	r3, r0
 800bea2:	61bb      	str	r3, [r7, #24]
 800bea4:	462b      	mov	r3, r5
 800bea6:	430b      	orrs	r3, r1
 800bea8:	61fb      	str	r3, [r7, #28]
 800beaa:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800beae:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 800beb2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800beb6:	f04f 0000 	mov.w	r0, #0
 800beba:	f04f 0100 	mov.w	r1, #0
 800bebe:	0219      	lsls	r1, r3, #8
 800bec0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800bec4:	0210      	lsls	r0, r2, #8
 800bec6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bec8:	3302      	adds	r3, #2
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	b2db      	uxtb	r3, r3
 800bece:	2200      	movs	r2, #0
 800bed0:	643b      	str	r3, [r7, #64]	; 0x40
 800bed2:	647a      	str	r2, [r7, #68]	; 0x44
 800bed4:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800bed8:	4623      	mov	r3, r4
 800beda:	4303      	orrs	r3, r0
 800bedc:	613b      	str	r3, [r7, #16]
 800bede:	462b      	mov	r3, r5
 800bee0:	430b      	orrs	r3, r1
 800bee2:	617b      	str	r3, [r7, #20]
 800bee4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800bee8:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 800beec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bef0:	f04f 0200 	mov.w	r2, #0
 800bef4:	f04f 0300 	mov.w	r3, #0
 800bef8:	020b      	lsls	r3, r1, #8
 800befa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800befe:	0202      	lsls	r2, r0, #8
 800bf00:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bf02:	3101      	adds	r1, #1
 800bf04:	7809      	ldrb	r1, [r1, #0]
 800bf06:	b2c9      	uxtb	r1, r1
 800bf08:	2000      	movs	r0, #0
 800bf0a:	63b9      	str	r1, [r7, #56]	; 0x38
 800bf0c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800bf0e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800bf12:	4621      	mov	r1, r4
 800bf14:	4311      	orrs	r1, r2
 800bf16:	60b9      	str	r1, [r7, #8]
 800bf18:	4629      	mov	r1, r5
 800bf1a:	4319      	orrs	r1, r3
 800bf1c:	60f9      	str	r1, [r7, #12]
 800bf1e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800bf22:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800bf26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bf2a:	f04f 0200 	mov.w	r2, #0
 800bf2e:	f04f 0300 	mov.w	r3, #0
 800bf32:	020b      	lsls	r3, r1, #8
 800bf34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bf38:	0202      	lsls	r2, r0, #8
 800bf3a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bf3c:	7809      	ldrb	r1, [r1, #0]
 800bf3e:	b2c9      	uxtb	r1, r1
 800bf40:	2000      	movs	r0, #0
 800bf42:	6339      	str	r1, [r7, #48]	; 0x30
 800bf44:	6378      	str	r0, [r7, #52]	; 0x34
 800bf46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800bf4a:	4621      	mov	r1, r4
 800bf4c:	4311      	orrs	r1, r2
 800bf4e:	6039      	str	r1, [r7, #0]
 800bf50:	4629      	mov	r1, r5
 800bf52:	4319      	orrs	r1, r3
 800bf54:	6079      	str	r1, [r7, #4]
 800bf56:	e9d7 3400 	ldrd	r3, r4, [r7]
 800bf5a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 800bf5e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 800bf62:	4610      	mov	r0, r2
 800bf64:	4619      	mov	r1, r3
 800bf66:	3774      	adds	r7, #116	; 0x74
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800bf6e:	4770      	bx	lr

0800bf70 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bf70:	b480      	push	{r7}
 800bf72:	b083      	sub	sp, #12
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	460b      	mov	r3, r1
 800bf7a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	1c5a      	adds	r2, r3, #1
 800bf80:	607a      	str	r2, [r7, #4]
 800bf82:	887a      	ldrh	r2, [r7, #2]
 800bf84:	b2d2      	uxtb	r2, r2
 800bf86:	701a      	strb	r2, [r3, #0]
 800bf88:	887b      	ldrh	r3, [r7, #2]
 800bf8a:	0a1b      	lsrs	r3, r3, #8
 800bf8c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	1c5a      	adds	r2, r3, #1
 800bf92:	607a      	str	r2, [r7, #4]
 800bf94:	887a      	ldrh	r2, [r7, #2]
 800bf96:	b2d2      	uxtb	r2, r2
 800bf98:	701a      	strb	r2, [r3, #0]
}
 800bf9a:	bf00      	nop
 800bf9c:	370c      	adds	r7, #12
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr

0800bfa6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bfa6:	b480      	push	{r7}
 800bfa8:	b083      	sub	sp, #12
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
 800bfae:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	1c5a      	adds	r2, r3, #1
 800bfb4:	607a      	str	r2, [r7, #4]
 800bfb6:	683a      	ldr	r2, [r7, #0]
 800bfb8:	b2d2      	uxtb	r2, r2
 800bfba:	701a      	strb	r2, [r3, #0]
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	0a1b      	lsrs	r3, r3, #8
 800bfc0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	1c5a      	adds	r2, r3, #1
 800bfc6:	607a      	str	r2, [r7, #4]
 800bfc8:	683a      	ldr	r2, [r7, #0]
 800bfca:	b2d2      	uxtb	r2, r2
 800bfcc:	701a      	strb	r2, [r3, #0]
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	0a1b      	lsrs	r3, r3, #8
 800bfd2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	1c5a      	adds	r2, r3, #1
 800bfd8:	607a      	str	r2, [r7, #4]
 800bfda:	683a      	ldr	r2, [r7, #0]
 800bfdc:	b2d2      	uxtb	r2, r2
 800bfde:	701a      	strb	r2, [r3, #0]
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	0a1b      	lsrs	r3, r3, #8
 800bfe4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	1c5a      	adds	r2, r3, #1
 800bfea:	607a      	str	r2, [r7, #4]
 800bfec:	683a      	ldr	r2, [r7, #0]
 800bfee:	b2d2      	uxtb	r2, r2
 800bff0:	701a      	strb	r2, [r3, #0]
}
 800bff2:	bf00      	nop
 800bff4:	370c      	adds	r7, #12
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr

0800bffe <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800bffe:	b480      	push	{r7}
 800c000:	b085      	sub	sp, #20
 800c002:	af00      	add	r7, sp, #0
 800c004:	60f8      	str	r0, [r7, #12]
 800c006:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	1c5a      	adds	r2, r3, #1
 800c00e:	60fa      	str	r2, [r7, #12]
 800c010:	783a      	ldrb	r2, [r7, #0]
 800c012:	701a      	strb	r2, [r3, #0]
 800c014:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c018:	f04f 0200 	mov.w	r2, #0
 800c01c:	f04f 0300 	mov.w	r3, #0
 800c020:	0a02      	lsrs	r2, r0, #8
 800c022:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c026:	0a0b      	lsrs	r3, r1, #8
 800c028:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	1c5a      	adds	r2, r3, #1
 800c030:	60fa      	str	r2, [r7, #12]
 800c032:	783a      	ldrb	r2, [r7, #0]
 800c034:	701a      	strb	r2, [r3, #0]
 800c036:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c03a:	f04f 0200 	mov.w	r2, #0
 800c03e:	f04f 0300 	mov.w	r3, #0
 800c042:	0a02      	lsrs	r2, r0, #8
 800c044:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c048:	0a0b      	lsrs	r3, r1, #8
 800c04a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	1c5a      	adds	r2, r3, #1
 800c052:	60fa      	str	r2, [r7, #12]
 800c054:	783a      	ldrb	r2, [r7, #0]
 800c056:	701a      	strb	r2, [r3, #0]
 800c058:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c05c:	f04f 0200 	mov.w	r2, #0
 800c060:	f04f 0300 	mov.w	r3, #0
 800c064:	0a02      	lsrs	r2, r0, #8
 800c066:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c06a:	0a0b      	lsrs	r3, r1, #8
 800c06c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	1c5a      	adds	r2, r3, #1
 800c074:	60fa      	str	r2, [r7, #12]
 800c076:	783a      	ldrb	r2, [r7, #0]
 800c078:	701a      	strb	r2, [r3, #0]
 800c07a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c07e:	f04f 0200 	mov.w	r2, #0
 800c082:	f04f 0300 	mov.w	r3, #0
 800c086:	0a02      	lsrs	r2, r0, #8
 800c088:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c08c:	0a0b      	lsrs	r3, r1, #8
 800c08e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	1c5a      	adds	r2, r3, #1
 800c096:	60fa      	str	r2, [r7, #12]
 800c098:	783a      	ldrb	r2, [r7, #0]
 800c09a:	701a      	strb	r2, [r3, #0]
 800c09c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c0a0:	f04f 0200 	mov.w	r2, #0
 800c0a4:	f04f 0300 	mov.w	r3, #0
 800c0a8:	0a02      	lsrs	r2, r0, #8
 800c0aa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c0ae:	0a0b      	lsrs	r3, r1, #8
 800c0b0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	1c5a      	adds	r2, r3, #1
 800c0b8:	60fa      	str	r2, [r7, #12]
 800c0ba:	783a      	ldrb	r2, [r7, #0]
 800c0bc:	701a      	strb	r2, [r3, #0]
 800c0be:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c0c2:	f04f 0200 	mov.w	r2, #0
 800c0c6:	f04f 0300 	mov.w	r3, #0
 800c0ca:	0a02      	lsrs	r2, r0, #8
 800c0cc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c0d0:	0a0b      	lsrs	r3, r1, #8
 800c0d2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	1c5a      	adds	r2, r3, #1
 800c0da:	60fa      	str	r2, [r7, #12]
 800c0dc:	783a      	ldrb	r2, [r7, #0]
 800c0de:	701a      	strb	r2, [r3, #0]
 800c0e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c0e4:	f04f 0200 	mov.w	r2, #0
 800c0e8:	f04f 0300 	mov.w	r3, #0
 800c0ec:	0a02      	lsrs	r2, r0, #8
 800c0ee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c0f2:	0a0b      	lsrs	r3, r1, #8
 800c0f4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	1c5a      	adds	r2, r3, #1
 800c0fc:	60fa      	str	r2, [r7, #12]
 800c0fe:	783a      	ldrb	r2, [r7, #0]
 800c100:	701a      	strb	r2, [r3, #0]
}
 800c102:	bf00      	nop
 800c104:	3714      	adds	r7, #20
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr

0800c10e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c10e:	b480      	push	{r7}
 800c110:	b087      	sub	sp, #28
 800c112:	af00      	add	r7, sp, #0
 800c114:	60f8      	str	r0, [r7, #12]
 800c116:	60b9      	str	r1, [r7, #8]
 800c118:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d00d      	beq.n	800c144 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c128:	693a      	ldr	r2, [r7, #16]
 800c12a:	1c53      	adds	r3, r2, #1
 800c12c:	613b      	str	r3, [r7, #16]
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	1c59      	adds	r1, r3, #1
 800c132:	6179      	str	r1, [r7, #20]
 800c134:	7812      	ldrb	r2, [r2, #0]
 800c136:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	3b01      	subs	r3, #1
 800c13c:	607b      	str	r3, [r7, #4]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d1f1      	bne.n	800c128 <mem_cpy+0x1a>
	}
}
 800c144:	bf00      	nop
 800c146:	371c      	adds	r7, #28
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c150:	b480      	push	{r7}
 800c152:	b087      	sub	sp, #28
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	1c5a      	adds	r2, r3, #1
 800c164:	617a      	str	r2, [r7, #20]
 800c166:	68ba      	ldr	r2, [r7, #8]
 800c168:	b2d2      	uxtb	r2, r2
 800c16a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	3b01      	subs	r3, #1
 800c170:	607b      	str	r3, [r7, #4]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d1f3      	bne.n	800c160 <mem_set+0x10>
}
 800c178:	bf00      	nop
 800c17a:	bf00      	nop
 800c17c:	371c      	adds	r7, #28
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr

0800c186 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c186:	b480      	push	{r7}
 800c188:	b089      	sub	sp, #36	; 0x24
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	60f8      	str	r0, [r7, #12]
 800c18e:	60b9      	str	r1, [r7, #8]
 800c190:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	61fb      	str	r3, [r7, #28]
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c19a:	2300      	movs	r3, #0
 800c19c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	1c5a      	adds	r2, r3, #1
 800c1a2:	61fa      	str	r2, [r7, #28]
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	69bb      	ldr	r3, [r7, #24]
 800c1aa:	1c5a      	adds	r2, r3, #1
 800c1ac:	61ba      	str	r2, [r7, #24]
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	1acb      	subs	r3, r1, r3
 800c1b2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	607b      	str	r3, [r7, #4]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d002      	beq.n	800c1c6 <mem_cmp+0x40>
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d0eb      	beq.n	800c19e <mem_cmp+0x18>

	return r;
 800c1c6:	697b      	ldr	r3, [r7, #20]
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3724      	adds	r7, #36	; 0x24
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c1de:	e002      	b.n	800c1e6 <chk_chr+0x12>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	607b      	str	r3, [r7, #4]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d005      	beq.n	800c1fa <chk_chr+0x26>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d1f2      	bne.n	800c1e0 <chk_chr+0xc>
	return *str;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	781b      	ldrb	r3, [r3, #0]
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	370c      	adds	r7, #12
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr
	...

0800c20c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b085      	sub	sp, #20
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c216:	2300      	movs	r3, #0
 800c218:	60bb      	str	r3, [r7, #8]
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	60fb      	str	r3, [r7, #12]
 800c21e:	e029      	b.n	800c274 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c220:	4a27      	ldr	r2, [pc, #156]	; (800c2c0 <chk_lock+0xb4>)
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	011b      	lsls	r3, r3, #4
 800c226:	4413      	add	r3, r2
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d01d      	beq.n	800c26a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c22e:	4a24      	ldr	r2, [pc, #144]	; (800c2c0 <chk_lock+0xb4>)
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	011b      	lsls	r3, r3, #4
 800c234:	4413      	add	r3, r2
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d116      	bne.n	800c26e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c240:	4a1f      	ldr	r2, [pc, #124]	; (800c2c0 <chk_lock+0xb4>)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	011b      	lsls	r3, r3, #4
 800c246:	4413      	add	r3, r2
 800c248:	3304      	adds	r3, #4
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c250:	429a      	cmp	r2, r3
 800c252:	d10c      	bne.n	800c26e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c254:	4a1a      	ldr	r2, [pc, #104]	; (800c2c0 <chk_lock+0xb4>)
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	011b      	lsls	r3, r3, #4
 800c25a:	4413      	add	r3, r2
 800c25c:	3308      	adds	r3, #8
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800c264:	429a      	cmp	r2, r3
 800c266:	d102      	bne.n	800c26e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c268:	e007      	b.n	800c27a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c26a:	2301      	movs	r3, #1
 800c26c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	3301      	adds	r3, #1
 800c272:	60fb      	str	r3, [r7, #12]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2b01      	cmp	r3, #1
 800c278:	d9d2      	bls.n	800c220 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2b02      	cmp	r3, #2
 800c27e:	d109      	bne.n	800c294 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d102      	bne.n	800c28c <chk_lock+0x80>
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	2b02      	cmp	r3, #2
 800c28a:	d101      	bne.n	800c290 <chk_lock+0x84>
 800c28c:	2300      	movs	r3, #0
 800c28e:	e010      	b.n	800c2b2 <chk_lock+0xa6>
 800c290:	2312      	movs	r3, #18
 800c292:	e00e      	b.n	800c2b2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d108      	bne.n	800c2ac <chk_lock+0xa0>
 800c29a:	4a09      	ldr	r2, [pc, #36]	; (800c2c0 <chk_lock+0xb4>)
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	011b      	lsls	r3, r3, #4
 800c2a0:	4413      	add	r3, r2
 800c2a2:	330c      	adds	r3, #12
 800c2a4:	881b      	ldrh	r3, [r3, #0]
 800c2a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2aa:	d101      	bne.n	800c2b0 <chk_lock+0xa4>
 800c2ac:	2310      	movs	r3, #16
 800c2ae:	e000      	b.n	800c2b2 <chk_lock+0xa6>
 800c2b0:	2300      	movs	r3, #0
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3714      	adds	r7, #20
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr
 800c2be:	bf00      	nop
 800c2c0:	20001c8c 	.word	0x20001c8c

0800c2c4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b083      	sub	sp, #12
 800c2c8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	607b      	str	r3, [r7, #4]
 800c2ce:	e002      	b.n	800c2d6 <enq_lock+0x12>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	607b      	str	r3, [r7, #4]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d806      	bhi.n	800c2ea <enq_lock+0x26>
 800c2dc:	4a09      	ldr	r2, [pc, #36]	; (800c304 <enq_lock+0x40>)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	011b      	lsls	r3, r3, #4
 800c2e2:	4413      	add	r3, r2
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d1f2      	bne.n	800c2d0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2b02      	cmp	r3, #2
 800c2ee:	bf14      	ite	ne
 800c2f0:	2301      	movne	r3, #1
 800c2f2:	2300      	moveq	r3, #0
 800c2f4:	b2db      	uxtb	r3, r3
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	370c      	adds	r7, #12
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c300:	4770      	bx	lr
 800c302:	bf00      	nop
 800c304:	20001c8c 	.word	0x20001c8c

0800c308 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c308:	b480      	push	{r7}
 800c30a:	b085      	sub	sp, #20
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c312:	2300      	movs	r3, #0
 800c314:	60fb      	str	r3, [r7, #12]
 800c316:	e01f      	b.n	800c358 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c318:	4a41      	ldr	r2, [pc, #260]	; (800c420 <inc_lock+0x118>)
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	011b      	lsls	r3, r3, #4
 800c31e:	4413      	add	r3, r2
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	429a      	cmp	r2, r3
 800c328:	d113      	bne.n	800c352 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c32a:	4a3d      	ldr	r2, [pc, #244]	; (800c420 <inc_lock+0x118>)
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	011b      	lsls	r3, r3, #4
 800c330:	4413      	add	r3, r2
 800c332:	3304      	adds	r3, #4
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d109      	bne.n	800c352 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c33e:	4a38      	ldr	r2, [pc, #224]	; (800c420 <inc_lock+0x118>)
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	011b      	lsls	r3, r3, #4
 800c344:	4413      	add	r3, r2
 800c346:	3308      	adds	r3, #8
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800c34e:	429a      	cmp	r2, r3
 800c350:	d006      	beq.n	800c360 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	3301      	adds	r3, #1
 800c356:	60fb      	str	r3, [r7, #12]
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d9dc      	bls.n	800c318 <inc_lock+0x10>
 800c35e:	e000      	b.n	800c362 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c360:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2b02      	cmp	r3, #2
 800c366:	d132      	bne.n	800c3ce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c368:	2300      	movs	r3, #0
 800c36a:	60fb      	str	r3, [r7, #12]
 800c36c:	e002      	b.n	800c374 <inc_lock+0x6c>
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	3301      	adds	r3, #1
 800c372:	60fb      	str	r3, [r7, #12]
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2b01      	cmp	r3, #1
 800c378:	d806      	bhi.n	800c388 <inc_lock+0x80>
 800c37a:	4a29      	ldr	r2, [pc, #164]	; (800c420 <inc_lock+0x118>)
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	011b      	lsls	r3, r3, #4
 800c380:	4413      	add	r3, r2
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d1f2      	bne.n	800c36e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2b02      	cmp	r3, #2
 800c38c:	d101      	bne.n	800c392 <inc_lock+0x8a>
 800c38e:	2300      	movs	r3, #0
 800c390:	e040      	b.n	800c414 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	4922      	ldr	r1, [pc, #136]	; (800c420 <inc_lock+0x118>)
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	011b      	lsls	r3, r3, #4
 800c39c:	440b      	add	r3, r1
 800c39e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	689a      	ldr	r2, [r3, #8]
 800c3a4:	491e      	ldr	r1, [pc, #120]	; (800c420 <inc_lock+0x118>)
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	011b      	lsls	r3, r3, #4
 800c3aa:	440b      	add	r3, r1
 800c3ac:	3304      	adds	r3, #4
 800c3ae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3b4:	491a      	ldr	r1, [pc, #104]	; (800c420 <inc_lock+0x118>)
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	011b      	lsls	r3, r3, #4
 800c3ba:	440b      	add	r3, r1
 800c3bc:	3308      	adds	r3, #8
 800c3be:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c3c0:	4a17      	ldr	r2, [pc, #92]	; (800c420 <inc_lock+0x118>)
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	011b      	lsls	r3, r3, #4
 800c3c6:	4413      	add	r3, r2
 800c3c8:	330c      	adds	r3, #12
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d009      	beq.n	800c3e8 <inc_lock+0xe0>
 800c3d4:	4a12      	ldr	r2, [pc, #72]	; (800c420 <inc_lock+0x118>)
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	011b      	lsls	r3, r3, #4
 800c3da:	4413      	add	r3, r2
 800c3dc:	330c      	adds	r3, #12
 800c3de:	881b      	ldrh	r3, [r3, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d001      	beq.n	800c3e8 <inc_lock+0xe0>
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	e015      	b.n	800c414 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d108      	bne.n	800c400 <inc_lock+0xf8>
 800c3ee:	4a0c      	ldr	r2, [pc, #48]	; (800c420 <inc_lock+0x118>)
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	011b      	lsls	r3, r3, #4
 800c3f4:	4413      	add	r3, r2
 800c3f6:	330c      	adds	r3, #12
 800c3f8:	881b      	ldrh	r3, [r3, #0]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	b29a      	uxth	r2, r3
 800c3fe:	e001      	b.n	800c404 <inc_lock+0xfc>
 800c400:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c404:	4906      	ldr	r1, [pc, #24]	; (800c420 <inc_lock+0x118>)
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	011b      	lsls	r3, r3, #4
 800c40a:	440b      	add	r3, r1
 800c40c:	330c      	adds	r3, #12
 800c40e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	3301      	adds	r3, #1
}
 800c414:	4618      	mov	r0, r3
 800c416:	3714      	adds	r7, #20
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr
 800c420:	20001c8c 	.word	0x20001c8c

0800c424 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	3b01      	subs	r3, #1
 800c430:	607b      	str	r3, [r7, #4]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2b01      	cmp	r3, #1
 800c436:	d825      	bhi.n	800c484 <dec_lock+0x60>
		n = Files[i].ctr;
 800c438:	4a17      	ldr	r2, [pc, #92]	; (800c498 <dec_lock+0x74>)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	011b      	lsls	r3, r3, #4
 800c43e:	4413      	add	r3, r2
 800c440:	330c      	adds	r3, #12
 800c442:	881b      	ldrh	r3, [r3, #0]
 800c444:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c446:	89fb      	ldrh	r3, [r7, #14]
 800c448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c44c:	d101      	bne.n	800c452 <dec_lock+0x2e>
 800c44e:	2300      	movs	r3, #0
 800c450:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c452:	89fb      	ldrh	r3, [r7, #14]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d002      	beq.n	800c45e <dec_lock+0x3a>
 800c458:	89fb      	ldrh	r3, [r7, #14]
 800c45a:	3b01      	subs	r3, #1
 800c45c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c45e:	4a0e      	ldr	r2, [pc, #56]	; (800c498 <dec_lock+0x74>)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	011b      	lsls	r3, r3, #4
 800c464:	4413      	add	r3, r2
 800c466:	330c      	adds	r3, #12
 800c468:	89fa      	ldrh	r2, [r7, #14]
 800c46a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c46c:	89fb      	ldrh	r3, [r7, #14]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d105      	bne.n	800c47e <dec_lock+0x5a>
 800c472:	4a09      	ldr	r2, [pc, #36]	; (800c498 <dec_lock+0x74>)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	011b      	lsls	r3, r3, #4
 800c478:	4413      	add	r3, r2
 800c47a:	2200      	movs	r2, #0
 800c47c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c47e:	2300      	movs	r3, #0
 800c480:	737b      	strb	r3, [r7, #13]
 800c482:	e001      	b.n	800c488 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c484:	2302      	movs	r3, #2
 800c486:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c488:	7b7b      	ldrb	r3, [r7, #13]
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3714      	adds	r7, #20
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr
 800c496:	bf00      	nop
 800c498:	20001c8c 	.word	0x20001c8c

0800c49c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b085      	sub	sp, #20
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	60fb      	str	r3, [r7, #12]
 800c4a8:	e010      	b.n	800c4cc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c4aa:	4a0d      	ldr	r2, [pc, #52]	; (800c4e0 <clear_lock+0x44>)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	011b      	lsls	r3, r3, #4
 800c4b0:	4413      	add	r3, r2
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d105      	bne.n	800c4c6 <clear_lock+0x2a>
 800c4ba:	4a09      	ldr	r2, [pc, #36]	; (800c4e0 <clear_lock+0x44>)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	011b      	lsls	r3, r3, #4
 800c4c0:	4413      	add	r3, r2
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	60fb      	str	r3, [r7, #12]
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d9eb      	bls.n	800c4aa <clear_lock+0xe>
	}
}
 800c4d2:	bf00      	nop
 800c4d4:	bf00      	nop
 800c4d6:	3714      	adds	r7, #20
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr
 800c4e0:	20001c8c 	.word	0x20001c8c

0800c4e4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b086      	sub	sp, #24
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	78db      	ldrb	r3, [r3, #3]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d034      	beq.n	800c562 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	7858      	ldrb	r0, [r3, #1]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c508:	2301      	movs	r3, #1
 800c50a:	697a      	ldr	r2, [r7, #20]
 800c50c:	f7ff fbdc 	bl	800bcc8 <disk_write>
 800c510:	4603      	mov	r3, r0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d002      	beq.n	800c51c <sync_window+0x38>
			res = FR_DISK_ERR;
 800c516:	2301      	movs	r3, #1
 800c518:	73fb      	strb	r3, [r7, #15]
 800c51a:	e022      	b.n	800c562 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2200      	movs	r2, #0
 800c520:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c526:	697a      	ldr	r2, [r7, #20]
 800c528:	1ad2      	subs	r2, r2, r3
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6a1b      	ldr	r3, [r3, #32]
 800c52e:	429a      	cmp	r2, r3
 800c530:	d217      	bcs.n	800c562 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	789b      	ldrb	r3, [r3, #2]
 800c536:	613b      	str	r3, [r7, #16]
 800c538:	e010      	b.n	800c55c <sync_window+0x78>
					wsect += fs->fsize;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6a1b      	ldr	r3, [r3, #32]
 800c53e:	697a      	ldr	r2, [r7, #20]
 800c540:	4413      	add	r3, r2
 800c542:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	7858      	ldrb	r0, [r3, #1]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c54e:	2301      	movs	r3, #1
 800c550:	697a      	ldr	r2, [r7, #20]
 800c552:	f7ff fbb9 	bl	800bcc8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	3b01      	subs	r3, #1
 800c55a:	613b      	str	r3, [r7, #16]
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	2b01      	cmp	r3, #1
 800c560:	d8eb      	bhi.n	800c53a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c562:	7bfb      	ldrb	r3, [r7, #15]
}
 800c564:	4618      	mov	r0, r3
 800c566:	3718      	adds	r7, #24
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c576:	2300      	movs	r3, #0
 800c578:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c57e:	683a      	ldr	r2, [r7, #0]
 800c580:	429a      	cmp	r2, r3
 800c582:	d01b      	beq.n	800c5bc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f7ff ffad 	bl	800c4e4 <sync_window>
 800c58a:	4603      	mov	r3, r0
 800c58c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c58e:	7bfb      	ldrb	r3, [r7, #15]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d113      	bne.n	800c5bc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	7858      	ldrb	r0, [r3, #1]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c59e:	2301      	movs	r3, #1
 800c5a0:	683a      	ldr	r2, [r7, #0]
 800c5a2:	f7ff fb71 	bl	800bc88 <disk_read>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d004      	beq.n	800c5b6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c5b0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	683a      	ldr	r2, [r7, #0]
 800c5ba:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800c5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3710      	adds	r7, #16
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
	...

0800c5c8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f7ff ff87 	bl	800c4e4 <sync_window>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c5da:	7bfb      	ldrb	r3, [r7, #15]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d158      	bne.n	800c692 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	2b03      	cmp	r3, #3
 800c5e6:	d148      	bne.n	800c67a <sync_fs+0xb2>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	791b      	ldrb	r3, [r3, #4]
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d144      	bne.n	800c67a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	3338      	adds	r3, #56	; 0x38
 800c5f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c5f8:	2100      	movs	r1, #0
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7ff fda8 	bl	800c150 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	3338      	adds	r3, #56	; 0x38
 800c604:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c608:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7ff fcaf 	bl	800bf70 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	3338      	adds	r3, #56	; 0x38
 800c616:	4921      	ldr	r1, [pc, #132]	; (800c69c <sync_fs+0xd4>)
 800c618:	4618      	mov	r0, r3
 800c61a:	f7ff fcc4 	bl	800bfa6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	3338      	adds	r3, #56	; 0x38
 800c622:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c626:	491e      	ldr	r1, [pc, #120]	; (800c6a0 <sync_fs+0xd8>)
 800c628:	4618      	mov	r0, r3
 800c62a:	f7ff fcbc 	bl	800bfa6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	3338      	adds	r3, #56	; 0x38
 800c632:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	699b      	ldr	r3, [r3, #24]
 800c63a:	4619      	mov	r1, r3
 800c63c:	4610      	mov	r0, r2
 800c63e:	f7ff fcb2 	bl	800bfa6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	3338      	adds	r3, #56	; 0x38
 800c646:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	695b      	ldr	r3, [r3, #20]
 800c64e:	4619      	mov	r1, r3
 800c650:	4610      	mov	r0, r2
 800c652:	f7ff fca8 	bl	800bfa6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c65a:	1c5a      	adds	r2, r3, #1
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	7858      	ldrb	r0, [r3, #1]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c66e:	2301      	movs	r3, #1
 800c670:	f7ff fb2a 	bl	800bcc8 <disk_write>
			fs->fsi_flag = 0;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2200      	movs	r2, #0
 800c678:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	785b      	ldrb	r3, [r3, #1]
 800c67e:	2200      	movs	r2, #0
 800c680:	2100      	movs	r1, #0
 800c682:	4618      	mov	r0, r3
 800c684:	f7ff fb40 	bl	800bd08 <disk_ioctl>
 800c688:	4603      	mov	r3, r0
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d001      	beq.n	800c692 <sync_fs+0xca>
 800c68e:	2301      	movs	r3, #1
 800c690:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c692:	7bfb      	ldrb	r3, [r7, #15]
}
 800c694:	4618      	mov	r0, r3
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	41615252 	.word	0x41615252
 800c6a0:	61417272 	.word	0x61417272

0800c6a4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b083      	sub	sp, #12
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	3b02      	subs	r3, #2
 800c6b2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	69db      	ldr	r3, [r3, #28]
 800c6b8:	3b02      	subs	r3, #2
 800c6ba:	683a      	ldr	r2, [r7, #0]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d301      	bcc.n	800c6c4 <clust2sect+0x20>
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	e008      	b.n	800c6d6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	895b      	ldrh	r3, [r3, #10]
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	fb03 f202 	mul.w	r2, r3, r2
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6d4:	4413      	add	r3, r2
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	370c      	adds	r7, #12
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e0:	4770      	bx	lr
	...

0800c6e4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b088      	sub	sp, #32
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c6ee:	6879      	ldr	r1, [r7, #4]
 800c6f0:	6809      	ldr	r1, [r1, #0]
 800c6f2:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c6f4:	6839      	ldr	r1, [r7, #0]
 800c6f6:	2901      	cmp	r1, #1
 800c6f8:	d904      	bls.n	800c704 <get_fat+0x20>
 800c6fa:	69b9      	ldr	r1, [r7, #24]
 800c6fc:	69c9      	ldr	r1, [r1, #28]
 800c6fe:	6838      	ldr	r0, [r7, #0]
 800c700:	4288      	cmp	r0, r1
 800c702:	d302      	bcc.n	800c70a <get_fat+0x26>
		val = 1;	/* Internal error */
 800c704:	2301      	movs	r3, #1
 800c706:	61fb      	str	r3, [r7, #28]
 800c708:	e101      	b.n	800c90e <get_fat+0x22a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c70a:	f04f 31ff 	mov.w	r1, #4294967295
 800c70e:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800c710:	69b9      	ldr	r1, [r7, #24]
 800c712:	7809      	ldrb	r1, [r1, #0]
 800c714:	3901      	subs	r1, #1
 800c716:	2903      	cmp	r1, #3
 800c718:	f200 80ed 	bhi.w	800c8f6 <get_fat+0x212>
 800c71c:	a001      	add	r0, pc, #4	; (adr r0, 800c724 <get_fat+0x40>)
 800c71e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c722:	bf00      	nop
 800c724:	0800c735 	.word	0x0800c735
 800c728:	0800c7bd 	.word	0x0800c7bd
 800c72c:	0800c7f3 	.word	0x0800c7f3
 800c730:	0800c82b 	.word	0x0800c82b
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	60fb      	str	r3, [r7, #12]
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	085b      	lsrs	r3, r3, #1
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	4413      	add	r3, r2
 800c740:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c742:	69bb      	ldr	r3, [r7, #24]
 800c744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	0a5b      	lsrs	r3, r3, #9
 800c74a:	4413      	add	r3, r2
 800c74c:	4619      	mov	r1, r3
 800c74e:	69b8      	ldr	r0, [r7, #24]
 800c750:	f7ff ff0c 	bl	800c56c <move_window>
 800c754:	4603      	mov	r3, r0
 800c756:	2b00      	cmp	r3, #0
 800c758:	f040 80d0 	bne.w	800c8fc <get_fat+0x218>
			wc = fs->win[bc++ % SS(fs)];
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	1c5a      	adds	r2, r3, #1
 800c760:	60fa      	str	r2, [r7, #12]
 800c762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c766:	69ba      	ldr	r2, [r7, #24]
 800c768:	4413      	add	r3, r2
 800c76a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c76e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	0a5b      	lsrs	r3, r3, #9
 800c778:	4413      	add	r3, r2
 800c77a:	4619      	mov	r1, r3
 800c77c:	69b8      	ldr	r0, [r7, #24]
 800c77e:	f7ff fef5 	bl	800c56c <move_window>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	f040 80bb 	bne.w	800c900 <get_fat+0x21c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c790:	69ba      	ldr	r2, [r7, #24]
 800c792:	4413      	add	r3, r2
 800c794:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c798:	021b      	lsls	r3, r3, #8
 800c79a:	461a      	mov	r2, r3
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	f003 0301 	and.w	r3, r3, #1
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d002      	beq.n	800c7b2 <get_fat+0xce>
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	091b      	lsrs	r3, r3, #4
 800c7b0:	e002      	b.n	800c7b8 <get_fat+0xd4>
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c7b8:	61fb      	str	r3, [r7, #28]
			break;
 800c7ba:	e0a8      	b.n	800c90e <get_fat+0x22a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	0a1b      	lsrs	r3, r3, #8
 800c7c4:	4413      	add	r3, r2
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	69b8      	ldr	r0, [r7, #24]
 800c7ca:	f7ff fecf 	bl	800c56c <move_window>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	f040 8097 	bne.w	800c904 <get_fat+0x220>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c7d6:	69bb      	ldr	r3, [r7, #24]
 800c7d8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	005b      	lsls	r3, r3, #1
 800c7e0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c7e4:	4413      	add	r3, r2
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7ff faac 	bl	800bd44 <ld_word>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	61fb      	str	r3, [r7, #28]
			break;
 800c7f0:	e08d      	b.n	800c90e <get_fat+0x22a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c7f2:	69bb      	ldr	r3, [r7, #24]
 800c7f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	09db      	lsrs	r3, r3, #7
 800c7fa:	4413      	add	r3, r2
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	69b8      	ldr	r0, [r7, #24]
 800c800:	f7ff feb4 	bl	800c56c <move_window>
 800c804:	4603      	mov	r3, r0
 800c806:	2b00      	cmp	r3, #0
 800c808:	d17e      	bne.n	800c908 <get_fat+0x224>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c80a:	69bb      	ldr	r3, [r7, #24]
 800c80c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c818:	4413      	add	r3, r2
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7ff faaa 	bl	800bd74 <ld_dword>
 800c820:	4603      	mov	r3, r0
 800c822:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c826:	61fb      	str	r3, [r7, #28]
			break;
 800c828:	e071      	b.n	800c90e <get_fat+0x22a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800c82a:	6879      	ldr	r1, [r7, #4]
 800c82c:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800c830:	4301      	orrs	r1, r0
 800c832:	d060      	beq.n	800c8f6 <get_fat+0x212>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800c834:	6879      	ldr	r1, [r7, #4]
 800c836:	6889      	ldr	r1, [r1, #8]
 800c838:	6838      	ldr	r0, [r7, #0]
 800c83a:	1a41      	subs	r1, r0, r1
 800c83c:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800c83e:	6879      	ldr	r1, [r7, #4]
 800c840:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800c844:	1e42      	subs	r2, r0, #1
 800c846:	f141 33ff 	adc.w	r3, r1, #4294967295
 800c84a:	f04f 0000 	mov.w	r0, #0
 800c84e:	f04f 0100 	mov.w	r1, #0
 800c852:	0a50      	lsrs	r0, r2, #9
 800c854:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800c858:	0a59      	lsrs	r1, r3, #9
 800c85a:	4602      	mov	r2, r0
 800c85c:	69bb      	ldr	r3, [r7, #24]
 800c85e:	895b      	ldrh	r3, [r3, #10]
 800c860:	fbb2 f3f3 	udiv	r3, r2, r3
 800c864:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	79db      	ldrb	r3, [r3, #7]
 800c86a:	2b02      	cmp	r3, #2
 800c86c:	d10e      	bne.n	800c88c <get_fat+0x1a8>
					if (cofs <= clen) {
 800c86e:	697a      	ldr	r2, [r7, #20]
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	429a      	cmp	r2, r3
 800c874:	d80a      	bhi.n	800c88c <get_fat+0x1a8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800c876:	697a      	ldr	r2, [r7, #20]
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d002      	beq.n	800c884 <get_fat+0x1a0>
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	3301      	adds	r3, #1
 800c882:	e001      	b.n	800c888 <get_fat+0x1a4>
 800c884:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c888:	61fb      	str	r3, [r7, #28]
						break;
 800c88a:	e040      	b.n	800c90e <get_fat+0x22a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	79db      	ldrb	r3, [r3, #7]
 800c890:	2b03      	cmp	r3, #3
 800c892:	d108      	bne.n	800c8a6 <get_fat+0x1c2>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	699b      	ldr	r3, [r3, #24]
 800c898:	697a      	ldr	r2, [r7, #20]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d203      	bcs.n	800c8a6 <get_fat+0x1c2>
					val = clst + 1; 	/* Generate the value */
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	3301      	adds	r3, #1
 800c8a2:	61fb      	str	r3, [r7, #28]
					break;
 800c8a4:	e033      	b.n	800c90e <get_fat+0x22a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	79db      	ldrb	r3, [r3, #7]
 800c8aa:	2b02      	cmp	r3, #2
 800c8ac:	d023      	beq.n	800c8f6 <get_fat+0x212>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	69db      	ldr	r3, [r3, #28]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d003      	beq.n	800c8be <get_fat+0x1da>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800c8b6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c8ba:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800c8bc:	e027      	b.n	800c90e <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	09db      	lsrs	r3, r3, #7
 800c8c6:	4413      	add	r3, r2
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	69b8      	ldr	r0, [r7, #24]
 800c8cc:	f7ff fe4e 	bl	800c56c <move_window>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d11a      	bne.n	800c90c <get_fat+0x228>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800c8d6:	69bb      	ldr	r3, [r7, #24]
 800c8d8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	009b      	lsls	r3, r3, #2
 800c8e0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c8e4:	4413      	add	r3, r2
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7ff fa44 	bl	800bd74 <ld_dword>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c8f2:	61fb      	str	r3, [r7, #28]
					break;
 800c8f4:	e00b      	b.n	800c90e <get_fat+0x22a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	61fb      	str	r3, [r7, #28]
 800c8fa:	e008      	b.n	800c90e <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c8fc:	bf00      	nop
 800c8fe:	e006      	b.n	800c90e <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c900:	bf00      	nop
 800c902:	e004      	b.n	800c90e <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c904:	bf00      	nop
 800c906:	e002      	b.n	800c90e <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c908:	bf00      	nop
 800c90a:	e000      	b.n	800c90e <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c90c:	bf00      	nop
		}
	}

	return val;
 800c90e:	69fb      	ldr	r3, [r7, #28]
}
 800c910:	4618      	mov	r0, r3
 800c912:	3720      	adds	r7, #32
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c918:	b590      	push	{r4, r7, lr}
 800c91a:	b089      	sub	sp, #36	; 0x24
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c924:	2302      	movs	r3, #2
 800c926:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	f240 80d6 	bls.w	800cadc <put_fat+0x1c4>
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	69db      	ldr	r3, [r3, #28]
 800c934:	68ba      	ldr	r2, [r7, #8]
 800c936:	429a      	cmp	r2, r3
 800c938:	f080 80d0 	bcs.w	800cadc <put_fat+0x1c4>
		switch (fs->fs_type) {
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	2b04      	cmp	r3, #4
 800c942:	f300 80d4 	bgt.w	800caee <put_fat+0x1d6>
 800c946:	2b03      	cmp	r3, #3
 800c948:	f280 8093 	bge.w	800ca72 <put_fat+0x15a>
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	d002      	beq.n	800c956 <put_fat+0x3e>
 800c950:	2b02      	cmp	r3, #2
 800c952:	d06e      	beq.n	800ca32 <put_fat+0x11a>
 800c954:	e0cb      	b.n	800caee <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	61bb      	str	r3, [r7, #24]
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	085b      	lsrs	r3, r3, #1
 800c95e:	69ba      	ldr	r2, [r7, #24]
 800c960:	4413      	add	r3, r2
 800c962:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	0a5b      	lsrs	r3, r3, #9
 800c96c:	4413      	add	r3, r2
 800c96e:	4619      	mov	r1, r3
 800c970:	68f8      	ldr	r0, [r7, #12]
 800c972:	f7ff fdfb 	bl	800c56c <move_window>
 800c976:	4603      	mov	r3, r0
 800c978:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c97a:	7ffb      	ldrb	r3, [r7, #31]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	f040 80af 	bne.w	800cae0 <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c988:	69bb      	ldr	r3, [r7, #24]
 800c98a:	1c59      	adds	r1, r3, #1
 800c98c:	61b9      	str	r1, [r7, #24]
 800c98e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c992:	4413      	add	r3, r2
 800c994:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	f003 0301 	and.w	r3, r3, #1
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00d      	beq.n	800c9bc <put_fat+0xa4>
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	b25b      	sxtb	r3, r3
 800c9a6:	f003 030f 	and.w	r3, r3, #15
 800c9aa:	b25a      	sxtb	r2, r3
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	011b      	lsls	r3, r3, #4
 800c9b2:	b25b      	sxtb	r3, r3
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	b25b      	sxtb	r3, r3
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	e001      	b.n	800c9c0 <put_fat+0xa8>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	697a      	ldr	r2, [r7, #20]
 800c9c2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c9ce:	69bb      	ldr	r3, [r7, #24]
 800c9d0:	0a5b      	lsrs	r3, r3, #9
 800c9d2:	4413      	add	r3, r2
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	68f8      	ldr	r0, [r7, #12]
 800c9d8:	f7ff fdc8 	bl	800c56c <move_window>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c9e0:	7ffb      	ldrb	r3, [r7, #31]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d17e      	bne.n	800cae4 <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c9ec:	69bb      	ldr	r3, [r7, #24]
 800c9ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9f2:	4413      	add	r3, r2
 800c9f4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	f003 0301 	and.w	r3, r3, #1
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d003      	beq.n	800ca08 <put_fat+0xf0>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	091b      	lsrs	r3, r3, #4
 800ca04:	b2db      	uxtb	r3, r3
 800ca06:	e00e      	b.n	800ca26 <put_fat+0x10e>
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	b25b      	sxtb	r3, r3
 800ca0e:	f023 030f 	bic.w	r3, r3, #15
 800ca12:	b25a      	sxtb	r2, r3
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	0a1b      	lsrs	r3, r3, #8
 800ca18:	b25b      	sxtb	r3, r3
 800ca1a:	f003 030f 	and.w	r3, r3, #15
 800ca1e:	b25b      	sxtb	r3, r3
 800ca20:	4313      	orrs	r3, r2
 800ca22:	b25b      	sxtb	r3, r3
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	697a      	ldr	r2, [r7, #20]
 800ca28:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	70da      	strb	r2, [r3, #3]
			break;
 800ca30:	e05d      	b.n	800caee <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	0a1b      	lsrs	r3, r3, #8
 800ca3a:	4413      	add	r3, r2
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	68f8      	ldr	r0, [r7, #12]
 800ca40:	f7ff fd94 	bl	800c56c <move_window>
 800ca44:	4603      	mov	r3, r0
 800ca46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ca48:	7ffb      	ldrb	r3, [r7, #31]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d14c      	bne.n	800cae8 <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	005b      	lsls	r3, r3, #1
 800ca58:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ca5c:	4413      	add	r3, r2
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	b292      	uxth	r2, r2
 800ca62:	4611      	mov	r1, r2
 800ca64:	4618      	mov	r0, r3
 800ca66:	f7ff fa83 	bl	800bf70 <st_word>
			fs->wflag = 1;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	70da      	strb	r2, [r3, #3]
			break;
 800ca70:	e03d      	b.n	800caee <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	09db      	lsrs	r3, r3, #7
 800ca7a:	4413      	add	r3, r2
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	68f8      	ldr	r0, [r7, #12]
 800ca80:	f7ff fd74 	bl	800c56c <move_window>
 800ca84:	4603      	mov	r3, r0
 800ca86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ca88:	7ffb      	ldrb	r3, [r7, #31]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d12e      	bne.n	800caec <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	2b04      	cmp	r3, #4
 800ca94:	d012      	beq.n	800cabc <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800caaa:	4413      	add	r3, r2
 800caac:	4618      	mov	r0, r3
 800caae:	f7ff f961 	bl	800bd74 <ld_dword>
 800cab2:	4603      	mov	r3, r0
 800cab4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cab8:	4323      	orrs	r3, r4
 800caba:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800caca:	4413      	add	r3, r2
 800cacc:	6879      	ldr	r1, [r7, #4]
 800cace:	4618      	mov	r0, r3
 800cad0:	f7ff fa69 	bl	800bfa6 <st_dword>
			fs->wflag = 1;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2201      	movs	r2, #1
 800cad8:	70da      	strb	r2, [r3, #3]
			break;
 800cada:	e008      	b.n	800caee <put_fat+0x1d6>
		}
	}
 800cadc:	bf00      	nop
 800cade:	e006      	b.n	800caee <put_fat+0x1d6>
			if (res != FR_OK) break;
 800cae0:	bf00      	nop
 800cae2:	e004      	b.n	800caee <put_fat+0x1d6>
			if (res != FR_OK) break;
 800cae4:	bf00      	nop
 800cae6:	e002      	b.n	800caee <put_fat+0x1d6>
			if (res != FR_OK) break;
 800cae8:	bf00      	nop
 800caea:	e000      	b.n	800caee <put_fat+0x1d6>
			if (res != FR_OK) break;
 800caec:	bf00      	nop
	return res;
 800caee:	7ffb      	ldrb	r3, [r7, #31]
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3724      	adds	r7, #36	; 0x24
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd90      	pop	{r4, r7, pc}

0800caf8 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b08a      	sub	sp, #40	; 0x28
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	3b02      	subs	r3, #2
 800cb08:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	69db      	ldr	r3, [r3, #28]
 800cb0e:	3b02      	subs	r3, #2
 800cb10:	68ba      	ldr	r2, [r7, #8]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d301      	bcc.n	800cb1a <find_bitmap+0x22>
 800cb16:	2300      	movs	r3, #0
 800cb18:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	61fb      	str	r3, [r7, #28]
 800cb1e:	69fb      	ldr	r3, [r7, #28]
 800cb20:	61bb      	str	r3, [r7, #24]
 800cb22:	2300      	movs	r3, #0
 800cb24:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb2a:	69fb      	ldr	r3, [r7, #28]
 800cb2c:	0b1b      	lsrs	r3, r3, #12
 800cb2e:	4413      	add	r3, r2
 800cb30:	4619      	mov	r1, r3
 800cb32:	68f8      	ldr	r0, [r7, #12]
 800cb34:	f7ff fd1a 	bl	800c56c <move_window>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d002      	beq.n	800cb44 <find_bitmap+0x4c>
 800cb3e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb42:	e051      	b.n	800cbe8 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	08db      	lsrs	r3, r3, #3
 800cb48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb4c:	623b      	str	r3, [r7, #32]
 800cb4e:	69fb      	ldr	r3, [r7, #28]
 800cb50:	f003 0307 	and.w	r3, r3, #7
 800cb54:	2201      	movs	r2, #1
 800cb56:	fa02 f303 	lsl.w	r3, r2, r3
 800cb5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800cb5e:	68fa      	ldr	r2, [r7, #12]
 800cb60:	6a3b      	ldr	r3, [r7, #32]
 800cb62:	4413      	add	r3, r2
 800cb64:	3338      	adds	r3, #56	; 0x38
 800cb66:	781a      	ldrb	r2, [r3, #0]
 800cb68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb6c:	4013      	ands	r3, r2
 800cb6e:	74fb      	strb	r3, [r7, #19]
 800cb70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb74:	005b      	lsls	r3, r3, #1
 800cb76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800cb7a:	69fb      	ldr	r3, [r7, #28]
 800cb7c:	3301      	adds	r3, #1
 800cb7e:	61fb      	str	r3, [r7, #28]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	69db      	ldr	r3, [r3, #28]
 800cb84:	3b02      	subs	r3, #2
 800cb86:	69fa      	ldr	r2, [r7, #28]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d307      	bcc.n	800cb9c <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	61fb      	str	r3, [r7, #28]
 800cb90:	2300      	movs	r3, #0
 800cb92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb96:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb9a:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800cb9c:	7cfb      	ldrb	r3, [r7, #19]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d109      	bne.n	800cbb6 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	3301      	adds	r3, #1
 800cba6:	617b      	str	r3, [r7, #20]
 800cba8:	697a      	ldr	r2, [r7, #20]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d106      	bne.n	800cbbe <find_bitmap+0xc6>
 800cbb0:	69bb      	ldr	r3, [r7, #24]
 800cbb2:	3302      	adds	r3, #2
 800cbb4:	e018      	b.n	800cbe8 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800cbb6:	69fb      	ldr	r3, [r7, #28]
 800cbb8:	61bb      	str	r3, [r7, #24]
 800cbba:	2300      	movs	r3, #0
 800cbbc:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800cbbe:	69fa      	ldr	r2, [r7, #28]
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d101      	bne.n	800cbca <find_bitmap+0xd2>
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	e00e      	b.n	800cbe8 <find_bitmap+0xf0>
			} while (bm);
 800cbca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d1c5      	bne.n	800cb5e <find_bitmap+0x66>
			bm = 1;
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800cbd8:	6a3b      	ldr	r3, [r7, #32]
 800cbda:	3301      	adds	r3, #1
 800cbdc:	623b      	str	r3, [r7, #32]
 800cbde:	6a3b      	ldr	r3, [r7, #32]
 800cbe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbe4:	d3bb      	bcc.n	800cb5e <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800cbe6:	e79e      	b.n	800cb26 <find_bitmap+0x2e>
	}
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3728      	adds	r7, #40	; 0x28
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b088      	sub	sp, #32
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	60f8      	str	r0, [r7, #12]
 800cbf8:	60b9      	str	r1, [r7, #8]
 800cbfa:	607a      	str	r2, [r7, #4]
 800cbfc:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	3b02      	subs	r3, #2
 800cc02:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	0b1b      	lsrs	r3, r3, #12
 800cc0c:	4413      	add	r3, r2
 800cc0e:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	08db      	lsrs	r3, r3, #3
 800cc14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc18:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	f003 0307 	and.w	r3, r3, #7
 800cc20:	2201      	movs	r2, #1
 800cc22:	fa02 f303 	lsl.w	r3, r2, r3
 800cc26:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	1c5a      	adds	r2, r3, #1
 800cc2c:	617a      	str	r2, [r7, #20]
 800cc2e:	4619      	mov	r1, r3
 800cc30:	68f8      	ldr	r0, [r7, #12]
 800cc32:	f7ff fc9b 	bl	800c56c <move_window>
 800cc36:	4603      	mov	r3, r0
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d001      	beq.n	800cc40 <change_bitmap+0x50>
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	e03d      	b.n	800ccbc <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800cc40:	68fa      	ldr	r2, [r7, #12]
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	4413      	add	r3, r2
 800cc46:	3338      	adds	r3, #56	; 0x38
 800cc48:	781a      	ldrb	r2, [r3, #0]
 800cc4a:	7ffb      	ldrb	r3, [r7, #31]
 800cc4c:	4013      	ands	r3, r2
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	bf14      	ite	ne
 800cc54:	2301      	movne	r3, #1
 800cc56:	2300      	moveq	r3, #0
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d101      	bne.n	800cc66 <change_bitmap+0x76>
 800cc62:	2302      	movs	r3, #2
 800cc64:	e02a      	b.n	800ccbc <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800cc66:	68fa      	ldr	r2, [r7, #12]
 800cc68:	69bb      	ldr	r3, [r7, #24]
 800cc6a:	4413      	add	r3, r2
 800cc6c:	3338      	adds	r3, #56	; 0x38
 800cc6e:	781a      	ldrb	r2, [r3, #0]
 800cc70:	7ffb      	ldrb	r3, [r7, #31]
 800cc72:	4053      	eors	r3, r2
 800cc74:	b2d9      	uxtb	r1, r3
 800cc76:	68fa      	ldr	r2, [r7, #12]
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	4413      	add	r3, r2
 800cc7c:	3338      	adds	r3, #56	; 0x38
 800cc7e:	460a      	mov	r2, r1
 800cc80:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	2201      	movs	r2, #1
 800cc86:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	607b      	str	r3, [r7, #4]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d101      	bne.n	800cc98 <change_bitmap+0xa8>
 800cc94:	2300      	movs	r3, #0
 800cc96:	e011      	b.n	800ccbc <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800cc98:	7ffb      	ldrb	r3, [r7, #31]
 800cc9a:	005b      	lsls	r3, r3, #1
 800cc9c:	77fb      	strb	r3, [r7, #31]
 800cc9e:	7ffb      	ldrb	r3, [r7, #31]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d1cd      	bne.n	800cc40 <change_bitmap+0x50>
			bm = 1;
 800cca4:	2301      	movs	r3, #1
 800cca6:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800cca8:	69bb      	ldr	r3, [r7, #24]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	61bb      	str	r3, [r7, #24]
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccb4:	d3c4      	bcc.n	800cc40 <change_bitmap+0x50>
		i = 0;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800ccba:	e7b5      	b.n	800cc28 <change_bitmap+0x38>
	}
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3720      	adds	r7, #32
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b086      	sub	sp, #24
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	79db      	ldrb	r3, [r3, #7]
 800ccd0:	2b03      	cmp	r3, #3
 800ccd2:	d121      	bne.n	800cd18 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	617b      	str	r3, [r7, #20]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	699b      	ldr	r3, [r3, #24]
 800ccde:	613b      	str	r3, [r7, #16]
 800cce0:	e014      	b.n	800cd0c <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6818      	ldr	r0, [r3, #0]
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	3301      	adds	r3, #1
 800ccea:	461a      	mov	r2, r3
 800ccec:	6979      	ldr	r1, [r7, #20]
 800ccee:	f7ff fe13 	bl	800c918 <put_fat>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800ccf6:	7bfb      	ldrb	r3, [r7, #15]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d001      	beq.n	800cd00 <fill_first_frag+0x3c>
 800ccfc:	7bfb      	ldrb	r3, [r7, #15]
 800ccfe:	e00c      	b.n	800cd1a <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	3301      	adds	r3, #1
 800cd04:	617b      	str	r3, [r7, #20]
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	3b01      	subs	r3, #1
 800cd0a:	613b      	str	r3, [r7, #16]
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d1e7      	bne.n	800cce2 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2200      	movs	r2, #0
 800cd16:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800cd18:	2300      	movs	r3, #0
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3718      	adds	r7, #24
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}

0800cd22 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800cd22:	b580      	push	{r7, lr}
 800cd24:	b086      	sub	sp, #24
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	60f8      	str	r0, [r7, #12]
 800cd2a:	60b9      	str	r1, [r7, #8]
 800cd2c:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800cd2e:	e020      	b.n	800cd72 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	6818      	ldr	r0, [r3, #0]
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	69db      	ldr	r3, [r3, #28]
 800cd38:	68ba      	ldr	r2, [r7, #8]
 800cd3a:	1ad3      	subs	r3, r2, r3
 800cd3c:	1c59      	adds	r1, r3, #1
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	69db      	ldr	r3, [r3, #28]
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d905      	bls.n	800cd52 <fill_last_frag+0x30>
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	69db      	ldr	r3, [r3, #28]
 800cd4a:	68ba      	ldr	r2, [r7, #8]
 800cd4c:	1ad3      	subs	r3, r2, r3
 800cd4e:	3302      	adds	r3, #2
 800cd50:	e000      	b.n	800cd54 <fill_last_frag+0x32>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	461a      	mov	r2, r3
 800cd56:	f7ff fddf 	bl	800c918 <put_fat>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800cd5e:	7dfb      	ldrb	r3, [r7, #23]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d001      	beq.n	800cd68 <fill_last_frag+0x46>
 800cd64:	7dfb      	ldrb	r3, [r7, #23]
 800cd66:	e009      	b.n	800cd7c <fill_last_frag+0x5a>
		obj->n_frag--;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	69db      	ldr	r3, [r3, #28]
 800cd6c:	1e5a      	subs	r2, r3, #1
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	69db      	ldr	r3, [r3, #28]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d1da      	bne.n	800cd30 <fill_last_frag+0xe>
	}
	return FR_OK;
 800cd7a:	2300      	movs	r3, #0
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3718      	adds	r7, #24
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b08a      	sub	sp, #40	; 0x28
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cd90:	2300      	movs	r3, #0
 800cd92:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	627b      	str	r3, [r7, #36]	; 0x24
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d904      	bls.n	800cdb2 <remove_chain+0x2e>
 800cda8:	69bb      	ldr	r3, [r7, #24]
 800cdaa:	69db      	ldr	r3, [r3, #28]
 800cdac:	68ba      	ldr	r2, [r7, #8]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d301      	bcc.n	800cdb6 <remove_chain+0x32>
 800cdb2:	2302      	movs	r3, #2
 800cdb4:	e096      	b.n	800cee4 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d014      	beq.n	800cde6 <remove_chain+0x62>
 800cdbc:	69bb      	ldr	r3, [r7, #24]
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	2b04      	cmp	r3, #4
 800cdc2:	d103      	bne.n	800cdcc <remove_chain+0x48>
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	79db      	ldrb	r3, [r3, #7]
 800cdc8:	2b02      	cmp	r3, #2
 800cdca:	d00c      	beq.n	800cde6 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cdcc:	f04f 32ff 	mov.w	r2, #4294967295
 800cdd0:	6879      	ldr	r1, [r7, #4]
 800cdd2:	69b8      	ldr	r0, [r7, #24]
 800cdd4:	f7ff fda0 	bl	800c918 <put_fat>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cddc:	7ffb      	ldrb	r3, [r7, #31]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d001      	beq.n	800cde6 <remove_chain+0x62>
 800cde2:	7ffb      	ldrb	r3, [r7, #31]
 800cde4:	e07e      	b.n	800cee4 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cde6:	68b9      	ldr	r1, [r7, #8]
 800cde8:	68f8      	ldr	r0, [r7, #12]
 800cdea:	f7ff fc7b 	bl	800c6e4 <get_fat>
 800cdee:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d055      	beq.n	800cea2 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	2b01      	cmp	r3, #1
 800cdfa:	d101      	bne.n	800ce00 <remove_chain+0x7c>
 800cdfc:	2302      	movs	r3, #2
 800cdfe:	e071      	b.n	800cee4 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce06:	d101      	bne.n	800ce0c <remove_chain+0x88>
 800ce08:	2301      	movs	r3, #1
 800ce0a:	e06b      	b.n	800cee4 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800ce0c:	69bb      	ldr	r3, [r7, #24]
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	2b04      	cmp	r3, #4
 800ce12:	d00b      	beq.n	800ce2c <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ce14:	2200      	movs	r2, #0
 800ce16:	68b9      	ldr	r1, [r7, #8]
 800ce18:	69b8      	ldr	r0, [r7, #24]
 800ce1a:	f7ff fd7d 	bl	800c918 <put_fat>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ce22:	7ffb      	ldrb	r3, [r7, #31]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d001      	beq.n	800ce2c <remove_chain+0xa8>
 800ce28:	7ffb      	ldrb	r3, [r7, #31]
 800ce2a:	e05b      	b.n	800cee4 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	699a      	ldr	r2, [r3, #24]
 800ce30:	69bb      	ldr	r3, [r7, #24]
 800ce32:	69db      	ldr	r3, [r3, #28]
 800ce34:	3b02      	subs	r3, #2
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d20b      	bcs.n	800ce52 <remove_chain+0xce>
			fs->free_clst++;
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	699b      	ldr	r3, [r3, #24]
 800ce3e:	1c5a      	adds	r2, r3, #1
 800ce40:	69bb      	ldr	r3, [r7, #24]
 800ce42:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800ce44:	69bb      	ldr	r3, [r7, #24]
 800ce46:	791b      	ldrb	r3, [r3, #4]
 800ce48:	f043 0301 	orr.w	r3, r3, #1
 800ce4c:	b2da      	uxtb	r2, r3
 800ce4e:	69bb      	ldr	r3, [r7, #24]
 800ce50:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800ce52:	6a3b      	ldr	r3, [r7, #32]
 800ce54:	3301      	adds	r3, #1
 800ce56:	697a      	ldr	r2, [r7, #20]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d102      	bne.n	800ce62 <remove_chain+0xde>
			ecl = nxt;
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	623b      	str	r3, [r7, #32]
 800ce60:	e017      	b.n	800ce92 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800ce62:	69bb      	ldr	r3, [r7, #24]
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	2b04      	cmp	r3, #4
 800ce68:	d10f      	bne.n	800ce8a <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800ce6a:	6a3a      	ldr	r2, [r7, #32]
 800ce6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6e:	1ad3      	subs	r3, r2, r3
 800ce70:	1c5a      	adds	r2, r3, #1
 800ce72:	2300      	movs	r3, #0
 800ce74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce76:	69b8      	ldr	r0, [r7, #24]
 800ce78:	f7ff feba 	bl	800cbf0 <change_bitmap>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800ce80:	7ffb      	ldrb	r3, [r7, #31]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d001      	beq.n	800ce8a <remove_chain+0x106>
 800ce86:	7ffb      	ldrb	r3, [r7, #31]
 800ce88:	e02c      	b.n	800cee4 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	623b      	str	r3, [r7, #32]
 800ce8e:	6a3b      	ldr	r3, [r7, #32]
 800ce90:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ce96:	69bb      	ldr	r3, [r7, #24]
 800ce98:	69db      	ldr	r3, [r3, #28]
 800ce9a:	68ba      	ldr	r2, [r7, #8]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d3a2      	bcc.n	800cde6 <remove_chain+0x62>
 800cea0:	e000      	b.n	800cea4 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800cea2:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800cea4:	69bb      	ldr	r3, [r7, #24]
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	2b04      	cmp	r3, #4
 800ceaa:	d11a      	bne.n	800cee2 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d103      	bne.n	800ceba <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	71da      	strb	r2, [r3, #7]
 800ceb8:	e013      	b.n	800cee2 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	79db      	ldrb	r3, [r3, #7]
 800cebe:	2b03      	cmp	r3, #3
 800cec0:	d10f      	bne.n	800cee2 <remove_chain+0x15e>
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	689b      	ldr	r3, [r3, #8]
 800cec6:	687a      	ldr	r2, [r7, #4]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d30a      	bcc.n	800cee2 <remove_chain+0x15e>
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	689a      	ldr	r2, [r3, #8]
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	699b      	ldr	r3, [r3, #24]
 800ced4:	4413      	add	r3, r2
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d802      	bhi.n	800cee2 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2202      	movs	r2, #2
 800cee0:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800cee2:	2300      	movs	r3, #0
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3728      	adds	r7, #40	; 0x28
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b088      	sub	sp, #32
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d10d      	bne.n	800cf1e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	695b      	ldr	r3, [r3, #20]
 800cf06:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d004      	beq.n	800cf18 <create_chain+0x2c>
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	69db      	ldr	r3, [r3, #28]
 800cf12:	69ba      	ldr	r2, [r7, #24]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d31b      	bcc.n	800cf50 <create_chain+0x64>
 800cf18:	2301      	movs	r3, #1
 800cf1a:	61bb      	str	r3, [r7, #24]
 800cf1c:	e018      	b.n	800cf50 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cf1e:	6839      	ldr	r1, [r7, #0]
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f7ff fbdf 	bl	800c6e4 <get_fat>
 800cf26:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	2b01      	cmp	r3, #1
 800cf2c:	d801      	bhi.n	800cf32 <create_chain+0x46>
 800cf2e:	2301      	movs	r3, #1
 800cf30:	e0d9      	b.n	800d0e6 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf38:	d101      	bne.n	800cf3e <create_chain+0x52>
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	e0d3      	b.n	800d0e6 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	69db      	ldr	r3, [r3, #28]
 800cf42:	68fa      	ldr	r2, [r7, #12]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d201      	bcs.n	800cf4c <create_chain+0x60>
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	e0cc      	b.n	800d0e6 <create_chain+0x1fa>
		scl = clst;
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	2b04      	cmp	r3, #4
 800cf56:	d164      	bne.n	800d022 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800cf58:	2201      	movs	r2, #1
 800cf5a:	69b9      	ldr	r1, [r7, #24]
 800cf5c:	6938      	ldr	r0, [r7, #16]
 800cf5e:	f7ff fdcb 	bl	800caf8 <find_bitmap>
 800cf62:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800cf64:	69fb      	ldr	r3, [r7, #28]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d003      	beq.n	800cf72 <create_chain+0x86>
 800cf6a:	69fb      	ldr	r3, [r7, #28]
 800cf6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf70:	d101      	bne.n	800cf76 <create_chain+0x8a>
 800cf72:	69fb      	ldr	r3, [r7, #28]
 800cf74:	e0b7      	b.n	800d0e6 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800cf76:	2301      	movs	r3, #1
 800cf78:	2201      	movs	r2, #1
 800cf7a:	69f9      	ldr	r1, [r7, #28]
 800cf7c:	6938      	ldr	r0, [r7, #16]
 800cf7e:	f7ff fe37 	bl	800cbf0 <change_bitmap>
 800cf82:	4603      	mov	r3, r0
 800cf84:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800cf86:	7dfb      	ldrb	r3, [r7, #23]
 800cf88:	2b02      	cmp	r3, #2
 800cf8a:	d101      	bne.n	800cf90 <create_chain+0xa4>
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	e0aa      	b.n	800d0e6 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800cf90:	7dfb      	ldrb	r3, [r7, #23]
 800cf92:	2b01      	cmp	r3, #1
 800cf94:	d102      	bne.n	800cf9c <create_chain+0xb0>
 800cf96:	f04f 33ff 	mov.w	r3, #4294967295
 800cf9a:	e0a4      	b.n	800d0e6 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d103      	bne.n	800cfaa <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2202      	movs	r2, #2
 800cfa6:	71da      	strb	r2, [r3, #7]
 800cfa8:	e011      	b.n	800cfce <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	79db      	ldrb	r3, [r3, #7]
 800cfae:	2b02      	cmp	r3, #2
 800cfb0:	d10d      	bne.n	800cfce <create_chain+0xe2>
 800cfb2:	69bb      	ldr	r3, [r7, #24]
 800cfb4:	3301      	adds	r3, #1
 800cfb6:	69fa      	ldr	r2, [r7, #28]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d008      	beq.n	800cfce <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	689b      	ldr	r3, [r3, #8]
 800cfc0:	69ba      	ldr	r2, [r7, #24]
 800cfc2:	1ad2      	subs	r2, r2, r3
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2203      	movs	r2, #3
 800cfcc:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	79db      	ldrb	r3, [r3, #7]
 800cfd2:	2b02      	cmp	r3, #2
 800cfd4:	d064      	beq.n	800d0a0 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	3301      	adds	r3, #1
 800cfda:	69fa      	ldr	r2, [r7, #28]
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d10b      	bne.n	800cff8 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	69db      	ldr	r3, [r3, #28]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d003      	beq.n	800cff0 <create_chain+0x104>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	69db      	ldr	r3, [r3, #28]
 800cfec:	3301      	adds	r3, #1
 800cfee:	e000      	b.n	800cff2 <create_chain+0x106>
 800cff0:	2302      	movs	r3, #2
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	61d3      	str	r3, [r2, #28]
 800cff6:	e053      	b.n	800d0a0 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	69db      	ldr	r3, [r3, #28]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d102      	bne.n	800d006 <create_chain+0x11a>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2201      	movs	r2, #1
 800d004:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800d006:	69fa      	ldr	r2, [r7, #28]
 800d008:	6839      	ldr	r1, [r7, #0]
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f7ff fe89 	bl	800cd22 <fill_last_frag>
 800d010:	4603      	mov	r3, r0
 800d012:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800d014:	7dfb      	ldrb	r3, [r7, #23]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d142      	bne.n	800d0a0 <create_chain+0x1b4>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2201      	movs	r2, #1
 800d01e:	61da      	str	r2, [r3, #28]
 800d020:	e03e      	b.n	800d0a0 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d026:	69fb      	ldr	r3, [r7, #28]
 800d028:	3301      	adds	r3, #1
 800d02a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	69db      	ldr	r3, [r3, #28]
 800d030:	69fa      	ldr	r2, [r7, #28]
 800d032:	429a      	cmp	r2, r3
 800d034:	d307      	bcc.n	800d046 <create_chain+0x15a>
				ncl = 2;
 800d036:	2302      	movs	r3, #2
 800d038:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d03a:	69fa      	ldr	r2, [r7, #28]
 800d03c:	69bb      	ldr	r3, [r7, #24]
 800d03e:	429a      	cmp	r2, r3
 800d040:	d901      	bls.n	800d046 <create_chain+0x15a>
 800d042:	2300      	movs	r3, #0
 800d044:	e04f      	b.n	800d0e6 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d046:	69f9      	ldr	r1, [r7, #28]
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f7ff fb4b 	bl	800c6e4 <get_fat>
 800d04e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d00e      	beq.n	800d074 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2b01      	cmp	r3, #1
 800d05a:	d003      	beq.n	800d064 <create_chain+0x178>
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d062:	d101      	bne.n	800d068 <create_chain+0x17c>
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	e03e      	b.n	800d0e6 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800d068:	69fa      	ldr	r2, [r7, #28]
 800d06a:	69bb      	ldr	r3, [r7, #24]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d1da      	bne.n	800d026 <create_chain+0x13a>
 800d070:	2300      	movs	r3, #0
 800d072:	e038      	b.n	800d0e6 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800d074:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d076:	f04f 32ff 	mov.w	r2, #4294967295
 800d07a:	69f9      	ldr	r1, [r7, #28]
 800d07c:	6938      	ldr	r0, [r7, #16]
 800d07e:	f7ff fc4b 	bl	800c918 <put_fat>
 800d082:	4603      	mov	r3, r0
 800d084:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d086:	7dfb      	ldrb	r3, [r7, #23]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d109      	bne.n	800d0a0 <create_chain+0x1b4>
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d006      	beq.n	800d0a0 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d092:	69fa      	ldr	r2, [r7, #28]
 800d094:	6839      	ldr	r1, [r7, #0]
 800d096:	6938      	ldr	r0, [r7, #16]
 800d098:	f7ff fc3e 	bl	800c918 <put_fat>
 800d09c:	4603      	mov	r3, r0
 800d09e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d0a0:	7dfb      	ldrb	r3, [r7, #23]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d116      	bne.n	800d0d4 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	69fa      	ldr	r2, [r7, #28]
 800d0aa:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	699a      	ldr	r2, [r3, #24]
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	69db      	ldr	r3, [r3, #28]
 800d0b4:	3b02      	subs	r3, #2
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d804      	bhi.n	800d0c4 <create_chain+0x1d8>
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	699b      	ldr	r3, [r3, #24]
 800d0be:	1e5a      	subs	r2, r3, #1
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	791b      	ldrb	r3, [r3, #4]
 800d0c8:	f043 0301 	orr.w	r3, r3, #1
 800d0cc:	b2da      	uxtb	r2, r3
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	711a      	strb	r2, [r3, #4]
 800d0d2:	e007      	b.n	800d0e4 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d0d4:	7dfb      	ldrb	r3, [r7, #23]
 800d0d6:	2b01      	cmp	r3, #1
 800d0d8:	d102      	bne.n	800d0e0 <create_chain+0x1f4>
 800d0da:	f04f 33ff 	mov.w	r3, #4294967295
 800d0de:	e000      	b.n	800d0e2 <create_chain+0x1f6>
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d0e4:	69fb      	ldr	r3, [r7, #28]
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3720      	adds	r7, #32
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}

0800d0ee <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d0ee:	b5b0      	push	{r4, r5, r7, lr}
 800d0f0:	b088      	sub	sp, #32
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	60f8      	str	r0, [r7, #12]
 800d0f6:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d104:	3304      	adds	r3, #4
 800d106:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d10c:	f04f 0000 	mov.w	r0, #0
 800d110:	f04f 0100 	mov.w	r1, #0
 800d114:	0a50      	lsrs	r0, r2, #9
 800d116:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800d11a:	0a59      	lsrs	r1, r3, #9
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	895b      	ldrh	r3, [r3, #10]
 800d120:	b29b      	uxth	r3, r3
 800d122:	2200      	movs	r2, #0
 800d124:	461c      	mov	r4, r3
 800d126:	4615      	mov	r5, r2
 800d128:	4622      	mov	r2, r4
 800d12a:	462b      	mov	r3, r5
 800d12c:	f7f3 f8b8 	bl	80002a0 <__aeabi_uldivmod>
 800d130:	4602      	mov	r2, r0
 800d132:	460b      	mov	r3, r1
 800d134:	4613      	mov	r3, r2
 800d136:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d138:	69bb      	ldr	r3, [r7, #24]
 800d13a:	1d1a      	adds	r2, r3, #4
 800d13c:	61ba      	str	r2, [r7, #24]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d101      	bne.n	800d14c <clmt_clust+0x5e>
 800d148:	2300      	movs	r3, #0
 800d14a:	e010      	b.n	800d16e <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800d14c:	69fa      	ldr	r2, [r7, #28]
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	429a      	cmp	r2, r3
 800d152:	d307      	bcc.n	800d164 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800d154:	69fa      	ldr	r2, [r7, #28]
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	1ad3      	subs	r3, r2, r3
 800d15a:	61fb      	str	r3, [r7, #28]
 800d15c:	69bb      	ldr	r3, [r7, #24]
 800d15e:	3304      	adds	r3, #4
 800d160:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d162:	e7e9      	b.n	800d138 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800d164:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	69fb      	ldr	r3, [r7, #28]
 800d16c:	4413      	add	r3, r2
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3720      	adds	r7, #32
 800d172:	46bd      	mov	sp, r7
 800d174:	bdb0      	pop	{r4, r5, r7, pc}

0800d176 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d176:	b580      	push	{r7, lr}
 800d178:	b086      	sub	sp, #24
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	6078      	str	r0, [r7, #4]
 800d17e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	2b04      	cmp	r3, #4
 800d18c:	d102      	bne.n	800d194 <dir_sdi+0x1e>
 800d18e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d192:	e001      	b.n	800d198 <dir_sdi+0x22>
 800d194:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d904      	bls.n	800d1a8 <dir_sdi+0x32>
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	f003 031f 	and.w	r3, r3, #31
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d001      	beq.n	800d1ac <dir_sdi+0x36>
		return FR_INT_ERR;
 800d1a8:	2302      	movs	r3, #2
 800d1aa:	e066      	b.n	800d27a <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	683a      	ldr	r2, [r7, #0]
 800d1b0:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	689b      	ldr	r3, [r3, #8]
 800d1b6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d109      	bne.n	800d1d2 <dir_sdi+0x5c>
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	2b02      	cmp	r3, #2
 800d1c4:	d905      	bls.n	800d1d2 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ca:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d10c      	bne.n	800d1f2 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	095b      	lsrs	r3, r3, #5
 800d1dc:	693a      	ldr	r2, [r7, #16]
 800d1de:	8912      	ldrh	r2, [r2, #8]
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d301      	bcc.n	800d1e8 <dir_sdi+0x72>
 800d1e4:	2302      	movs	r3, #2
 800d1e6:	e048      	b.n	800d27a <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	639a      	str	r2, [r3, #56]	; 0x38
 800d1f0:	e029      	b.n	800d246 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	895b      	ldrh	r3, [r3, #10]
 800d1f6:	025b      	lsls	r3, r3, #9
 800d1f8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d1fa:	e019      	b.n	800d230 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6979      	ldr	r1, [r7, #20]
 800d200:	4618      	mov	r0, r3
 800d202:	f7ff fa6f 	bl	800c6e4 <get_fat>
 800d206:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d20e:	d101      	bne.n	800d214 <dir_sdi+0x9e>
 800d210:	2301      	movs	r3, #1
 800d212:	e032      	b.n	800d27a <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	2b01      	cmp	r3, #1
 800d218:	d904      	bls.n	800d224 <dir_sdi+0xae>
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	69db      	ldr	r3, [r3, #28]
 800d21e:	697a      	ldr	r2, [r7, #20]
 800d220:	429a      	cmp	r2, r3
 800d222:	d301      	bcc.n	800d228 <dir_sdi+0xb2>
 800d224:	2302      	movs	r3, #2
 800d226:	e028      	b.n	800d27a <dir_sdi+0x104>
			ofs -= csz;
 800d228:	683a      	ldr	r2, [r7, #0]
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	1ad3      	subs	r3, r2, r3
 800d22e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d230:	683a      	ldr	r2, [r7, #0]
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	429a      	cmp	r2, r3
 800d236:	d2e1      	bcs.n	800d1fc <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800d238:	6979      	ldr	r1, [r7, #20]
 800d23a:	6938      	ldr	r0, [r7, #16]
 800d23c:	f7ff fa32 	bl	800c6a4 <clust2sect>
 800d240:	4602      	mov	r2, r0
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	697a      	ldr	r2, [r7, #20]
 800d24a:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d250:	2b00      	cmp	r3, #0
 800d252:	d101      	bne.n	800d258 <dir_sdi+0xe2>
 800d254:	2302      	movs	r3, #2
 800d256:	e010      	b.n	800d27a <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	0a5b      	lsrs	r3, r3, #9
 800d260:	441a      	add	r2, r3
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d272:	441a      	add	r2, r3
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800d278:	2300      	movs	r3, #0
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3718      	adds	r7, #24
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}

0800d282 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d282:	b580      	push	{r7, lr}
 800d284:	b086      	sub	sp, #24
 800d286:	af00      	add	r7, sp, #0
 800d288:	6078      	str	r0, [r7, #4]
 800d28a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d296:	3320      	adds	r3, #32
 800d298:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d00b      	beq.n	800d2ba <dir_next+0x38>
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	2b04      	cmp	r3, #4
 800d2a8:	d102      	bne.n	800d2b0 <dir_next+0x2e>
 800d2aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2ae:	e001      	b.n	800d2b4 <dir_next+0x32>
 800d2b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d801      	bhi.n	800d2be <dir_next+0x3c>
 800d2ba:	2304      	movs	r3, #4
 800d2bc:	e0b2      	b.n	800d424 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	f040 80a0 	bne.w	800d40a <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ce:	1c5a      	adds	r2, r3, #1
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d10b      	bne.n	800d2f4 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	095b      	lsrs	r3, r3, #5
 800d2e0:	68fa      	ldr	r2, [r7, #12]
 800d2e2:	8912      	ldrh	r2, [r2, #8]
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	f0c0 8090 	bcc.w	800d40a <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	639a      	str	r2, [r3, #56]	; 0x38
 800d2f0:	2304      	movs	r3, #4
 800d2f2:	e097      	b.n	800d424 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	0a5b      	lsrs	r3, r3, #9
 800d2f8:	68fa      	ldr	r2, [r7, #12]
 800d2fa:	8952      	ldrh	r2, [r2, #10]
 800d2fc:	3a01      	subs	r2, #1
 800d2fe:	4013      	ands	r3, r2
 800d300:	2b00      	cmp	r3, #0
 800d302:	f040 8082 	bne.w	800d40a <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d30c:	4619      	mov	r1, r3
 800d30e:	4610      	mov	r0, r2
 800d310:	f7ff f9e8 	bl	800c6e4 <get_fat>
 800d314:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d801      	bhi.n	800d320 <dir_next+0x9e>
 800d31c:	2302      	movs	r3, #2
 800d31e:	e081      	b.n	800d424 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d326:	d101      	bne.n	800d32c <dir_next+0xaa>
 800d328:	2301      	movs	r3, #1
 800d32a:	e07b      	b.n	800d424 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	69db      	ldr	r3, [r3, #28]
 800d330:	697a      	ldr	r2, [r7, #20]
 800d332:	429a      	cmp	r2, r3
 800d334:	d35f      	bcc.n	800d3f6 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d104      	bne.n	800d346 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	639a      	str	r2, [r3, #56]	; 0x38
 800d342:	2304      	movs	r3, #4
 800d344:	e06e      	b.n	800d424 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d346:	687a      	ldr	r2, [r7, #4]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d34c:	4619      	mov	r1, r3
 800d34e:	4610      	mov	r0, r2
 800d350:	f7ff fdcc 	bl	800ceec <create_chain>
 800d354:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d101      	bne.n	800d360 <dir_next+0xde>
 800d35c:	2307      	movs	r3, #7
 800d35e:	e061      	b.n	800d424 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	2b01      	cmp	r3, #1
 800d364:	d101      	bne.n	800d36a <dir_next+0xe8>
 800d366:	2302      	movs	r3, #2
 800d368:	e05c      	b.n	800d424 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d370:	d101      	bne.n	800d376 <dir_next+0xf4>
 800d372:	2301      	movs	r3, #1
 800d374:	e056      	b.n	800d424 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	79db      	ldrb	r3, [r3, #7]
 800d37a:	f043 0304 	orr.w	r3, r3, #4
 800d37e:	b2da      	uxtb	r2, r3
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d384:	68f8      	ldr	r0, [r7, #12]
 800d386:	f7ff f8ad 	bl	800c4e4 <sync_window>
 800d38a:	4603      	mov	r3, r0
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d001      	beq.n	800d394 <dir_next+0x112>
 800d390:	2301      	movs	r3, #1
 800d392:	e047      	b.n	800d424 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	3338      	adds	r3, #56	; 0x38
 800d398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d39c:	2100      	movs	r1, #0
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f7fe fed6 	bl	800c150 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	613b      	str	r3, [r7, #16]
 800d3a8:	6979      	ldr	r1, [r7, #20]
 800d3aa:	68f8      	ldr	r0, [r7, #12]
 800d3ac:	f7ff f97a 	bl	800c6a4 <clust2sect>
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	635a      	str	r2, [r3, #52]	; 0x34
 800d3b6:	e012      	b.n	800d3de <dir_next+0x15c>
						fs->wflag = 1;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d3be:	68f8      	ldr	r0, [r7, #12]
 800d3c0:	f7ff f890 	bl	800c4e4 <sync_window>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d001      	beq.n	800d3ce <dir_next+0x14c>
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	e02a      	b.n	800d424 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	613b      	str	r3, [r7, #16]
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3d8:	1c5a      	adds	r2, r3, #1
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	635a      	str	r2, [r3, #52]	; 0x34
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	895b      	ldrh	r3, [r3, #10]
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d3e6      	bcc.n	800d3b8 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	1ad2      	subs	r2, r2, r3
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	697a      	ldr	r2, [r7, #20]
 800d3fa:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800d3fc:	6979      	ldr	r1, [r7, #20]
 800d3fe:	68f8      	ldr	r0, [r7, #12]
 800d400:	f7ff f950 	bl	800c6a4 <clust2sect>
 800d404:	4602      	mov	r2, r0
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	68ba      	ldr	r2, [r7, #8]
 800d40e:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d41c:	441a      	add	r2, r3
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800d422:	2300      	movs	r3, #0
}
 800d424:	4618      	mov	r0, r3
 800d426:	3718      	adds	r7, #24
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b086      	sub	sp, #24
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d43c:	2100      	movs	r1, #0
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f7ff fe99 	bl	800d176 <dir_sdi>
 800d444:	4603      	mov	r3, r0
 800d446:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d448:	7dfb      	ldrb	r3, [r7, #23]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d140      	bne.n	800d4d0 <dir_alloc+0xa4>
		n = 0;
 800d44e:	2300      	movs	r3, #0
 800d450:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d456:	4619      	mov	r1, r3
 800d458:	68f8      	ldr	r0, [r7, #12]
 800d45a:	f7ff f887 	bl	800c56c <move_window>
 800d45e:	4603      	mov	r3, r0
 800d460:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d462:	7dfb      	ldrb	r3, [r7, #23]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d132      	bne.n	800d4ce <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	2b04      	cmp	r3, #4
 800d46e:	d108      	bne.n	800d482 <dir_alloc+0x56>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	b25b      	sxtb	r3, r3
 800d478:	43db      	mvns	r3, r3
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	09db      	lsrs	r3, r3, #7
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	e00f      	b.n	800d4a2 <dir_alloc+0x76>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	2be5      	cmp	r3, #229	; 0xe5
 800d48a:	d004      	beq.n	800d496 <dir_alloc+0x6a>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d101      	bne.n	800d49a <dir_alloc+0x6e>
 800d496:	2301      	movs	r3, #1
 800d498:	e000      	b.n	800d49c <dir_alloc+0x70>
 800d49a:	2300      	movs	r3, #0
 800d49c:	f003 0301 	and.w	r3, r3, #1
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d007      	beq.n	800d4b6 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	613b      	str	r3, [r7, #16]
 800d4ac:	693a      	ldr	r2, [r7, #16]
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d102      	bne.n	800d4ba <dir_alloc+0x8e>
 800d4b4:	e00c      	b.n	800d4d0 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d4ba:	2101      	movs	r1, #1
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f7ff fee0 	bl	800d282 <dir_next>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d4c6:	7dfb      	ldrb	r3, [r7, #23]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d0c2      	beq.n	800d452 <dir_alloc+0x26>
 800d4cc:	e000      	b.n	800d4d0 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800d4ce:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d4d0:	7dfb      	ldrb	r3, [r7, #23]
 800d4d2:	2b04      	cmp	r3, #4
 800d4d4:	d101      	bne.n	800d4da <dir_alloc+0xae>
 800d4d6:	2307      	movs	r3, #7
 800d4d8:	75fb      	strb	r3, [r7, #23]
	return res;
 800d4da:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3718      	adds	r7, #24
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	331a      	adds	r3, #26
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7fe fc26 	bl	800bd44 <ld_word>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	2b03      	cmp	r3, #3
 800d502:	d109      	bne.n	800d518 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	3314      	adds	r3, #20
 800d508:	4618      	mov	r0, r3
 800d50a:	f7fe fc1b 	bl	800bd44 <ld_word>
 800d50e:	4603      	mov	r3, r0
 800d510:	041b      	lsls	r3, r3, #16
 800d512:	68fa      	ldr	r2, [r7, #12]
 800d514:	4313      	orrs	r3, r2
 800d516:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d518:	68fb      	ldr	r3, [r7, #12]
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3710      	adds	r7, #16
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}

0800d522 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d522:	b580      	push	{r7, lr}
 800d524:	b084      	sub	sp, #16
 800d526:	af00      	add	r7, sp, #0
 800d528:	60f8      	str	r0, [r7, #12]
 800d52a:	60b9      	str	r1, [r7, #8]
 800d52c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	331a      	adds	r3, #26
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	b292      	uxth	r2, r2
 800d536:	4611      	mov	r1, r2
 800d538:	4618      	mov	r0, r3
 800d53a:	f7fe fd19 	bl	800bf70 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	2b03      	cmp	r3, #3
 800d544:	d109      	bne.n	800d55a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	f103 0214 	add.w	r2, r3, #20
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	0c1b      	lsrs	r3, r3, #16
 800d550:	b29b      	uxth	r3, r3
 800d552:	4619      	mov	r1, r3
 800d554:	4610      	mov	r0, r2
 800d556:	f7fe fd0b 	bl	800bf70 <st_word>
	}
}
 800d55a:	bf00      	nop
 800d55c:	3710      	adds	r7, #16
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
	...

0800d564 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d564:	b590      	push	{r4, r7, lr}
 800d566:	b087      	sub	sp, #28
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	331a      	adds	r3, #26
 800d572:	4618      	mov	r0, r3
 800d574:	f7fe fbe6 	bl	800bd44 <ld_word>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d001      	beq.n	800d582 <cmp_lfn+0x1e>
 800d57e:	2300      	movs	r3, #0
 800d580:	e059      	b.n	800d636 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d58a:	1e5a      	subs	r2, r3, #1
 800d58c:	4613      	mov	r3, r2
 800d58e:	005b      	lsls	r3, r3, #1
 800d590:	4413      	add	r3, r2
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	4413      	add	r3, r2
 800d596:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d598:	2301      	movs	r3, #1
 800d59a:	81fb      	strh	r3, [r7, #14]
 800d59c:	2300      	movs	r3, #0
 800d59e:	613b      	str	r3, [r7, #16]
 800d5a0:	e033      	b.n	800d60a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d5a2:	4a27      	ldr	r2, [pc, #156]	; (800d640 <cmp_lfn+0xdc>)
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	4413      	add	r3, r2
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	4413      	add	r3, r2
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7fe fbc7 	bl	800bd44 <ld_word>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d5ba:	89fb      	ldrh	r3, [r7, #14]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d01a      	beq.n	800d5f6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	2bfe      	cmp	r3, #254	; 0xfe
 800d5c4:	d812      	bhi.n	800d5ec <cmp_lfn+0x88>
 800d5c6:	89bb      	ldrh	r3, [r7, #12]
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f003 f96f 	bl	80108ac <ff_wtoupper>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	461c      	mov	r4, r3
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	1c5a      	adds	r2, r3, #1
 800d5d6:	617a      	str	r2, [r7, #20]
 800d5d8:	005b      	lsls	r3, r3, #1
 800d5da:	687a      	ldr	r2, [r7, #4]
 800d5dc:	4413      	add	r3, r2
 800d5de:	881b      	ldrh	r3, [r3, #0]
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f003 f963 	bl	80108ac <ff_wtoupper>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	429c      	cmp	r4, r3
 800d5ea:	d001      	beq.n	800d5f0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	e022      	b.n	800d636 <cmp_lfn+0xd2>
			}
			wc = uc;
 800d5f0:	89bb      	ldrh	r3, [r7, #12]
 800d5f2:	81fb      	strh	r3, [r7, #14]
 800d5f4:	e006      	b.n	800d604 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d5f6:	89bb      	ldrh	r3, [r7, #12]
 800d5f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	d001      	beq.n	800d604 <cmp_lfn+0xa0>
 800d600:	2300      	movs	r3, #0
 800d602:	e018      	b.n	800d636 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	3301      	adds	r3, #1
 800d608:	613b      	str	r3, [r7, #16]
 800d60a:	693b      	ldr	r3, [r7, #16]
 800d60c:	2b0c      	cmp	r3, #12
 800d60e:	d9c8      	bls.n	800d5a2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d00b      	beq.n	800d634 <cmp_lfn+0xd0>
 800d61c:	89fb      	ldrh	r3, [r7, #14]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d008      	beq.n	800d634 <cmp_lfn+0xd0>
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	005b      	lsls	r3, r3, #1
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	4413      	add	r3, r2
 800d62a:	881b      	ldrh	r3, [r3, #0]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d001      	beq.n	800d634 <cmp_lfn+0xd0>
 800d630:	2300      	movs	r3, #0
 800d632:	e000      	b.n	800d636 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d634:	2301      	movs	r3, #1
}
 800d636:	4618      	mov	r0, r3
 800d638:	371c      	adds	r7, #28
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd90      	pop	{r4, r7, pc}
 800d63e:	bf00      	nop
 800d640:	08014f80 	.word	0x08014f80

0800d644 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b086      	sub	sp, #24
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	331a      	adds	r3, #26
 800d652:	4618      	mov	r0, r3
 800d654:	f7fe fb76 	bl	800bd44 <ld_word>
 800d658:	4603      	mov	r3, r0
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d001      	beq.n	800d662 <pick_lfn+0x1e>
 800d65e:	2300      	movs	r3, #0
 800d660:	e04d      	b.n	800d6fe <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d66a:	1e5a      	subs	r2, r3, #1
 800d66c:	4613      	mov	r3, r2
 800d66e:	005b      	lsls	r3, r3, #1
 800d670:	4413      	add	r3, r2
 800d672:	009b      	lsls	r3, r3, #2
 800d674:	4413      	add	r3, r2
 800d676:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d678:	2301      	movs	r3, #1
 800d67a:	81fb      	strh	r3, [r7, #14]
 800d67c:	2300      	movs	r3, #0
 800d67e:	613b      	str	r3, [r7, #16]
 800d680:	e028      	b.n	800d6d4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d682:	4a21      	ldr	r2, [pc, #132]	; (800d708 <pick_lfn+0xc4>)
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	4413      	add	r3, r2
 800d688:	781b      	ldrb	r3, [r3, #0]
 800d68a:	461a      	mov	r2, r3
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	4413      	add	r3, r2
 800d690:	4618      	mov	r0, r3
 800d692:	f7fe fb57 	bl	800bd44 <ld_word>
 800d696:	4603      	mov	r3, r0
 800d698:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d69a:	89fb      	ldrh	r3, [r7, #14]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d00f      	beq.n	800d6c0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	2bfe      	cmp	r3, #254	; 0xfe
 800d6a4:	d901      	bls.n	800d6aa <pick_lfn+0x66>
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	e029      	b.n	800d6fe <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d6aa:	89bb      	ldrh	r3, [r7, #12]
 800d6ac:	81fb      	strh	r3, [r7, #14]
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	1c5a      	adds	r2, r3, #1
 800d6b2:	617a      	str	r2, [r7, #20]
 800d6b4:	005b      	lsls	r3, r3, #1
 800d6b6:	687a      	ldr	r2, [r7, #4]
 800d6b8:	4413      	add	r3, r2
 800d6ba:	89fa      	ldrh	r2, [r7, #14]
 800d6bc:	801a      	strh	r2, [r3, #0]
 800d6be:	e006      	b.n	800d6ce <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d6c0:	89bb      	ldrh	r3, [r7, #12]
 800d6c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d001      	beq.n	800d6ce <pick_lfn+0x8a>
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	e017      	b.n	800d6fe <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	3301      	adds	r3, #1
 800d6d2:	613b      	str	r3, [r7, #16]
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	2b0c      	cmp	r3, #12
 800d6d8:	d9d3      	bls.n	800d682 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d00a      	beq.n	800d6fc <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	2bfe      	cmp	r3, #254	; 0xfe
 800d6ea:	d901      	bls.n	800d6f0 <pick_lfn+0xac>
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	e006      	b.n	800d6fe <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	005b      	lsls	r3, r3, #1
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	4413      	add	r3, r2
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800d6fc:	2301      	movs	r3, #1
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3718      	adds	r7, #24
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	08014f80 	.word	0x08014f80

0800d70c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b088      	sub	sp, #32
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	4611      	mov	r1, r2
 800d718:	461a      	mov	r2, r3
 800d71a:	460b      	mov	r3, r1
 800d71c:	71fb      	strb	r3, [r7, #7]
 800d71e:	4613      	mov	r3, r2
 800d720:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	330d      	adds	r3, #13
 800d726:	79ba      	ldrb	r2, [r7, #6]
 800d728:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	330b      	adds	r3, #11
 800d72e:	220f      	movs	r2, #15
 800d730:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	330c      	adds	r3, #12
 800d736:	2200      	movs	r2, #0
 800d738:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	331a      	adds	r3, #26
 800d73e:	2100      	movs	r1, #0
 800d740:	4618      	mov	r0, r3
 800d742:	f7fe fc15 	bl	800bf70 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d746:	79fb      	ldrb	r3, [r7, #7]
 800d748:	1e5a      	subs	r2, r3, #1
 800d74a:	4613      	mov	r3, r2
 800d74c:	005b      	lsls	r3, r3, #1
 800d74e:	4413      	add	r3, r2
 800d750:	009b      	lsls	r3, r3, #2
 800d752:	4413      	add	r3, r2
 800d754:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d756:	2300      	movs	r3, #0
 800d758:	82fb      	strh	r3, [r7, #22]
 800d75a:	2300      	movs	r3, #0
 800d75c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d75e:	8afb      	ldrh	r3, [r7, #22]
 800d760:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d764:	4293      	cmp	r3, r2
 800d766:	d007      	beq.n	800d778 <put_lfn+0x6c>
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	1c5a      	adds	r2, r3, #1
 800d76c:	61fa      	str	r2, [r7, #28]
 800d76e:	005b      	lsls	r3, r3, #1
 800d770:	68fa      	ldr	r2, [r7, #12]
 800d772:	4413      	add	r3, r2
 800d774:	881b      	ldrh	r3, [r3, #0]
 800d776:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d778:	4a17      	ldr	r2, [pc, #92]	; (800d7d8 <put_lfn+0xcc>)
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	4413      	add	r3, r2
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	461a      	mov	r2, r3
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	4413      	add	r3, r2
 800d786:	8afa      	ldrh	r2, [r7, #22]
 800d788:	4611      	mov	r1, r2
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7fe fbf0 	bl	800bf70 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d790:	8afb      	ldrh	r3, [r7, #22]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d102      	bne.n	800d79c <put_lfn+0x90>
 800d796:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d79a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d79c:	69bb      	ldr	r3, [r7, #24]
 800d79e:	3301      	adds	r3, #1
 800d7a0:	61bb      	str	r3, [r7, #24]
 800d7a2:	69bb      	ldr	r3, [r7, #24]
 800d7a4:	2b0c      	cmp	r3, #12
 800d7a6:	d9da      	bls.n	800d75e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d7a8:	8afb      	ldrh	r3, [r7, #22]
 800d7aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d006      	beq.n	800d7c0 <put_lfn+0xb4>
 800d7b2:	69fb      	ldr	r3, [r7, #28]
 800d7b4:	005b      	lsls	r3, r3, #1
 800d7b6:	68fa      	ldr	r2, [r7, #12]
 800d7b8:	4413      	add	r3, r2
 800d7ba:	881b      	ldrh	r3, [r3, #0]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d103      	bne.n	800d7c8 <put_lfn+0xbc>
 800d7c0:	79fb      	ldrb	r3, [r7, #7]
 800d7c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7c6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	79fa      	ldrb	r2, [r7, #7]
 800d7cc:	701a      	strb	r2, [r3, #0]
}
 800d7ce:	bf00      	nop
 800d7d0:	3720      	adds	r7, #32
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	08014f80 	.word	0x08014f80

0800d7dc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b08c      	sub	sp, #48	; 0x30
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	607a      	str	r2, [r7, #4]
 800d7e8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d7ea:	220b      	movs	r2, #11
 800d7ec:	68b9      	ldr	r1, [r7, #8]
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	f7fe fc8d 	bl	800c10e <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	2b05      	cmp	r3, #5
 800d7f8:	d92b      	bls.n	800d852 <gen_numname+0x76>
		sr = seq;
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d7fe:	e022      	b.n	800d846 <gen_numname+0x6a>
			wc = *lfn++;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	1c9a      	adds	r2, r3, #2
 800d804:	607a      	str	r2, [r7, #4]
 800d806:	881b      	ldrh	r3, [r3, #0]
 800d808:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d80a:	2300      	movs	r3, #0
 800d80c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d80e:	e017      	b.n	800d840 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d810:	69fb      	ldr	r3, [r7, #28]
 800d812:	005a      	lsls	r2, r3, #1
 800d814:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d816:	f003 0301 	and.w	r3, r3, #1
 800d81a:	4413      	add	r3, r2
 800d81c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d81e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d820:	085b      	lsrs	r3, r3, #1
 800d822:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d824:	69fb      	ldr	r3, [r7, #28]
 800d826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d005      	beq.n	800d83a <gen_numname+0x5e>
 800d82e:	69fb      	ldr	r3, [r7, #28]
 800d830:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d834:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d838:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83c:	3301      	adds	r3, #1
 800d83e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d842:	2b0f      	cmp	r3, #15
 800d844:	d9e4      	bls.n	800d810 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	881b      	ldrh	r3, [r3, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d1d8      	bne.n	800d800 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d84e:	69fb      	ldr	r3, [r7, #28]
 800d850:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d852:	2307      	movs	r3, #7
 800d854:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	f003 030f 	and.w	r3, r3, #15
 800d85e:	b2db      	uxtb	r3, r3
 800d860:	3330      	adds	r3, #48	; 0x30
 800d862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d866:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d86a:	2b39      	cmp	r3, #57	; 0x39
 800d86c:	d904      	bls.n	800d878 <gen_numname+0x9c>
 800d86e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d872:	3307      	adds	r3, #7
 800d874:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d87a:	1e5a      	subs	r2, r3, #1
 800d87c:	62ba      	str	r2, [r7, #40]	; 0x28
 800d87e:	3330      	adds	r3, #48	; 0x30
 800d880:	443b      	add	r3, r7
 800d882:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d886:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	091b      	lsrs	r3, r3, #4
 800d88e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d1df      	bne.n	800d856 <gen_numname+0x7a>
	ns[i] = '~';
 800d896:	f107 0214 	add.w	r2, r7, #20
 800d89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d89c:	4413      	add	r3, r2
 800d89e:	227e      	movs	r2, #126	; 0x7e
 800d8a0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	627b      	str	r3, [r7, #36]	; 0x24
 800d8a6:	e002      	b.n	800d8ae <gen_numname+0xd2>
 800d8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	627b      	str	r3, [r7, #36]	; 0x24
 800d8ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d205      	bcs.n	800d8c2 <gen_numname+0xe6>
 800d8b6:	68fa      	ldr	r2, [r7, #12]
 800d8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ba:	4413      	add	r3, r2
 800d8bc:	781b      	ldrb	r3, [r3, #0]
 800d8be:	2b20      	cmp	r3, #32
 800d8c0:	d1f2      	bne.n	800d8a8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c4:	2b07      	cmp	r3, #7
 800d8c6:	d807      	bhi.n	800d8d8 <gen_numname+0xfc>
 800d8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ca:	1c5a      	adds	r2, r3, #1
 800d8cc:	62ba      	str	r2, [r7, #40]	; 0x28
 800d8ce:	3330      	adds	r3, #48	; 0x30
 800d8d0:	443b      	add	r3, r7
 800d8d2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d8d6:	e000      	b.n	800d8da <gen_numname+0xfe>
 800d8d8:	2120      	movs	r1, #32
 800d8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8dc:	1c5a      	adds	r2, r3, #1
 800d8de:	627a      	str	r2, [r7, #36]	; 0x24
 800d8e0:	68fa      	ldr	r2, [r7, #12]
 800d8e2:	4413      	add	r3, r2
 800d8e4:	460a      	mov	r2, r1
 800d8e6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ea:	2b07      	cmp	r3, #7
 800d8ec:	d9e9      	bls.n	800d8c2 <gen_numname+0xe6>
}
 800d8ee:	bf00      	nop
 800d8f0:	bf00      	nop
 800d8f2:	3730      	adds	r7, #48	; 0x30
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b085      	sub	sp, #20
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d900:	2300      	movs	r3, #0
 800d902:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d904:	230b      	movs	r3, #11
 800d906:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d908:	7bfb      	ldrb	r3, [r7, #15]
 800d90a:	b2da      	uxtb	r2, r3
 800d90c:	0852      	lsrs	r2, r2, #1
 800d90e:	01db      	lsls	r3, r3, #7
 800d910:	4313      	orrs	r3, r2
 800d912:	b2da      	uxtb	r2, r3
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	1c59      	adds	r1, r3, #1
 800d918:	6079      	str	r1, [r7, #4]
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	4413      	add	r3, r2
 800d91e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	3b01      	subs	r3, #1
 800d924:	60bb      	str	r3, [r7, #8]
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d1ed      	bne.n	800d908 <sum_sfn+0x10>
	return sum;
 800d92c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3714      	adds	r7, #20
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr

0800d93a <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800d93a:	b480      	push	{r7}
 800d93c:	b087      	sub	sp, #28
 800d93e:	af00      	add	r7, sp, #0
 800d940:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	3301      	adds	r3, #1
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	3301      	adds	r3, #1
 800d94a:	015b      	lsls	r3, r3, #5
 800d94c:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800d94e:	2300      	movs	r3, #0
 800d950:	827b      	strh	r3, [r7, #18]
 800d952:	2300      	movs	r3, #0
 800d954:	617b      	str	r3, [r7, #20]
 800d956:	e018      	b.n	800d98a <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	2b02      	cmp	r3, #2
 800d95c:	d103      	bne.n	800d966 <xdir_sum+0x2c>
			i++;
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	3301      	adds	r3, #1
 800d962:	617b      	str	r3, [r7, #20]
 800d964:	e00e      	b.n	800d984 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800d966:	8a7b      	ldrh	r3, [r7, #18]
 800d968:	03db      	lsls	r3, r3, #15
 800d96a:	b29a      	uxth	r2, r3
 800d96c:	8a7b      	ldrh	r3, [r7, #18]
 800d96e:	085b      	lsrs	r3, r3, #1
 800d970:	b29b      	uxth	r3, r3
 800d972:	4413      	add	r3, r2
 800d974:	b29a      	uxth	r2, r3
 800d976:	6879      	ldr	r1, [r7, #4]
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	440b      	add	r3, r1
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	b29b      	uxth	r3, r3
 800d980:	4413      	add	r3, r2
 800d982:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	3301      	adds	r3, #1
 800d988:	617b      	str	r3, [r7, #20]
 800d98a:	697a      	ldr	r2, [r7, #20]
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	429a      	cmp	r2, r3
 800d990:	d3e2      	bcc.n	800d958 <xdir_sum+0x1e>
		}
	}
	return sum;
 800d992:	8a7b      	ldrh	r3, [r7, #18]
}
 800d994:	4618      	mov	r0, r3
 800d996:	371c      	adds	r7, #28
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr

0800d9a0 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b084      	sub	sp, #16
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800d9ac:	e01f      	b.n	800d9ee <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800d9ae:	89bb      	ldrh	r3, [r7, #12]
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f002 ff7b 	bl	80108ac <ff_wtoupper>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800d9ba:	89fb      	ldrh	r3, [r7, #14]
 800d9bc:	03db      	lsls	r3, r3, #15
 800d9be:	b29a      	uxth	r2, r3
 800d9c0:	89fb      	ldrh	r3, [r7, #14]
 800d9c2:	085b      	lsrs	r3, r3, #1
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	4413      	add	r3, r2
 800d9c8:	b29a      	uxth	r2, r3
 800d9ca:	89bb      	ldrh	r3, [r7, #12]
 800d9cc:	b2db      	uxtb	r3, r3
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	4413      	add	r3, r2
 800d9d2:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800d9d4:	89fb      	ldrh	r3, [r7, #14]
 800d9d6:	03db      	lsls	r3, r3, #15
 800d9d8:	b29a      	uxth	r2, r3
 800d9da:	89fb      	ldrh	r3, [r7, #14]
 800d9dc:	085b      	lsrs	r3, r3, #1
 800d9de:	b29b      	uxth	r3, r3
 800d9e0:	4413      	add	r3, r2
 800d9e2:	b29a      	uxth	r2, r3
 800d9e4:	89bb      	ldrh	r3, [r7, #12]
 800d9e6:	0a1b      	lsrs	r3, r3, #8
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	4413      	add	r3, r2
 800d9ec:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	1c9a      	adds	r2, r3, #2
 800d9f2:	607a      	str	r2, [r7, #4]
 800d9f4:	881b      	ldrh	r3, [r3, #0]
 800d9f6:	81bb      	strh	r3, [r7, #12]
 800d9f8:	89bb      	ldrh	r3, [r7, #12]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d1d7      	bne.n	800d9ae <xname_sum+0xe>
	}
	return sum;
 800d9fe:	89fb      	ldrh	r3, [r7, #14]
}
 800da00:	4618      	mov	r0, r3
 800da02:	3710      	adds	r7, #16
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800da08:	b590      	push	{r4, r7, lr}
 800da0a:	b087      	sub	sp, #28
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	691b      	ldr	r3, [r3, #16]
 800da16:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681a      	ldr	r2, [r3, #0]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da20:	4619      	mov	r1, r3
 800da22:	4610      	mov	r0, r2
 800da24:	f7fe fda2 	bl	800c56c <move_window>
 800da28:	4603      	mov	r3, r0
 800da2a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800da2c:	7bfb      	ldrb	r3, [r7, #15]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d001      	beq.n	800da36 <load_xdir+0x2e>
 800da32:	7bfb      	ldrb	r3, [r7, #15]
 800da34:	e09f      	b.n	800db76 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	2b85      	cmp	r3, #133	; 0x85
 800da3e:	d001      	beq.n	800da44 <load_xdir+0x3c>
 800da40:	2302      	movs	r3, #2
 800da42:	e098      	b.n	800db76 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da48:	2220      	movs	r2, #32
 800da4a:	4619      	mov	r1, r3
 800da4c:	6938      	ldr	r0, [r7, #16]
 800da4e:	f7fe fb5e 	bl	800c10e <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	3301      	adds	r3, #1
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	3301      	adds	r3, #1
 800da5a:	015b      	lsls	r3, r3, #5
 800da5c:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	2b5f      	cmp	r3, #95	; 0x5f
 800da62:	d903      	bls.n	800da6c <load_xdir+0x64>
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800da6a:	d901      	bls.n	800da70 <load_xdir+0x68>
 800da6c:	2302      	movs	r3, #2
 800da6e:	e082      	b.n	800db76 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800da70:	2100      	movs	r1, #0
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f7ff fc05 	bl	800d282 <dir_next>
 800da78:	4603      	mov	r3, r0
 800da7a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800da7c:	7bfb      	ldrb	r3, [r7, #15]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d001      	beq.n	800da86 <load_xdir+0x7e>
 800da82:	7bfb      	ldrb	r3, [r7, #15]
 800da84:	e077      	b.n	800db76 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681a      	ldr	r2, [r3, #0]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da8e:	4619      	mov	r1, r3
 800da90:	4610      	mov	r0, r2
 800da92:	f7fe fd6b 	bl	800c56c <move_window>
 800da96:	4603      	mov	r3, r0
 800da98:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800da9a:	7bfb      	ldrb	r3, [r7, #15]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d001      	beq.n	800daa4 <load_xdir+0x9c>
 800daa0:	7bfb      	ldrb	r3, [r7, #15]
 800daa2:	e068      	b.n	800db76 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daa8:	781b      	ldrb	r3, [r3, #0]
 800daaa:	2bc0      	cmp	r3, #192	; 0xc0
 800daac:	d001      	beq.n	800dab2 <load_xdir+0xaa>
 800daae:	2302      	movs	r3, #2
 800dab0:	e061      	b.n	800db76 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	f103 0020 	add.w	r0, r3, #32
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dabc:	2220      	movs	r2, #32
 800dabe:	4619      	mov	r1, r3
 800dac0:	f7fe fb25 	bl	800c10e <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	3323      	adds	r3, #35	; 0x23
 800dac8:	781b      	ldrb	r3, [r3, #0]
 800daca:	332c      	adds	r3, #44	; 0x2c
 800dacc:	4a2c      	ldr	r2, [pc, #176]	; (800db80 <load_xdir+0x178>)
 800dace:	fba2 2303 	umull	r2, r3, r2, r3
 800dad2:	08db      	lsrs	r3, r3, #3
 800dad4:	015b      	lsls	r3, r3, #5
 800dad6:	68ba      	ldr	r2, [r7, #8]
 800dad8:	429a      	cmp	r2, r3
 800dada:	d201      	bcs.n	800dae0 <load_xdir+0xd8>
 800dadc:	2302      	movs	r3, #2
 800dade:	e04a      	b.n	800db76 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800dae0:	2340      	movs	r3, #64	; 0x40
 800dae2:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800dae4:	2100      	movs	r1, #0
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f7ff fbcb 	bl	800d282 <dir_next>
 800daec:	4603      	mov	r3, r0
 800daee:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800daf0:	7bfb      	ldrb	r3, [r7, #15]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d001      	beq.n	800dafa <load_xdir+0xf2>
 800daf6:	7bfb      	ldrb	r3, [r7, #15]
 800daf8:	e03d      	b.n	800db76 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681a      	ldr	r2, [r3, #0]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db02:	4619      	mov	r1, r3
 800db04:	4610      	mov	r0, r2
 800db06:	f7fe fd31 	bl	800c56c <move_window>
 800db0a:	4603      	mov	r3, r0
 800db0c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800db0e:	7bfb      	ldrb	r3, [r7, #15]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d001      	beq.n	800db18 <load_xdir+0x110>
 800db14:	7bfb      	ldrb	r3, [r7, #15]
 800db16:	e02e      	b.n	800db76 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	2bc1      	cmp	r3, #193	; 0xc1
 800db20:	d001      	beq.n	800db26 <load_xdir+0x11e>
 800db22:	2302      	movs	r3, #2
 800db24:	e027      	b.n	800db76 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800db2c:	d208      	bcs.n	800db40 <load_xdir+0x138>
 800db2e:	693a      	ldr	r2, [r7, #16]
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	18d0      	adds	r0, r2, r3
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db38:	2220      	movs	r2, #32
 800db3a:	4619      	mov	r1, r3
 800db3c:	f7fe fae7 	bl	800c10e <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	3320      	adds	r3, #32
 800db44:	617b      	str	r3, [r7, #20]
 800db46:	697a      	ldr	r2, [r7, #20]
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d3ca      	bcc.n	800dae4 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800db54:	d80e      	bhi.n	800db74 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800db56:	6938      	ldr	r0, [r7, #16]
 800db58:	f7ff feef 	bl	800d93a <xdir_sum>
 800db5c:	4603      	mov	r3, r0
 800db5e:	461c      	mov	r4, r3
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	3302      	adds	r3, #2
 800db64:	4618      	mov	r0, r3
 800db66:	f7fe f8ed 	bl	800bd44 <ld_word>
 800db6a:	4603      	mov	r3, r0
 800db6c:	429c      	cmp	r4, r3
 800db6e:	d001      	beq.n	800db74 <load_xdir+0x16c>
 800db70:	2302      	movs	r3, #2
 800db72:	e000      	b.n	800db76 <load_xdir+0x16e>
	}
	return FR_OK;
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	371c      	adds	r7, #28
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd90      	pop	{r4, r7, pc}
 800db7e:	bf00      	nop
 800db80:	88888889 	.word	0x88888889

0800db84 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800db84:	b5b0      	push	{r4, r5, r7, lr}
 800db86:	b084      	sub	sp, #16
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
 800db8c:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800db8e:	6839      	ldr	r1, [r7, #0]
 800db90:	6808      	ldr	r0, [r1, #0]
 800db92:	6879      	ldr	r1, [r7, #4]
 800db94:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800db96:	6839      	ldr	r1, [r7, #0]
 800db98:	6a08      	ldr	r0, [r1, #32]
 800db9a:	6879      	ldr	r1, [r7, #4]
 800db9c:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800db9e:	6839      	ldr	r1, [r7, #0]
 800dba0:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800dba2:	b2c8      	uxtb	r0, r1
 800dba4:	6879      	ldr	r1, [r7, #4]
 800dba6:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800dba8:	6839      	ldr	r1, [r7, #0]
 800dbaa:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800dbac:	2000      	movs	r0, #0
 800dbae:	460c      	mov	r4, r1
 800dbb0:	4605      	mov	r5, r0
 800dbb2:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	6879      	ldr	r1, [r7, #4]
 800dbba:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbca:	4619      	mov	r1, r3
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f7ff fad2 	bl	800d176 <dir_sdi>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dbd6:	7bfb      	ldrb	r3, [r7, #15]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d104      	bne.n	800dbe6 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f7ff ff13 	bl	800da08 <load_xdir>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800dbe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3710      	adds	r7, #16
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bdb0      	pop	{r4, r5, r7, pc}

0800dbf0 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800dbf0:	b590      	push	{r4, r7, lr}
 800dbf2:	b087      	sub	sp, #28
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	691b      	ldr	r3, [r3, #16]
 800dbfe:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	1c9c      	adds	r4, r3, #2
 800dc04:	68f8      	ldr	r0, [r7, #12]
 800dc06:	f7ff fe98 	bl	800d93a <xdir_sum>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	4620      	mov	r0, r4
 800dc10:	f7fe f9ae 	bl	800bf70 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	3301      	adds	r3, #1
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc22:	4619      	mov	r1, r3
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f7ff faa6 	bl	800d176 <dir_sdi>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800dc2e:	e026      	b.n	800dc7e <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681a      	ldr	r2, [r3, #0]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc38:	4619      	mov	r1, r3
 800dc3a:	4610      	mov	r0, r2
 800dc3c:	f7fe fc96 	bl	800c56c <move_window>
 800dc40:	4603      	mov	r3, r0
 800dc42:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dc44:	7dfb      	ldrb	r3, [r7, #23]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d11d      	bne.n	800dc86 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc4e:	2220      	movs	r2, #32
 800dc50:	68f9      	ldr	r1, [r7, #12]
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7fe fa5b 	bl	800c10e <mem_cpy>
		dp->obj.fs->wflag = 1;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	3b01      	subs	r3, #1
 800dc64:	613b      	str	r3, [r7, #16]
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d00e      	beq.n	800dc8a <store_xdir+0x9a>
		dirb += SZDIRE;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	3320      	adds	r3, #32
 800dc70:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800dc72:	2100      	movs	r1, #0
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f7ff fb04 	bl	800d282 <dir_next>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800dc7e:	7dfb      	ldrb	r3, [r7, #23]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d0d5      	beq.n	800dc30 <store_xdir+0x40>
 800dc84:	e002      	b.n	800dc8c <store_xdir+0x9c>
		if (res != FR_OK) break;
 800dc86:	bf00      	nop
 800dc88:	e000      	b.n	800dc8c <store_xdir+0x9c>
		if (--nent == 0) break;
 800dc8a:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800dc8c:	7dfb      	ldrb	r3, [r7, #23]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d002      	beq.n	800dc98 <store_xdir+0xa8>
 800dc92:	7dfb      	ldrb	r3, [r7, #23]
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d101      	bne.n	800dc9c <store_xdir+0xac>
 800dc98:	7dfb      	ldrb	r3, [r7, #23]
 800dc9a:	e000      	b.n	800dc9e <store_xdir+0xae>
 800dc9c:	2302      	movs	r3, #2
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	371c      	adds	r7, #28
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd90      	pop	{r4, r7, pc}

0800dca6 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800dca6:	b590      	push	{r4, r7, lr}
 800dca8:	b085      	sub	sp, #20
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	6078      	str	r0, [r7, #4]
 800dcae:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800dcb0:	2240      	movs	r2, #64	; 0x40
 800dcb2:	2100      	movs	r1, #0
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f7fe fa4b 	bl	800c150 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2285      	movs	r2, #133	; 0x85
 800dcbe:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	3320      	adds	r3, #32
 800dcc4:	22c0      	movs	r2, #192	; 0xc0
 800dcc6:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	72bb      	strb	r3, [r7, #10]
 800dccc:	2301      	movs	r3, #1
 800dcce:	72fb      	strb	r3, [r7, #11]
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	813b      	strh	r3, [r7, #8]
 800dcd4:	2340      	movs	r3, #64	; 0x40
 800dcd6:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	1c5a      	adds	r2, r3, #1
 800dcdc:	60fa      	str	r2, [r7, #12]
 800dcde:	687a      	ldr	r2, [r7, #4]
 800dce0:	4413      	add	r3, r2
 800dce2:	22c1      	movs	r2, #193	; 0xc1
 800dce4:	701a      	strb	r2, [r3, #0]
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	1c5a      	adds	r2, r3, #1
 800dcea:	60fa      	str	r2, [r7, #12]
 800dcec:	687a      	ldr	r2, [r7, #4]
 800dcee:	4413      	add	r3, r2
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800dcf4:	893b      	ldrh	r3, [r7, #8]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d00b      	beq.n	800dd12 <create_xdir+0x6c>
 800dcfa:	7abb      	ldrb	r3, [r7, #10]
 800dcfc:	005b      	lsls	r3, r3, #1
 800dcfe:	683a      	ldr	r2, [r7, #0]
 800dd00:	4413      	add	r3, r2
 800dd02:	881b      	ldrh	r3, [r3, #0]
 800dd04:	813b      	strh	r3, [r7, #8]
 800dd06:	893b      	ldrh	r3, [r7, #8]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d002      	beq.n	800dd12 <create_xdir+0x6c>
 800dd0c:	7abb      	ldrb	r3, [r7, #10]
 800dd0e:	3301      	adds	r3, #1
 800dd10:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	4413      	add	r3, r2
 800dd18:	893a      	ldrh	r2, [r7, #8]
 800dd1a:	4611      	mov	r1, r2
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7fe f927 	bl	800bf70 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	3302      	adds	r3, #2
 800dd26:	60fb      	str	r3, [r7, #12]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f003 031f 	and.w	r3, r3, #31
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d1e0      	bne.n	800dcf4 <create_xdir+0x4e>
		nb++;
 800dd32:	7afb      	ldrb	r3, [r7, #11]
 800dd34:	3301      	adds	r3, #1
 800dd36:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800dd38:	7abb      	ldrb	r3, [r7, #10]
 800dd3a:	005b      	lsls	r3, r3, #1
 800dd3c:	683a      	ldr	r2, [r7, #0]
 800dd3e:	4413      	add	r3, r2
 800dd40:	881b      	ldrh	r3, [r3, #0]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d1c8      	bne.n	800dcd8 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	3323      	adds	r3, #35	; 0x23
 800dd4a:	7aba      	ldrb	r2, [r7, #10]
 800dd4c:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	3301      	adds	r3, #1
 800dd52:	7afa      	ldrb	r2, [r7, #11]
 800dd54:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800dd5c:	6838      	ldr	r0, [r7, #0]
 800dd5e:	f7ff fe1f 	bl	800d9a0 <xname_sum>
 800dd62:	4603      	mov	r3, r0
 800dd64:	4619      	mov	r1, r3
 800dd66:	4620      	mov	r0, r4
 800dd68:	f7fe f902 	bl	800bf70 <st_word>
}
 800dd6c:	bf00      	nop
 800dd6e:	3714      	adds	r7, #20
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd90      	pop	{r4, r7, pc}

0800dd74 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b086      	sub	sp, #24
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800dd7e:	2304      	movs	r3, #4
 800dd80:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800dd88:	23ff      	movs	r3, #255	; 0xff
 800dd8a:	757b      	strb	r3, [r7, #21]
 800dd8c:	23ff      	movs	r3, #255	; 0xff
 800dd8e:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800dd90:	e09f      	b.n	800ded2 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd96:	4619      	mov	r1, r3
 800dd98:	6938      	ldr	r0, [r7, #16]
 800dd9a:	f7fe fbe7 	bl	800c56c <move_window>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dda2:	7dfb      	ldrb	r3, [r7, #23]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	f040 809a 	bne.w	800dede <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800ddb2:	7dbb      	ldrb	r3, [r7, #22]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d102      	bne.n	800ddbe <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ddb8:	2304      	movs	r3, #4
 800ddba:	75fb      	strb	r3, [r7, #23]
 800ddbc:	e096      	b.n	800deec <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	2b04      	cmp	r3, #4
 800ddc4:	d118      	bne.n	800ddf8 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800ddc6:	7dbb      	ldrb	r3, [r7, #22]
 800ddc8:	2b85      	cmp	r3, #133	; 0x85
 800ddca:	d179      	bne.n	800dec0 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f7ff fe17 	bl	800da08 <load_xdir>
 800ddda:	4603      	mov	r3, r0
 800dddc:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800ddde:	7dfb      	ldrb	r3, [r7, #23]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d17e      	bne.n	800dee2 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	691b      	ldr	r3, [r3, #16]
 800dde8:	3304      	adds	r3, #4
 800ddea:	781b      	ldrb	r3, [r3, #0]
 800ddec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ddf0:	b2da      	uxtb	r2, r3
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	719a      	strb	r2, [r3, #6]
					}
					break;
 800ddf6:	e074      	b.n	800dee2 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddfc:	330b      	adds	r3, #11
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de04:	73fb      	strb	r3, [r7, #15]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	7bfa      	ldrb	r2, [r7, #15]
 800de0a:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800de0c:	7dbb      	ldrb	r3, [r7, #22]
 800de0e:	2be5      	cmp	r3, #229	; 0xe5
 800de10:	d00e      	beq.n	800de30 <dir_read+0xbc>
 800de12:	7dbb      	ldrb	r3, [r7, #22]
 800de14:	2b2e      	cmp	r3, #46	; 0x2e
 800de16:	d00b      	beq.n	800de30 <dir_read+0xbc>
 800de18:	7bfb      	ldrb	r3, [r7, #15]
 800de1a:	f023 0320 	bic.w	r3, r3, #32
 800de1e:	2b08      	cmp	r3, #8
 800de20:	bf0c      	ite	eq
 800de22:	2301      	moveq	r3, #1
 800de24:	2300      	movne	r3, #0
 800de26:	b2db      	uxtb	r3, r3
 800de28:	461a      	mov	r2, r3
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d002      	beq.n	800de36 <dir_read+0xc2>
				ord = 0xFF;
 800de30:	23ff      	movs	r3, #255	; 0xff
 800de32:	757b      	strb	r3, [r7, #21]
 800de34:	e044      	b.n	800dec0 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800de36:	7bfb      	ldrb	r3, [r7, #15]
 800de38:	2b0f      	cmp	r3, #15
 800de3a:	d12f      	bne.n	800de9c <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800de3c:	7dbb      	ldrb	r3, [r7, #22]
 800de3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de42:	2b00      	cmp	r3, #0
 800de44:	d00d      	beq.n	800de62 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de4a:	7b5b      	ldrb	r3, [r3, #13]
 800de4c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800de4e:	7dbb      	ldrb	r3, [r7, #22]
 800de50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de54:	75bb      	strb	r3, [r7, #22]
 800de56:	7dbb      	ldrb	r3, [r7, #22]
 800de58:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800de62:	7dba      	ldrb	r2, [r7, #22]
 800de64:	7d7b      	ldrb	r3, [r7, #21]
 800de66:	429a      	cmp	r2, r3
 800de68:	d115      	bne.n	800de96 <dir_read+0x122>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de6e:	330d      	adds	r3, #13
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	7d3a      	ldrb	r2, [r7, #20]
 800de74:	429a      	cmp	r2, r3
 800de76:	d10e      	bne.n	800de96 <dir_read+0x122>
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	68da      	ldr	r2, [r3, #12]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de80:	4619      	mov	r1, r3
 800de82:	4610      	mov	r0, r2
 800de84:	f7ff fbde 	bl	800d644 <pick_lfn>
 800de88:	4603      	mov	r3, r0
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d003      	beq.n	800de96 <dir_read+0x122>
 800de8e:	7d7b      	ldrb	r3, [r7, #21]
 800de90:	3b01      	subs	r3, #1
 800de92:	b2db      	uxtb	r3, r3
 800de94:	e000      	b.n	800de98 <dir_read+0x124>
 800de96:	23ff      	movs	r3, #255	; 0xff
 800de98:	757b      	strb	r3, [r7, #21]
 800de9a:	e011      	b.n	800dec0 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800de9c:	7d7b      	ldrb	r3, [r7, #21]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d109      	bne.n	800deb6 <dir_read+0x142>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7ff fd26 	bl	800d8f8 <sum_sfn>
 800deac:	4603      	mov	r3, r0
 800deae:	461a      	mov	r2, r3
 800deb0:	7d3b      	ldrb	r3, [r7, #20]
 800deb2:	4293      	cmp	r3, r2
 800deb4:	d017      	beq.n	800dee6 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f04f 32ff 	mov.w	r2, #4294967295
 800debc:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800debe:	e012      	b.n	800dee6 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800dec0:	2100      	movs	r1, #0
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f7ff f9dd 	bl	800d282 <dir_next>
 800dec8:	4603      	mov	r3, r0
 800deca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800decc:	7dfb      	ldrb	r3, [r7, #23]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d10b      	bne.n	800deea <dir_read+0x176>
	while (dp->sect) {
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	f47f af5b 	bne.w	800dd92 <dir_read+0x1e>
 800dedc:	e006      	b.n	800deec <dir_read+0x178>
		if (res != FR_OK) break;
 800dede:	bf00      	nop
 800dee0:	e004      	b.n	800deec <dir_read+0x178>
					break;
 800dee2:	bf00      	nop
 800dee4:	e002      	b.n	800deec <dir_read+0x178>
					break;
 800dee6:	bf00      	nop
 800dee8:	e000      	b.n	800deec <dir_read+0x178>
		if (res != FR_OK) break;
 800deea:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800deec:	7dfb      	ldrb	r3, [r7, #23]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d002      	beq.n	800def8 <dir_read+0x184>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2200      	movs	r2, #0
 800def6:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800def8:	7dfb      	ldrb	r3, [r7, #23]
}
 800defa:	4618      	mov	r0, r3
 800defc:	3718      	adds	r7, #24
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}

0800df02 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800df02:	b590      	push	{r4, r7, lr}
 800df04:	b089      	sub	sp, #36	; 0x24
 800df06:	af00      	add	r7, sp, #0
 800df08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800df10:	2100      	movs	r1, #0
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f7ff f92f 	bl	800d176 <dir_sdi>
 800df18:	4603      	mov	r3, r0
 800df1a:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800df1c:	7ffb      	ldrb	r3, [r7, #31]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d001      	beq.n	800df26 <dir_find+0x24>
 800df22:	7ffb      	ldrb	r3, [r7, #31]
 800df24:	e112      	b.n	800e14c <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	2b04      	cmp	r3, #4
 800df2c:	d164      	bne.n	800dff8 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	68db      	ldr	r3, [r3, #12]
 800df32:	4618      	mov	r0, r3
 800df34:	f7ff fd34 	bl	800d9a0 <xname_sum>
 800df38:	4603      	mov	r3, r0
 800df3a:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800df3c:	e04f      	b.n	800dfde <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	691b      	ldr	r3, [r3, #16]
 800df42:	3324      	adds	r3, #36	; 0x24
 800df44:	4618      	mov	r0, r3
 800df46:	f7fd fefd 	bl	800bd44 <ld_word>
 800df4a:	4603      	mov	r3, r0
 800df4c:	461a      	mov	r2, r3
 800df4e:	893b      	ldrh	r3, [r7, #8]
 800df50:	4293      	cmp	r3, r2
 800df52:	d000      	beq.n	800df56 <dir_find+0x54>
 800df54:	e043      	b.n	800dfde <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	691b      	ldr	r3, [r3, #16]
 800df5a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800df5e:	76fb      	strb	r3, [r7, #27]
 800df60:	2340      	movs	r3, #64	; 0x40
 800df62:	617b      	str	r3, [r7, #20]
 800df64:	2300      	movs	r3, #0
 800df66:	613b      	str	r3, [r7, #16]
 800df68:	e029      	b.n	800dfbe <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	f003 031f 	and.w	r3, r3, #31
 800df70:	2b00      	cmp	r3, #0
 800df72:	d102      	bne.n	800df7a <dir_find+0x78>
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	3302      	adds	r3, #2
 800df78:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	691a      	ldr	r2, [r3, #16]
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	4413      	add	r3, r2
 800df82:	4618      	mov	r0, r3
 800df84:	f7fd fede 	bl	800bd44 <ld_word>
 800df88:	4603      	mov	r3, r0
 800df8a:	4618      	mov	r0, r3
 800df8c:	f002 fc8e 	bl	80108ac <ff_wtoupper>
 800df90:	4603      	mov	r3, r0
 800df92:	461c      	mov	r4, r3
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	68da      	ldr	r2, [r3, #12]
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	005b      	lsls	r3, r3, #1
 800df9c:	4413      	add	r3, r2
 800df9e:	881b      	ldrh	r3, [r3, #0]
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f002 fc83 	bl	80108ac <ff_wtoupper>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	429c      	cmp	r4, r3
 800dfaa:	d10c      	bne.n	800dfc6 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800dfac:	7efb      	ldrb	r3, [r7, #27]
 800dfae:	3b01      	subs	r3, #1
 800dfb0:	76fb      	strb	r3, [r7, #27]
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	3302      	adds	r3, #2
 800dfb6:	617b      	str	r3, [r7, #20]
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	3301      	adds	r3, #1
 800dfbc:	613b      	str	r3, [r7, #16]
 800dfbe:	7efb      	ldrb	r3, [r7, #27]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d1d2      	bne.n	800df6a <dir_find+0x68>
 800dfc4:	e000      	b.n	800dfc8 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800dfc6:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800dfc8:	7efb      	ldrb	r3, [r7, #27]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d107      	bne.n	800dfde <dir_find+0xdc>
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	68da      	ldr	r2, [r3, #12]
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	005b      	lsls	r3, r3, #1
 800dfd6:	4413      	add	r3, r2
 800dfd8:	881b      	ldrh	r3, [r3, #0]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d009      	beq.n	800dff2 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800dfde:	2100      	movs	r1, #0
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f7ff fec7 	bl	800dd74 <dir_read>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	77fb      	strb	r3, [r7, #31]
 800dfea:	7ffb      	ldrb	r3, [r7, #31]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d0a6      	beq.n	800df3e <dir_find+0x3c>
 800dff0:	e000      	b.n	800dff4 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800dff2:	bf00      	nop
		}
		return res;
 800dff4:	7ffb      	ldrb	r3, [r7, #31]
 800dff6:	e0a9      	b.n	800e14c <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dff8:	23ff      	movs	r3, #255	; 0xff
 800dffa:	773b      	strb	r3, [r7, #28]
 800dffc:	7f3b      	ldrb	r3, [r7, #28]
 800dffe:	777b      	strb	r3, [r7, #29]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f04f 32ff 	mov.w	r2, #4294967295
 800e006:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e00c:	4619      	mov	r1, r3
 800e00e:	68f8      	ldr	r0, [r7, #12]
 800e010:	f7fe faac 	bl	800c56c <move_window>
 800e014:	4603      	mov	r3, r0
 800e016:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800e018:	7ffb      	ldrb	r3, [r7, #31]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	f040 8090 	bne.w	800e140 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e024:	781b      	ldrb	r3, [r3, #0]
 800e026:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e028:	7fbb      	ldrb	r3, [r7, #30]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d102      	bne.n	800e034 <dir_find+0x132>
 800e02e:	2304      	movs	r3, #4
 800e030:	77fb      	strb	r3, [r7, #31]
 800e032:	e08a      	b.n	800e14a <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e038:	330b      	adds	r3, #11
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e040:	72fb      	strb	r3, [r7, #11]
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	7afa      	ldrb	r2, [r7, #11]
 800e046:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e048:	7fbb      	ldrb	r3, [r7, #30]
 800e04a:	2be5      	cmp	r3, #229	; 0xe5
 800e04c:	d007      	beq.n	800e05e <dir_find+0x15c>
 800e04e:	7afb      	ldrb	r3, [r7, #11]
 800e050:	f003 0308 	and.w	r3, r3, #8
 800e054:	2b00      	cmp	r3, #0
 800e056:	d009      	beq.n	800e06c <dir_find+0x16a>
 800e058:	7afb      	ldrb	r3, [r7, #11]
 800e05a:	2b0f      	cmp	r3, #15
 800e05c:	d006      	beq.n	800e06c <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e05e:	23ff      	movs	r3, #255	; 0xff
 800e060:	777b      	strb	r3, [r7, #29]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f04f 32ff 	mov.w	r2, #4294967295
 800e068:	64da      	str	r2, [r3, #76]	; 0x4c
 800e06a:	e05e      	b.n	800e12a <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e06c:	7afb      	ldrb	r3, [r7, #11]
 800e06e:	2b0f      	cmp	r3, #15
 800e070:	d136      	bne.n	800e0e0 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d154      	bne.n	800e12a <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e080:	7fbb      	ldrb	r3, [r7, #30]
 800e082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e086:	2b00      	cmp	r3, #0
 800e088:	d00d      	beq.n	800e0a6 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e08e:	7b5b      	ldrb	r3, [r3, #13]
 800e090:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e092:	7fbb      	ldrb	r3, [r7, #30]
 800e094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e098:	77bb      	strb	r3, [r7, #30]
 800e09a:	7fbb      	ldrb	r3, [r7, #30]
 800e09c:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e0a6:	7fba      	ldrb	r2, [r7, #30]
 800e0a8:	7f7b      	ldrb	r3, [r7, #29]
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	d115      	bne.n	800e0da <dir_find+0x1d8>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0b2:	330d      	adds	r3, #13
 800e0b4:	781b      	ldrb	r3, [r3, #0]
 800e0b6:	7f3a      	ldrb	r2, [r7, #28]
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d10e      	bne.n	800e0da <dir_find+0x1d8>
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	68da      	ldr	r2, [r3, #12]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0c4:	4619      	mov	r1, r3
 800e0c6:	4610      	mov	r0, r2
 800e0c8:	f7ff fa4c 	bl	800d564 <cmp_lfn>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d003      	beq.n	800e0da <dir_find+0x1d8>
 800e0d2:	7f7b      	ldrb	r3, [r7, #29]
 800e0d4:	3b01      	subs	r3, #1
 800e0d6:	b2db      	uxtb	r3, r3
 800e0d8:	e000      	b.n	800e0dc <dir_find+0x1da>
 800e0da:	23ff      	movs	r3, #255	; 0xff
 800e0dc:	777b      	strb	r3, [r7, #29]
 800e0de:	e024      	b.n	800e12a <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e0e0:	7f7b      	ldrb	r3, [r7, #29]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d109      	bne.n	800e0fa <dir_find+0x1f8>
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f7ff fc04 	bl	800d8f8 <sum_sfn>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	7f3b      	ldrb	r3, [r7, #28]
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	d024      	beq.n	800e144 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e100:	f003 0301 	and.w	r3, r3, #1
 800e104:	2b00      	cmp	r3, #0
 800e106:	d10a      	bne.n	800e11e <dir_find+0x21c>
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	3340      	adds	r3, #64	; 0x40
 800e110:	220b      	movs	r2, #11
 800e112:	4619      	mov	r1, r3
 800e114:	f7fe f837 	bl	800c186 <mem_cmp>
 800e118:	4603      	mov	r3, r0
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d014      	beq.n	800e148 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e11e:	23ff      	movs	r3, #255	; 0xff
 800e120:	777b      	strb	r3, [r7, #29]
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f04f 32ff 	mov.w	r2, #4294967295
 800e128:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e12a:	2100      	movs	r1, #0
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f7ff f8a8 	bl	800d282 <dir_next>
 800e132:	4603      	mov	r3, r0
 800e134:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800e136:	7ffb      	ldrb	r3, [r7, #31]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	f43f af65 	beq.w	800e008 <dir_find+0x106>
 800e13e:	e004      	b.n	800e14a <dir_find+0x248>
		if (res != FR_OK) break;
 800e140:	bf00      	nop
 800e142:	e002      	b.n	800e14a <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e144:	bf00      	nop
 800e146:	e000      	b.n	800e14a <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e148:	bf00      	nop

	return res;
 800e14a:	7ffb      	ldrb	r3, [r7, #31]
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3724      	adds	r7, #36	; 0x24
 800e150:	46bd      	mov	sp, r7
 800e152:	bd90      	pop	{r4, r7, pc}

0800e154 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e154:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e158:	b0a0      	sub	sp, #128	; 0x80
 800e15a:	af00      	add	r7, sp, #0
 800e15c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e16a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d001      	beq.n	800e176 <dir_register+0x22>
 800e172:	2306      	movs	r3, #6
 800e174:	e18e      	b.n	800e494 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e176:	2300      	movs	r3, #0
 800e178:	677b      	str	r3, [r7, #116]	; 0x74
 800e17a:	e002      	b.n	800e182 <dir_register+0x2e>
 800e17c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e17e:	3301      	adds	r3, #1
 800e180:	677b      	str	r3, [r7, #116]	; 0x74
 800e182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e184:	68da      	ldr	r2, [r3, #12]
 800e186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e188:	005b      	lsls	r3, r3, #1
 800e18a:	4413      	add	r3, r2
 800e18c:	881b      	ldrh	r3, [r3, #0]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d1f4      	bne.n	800e17c <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	2b04      	cmp	r3, #4
 800e198:	f040 809f 	bne.w	800e2da <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800e19c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e19e:	330e      	adds	r3, #14
 800e1a0:	4aa2      	ldr	r2, [pc, #648]	; (800e42c <dir_register+0x2d8>)
 800e1a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e1a6:	08db      	lsrs	r3, r3, #3
 800e1a8:	3302      	adds	r3, #2
 800e1aa:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800e1ac:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f7ff f93c 	bl	800d42c <dir_alloc>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800e1ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d002      	beq.n	800e1c8 <dir_register+0x74>
 800e1c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e1c6:	e165      	b.n	800e494 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e1ce:	3b01      	subs	r3, #1
 800e1d0:	015b      	lsls	r3, r3, #5
 800e1d2:	1ad2      	subs	r2, r2, r3
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	689b      	ldr	r3, [r3, #8]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d072      	beq.n	800e2c6 <dir_register+0x172>
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	79db      	ldrb	r3, [r3, #7]
 800e1e4:	f003 0304 	and.w	r3, r3, #4
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d06c      	beq.n	800e2c6 <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e1f2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e1f4:	8949      	ldrh	r1, [r1, #10]
 800e1f6:	0249      	lsls	r1, r1, #9
 800e1f8:	2000      	movs	r0, #0
 800e1fa:	460c      	mov	r4, r1
 800e1fc:	4605      	mov	r5, r0
 800e1fe:	eb12 0804 	adds.w	r8, r2, r4
 800e202:	eb43 0905 	adc.w	r9, r3, r5
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	4618      	mov	r0, r3
 800e210:	f7fe fd58 	bl	800ccc4 <fill_first_frag>
 800e214:	4603      	mov	r3, r0
 800e216:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e21a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d002      	beq.n	800e228 <dir_register+0xd4>
 800e222:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e226:	e135      	b.n	800e494 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e22e:	f04f 32ff 	mov.w	r2, #4294967295
 800e232:	4619      	mov	r1, r3
 800e234:	f7fe fd75 	bl	800cd22 <fill_last_frag>
 800e238:	4603      	mov	r3, r0
 800e23a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e23e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e242:	2b00      	cmp	r3, #0
 800e244:	d002      	beq.n	800e24c <dir_register+0xf8>
 800e246:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e24a:	e123      	b.n	800e494 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	f107 0308 	add.w	r3, r7, #8
 800e252:	4611      	mov	r1, r2
 800e254:	4618      	mov	r0, r3
 800e256:	f7ff fc95 	bl	800db84 <load_obj_dir>
 800e25a:	4603      	mov	r3, r0
 800e25c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e260:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e264:	2b00      	cmp	r3, #0
 800e266:	d002      	beq.n	800e26e <dir_register+0x11a>
 800e268:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e26c:	e112      	b.n	800e494 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800e26e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e270:	691b      	ldr	r3, [r3, #16]
 800e272:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e27c:	4608      	mov	r0, r1
 800e27e:	f7fd febe 	bl	800bffe <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800e282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e284:	691b      	ldr	r3, [r3, #16]
 800e286:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e290:	4608      	mov	r0, r1
 800e292:	f7fd feb4 	bl	800bffe <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	79da      	ldrb	r2, [r3, #7]
 800e29a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e29c:	691b      	ldr	r3, [r3, #16]
 800e29e:	3321      	adds	r3, #33	; 0x21
 800e2a0:	f042 0201 	orr.w	r2, r2, #1
 800e2a4:	b2d2      	uxtb	r2, r2
 800e2a6:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800e2a8:	f107 0308 	add.w	r3, r7, #8
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f7ff fc9f 	bl	800dbf0 <store_xdir>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e2b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d002      	beq.n	800e2c6 <dir_register+0x172>
 800e2c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e2c4:	e0e6      	b.n	800e494 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800e2c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2c8:	691a      	ldr	r2, [r3, #16]
 800e2ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2cc:	68db      	ldr	r3, [r3, #12]
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	4610      	mov	r0, r2
 800e2d2:	f7ff fce8 	bl	800dca6 <create_xdir>
		return FR_OK;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	e0dc      	b.n	800e494 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e2e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e2e4:	220c      	movs	r2, #12
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7fd ff11 	bl	800c10e <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e2ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e2f0:	f003 0301 	and.w	r3, r3, #1
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d033      	beq.n	800e360 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2240      	movs	r2, #64	; 0x40
 800e2fc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800e300:	2301      	movs	r3, #1
 800e302:	67bb      	str	r3, [r7, #120]	; 0x78
 800e304:	e016      	b.n	800e334 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800e30c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e30e:	68da      	ldr	r2, [r3, #12]
 800e310:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800e314:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e316:	f7ff fa61 	bl	800d7dc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f7ff fdf1 	bl	800df02 <dir_find>
 800e320:	4603      	mov	r3, r0
 800e322:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800e326:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d106      	bne.n	800e33c <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800e32e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e330:	3301      	adds	r3, #1
 800e332:	67bb      	str	r3, [r7, #120]	; 0x78
 800e334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e336:	2b63      	cmp	r3, #99	; 0x63
 800e338:	d9e5      	bls.n	800e306 <dir_register+0x1b2>
 800e33a:	e000      	b.n	800e33e <dir_register+0x1ea>
			if (res != FR_OK) break;
 800e33c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e33e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e340:	2b64      	cmp	r3, #100	; 0x64
 800e342:	d101      	bne.n	800e348 <dir_register+0x1f4>
 800e344:	2307      	movs	r3, #7
 800e346:	e0a5      	b.n	800e494 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e348:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e34c:	2b04      	cmp	r3, #4
 800e34e:	d002      	beq.n	800e356 <dir_register+0x202>
 800e350:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e354:	e09e      	b.n	800e494 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e356:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e360:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e364:	f003 0302 	and.w	r3, r3, #2
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d007      	beq.n	800e37c <dir_register+0x228>
 800e36c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e36e:	330c      	adds	r3, #12
 800e370:	4a2f      	ldr	r2, [pc, #188]	; (800e430 <dir_register+0x2dc>)
 800e372:	fba2 2303 	umull	r2, r3, r2, r3
 800e376:	089b      	lsrs	r3, r3, #2
 800e378:	3301      	adds	r3, #1
 800e37a:	e000      	b.n	800e37e <dir_register+0x22a>
 800e37c:	2301      	movs	r3, #1
 800e37e:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e380:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f7ff f852 	bl	800d42c <dir_alloc>
 800e388:	4603      	mov	r3, r0
 800e38a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e38e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e392:	2b00      	cmp	r3, #0
 800e394:	d14f      	bne.n	800e436 <dir_register+0x2e2>
 800e396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e398:	3b01      	subs	r3, #1
 800e39a:	673b      	str	r3, [r7, #112]	; 0x70
 800e39c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d049      	beq.n	800e436 <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e3a8:	015b      	lsls	r3, r3, #5
 800e3aa:	1ad3      	subs	r3, r2, r3
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f7fe fee1 	bl	800d176 <dir_sdi>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800e3ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d139      	bne.n	800e436 <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	3340      	adds	r3, #64	; 0x40
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7ff fa96 	bl	800d8f8 <sum_sfn>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e3da:	f7fe f8c7 	bl	800c56c <move_window>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800e3e4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d123      	bne.n	800e434 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e3ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e3ee:	68d8      	ldr	r0, [r3, #12]
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e3f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e3f6:	b2da      	uxtb	r2, r3
 800e3f8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e3fc:	f7ff f986 	bl	800d70c <put_lfn>
				fs->wflag = 1;
 800e400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e402:	2201      	movs	r2, #1
 800e404:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e406:	2100      	movs	r1, #0
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f7fe ff3a 	bl	800d282 <dir_next>
 800e40e:	4603      	mov	r3, r0
 800e410:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800e414:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d10c      	bne.n	800e436 <dir_register+0x2e2>
 800e41c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e41e:	3b01      	subs	r3, #1
 800e420:	673b      	str	r3, [r7, #112]	; 0x70
 800e422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e424:	2b00      	cmp	r3, #0
 800e426:	d1d4      	bne.n	800e3d2 <dir_register+0x27e>
 800e428:	e005      	b.n	800e436 <dir_register+0x2e2>
 800e42a:	bf00      	nop
 800e42c:	88888889 	.word	0x88888889
 800e430:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800e434:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e436:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d128      	bne.n	800e490 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e442:	4619      	mov	r1, r3
 800e444:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e446:	f7fe f891 	bl	800c56c <move_window>
 800e44a:	4603      	mov	r3, r0
 800e44c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800e450:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e454:	2b00      	cmp	r3, #0
 800e456:	d11b      	bne.n	800e490 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e45c:	2220      	movs	r2, #32
 800e45e:	2100      	movs	r1, #0
 800e460:	4618      	mov	r0, r3
 800e462:	f7fd fe75 	bl	800c150 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	3340      	adds	r3, #64	; 0x40
 800e46e:	220b      	movs	r2, #11
 800e470:	4619      	mov	r1, r3
 800e472:	f7fd fe4c 	bl	800c10e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e480:	330c      	adds	r3, #12
 800e482:	f002 0218 	and.w	r2, r2, #24
 800e486:	b2d2      	uxtb	r2, r2
 800e488:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e48a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e48c:	2201      	movs	r2, #1
 800e48e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e490:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800e494:	4618      	mov	r0, r3
 800e496:	3780      	adds	r7, #128	; 0x80
 800e498:	46bd      	mov	sp, r7
 800e49a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e49e:	bf00      	nop

0800e4a0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b08a      	sub	sp, #40	; 0x28
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	613b      	str	r3, [r7, #16]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	68db      	ldr	r3, [r3, #12]
 800e4b6:	60fb      	str	r3, [r7, #12]
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	617b      	str	r3, [r7, #20]
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e4c0:	69bb      	ldr	r3, [r7, #24]
 800e4c2:	1c5a      	adds	r2, r3, #1
 800e4c4:	61ba      	str	r2, [r7, #24]
 800e4c6:	693a      	ldr	r2, [r7, #16]
 800e4c8:	4413      	add	r3, r2
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e4ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4d0:	2b1f      	cmp	r3, #31
 800e4d2:	d940      	bls.n	800e556 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e4d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4d6:	2b2f      	cmp	r3, #47	; 0x2f
 800e4d8:	d006      	beq.n	800e4e8 <create_name+0x48>
 800e4da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4dc:	2b5c      	cmp	r3, #92	; 0x5c
 800e4de:	d110      	bne.n	800e502 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e4e0:	e002      	b.n	800e4e8 <create_name+0x48>
 800e4e2:	69bb      	ldr	r3, [r7, #24]
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	61bb      	str	r3, [r7, #24]
 800e4e8:	693a      	ldr	r2, [r7, #16]
 800e4ea:	69bb      	ldr	r3, [r7, #24]
 800e4ec:	4413      	add	r3, r2
 800e4ee:	781b      	ldrb	r3, [r3, #0]
 800e4f0:	2b2f      	cmp	r3, #47	; 0x2f
 800e4f2:	d0f6      	beq.n	800e4e2 <create_name+0x42>
 800e4f4:	693a      	ldr	r2, [r7, #16]
 800e4f6:	69bb      	ldr	r3, [r7, #24]
 800e4f8:	4413      	add	r3, r2
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	2b5c      	cmp	r3, #92	; 0x5c
 800e4fe:	d0f0      	beq.n	800e4e2 <create_name+0x42>
			break;
 800e500:	e02a      	b.n	800e558 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	2bfe      	cmp	r3, #254	; 0xfe
 800e506:	d901      	bls.n	800e50c <create_name+0x6c>
 800e508:	2306      	movs	r3, #6
 800e50a:	e17d      	b.n	800e808 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e50c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e50e:	b2db      	uxtb	r3, r3
 800e510:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e514:	2101      	movs	r1, #1
 800e516:	4618      	mov	r0, r3
 800e518:	f002 f98c 	bl	8010834 <ff_convert>
 800e51c:	4603      	mov	r3, r0
 800e51e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e520:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e522:	2b00      	cmp	r3, #0
 800e524:	d101      	bne.n	800e52a <create_name+0x8a>
 800e526:	2306      	movs	r3, #6
 800e528:	e16e      	b.n	800e808 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e52a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e52c:	2b7f      	cmp	r3, #127	; 0x7f
 800e52e:	d809      	bhi.n	800e544 <create_name+0xa4>
 800e530:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e532:	4619      	mov	r1, r3
 800e534:	488d      	ldr	r0, [pc, #564]	; (800e76c <create_name+0x2cc>)
 800e536:	f7fd fe4d 	bl	800c1d4 <chk_chr>
 800e53a:	4603      	mov	r3, r0
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d001      	beq.n	800e544 <create_name+0xa4>
 800e540:	2306      	movs	r3, #6
 800e542:	e161      	b.n	800e808 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	1c5a      	adds	r2, r3, #1
 800e548:	617a      	str	r2, [r7, #20]
 800e54a:	005b      	lsls	r3, r3, #1
 800e54c:	68fa      	ldr	r2, [r7, #12]
 800e54e:	4413      	add	r3, r2
 800e550:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e552:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e554:	e7b4      	b.n	800e4c0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e556:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e558:	693a      	ldr	r2, [r7, #16]
 800e55a:	69bb      	ldr	r3, [r7, #24]
 800e55c:	441a      	add	r2, r3
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e562:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e564:	2b1f      	cmp	r3, #31
 800e566:	d801      	bhi.n	800e56c <create_name+0xcc>
 800e568:	2304      	movs	r3, #4
 800e56a:	e000      	b.n	800e56e <create_name+0xce>
 800e56c:	2300      	movs	r3, #0
 800e56e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e572:	e011      	b.n	800e598 <create_name+0xf8>
		w = lfn[di - 1];
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e57a:	3b01      	subs	r3, #1
 800e57c:	005b      	lsls	r3, r3, #1
 800e57e:	68fa      	ldr	r2, [r7, #12]
 800e580:	4413      	add	r3, r2
 800e582:	881b      	ldrh	r3, [r3, #0]
 800e584:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e586:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e588:	2b20      	cmp	r3, #32
 800e58a:	d002      	beq.n	800e592 <create_name+0xf2>
 800e58c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e58e:	2b2e      	cmp	r3, #46	; 0x2e
 800e590:	d106      	bne.n	800e5a0 <create_name+0x100>
		di--;
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	3b01      	subs	r3, #1
 800e596:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d1ea      	bne.n	800e574 <create_name+0xd4>
 800e59e:	e000      	b.n	800e5a2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e5a0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	005b      	lsls	r3, r3, #1
 800e5a6:	68fa      	ldr	r2, [r7, #12]
 800e5a8:	4413      	add	r3, r2
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d101      	bne.n	800e5b8 <create_name+0x118>
 800e5b4:	2306      	movs	r3, #6
 800e5b6:	e127      	b.n	800e808 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	3340      	adds	r3, #64	; 0x40
 800e5bc:	220b      	movs	r2, #11
 800e5be:	2120      	movs	r1, #32
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f7fd fdc5 	bl	800c150 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	61bb      	str	r3, [r7, #24]
 800e5ca:	e002      	b.n	800e5d2 <create_name+0x132>
 800e5cc:	69bb      	ldr	r3, [r7, #24]
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	61bb      	str	r3, [r7, #24]
 800e5d2:	69bb      	ldr	r3, [r7, #24]
 800e5d4:	005b      	lsls	r3, r3, #1
 800e5d6:	68fa      	ldr	r2, [r7, #12]
 800e5d8:	4413      	add	r3, r2
 800e5da:	881b      	ldrh	r3, [r3, #0]
 800e5dc:	2b20      	cmp	r3, #32
 800e5de:	d0f5      	beq.n	800e5cc <create_name+0x12c>
 800e5e0:	69bb      	ldr	r3, [r7, #24]
 800e5e2:	005b      	lsls	r3, r3, #1
 800e5e4:	68fa      	ldr	r2, [r7, #12]
 800e5e6:	4413      	add	r3, r2
 800e5e8:	881b      	ldrh	r3, [r3, #0]
 800e5ea:	2b2e      	cmp	r3, #46	; 0x2e
 800e5ec:	d0ee      	beq.n	800e5cc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e5ee:	69bb      	ldr	r3, [r7, #24]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d009      	beq.n	800e608 <create_name+0x168>
 800e5f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5f8:	f043 0303 	orr.w	r3, r3, #3
 800e5fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e600:	e002      	b.n	800e608 <create_name+0x168>
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	3b01      	subs	r3, #1
 800e606:	617b      	str	r3, [r7, #20]
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d009      	beq.n	800e622 <create_name+0x182>
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e614:	3b01      	subs	r3, #1
 800e616:	005b      	lsls	r3, r3, #1
 800e618:	68fa      	ldr	r2, [r7, #12]
 800e61a:	4413      	add	r3, r2
 800e61c:	881b      	ldrh	r3, [r3, #0]
 800e61e:	2b2e      	cmp	r3, #46	; 0x2e
 800e620:	d1ef      	bne.n	800e602 <create_name+0x162>

	i = b = 0; ni = 8;
 800e622:	2300      	movs	r3, #0
 800e624:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e628:	2300      	movs	r3, #0
 800e62a:	623b      	str	r3, [r7, #32]
 800e62c:	2308      	movs	r3, #8
 800e62e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	1c5a      	adds	r2, r3, #1
 800e634:	61ba      	str	r2, [r7, #24]
 800e636:	005b      	lsls	r3, r3, #1
 800e638:	68fa      	ldr	r2, [r7, #12]
 800e63a:	4413      	add	r3, r2
 800e63c:	881b      	ldrh	r3, [r3, #0]
 800e63e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e640:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e642:	2b00      	cmp	r3, #0
 800e644:	f000 8090 	beq.w	800e768 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e648:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e64a:	2b20      	cmp	r3, #32
 800e64c:	d006      	beq.n	800e65c <create_name+0x1bc>
 800e64e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e650:	2b2e      	cmp	r3, #46	; 0x2e
 800e652:	d10a      	bne.n	800e66a <create_name+0x1ca>
 800e654:	69ba      	ldr	r2, [r7, #24]
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	429a      	cmp	r2, r3
 800e65a:	d006      	beq.n	800e66a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e65c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e660:	f043 0303 	orr.w	r3, r3, #3
 800e664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e668:	e07d      	b.n	800e766 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e66a:	6a3a      	ldr	r2, [r7, #32]
 800e66c:	69fb      	ldr	r3, [r7, #28]
 800e66e:	429a      	cmp	r2, r3
 800e670:	d203      	bcs.n	800e67a <create_name+0x1da>
 800e672:	69ba      	ldr	r2, [r7, #24]
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	429a      	cmp	r2, r3
 800e678:	d123      	bne.n	800e6c2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e67a:	69fb      	ldr	r3, [r7, #28]
 800e67c:	2b0b      	cmp	r3, #11
 800e67e:	d106      	bne.n	800e68e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e684:	f043 0303 	orr.w	r3, r3, #3
 800e688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e68c:	e075      	b.n	800e77a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e68e:	69ba      	ldr	r2, [r7, #24]
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	429a      	cmp	r2, r3
 800e694:	d005      	beq.n	800e6a2 <create_name+0x202>
 800e696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e69a:	f043 0303 	orr.w	r3, r3, #3
 800e69e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e6a2:	69ba      	ldr	r2, [r7, #24]
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d866      	bhi.n	800e778 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	61bb      	str	r3, [r7, #24]
 800e6ae:	2308      	movs	r3, #8
 800e6b0:	623b      	str	r3, [r7, #32]
 800e6b2:	230b      	movs	r3, #11
 800e6b4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e6b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e6ba:	009b      	lsls	r3, r3, #2
 800e6bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e6c0:	e051      	b.n	800e766 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e6c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6c4:	2b7f      	cmp	r3, #127	; 0x7f
 800e6c6:	d914      	bls.n	800e6f2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e6c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6ca:	2100      	movs	r1, #0
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f002 f8b1 	bl	8010834 <ff_convert>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e6d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d004      	beq.n	800e6e6 <create_name+0x246>
 800e6dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6de:	3b80      	subs	r3, #128	; 0x80
 800e6e0:	4a23      	ldr	r2, [pc, #140]	; (800e770 <create_name+0x2d0>)
 800e6e2:	5cd3      	ldrb	r3, [r2, r3]
 800e6e4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e6e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6ea:	f043 0302 	orr.w	r3, r3, #2
 800e6ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e6f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d007      	beq.n	800e708 <create_name+0x268>
 800e6f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	481d      	ldr	r0, [pc, #116]	; (800e774 <create_name+0x2d4>)
 800e6fe:	f7fd fd69 	bl	800c1d4 <chk_chr>
 800e702:	4603      	mov	r3, r0
 800e704:	2b00      	cmp	r3, #0
 800e706:	d008      	beq.n	800e71a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e708:	235f      	movs	r3, #95	; 0x5f
 800e70a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e70c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e710:	f043 0303 	orr.w	r3, r3, #3
 800e714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e718:	e01b      	b.n	800e752 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e71a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e71c:	2b40      	cmp	r3, #64	; 0x40
 800e71e:	d909      	bls.n	800e734 <create_name+0x294>
 800e720:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e722:	2b5a      	cmp	r3, #90	; 0x5a
 800e724:	d806      	bhi.n	800e734 <create_name+0x294>
					b |= 2;
 800e726:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e72a:	f043 0302 	orr.w	r3, r3, #2
 800e72e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e732:	e00e      	b.n	800e752 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e734:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e736:	2b60      	cmp	r3, #96	; 0x60
 800e738:	d90b      	bls.n	800e752 <create_name+0x2b2>
 800e73a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e73c:	2b7a      	cmp	r3, #122	; 0x7a
 800e73e:	d808      	bhi.n	800e752 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e740:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e744:	f043 0301 	orr.w	r3, r3, #1
 800e748:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e74c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e74e:	3b20      	subs	r3, #32
 800e750:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e752:	6a3b      	ldr	r3, [r7, #32]
 800e754:	1c5a      	adds	r2, r3, #1
 800e756:	623a      	str	r2, [r7, #32]
 800e758:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e75a:	b2d1      	uxtb	r1, r2
 800e75c:	687a      	ldr	r2, [r7, #4]
 800e75e:	4413      	add	r3, r2
 800e760:	460a      	mov	r2, r1
 800e762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800e766:	e763      	b.n	800e630 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e768:	bf00      	nop
 800e76a:	e006      	b.n	800e77a <create_name+0x2da>
 800e76c:	08014e84 	.word	0x08014e84
 800e770:	08014f00 	.word	0x08014f00
 800e774:	08014e90 	.word	0x08014e90
			if (si > di) break;			/* No extension */
 800e778:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e780:	2be5      	cmp	r3, #229	; 0xe5
 800e782:	d103      	bne.n	800e78c <create_name+0x2ec>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2205      	movs	r2, #5
 800e788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800e78c:	69fb      	ldr	r3, [r7, #28]
 800e78e:	2b08      	cmp	r3, #8
 800e790:	d104      	bne.n	800e79c <create_name+0x2fc>
 800e792:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e796:	009b      	lsls	r3, r3, #2
 800e798:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e79c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7a0:	f003 030c 	and.w	r3, r3, #12
 800e7a4:	2b0c      	cmp	r3, #12
 800e7a6:	d005      	beq.n	800e7b4 <create_name+0x314>
 800e7a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7ac:	f003 0303 	and.w	r3, r3, #3
 800e7b0:	2b03      	cmp	r3, #3
 800e7b2:	d105      	bne.n	800e7c0 <create_name+0x320>
 800e7b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7b8:	f043 0302 	orr.w	r3, r3, #2
 800e7bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e7c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7c4:	f003 0302 	and.w	r3, r3, #2
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d117      	bne.n	800e7fc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e7cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7d0:	f003 0303 	and.w	r3, r3, #3
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	d105      	bne.n	800e7e4 <create_name+0x344>
 800e7d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7dc:	f043 0310 	orr.w	r3, r3, #16
 800e7e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e7e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7e8:	f003 030c 	and.w	r3, r3, #12
 800e7ec:	2b04      	cmp	r3, #4
 800e7ee:	d105      	bne.n	800e7fc <create_name+0x35c>
 800e7f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7f4:	f043 0308 	orr.w	r3, r3, #8
 800e7f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e802:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800e806:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3728      	adds	r7, #40	; 0x28
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b086      	sub	sp, #24
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e81e:	693b      	ldr	r3, [r7, #16]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e824:	e002      	b.n	800e82c <follow_path+0x1c>
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	3301      	adds	r3, #1
 800e82a:	603b      	str	r3, [r7, #0]
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	781b      	ldrb	r3, [r3, #0]
 800e830:	2b2f      	cmp	r3, #47	; 0x2f
 800e832:	d0f8      	beq.n	800e826 <follow_path+0x16>
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	2b5c      	cmp	r3, #92	; 0x5c
 800e83a:	d0f4      	beq.n	800e826 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	2200      	movs	r2, #0
 800e840:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	2200      	movs	r2, #0
 800e846:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	2b1f      	cmp	r3, #31
 800e84e:	d80a      	bhi.n	800e866 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2280      	movs	r2, #128	; 0x80
 800e854:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800e858:	2100      	movs	r1, #0
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f7fe fc8b 	bl	800d176 <dir_sdi>
 800e860:	4603      	mov	r3, r0
 800e862:	75fb      	strb	r3, [r7, #23]
 800e864:	e078      	b.n	800e958 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e866:	463b      	mov	r3, r7
 800e868:	4619      	mov	r1, r3
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f7ff fe18 	bl	800e4a0 <create_name>
 800e870:	4603      	mov	r3, r0
 800e872:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e874:	7dfb      	ldrb	r3, [r7, #23]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d169      	bne.n	800e94e <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f7ff fb41 	bl	800df02 <dir_find>
 800e880:	4603      	mov	r3, r0
 800e882:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e88a:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e88c:	7dfb      	ldrb	r3, [r7, #23]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d00a      	beq.n	800e8a8 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e892:	7dfb      	ldrb	r3, [r7, #23]
 800e894:	2b04      	cmp	r3, #4
 800e896:	d15c      	bne.n	800e952 <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e898:	7afb      	ldrb	r3, [r7, #11]
 800e89a:	f003 0304 	and.w	r3, r3, #4
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d157      	bne.n	800e952 <follow_path+0x142>
 800e8a2:	2305      	movs	r3, #5
 800e8a4:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e8a6:	e054      	b.n	800e952 <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e8a8:	7afb      	ldrb	r3, [r7, #11]
 800e8aa:	f003 0304 	and.w	r3, r3, #4
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d151      	bne.n	800e956 <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e8b2:	693b      	ldr	r3, [r7, #16]
 800e8b4:	799b      	ldrb	r3, [r3, #6]
 800e8b6:	f003 0310 	and.w	r3, r3, #16
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d102      	bne.n	800e8c4 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800e8be:	2305      	movs	r3, #5
 800e8c0:	75fb      	strb	r3, [r7, #23]
 800e8c2:	e049      	b.n	800e958 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	781b      	ldrb	r3, [r3, #0]
 800e8c8:	2b04      	cmp	r3, #4
 800e8ca:	d130      	bne.n	800e92e <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	689a      	ldr	r2, [r3, #8]
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e8da:	4613      	mov	r3, r2
 800e8dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e8e0:	693a      	ldr	r2, [r7, #16]
 800e8e2:	79d2      	ldrb	r2, [r2, #7]
 800e8e4:	431a      	orrs	r2, r3
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	691b      	ldr	r3, [r3, #16]
 800e8f6:	3334      	adds	r3, #52	; 0x34
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7fd fa3b 	bl	800bd74 <ld_dword>
 800e8fe:	4602      	mov	r2, r0
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	691b      	ldr	r3, [r3, #16]
 800e908:	3321      	adds	r3, #33	; 0x21
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	f003 0302 	and.w	r3, r3, #2
 800e910:	b2da      	uxtb	r2, r3
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	691b      	ldr	r3, [r3, #16]
 800e91a:	3338      	adds	r3, #56	; 0x38
 800e91c:	4618      	mov	r0, r3
 800e91e:	f7fd fa4c 	bl	800bdba <ld_qword>
 800e922:	4602      	mov	r2, r0
 800e924:	460b      	mov	r3, r1
 800e926:	6939      	ldr	r1, [r7, #16]
 800e928:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800e92c:	e79b      	b.n	800e866 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e93c:	4413      	add	r3, r2
 800e93e:	4619      	mov	r1, r3
 800e940:	68f8      	ldr	r0, [r7, #12]
 800e942:	f7fe fdcf 	bl	800d4e4 <ld_clust>
 800e946:	4602      	mov	r2, r0
 800e948:	693b      	ldr	r3, [r7, #16]
 800e94a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e94c:	e78b      	b.n	800e866 <follow_path+0x56>
			if (res != FR_OK) break;
 800e94e:	bf00      	nop
 800e950:	e002      	b.n	800e958 <follow_path+0x148>
				break;
 800e952:	bf00      	nop
 800e954:	e000      	b.n	800e958 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e956:	bf00      	nop
			}
		}
	}

	return res;
 800e958:	7dfb      	ldrb	r3, [r7, #23]
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3718      	adds	r7, #24
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}

0800e962 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e962:	b480      	push	{r7}
 800e964:	b087      	sub	sp, #28
 800e966:	af00      	add	r7, sp, #0
 800e968:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e96a:	f04f 33ff 	mov.w	r3, #4294967295
 800e96e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d031      	beq.n	800e9dc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	617b      	str	r3, [r7, #20]
 800e97e:	e002      	b.n	800e986 <get_ldnumber+0x24>
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	3301      	adds	r3, #1
 800e984:	617b      	str	r3, [r7, #20]
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	781b      	ldrb	r3, [r3, #0]
 800e98a:	2b1f      	cmp	r3, #31
 800e98c:	d903      	bls.n	800e996 <get_ldnumber+0x34>
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	2b3a      	cmp	r3, #58	; 0x3a
 800e994:	d1f4      	bne.n	800e980 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	2b3a      	cmp	r3, #58	; 0x3a
 800e99c:	d11c      	bne.n	800e9d8 <get_ldnumber+0x76>
			tp = *path;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	1c5a      	adds	r2, r3, #1
 800e9a8:	60fa      	str	r2, [r7, #12]
 800e9aa:	781b      	ldrb	r3, [r3, #0]
 800e9ac:	3b30      	subs	r3, #48	; 0x30
 800e9ae:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	2b09      	cmp	r3, #9
 800e9b4:	d80e      	bhi.n	800e9d4 <get_ldnumber+0x72>
 800e9b6:	68fa      	ldr	r2, [r7, #12]
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d10a      	bne.n	800e9d4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	2b03      	cmp	r3, #3
 800e9c2:	d807      	bhi.n	800e9d4 <get_ldnumber+0x72>
					vol = (int)i;
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	3301      	adds	r3, #1
 800e9cc:	617b      	str	r3, [r7, #20]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	697a      	ldr	r2, [r7, #20]
 800e9d2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	e002      	b.n	800e9de <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e9d8:	2300      	movs	r3, #0
 800e9da:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e9dc:	693b      	ldr	r3, [r7, #16]
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	371c      	adds	r7, #28
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e8:	4770      	bx	lr
	...

0800e9ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b082      	sub	sp, #8
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	70da      	strb	r2, [r3, #3]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f04f 32ff 	mov.w	r2, #4294967295
 800ea02:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ea04:	6839      	ldr	r1, [r7, #0]
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f7fd fdb0 	bl	800c56c <move_window>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d001      	beq.n	800ea16 <check_fs+0x2a>
 800ea12:	2304      	movs	r3, #4
 800ea14:	e044      	b.n	800eaa0 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	3338      	adds	r3, #56	; 0x38
 800ea1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7fd f990 	bl	800bd44 <ld_word>
 800ea24:	4603      	mov	r3, r0
 800ea26:	461a      	mov	r2, r3
 800ea28:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d001      	beq.n	800ea34 <check_fs+0x48>
 800ea30:	2303      	movs	r3, #3
 800ea32:	e035      	b.n	800eaa0 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ea3a:	2be9      	cmp	r3, #233	; 0xe9
 800ea3c:	d009      	beq.n	800ea52 <check_fs+0x66>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ea44:	2beb      	cmp	r3, #235	; 0xeb
 800ea46:	d11e      	bne.n	800ea86 <check_fs+0x9a>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ea4e:	2b90      	cmp	r3, #144	; 0x90
 800ea50:	d119      	bne.n	800ea86 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	3338      	adds	r3, #56	; 0x38
 800ea56:	3336      	adds	r3, #54	; 0x36
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7fd f98b 	bl	800bd74 <ld_dword>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ea64:	4a10      	ldr	r2, [pc, #64]	; (800eaa8 <check_fs+0xbc>)
 800ea66:	4293      	cmp	r3, r2
 800ea68:	d101      	bne.n	800ea6e <check_fs+0x82>
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	e018      	b.n	800eaa0 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	3338      	adds	r3, #56	; 0x38
 800ea72:	3352      	adds	r3, #82	; 0x52
 800ea74:	4618      	mov	r0, r3
 800ea76:	f7fd f97d 	bl	800bd74 <ld_dword>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	4a0b      	ldr	r2, [pc, #44]	; (800eaac <check_fs+0xc0>)
 800ea7e:	4293      	cmp	r3, r2
 800ea80:	d101      	bne.n	800ea86 <check_fs+0x9a>
 800ea82:	2300      	movs	r3, #0
 800ea84:	e00c      	b.n	800eaa0 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	3338      	adds	r3, #56	; 0x38
 800ea8a:	220b      	movs	r2, #11
 800ea8c:	4908      	ldr	r1, [pc, #32]	; (800eab0 <check_fs+0xc4>)
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f7fd fb79 	bl	800c186 <mem_cmp>
 800ea94:	4603      	mov	r3, r0
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d101      	bne.n	800ea9e <check_fs+0xb2>
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	e000      	b.n	800eaa0 <check_fs+0xb4>
#endif
	return 2;
 800ea9e:	2302      	movs	r3, #2
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3708      	adds	r7, #8
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}
 800eaa8:	00544146 	.word	0x00544146
 800eaac:	33544146 	.word	0x33544146
 800eab0:	08014e98 	.word	0x08014e98

0800eab4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800eab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eab8:	b09c      	sub	sp, #112	; 0x70
 800eaba:	af00      	add	r7, sp, #0
 800eabc:	61f8      	str	r0, [r7, #28]
 800eabe:	61b9      	str	r1, [r7, #24]
 800eac0:	4613      	mov	r3, r2
 800eac2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800eac4:	69bb      	ldr	r3, [r7, #24]
 800eac6:	2200      	movs	r2, #0
 800eac8:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800eaca:	69f8      	ldr	r0, [r7, #28]
 800eacc:	f7ff ff49 	bl	800e962 <get_ldnumber>
 800ead0:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800ead2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	da01      	bge.n	800eadc <find_volume+0x28>
 800ead8:	230b      	movs	r3, #11
 800eada:	e337      	b.n	800f14c <find_volume+0x698>


	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800eadc:	4a99      	ldr	r2, [pc, #612]	; (800ed44 <find_volume+0x290>)
 800eade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eae4:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800eae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d101      	bne.n	800eaf0 <find_volume+0x3c>
 800eaec:	230c      	movs	r3, #12
 800eaee:	e32d      	b.n	800f14c <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800eaf0:	69bb      	ldr	r3, [r7, #24]
 800eaf2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eaf4:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800eaf6:	7dfb      	ldrb	r3, [r7, #23]
 800eaf8:	f023 0301 	bic.w	r3, r3, #1
 800eafc:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800eafe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb00:	781b      	ldrb	r3, [r3, #0]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d01a      	beq.n	800eb3c <find_volume+0x88>

		stat = disk_status(fs->drv);
 800eb06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb08:	785b      	ldrb	r3, [r3, #1]
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7fd f87c 	bl	800bc08 <disk_status>
 800eb10:	4603      	mov	r3, r0
 800eb12:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800eb16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eb1a:	f003 0301 	and.w	r3, r3, #1
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d10c      	bne.n	800eb3c <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800eb22:	7dfb      	ldrb	r3, [r7, #23]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d007      	beq.n	800eb38 <find_volume+0x84>
 800eb28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eb2c:	f003 0304 	and.w	r3, r3, #4
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d001      	beq.n	800eb38 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800eb34:	230a      	movs	r3, #10
 800eb36:	e309      	b.n	800f14c <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 800eb38:	2300      	movs	r3, #0
 800eb3a:	e307      	b.n	800f14c <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800eb3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb3e:	2200      	movs	r2, #0
 800eb40:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800eb42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb44:	b2da      	uxtb	r2, r3
 800eb46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb48:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800eb4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb4c:	785b      	ldrb	r3, [r3, #1]
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7fd f874 	bl	800bc3c <disk_initialize>
 800eb54:	4603      	mov	r3, r0
 800eb56:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800eb5a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eb5e:	f003 0301 	and.w	r3, r3, #1
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d001      	beq.n	800eb6a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800eb66:	2303      	movs	r3, #3
 800eb68:	e2f0      	b.n	800f14c <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800eb6a:	7dfb      	ldrb	r3, [r7, #23]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d007      	beq.n	800eb80 <find_volume+0xcc>
 800eb70:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eb74:	f003 0304 	and.w	r3, r3, #4
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d001      	beq.n	800eb80 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800eb7c:	230a      	movs	r3, #10
 800eb7e:	e2e5      	b.n	800f14c <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800eb80:	2300      	movs	r3, #0
 800eb82:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800eb84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800eb86:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800eb88:	f7ff ff30 	bl	800e9ec <check_fs>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800eb92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800eb96:	2b02      	cmp	r3, #2
 800eb98:	d14d      	bne.n	800ec36 <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	65bb      	str	r3, [r7, #88]	; 0x58
 800eb9e:	e020      	b.n	800ebe2 <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800eba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eba2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800eba6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eba8:	011b      	lsls	r3, r3, #4
 800ebaa:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ebae:	4413      	add	r3, r2
 800ebb0:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ebb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebb4:	3304      	adds	r3, #4
 800ebb6:	781b      	ldrb	r3, [r3, #0]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d006      	beq.n	800ebca <find_volume+0x116>
 800ebbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebbe:	3308      	adds	r3, #8
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7fd f8d7 	bl	800bd74 <ld_dword>
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	e000      	b.n	800ebcc <find_volume+0x118>
 800ebca:	2200      	movs	r2, #0
 800ebcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebce:	009b      	lsls	r3, r3, #2
 800ebd0:	3360      	adds	r3, #96	; 0x60
 800ebd2:	f107 0110 	add.w	r1, r7, #16
 800ebd6:	440b      	add	r3, r1
 800ebd8:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ebdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebde:	3301      	adds	r3, #1
 800ebe0:	65bb      	str	r3, [r7, #88]	; 0x58
 800ebe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebe4:	2b03      	cmp	r3, #3
 800ebe6:	d9db      	bls.n	800eba0 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ebe8:	2300      	movs	r3, #0
 800ebea:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800ebec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d002      	beq.n	800ebf8 <find_volume+0x144>
 800ebf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebf4:	3b01      	subs	r3, #1
 800ebf6:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ebf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebfa:	009b      	lsls	r3, r3, #2
 800ebfc:	3360      	adds	r3, #96	; 0x60
 800ebfe:	f107 0210 	add.w	r2, r7, #16
 800ec02:	4413      	add	r3, r2
 800ec04:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800ec08:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ec0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d005      	beq.n	800ec1c <find_volume+0x168>
 800ec10:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ec12:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ec14:	f7ff feea 	bl	800e9ec <check_fs>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	e000      	b.n	800ec1e <find_volume+0x16a>
 800ec1c:	2303      	movs	r3, #3
 800ec1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ec22:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ec26:	2b01      	cmp	r3, #1
 800ec28:	d905      	bls.n	800ec36 <find_volume+0x182>
 800ec2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec2c:	3301      	adds	r3, #1
 800ec2e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ec30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec32:	2b03      	cmp	r3, #3
 800ec34:	d9e0      	bls.n	800ebf8 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ec36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ec3a:	2b04      	cmp	r3, #4
 800ec3c:	d101      	bne.n	800ec42 <find_volume+0x18e>
 800ec3e:	2301      	movs	r3, #1
 800ec40:	e284      	b.n	800f14c <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ec42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d901      	bls.n	800ec4e <find_volume+0x19a>
 800ec4a:	230d      	movs	r3, #13
 800ec4c:	e27e      	b.n	800f14c <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800ec4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ec52:	2b01      	cmp	r3, #1
 800ec54:	f040 80fa 	bne.w	800ee4c <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800ec58:	230b      	movs	r3, #11
 800ec5a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ec5c:	e002      	b.n	800ec64 <find_volume+0x1b0>
 800ec5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec60:	3301      	adds	r3, #1
 800ec62:	65bb      	str	r3, [r7, #88]	; 0x58
 800ec64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec66:	2b3f      	cmp	r3, #63	; 0x3f
 800ec68:	d806      	bhi.n	800ec78 <find_volume+0x1c4>
 800ec6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ec6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec6e:	4413      	add	r3, r2
 800ec70:	3338      	adds	r3, #56	; 0x38
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d0f2      	beq.n	800ec5e <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800ec78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec7a:	2b3f      	cmp	r3, #63	; 0x3f
 800ec7c:	d801      	bhi.n	800ec82 <find_volume+0x1ce>
 800ec7e:	230d      	movs	r3, #13
 800ec80:	e264      	b.n	800f14c <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800ec82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec84:	3338      	adds	r3, #56	; 0x38
 800ec86:	3368      	adds	r3, #104	; 0x68
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7fd f85b 	bl	800bd44 <ld_word>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec94:	d001      	beq.n	800ec9a <find_volume+0x1e6>
 800ec96:	230d      	movs	r3, #13
 800ec98:	e258      	b.n	800f14c <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800ec9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec9c:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800eca0:	2b09      	cmp	r3, #9
 800eca2:	d001      	beq.n	800eca8 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800eca4:	230d      	movs	r3, #13
 800eca6:	e251      	b.n	800f14c <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800eca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecaa:	3338      	adds	r3, #56	; 0x38
 800ecac:	3348      	adds	r3, #72	; 0x48
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7fd f883 	bl	800bdba <ld_qword>
 800ecb4:	4602      	mov	r2, r0
 800ecb6:	460b      	mov	r3, r1
 800ecb8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ecba:	2000      	movs	r0, #0
 800ecbc:	60b9      	str	r1, [r7, #8]
 800ecbe:	60f8      	str	r0, [r7, #12]
 800ecc0:	68b9      	ldr	r1, [r7, #8]
 800ecc2:	1851      	adds	r1, r2, r1
 800ecc4:	6039      	str	r1, [r7, #0]
 800ecc6:	68f9      	ldr	r1, [r7, #12]
 800ecc8:	eb43 0101 	adc.w	r1, r3, r1
 800eccc:	6079      	str	r1, [r7, #4]
 800ecce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ecd2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800ecd6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ecda:	2b01      	cmp	r3, #1
 800ecdc:	d301      	bcc.n	800ece2 <find_volume+0x22e>
 800ecde:	230d      	movs	r3, #13
 800ece0:	e234      	b.n	800f14c <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800ece2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ece4:	3338      	adds	r3, #56	; 0x38
 800ece6:	3354      	adds	r3, #84	; 0x54
 800ece8:	4618      	mov	r0, r3
 800ecea:	f7fd f843 	bl	800bd74 <ld_dword>
 800ecee:	4602      	mov	r2, r0
 800ecf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecf2:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800ecf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecf6:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 800ecfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecfc:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800ecfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed00:	789b      	ldrb	r3, [r3, #2]
 800ed02:	2b01      	cmp	r3, #1
 800ed04:	d001      	beq.n	800ed0a <find_volume+0x256>
 800ed06:	230d      	movs	r3, #13
 800ed08:	e220      	b.n	800f14c <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800ed0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed0c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ed10:	461a      	mov	r2, r3
 800ed12:	2301      	movs	r3, #1
 800ed14:	4093      	lsls	r3, r2
 800ed16:	b29a      	uxth	r2, r3
 800ed18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed1a:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800ed1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed1e:	895b      	ldrh	r3, [r3, #10]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d101      	bne.n	800ed28 <find_volume+0x274>
 800ed24:	230d      	movs	r3, #13
 800ed26:	e211      	b.n	800f14c <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800ed28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed2a:	3338      	adds	r3, #56	; 0x38
 800ed2c:	335c      	adds	r3, #92	; 0x5c
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7fd f820 	bl	800bd74 <ld_dword>
 800ed34:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800ed36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed38:	4a03      	ldr	r2, [pc, #12]	; (800ed48 <find_volume+0x294>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d906      	bls.n	800ed4c <find_volume+0x298>
 800ed3e:	230d      	movs	r3, #13
 800ed40:	e204      	b.n	800f14c <find_volume+0x698>
 800ed42:	bf00      	nop
 800ed44:	20001c78 	.word	0x20001c78
 800ed48:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800ed4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed4e:	1c9a      	adds	r2, r3, #2
 800ed50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed52:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800ed54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ed58:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800ed5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed5c:	3338      	adds	r3, #56	; 0x38
 800ed5e:	3358      	adds	r3, #88	; 0x58
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7fd f807 	bl	800bd74 <ld_dword>
 800ed66:	4602      	mov	r2, r0
 800ed68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed6a:	441a      	add	r2, r3
 800ed6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed6e:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800ed70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed72:	3338      	adds	r3, #56	; 0x38
 800ed74:	3350      	adds	r3, #80	; 0x50
 800ed76:	4618      	mov	r0, r3
 800ed78:	f7fc fffc 	bl	800bd74 <ld_dword>
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed80:	441a      	add	r2, r3
 800ed82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed84:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800ed86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	469a      	mov	sl, r3
 800ed8e:	4693      	mov	fp, r2
 800ed90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed92:	895b      	ldrh	r3, [r3, #10]
 800ed94:	461a      	mov	r2, r3
 800ed96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed98:	fb02 f303 	mul.w	r3, r2, r3
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	4698      	mov	r8, r3
 800eda0:	4691      	mov	r9, r2
 800eda2:	eb1a 0408 	adds.w	r4, sl, r8
 800eda6:	eb4b 0509 	adc.w	r5, fp, r9
 800edaa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800edae:	42a2      	cmp	r2, r4
 800edb0:	41ab      	sbcs	r3, r5
 800edb2:	d201      	bcs.n	800edb8 <find_volume+0x304>
 800edb4:	230d      	movs	r3, #13
 800edb6:	e1c9      	b.n	800f14c <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800edb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edba:	3338      	adds	r3, #56	; 0x38
 800edbc:	3360      	adds	r3, #96	; 0x60
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7fc ffd8 	bl	800bd74 <ld_dword>
 800edc4:	4602      	mov	r2, r0
 800edc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edc8:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800edca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edce:	4619      	mov	r1, r3
 800edd0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800edd2:	f7fd fc67 	bl	800c6a4 <clust2sect>
 800edd6:	4603      	mov	r3, r0
 800edd8:	4619      	mov	r1, r3
 800edda:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800eddc:	f7fd fbc6 	bl	800c56c <move_window>
 800ede0:	4603      	mov	r3, r0
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d001      	beq.n	800edea <find_volume+0x336>
 800ede6:	2301      	movs	r3, #1
 800ede8:	e1b0      	b.n	800f14c <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800edea:	2300      	movs	r3, #0
 800edec:	65bb      	str	r3, [r7, #88]	; 0x58
 800edee:	e015      	b.n	800ee1c <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800edf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800edf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800edf4:	4413      	add	r3, r2
 800edf6:	3338      	adds	r3, #56	; 0x38
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	2b81      	cmp	r3, #129	; 0x81
 800edfc:	d10b      	bne.n	800ee16 <find_volume+0x362>
 800edfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee00:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ee04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee06:	3314      	adds	r3, #20
 800ee08:	4413      	add	r3, r2
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7fc ffb2 	bl	800bd74 <ld_dword>
 800ee10:	4603      	mov	r3, r0
 800ee12:	2b02      	cmp	r3, #2
 800ee14:	d007      	beq.n	800ee26 <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800ee16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee18:	3320      	adds	r3, #32
 800ee1a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ee1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee22:	d3e5      	bcc.n	800edf0 <find_volume+0x33c>
 800ee24:	e000      	b.n	800ee28 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800ee26:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800ee28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee2e:	d101      	bne.n	800ee34 <find_volume+0x380>
 800ee30:	230d      	movs	r3, #13
 800ee32:	e18b      	b.n	800f14c <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ee34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee36:	f04f 32ff 	mov.w	r2, #4294967295
 800ee3a:	619a      	str	r2, [r3, #24]
 800ee3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee3e:	699a      	ldr	r2, [r3, #24]
 800ee40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee42:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800ee44:	2304      	movs	r3, #4
 800ee46:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800ee4a:	e167      	b.n	800f11c <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ee4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee4e:	3338      	adds	r3, #56	; 0x38
 800ee50:	330b      	adds	r3, #11
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7fc ff76 	bl	800bd44 <ld_word>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee5e:	d001      	beq.n	800ee64 <find_volume+0x3b0>
 800ee60:	230d      	movs	r3, #13
 800ee62:	e173      	b.n	800f14c <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ee64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee66:	3338      	adds	r3, #56	; 0x38
 800ee68:	3316      	adds	r3, #22
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f7fc ff6a 	bl	800bd44 <ld_word>
 800ee70:	4603      	mov	r3, r0
 800ee72:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ee74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d106      	bne.n	800ee88 <find_volume+0x3d4>
 800ee7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee7c:	3338      	adds	r3, #56	; 0x38
 800ee7e:	3324      	adds	r3, #36	; 0x24
 800ee80:	4618      	mov	r0, r3
 800ee82:	f7fc ff77 	bl	800bd74 <ld_dword>
 800ee86:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 800ee88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee8a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ee8c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ee8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee90:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ee94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee96:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ee98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee9a:	789b      	ldrb	r3, [r3, #2]
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	d005      	beq.n	800eeac <find_volume+0x3f8>
 800eea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eea2:	789b      	ldrb	r3, [r3, #2]
 800eea4:	2b02      	cmp	r3, #2
 800eea6:	d001      	beq.n	800eeac <find_volume+0x3f8>
 800eea8:	230d      	movs	r3, #13
 800eeaa:	e14f      	b.n	800f14c <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800eeac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eeae:	789b      	ldrb	r3, [r3, #2]
 800eeb0:	461a      	mov	r2, r3
 800eeb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eeb4:	fb02 f303 	mul.w	r3, r2, r3
 800eeb8:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800eeba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eebc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eec0:	b29a      	uxth	r2, r3
 800eec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eec4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800eec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eec8:	895b      	ldrh	r3, [r3, #10]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d008      	beq.n	800eee0 <find_volume+0x42c>
 800eece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eed0:	895b      	ldrh	r3, [r3, #10]
 800eed2:	461a      	mov	r2, r3
 800eed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eed6:	895b      	ldrh	r3, [r3, #10]
 800eed8:	3b01      	subs	r3, #1
 800eeda:	4013      	ands	r3, r2
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d001      	beq.n	800eee4 <find_volume+0x430>
 800eee0:	230d      	movs	r3, #13
 800eee2:	e133      	b.n	800f14c <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800eee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eee6:	3338      	adds	r3, #56	; 0x38
 800eee8:	3311      	adds	r3, #17
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7fc ff2a 	bl	800bd44 <ld_word>
 800eef0:	4603      	mov	r3, r0
 800eef2:	461a      	mov	r2, r3
 800eef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eef6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800eef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eefa:	891b      	ldrh	r3, [r3, #8]
 800eefc:	f003 030f 	and.w	r3, r3, #15
 800ef00:	b29b      	uxth	r3, r3
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d001      	beq.n	800ef0a <find_volume+0x456>
 800ef06:	230d      	movs	r3, #13
 800ef08:	e120      	b.n	800f14c <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ef0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef0c:	3338      	adds	r3, #56	; 0x38
 800ef0e:	3313      	adds	r3, #19
 800ef10:	4618      	mov	r0, r3
 800ef12:	f7fc ff17 	bl	800bd44 <ld_word>
 800ef16:	4603      	mov	r3, r0
 800ef18:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ef1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d106      	bne.n	800ef2e <find_volume+0x47a>
 800ef20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef22:	3338      	adds	r3, #56	; 0x38
 800ef24:	3320      	adds	r3, #32
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7fc ff24 	bl	800bd74 <ld_dword>
 800ef2c:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ef2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef30:	3338      	adds	r3, #56	; 0x38
 800ef32:	330e      	adds	r3, #14
 800ef34:	4618      	mov	r0, r3
 800ef36:	f7fc ff05 	bl	800bd44 <ld_word>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ef40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d101      	bne.n	800ef4c <find_volume+0x498>
 800ef48:	230d      	movs	r3, #13
 800ef4a:	e0ff      	b.n	800f14c <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ef4c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ef50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef52:	4413      	add	r3, r2
 800ef54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ef56:	8912      	ldrh	r2, [r2, #8]
 800ef58:	0912      	lsrs	r2, r2, #4
 800ef5a:	b292      	uxth	r2, r2
 800ef5c:	4413      	add	r3, r2
 800ef5e:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ef60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ef62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef64:	429a      	cmp	r2, r3
 800ef66:	d201      	bcs.n	800ef6c <find_volume+0x4b8>
 800ef68:	230d      	movs	r3, #13
 800ef6a:	e0ef      	b.n	800f14c <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ef6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ef6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef70:	1ad3      	subs	r3, r2, r3
 800ef72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ef74:	8952      	ldrh	r2, [r2, #10]
 800ef76:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef7a:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ef7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d101      	bne.n	800ef86 <find_volume+0x4d2>
 800ef82:	230d      	movs	r3, #13
 800ef84:	e0e2      	b.n	800f14c <find_volume+0x698>
		fmt = FS_FAT32;
 800ef86:	2303      	movs	r3, #3
 800ef88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ef8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef8e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ef92:	4293      	cmp	r3, r2
 800ef94:	d802      	bhi.n	800ef9c <find_volume+0x4e8>
 800ef96:	2302      	movs	r3, #2
 800ef98:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ef9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef9e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d802      	bhi.n	800efac <find_volume+0x4f8>
 800efa6:	2301      	movs	r3, #1
 800efa8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800efac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efae:	1c9a      	adds	r2, r3, #2
 800efb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efb2:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800efb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800efb8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800efba:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800efbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800efc0:	441a      	add	r2, r3
 800efc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efc4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800efc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800efc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efca:	441a      	add	r2, r3
 800efcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efce:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800efd0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800efd4:	2b03      	cmp	r3, #3
 800efd6:	d11e      	bne.n	800f016 <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800efd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efda:	3338      	adds	r3, #56	; 0x38
 800efdc:	332a      	adds	r3, #42	; 0x2a
 800efde:	4618      	mov	r0, r3
 800efe0:	f7fc feb0 	bl	800bd44 <ld_word>
 800efe4:	4603      	mov	r3, r0
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d001      	beq.n	800efee <find_volume+0x53a>
 800efea:	230d      	movs	r3, #13
 800efec:	e0ae      	b.n	800f14c <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800efee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eff0:	891b      	ldrh	r3, [r3, #8]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d001      	beq.n	800effa <find_volume+0x546>
 800eff6:	230d      	movs	r3, #13
 800eff8:	e0a8      	b.n	800f14c <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800effa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800effc:	3338      	adds	r3, #56	; 0x38
 800effe:	332c      	adds	r3, #44	; 0x2c
 800f000:	4618      	mov	r0, r3
 800f002:	f7fc feb7 	bl	800bd74 <ld_dword>
 800f006:	4602      	mov	r2, r0
 800f008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f00a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f00c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f00e:	69db      	ldr	r3, [r3, #28]
 800f010:	009b      	lsls	r3, r3, #2
 800f012:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f014:	e01f      	b.n	800f056 <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f018:	891b      	ldrh	r3, [r3, #8]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d101      	bne.n	800f022 <find_volume+0x56e>
 800f01e:	230d      	movs	r3, #13
 800f020:	e094      	b.n	800f14c <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f028:	441a      	add	r2, r3
 800f02a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f02c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f02e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f032:	2b02      	cmp	r3, #2
 800f034:	d103      	bne.n	800f03e <find_volume+0x58a>
 800f036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f038:	69db      	ldr	r3, [r3, #28]
 800f03a:	005b      	lsls	r3, r3, #1
 800f03c:	e00a      	b.n	800f054 <find_volume+0x5a0>
 800f03e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f040:	69da      	ldr	r2, [r3, #28]
 800f042:	4613      	mov	r3, r2
 800f044:	005b      	lsls	r3, r3, #1
 800f046:	4413      	add	r3, r2
 800f048:	085a      	lsrs	r2, r3, #1
 800f04a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f04c:	69db      	ldr	r3, [r3, #28]
 800f04e:	f003 0301 	and.w	r3, r3, #1
 800f052:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f054:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f058:	6a1a      	ldr	r2, [r3, #32]
 800f05a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f05c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f060:	0a5b      	lsrs	r3, r3, #9
 800f062:	429a      	cmp	r2, r3
 800f064:	d201      	bcs.n	800f06a <find_volume+0x5b6>
 800f066:	230d      	movs	r3, #13
 800f068:	e070      	b.n	800f14c <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f06a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f06c:	f04f 32ff 	mov.w	r2, #4294967295
 800f070:	619a      	str	r2, [r3, #24]
 800f072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f074:	699a      	ldr	r2, [r3, #24]
 800f076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f078:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800f07a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f07c:	2280      	movs	r2, #128	; 0x80
 800f07e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f080:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f084:	2b03      	cmp	r3, #3
 800f086:	d149      	bne.n	800f11c <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f08a:	3338      	adds	r3, #56	; 0x38
 800f08c:	3330      	adds	r3, #48	; 0x30
 800f08e:	4618      	mov	r0, r3
 800f090:	f7fc fe58 	bl	800bd44 <ld_word>
 800f094:	4603      	mov	r3, r0
 800f096:	2b01      	cmp	r3, #1
 800f098:	d140      	bne.n	800f11c <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f09a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f09c:	3301      	adds	r3, #1
 800f09e:	4619      	mov	r1, r3
 800f0a0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f0a2:	f7fd fa63 	bl	800c56c <move_window>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d137      	bne.n	800f11c <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 800f0ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f0b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0b4:	3338      	adds	r3, #56	; 0x38
 800f0b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7fc fe42 	bl	800bd44 <ld_word>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d127      	bne.n	800f11c <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f0cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0ce:	3338      	adds	r3, #56	; 0x38
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7fc fe4f 	bl	800bd74 <ld_dword>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	4a1f      	ldr	r2, [pc, #124]	; (800f158 <find_volume+0x6a4>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d11e      	bne.n	800f11c <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f0de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0e0:	3338      	adds	r3, #56	; 0x38
 800f0e2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f7fc fe44 	bl	800bd74 <ld_dword>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	4a1b      	ldr	r2, [pc, #108]	; (800f15c <find_volume+0x6a8>)
 800f0f0:	4293      	cmp	r3, r2
 800f0f2:	d113      	bne.n	800f11c <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f0f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0f6:	3338      	adds	r3, #56	; 0x38
 800f0f8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f7fc fe39 	bl	800bd74 <ld_dword>
 800f102:	4602      	mov	r2, r0
 800f104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f106:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f10a:	3338      	adds	r3, #56	; 0x38
 800f10c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f110:	4618      	mov	r0, r3
 800f112:	f7fc fe2f 	bl	800bd74 <ld_dword>
 800f116:	4602      	mov	r2, r0
 800f118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f11a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f11c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f11e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800f122:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f124:	4b0e      	ldr	r3, [pc, #56]	; (800f160 <find_volume+0x6ac>)
 800f126:	881b      	ldrh	r3, [r3, #0]
 800f128:	3301      	adds	r3, #1
 800f12a:	b29a      	uxth	r2, r3
 800f12c:	4b0c      	ldr	r3, [pc, #48]	; (800f160 <find_volume+0x6ac>)
 800f12e:	801a      	strh	r2, [r3, #0]
 800f130:	4b0b      	ldr	r3, [pc, #44]	; (800f160 <find_volume+0x6ac>)
 800f132:	881a      	ldrh	r2, [r3, #0]
 800f134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f136:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f13a:	4a0a      	ldr	r2, [pc, #40]	; (800f164 <find_volume+0x6b0>)
 800f13c:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800f13e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f140:	4a09      	ldr	r2, [pc, #36]	; (800f168 <find_volume+0x6b4>)
 800f142:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f144:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f146:	f7fd f9a9 	bl	800c49c <clear_lock>
#endif
	return FR_OK;
 800f14a:	2300      	movs	r3, #0
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3770      	adds	r7, #112	; 0x70
 800f150:	46bd      	mov	sp, r7
 800f152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f156:	bf00      	nop
 800f158:	41615252 	.word	0x41615252
 800f15c:	61417272 	.word	0x61417272
 800f160:	20001c88 	.word	0x20001c88
 800f164:	20001f0c 	.word	0x20001f0c
 800f168:	20001cac 	.word	0x20001cac

0800f16c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b084      	sub	sp, #16
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f176:	2309      	movs	r3, #9
 800f178:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d01c      	beq.n	800f1ba <validate+0x4e>
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d018      	beq.n	800f1ba <validate+0x4e>
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	781b      	ldrb	r3, [r3, #0]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d013      	beq.n	800f1ba <validate+0x4e>
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	889a      	ldrh	r2, [r3, #4]
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	88db      	ldrh	r3, [r3, #6]
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d10c      	bne.n	800f1ba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	785b      	ldrb	r3, [r3, #1]
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f7fc fd2e 	bl	800bc08 <disk_status>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	f003 0301 	and.w	r3, r3, #1
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d101      	bne.n	800f1ba <validate+0x4e>
			res = FR_OK;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f1ba:	7bfb      	ldrb	r3, [r7, #15]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d102      	bne.n	800f1c6 <validate+0x5a>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	e000      	b.n	800f1c8 <validate+0x5c>
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	683a      	ldr	r2, [r7, #0]
 800f1ca:	6013      	str	r3, [r2, #0]
	return res;
 800f1cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3710      	adds	r7, #16
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}
	...

0800f1d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b088      	sub	sp, #32
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	60f8      	str	r0, [r7, #12]
 800f1e0:	60b9      	str	r1, [r7, #8]
 800f1e2:	4613      	mov	r3, r2
 800f1e4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f1ea:	f107 0310 	add.w	r3, r7, #16
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f7ff fbb7 	bl	800e962 <get_ldnumber>
 800f1f4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f1f6:	69fb      	ldr	r3, [r7, #28]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	da01      	bge.n	800f200 <f_mount+0x28>
 800f1fc:	230b      	movs	r3, #11
 800f1fe:	e02b      	b.n	800f258 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f200:	4a17      	ldr	r2, [pc, #92]	; (800f260 <f_mount+0x88>)
 800f202:	69fb      	ldr	r3, [r7, #28]
 800f204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f208:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f20a:	69bb      	ldr	r3, [r7, #24]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d005      	beq.n	800f21c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f210:	69b8      	ldr	r0, [r7, #24]
 800f212:	f7fd f943 	bl	800c49c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f216:	69bb      	ldr	r3, [r7, #24]
 800f218:	2200      	movs	r2, #0
 800f21a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d002      	beq.n	800f228 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	2200      	movs	r2, #0
 800f226:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f228:	68fa      	ldr	r2, [r7, #12]
 800f22a:	490d      	ldr	r1, [pc, #52]	; (800f260 <f_mount+0x88>)
 800f22c:	69fb      	ldr	r3, [r7, #28]
 800f22e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d002      	beq.n	800f23e <f_mount+0x66>
 800f238:	79fb      	ldrb	r3, [r7, #7]
 800f23a:	2b01      	cmp	r3, #1
 800f23c:	d001      	beq.n	800f242 <f_mount+0x6a>
 800f23e:	2300      	movs	r3, #0
 800f240:	e00a      	b.n	800f258 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f242:	f107 010c 	add.w	r1, r7, #12
 800f246:	f107 0308 	add.w	r3, r7, #8
 800f24a:	2200      	movs	r2, #0
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7ff fc31 	bl	800eab4 <find_volume>
 800f252:	4603      	mov	r3, r0
 800f254:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f256:	7dfb      	ldrb	r3, [r7, #23]
}
 800f258:	4618      	mov	r0, r3
 800f25a:	3720      	adds	r7, #32
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}
 800f260:	20001c78 	.word	0x20001c78

0800f264 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f268:	b0a6      	sub	sp, #152	; 0x98
 800f26a:	af00      	add	r7, sp, #0
 800f26c:	61f8      	str	r0, [r7, #28]
 800f26e:	61b9      	str	r1, [r7, #24]
 800f270:	4613      	mov	r3, r2
 800f272:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f274:	69fb      	ldr	r3, [r7, #28]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d101      	bne.n	800f27e <f_open+0x1a>
 800f27a:	2309      	movs	r3, #9
 800f27c:	e2ae      	b.n	800f7dc <f_open+0x578>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f27e:	7dfb      	ldrb	r3, [r7, #23]
 800f280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f284:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 800f286:	7dfa      	ldrb	r2, [r7, #23]
 800f288:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800f28c:	f107 0318 	add.w	r3, r7, #24
 800f290:	4618      	mov	r0, r3
 800f292:	f7ff fc0f 	bl	800eab4 <find_volume>
 800f296:	4603      	mov	r3, r0
 800f298:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (res == FR_OK) {
 800f29c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	f040 8292 	bne.w	800f7ca <f_open+0x566>
		dj.obj.fs = fs;
 800f2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a8:	62bb      	str	r3, [r7, #40]	; 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f2aa:	69ba      	ldr	r2, [r7, #24]
 800f2ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f2b0:	4611      	mov	r1, r2
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7ff faac 	bl	800e810 <follow_path>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f2be:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d11a      	bne.n	800f2fc <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f2c6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800f2ca:	b25b      	sxtb	r3, r3
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	da03      	bge.n	800f2d8 <f_open+0x74>
				res = FR_INVALID_NAME;
 800f2d0:	2306      	movs	r3, #6
 800f2d2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800f2d6:	e011      	b.n	800f2fc <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f2d8:	7dfb      	ldrb	r3, [r7, #23]
 800f2da:	f023 0301 	bic.w	r3, r3, #1
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	bf14      	ite	ne
 800f2e2:	2301      	movne	r3, #1
 800f2e4:	2300      	moveq	r3, #0
 800f2e6:	b2db      	uxtb	r3, r3
 800f2e8:	461a      	mov	r2, r3
 800f2ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f2ee:	4611      	mov	r1, r2
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7fc ff8b 	bl	800c20c <chk_lock>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f2fc:	7dfb      	ldrb	r3, [r7, #23]
 800f2fe:	f003 031c 	and.w	r3, r3, #28
 800f302:	2b00      	cmp	r3, #0
 800f304:	f000 8115 	beq.w	800f532 <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 800f308:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d017      	beq.n	800f340 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f310:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f314:	2b04      	cmp	r3, #4
 800f316:	d10e      	bne.n	800f336 <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f318:	f7fc ffd4 	bl	800c2c4 <enq_lock>
 800f31c:	4603      	mov	r3, r0
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d006      	beq.n	800f330 <f_open+0xcc>
 800f322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f326:	4618      	mov	r0, r3
 800f328:	f7fe ff14 	bl	800e154 <dir_register>
 800f32c:	4603      	mov	r3, r0
 800f32e:	e000      	b.n	800f332 <f_open+0xce>
 800f330:	2312      	movs	r3, #18
 800f332:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f336:	7dfb      	ldrb	r3, [r7, #23]
 800f338:	f043 0308 	orr.w	r3, r3, #8
 800f33c:	75fb      	strb	r3, [r7, #23]
 800f33e:	e011      	b.n	800f364 <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f340:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f344:	f003 0311 	and.w	r3, r3, #17
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d003      	beq.n	800f354 <f_open+0xf0>
					res = FR_DENIED;
 800f34c:	2307      	movs	r3, #7
 800f34e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800f352:	e007      	b.n	800f364 <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f354:	7dfb      	ldrb	r3, [r7, #23]
 800f356:	f003 0304 	and.w	r3, r3, #4
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d002      	beq.n	800f364 <f_open+0x100>
 800f35e:	2308      	movs	r3, #8
 800f360:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f364:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f368:	2b00      	cmp	r3, #0
 800f36a:	f040 80fe 	bne.w	800f56a <f_open+0x306>
 800f36e:	7dfb      	ldrb	r3, [r7, #23]
 800f370:	f003 0308 	and.w	r3, r3, #8
 800f374:	2b00      	cmp	r3, #0
 800f376:	f000 80f8 	beq.w	800f56a <f_open+0x306>
				dw = GET_FATTIME();
 800f37a:	f7f9 fe33 	bl	8008fe4 <get_fattime>
 800f37e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800f382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	2b04      	cmp	r3, #4
 800f388:	f040 8084 	bne.w	800f494 <f_open+0x230>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800f38c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f38e:	69fb      	ldr	r3, [r7, #28]
 800f390:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800f392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f394:	691b      	ldr	r3, [r3, #16]
 800f396:	3334      	adds	r3, #52	; 0x34
 800f398:	4618      	mov	r0, r3
 800f39a:	f7fc fceb 	bl	800bd74 <ld_dword>
 800f39e:	4602      	mov	r2, r0
 800f3a0:	69fb      	ldr	r3, [r7, #28]
 800f3a2:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a6:	691b      	ldr	r3, [r3, #16]
 800f3a8:	3338      	adds	r3, #56	; 0x38
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f7fc fd05 	bl	800bdba <ld_qword>
 800f3b0:	4602      	mov	r2, r0
 800f3b2:	460b      	mov	r3, r1
 800f3b4:	69f9      	ldr	r1, [r7, #28]
 800f3b6:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3bc:	691b      	ldr	r3, [r3, #16]
 800f3be:	3321      	adds	r3, #33	; 0x21
 800f3c0:	781b      	ldrb	r3, [r3, #0]
 800f3c2:	f003 0302 	and.w	r3, r3, #2
 800f3c6:	b2da      	uxtb	r2, r3
 800f3c8:	69fb      	ldr	r3, [r7, #28]
 800f3ca:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800f3cc:	69fb      	ldr	r3, [r7, #28]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800f3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d4:	691b      	ldr	r3, [r3, #16]
 800f3d6:	3308      	adds	r3, #8
 800f3d8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7fc fde2 	bl	800bfa6 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800f3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e4:	691b      	ldr	r3, [r3, #16]
 800f3e6:	3314      	adds	r3, #20
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800f3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ee:	691b      	ldr	r3, [r3, #16]
 800f3f0:	330c      	adds	r3, #12
 800f3f2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7fc fdd5 	bl	800bfa6 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800f3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3fe:	691b      	ldr	r3, [r3, #16]
 800f400:	3315      	adds	r3, #21
 800f402:	2200      	movs	r2, #0
 800f404:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800f406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f408:	691b      	ldr	r3, [r3, #16]
 800f40a:	3304      	adds	r3, #4
 800f40c:	2220      	movs	r2, #32
 800f40e:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800f410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f412:	691b      	ldr	r3, [r3, #16]
 800f414:	3334      	adds	r3, #52	; 0x34
 800f416:	2100      	movs	r1, #0
 800f418:	4618      	mov	r0, r3
 800f41a:	f7fc fdc4 	bl	800bfa6 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800f41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f420:	691b      	ldr	r3, [r3, #16]
 800f422:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f426:	f04f 0200 	mov.w	r2, #0
 800f42a:	f04f 0300 	mov.w	r3, #0
 800f42e:	4608      	mov	r0, r1
 800f430:	f7fc fde5 	bl	800bffe <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800f434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f436:	691b      	ldr	r3, [r3, #16]
 800f438:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800f43c:	f04f 0200 	mov.w	r2, #0
 800f440:	f04f 0300 	mov.w	r3, #0
 800f444:	4608      	mov	r0, r1
 800f446:	f7fc fdda 	bl	800bffe <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800f44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f44c:	691b      	ldr	r3, [r3, #16]
 800f44e:	3321      	adds	r3, #33	; 0x21
 800f450:	2201      	movs	r2, #1
 800f452:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800f454:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f458:	4618      	mov	r0, r3
 800f45a:	f7fe fbc9 	bl	800dbf0 <store_xdir>
 800f45e:	4603      	mov	r3, r0
 800f460:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800f464:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d17e      	bne.n	800f56a <f_open+0x306>
 800f46c:	69fb      	ldr	r3, [r7, #28]
 800f46e:	689b      	ldr	r3, [r3, #8]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d07a      	beq.n	800f56a <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800f474:	69f8      	ldr	r0, [r7, #28]
 800f476:	69fb      	ldr	r3, [r7, #28]
 800f478:	689b      	ldr	r3, [r3, #8]
 800f47a:	2200      	movs	r2, #0
 800f47c:	4619      	mov	r1, r3
 800f47e:	f7fd fc81 	bl	800cd84 <remove_chain>
 800f482:	4603      	mov	r3, r0
 800f484:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800f488:	69fb      	ldr	r3, [r7, #28]
 800f48a:	689a      	ldr	r2, [r3, #8]
 800f48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f48e:	3a01      	subs	r2, #1
 800f490:	615a      	str	r2, [r3, #20]
 800f492:	e06a      	b.n	800f56a <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f496:	330e      	adds	r3, #14
 800f498:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7fc fd82 	bl	800bfa6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f4a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f4a4:	3316      	adds	r3, #22
 800f4a6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f7fc fd7b 	bl	800bfa6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f4b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f4b2:	330b      	adds	r3, #11
 800f4b4:	2220      	movs	r2, #32
 800f4b6:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f4bc:	4611      	mov	r1, r2
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f7fe f810 	bl	800d4e4 <ld_clust>
 800f4c4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f7fe f827 	bl	800d522 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f4d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f4d6:	331c      	adds	r3, #28
 800f4d8:	2100      	movs	r1, #0
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7fc fd63 	bl	800bfa6 <st_dword>
					fs->wflag = 1;
 800f4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e2:	2201      	movs	r2, #1
 800f4e4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f4e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d03d      	beq.n	800f56a <f_open+0x306>
						dw = fs->winsect;
 800f4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						res = remove_chain(&dj.obj, cl, 0);
 800f4f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f500:	4618      	mov	r0, r3
 800f502:	f7fd fc3f 	bl	800cd84 <remove_chain>
 800f506:	4603      	mov	r3, r0
 800f508:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						if (res == FR_OK) {
 800f50c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f510:	2b00      	cmp	r3, #0
 800f512:	d12a      	bne.n	800f56a <f_open+0x306>
							res = move_window(fs, dw);
 800f514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f516:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f51a:	4618      	mov	r0, r3
 800f51c:	f7fd f826 	bl	800c56c <move_window>
 800f520:	4603      	mov	r3, r0
 800f522:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f528:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f52c:	3a01      	subs	r2, #1
 800f52e:	615a      	str	r2, [r3, #20]
 800f530:	e01b      	b.n	800f56a <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f532:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f536:	2b00      	cmp	r3, #0
 800f538:	d117      	bne.n	800f56a <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f53a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f53e:	f003 0310 	and.w	r3, r3, #16
 800f542:	2b00      	cmp	r3, #0
 800f544:	d003      	beq.n	800f54e <f_open+0x2ea>
					res = FR_NO_FILE;
 800f546:	2304      	movs	r3, #4
 800f548:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800f54c:	e00d      	b.n	800f56a <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f54e:	7dfb      	ldrb	r3, [r7, #23]
 800f550:	f003 0302 	and.w	r3, r3, #2
 800f554:	2b00      	cmp	r3, #0
 800f556:	d008      	beq.n	800f56a <f_open+0x306>
 800f558:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f55c:	f003 0301 	and.w	r3, r3, #1
 800f560:	2b00      	cmp	r3, #0
 800f562:	d002      	beq.n	800f56a <f_open+0x306>
						res = FR_DENIED;
 800f564:	2307      	movs	r3, #7
 800f566:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 800f56a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d128      	bne.n	800f5c4 <f_open+0x360>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f572:	7dfb      	ldrb	r3, [r7, #23]
 800f574:	f003 0308 	and.w	r3, r3, #8
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d003      	beq.n	800f584 <f_open+0x320>
				mode |= FA_MODIFIED;
 800f57c:	7dfb      	ldrb	r3, [r7, #23]
 800f57e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f582:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f588:	69fb      	ldr	r3, [r7, #28]
 800f58a:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800f58c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f58e:	69fb      	ldr	r3, [r7, #28]
 800f590:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f592:	7dfb      	ldrb	r3, [r7, #23]
 800f594:	f023 0301 	bic.w	r3, r3, #1
 800f598:	2b00      	cmp	r3, #0
 800f59a:	bf14      	ite	ne
 800f59c:	2301      	movne	r3, #1
 800f59e:	2300      	moveq	r3, #0
 800f5a0:	b2db      	uxtb	r3, r3
 800f5a2:	461a      	mov	r2, r3
 800f5a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f5a8:	4611      	mov	r1, r2
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7fc feac 	bl	800c308 <inc_lock>
 800f5b0:	4602      	mov	r2, r0
 800f5b2:	69fb      	ldr	r3, [r7, #28]
 800f5b4:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f5b6:	69fb      	ldr	r3, [r7, #28]
 800f5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d102      	bne.n	800f5c4 <f_open+0x360>
 800f5be:	2302      	movs	r3, #2
 800f5c0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f5c4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	f040 80fe 	bne.w	800f7ca <f_open+0x566>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800f5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d0:	781b      	ldrb	r3, [r3, #0]
 800f5d2:	2b04      	cmp	r3, #4
 800f5d4:	d12d      	bne.n	800f632 <f_open+0x3ce>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800f5d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5d8:	69fb      	ldr	r3, [r7, #28]
 800f5da:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800f5dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f5e0:	4613      	mov	r3, r2
 800f5e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f5e6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f5ea:	431a      	orrs	r2, r3
 800f5ec:	69fb      	ldr	r3, [r7, #28]
 800f5ee:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800f5f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f5f2:	69fb      	ldr	r3, [r7, #28]
 800f5f4:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800f5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f8:	691b      	ldr	r3, [r3, #16]
 800f5fa:	3334      	adds	r3, #52	; 0x34
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7fc fbb9 	bl	800bd74 <ld_dword>
 800f602:	4602      	mov	r2, r0
 800f604:	69fb      	ldr	r3, [r7, #28]
 800f606:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60a:	691b      	ldr	r3, [r3, #16]
 800f60c:	3338      	adds	r3, #56	; 0x38
 800f60e:	4618      	mov	r0, r3
 800f610:	f7fc fbd3 	bl	800bdba <ld_qword>
 800f614:	4602      	mov	r2, r0
 800f616:	460b      	mov	r3, r1
 800f618:	69f9      	ldr	r1, [r7, #28]
 800f61a:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f620:	691b      	ldr	r3, [r3, #16]
 800f622:	3321      	adds	r3, #33	; 0x21
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	f003 0302 	and.w	r3, r3, #2
 800f62a:	b2da      	uxtb	r2, r3
 800f62c:	69fb      	ldr	r3, [r7, #28]
 800f62e:	71da      	strb	r2, [r3, #7]
 800f630:	e016      	b.n	800f660 <f_open+0x3fc>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f634:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f636:	4611      	mov	r1, r2
 800f638:	4618      	mov	r0, r3
 800f63a:	f7fd ff53 	bl	800d4e4 <ld_clust>
 800f63e:	4602      	mov	r2, r0
 800f640:	69fb      	ldr	r3, [r7, #28]
 800f642:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f646:	331c      	adds	r3, #28
 800f648:	4618      	mov	r0, r3
 800f64a:	f7fc fb93 	bl	800bd74 <ld_dword>
 800f64e:	4603      	mov	r3, r0
 800f650:	2200      	movs	r2, #0
 800f652:	60bb      	str	r3, [r7, #8]
 800f654:	60fa      	str	r2, [r7, #12]
 800f656:	69fb      	ldr	r3, [r7, #28]
 800f658:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f65c:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f660:	69fb      	ldr	r3, [r7, #28]
 800f662:	2200      	movs	r2, #0
 800f664:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f66e:	88da      	ldrh	r2, [r3, #6]
 800f670:	69fb      	ldr	r3, [r7, #28]
 800f672:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f674:	69fb      	ldr	r3, [r7, #28]
 800f676:	7dfa      	ldrb	r2, [r7, #23]
 800f678:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800f67c:	69fb      	ldr	r3, [r7, #28]
 800f67e:	2200      	movs	r2, #0
 800f680:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800f684:	69fb      	ldr	r3, [r7, #28]
 800f686:	2200      	movs	r2, #0
 800f688:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f68a:	69f9      	ldr	r1, [r7, #28]
 800f68c:	f04f 0200 	mov.w	r2, #0
 800f690:	f04f 0300 	mov.w	r3, #0
 800f694:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f698:	69fb      	ldr	r3, [r7, #28]
 800f69a:	3354      	adds	r3, #84	; 0x54
 800f69c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f6a0:	2100      	movs	r1, #0
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7fc fd54 	bl	800c150 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f6a8:	7dfb      	ldrb	r3, [r7, #23]
 800f6aa:	f003 0320 	and.w	r3, r3, #32
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	f000 808b 	beq.w	800f7ca <f_open+0x566>
 800f6b4:	69fb      	ldr	r3, [r7, #28]
 800f6b6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f6ba:	4313      	orrs	r3, r2
 800f6bc:	f000 8085 	beq.w	800f7ca <f_open+0x566>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f6c0:	69fb      	ldr	r3, [r7, #28]
 800f6c2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f6c6:	69f9      	ldr	r1, [r7, #28]
 800f6c8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ce:	895b      	ldrh	r3, [r3, #10]
 800f6d0:	025b      	lsls	r3, r3, #9
 800f6d2:	67fb      	str	r3, [r7, #124]	; 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f6d4:	69fb      	ldr	r3, [r7, #28]
 800f6d6:	689b      	ldr	r3, [r3, #8]
 800f6d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f6dc:	69fb      	ldr	r3, [r7, #28]
 800f6de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f6e2:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 800f6e6:	e026      	b.n	800f736 <f_open+0x4d2>
					clst = get_fat(&fp->obj, clst);
 800f6e8:	69fb      	ldr	r3, [r7, #28]
 800f6ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f7fc fff8 	bl	800c6e4 <get_fat>
 800f6f4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
					if (clst <= 1) res = FR_INT_ERR;
 800f6f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f6fc:	2b01      	cmp	r3, #1
 800f6fe:	d802      	bhi.n	800f706 <f_open+0x4a2>
 800f700:	2302      	movs	r3, #2
 800f702:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f706:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f70e:	d102      	bne.n	800f716 <f_open+0x4b2>
 800f710:	2301      	movs	r3, #1
 800f712:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f716:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f718:	2200      	movs	r2, #0
 800f71a:	469a      	mov	sl, r3
 800f71c:	4693      	mov	fp, r2
 800f71e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f722:	ebb2 010a 	subs.w	r1, r2, sl
 800f726:	6039      	str	r1, [r7, #0]
 800f728:	eb63 030b 	sbc.w	r3, r3, fp
 800f72c:	607b      	str	r3, [r7, #4]
 800f72e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f732:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 800f736:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d109      	bne.n	800f752 <f_open+0x4ee>
 800f73e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f740:	2200      	movs	r2, #0
 800f742:	4698      	mov	r8, r3
 800f744:	4691      	mov	r9, r2
 800f746:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f74a:	4590      	cmp	r8, r2
 800f74c:	eb79 0303 	sbcs.w	r3, r9, r3
 800f750:	d3ca      	bcc.n	800f6e8 <f_open+0x484>
				}
				fp->clust = clst;
 800f752:	69fb      	ldr	r3, [r7, #28]
 800f754:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f758:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f75a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d133      	bne.n	800f7ca <f_open+0x566>
 800f762:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f766:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800f76a:	2500      	movs	r5, #0
 800f76c:	ea54 0305 	orrs.w	r3, r4, r5
 800f770:	d02b      	beq.n	800f7ca <f_open+0x566>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f774:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f778:	4618      	mov	r0, r3
 800f77a:	f7fc ff93 	bl	800c6a4 <clust2sect>
 800f77e:	67b8      	str	r0, [r7, #120]	; 0x78
 800f780:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f782:	2b00      	cmp	r3, #0
 800f784:	d103      	bne.n	800f78e <f_open+0x52a>
						res = FR_INT_ERR;
 800f786:	2302      	movs	r3, #2
 800f788:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800f78c:	e01d      	b.n	800f7ca <f_open+0x566>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f78e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800f792:	f04f 0200 	mov.w	r2, #0
 800f796:	f04f 0300 	mov.w	r3, #0
 800f79a:	0a42      	lsrs	r2, r0, #9
 800f79c:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800f7a0:	0a4b      	lsrs	r3, r1, #9
 800f7a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f7a4:	441a      	add	r2, r3
 800f7a6:	69fb      	ldr	r3, [r7, #28]
 800f7a8:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ac:	7858      	ldrb	r0, [r3, #1]
 800f7ae:	69fb      	ldr	r3, [r7, #28]
 800f7b0:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800f7b4:	69fb      	ldr	r3, [r7, #28]
 800f7b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	f7fc fa65 	bl	800bc88 <disk_read>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d002      	beq.n	800f7ca <f_open+0x566>
 800f7c4:	2301      	movs	r3, #1
 800f7c6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f7ca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d002      	beq.n	800f7d8 <f_open+0x574>
 800f7d2:	69fb      	ldr	r3, [r7, #28]
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f7d8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3798      	adds	r7, #152	; 0x98
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f7e6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f7e6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f7ea:	b08c      	sub	sp, #48	; 0x30
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	60f8      	str	r0, [r7, #12]
 800f7f0:	60b9      	str	r1, [r7, #8]
 800f7f2:	607a      	str	r2, [r7, #4]
 800f7f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	f107 0210 	add.w	r2, r7, #16
 800f806:	4611      	mov	r1, r2
 800f808:	4618      	mov	r0, r3
 800f80a:	f7ff fcaf 	bl	800f16c <validate>
 800f80e:	4603      	mov	r3, r0
 800f810:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f814:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d108      	bne.n	800f82e <f_write+0x48>
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d002      	beq.n	800f834 <f_write+0x4e>
 800f82e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f832:	e187      	b.n	800fb44 <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f83a:	f003 0302 	and.w	r3, r3, #2
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d101      	bne.n	800f846 <f_write+0x60>
 800f842:	2307      	movs	r3, #7
 800f844:	e17e      	b.n	800fb44 <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	2b04      	cmp	r3, #4
 800f84c:	f000 816a 	beq.w	800fb24 <f_write+0x33e>
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	18d1      	adds	r1, r2, r3
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f860:	4613      	mov	r3, r2
 800f862:	4299      	cmp	r1, r3
 800f864:	f080 815e 	bcs.w	800fb24 <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f86e:	4613      	mov	r3, r2
 800f870:	43db      	mvns	r3, r3
 800f872:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f874:	e156      	b.n	800fb24 <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f87c:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800f880:	2500      	movs	r5, #0
 800f882:	ea54 0305 	orrs.w	r3, r4, r5
 800f886:	f040 80fb 	bne.w	800fa80 <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800f890:	f04f 0200 	mov.w	r2, #0
 800f894:	f04f 0300 	mov.w	r3, #0
 800f898:	0a42      	lsrs	r2, r0, #9
 800f89a:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800f89e:	0a4b      	lsrs	r3, r1, #9
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	895b      	ldrh	r3, [r3, #10]
 800f8a4:	3b01      	subs	r3, #1
 800f8a6:	4013      	ands	r3, r2
 800f8a8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f8aa:	69bb      	ldr	r3, [r7, #24]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d146      	bne.n	800f93e <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f8b6:	4313      	orrs	r3, r2
 800f8b8:	d10c      	bne.n	800f8d4 <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	689b      	ldr	r3, [r3, #8]
 800f8be:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d11a      	bne.n	800f8fc <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2100      	movs	r1, #0
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7fd fb0e 	bl	800ceec <create_chain>
 800f8d0:	62b8      	str	r0, [r7, #40]	; 0x28
 800f8d2:	e013      	b.n	800f8fc <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d007      	beq.n	800f8ec <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f8e2:	68f8      	ldr	r0, [r7, #12]
 800f8e4:	f7fd fc03 	bl	800d0ee <clmt_clust>
 800f8e8:	62b8      	str	r0, [r7, #40]	; 0x28
 800f8ea:	e007      	b.n	800f8fc <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f8ec:	68fa      	ldr	r2, [r7, #12]
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8f2:	4619      	mov	r1, r3
 800f8f4:	4610      	mov	r0, r2
 800f8f6:	f7fd faf9 	bl	800ceec <create_chain>
 800f8fa:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	f000 8115 	beq.w	800fb2e <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f906:	2b01      	cmp	r3, #1
 800f908:	d105      	bne.n	800f916 <f_write+0x130>
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	2202      	movs	r2, #2
 800f90e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f912:	2302      	movs	r3, #2
 800f914:	e116      	b.n	800fb44 <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f91c:	d105      	bne.n	800f92a <f_write+0x144>
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2201      	movs	r2, #1
 800f922:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f926:	2301      	movs	r3, #1
 800f928:	e10c      	b.n	800fb44 <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f92e:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	689b      	ldr	r3, [r3, #8]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d102      	bne.n	800f93e <f_write+0x158>
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f93c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f944:	b25b      	sxtb	r3, r3
 800f946:	2b00      	cmp	r3, #0
 800f948:	da1b      	bge.n	800f982 <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	7858      	ldrb	r0, [r3, #1]
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f958:	2301      	movs	r3, #1
 800f95a:	f7fc f9b5 	bl	800bcc8 <disk_write>
 800f95e:	4603      	mov	r3, r0
 800f960:	2b00      	cmp	r3, #0
 800f962:	d005      	beq.n	800f970 <f_write+0x18a>
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	2201      	movs	r2, #1
 800f968:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f96c:	2301      	movs	r3, #1
 800f96e:	e0e9      	b.n	800fb44 <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f97a:	b2da      	uxtb	r2, r3
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f982:	693a      	ldr	r2, [r7, #16]
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f988:	4619      	mov	r1, r3
 800f98a:	4610      	mov	r0, r2
 800f98c:	f7fc fe8a 	bl	800c6a4 <clust2sect>
 800f990:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d105      	bne.n	800f9a4 <f_write+0x1be>
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	2202      	movs	r2, #2
 800f99c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f9a0:	2302      	movs	r3, #2
 800f9a2:	e0cf      	b.n	800fb44 <f_write+0x35e>
			sect += csect;
 800f9a4:	697a      	ldr	r2, [r7, #20]
 800f9a6:	69bb      	ldr	r3, [r7, #24]
 800f9a8:	4413      	add	r3, r2
 800f9aa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	0a5b      	lsrs	r3, r3, #9
 800f9b0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f9b2:	6a3b      	ldr	r3, [r7, #32]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d03f      	beq.n	800fa38 <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f9b8:	69ba      	ldr	r2, [r7, #24]
 800f9ba:	6a3b      	ldr	r3, [r7, #32]
 800f9bc:	4413      	add	r3, r2
 800f9be:	693a      	ldr	r2, [r7, #16]
 800f9c0:	8952      	ldrh	r2, [r2, #10]
 800f9c2:	4293      	cmp	r3, r2
 800f9c4:	d905      	bls.n	800f9d2 <f_write+0x1ec>
					cc = fs->csize - csect;
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	895b      	ldrh	r3, [r3, #10]
 800f9ca:	461a      	mov	r2, r3
 800f9cc:	69bb      	ldr	r3, [r7, #24]
 800f9ce:	1ad3      	subs	r3, r2, r3
 800f9d0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f9d2:	693b      	ldr	r3, [r7, #16]
 800f9d4:	7858      	ldrb	r0, [r3, #1]
 800f9d6:	6a3b      	ldr	r3, [r7, #32]
 800f9d8:	697a      	ldr	r2, [r7, #20]
 800f9da:	69f9      	ldr	r1, [r7, #28]
 800f9dc:	f7fc f974 	bl	800bcc8 <disk_write>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d005      	beq.n	800f9f2 <f_write+0x20c>
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	2201      	movs	r2, #1
 800f9ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	e0a8      	b.n	800fb44 <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	1ad3      	subs	r3, r2, r3
 800f9fa:	6a3a      	ldr	r2, [r7, #32]
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d917      	bls.n	800fa30 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	1ad3      	subs	r3, r2, r3
 800fa0e:	025b      	lsls	r3, r3, #9
 800fa10:	69fa      	ldr	r2, [r7, #28]
 800fa12:	4413      	add	r3, r2
 800fa14:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa18:	4619      	mov	r1, r3
 800fa1a:	f7fc fb78 	bl	800c10e <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa28:	b2da      	uxtb	r2, r3
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fa30:	6a3b      	ldr	r3, [r7, #32]
 800fa32:	025b      	lsls	r3, r3, #9
 800fa34:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800fa36:	e04a      	b.n	800face <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa3c:	697a      	ldr	r2, [r7, #20]
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	d01b      	beq.n	800fa7a <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fa4e:	4290      	cmp	r0, r2
 800fa50:	eb71 0303 	sbcs.w	r3, r1, r3
 800fa54:	d211      	bcs.n	800fa7a <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	7858      	ldrb	r0, [r3, #1]
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800fa60:	2301      	movs	r3, #1
 800fa62:	697a      	ldr	r2, [r7, #20]
 800fa64:	f7fc f910 	bl	800bc88 <disk_read>
 800fa68:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d005      	beq.n	800fa7a <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	2201      	movs	r2, #1
 800fa72:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fa76:	2301      	movs	r3, #1
 800fa78:	e064      	b.n	800fb44 <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	697a      	ldr	r2, [r7, #20]
 800fa7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fa86:	4613      	mov	r3, r2
 800fa88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa8c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800fa90:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fa92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d901      	bls.n	800fa9e <f_write+0x2b8>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800faaa:	4613      	mov	r3, r2
 800faac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fab0:	440b      	add	r3, r1
 800fab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fab4:	69f9      	ldr	r1, [r7, #28]
 800fab6:	4618      	mov	r0, r3
 800fab8:	f7fc fb29 	bl	800c10e <mem_cpy>
		fp->flag |= FA_DIRTY;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fac2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fac6:	b2da      	uxtb	r2, r3
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800face:	69fa      	ldr	r2, [r7, #28]
 800fad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad2:	4413      	add	r3, r2
 800fad4:	61fb      	str	r3, [r7, #28]
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fadc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fade:	2000      	movs	r0, #0
 800fae0:	4688      	mov	r8, r1
 800fae2:	4681      	mov	r9, r0
 800fae4:	eb12 0a08 	adds.w	sl, r2, r8
 800fae8:	eb43 0b09 	adc.w	fp, r3, r9
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800faf8:	68f9      	ldr	r1, [r7, #12]
 800fafa:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 800fafe:	4282      	cmp	r2, r0
 800fb00:	eb73 0c01 	sbcs.w	ip, r3, r1
 800fb04:	d201      	bcs.n	800fb0a <f_write+0x324>
 800fb06:	4602      	mov	r2, r0
 800fb08:	460b      	mov	r3, r1
 800fb0a:	68f9      	ldr	r1, [r7, #12]
 800fb0c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	681a      	ldr	r2, [r3, #0]
 800fb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb16:	441a      	add	r2, r3
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	601a      	str	r2, [r3, #0]
 800fb1c:	687a      	ldr	r2, [r7, #4]
 800fb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb20:	1ad3      	subs	r3, r2, r3
 800fb22:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	f47f aea5 	bne.w	800f876 <f_write+0x90>
 800fb2c:	e000      	b.n	800fb30 <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fb2e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fb36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb3a:	b2da      	uxtb	r2, r3
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800fb42:	2300      	movs	r3, #0
}
 800fb44:	4618      	mov	r0, r3
 800fb46:	3730      	adds	r7, #48	; 0x30
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fb4e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fb4e:	b580      	push	{r7, lr}
 800fb50:	b09a      	sub	sp, #104	; 0x68
 800fb52:	af00      	add	r7, sp, #0
 800fb54:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fb5c:	4611      	mov	r1, r2
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7ff fb04 	bl	800f16c <validate>
 800fb64:	4603      	mov	r3, r0
 800fb66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800fb6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	f040 8105 	bne.w	800fd7e <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fb7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	f000 80fd 	beq.w	800fd7e <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fb8a:	b25b      	sxtb	r3, r3
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	da17      	bge.n	800fbc0 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fb90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb92:	7858      	ldrb	r0, [r3, #1]
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb9e:	2301      	movs	r3, #1
 800fba0:	f7fc f892 	bl	800bcc8 <disk_write>
 800fba4:	4603      	mov	r3, r0
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d001      	beq.n	800fbae <f_sync+0x60>
 800fbaa:	2301      	movs	r3, #1
 800fbac:	e0e9      	b.n	800fd82 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fbb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fbb8:	b2da      	uxtb	r2, r3
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fbc0:	f7f9 fa10 	bl	8008fe4 <get_fattime>
 800fbc4:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800fbc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fbc8:	781b      	ldrb	r3, [r3, #0]
 800fbca:	2b04      	cmp	r3, #4
 800fbcc:	f040 808c 	bne.w	800fce8 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f7fd f876 	bl	800ccc4 <fill_first_frag>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800fbde:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d10a      	bne.n	800fbfc <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800fbe6:	6878      	ldr	r0, [r7, #4]
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbec:	f04f 32ff 	mov.w	r2, #4294967295
 800fbf0:	4619      	mov	r1, r3
 800fbf2:	f7fd f896 	bl	800cd22 <fill_last_frag>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 800fbfc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	f040 80bc 	bne.w	800fd7e <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800fc06:	687a      	ldr	r2, [r7, #4]
 800fc08:	f107 0308 	add.w	r3, r7, #8
 800fc0c:	4611      	mov	r1, r2
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f7fd ffb8 	bl	800db84 <load_obj_dir>
 800fc14:	4603      	mov	r3, r0
 800fc16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 800fc1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	f040 80ad 	bne.w	800fd7e <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800fc24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc26:	691b      	ldr	r3, [r3, #16]
 800fc28:	3304      	adds	r3, #4
 800fc2a:	781a      	ldrb	r2, [r3, #0]
 800fc2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc2e:	691b      	ldr	r3, [r3, #16]
 800fc30:	3304      	adds	r3, #4
 800fc32:	f042 0220 	orr.w	r2, r2, #32
 800fc36:	b2d2      	uxtb	r2, r2
 800fc38:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	79da      	ldrb	r2, [r3, #7]
 800fc3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc40:	691b      	ldr	r3, [r3, #16]
 800fc42:	3321      	adds	r3, #33	; 0x21
 800fc44:	f042 0201 	orr.w	r2, r2, #1
 800fc48:	b2d2      	uxtb	r2, r2
 800fc4a:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800fc4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc4e:	691b      	ldr	r3, [r3, #16]
 800fc50:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	689b      	ldr	r3, [r3, #8]
 800fc58:	4619      	mov	r1, r3
 800fc5a:	4610      	mov	r0, r2
 800fc5c:	f7fc f9a3 	bl	800bfa6 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800fc60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc62:	691b      	ldr	r3, [r3, #16]
 800fc64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fc6e:	4608      	mov	r0, r1
 800fc70:	f7fc f9c5 	bl	800bffe <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800fc74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc76:	691b      	ldr	r3, [r3, #16]
 800fc78:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fc82:	4608      	mov	r0, r1
 800fc84:	f7fc f9bb 	bl	800bffe <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800fc88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc8a:	691b      	ldr	r3, [r3, #16]
 800fc8c:	330c      	adds	r3, #12
 800fc8e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fc90:	4618      	mov	r0, r3
 800fc92:	f7fc f988 	bl	800bfa6 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800fc96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc98:	691b      	ldr	r3, [r3, #16]
 800fc9a:	3315      	adds	r3, #21
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800fca0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fca2:	691b      	ldr	r3, [r3, #16]
 800fca4:	3310      	adds	r3, #16
 800fca6:	2100      	movs	r1, #0
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f7fc f97c 	bl	800bfa6 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800fcae:	f107 0308 	add.w	r3, r7, #8
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7fd ff9c 	bl	800dbf0 <store_xdir>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800fcbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d15b      	bne.n	800fd7e <f_sync+0x230>
							res = sync_fs(fs);
 800fcc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f7fc fc7d 	bl	800c5c8 <sync_fs>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fcda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fcde:	b2da      	uxtb	r2, r3
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800fce6:	e04a      	b.n	800fd7e <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fce8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fcee:	4619      	mov	r1, r3
 800fcf0:	4610      	mov	r0, r2
 800fcf2:	f7fc fc3b 	bl	800c56c <move_window>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800fcfc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d13c      	bne.n	800fd7e <f_sync+0x230>
					dir = fp->dir_ptr;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd08:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fd0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd0c:	330b      	adds	r3, #11
 800fd0e:	781a      	ldrb	r2, [r3, #0]
 800fd10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd12:	330b      	adds	r3, #11
 800fd14:	f042 0220 	orr.w	r2, r2, #32
 800fd18:	b2d2      	uxtb	r2, r2
 800fd1a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6818      	ldr	r0, [r3, #0]
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	689b      	ldr	r3, [r3, #8]
 800fd24:	461a      	mov	r2, r3
 800fd26:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800fd28:	f7fd fbfb 	bl	800d522 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fd2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd2e:	f103 001c 	add.w	r0, r3, #28
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fd38:	4613      	mov	r3, r2
 800fd3a:	4619      	mov	r1, r3
 800fd3c:	f7fc f933 	bl	800bfa6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fd40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd42:	3316      	adds	r3, #22
 800fd44:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7fc f92d 	bl	800bfa6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fd4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd4e:	3312      	adds	r3, #18
 800fd50:	2100      	movs	r1, #0
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7fc f90c 	bl	800bf70 <st_word>
					fs->wflag = 1;
 800fd58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fd5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fd60:	4618      	mov	r0, r3
 800fd62:	f7fc fc31 	bl	800c5c8 <sync_fs>
 800fd66:	4603      	mov	r3, r0
 800fd68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fd72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd76:	b2da      	uxtb	r2, r3
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fd7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3768      	adds	r7, #104	; 0x68
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}

0800fd8a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fd8a:	b580      	push	{r7, lr}
 800fd8c:	b084      	sub	sp, #16
 800fd8e:	af00      	add	r7, sp, #0
 800fd90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f7ff fedb 	bl	800fb4e <f_sync>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fd9c:	7bfb      	ldrb	r3, [r7, #15]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d118      	bne.n	800fdd4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	f107 0208 	add.w	r2, r7, #8
 800fda8:	4611      	mov	r1, r2
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f7ff f9de 	bl	800f16c <validate>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fdb4:	7bfb      	ldrb	r3, [r7, #15]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d10c      	bne.n	800fdd4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7fc fb30 	bl	800c424 <dec_lock>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fdc8:	7bfb      	ldrb	r3, [r7, #15]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d102      	bne.n	800fdd4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800fdd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	3710      	adds	r7, #16
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}

0800fdde <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800fdde:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fde2:	b0b6      	sub	sp, #216	; 0xd8
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800fdea:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800fdee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fdf2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800fdf6:	4619      	mov	r1, r3
 800fdf8:	4610      	mov	r0, r2
 800fdfa:	f7ff f9b7 	bl	800f16c <validate>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	if (res == FR_OK) res = (FRESULT)fp->err;
 800fe04:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d105      	bne.n	800fe18 <f_lseek+0x3a>
 800fe0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fe10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fe14:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 800fe18:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d111      	bne.n	800fe44 <f_lseek+0x66>
 800fe20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fe24:	781b      	ldrb	r3, [r3, #0]
 800fe26:	2b04      	cmp	r3, #4
 800fe28:	d10c      	bne.n	800fe44 <f_lseek+0x66>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800fe2a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800fe2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fe32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe34:	f04f 32ff 	mov.w	r2, #4294967295
 800fe38:	4619      	mov	r1, r3
 800fe3a:	f7fc ff72 	bl	800cd22 <fill_last_frag>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800fe44:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d002      	beq.n	800fe52 <f_lseek+0x74>
 800fe4c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800fe50:	e38c      	b.n	801056c <f_lseek+0x78e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800fe52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fe56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	f000 8141 	beq.w	80100e0 <f_lseek+0x302>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800fe5e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800fe62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe66:	bf08      	it	eq
 800fe68:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800fe6c:	f040 8087 	bne.w	800ff7e <f_lseek+0x1a0>
			tbl = fp->cltbl;
 800fe70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fe74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800fe7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fe7e:	1d1a      	adds	r2, r3, #4
 800fe80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800fe8a:	2302      	movs	r3, #2
 800fe8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			cl = fp->obj.sclust;		/* Origin of the chain */
 800fe90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fe94:	689b      	ldr	r3, [r3, #8]
 800fe96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			if (cl) {
 800fe9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d058      	beq.n	800ff54 <f_lseek+0x176>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800fea2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fea6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800feaa:	2300      	movs	r3, #0
 800feac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800feb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800feb4:	3302      	adds	r3, #2
 800feb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					do {
						pcl = cl; ncl++;
 800feba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800febe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fec2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800fec6:	3301      	adds	r3, #1
 800fec8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
						cl = get_fat(&fp->obj, cl);
 800fecc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fed0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7fc fc05 	bl	800c6e4 <get_fat>
 800feda:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fede:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fee2:	2b01      	cmp	r3, #1
 800fee4:	d806      	bhi.n	800fef4 <f_lseek+0x116>
 800fee6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800feea:	2202      	movs	r2, #2
 800feec:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fef0:	2302      	movs	r3, #2
 800fef2:	e33b      	b.n	801056c <f_lseek+0x78e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fef4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fefc:	d106      	bne.n	800ff0c <f_lseek+0x12e>
 800fefe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ff02:	2201      	movs	r2, #1
 800ff04:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ff08:	2301      	movs	r3, #1
 800ff0a:	e32f      	b.n	801056c <f_lseek+0x78e>
					} while (cl == pcl + 1);
 800ff0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ff10:	3301      	adds	r3, #1
 800ff12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ff16:	429a      	cmp	r2, r3
 800ff18:	d0cf      	beq.n	800feba <f_lseek+0xdc>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ff1a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ff1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d80f      	bhi.n	800ff46 <f_lseek+0x168>
						*tbl++ = ncl; *tbl++ = tcl;
 800ff26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ff2a:	1d1a      	adds	r2, r3, #4
 800ff2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ff30:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ff34:	601a      	str	r2, [r3, #0]
 800ff36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ff3a:	1d1a      	adds	r2, r3, #4
 800ff3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ff40:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800ff44:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ff46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ff4a:	69db      	ldr	r3, [r3, #28]
 800ff4c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ff50:	429a      	cmp	r2, r3
 800ff52:	d3a6      	bcc.n	800fea2 <f_lseek+0xc4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ff54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ff58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff5a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ff5e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ff60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ff64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	d804      	bhi.n	800ff76 <f_lseek+0x198>
				*tbl = 0;		/* Terminate table */
 800ff6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ff70:	2200      	movs	r2, #0
 800ff72:	601a      	str	r2, [r3, #0]
 800ff74:	e2f8      	b.n	8010568 <f_lseek+0x78a>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ff76:	2311      	movs	r3, #17
 800ff78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800ff7c:	e2f4      	b.n	8010568 <f_lseek+0x78a>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ff7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ff82:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ff86:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800ff8a:	4290      	cmp	r0, r2
 800ff8c:	eb71 0303 	sbcs.w	r3, r1, r3
 800ff90:	d205      	bcs.n	800ff9e <f_lseek+0x1c0>
 800ff92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ff96:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ff9a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			fp->fptr = ofs;				/* Set file pointer */
 800ff9e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800ffa2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800ffa6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			if (ofs) {
 800ffaa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800ffae:	4313      	orrs	r3, r2
 800ffb0:	f000 82da 	beq.w	8010568 <f_lseek+0x78a>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ffb4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800ffb8:	f112 3aff 	adds.w	sl, r2, #4294967295
 800ffbc:	f143 3bff 	adc.w	fp, r3, #4294967295
 800ffc0:	4652      	mov	r2, sl
 800ffc2:	465b      	mov	r3, fp
 800ffc4:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800ffc8:	f7fd f891 	bl	800d0ee <clmt_clust>
 800ffcc:	4602      	mov	r2, r0
 800ffce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ffd2:	641a      	str	r2, [r3, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 800ffd4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ffd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ffdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffde:	4619      	mov	r1, r3
 800ffe0:	4610      	mov	r0, r2
 800ffe2:	f7fc fb5f 	bl	800c6a4 <clust2sect>
 800ffe6:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ffea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d106      	bne.n	8010000 <f_lseek+0x222>
 800fff2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fff6:	2202      	movs	r2, #2
 800fff8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fffc:	2302      	movs	r3, #2
 800fffe:	e2b5      	b.n	801056c <f_lseek+0x78e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010000:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010004:	1e54      	subs	r4, r2, #1
 8010006:	f143 35ff 	adc.w	r5, r3, #4294967295
 801000a:	f04f 0200 	mov.w	r2, #0
 801000e:	f04f 0300 	mov.w	r3, #0
 8010012:	0a62      	lsrs	r2, r4, #9
 8010014:	ea42 52c5 	orr.w	r2, r2, r5, lsl #23
 8010018:	0a6b      	lsrs	r3, r5, #9
 801001a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801001e:	895b      	ldrh	r3, [r3, #10]
 8010020:	3b01      	subs	r3, #1
 8010022:	4013      	ands	r3, r2
 8010024:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010028:	4413      	add	r3, r2
 801002a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801002e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010032:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010036:	f3c2 0808 	ubfx	r8, r2, #0, #9
 801003a:	f04f 0900 	mov.w	r9, #0
 801003e:	ea58 0309 	orrs.w	r3, r8, r9
 8010042:	f000 8291 	beq.w	8010568 <f_lseek+0x78a>
 8010046:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801004a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801004c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010050:	429a      	cmp	r2, r3
 8010052:	f000 8289 	beq.w	8010568 <f_lseek+0x78a>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010056:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801005a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801005e:	b25b      	sxtb	r3, r3
 8010060:	2b00      	cmp	r3, #0
 8010062:	da21      	bge.n	80100a8 <f_lseek+0x2ca>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010064:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010068:	7858      	ldrb	r0, [r3, #1]
 801006a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801006e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010072:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010076:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010078:	2301      	movs	r3, #1
 801007a:	f7fb fe25 	bl	800bcc8 <disk_write>
 801007e:	4603      	mov	r3, r0
 8010080:	2b00      	cmp	r3, #0
 8010082:	d006      	beq.n	8010092 <f_lseek+0x2b4>
 8010084:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010088:	2201      	movs	r2, #1
 801008a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801008e:	2301      	movs	r3, #1
 8010090:	e26c      	b.n	801056c <f_lseek+0x78e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010092:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010096:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801009a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801009e:	b2da      	uxtb	r2, r3
 80100a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80100a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80100a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80100ac:	7858      	ldrb	r0, [r3, #1]
 80100ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80100b2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80100b6:	2301      	movs	r3, #1
 80100b8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80100bc:	f7fb fde4 	bl	800bc88 <disk_read>
 80100c0:	4603      	mov	r3, r0
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d006      	beq.n	80100d4 <f_lseek+0x2f6>
 80100c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80100ca:	2201      	movs	r2, #1
 80100cc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80100d0:	2301      	movs	r3, #1
 80100d2:	e24b      	b.n	801056c <f_lseek+0x78e>
#endif
					fp->sect = dsc;
 80100d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80100d8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80100dc:	645a      	str	r2, [r3, #68]	; 0x44
 80100de:	e243      	b.n	8010568 <f_lseek+0x78a>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 80100e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80100e4:	781b      	ldrb	r3, [r3, #0]
 80100e6:	2b04      	cmp	r3, #4
 80100e8:	d009      	beq.n	80100fe <f_lseek+0x320>
 80100ea:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80100ee:	2b01      	cmp	r3, #1
 80100f0:	d305      	bcc.n	80100fe <f_lseek+0x320>
 80100f2:	f04f 32ff 	mov.w	r2, #4294967295
 80100f6:	f04f 0300 	mov.w	r3, #0
 80100fa:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80100fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010102:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8010106:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801010a:	4290      	cmp	r0, r2
 801010c:	eb71 0303 	sbcs.w	r3, r1, r3
 8010110:	d20d      	bcs.n	801012e <f_lseek+0x350>
 8010112:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010116:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801011a:	f003 0302 	and.w	r3, r3, #2
 801011e:	2b00      	cmp	r3, #0
 8010120:	d105      	bne.n	801012e <f_lseek+0x350>
			ofs = fp->obj.objsize;
 8010122:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010126:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801012a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		}
		ifptr = fp->fptr;
 801012e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010132:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010136:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
		fp->fptr = nsect = 0;
 801013a:	2300      	movs	r3, #0
 801013c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010140:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8010144:	f04f 0200 	mov.w	r2, #0
 8010148:	f04f 0300 	mov.w	r3, #0
 801014c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if (ofs) {
 8010150:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010154:	4313      	orrs	r3, r2
 8010156:	f000 818f 	beq.w	8010478 <f_lseek+0x69a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801015a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801015e:	895b      	ldrh	r3, [r3, #10]
 8010160:	025b      	lsls	r3, r3, #9
 8010162:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			if (ifptr > 0 &&
 8010166:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 801016a:	4313      	orrs	r3, r2
 801016c:	d06b      	beq.n	8010246 <f_lseek+0x468>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801016e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010172:	1e51      	subs	r1, r2, #1
 8010174:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8010178:	f143 33ff 	adc.w	r3, r3, #4294967295
 801017c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010180:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010184:	2200      	movs	r2, #0
 8010186:	67bb      	str	r3, [r7, #120]	; 0x78
 8010188:	67fa      	str	r2, [r7, #124]	; 0x7c
 801018a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 801018e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8010192:	f7f0 f885 	bl	80002a0 <__aeabi_uldivmod>
 8010196:	4602      	mov	r2, r0
 8010198:	460b      	mov	r3, r1
 801019a:	4614      	mov	r4, r2
 801019c:	461d      	mov	r5, r3
 801019e:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80101a2:	1e51      	subs	r1, r2, #1
 80101a4:	6739      	str	r1, [r7, #112]	; 0x70
 80101a6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80101aa:	677b      	str	r3, [r7, #116]	; 0x74
 80101ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80101b0:	2200      	movs	r2, #0
 80101b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80101b4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80101b6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80101ba:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80101be:	f7f0 f86f 	bl	80002a0 <__aeabi_uldivmod>
 80101c2:	4602      	mov	r2, r0
 80101c4:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 80101c6:	4294      	cmp	r4, r2
 80101c8:	eb75 0303 	sbcs.w	r3, r5, r3
 80101cc:	d33b      	bcc.n	8010246 <f_lseek+0x468>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80101ce:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80101d2:	1e51      	subs	r1, r2, #1
 80101d4:	6639      	str	r1, [r7, #96]	; 0x60
 80101d6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80101da:	667b      	str	r3, [r7, #100]	; 0x64
 80101dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80101e0:	3b01      	subs	r3, #1
 80101e2:	2200      	movs	r2, #0
 80101e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80101e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80101e8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80101ec:	460b      	mov	r3, r1
 80101ee:	43db      	mvns	r3, r3
 80101f0:	653b      	str	r3, [r7, #80]	; 0x50
 80101f2:	4613      	mov	r3, r2
 80101f4:	43db      	mvns	r3, r3
 80101f6:	657b      	str	r3, [r7, #84]	; 0x54
 80101f8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80101fc:	4623      	mov	r3, r4
 80101fe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010202:	4602      	mov	r2, r0
 8010204:	4013      	ands	r3, r2
 8010206:	64bb      	str	r3, [r7, #72]	; 0x48
 8010208:	462b      	mov	r3, r5
 801020a:	460a      	mov	r2, r1
 801020c:	4013      	ands	r3, r2
 801020e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010210:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010214:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8010218:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				ofs -= fp->fptr;
 801021c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010220:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010224:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010228:	1a14      	subs	r4, r2, r0
 801022a:	60bc      	str	r4, [r7, #8]
 801022c:	eb63 0301 	sbc.w	r3, r3, r1
 8010230:	60fb      	str	r3, [r7, #12]
 8010232:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010236:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				clst = fp->clust;
 801023a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801023e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010240:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010244:	e031      	b.n	80102aa <f_lseek+0x4cc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010246:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801024a:	689b      	ldr	r3, [r3, #8]
 801024c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010250:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010254:	2b00      	cmp	r3, #0
 8010256:	d123      	bne.n	80102a0 <f_lseek+0x4c2>
					clst = create_chain(&fp->obj, 0);
 8010258:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801025c:	2100      	movs	r1, #0
 801025e:	4618      	mov	r0, r3
 8010260:	f7fc fe44 	bl	800ceec <create_chain>
 8010264:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010268:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801026c:	2b01      	cmp	r3, #1
 801026e:	d106      	bne.n	801027e <f_lseek+0x4a0>
 8010270:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010274:	2202      	movs	r2, #2
 8010276:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801027a:	2302      	movs	r3, #2
 801027c:	e176      	b.n	801056c <f_lseek+0x78e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801027e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010286:	d106      	bne.n	8010296 <f_lseek+0x4b8>
 8010288:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801028c:	2201      	movs	r2, #1
 801028e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010292:	2301      	movs	r3, #1
 8010294:	e16a      	b.n	801056c <f_lseek+0x78e>
					fp->obj.sclust = clst;
 8010296:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801029a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801029e:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 80102a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80102a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80102a8:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (clst != 0) {
 80102aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	f000 80e2 	beq.w	8010478 <f_lseek+0x69a>
				while (ofs > bcs) {						/* Cluster following loop */
 80102b4:	e090      	b.n	80103d8 <f_lseek+0x5fa>
					ofs -= bcs; fp->fptr += bcs;
 80102b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80102ba:	2200      	movs	r2, #0
 80102bc:	643b      	str	r3, [r7, #64]	; 0x40
 80102be:	647a      	str	r2, [r7, #68]	; 0x44
 80102c0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80102c4:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80102c8:	4621      	mov	r1, r4
 80102ca:	1a51      	subs	r1, r2, r1
 80102cc:	6039      	str	r1, [r7, #0]
 80102ce:	4629      	mov	r1, r5
 80102d0:	eb63 0301 	sbc.w	r3, r3, r1
 80102d4:	607b      	str	r3, [r7, #4]
 80102d6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80102da:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
 80102de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80102e2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80102e6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80102ea:	2000      	movs	r0, #0
 80102ec:	63b9      	str	r1, [r7, #56]	; 0x38
 80102ee:	63f8      	str	r0, [r7, #60]	; 0x3c
 80102f0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80102f4:	4621      	mov	r1, r4
 80102f6:	1851      	adds	r1, r2, r1
 80102f8:	6339      	str	r1, [r7, #48]	; 0x30
 80102fa:	4629      	mov	r1, r5
 80102fc:	414b      	adcs	r3, r1
 80102fe:	637b      	str	r3, [r7, #52]	; 0x34
 8010300:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010304:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8010308:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801030c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010310:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010314:	f003 0302 	and.w	r3, r3, #2
 8010318:	2b00      	cmp	r3, #0
 801031a:	d031      	beq.n	8010380 <f_lseek+0x5a2>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 801031c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010320:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010324:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010328:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801032c:	4282      	cmp	r2, r0
 801032e:	418b      	sbcs	r3, r1
 8010330:	d212      	bcs.n	8010358 <f_lseek+0x57a>
							fp->obj.objsize = fp->fptr;
 8010332:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010336:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801033a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801033e:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 8010342:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010346:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801034a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801034e:	b2db      	uxtb	r3, r3
 8010350:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010354:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010358:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801035c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8010360:	4618      	mov	r0, r3
 8010362:	f7fc fdc3 	bl	800ceec <create_chain>
 8010366:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
						if (clst == 0) {				/* Clip file size in case of disk full */
 801036a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801036e:	2b00      	cmp	r3, #0
 8010370:	d10f      	bne.n	8010392 <f_lseek+0x5b4>
							ofs = 0; break;
 8010372:	f04f 0200 	mov.w	r2, #0
 8010376:	f04f 0300 	mov.w	r3, #0
 801037a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 801037e:	e03b      	b.n	80103f8 <f_lseek+0x61a>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010380:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010384:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8010388:	4618      	mov	r0, r3
 801038a:	f7fc f9ab 	bl	800c6e4 <get_fat>
 801038e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010392:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010396:	f1b3 3fff 	cmp.w	r3, #4294967295
 801039a:	d106      	bne.n	80103aa <f_lseek+0x5cc>
 801039c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80103a0:	2201      	movs	r2, #1
 80103a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80103a6:	2301      	movs	r3, #1
 80103a8:	e0e0      	b.n	801056c <f_lseek+0x78e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80103aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80103ae:	2b01      	cmp	r3, #1
 80103b0:	d906      	bls.n	80103c0 <f_lseek+0x5e2>
 80103b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80103b6:	69da      	ldr	r2, [r3, #28]
 80103b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80103bc:	4293      	cmp	r3, r2
 80103be:	d306      	bcc.n	80103ce <f_lseek+0x5f0>
 80103c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80103c4:	2202      	movs	r2, #2
 80103c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80103ca:	2302      	movs	r3, #2
 80103cc:	e0ce      	b.n	801056c <f_lseek+0x78e>
					fp->clust = clst;
 80103ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80103d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80103d6:	6413      	str	r3, [r2, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 80103d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80103dc:	2200      	movs	r2, #0
 80103de:	62bb      	str	r3, [r7, #40]	; 0x28
 80103e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80103e2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80103e6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80103ea:	4621      	mov	r1, r4
 80103ec:	4291      	cmp	r1, r2
 80103ee:	4629      	mov	r1, r5
 80103f0:	eb71 0303 	sbcs.w	r3, r1, r3
 80103f4:	f4ff af5f 	bcc.w	80102b6 <f_lseek+0x4d8>
				}
				fp->fptr += ofs;
 80103f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80103fc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010400:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010404:	1884      	adds	r4, r0, r2
 8010406:	623c      	str	r4, [r7, #32]
 8010408:	eb41 0303 	adc.w	r3, r1, r3
 801040c:	627b      	str	r3, [r7, #36]	; 0x24
 801040e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010412:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8010416:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				if (ofs % SS(fs)) {
 801041a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801041e:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8010422:	61bb      	str	r3, [r7, #24]
 8010424:	2300      	movs	r3, #0
 8010426:	61fb      	str	r3, [r7, #28]
 8010428:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801042c:	460b      	mov	r3, r1
 801042e:	4313      	orrs	r3, r2
 8010430:	d022      	beq.n	8010478 <f_lseek+0x69a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010432:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010436:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 801043a:	4618      	mov	r0, r3
 801043c:	f7fc f932 	bl	800c6a4 <clust2sect>
 8010440:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010444:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010448:	2b00      	cmp	r3, #0
 801044a:	d106      	bne.n	801045a <f_lseek+0x67c>
 801044c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010450:	2202      	movs	r2, #2
 8010452:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010456:	2302      	movs	r3, #2
 8010458:	e088      	b.n	801056c <f_lseek+0x78e>
					nsect += (DWORD)(ofs / SS(fs));
 801045a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 801045e:	f04f 0200 	mov.w	r2, #0
 8010462:	f04f 0300 	mov.w	r3, #0
 8010466:	0a42      	lsrs	r2, r0, #9
 8010468:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 801046c:	0a4b      	lsrs	r3, r1, #9
 801046e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010472:	4413      	add	r3, r2
 8010474:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010478:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801047c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010480:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8010484:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8010488:	4290      	cmp	r0, r2
 801048a:	eb71 0303 	sbcs.w	r3, r1, r3
 801048e:	d212      	bcs.n	80104b6 <f_lseek+0x6d8>
			fp->obj.objsize = fp->fptr;
 8010490:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010494:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010498:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801049c:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 80104a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80104a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80104a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104ac:	b2da      	uxtb	r2, r3
 80104ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80104b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80104b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80104ba:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80104be:	f3c2 0308 	ubfx	r3, r2, #0, #9
 80104c2:	613b      	str	r3, [r7, #16]
 80104c4:	2300      	movs	r3, #0
 80104c6:	617b      	str	r3, [r7, #20]
 80104c8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80104cc:	460b      	mov	r3, r1
 80104ce:	4313      	orrs	r3, r2
 80104d0:	d04a      	beq.n	8010568 <f_lseek+0x78a>
 80104d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80104d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104d8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80104dc:	429a      	cmp	r2, r3
 80104de:	d043      	beq.n	8010568 <f_lseek+0x78a>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80104e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80104e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80104e8:	b25b      	sxtb	r3, r3
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	da21      	bge.n	8010532 <f_lseek+0x754>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80104ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80104f2:	7858      	ldrb	r0, [r3, #1]
 80104f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80104f8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80104fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010502:	2301      	movs	r3, #1
 8010504:	f7fb fbe0 	bl	800bcc8 <disk_write>
 8010508:	4603      	mov	r3, r0
 801050a:	2b00      	cmp	r3, #0
 801050c:	d006      	beq.n	801051c <f_lseek+0x73e>
 801050e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010512:	2201      	movs	r2, #1
 8010514:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010518:	2301      	movs	r3, #1
 801051a:	e027      	b.n	801056c <f_lseek+0x78e>
				fp->flag &= (BYTE)~FA_DIRTY;
 801051c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010520:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010528:	b2da      	uxtb	r2, r3
 801052a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801052e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010532:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010536:	7858      	ldrb	r0, [r3, #1]
 8010538:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801053c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010540:	2301      	movs	r3, #1
 8010542:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8010546:	f7fb fb9f 	bl	800bc88 <disk_read>
 801054a:	4603      	mov	r3, r0
 801054c:	2b00      	cmp	r3, #0
 801054e:	d006      	beq.n	801055e <f_lseek+0x780>
 8010550:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010554:	2201      	movs	r2, #1
 8010556:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801055a:	2301      	movs	r3, #1
 801055c:	e006      	b.n	801056c <f_lseek+0x78e>
#endif
			fp->sect = nsect;
 801055e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010562:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8010566:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 8010568:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 801056c:	4618      	mov	r0, r3
 801056e:	37d8      	adds	r7, #216	; 0xd8
 8010570:	46bd      	mov	sp, r7
 8010572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010576 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8010576:	b580      	push	{r7, lr}
 8010578:	b09a      	sub	sp, #104	; 0x68
 801057a:	af00      	add	r7, sp, #0
 801057c:	60f8      	str	r0, [r7, #12]
 801057e:	60b9      	str	r1, [r7, #8]
 8010580:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8010582:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8010586:	f107 030c 	add.w	r3, r7, #12
 801058a:	2200      	movs	r2, #0
 801058c:	4618      	mov	r0, r3
 801058e:	f7fe fa91 	bl	800eab4 <find_volume>
 8010592:	4603      	mov	r3, r0
 8010594:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8010598:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801059c:	2b00      	cmp	r3, #0
 801059e:	f040 80e6 	bne.w	801076e <f_getfree+0x1f8>
		*fatfs = fs;				/* Return ptr to the fs object */
 80105a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80105a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105aa:	699a      	ldr	r2, [r3, #24]
 80105ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105ae:	69db      	ldr	r3, [r3, #28]
 80105b0:	3b02      	subs	r3, #2
 80105b2:	429a      	cmp	r2, r3
 80105b4:	d804      	bhi.n	80105c0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80105b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105b8:	699a      	ldr	r2, [r3, #24]
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	601a      	str	r2, [r3, #0]
 80105be:	e0d6      	b.n	801076e <f_getfree+0x1f8>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80105c0:	2300      	movs	r3, #0
 80105c2:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80105c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105c6:	781b      	ldrb	r3, [r3, #0]
 80105c8:	2b01      	cmp	r3, #1
 80105ca:	d128      	bne.n	801061e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80105cc:	2302      	movs	r3, #2
 80105ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80105d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105d2:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 80105d4:	f107 0310 	add.w	r3, r7, #16
 80105d8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80105da:	4618      	mov	r0, r3
 80105dc:	f7fc f882 	bl	800c6e4 <get_fat>
 80105e0:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80105e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105e8:	d103      	bne.n	80105f2 <f_getfree+0x7c>
 80105ea:	2301      	movs	r3, #1
 80105ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80105f0:	e0b0      	b.n	8010754 <f_getfree+0x1de>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80105f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105f4:	2b01      	cmp	r3, #1
 80105f6:	d103      	bne.n	8010600 <f_getfree+0x8a>
 80105f8:	2302      	movs	r3, #2
 80105fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80105fe:	e0a9      	b.n	8010754 <f_getfree+0x1de>
					if (stat == 0) nfree++;
 8010600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010602:	2b00      	cmp	r3, #0
 8010604:	d102      	bne.n	801060c <f_getfree+0x96>
 8010606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010608:	3301      	adds	r3, #1
 801060a:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 801060c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801060e:	3301      	adds	r3, #1
 8010610:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010614:	69db      	ldr	r3, [r3, #28]
 8010616:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010618:	429a      	cmp	r2, r3
 801061a:	d3db      	bcc.n	80105d4 <f_getfree+0x5e>
 801061c:	e09a      	b.n	8010754 <f_getfree+0x1de>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 801061e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010620:	781b      	ldrb	r3, [r3, #0]
 8010622:	2b04      	cmp	r3, #4
 8010624:	d146      	bne.n	80106b4 <f_getfree+0x13e>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 8010626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010628:	69db      	ldr	r3, [r3, #28]
 801062a:	3b02      	subs	r3, #2
 801062c:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 801062e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010632:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 8010634:	2300      	movs	r3, #0
 8010636:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 8010638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801063a:	2b00      	cmp	r3, #0
 801063c:	d10d      	bne.n	801065a <f_getfree+0xe4>
 801063e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010642:	1c5a      	adds	r2, r3, #1
 8010644:	65ba      	str	r2, [r7, #88]	; 0x58
 8010646:	4619      	mov	r1, r3
 8010648:	f7fb ff90 	bl	800c56c <move_window>
 801064c:	4603      	mov	r3, r0
 801064e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010652:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010656:	2b00      	cmp	r3, #0
 8010658:	d179      	bne.n	801074e <f_getfree+0x1d8>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 801065a:	2308      	movs	r3, #8
 801065c:	64bb      	str	r3, [r7, #72]	; 0x48
 801065e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010662:	4413      	add	r3, r2
 8010664:	3338      	adds	r3, #56	; 0x38
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801066c:	e013      	b.n	8010696 <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 801066e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010672:	f003 0301 	and.w	r3, r3, #1
 8010676:	2b00      	cmp	r3, #0
 8010678:	d102      	bne.n	8010680 <f_getfree+0x10a>
 801067a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801067c:	3301      	adds	r3, #1
 801067e:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 8010680:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010684:	085b      	lsrs	r3, r3, #1
 8010686:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 801068a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801068c:	3b01      	subs	r3, #1
 801068e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010690:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010692:	3b01      	subs	r3, #1
 8010694:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010698:	2b00      	cmp	r3, #0
 801069a:	d002      	beq.n	80106a2 <f_getfree+0x12c>
 801069c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d1e5      	bne.n	801066e <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 80106a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106a4:	3301      	adds	r3, #1
 80106a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106aa:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 80106ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d1c2      	bne.n	8010638 <f_getfree+0xc2>
 80106b2:	e04f      	b.n	8010754 <f_getfree+0x1de>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80106b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106b6:	69db      	ldr	r3, [r3, #28]
 80106b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80106ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106be:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 80106c0:	2300      	movs	r3, #0
 80106c2:	657b      	str	r3, [r7, #84]	; 0x54
 80106c4:	2300      	movs	r3, #0
 80106c6:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 80106c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d113      	bne.n	80106f6 <f_getfree+0x180>
							res = move_window(fs, sect++);
 80106ce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80106d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80106d2:	1c5a      	adds	r2, r3, #1
 80106d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80106d6:	4619      	mov	r1, r3
 80106d8:	f7fb ff48 	bl	800c56c <move_window>
 80106dc:	4603      	mov	r3, r0
 80106de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 80106e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d133      	bne.n	8010752 <f_getfree+0x1dc>
							p = fs->win;
 80106ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106ec:	3338      	adds	r3, #56	; 0x38
 80106ee:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 80106f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80106f4:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 80106f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106f8:	781b      	ldrb	r3, [r3, #0]
 80106fa:	2b02      	cmp	r3, #2
 80106fc:	d10f      	bne.n	801071e <f_getfree+0x1a8>
							if (ld_word(p) == 0) nfree++;
 80106fe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010700:	f7fb fb20 	bl	800bd44 <ld_word>
 8010704:	4603      	mov	r3, r0
 8010706:	2b00      	cmp	r3, #0
 8010708:	d102      	bne.n	8010710 <f_getfree+0x19a>
 801070a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801070c:	3301      	adds	r3, #1
 801070e:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 8010710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010712:	3302      	adds	r3, #2
 8010714:	653b      	str	r3, [r7, #80]	; 0x50
 8010716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010718:	3b02      	subs	r3, #2
 801071a:	657b      	str	r3, [r7, #84]	; 0x54
 801071c:	e010      	b.n	8010740 <f_getfree+0x1ca>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 801071e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010720:	f7fb fb28 	bl	800bd74 <ld_dword>
 8010724:	4603      	mov	r3, r0
 8010726:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801072a:	2b00      	cmp	r3, #0
 801072c:	d102      	bne.n	8010734 <f_getfree+0x1be>
 801072e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010730:	3301      	adds	r3, #1
 8010732:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 8010734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010736:	3304      	adds	r3, #4
 8010738:	653b      	str	r3, [r7, #80]	; 0x50
 801073a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801073c:	3b04      	subs	r3, #4
 801073e:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 8010740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010742:	3b01      	subs	r3, #1
 8010744:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010748:	2b00      	cmp	r3, #0
 801074a:	d1bd      	bne.n	80106c8 <f_getfree+0x152>
 801074c:	e002      	b.n	8010754 <f_getfree+0x1de>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 801074e:	bf00      	nop
 8010750:	e000      	b.n	8010754 <f_getfree+0x1de>
							if (res != FR_OK) break;
 8010752:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010758:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 801075a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801075c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801075e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8010760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010762:	791a      	ldrb	r2, [r3, #4]
 8010764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010766:	f042 0201 	orr.w	r2, r2, #1
 801076a:	b2d2      	uxtb	r2, r2
 801076c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 801076e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010772:	4618      	mov	r0, r3
 8010774:	3768      	adds	r7, #104	; 0x68
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}
	...

0801077c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801077c:	b480      	push	{r7}
 801077e:	b087      	sub	sp, #28
 8010780:	af00      	add	r7, sp, #0
 8010782:	60f8      	str	r0, [r7, #12]
 8010784:	60b9      	str	r1, [r7, #8]
 8010786:	4613      	mov	r3, r2
 8010788:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801078a:	2301      	movs	r3, #1
 801078c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801078e:	2300      	movs	r3, #0
 8010790:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010792:	4b1f      	ldr	r3, [pc, #124]	; (8010810 <FATFS_LinkDriverEx+0x94>)
 8010794:	7e1b      	ldrb	r3, [r3, #24]
 8010796:	b2db      	uxtb	r3, r3
 8010798:	2b03      	cmp	r3, #3
 801079a:	d831      	bhi.n	8010800 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801079c:	4b1c      	ldr	r3, [pc, #112]	; (8010810 <FATFS_LinkDriverEx+0x94>)
 801079e:	7e1b      	ldrb	r3, [r3, #24]
 80107a0:	b2db      	uxtb	r3, r3
 80107a2:	461a      	mov	r2, r3
 80107a4:	4b1a      	ldr	r3, [pc, #104]	; (8010810 <FATFS_LinkDriverEx+0x94>)
 80107a6:	2100      	movs	r1, #0
 80107a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80107aa:	4b19      	ldr	r3, [pc, #100]	; (8010810 <FATFS_LinkDriverEx+0x94>)
 80107ac:	7e1b      	ldrb	r3, [r3, #24]
 80107ae:	b2db      	uxtb	r3, r3
 80107b0:	4a17      	ldr	r2, [pc, #92]	; (8010810 <FATFS_LinkDriverEx+0x94>)
 80107b2:	009b      	lsls	r3, r3, #2
 80107b4:	4413      	add	r3, r2
 80107b6:	68fa      	ldr	r2, [r7, #12]
 80107b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80107ba:	4b15      	ldr	r3, [pc, #84]	; (8010810 <FATFS_LinkDriverEx+0x94>)
 80107bc:	7e1b      	ldrb	r3, [r3, #24]
 80107be:	b2db      	uxtb	r3, r3
 80107c0:	461a      	mov	r2, r3
 80107c2:	4b13      	ldr	r3, [pc, #76]	; (8010810 <FATFS_LinkDriverEx+0x94>)
 80107c4:	4413      	add	r3, r2
 80107c6:	79fa      	ldrb	r2, [r7, #7]
 80107c8:	751a      	strb	r2, [r3, #20]
    DiskNum = disk.nbr++;
 80107ca:	4b11      	ldr	r3, [pc, #68]	; (8010810 <FATFS_LinkDriverEx+0x94>)
 80107cc:	7e1b      	ldrb	r3, [r3, #24]
 80107ce:	b2db      	uxtb	r3, r3
 80107d0:	1c5a      	adds	r2, r3, #1
 80107d2:	b2d1      	uxtb	r1, r2
 80107d4:	4a0e      	ldr	r2, [pc, #56]	; (8010810 <FATFS_LinkDriverEx+0x94>)
 80107d6:	7611      	strb	r1, [r2, #24]
 80107d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80107da:	7dbb      	ldrb	r3, [r7, #22]
 80107dc:	3330      	adds	r3, #48	; 0x30
 80107de:	b2da      	uxtb	r2, r3
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	3301      	adds	r3, #1
 80107e8:	223a      	movs	r2, #58	; 0x3a
 80107ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	3302      	adds	r3, #2
 80107f0:	222f      	movs	r2, #47	; 0x2f
 80107f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	3303      	adds	r3, #3
 80107f8:	2200      	movs	r2, #0
 80107fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80107fc:	2300      	movs	r3, #0
 80107fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010800:	7dfb      	ldrb	r3, [r7, #23]
}
 8010802:	4618      	mov	r0, r3
 8010804:	371c      	adds	r7, #28
 8010806:	46bd      	mov	sp, r7
 8010808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080c:	4770      	bx	lr
 801080e:	bf00      	nop
 8010810:	2000210c 	.word	0x2000210c

08010814 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b082      	sub	sp, #8
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
 801081c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801081e:	2200      	movs	r2, #0
 8010820:	6839      	ldr	r1, [r7, #0]
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f7ff ffaa 	bl	801077c <FATFS_LinkDriverEx>
 8010828:	4603      	mov	r3, r0
}
 801082a:	4618      	mov	r0, r3
 801082c:	3708      	adds	r7, #8
 801082e:	46bd      	mov	sp, r7
 8010830:	bd80      	pop	{r7, pc}
	...

08010834 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010834:	b480      	push	{r7}
 8010836:	b085      	sub	sp, #20
 8010838:	af00      	add	r7, sp, #0
 801083a:	4603      	mov	r3, r0
 801083c:	6039      	str	r1, [r7, #0]
 801083e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010840:	88fb      	ldrh	r3, [r7, #6]
 8010842:	2b7f      	cmp	r3, #127	; 0x7f
 8010844:	d802      	bhi.n	801084c <ff_convert+0x18>
		c = chr;
 8010846:	88fb      	ldrh	r3, [r7, #6]
 8010848:	81fb      	strh	r3, [r7, #14]
 801084a:	e025      	b.n	8010898 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d00b      	beq.n	801086a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010852:	88fb      	ldrh	r3, [r7, #6]
 8010854:	2bff      	cmp	r3, #255	; 0xff
 8010856:	d805      	bhi.n	8010864 <ff_convert+0x30>
 8010858:	88fb      	ldrh	r3, [r7, #6]
 801085a:	3b80      	subs	r3, #128	; 0x80
 801085c:	4a12      	ldr	r2, [pc, #72]	; (80108a8 <ff_convert+0x74>)
 801085e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010862:	e000      	b.n	8010866 <ff_convert+0x32>
 8010864:	2300      	movs	r3, #0
 8010866:	81fb      	strh	r3, [r7, #14]
 8010868:	e016      	b.n	8010898 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801086a:	2300      	movs	r3, #0
 801086c:	81fb      	strh	r3, [r7, #14]
 801086e:	e009      	b.n	8010884 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010870:	89fb      	ldrh	r3, [r7, #14]
 8010872:	4a0d      	ldr	r2, [pc, #52]	; (80108a8 <ff_convert+0x74>)
 8010874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010878:	88fa      	ldrh	r2, [r7, #6]
 801087a:	429a      	cmp	r2, r3
 801087c:	d006      	beq.n	801088c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801087e:	89fb      	ldrh	r3, [r7, #14]
 8010880:	3301      	adds	r3, #1
 8010882:	81fb      	strh	r3, [r7, #14]
 8010884:	89fb      	ldrh	r3, [r7, #14]
 8010886:	2b7f      	cmp	r3, #127	; 0x7f
 8010888:	d9f2      	bls.n	8010870 <ff_convert+0x3c>
 801088a:	e000      	b.n	801088e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801088c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801088e:	89fb      	ldrh	r3, [r7, #14]
 8010890:	3380      	adds	r3, #128	; 0x80
 8010892:	b29b      	uxth	r3, r3
 8010894:	b2db      	uxtb	r3, r3
 8010896:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010898:	89fb      	ldrh	r3, [r7, #14]
}
 801089a:	4618      	mov	r0, r3
 801089c:	3714      	adds	r7, #20
 801089e:	46bd      	mov	sp, r7
 80108a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a4:	4770      	bx	lr
 80108a6:	bf00      	nop
 80108a8:	08014f90 	.word	0x08014f90

080108ac <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80108ac:	b480      	push	{r7}
 80108ae:	b087      	sub	sp, #28
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	4603      	mov	r3, r0
 80108b4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80108b6:	88fb      	ldrh	r3, [r7, #6]
 80108b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80108bc:	d201      	bcs.n	80108c2 <ff_wtoupper+0x16>
 80108be:	4b3e      	ldr	r3, [pc, #248]	; (80109b8 <ff_wtoupper+0x10c>)
 80108c0:	e000      	b.n	80108c4 <ff_wtoupper+0x18>
 80108c2:	4b3e      	ldr	r3, [pc, #248]	; (80109bc <ff_wtoupper+0x110>)
 80108c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	1c9a      	adds	r2, r3, #2
 80108ca:	617a      	str	r2, [r7, #20]
 80108cc:	881b      	ldrh	r3, [r3, #0]
 80108ce:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80108d0:	8a7b      	ldrh	r3, [r7, #18]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d068      	beq.n	80109a8 <ff_wtoupper+0xfc>
 80108d6:	88fa      	ldrh	r2, [r7, #6]
 80108d8:	8a7b      	ldrh	r3, [r7, #18]
 80108da:	429a      	cmp	r2, r3
 80108dc:	d364      	bcc.n	80109a8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80108de:	697b      	ldr	r3, [r7, #20]
 80108e0:	1c9a      	adds	r2, r3, #2
 80108e2:	617a      	str	r2, [r7, #20]
 80108e4:	881b      	ldrh	r3, [r3, #0]
 80108e6:	823b      	strh	r3, [r7, #16]
 80108e8:	8a3b      	ldrh	r3, [r7, #16]
 80108ea:	0a1b      	lsrs	r3, r3, #8
 80108ec:	81fb      	strh	r3, [r7, #14]
 80108ee:	8a3b      	ldrh	r3, [r7, #16]
 80108f0:	b2db      	uxtb	r3, r3
 80108f2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80108f4:	88fa      	ldrh	r2, [r7, #6]
 80108f6:	8a79      	ldrh	r1, [r7, #18]
 80108f8:	8a3b      	ldrh	r3, [r7, #16]
 80108fa:	440b      	add	r3, r1
 80108fc:	429a      	cmp	r2, r3
 80108fe:	da49      	bge.n	8010994 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010900:	89fb      	ldrh	r3, [r7, #14]
 8010902:	2b08      	cmp	r3, #8
 8010904:	d84f      	bhi.n	80109a6 <ff_wtoupper+0xfa>
 8010906:	a201      	add	r2, pc, #4	; (adr r2, 801090c <ff_wtoupper+0x60>)
 8010908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801090c:	08010931 	.word	0x08010931
 8010910:	08010943 	.word	0x08010943
 8010914:	08010959 	.word	0x08010959
 8010918:	08010961 	.word	0x08010961
 801091c:	08010969 	.word	0x08010969
 8010920:	08010971 	.word	0x08010971
 8010924:	08010979 	.word	0x08010979
 8010928:	08010981 	.word	0x08010981
 801092c:	08010989 	.word	0x08010989
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010930:	88fa      	ldrh	r2, [r7, #6]
 8010932:	8a7b      	ldrh	r3, [r7, #18]
 8010934:	1ad3      	subs	r3, r2, r3
 8010936:	005b      	lsls	r3, r3, #1
 8010938:	697a      	ldr	r2, [r7, #20]
 801093a:	4413      	add	r3, r2
 801093c:	881b      	ldrh	r3, [r3, #0]
 801093e:	80fb      	strh	r3, [r7, #6]
 8010940:	e027      	b.n	8010992 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010942:	88fa      	ldrh	r2, [r7, #6]
 8010944:	8a7b      	ldrh	r3, [r7, #18]
 8010946:	1ad3      	subs	r3, r2, r3
 8010948:	b29b      	uxth	r3, r3
 801094a:	f003 0301 	and.w	r3, r3, #1
 801094e:	b29b      	uxth	r3, r3
 8010950:	88fa      	ldrh	r2, [r7, #6]
 8010952:	1ad3      	subs	r3, r2, r3
 8010954:	80fb      	strh	r3, [r7, #6]
 8010956:	e01c      	b.n	8010992 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010958:	88fb      	ldrh	r3, [r7, #6]
 801095a:	3b10      	subs	r3, #16
 801095c:	80fb      	strh	r3, [r7, #6]
 801095e:	e018      	b.n	8010992 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010960:	88fb      	ldrh	r3, [r7, #6]
 8010962:	3b20      	subs	r3, #32
 8010964:	80fb      	strh	r3, [r7, #6]
 8010966:	e014      	b.n	8010992 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010968:	88fb      	ldrh	r3, [r7, #6]
 801096a:	3b30      	subs	r3, #48	; 0x30
 801096c:	80fb      	strh	r3, [r7, #6]
 801096e:	e010      	b.n	8010992 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010970:	88fb      	ldrh	r3, [r7, #6]
 8010972:	3b1a      	subs	r3, #26
 8010974:	80fb      	strh	r3, [r7, #6]
 8010976:	e00c      	b.n	8010992 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010978:	88fb      	ldrh	r3, [r7, #6]
 801097a:	3308      	adds	r3, #8
 801097c:	80fb      	strh	r3, [r7, #6]
 801097e:	e008      	b.n	8010992 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010980:	88fb      	ldrh	r3, [r7, #6]
 8010982:	3b50      	subs	r3, #80	; 0x50
 8010984:	80fb      	strh	r3, [r7, #6]
 8010986:	e004      	b.n	8010992 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010988:	88fb      	ldrh	r3, [r7, #6]
 801098a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801098e:	80fb      	strh	r3, [r7, #6]
 8010990:	bf00      	nop
			}
			break;
 8010992:	e008      	b.n	80109a6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010994:	89fb      	ldrh	r3, [r7, #14]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d195      	bne.n	80108c6 <ff_wtoupper+0x1a>
 801099a:	8a3b      	ldrh	r3, [r7, #16]
 801099c:	005b      	lsls	r3, r3, #1
 801099e:	697a      	ldr	r2, [r7, #20]
 80109a0:	4413      	add	r3, r2
 80109a2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80109a4:	e78f      	b.n	80108c6 <ff_wtoupper+0x1a>
			break;
 80109a6:	bf00      	nop
	}

	return chr;
 80109a8:	88fb      	ldrh	r3, [r7, #6]
}
 80109aa:	4618      	mov	r0, r3
 80109ac:	371c      	adds	r7, #28
 80109ae:	46bd      	mov	sp, r7
 80109b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b4:	4770      	bx	lr
 80109b6:	bf00      	nop
 80109b8:	08015090 	.word	0x08015090
 80109bc:	08015284 	.word	0x08015284

080109c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80109c0:	b480      	push	{r7}
 80109c2:	b085      	sub	sp, #20
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	4603      	mov	r3, r0
 80109c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80109ca:	2300      	movs	r3, #0
 80109cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80109ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80109d2:	2b84      	cmp	r3, #132	; 0x84
 80109d4:	d005      	beq.n	80109e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80109d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	4413      	add	r3, r2
 80109de:	3303      	adds	r3, #3
 80109e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80109e2:	68fb      	ldr	r3, [r7, #12]
}
 80109e4:	4618      	mov	r0, r3
 80109e6:	3714      	adds	r7, #20
 80109e8:	46bd      	mov	sp, r7
 80109ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ee:	4770      	bx	lr

080109f0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80109f0:	b480      	push	{r7}
 80109f2:	b083      	sub	sp, #12
 80109f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80109f6:	f3ef 8305 	mrs	r3, IPSR
 80109fa:	607b      	str	r3, [r7, #4]
  return(result);
 80109fc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	bf14      	ite	ne
 8010a02:	2301      	movne	r3, #1
 8010a04:	2300      	moveq	r3, #0
 8010a06:	b2db      	uxtb	r3, r3
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	370c      	adds	r7, #12
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a12:	4770      	bx	lr

08010a14 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010a18:	f001 f916 	bl	8011c48 <vTaskStartScheduler>
  
  return osOK;
 8010a1c:	2300      	movs	r3, #0
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	bd80      	pop	{r7, pc}

08010a22 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010a22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a24:	b089      	sub	sp, #36	; 0x24
 8010a26:	af04      	add	r7, sp, #16
 8010a28:	6078      	str	r0, [r7, #4]
 8010a2a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	695b      	ldr	r3, [r3, #20]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d020      	beq.n	8010a76 <osThreadCreate+0x54>
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	699b      	ldr	r3, [r3, #24]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d01c      	beq.n	8010a76 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	685c      	ldr	r4, [r3, #4]
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681d      	ldr	r5, [r3, #0]
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	691e      	ldr	r6, [r3, #16]
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7ff ffb6 	bl	80109c0 <makeFreeRtosPriority>
 8010a54:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	695b      	ldr	r3, [r3, #20]
 8010a5a:	687a      	ldr	r2, [r7, #4]
 8010a5c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010a5e:	9202      	str	r2, [sp, #8]
 8010a60:	9301      	str	r3, [sp, #4]
 8010a62:	9100      	str	r1, [sp, #0]
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	4632      	mov	r2, r6
 8010a68:	4629      	mov	r1, r5
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	f000 ff0e 	bl	801188c <xTaskCreateStatic>
 8010a70:	4603      	mov	r3, r0
 8010a72:	60fb      	str	r3, [r7, #12]
 8010a74:	e01c      	b.n	8010ab0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	685c      	ldr	r4, [r3, #4]
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010a82:	b29e      	uxth	r6, r3
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7ff ff98 	bl	80109c0 <makeFreeRtosPriority>
 8010a90:	4602      	mov	r2, r0
 8010a92:	f107 030c 	add.w	r3, r7, #12
 8010a96:	9301      	str	r3, [sp, #4]
 8010a98:	9200      	str	r2, [sp, #0]
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	4632      	mov	r2, r6
 8010a9e:	4629      	mov	r1, r5
 8010aa0:	4620      	mov	r0, r4
 8010aa2:	f000 ff50 	bl	8011946 <xTaskCreate>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	2b01      	cmp	r3, #1
 8010aaa:	d001      	beq.n	8010ab0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010aac:	2300      	movs	r3, #0
 8010aae:	e000      	b.n	8010ab2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	3714      	adds	r7, #20
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010aba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010aba:	b580      	push	{r7, lr}
 8010abc:	b084      	sub	sp, #16
 8010abe:	af00      	add	r7, sp, #0
 8010ac0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d001      	beq.n	8010ad0 <osDelay+0x16>
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	e000      	b.n	8010ad2 <osDelay+0x18>
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f001 f884 	bl	8011be0 <vTaskDelay>
  
  return osOK;
 8010ad8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	3710      	adds	r7, #16
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}

08010ae2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8010ae2:	b590      	push	{r4, r7, lr}
 8010ae4:	b085      	sub	sp, #20
 8010ae6:	af02      	add	r7, sp, #8
 8010ae8:	6078      	str	r0, [r7, #4]
 8010aea:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	689b      	ldr	r3, [r3, #8]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d011      	beq.n	8010b18 <osMessageCreate+0x36>
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	68db      	ldr	r3, [r3, #12]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d00d      	beq.n	8010b18 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	6818      	ldr	r0, [r3, #0]
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	6859      	ldr	r1, [r3, #4]
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	689a      	ldr	r2, [r3, #8]
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	68db      	ldr	r3, [r3, #12]
 8010b0c:	2400      	movs	r4, #0
 8010b0e:	9400      	str	r4, [sp, #0]
 8010b10:	f000 f9e0 	bl	8010ed4 <xQueueGenericCreateStatic>
 8010b14:	4603      	mov	r3, r0
 8010b16:	e008      	b.n	8010b2a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	6818      	ldr	r0, [r3, #0]
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	685b      	ldr	r3, [r3, #4]
 8010b20:	2200      	movs	r2, #0
 8010b22:	4619      	mov	r1, r3
 8010b24:	f000 fa4e 	bl	8010fc4 <xQueueGenericCreate>
 8010b28:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	370c      	adds	r7, #12
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd90      	pop	{r4, r7, pc}
	...

08010b34 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b086      	sub	sp, #24
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	60f8      	str	r0, [r7, #12]
 8010b3c:	60b9      	str	r1, [r7, #8]
 8010b3e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8010b40:	2300      	movs	r3, #0
 8010b42:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d101      	bne.n	8010b52 <osMessagePut+0x1e>
    ticks = 1;
 8010b4e:	2301      	movs	r3, #1
 8010b50:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8010b52:	f7ff ff4d 	bl	80109f0 <inHandlerMode>
 8010b56:	4603      	mov	r3, r0
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d018      	beq.n	8010b8e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8010b5c:	f107 0210 	add.w	r2, r7, #16
 8010b60:	f107 0108 	add.w	r1, r7, #8
 8010b64:	2300      	movs	r3, #0
 8010b66:	68f8      	ldr	r0, [r7, #12]
 8010b68:	f000 fb84 	bl	8011274 <xQueueGenericSendFromISR>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	2b01      	cmp	r3, #1
 8010b70:	d001      	beq.n	8010b76 <osMessagePut+0x42>
      return osErrorOS;
 8010b72:	23ff      	movs	r3, #255	; 0xff
 8010b74:	e018      	b.n	8010ba8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010b76:	693b      	ldr	r3, [r7, #16]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d014      	beq.n	8010ba6 <osMessagePut+0x72>
 8010b7c:	4b0c      	ldr	r3, [pc, #48]	; (8010bb0 <osMessagePut+0x7c>)
 8010b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b82:	601a      	str	r2, [r3, #0]
 8010b84:	f3bf 8f4f 	dsb	sy
 8010b88:	f3bf 8f6f 	isb	sy
 8010b8c:	e00b      	b.n	8010ba6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8010b8e:	f107 0108 	add.w	r1, r7, #8
 8010b92:	2300      	movs	r3, #0
 8010b94:	697a      	ldr	r2, [r7, #20]
 8010b96:	68f8      	ldr	r0, [r7, #12]
 8010b98:	f000 fa6e 	bl	8011078 <xQueueGenericSend>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	2b01      	cmp	r3, #1
 8010ba0:	d001      	beq.n	8010ba6 <osMessagePut+0x72>
      return osErrorOS;
 8010ba2:	23ff      	movs	r3, #255	; 0xff
 8010ba4:	e000      	b.n	8010ba8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8010ba6:	2300      	movs	r3, #0
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3718      	adds	r7, #24
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}
 8010bb0:	e000ed04 	.word	0xe000ed04

08010bb4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8010bb4:	b590      	push	{r4, r7, lr}
 8010bb6:	b08b      	sub	sp, #44	; 0x2c
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	60f8      	str	r0, [r7, #12]
 8010bbc:	60b9      	str	r1, [r7, #8]
 8010bbe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8010bc8:	68bb      	ldr	r3, [r7, #8]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d10a      	bne.n	8010be4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8010bce:	2380      	movs	r3, #128	; 0x80
 8010bd0:	617b      	str	r3, [r7, #20]
    return event;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	461c      	mov	r4, r3
 8010bd6:	f107 0314 	add.w	r3, r7, #20
 8010bda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010bde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010be2:	e054      	b.n	8010c8e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8010be4:	2300      	movs	r3, #0
 8010be6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8010be8:	2300      	movs	r3, #0
 8010bea:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bf2:	d103      	bne.n	8010bfc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8010bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8010bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8010bfa:	e009      	b.n	8010c10 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d006      	beq.n	8010c10 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8010c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d101      	bne.n	8010c10 <osMessageGet+0x5c>
      ticks = 1;
 8010c0c:	2301      	movs	r3, #1
 8010c0e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8010c10:	f7ff feee 	bl	80109f0 <inHandlerMode>
 8010c14:	4603      	mov	r3, r0
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d01c      	beq.n	8010c54 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8010c1a:	f107 0220 	add.w	r2, r7, #32
 8010c1e:	f107 0314 	add.w	r3, r7, #20
 8010c22:	3304      	adds	r3, #4
 8010c24:	4619      	mov	r1, r3
 8010c26:	68b8      	ldr	r0, [r7, #8]
 8010c28:	f000 fca0 	bl	801156c <xQueueReceiveFromISR>
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	2b01      	cmp	r3, #1
 8010c30:	d102      	bne.n	8010c38 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8010c32:	2310      	movs	r3, #16
 8010c34:	617b      	str	r3, [r7, #20]
 8010c36:	e001      	b.n	8010c3c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8010c38:	2300      	movs	r3, #0
 8010c3a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010c3c:	6a3b      	ldr	r3, [r7, #32]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d01d      	beq.n	8010c7e <osMessageGet+0xca>
 8010c42:	4b15      	ldr	r3, [pc, #84]	; (8010c98 <osMessageGet+0xe4>)
 8010c44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c48:	601a      	str	r2, [r3, #0]
 8010c4a:	f3bf 8f4f 	dsb	sy
 8010c4e:	f3bf 8f6f 	isb	sy
 8010c52:	e014      	b.n	8010c7e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8010c54:	f107 0314 	add.w	r3, r7, #20
 8010c58:	3304      	adds	r3, #4
 8010c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c5c:	4619      	mov	r1, r3
 8010c5e:	68b8      	ldr	r0, [r7, #8]
 8010c60:	f000 fba4 	bl	80113ac <xQueueReceive>
 8010c64:	4603      	mov	r3, r0
 8010c66:	2b01      	cmp	r3, #1
 8010c68:	d102      	bne.n	8010c70 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8010c6a:	2310      	movs	r3, #16
 8010c6c:	617b      	str	r3, [r7, #20]
 8010c6e:	e006      	b.n	8010c7e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8010c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d101      	bne.n	8010c7a <osMessageGet+0xc6>
 8010c76:	2300      	movs	r3, #0
 8010c78:	e000      	b.n	8010c7c <osMessageGet+0xc8>
 8010c7a:	2340      	movs	r3, #64	; 0x40
 8010c7c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	461c      	mov	r4, r3
 8010c82:	f107 0314 	add.w	r3, r7, #20
 8010c86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010c8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8010c8e:	68f8      	ldr	r0, [r7, #12]
 8010c90:	372c      	adds	r7, #44	; 0x2c
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd90      	pop	{r4, r7, pc}
 8010c96:	bf00      	nop
 8010c98:	e000ed04 	.word	0xe000ed04

08010c9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010c9c:	b480      	push	{r7}
 8010c9e:	b083      	sub	sp, #12
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f103 0208 	add.w	r2, r3, #8
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8010cb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	f103 0208 	add.w	r2, r3, #8
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	f103 0208 	add.w	r2, r3, #8
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	2200      	movs	r2, #0
 8010cce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010cd0:	bf00      	nop
 8010cd2:	370c      	adds	r7, #12
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cda:	4770      	bx	lr

08010cdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010cdc:	b480      	push	{r7}
 8010cde:	b083      	sub	sp, #12
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010cea:	bf00      	nop
 8010cec:	370c      	adds	r7, #12
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf4:	4770      	bx	lr

08010cf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010cf6:	b480      	push	{r7}
 8010cf8:	b085      	sub	sp, #20
 8010cfa:	af00      	add	r7, sp, #0
 8010cfc:	6078      	str	r0, [r7, #4]
 8010cfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	685b      	ldr	r3, [r3, #4]
 8010d04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	68fa      	ldr	r2, [r7, #12]
 8010d0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	689a      	ldr	r2, [r3, #8]
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	689b      	ldr	r3, [r3, #8]
 8010d18:	683a      	ldr	r2, [r7, #0]
 8010d1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	683a      	ldr	r2, [r7, #0]
 8010d20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	687a      	ldr	r2, [r7, #4]
 8010d26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	1c5a      	adds	r2, r3, #1
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	601a      	str	r2, [r3, #0]
}
 8010d32:	bf00      	nop
 8010d34:	3714      	adds	r7, #20
 8010d36:	46bd      	mov	sp, r7
 8010d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3c:	4770      	bx	lr

08010d3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010d3e:	b480      	push	{r7}
 8010d40:	b085      	sub	sp, #20
 8010d42:	af00      	add	r7, sp, #0
 8010d44:	6078      	str	r0, [r7, #4]
 8010d46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010d4e:	68bb      	ldr	r3, [r7, #8]
 8010d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d54:	d103      	bne.n	8010d5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	691b      	ldr	r3, [r3, #16]
 8010d5a:	60fb      	str	r3, [r7, #12]
 8010d5c:	e00c      	b.n	8010d78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	3308      	adds	r3, #8
 8010d62:	60fb      	str	r3, [r7, #12]
 8010d64:	e002      	b.n	8010d6c <vListInsert+0x2e>
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	685b      	ldr	r3, [r3, #4]
 8010d6a:	60fb      	str	r3, [r7, #12]
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	685b      	ldr	r3, [r3, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	68ba      	ldr	r2, [r7, #8]
 8010d74:	429a      	cmp	r2, r3
 8010d76:	d2f6      	bcs.n	8010d66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	685a      	ldr	r2, [r3, #4]
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	685b      	ldr	r3, [r3, #4]
 8010d84:	683a      	ldr	r2, [r7, #0]
 8010d86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	68fa      	ldr	r2, [r7, #12]
 8010d8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	683a      	ldr	r2, [r7, #0]
 8010d92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	687a      	ldr	r2, [r7, #4]
 8010d98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	1c5a      	adds	r2, r3, #1
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	601a      	str	r2, [r3, #0]
}
 8010da4:	bf00      	nop
 8010da6:	3714      	adds	r7, #20
 8010da8:	46bd      	mov	sp, r7
 8010daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dae:	4770      	bx	lr

08010db0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010db0:	b480      	push	{r7}
 8010db2:	b085      	sub	sp, #20
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	691b      	ldr	r3, [r3, #16]
 8010dbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	685b      	ldr	r3, [r3, #4]
 8010dc2:	687a      	ldr	r2, [r7, #4]
 8010dc4:	6892      	ldr	r2, [r2, #8]
 8010dc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	689b      	ldr	r3, [r3, #8]
 8010dcc:	687a      	ldr	r2, [r7, #4]
 8010dce:	6852      	ldr	r2, [r2, #4]
 8010dd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	685b      	ldr	r3, [r3, #4]
 8010dd6:	687a      	ldr	r2, [r7, #4]
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	d103      	bne.n	8010de4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	689a      	ldr	r2, [r3, #8]
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2200      	movs	r2, #0
 8010de8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	1e5a      	subs	r2, r3, #1
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	681b      	ldr	r3, [r3, #0]
}
 8010df8:	4618      	mov	r0, r3
 8010dfa:	3714      	adds	r7, #20
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e02:	4770      	bx	lr

08010e04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b084      	sub	sp, #16
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
 8010e0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d10a      	bne.n	8010e2e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e1c:	f383 8811 	msr	BASEPRI, r3
 8010e20:	f3bf 8f6f 	isb	sy
 8010e24:	f3bf 8f4f 	dsb	sy
 8010e28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010e2a:	bf00      	nop
 8010e2c:	e7fe      	b.n	8010e2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010e2e:	f001 fd61 	bl	80128f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	681a      	ldr	r2, [r3, #0]
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e3a:	68f9      	ldr	r1, [r7, #12]
 8010e3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010e3e:	fb01 f303 	mul.w	r3, r1, r3
 8010e42:	441a      	add	r2, r3
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	681a      	ldr	r2, [r3, #0]
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	681a      	ldr	r2, [r3, #0]
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e5e:	3b01      	subs	r3, #1
 8010e60:	68f9      	ldr	r1, [r7, #12]
 8010e62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010e64:	fb01 f303 	mul.w	r3, r1, r3
 8010e68:	441a      	add	r2, r3
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	22ff      	movs	r2, #255	; 0xff
 8010e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	22ff      	movs	r2, #255	; 0xff
 8010e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d114      	bne.n	8010eae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	691b      	ldr	r3, [r3, #16]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d01a      	beq.n	8010ec2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	3310      	adds	r3, #16
 8010e90:	4618      	mov	r0, r3
 8010e92:	f001 f93b 	bl	801210c <xTaskRemoveFromEventList>
 8010e96:	4603      	mov	r3, r0
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d012      	beq.n	8010ec2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010e9c:	4b0c      	ldr	r3, [pc, #48]	; (8010ed0 <xQueueGenericReset+0xcc>)
 8010e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ea2:	601a      	str	r2, [r3, #0]
 8010ea4:	f3bf 8f4f 	dsb	sy
 8010ea8:	f3bf 8f6f 	isb	sy
 8010eac:	e009      	b.n	8010ec2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	3310      	adds	r3, #16
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7ff fef2 	bl	8010c9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	3324      	adds	r3, #36	; 0x24
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f7ff feed 	bl	8010c9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010ec2:	f001 fd47 	bl	8012954 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010ec6:	2301      	movs	r3, #1
}
 8010ec8:	4618      	mov	r0, r3
 8010eca:	3710      	adds	r7, #16
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bd80      	pop	{r7, pc}
 8010ed0:	e000ed04 	.word	0xe000ed04

08010ed4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b08e      	sub	sp, #56	; 0x38
 8010ed8:	af02      	add	r7, sp, #8
 8010eda:	60f8      	str	r0, [r7, #12]
 8010edc:	60b9      	str	r1, [r7, #8]
 8010ede:	607a      	str	r2, [r7, #4]
 8010ee0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d10a      	bne.n	8010efe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eec:	f383 8811 	msr	BASEPRI, r3
 8010ef0:	f3bf 8f6f 	isb	sy
 8010ef4:	f3bf 8f4f 	dsb	sy
 8010ef8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010efa:	bf00      	nop
 8010efc:	e7fe      	b.n	8010efc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d10a      	bne.n	8010f1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f08:	f383 8811 	msr	BASEPRI, r3
 8010f0c:	f3bf 8f6f 	isb	sy
 8010f10:	f3bf 8f4f 	dsb	sy
 8010f14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010f16:	bf00      	nop
 8010f18:	e7fe      	b.n	8010f18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d002      	beq.n	8010f26 <xQueueGenericCreateStatic+0x52>
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d001      	beq.n	8010f2a <xQueueGenericCreateStatic+0x56>
 8010f26:	2301      	movs	r3, #1
 8010f28:	e000      	b.n	8010f2c <xQueueGenericCreateStatic+0x58>
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d10a      	bne.n	8010f46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f34:	f383 8811 	msr	BASEPRI, r3
 8010f38:	f3bf 8f6f 	isb	sy
 8010f3c:	f3bf 8f4f 	dsb	sy
 8010f40:	623b      	str	r3, [r7, #32]
}
 8010f42:	bf00      	nop
 8010f44:	e7fe      	b.n	8010f44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d102      	bne.n	8010f52 <xQueueGenericCreateStatic+0x7e>
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d101      	bne.n	8010f56 <xQueueGenericCreateStatic+0x82>
 8010f52:	2301      	movs	r3, #1
 8010f54:	e000      	b.n	8010f58 <xQueueGenericCreateStatic+0x84>
 8010f56:	2300      	movs	r3, #0
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d10a      	bne.n	8010f72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f60:	f383 8811 	msr	BASEPRI, r3
 8010f64:	f3bf 8f6f 	isb	sy
 8010f68:	f3bf 8f4f 	dsb	sy
 8010f6c:	61fb      	str	r3, [r7, #28]
}
 8010f6e:	bf00      	nop
 8010f70:	e7fe      	b.n	8010f70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010f72:	2348      	movs	r3, #72	; 0x48
 8010f74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010f76:	697b      	ldr	r3, [r7, #20]
 8010f78:	2b48      	cmp	r3, #72	; 0x48
 8010f7a:	d00a      	beq.n	8010f92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f80:	f383 8811 	msr	BASEPRI, r3
 8010f84:	f3bf 8f6f 	isb	sy
 8010f88:	f3bf 8f4f 	dsb	sy
 8010f8c:	61bb      	str	r3, [r7, #24]
}
 8010f8e:	bf00      	nop
 8010f90:	e7fe      	b.n	8010f90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010f92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010f94:	683b      	ldr	r3, [r7, #0]
 8010f96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d00d      	beq.n	8010fba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa0:	2201      	movs	r2, #1
 8010fa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010fa6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fac:	9300      	str	r3, [sp, #0]
 8010fae:	4613      	mov	r3, r2
 8010fb0:	687a      	ldr	r2, [r7, #4]
 8010fb2:	68b9      	ldr	r1, [r7, #8]
 8010fb4:	68f8      	ldr	r0, [r7, #12]
 8010fb6:	f000 f83f 	bl	8011038 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	3730      	adds	r7, #48	; 0x30
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bd80      	pop	{r7, pc}

08010fc4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b08a      	sub	sp, #40	; 0x28
 8010fc8:	af02      	add	r7, sp, #8
 8010fca:	60f8      	str	r0, [r7, #12]
 8010fcc:	60b9      	str	r1, [r7, #8]
 8010fce:	4613      	mov	r3, r2
 8010fd0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d10a      	bne.n	8010fee <xQueueGenericCreate+0x2a>
	__asm volatile
 8010fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fdc:	f383 8811 	msr	BASEPRI, r3
 8010fe0:	f3bf 8f6f 	isb	sy
 8010fe4:	f3bf 8f4f 	dsb	sy
 8010fe8:	613b      	str	r3, [r7, #16]
}
 8010fea:	bf00      	nop
 8010fec:	e7fe      	b.n	8010fec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	68ba      	ldr	r2, [r7, #8]
 8010ff2:	fb02 f303 	mul.w	r3, r2, r3
 8010ff6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010ff8:	69fb      	ldr	r3, [r7, #28]
 8010ffa:	3348      	adds	r3, #72	; 0x48
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f001 fd9b 	bl	8012b38 <pvPortMalloc>
 8011002:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011004:	69bb      	ldr	r3, [r7, #24]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d011      	beq.n	801102e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801100a:	69bb      	ldr	r3, [r7, #24]
 801100c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801100e:	697b      	ldr	r3, [r7, #20]
 8011010:	3348      	adds	r3, #72	; 0x48
 8011012:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011014:	69bb      	ldr	r3, [r7, #24]
 8011016:	2200      	movs	r2, #0
 8011018:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801101c:	79fa      	ldrb	r2, [r7, #7]
 801101e:	69bb      	ldr	r3, [r7, #24]
 8011020:	9300      	str	r3, [sp, #0]
 8011022:	4613      	mov	r3, r2
 8011024:	697a      	ldr	r2, [r7, #20]
 8011026:	68b9      	ldr	r1, [r7, #8]
 8011028:	68f8      	ldr	r0, [r7, #12]
 801102a:	f000 f805 	bl	8011038 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801102e:	69bb      	ldr	r3, [r7, #24]
	}
 8011030:	4618      	mov	r0, r3
 8011032:	3720      	adds	r7, #32
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}

08011038 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b084      	sub	sp, #16
 801103c:	af00      	add	r7, sp, #0
 801103e:	60f8      	str	r0, [r7, #12]
 8011040:	60b9      	str	r1, [r7, #8]
 8011042:	607a      	str	r2, [r7, #4]
 8011044:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011046:	68bb      	ldr	r3, [r7, #8]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d103      	bne.n	8011054 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801104c:	69bb      	ldr	r3, [r7, #24]
 801104e:	69ba      	ldr	r2, [r7, #24]
 8011050:	601a      	str	r2, [r3, #0]
 8011052:	e002      	b.n	801105a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011054:	69bb      	ldr	r3, [r7, #24]
 8011056:	687a      	ldr	r2, [r7, #4]
 8011058:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801105a:	69bb      	ldr	r3, [r7, #24]
 801105c:	68fa      	ldr	r2, [r7, #12]
 801105e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011060:	69bb      	ldr	r3, [r7, #24]
 8011062:	68ba      	ldr	r2, [r7, #8]
 8011064:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011066:	2101      	movs	r1, #1
 8011068:	69b8      	ldr	r0, [r7, #24]
 801106a:	f7ff fecb 	bl	8010e04 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801106e:	bf00      	nop
 8011070:	3710      	adds	r7, #16
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
	...

08011078 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b08e      	sub	sp, #56	; 0x38
 801107c:	af00      	add	r7, sp, #0
 801107e:	60f8      	str	r0, [r7, #12]
 8011080:	60b9      	str	r1, [r7, #8]
 8011082:	607a      	str	r2, [r7, #4]
 8011084:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011086:	2300      	movs	r3, #0
 8011088:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801108e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011090:	2b00      	cmp	r3, #0
 8011092:	d10a      	bne.n	80110aa <xQueueGenericSend+0x32>
	__asm volatile
 8011094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011098:	f383 8811 	msr	BASEPRI, r3
 801109c:	f3bf 8f6f 	isb	sy
 80110a0:	f3bf 8f4f 	dsb	sy
 80110a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80110a6:	bf00      	nop
 80110a8:	e7fe      	b.n	80110a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d103      	bne.n	80110b8 <xQueueGenericSend+0x40>
 80110b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d101      	bne.n	80110bc <xQueueGenericSend+0x44>
 80110b8:	2301      	movs	r3, #1
 80110ba:	e000      	b.n	80110be <xQueueGenericSend+0x46>
 80110bc:	2300      	movs	r3, #0
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d10a      	bne.n	80110d8 <xQueueGenericSend+0x60>
	__asm volatile
 80110c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110c6:	f383 8811 	msr	BASEPRI, r3
 80110ca:	f3bf 8f6f 	isb	sy
 80110ce:	f3bf 8f4f 	dsb	sy
 80110d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80110d4:	bf00      	nop
 80110d6:	e7fe      	b.n	80110d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	2b02      	cmp	r3, #2
 80110dc:	d103      	bne.n	80110e6 <xQueueGenericSend+0x6e>
 80110de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110e2:	2b01      	cmp	r3, #1
 80110e4:	d101      	bne.n	80110ea <xQueueGenericSend+0x72>
 80110e6:	2301      	movs	r3, #1
 80110e8:	e000      	b.n	80110ec <xQueueGenericSend+0x74>
 80110ea:	2300      	movs	r3, #0
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d10a      	bne.n	8011106 <xQueueGenericSend+0x8e>
	__asm volatile
 80110f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f4:	f383 8811 	msr	BASEPRI, r3
 80110f8:	f3bf 8f6f 	isb	sy
 80110fc:	f3bf 8f4f 	dsb	sy
 8011100:	623b      	str	r3, [r7, #32]
}
 8011102:	bf00      	nop
 8011104:	e7fe      	b.n	8011104 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011106:	f001 f9c1 	bl	801248c <xTaskGetSchedulerState>
 801110a:	4603      	mov	r3, r0
 801110c:	2b00      	cmp	r3, #0
 801110e:	d102      	bne.n	8011116 <xQueueGenericSend+0x9e>
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d101      	bne.n	801111a <xQueueGenericSend+0xa2>
 8011116:	2301      	movs	r3, #1
 8011118:	e000      	b.n	801111c <xQueueGenericSend+0xa4>
 801111a:	2300      	movs	r3, #0
 801111c:	2b00      	cmp	r3, #0
 801111e:	d10a      	bne.n	8011136 <xQueueGenericSend+0xbe>
	__asm volatile
 8011120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011124:	f383 8811 	msr	BASEPRI, r3
 8011128:	f3bf 8f6f 	isb	sy
 801112c:	f3bf 8f4f 	dsb	sy
 8011130:	61fb      	str	r3, [r7, #28]
}
 8011132:	bf00      	nop
 8011134:	e7fe      	b.n	8011134 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011136:	f001 fbdd 	bl	80128f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801113a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801113c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801113e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011142:	429a      	cmp	r2, r3
 8011144:	d302      	bcc.n	801114c <xQueueGenericSend+0xd4>
 8011146:	683b      	ldr	r3, [r7, #0]
 8011148:	2b02      	cmp	r3, #2
 801114a:	d129      	bne.n	80111a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801114c:	683a      	ldr	r2, [r7, #0]
 801114e:	68b9      	ldr	r1, [r7, #8]
 8011150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011152:	f000 fa8b 	bl	801166c <prvCopyDataToQueue>
 8011156:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801115c:	2b00      	cmp	r3, #0
 801115e:	d010      	beq.n	8011182 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011162:	3324      	adds	r3, #36	; 0x24
 8011164:	4618      	mov	r0, r3
 8011166:	f000 ffd1 	bl	801210c <xTaskRemoveFromEventList>
 801116a:	4603      	mov	r3, r0
 801116c:	2b00      	cmp	r3, #0
 801116e:	d013      	beq.n	8011198 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011170:	4b3f      	ldr	r3, [pc, #252]	; (8011270 <xQueueGenericSend+0x1f8>)
 8011172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011176:	601a      	str	r2, [r3, #0]
 8011178:	f3bf 8f4f 	dsb	sy
 801117c:	f3bf 8f6f 	isb	sy
 8011180:	e00a      	b.n	8011198 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011184:	2b00      	cmp	r3, #0
 8011186:	d007      	beq.n	8011198 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011188:	4b39      	ldr	r3, [pc, #228]	; (8011270 <xQueueGenericSend+0x1f8>)
 801118a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801118e:	601a      	str	r2, [r3, #0]
 8011190:	f3bf 8f4f 	dsb	sy
 8011194:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011198:	f001 fbdc 	bl	8012954 <vPortExitCritical>
				return pdPASS;
 801119c:	2301      	movs	r3, #1
 801119e:	e063      	b.n	8011268 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d103      	bne.n	80111ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80111a6:	f001 fbd5 	bl	8012954 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80111aa:	2300      	movs	r3, #0
 80111ac:	e05c      	b.n	8011268 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80111ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d106      	bne.n	80111c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80111b4:	f107 0314 	add.w	r3, r7, #20
 80111b8:	4618      	mov	r0, r3
 80111ba:	f001 f809 	bl	80121d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80111be:	2301      	movs	r3, #1
 80111c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80111c2:	f001 fbc7 	bl	8012954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80111c6:	f000 fda9 	bl	8011d1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80111ca:	f001 fb93 	bl	80128f4 <vPortEnterCritical>
 80111ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80111d4:	b25b      	sxtb	r3, r3
 80111d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111da:	d103      	bne.n	80111e4 <xQueueGenericSend+0x16c>
 80111dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111de:	2200      	movs	r2, #0
 80111e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80111e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80111ea:	b25b      	sxtb	r3, r3
 80111ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111f0:	d103      	bne.n	80111fa <xQueueGenericSend+0x182>
 80111f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f4:	2200      	movs	r2, #0
 80111f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80111fa:	f001 fbab 	bl	8012954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80111fe:	1d3a      	adds	r2, r7, #4
 8011200:	f107 0314 	add.w	r3, r7, #20
 8011204:	4611      	mov	r1, r2
 8011206:	4618      	mov	r0, r3
 8011208:	f000 fff8 	bl	80121fc <xTaskCheckForTimeOut>
 801120c:	4603      	mov	r3, r0
 801120e:	2b00      	cmp	r3, #0
 8011210:	d124      	bne.n	801125c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011212:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011214:	f000 fb22 	bl	801185c <prvIsQueueFull>
 8011218:	4603      	mov	r3, r0
 801121a:	2b00      	cmp	r3, #0
 801121c:	d018      	beq.n	8011250 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801121e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011220:	3310      	adds	r3, #16
 8011222:	687a      	ldr	r2, [r7, #4]
 8011224:	4611      	mov	r1, r2
 8011226:	4618      	mov	r0, r3
 8011228:	f000 ff4c 	bl	80120c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801122c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801122e:	f000 faad 	bl	801178c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011232:	f000 fd81 	bl	8011d38 <xTaskResumeAll>
 8011236:	4603      	mov	r3, r0
 8011238:	2b00      	cmp	r3, #0
 801123a:	f47f af7c 	bne.w	8011136 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801123e:	4b0c      	ldr	r3, [pc, #48]	; (8011270 <xQueueGenericSend+0x1f8>)
 8011240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011244:	601a      	str	r2, [r3, #0]
 8011246:	f3bf 8f4f 	dsb	sy
 801124a:	f3bf 8f6f 	isb	sy
 801124e:	e772      	b.n	8011136 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011252:	f000 fa9b 	bl	801178c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011256:	f000 fd6f 	bl	8011d38 <xTaskResumeAll>
 801125a:	e76c      	b.n	8011136 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801125c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801125e:	f000 fa95 	bl	801178c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011262:	f000 fd69 	bl	8011d38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011266:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011268:	4618      	mov	r0, r3
 801126a:	3738      	adds	r7, #56	; 0x38
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}
 8011270:	e000ed04 	.word	0xe000ed04

08011274 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011274:	b580      	push	{r7, lr}
 8011276:	b090      	sub	sp, #64	; 0x40
 8011278:	af00      	add	r7, sp, #0
 801127a:	60f8      	str	r0, [r7, #12]
 801127c:	60b9      	str	r1, [r7, #8]
 801127e:	607a      	str	r2, [r7, #4]
 8011280:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8011286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011288:	2b00      	cmp	r3, #0
 801128a:	d10a      	bne.n	80112a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801128c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011290:	f383 8811 	msr	BASEPRI, r3
 8011294:	f3bf 8f6f 	isb	sy
 8011298:	f3bf 8f4f 	dsb	sy
 801129c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801129e:	bf00      	nop
 80112a0:	e7fe      	b.n	80112a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80112a2:	68bb      	ldr	r3, [r7, #8]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d103      	bne.n	80112b0 <xQueueGenericSendFromISR+0x3c>
 80112a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d101      	bne.n	80112b4 <xQueueGenericSendFromISR+0x40>
 80112b0:	2301      	movs	r3, #1
 80112b2:	e000      	b.n	80112b6 <xQueueGenericSendFromISR+0x42>
 80112b4:	2300      	movs	r3, #0
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d10a      	bne.n	80112d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80112ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112be:	f383 8811 	msr	BASEPRI, r3
 80112c2:	f3bf 8f6f 	isb	sy
 80112c6:	f3bf 8f4f 	dsb	sy
 80112ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80112cc:	bf00      	nop
 80112ce:	e7fe      	b.n	80112ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	2b02      	cmp	r3, #2
 80112d4:	d103      	bne.n	80112de <xQueueGenericSendFromISR+0x6a>
 80112d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112da:	2b01      	cmp	r3, #1
 80112dc:	d101      	bne.n	80112e2 <xQueueGenericSendFromISR+0x6e>
 80112de:	2301      	movs	r3, #1
 80112e0:	e000      	b.n	80112e4 <xQueueGenericSendFromISR+0x70>
 80112e2:	2300      	movs	r3, #0
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d10a      	bne.n	80112fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80112e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ec:	f383 8811 	msr	BASEPRI, r3
 80112f0:	f3bf 8f6f 	isb	sy
 80112f4:	f3bf 8f4f 	dsb	sy
 80112f8:	623b      	str	r3, [r7, #32]
}
 80112fa:	bf00      	nop
 80112fc:	e7fe      	b.n	80112fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80112fe:	f001 fbdb 	bl	8012ab8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011302:	f3ef 8211 	mrs	r2, BASEPRI
 8011306:	f04f 0350 	mov.w	r3, #80	; 0x50
 801130a:	f383 8811 	msr	BASEPRI, r3
 801130e:	f3bf 8f6f 	isb	sy
 8011312:	f3bf 8f4f 	dsb	sy
 8011316:	61fa      	str	r2, [r7, #28]
 8011318:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801131a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801131c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801131e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011326:	429a      	cmp	r2, r3
 8011328:	d302      	bcc.n	8011330 <xQueueGenericSendFromISR+0xbc>
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	2b02      	cmp	r3, #2
 801132e:	d12f      	bne.n	8011390 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011332:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801133a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801133c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801133e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011340:	683a      	ldr	r2, [r7, #0]
 8011342:	68b9      	ldr	r1, [r7, #8]
 8011344:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011346:	f000 f991 	bl	801166c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801134a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801134e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011352:	d112      	bne.n	801137a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011358:	2b00      	cmp	r3, #0
 801135a:	d016      	beq.n	801138a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801135c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801135e:	3324      	adds	r3, #36	; 0x24
 8011360:	4618      	mov	r0, r3
 8011362:	f000 fed3 	bl	801210c <xTaskRemoveFromEventList>
 8011366:	4603      	mov	r3, r0
 8011368:	2b00      	cmp	r3, #0
 801136a:	d00e      	beq.n	801138a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d00b      	beq.n	801138a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	2201      	movs	r2, #1
 8011376:	601a      	str	r2, [r3, #0]
 8011378:	e007      	b.n	801138a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801137a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801137e:	3301      	adds	r3, #1
 8011380:	b2db      	uxtb	r3, r3
 8011382:	b25a      	sxtb	r2, r3
 8011384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801138a:	2301      	movs	r3, #1
 801138c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801138e:	e001      	b.n	8011394 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011390:	2300      	movs	r3, #0
 8011392:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011396:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801139e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80113a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	3740      	adds	r7, #64	; 0x40
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}
	...

080113ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b08c      	sub	sp, #48	; 0x30
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	60f8      	str	r0, [r7, #12]
 80113b4:	60b9      	str	r1, [r7, #8]
 80113b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80113b8:	2300      	movs	r3, #0
 80113ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80113c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d10a      	bne.n	80113dc <xQueueReceive+0x30>
	__asm volatile
 80113c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113ca:	f383 8811 	msr	BASEPRI, r3
 80113ce:	f3bf 8f6f 	isb	sy
 80113d2:	f3bf 8f4f 	dsb	sy
 80113d6:	623b      	str	r3, [r7, #32]
}
 80113d8:	bf00      	nop
 80113da:	e7fe      	b.n	80113da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80113dc:	68bb      	ldr	r3, [r7, #8]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d103      	bne.n	80113ea <xQueueReceive+0x3e>
 80113e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d101      	bne.n	80113ee <xQueueReceive+0x42>
 80113ea:	2301      	movs	r3, #1
 80113ec:	e000      	b.n	80113f0 <xQueueReceive+0x44>
 80113ee:	2300      	movs	r3, #0
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d10a      	bne.n	801140a <xQueueReceive+0x5e>
	__asm volatile
 80113f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113f8:	f383 8811 	msr	BASEPRI, r3
 80113fc:	f3bf 8f6f 	isb	sy
 8011400:	f3bf 8f4f 	dsb	sy
 8011404:	61fb      	str	r3, [r7, #28]
}
 8011406:	bf00      	nop
 8011408:	e7fe      	b.n	8011408 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801140a:	f001 f83f 	bl	801248c <xTaskGetSchedulerState>
 801140e:	4603      	mov	r3, r0
 8011410:	2b00      	cmp	r3, #0
 8011412:	d102      	bne.n	801141a <xQueueReceive+0x6e>
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d101      	bne.n	801141e <xQueueReceive+0x72>
 801141a:	2301      	movs	r3, #1
 801141c:	e000      	b.n	8011420 <xQueueReceive+0x74>
 801141e:	2300      	movs	r3, #0
 8011420:	2b00      	cmp	r3, #0
 8011422:	d10a      	bne.n	801143a <xQueueReceive+0x8e>
	__asm volatile
 8011424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011428:	f383 8811 	msr	BASEPRI, r3
 801142c:	f3bf 8f6f 	isb	sy
 8011430:	f3bf 8f4f 	dsb	sy
 8011434:	61bb      	str	r3, [r7, #24]
}
 8011436:	bf00      	nop
 8011438:	e7fe      	b.n	8011438 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801143a:	f001 fa5b 	bl	80128f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801143e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011442:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011446:	2b00      	cmp	r3, #0
 8011448:	d01f      	beq.n	801148a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801144a:	68b9      	ldr	r1, [r7, #8]
 801144c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801144e:	f000 f977 	bl	8011740 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011454:	1e5a      	subs	r2, r3, #1
 8011456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011458:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801145a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801145c:	691b      	ldr	r3, [r3, #16]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d00f      	beq.n	8011482 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011464:	3310      	adds	r3, #16
 8011466:	4618      	mov	r0, r3
 8011468:	f000 fe50 	bl	801210c <xTaskRemoveFromEventList>
 801146c:	4603      	mov	r3, r0
 801146e:	2b00      	cmp	r3, #0
 8011470:	d007      	beq.n	8011482 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011472:	4b3d      	ldr	r3, [pc, #244]	; (8011568 <xQueueReceive+0x1bc>)
 8011474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011478:	601a      	str	r2, [r3, #0]
 801147a:	f3bf 8f4f 	dsb	sy
 801147e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011482:	f001 fa67 	bl	8012954 <vPortExitCritical>
				return pdPASS;
 8011486:	2301      	movs	r3, #1
 8011488:	e069      	b.n	801155e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d103      	bne.n	8011498 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011490:	f001 fa60 	bl	8012954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011494:	2300      	movs	r3, #0
 8011496:	e062      	b.n	801155e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801149a:	2b00      	cmp	r3, #0
 801149c:	d106      	bne.n	80114ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801149e:	f107 0310 	add.w	r3, r7, #16
 80114a2:	4618      	mov	r0, r3
 80114a4:	f000 fe94 	bl	80121d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80114a8:	2301      	movs	r3, #1
 80114aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80114ac:	f001 fa52 	bl	8012954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80114b0:	f000 fc34 	bl	8011d1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80114b4:	f001 fa1e 	bl	80128f4 <vPortEnterCritical>
 80114b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80114be:	b25b      	sxtb	r3, r3
 80114c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114c4:	d103      	bne.n	80114ce <xQueueReceive+0x122>
 80114c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114c8:	2200      	movs	r2, #0
 80114ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80114ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80114d4:	b25b      	sxtb	r3, r3
 80114d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114da:	d103      	bne.n	80114e4 <xQueueReceive+0x138>
 80114dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114de:	2200      	movs	r2, #0
 80114e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80114e4:	f001 fa36 	bl	8012954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80114e8:	1d3a      	adds	r2, r7, #4
 80114ea:	f107 0310 	add.w	r3, r7, #16
 80114ee:	4611      	mov	r1, r2
 80114f0:	4618      	mov	r0, r3
 80114f2:	f000 fe83 	bl	80121fc <xTaskCheckForTimeOut>
 80114f6:	4603      	mov	r3, r0
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d123      	bne.n	8011544 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80114fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114fe:	f000 f997 	bl	8011830 <prvIsQueueEmpty>
 8011502:	4603      	mov	r3, r0
 8011504:	2b00      	cmp	r3, #0
 8011506:	d017      	beq.n	8011538 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801150a:	3324      	adds	r3, #36	; 0x24
 801150c:	687a      	ldr	r2, [r7, #4]
 801150e:	4611      	mov	r1, r2
 8011510:	4618      	mov	r0, r3
 8011512:	f000 fdd7 	bl	80120c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011518:	f000 f938 	bl	801178c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801151c:	f000 fc0c 	bl	8011d38 <xTaskResumeAll>
 8011520:	4603      	mov	r3, r0
 8011522:	2b00      	cmp	r3, #0
 8011524:	d189      	bne.n	801143a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8011526:	4b10      	ldr	r3, [pc, #64]	; (8011568 <xQueueReceive+0x1bc>)
 8011528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801152c:	601a      	str	r2, [r3, #0]
 801152e:	f3bf 8f4f 	dsb	sy
 8011532:	f3bf 8f6f 	isb	sy
 8011536:	e780      	b.n	801143a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801153a:	f000 f927 	bl	801178c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801153e:	f000 fbfb 	bl	8011d38 <xTaskResumeAll>
 8011542:	e77a      	b.n	801143a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011546:	f000 f921 	bl	801178c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801154a:	f000 fbf5 	bl	8011d38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801154e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011550:	f000 f96e 	bl	8011830 <prvIsQueueEmpty>
 8011554:	4603      	mov	r3, r0
 8011556:	2b00      	cmp	r3, #0
 8011558:	f43f af6f 	beq.w	801143a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801155c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801155e:	4618      	mov	r0, r3
 8011560:	3730      	adds	r7, #48	; 0x30
 8011562:	46bd      	mov	sp, r7
 8011564:	bd80      	pop	{r7, pc}
 8011566:	bf00      	nop
 8011568:	e000ed04 	.word	0xe000ed04

0801156c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b08e      	sub	sp, #56	; 0x38
 8011570:	af00      	add	r7, sp, #0
 8011572:	60f8      	str	r0, [r7, #12]
 8011574:	60b9      	str	r1, [r7, #8]
 8011576:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801157c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801157e:	2b00      	cmp	r3, #0
 8011580:	d10a      	bne.n	8011598 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8011582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011586:	f383 8811 	msr	BASEPRI, r3
 801158a:	f3bf 8f6f 	isb	sy
 801158e:	f3bf 8f4f 	dsb	sy
 8011592:	623b      	str	r3, [r7, #32]
}
 8011594:	bf00      	nop
 8011596:	e7fe      	b.n	8011596 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d103      	bne.n	80115a6 <xQueueReceiveFromISR+0x3a>
 801159e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d101      	bne.n	80115aa <xQueueReceiveFromISR+0x3e>
 80115a6:	2301      	movs	r3, #1
 80115a8:	e000      	b.n	80115ac <xQueueReceiveFromISR+0x40>
 80115aa:	2300      	movs	r3, #0
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d10a      	bne.n	80115c6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80115b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115b4:	f383 8811 	msr	BASEPRI, r3
 80115b8:	f3bf 8f6f 	isb	sy
 80115bc:	f3bf 8f4f 	dsb	sy
 80115c0:	61fb      	str	r3, [r7, #28]
}
 80115c2:	bf00      	nop
 80115c4:	e7fe      	b.n	80115c4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80115c6:	f001 fa77 	bl	8012ab8 <vPortValidateInterruptPriority>
	__asm volatile
 80115ca:	f3ef 8211 	mrs	r2, BASEPRI
 80115ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115d2:	f383 8811 	msr	BASEPRI, r3
 80115d6:	f3bf 8f6f 	isb	sy
 80115da:	f3bf 8f4f 	dsb	sy
 80115de:	61ba      	str	r2, [r7, #24]
 80115e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80115e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80115e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80115e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80115ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d02f      	beq.n	8011652 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80115f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80115f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80115fc:	68b9      	ldr	r1, [r7, #8]
 80115fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011600:	f000 f89e 	bl	8011740 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011606:	1e5a      	subs	r2, r3, #1
 8011608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801160a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801160c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011614:	d112      	bne.n	801163c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011618:	691b      	ldr	r3, [r3, #16]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d016      	beq.n	801164c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801161e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011620:	3310      	adds	r3, #16
 8011622:	4618      	mov	r0, r3
 8011624:	f000 fd72 	bl	801210c <xTaskRemoveFromEventList>
 8011628:	4603      	mov	r3, r0
 801162a:	2b00      	cmp	r3, #0
 801162c:	d00e      	beq.n	801164c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d00b      	beq.n	801164c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	2201      	movs	r2, #1
 8011638:	601a      	str	r2, [r3, #0]
 801163a:	e007      	b.n	801164c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801163c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011640:	3301      	adds	r3, #1
 8011642:	b2db      	uxtb	r3, r3
 8011644:	b25a      	sxtb	r2, r3
 8011646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801164c:	2301      	movs	r3, #1
 801164e:	637b      	str	r3, [r7, #52]	; 0x34
 8011650:	e001      	b.n	8011656 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8011652:	2300      	movs	r3, #0
 8011654:	637b      	str	r3, [r7, #52]	; 0x34
 8011656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011658:	613b      	str	r3, [r7, #16]
	__asm volatile
 801165a:	693b      	ldr	r3, [r7, #16]
 801165c:	f383 8811 	msr	BASEPRI, r3
}
 8011660:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011664:	4618      	mov	r0, r3
 8011666:	3738      	adds	r7, #56	; 0x38
 8011668:	46bd      	mov	sp, r7
 801166a:	bd80      	pop	{r7, pc}

0801166c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b086      	sub	sp, #24
 8011670:	af00      	add	r7, sp, #0
 8011672:	60f8      	str	r0, [r7, #12]
 8011674:	60b9      	str	r1, [r7, #8]
 8011676:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011678:	2300      	movs	r3, #0
 801167a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011680:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011686:	2b00      	cmp	r3, #0
 8011688:	d10d      	bne.n	80116a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d14d      	bne.n	801172e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	689b      	ldr	r3, [r3, #8]
 8011696:	4618      	mov	r0, r3
 8011698:	f000 ff16 	bl	80124c8 <xTaskPriorityDisinherit>
 801169c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	2200      	movs	r2, #0
 80116a2:	609a      	str	r2, [r3, #8]
 80116a4:	e043      	b.n	801172e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d119      	bne.n	80116e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	6858      	ldr	r0, [r3, #4]
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116b4:	461a      	mov	r2, r3
 80116b6:	68b9      	ldr	r1, [r7, #8]
 80116b8:	f002 f8c2 	bl	8013840 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	685a      	ldr	r2, [r3, #4]
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116c4:	441a      	add	r2, r3
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	685a      	ldr	r2, [r3, #4]
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	689b      	ldr	r3, [r3, #8]
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d32b      	bcc.n	801172e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	681a      	ldr	r2, [r3, #0]
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	605a      	str	r2, [r3, #4]
 80116de:	e026      	b.n	801172e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	68d8      	ldr	r0, [r3, #12]
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116e8:	461a      	mov	r2, r3
 80116ea:	68b9      	ldr	r1, [r7, #8]
 80116ec:	f002 f8a8 	bl	8013840 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	68da      	ldr	r2, [r3, #12]
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116f8:	425b      	negs	r3, r3
 80116fa:	441a      	add	r2, r3
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	68da      	ldr	r2, [r3, #12]
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	429a      	cmp	r2, r3
 801170a:	d207      	bcs.n	801171c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	689a      	ldr	r2, [r3, #8]
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011714:	425b      	negs	r3, r3
 8011716:	441a      	add	r2, r3
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	2b02      	cmp	r3, #2
 8011720:	d105      	bne.n	801172e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011722:	693b      	ldr	r3, [r7, #16]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d002      	beq.n	801172e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011728:	693b      	ldr	r3, [r7, #16]
 801172a:	3b01      	subs	r3, #1
 801172c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801172e:	693b      	ldr	r3, [r7, #16]
 8011730:	1c5a      	adds	r2, r3, #1
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011736:	697b      	ldr	r3, [r7, #20]
}
 8011738:	4618      	mov	r0, r3
 801173a:	3718      	adds	r7, #24
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}

08011740 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b082      	sub	sp, #8
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801174e:	2b00      	cmp	r3, #0
 8011750:	d018      	beq.n	8011784 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	68da      	ldr	r2, [r3, #12]
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801175a:	441a      	add	r2, r3
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	68da      	ldr	r2, [r3, #12]
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	689b      	ldr	r3, [r3, #8]
 8011768:	429a      	cmp	r2, r3
 801176a:	d303      	bcc.n	8011774 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	681a      	ldr	r2, [r3, #0]
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	68d9      	ldr	r1, [r3, #12]
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801177c:	461a      	mov	r2, r3
 801177e:	6838      	ldr	r0, [r7, #0]
 8011780:	f002 f85e 	bl	8013840 <memcpy>
	}
}
 8011784:	bf00      	nop
 8011786:	3708      	adds	r7, #8
 8011788:	46bd      	mov	sp, r7
 801178a:	bd80      	pop	{r7, pc}

0801178c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801178c:	b580      	push	{r7, lr}
 801178e:	b084      	sub	sp, #16
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011794:	f001 f8ae 	bl	80128f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801179e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80117a0:	e011      	b.n	80117c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d012      	beq.n	80117d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	3324      	adds	r3, #36	; 0x24
 80117ae:	4618      	mov	r0, r3
 80117b0:	f000 fcac 	bl	801210c <xTaskRemoveFromEventList>
 80117b4:	4603      	mov	r3, r0
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d001      	beq.n	80117be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80117ba:	f000 fd81 	bl	80122c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80117be:	7bfb      	ldrb	r3, [r7, #15]
 80117c0:	3b01      	subs	r3, #1
 80117c2:	b2db      	uxtb	r3, r3
 80117c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80117c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	dce9      	bgt.n	80117a2 <prvUnlockQueue+0x16>
 80117ce:	e000      	b.n	80117d2 <prvUnlockQueue+0x46>
					break;
 80117d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	22ff      	movs	r2, #255	; 0xff
 80117d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80117da:	f001 f8bb 	bl	8012954 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80117de:	f001 f889 	bl	80128f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80117e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80117ea:	e011      	b.n	8011810 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	691b      	ldr	r3, [r3, #16]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d012      	beq.n	801181a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	3310      	adds	r3, #16
 80117f8:	4618      	mov	r0, r3
 80117fa:	f000 fc87 	bl	801210c <xTaskRemoveFromEventList>
 80117fe:	4603      	mov	r3, r0
 8011800:	2b00      	cmp	r3, #0
 8011802:	d001      	beq.n	8011808 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011804:	f000 fd5c 	bl	80122c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011808:	7bbb      	ldrb	r3, [r7, #14]
 801180a:	3b01      	subs	r3, #1
 801180c:	b2db      	uxtb	r3, r3
 801180e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011810:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011814:	2b00      	cmp	r3, #0
 8011816:	dce9      	bgt.n	80117ec <prvUnlockQueue+0x60>
 8011818:	e000      	b.n	801181c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801181a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	22ff      	movs	r2, #255	; 0xff
 8011820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011824:	f001 f896 	bl	8012954 <vPortExitCritical>
}
 8011828:	bf00      	nop
 801182a:	3710      	adds	r7, #16
 801182c:	46bd      	mov	sp, r7
 801182e:	bd80      	pop	{r7, pc}

08011830 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b084      	sub	sp, #16
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011838:	f001 f85c 	bl	80128f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011840:	2b00      	cmp	r3, #0
 8011842:	d102      	bne.n	801184a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011844:	2301      	movs	r3, #1
 8011846:	60fb      	str	r3, [r7, #12]
 8011848:	e001      	b.n	801184e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801184a:	2300      	movs	r3, #0
 801184c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801184e:	f001 f881 	bl	8012954 <vPortExitCritical>

	return xReturn;
 8011852:	68fb      	ldr	r3, [r7, #12]
}
 8011854:	4618      	mov	r0, r3
 8011856:	3710      	adds	r7, #16
 8011858:	46bd      	mov	sp, r7
 801185a:	bd80      	pop	{r7, pc}

0801185c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b084      	sub	sp, #16
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011864:	f001 f846 	bl	80128f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011870:	429a      	cmp	r2, r3
 8011872:	d102      	bne.n	801187a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011874:	2301      	movs	r3, #1
 8011876:	60fb      	str	r3, [r7, #12]
 8011878:	e001      	b.n	801187e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801187a:	2300      	movs	r3, #0
 801187c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801187e:	f001 f869 	bl	8012954 <vPortExitCritical>

	return xReturn;
 8011882:	68fb      	ldr	r3, [r7, #12]
}
 8011884:	4618      	mov	r0, r3
 8011886:	3710      	adds	r7, #16
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}

0801188c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801188c:	b580      	push	{r7, lr}
 801188e:	b08e      	sub	sp, #56	; 0x38
 8011890:	af04      	add	r7, sp, #16
 8011892:	60f8      	str	r0, [r7, #12]
 8011894:	60b9      	str	r1, [r7, #8]
 8011896:	607a      	str	r2, [r7, #4]
 8011898:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801189a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801189c:	2b00      	cmp	r3, #0
 801189e:	d10a      	bne.n	80118b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80118a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a4:	f383 8811 	msr	BASEPRI, r3
 80118a8:	f3bf 8f6f 	isb	sy
 80118ac:	f3bf 8f4f 	dsb	sy
 80118b0:	623b      	str	r3, [r7, #32]
}
 80118b2:	bf00      	nop
 80118b4:	e7fe      	b.n	80118b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80118b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d10a      	bne.n	80118d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80118bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118c0:	f383 8811 	msr	BASEPRI, r3
 80118c4:	f3bf 8f6f 	isb	sy
 80118c8:	f3bf 8f4f 	dsb	sy
 80118cc:	61fb      	str	r3, [r7, #28]
}
 80118ce:	bf00      	nop
 80118d0:	e7fe      	b.n	80118d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80118d2:	23b4      	movs	r3, #180	; 0xb4
 80118d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80118d6:	693b      	ldr	r3, [r7, #16]
 80118d8:	2bb4      	cmp	r3, #180	; 0xb4
 80118da:	d00a      	beq.n	80118f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80118dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118e0:	f383 8811 	msr	BASEPRI, r3
 80118e4:	f3bf 8f6f 	isb	sy
 80118e8:	f3bf 8f4f 	dsb	sy
 80118ec:	61bb      	str	r3, [r7, #24]
}
 80118ee:	bf00      	nop
 80118f0:	e7fe      	b.n	80118f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80118f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80118f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d01e      	beq.n	8011938 <xTaskCreateStatic+0xac>
 80118fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d01b      	beq.n	8011938 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011902:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011908:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801190c:	2202      	movs	r2, #2
 801190e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011912:	2300      	movs	r3, #0
 8011914:	9303      	str	r3, [sp, #12]
 8011916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011918:	9302      	str	r3, [sp, #8]
 801191a:	f107 0314 	add.w	r3, r7, #20
 801191e:	9301      	str	r3, [sp, #4]
 8011920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011922:	9300      	str	r3, [sp, #0]
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	687a      	ldr	r2, [r7, #4]
 8011928:	68b9      	ldr	r1, [r7, #8]
 801192a:	68f8      	ldr	r0, [r7, #12]
 801192c:	f000 f850 	bl	80119d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011930:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011932:	f000 f8eb 	bl	8011b0c <prvAddNewTaskToReadyList>
 8011936:	e001      	b.n	801193c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011938:	2300      	movs	r3, #0
 801193a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801193c:	697b      	ldr	r3, [r7, #20]
	}
 801193e:	4618      	mov	r0, r3
 8011940:	3728      	adds	r7, #40	; 0x28
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}

08011946 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011946:	b580      	push	{r7, lr}
 8011948:	b08c      	sub	sp, #48	; 0x30
 801194a:	af04      	add	r7, sp, #16
 801194c:	60f8      	str	r0, [r7, #12]
 801194e:	60b9      	str	r1, [r7, #8]
 8011950:	603b      	str	r3, [r7, #0]
 8011952:	4613      	mov	r3, r2
 8011954:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011956:	88fb      	ldrh	r3, [r7, #6]
 8011958:	009b      	lsls	r3, r3, #2
 801195a:	4618      	mov	r0, r3
 801195c:	f001 f8ec 	bl	8012b38 <pvPortMalloc>
 8011960:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011962:	697b      	ldr	r3, [r7, #20]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d00e      	beq.n	8011986 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011968:	20b4      	movs	r0, #180	; 0xb4
 801196a:	f001 f8e5 	bl	8012b38 <pvPortMalloc>
 801196e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011970:	69fb      	ldr	r3, [r7, #28]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d003      	beq.n	801197e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011976:	69fb      	ldr	r3, [r7, #28]
 8011978:	697a      	ldr	r2, [r7, #20]
 801197a:	631a      	str	r2, [r3, #48]	; 0x30
 801197c:	e005      	b.n	801198a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801197e:	6978      	ldr	r0, [r7, #20]
 8011980:	f001 f9a6 	bl	8012cd0 <vPortFree>
 8011984:	e001      	b.n	801198a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011986:	2300      	movs	r3, #0
 8011988:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801198a:	69fb      	ldr	r3, [r7, #28]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d017      	beq.n	80119c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011990:	69fb      	ldr	r3, [r7, #28]
 8011992:	2200      	movs	r2, #0
 8011994:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011998:	88fa      	ldrh	r2, [r7, #6]
 801199a:	2300      	movs	r3, #0
 801199c:	9303      	str	r3, [sp, #12]
 801199e:	69fb      	ldr	r3, [r7, #28]
 80119a0:	9302      	str	r3, [sp, #8]
 80119a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a4:	9301      	str	r3, [sp, #4]
 80119a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119a8:	9300      	str	r3, [sp, #0]
 80119aa:	683b      	ldr	r3, [r7, #0]
 80119ac:	68b9      	ldr	r1, [r7, #8]
 80119ae:	68f8      	ldr	r0, [r7, #12]
 80119b0:	f000 f80e 	bl	80119d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80119b4:	69f8      	ldr	r0, [r7, #28]
 80119b6:	f000 f8a9 	bl	8011b0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80119ba:	2301      	movs	r3, #1
 80119bc:	61bb      	str	r3, [r7, #24]
 80119be:	e002      	b.n	80119c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80119c0:	f04f 33ff 	mov.w	r3, #4294967295
 80119c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80119c6:	69bb      	ldr	r3, [r7, #24]
	}
 80119c8:	4618      	mov	r0, r3
 80119ca:	3720      	adds	r7, #32
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}

080119d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b088      	sub	sp, #32
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	60f8      	str	r0, [r7, #12]
 80119d8:	60b9      	str	r1, [r7, #8]
 80119da:	607a      	str	r2, [r7, #4]
 80119dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80119de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80119e8:	3b01      	subs	r3, #1
 80119ea:	009b      	lsls	r3, r3, #2
 80119ec:	4413      	add	r3, r2
 80119ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80119f0:	69bb      	ldr	r3, [r7, #24]
 80119f2:	f023 0307 	bic.w	r3, r3, #7
 80119f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80119f8:	69bb      	ldr	r3, [r7, #24]
 80119fa:	f003 0307 	and.w	r3, r3, #7
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d00a      	beq.n	8011a18 <prvInitialiseNewTask+0x48>
	__asm volatile
 8011a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a06:	f383 8811 	msr	BASEPRI, r3
 8011a0a:	f3bf 8f6f 	isb	sy
 8011a0e:	f3bf 8f4f 	dsb	sy
 8011a12:	617b      	str	r3, [r7, #20]
}
 8011a14:	bf00      	nop
 8011a16:	e7fe      	b.n	8011a16 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011a18:	68bb      	ldr	r3, [r7, #8]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d01f      	beq.n	8011a5e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011a1e:	2300      	movs	r3, #0
 8011a20:	61fb      	str	r3, [r7, #28]
 8011a22:	e012      	b.n	8011a4a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011a24:	68ba      	ldr	r2, [r7, #8]
 8011a26:	69fb      	ldr	r3, [r7, #28]
 8011a28:	4413      	add	r3, r2
 8011a2a:	7819      	ldrb	r1, [r3, #0]
 8011a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a2e:	69fb      	ldr	r3, [r7, #28]
 8011a30:	4413      	add	r3, r2
 8011a32:	3334      	adds	r3, #52	; 0x34
 8011a34:	460a      	mov	r2, r1
 8011a36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011a38:	68ba      	ldr	r2, [r7, #8]
 8011a3a:	69fb      	ldr	r3, [r7, #28]
 8011a3c:	4413      	add	r3, r2
 8011a3e:	781b      	ldrb	r3, [r3, #0]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d006      	beq.n	8011a52 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011a44:	69fb      	ldr	r3, [r7, #28]
 8011a46:	3301      	adds	r3, #1
 8011a48:	61fb      	str	r3, [r7, #28]
 8011a4a:	69fb      	ldr	r3, [r7, #28]
 8011a4c:	2b0f      	cmp	r3, #15
 8011a4e:	d9e9      	bls.n	8011a24 <prvInitialiseNewTask+0x54>
 8011a50:	e000      	b.n	8011a54 <prvInitialiseNewTask+0x84>
			{
				break;
 8011a52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a56:	2200      	movs	r2, #0
 8011a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011a5c:	e003      	b.n	8011a66 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a60:	2200      	movs	r2, #0
 8011a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a68:	2b06      	cmp	r3, #6
 8011a6a:	d901      	bls.n	8011a70 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011a6c:	2306      	movs	r3, #6
 8011a6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a7a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a7e:	2200      	movs	r2, #0
 8011a80:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a84:	3304      	adds	r3, #4
 8011a86:	4618      	mov	r0, r3
 8011a88:	f7ff f928 	bl	8010cdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a8e:	3318      	adds	r3, #24
 8011a90:	4618      	mov	r0, r3
 8011a92:	f7ff f923 	bl	8010cdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a9e:	f1c3 0207 	rsb	r2, r3, #7
 8011aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aa4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011aaa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aae:	2200      	movs	r2, #0
 8011ab0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011abe:	334c      	adds	r3, #76	; 0x4c
 8011ac0:	2260      	movs	r2, #96	; 0x60
 8011ac2:	2100      	movs	r1, #0
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f001 fec9 	bl	801385c <memset>
 8011aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011acc:	4a0c      	ldr	r2, [pc, #48]	; (8011b00 <prvInitialiseNewTask+0x130>)
 8011ace:	651a      	str	r2, [r3, #80]	; 0x50
 8011ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad2:	4a0c      	ldr	r2, [pc, #48]	; (8011b04 <prvInitialiseNewTask+0x134>)
 8011ad4:	655a      	str	r2, [r3, #84]	; 0x54
 8011ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad8:	4a0b      	ldr	r2, [pc, #44]	; (8011b08 <prvInitialiseNewTask+0x138>)
 8011ada:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011adc:	683a      	ldr	r2, [r7, #0]
 8011ade:	68f9      	ldr	r1, [r7, #12]
 8011ae0:	69b8      	ldr	r0, [r7, #24]
 8011ae2:	f000 fddd 	bl	80126a0 <pxPortInitialiseStack>
 8011ae6:	4602      	mov	r2, r0
 8011ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d002      	beq.n	8011af8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011af6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011af8:	bf00      	nop
 8011afa:	3720      	adds	r7, #32
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}
 8011b00:	08015360 	.word	0x08015360
 8011b04:	08015380 	.word	0x08015380
 8011b08:	08015340 	.word	0x08015340

08011b0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b082      	sub	sp, #8
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011b14:	f000 feee 	bl	80128f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011b18:	4b2a      	ldr	r3, [pc, #168]	; (8011bc4 <prvAddNewTaskToReadyList+0xb8>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	3301      	adds	r3, #1
 8011b1e:	4a29      	ldr	r2, [pc, #164]	; (8011bc4 <prvAddNewTaskToReadyList+0xb8>)
 8011b20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011b22:	4b29      	ldr	r3, [pc, #164]	; (8011bc8 <prvAddNewTaskToReadyList+0xbc>)
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d109      	bne.n	8011b3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011b2a:	4a27      	ldr	r2, [pc, #156]	; (8011bc8 <prvAddNewTaskToReadyList+0xbc>)
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011b30:	4b24      	ldr	r3, [pc, #144]	; (8011bc4 <prvAddNewTaskToReadyList+0xb8>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	2b01      	cmp	r3, #1
 8011b36:	d110      	bne.n	8011b5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011b38:	f000 fbe6 	bl	8012308 <prvInitialiseTaskLists>
 8011b3c:	e00d      	b.n	8011b5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011b3e:	4b23      	ldr	r3, [pc, #140]	; (8011bcc <prvAddNewTaskToReadyList+0xc0>)
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d109      	bne.n	8011b5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011b46:	4b20      	ldr	r3, [pc, #128]	; (8011bc8 <prvAddNewTaskToReadyList+0xbc>)
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b50:	429a      	cmp	r2, r3
 8011b52:	d802      	bhi.n	8011b5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011b54:	4a1c      	ldr	r2, [pc, #112]	; (8011bc8 <prvAddNewTaskToReadyList+0xbc>)
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011b5a:	4b1d      	ldr	r3, [pc, #116]	; (8011bd0 <prvAddNewTaskToReadyList+0xc4>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	3301      	adds	r3, #1
 8011b60:	4a1b      	ldr	r2, [pc, #108]	; (8011bd0 <prvAddNewTaskToReadyList+0xc4>)
 8011b62:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b68:	2201      	movs	r2, #1
 8011b6a:	409a      	lsls	r2, r3
 8011b6c:	4b19      	ldr	r3, [pc, #100]	; (8011bd4 <prvAddNewTaskToReadyList+0xc8>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	4313      	orrs	r3, r2
 8011b72:	4a18      	ldr	r2, [pc, #96]	; (8011bd4 <prvAddNewTaskToReadyList+0xc8>)
 8011b74:	6013      	str	r3, [r2, #0]
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b7a:	4613      	mov	r3, r2
 8011b7c:	009b      	lsls	r3, r3, #2
 8011b7e:	4413      	add	r3, r2
 8011b80:	009b      	lsls	r3, r3, #2
 8011b82:	4a15      	ldr	r2, [pc, #84]	; (8011bd8 <prvAddNewTaskToReadyList+0xcc>)
 8011b84:	441a      	add	r2, r3
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	3304      	adds	r3, #4
 8011b8a:	4619      	mov	r1, r3
 8011b8c:	4610      	mov	r0, r2
 8011b8e:	f7ff f8b2 	bl	8010cf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011b92:	f000 fedf 	bl	8012954 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011b96:	4b0d      	ldr	r3, [pc, #52]	; (8011bcc <prvAddNewTaskToReadyList+0xc0>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d00e      	beq.n	8011bbc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011b9e:	4b0a      	ldr	r3, [pc, #40]	; (8011bc8 <prvAddNewTaskToReadyList+0xbc>)
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	d207      	bcs.n	8011bbc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011bac:	4b0b      	ldr	r3, [pc, #44]	; (8011bdc <prvAddNewTaskToReadyList+0xd0>)
 8011bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bb2:	601a      	str	r2, [r3, #0]
 8011bb4:	f3bf 8f4f 	dsb	sy
 8011bb8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011bbc:	bf00      	nop
 8011bbe:	3708      	adds	r7, #8
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	bd80      	pop	{r7, pc}
 8011bc4:	20002228 	.word	0x20002228
 8011bc8:	20002128 	.word	0x20002128
 8011bcc:	20002234 	.word	0x20002234
 8011bd0:	20002244 	.word	0x20002244
 8011bd4:	20002230 	.word	0x20002230
 8011bd8:	2000212c 	.word	0x2000212c
 8011bdc:	e000ed04 	.word	0xe000ed04

08011be0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b084      	sub	sp, #16
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011be8:	2300      	movs	r3, #0
 8011bea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d017      	beq.n	8011c22 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011bf2:	4b13      	ldr	r3, [pc, #76]	; (8011c40 <vTaskDelay+0x60>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d00a      	beq.n	8011c10 <vTaskDelay+0x30>
	__asm volatile
 8011bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bfe:	f383 8811 	msr	BASEPRI, r3
 8011c02:	f3bf 8f6f 	isb	sy
 8011c06:	f3bf 8f4f 	dsb	sy
 8011c0a:	60bb      	str	r3, [r7, #8]
}
 8011c0c:	bf00      	nop
 8011c0e:	e7fe      	b.n	8011c0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011c10:	f000 f884 	bl	8011d1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011c14:	2100      	movs	r1, #0
 8011c16:	6878      	ldr	r0, [r7, #4]
 8011c18:	f000 fcdc 	bl	80125d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011c1c:	f000 f88c 	bl	8011d38 <xTaskResumeAll>
 8011c20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d107      	bne.n	8011c38 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011c28:	4b06      	ldr	r3, [pc, #24]	; (8011c44 <vTaskDelay+0x64>)
 8011c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c2e:	601a      	str	r2, [r3, #0]
 8011c30:	f3bf 8f4f 	dsb	sy
 8011c34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011c38:	bf00      	nop
 8011c3a:	3710      	adds	r7, #16
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd80      	pop	{r7, pc}
 8011c40:	20002250 	.word	0x20002250
 8011c44:	e000ed04 	.word	0xe000ed04

08011c48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b08a      	sub	sp, #40	; 0x28
 8011c4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011c52:	2300      	movs	r3, #0
 8011c54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011c56:	463a      	mov	r2, r7
 8011c58:	1d39      	adds	r1, r7, #4
 8011c5a:	f107 0308 	add.w	r3, r7, #8
 8011c5e:	4618      	mov	r0, r3
 8011c60:	f7ef f848 	bl	8000cf4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011c64:	6839      	ldr	r1, [r7, #0]
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	68ba      	ldr	r2, [r7, #8]
 8011c6a:	9202      	str	r2, [sp, #8]
 8011c6c:	9301      	str	r3, [sp, #4]
 8011c6e:	2300      	movs	r3, #0
 8011c70:	9300      	str	r3, [sp, #0]
 8011c72:	2300      	movs	r3, #0
 8011c74:	460a      	mov	r2, r1
 8011c76:	4921      	ldr	r1, [pc, #132]	; (8011cfc <vTaskStartScheduler+0xb4>)
 8011c78:	4821      	ldr	r0, [pc, #132]	; (8011d00 <vTaskStartScheduler+0xb8>)
 8011c7a:	f7ff fe07 	bl	801188c <xTaskCreateStatic>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	4a20      	ldr	r2, [pc, #128]	; (8011d04 <vTaskStartScheduler+0xbc>)
 8011c82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011c84:	4b1f      	ldr	r3, [pc, #124]	; (8011d04 <vTaskStartScheduler+0xbc>)
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d002      	beq.n	8011c92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011c8c:	2301      	movs	r3, #1
 8011c8e:	617b      	str	r3, [r7, #20]
 8011c90:	e001      	b.n	8011c96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011c92:	2300      	movs	r3, #0
 8011c94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011c96:	697b      	ldr	r3, [r7, #20]
 8011c98:	2b01      	cmp	r3, #1
 8011c9a:	d11b      	bne.n	8011cd4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8011c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ca0:	f383 8811 	msr	BASEPRI, r3
 8011ca4:	f3bf 8f6f 	isb	sy
 8011ca8:	f3bf 8f4f 	dsb	sy
 8011cac:	613b      	str	r3, [r7, #16]
}
 8011cae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011cb0:	4b15      	ldr	r3, [pc, #84]	; (8011d08 <vTaskStartScheduler+0xc0>)
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	334c      	adds	r3, #76	; 0x4c
 8011cb6:	4a15      	ldr	r2, [pc, #84]	; (8011d0c <vTaskStartScheduler+0xc4>)
 8011cb8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011cba:	4b15      	ldr	r3, [pc, #84]	; (8011d10 <vTaskStartScheduler+0xc8>)
 8011cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8011cc0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011cc2:	4b14      	ldr	r3, [pc, #80]	; (8011d14 <vTaskStartScheduler+0xcc>)
 8011cc4:	2201      	movs	r2, #1
 8011cc6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011cc8:	4b13      	ldr	r3, [pc, #76]	; (8011d18 <vTaskStartScheduler+0xd0>)
 8011cca:	2200      	movs	r2, #0
 8011ccc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011cce:	f000 fd6f 	bl	80127b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011cd2:	e00e      	b.n	8011cf2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cda:	d10a      	bne.n	8011cf2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8011cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ce0:	f383 8811 	msr	BASEPRI, r3
 8011ce4:	f3bf 8f6f 	isb	sy
 8011ce8:	f3bf 8f4f 	dsb	sy
 8011cec:	60fb      	str	r3, [r7, #12]
}
 8011cee:	bf00      	nop
 8011cf0:	e7fe      	b.n	8011cf0 <vTaskStartScheduler+0xa8>
}
 8011cf2:	bf00      	nop
 8011cf4:	3718      	adds	r7, #24
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}
 8011cfa:	bf00      	nop
 8011cfc:	08014ed8 	.word	0x08014ed8
 8011d00:	080122d9 	.word	0x080122d9
 8011d04:	2000224c 	.word	0x2000224c
 8011d08:	20002128 	.word	0x20002128
 8011d0c:	200002b0 	.word	0x200002b0
 8011d10:	20002248 	.word	0x20002248
 8011d14:	20002234 	.word	0x20002234
 8011d18:	2000222c 	.word	0x2000222c

08011d1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011d1c:	b480      	push	{r7}
 8011d1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011d20:	4b04      	ldr	r3, [pc, #16]	; (8011d34 <vTaskSuspendAll+0x18>)
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	3301      	adds	r3, #1
 8011d26:	4a03      	ldr	r2, [pc, #12]	; (8011d34 <vTaskSuspendAll+0x18>)
 8011d28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011d2a:	bf00      	nop
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d32:	4770      	bx	lr
 8011d34:	20002250 	.word	0x20002250

08011d38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b084      	sub	sp, #16
 8011d3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011d42:	2300      	movs	r3, #0
 8011d44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011d46:	4b41      	ldr	r3, [pc, #260]	; (8011e4c <xTaskResumeAll+0x114>)
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d10a      	bne.n	8011d64 <xTaskResumeAll+0x2c>
	__asm volatile
 8011d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d52:	f383 8811 	msr	BASEPRI, r3
 8011d56:	f3bf 8f6f 	isb	sy
 8011d5a:	f3bf 8f4f 	dsb	sy
 8011d5e:	603b      	str	r3, [r7, #0]
}
 8011d60:	bf00      	nop
 8011d62:	e7fe      	b.n	8011d62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011d64:	f000 fdc6 	bl	80128f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011d68:	4b38      	ldr	r3, [pc, #224]	; (8011e4c <xTaskResumeAll+0x114>)
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	3b01      	subs	r3, #1
 8011d6e:	4a37      	ldr	r2, [pc, #220]	; (8011e4c <xTaskResumeAll+0x114>)
 8011d70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d72:	4b36      	ldr	r3, [pc, #216]	; (8011e4c <xTaskResumeAll+0x114>)
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d161      	bne.n	8011e3e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011d7a:	4b35      	ldr	r3, [pc, #212]	; (8011e50 <xTaskResumeAll+0x118>)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d05d      	beq.n	8011e3e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011d82:	e02e      	b.n	8011de2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d84:	4b33      	ldr	r3, [pc, #204]	; (8011e54 <xTaskResumeAll+0x11c>)
 8011d86:	68db      	ldr	r3, [r3, #12]
 8011d88:	68db      	ldr	r3, [r3, #12]
 8011d8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	3318      	adds	r3, #24
 8011d90:	4618      	mov	r0, r3
 8011d92:	f7ff f80d 	bl	8010db0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	3304      	adds	r3, #4
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f7ff f808 	bl	8010db0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011da4:	2201      	movs	r2, #1
 8011da6:	409a      	lsls	r2, r3
 8011da8:	4b2b      	ldr	r3, [pc, #172]	; (8011e58 <xTaskResumeAll+0x120>)
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	4313      	orrs	r3, r2
 8011dae:	4a2a      	ldr	r2, [pc, #168]	; (8011e58 <xTaskResumeAll+0x120>)
 8011db0:	6013      	str	r3, [r2, #0]
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011db6:	4613      	mov	r3, r2
 8011db8:	009b      	lsls	r3, r3, #2
 8011dba:	4413      	add	r3, r2
 8011dbc:	009b      	lsls	r3, r3, #2
 8011dbe:	4a27      	ldr	r2, [pc, #156]	; (8011e5c <xTaskResumeAll+0x124>)
 8011dc0:	441a      	add	r2, r3
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	3304      	adds	r3, #4
 8011dc6:	4619      	mov	r1, r3
 8011dc8:	4610      	mov	r0, r2
 8011dca:	f7fe ff94 	bl	8010cf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dd2:	4b23      	ldr	r3, [pc, #140]	; (8011e60 <xTaskResumeAll+0x128>)
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dd8:	429a      	cmp	r2, r3
 8011dda:	d302      	bcc.n	8011de2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8011ddc:	4b21      	ldr	r3, [pc, #132]	; (8011e64 <xTaskResumeAll+0x12c>)
 8011dde:	2201      	movs	r2, #1
 8011de0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011de2:	4b1c      	ldr	r3, [pc, #112]	; (8011e54 <xTaskResumeAll+0x11c>)
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d1cc      	bne.n	8011d84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d001      	beq.n	8011df4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011df0:	f000 fb2c 	bl	801244c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011df4:	4b1c      	ldr	r3, [pc, #112]	; (8011e68 <xTaskResumeAll+0x130>)
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d010      	beq.n	8011e22 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011e00:	f000 f846 	bl	8011e90 <xTaskIncrementTick>
 8011e04:	4603      	mov	r3, r0
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d002      	beq.n	8011e10 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8011e0a:	4b16      	ldr	r3, [pc, #88]	; (8011e64 <xTaskResumeAll+0x12c>)
 8011e0c:	2201      	movs	r2, #1
 8011e0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	3b01      	subs	r3, #1
 8011e14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d1f1      	bne.n	8011e00 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8011e1c:	4b12      	ldr	r3, [pc, #72]	; (8011e68 <xTaskResumeAll+0x130>)
 8011e1e:	2200      	movs	r2, #0
 8011e20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011e22:	4b10      	ldr	r3, [pc, #64]	; (8011e64 <xTaskResumeAll+0x12c>)
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d009      	beq.n	8011e3e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011e2a:	2301      	movs	r3, #1
 8011e2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011e2e:	4b0f      	ldr	r3, [pc, #60]	; (8011e6c <xTaskResumeAll+0x134>)
 8011e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e34:	601a      	str	r2, [r3, #0]
 8011e36:	f3bf 8f4f 	dsb	sy
 8011e3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011e3e:	f000 fd89 	bl	8012954 <vPortExitCritical>

	return xAlreadyYielded;
 8011e42:	68bb      	ldr	r3, [r7, #8]
}
 8011e44:	4618      	mov	r0, r3
 8011e46:	3710      	adds	r7, #16
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}
 8011e4c:	20002250 	.word	0x20002250
 8011e50:	20002228 	.word	0x20002228
 8011e54:	200021e8 	.word	0x200021e8
 8011e58:	20002230 	.word	0x20002230
 8011e5c:	2000212c 	.word	0x2000212c
 8011e60:	20002128 	.word	0x20002128
 8011e64:	2000223c 	.word	0x2000223c
 8011e68:	20002238 	.word	0x20002238
 8011e6c:	e000ed04 	.word	0xe000ed04

08011e70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011e70:	b480      	push	{r7}
 8011e72:	b083      	sub	sp, #12
 8011e74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011e76:	4b05      	ldr	r3, [pc, #20]	; (8011e8c <xTaskGetTickCount+0x1c>)
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011e7c:	687b      	ldr	r3, [r7, #4]
}
 8011e7e:	4618      	mov	r0, r3
 8011e80:	370c      	adds	r7, #12
 8011e82:	46bd      	mov	sp, r7
 8011e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e88:	4770      	bx	lr
 8011e8a:	bf00      	nop
 8011e8c:	2000222c 	.word	0x2000222c

08011e90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b086      	sub	sp, #24
 8011e94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011e96:	2300      	movs	r3, #0
 8011e98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e9a:	4b4e      	ldr	r3, [pc, #312]	; (8011fd4 <xTaskIncrementTick+0x144>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	f040 808e 	bne.w	8011fc0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011ea4:	4b4c      	ldr	r3, [pc, #304]	; (8011fd8 <xTaskIncrementTick+0x148>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	3301      	adds	r3, #1
 8011eaa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011eac:	4a4a      	ldr	r2, [pc, #296]	; (8011fd8 <xTaskIncrementTick+0x148>)
 8011eae:	693b      	ldr	r3, [r7, #16]
 8011eb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d120      	bne.n	8011efa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011eb8:	4b48      	ldr	r3, [pc, #288]	; (8011fdc <xTaskIncrementTick+0x14c>)
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d00a      	beq.n	8011ed8 <xTaskIncrementTick+0x48>
	__asm volatile
 8011ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ec6:	f383 8811 	msr	BASEPRI, r3
 8011eca:	f3bf 8f6f 	isb	sy
 8011ece:	f3bf 8f4f 	dsb	sy
 8011ed2:	603b      	str	r3, [r7, #0]
}
 8011ed4:	bf00      	nop
 8011ed6:	e7fe      	b.n	8011ed6 <xTaskIncrementTick+0x46>
 8011ed8:	4b40      	ldr	r3, [pc, #256]	; (8011fdc <xTaskIncrementTick+0x14c>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	60fb      	str	r3, [r7, #12]
 8011ede:	4b40      	ldr	r3, [pc, #256]	; (8011fe0 <xTaskIncrementTick+0x150>)
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	4a3e      	ldr	r2, [pc, #248]	; (8011fdc <xTaskIncrementTick+0x14c>)
 8011ee4:	6013      	str	r3, [r2, #0]
 8011ee6:	4a3e      	ldr	r2, [pc, #248]	; (8011fe0 <xTaskIncrementTick+0x150>)
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	6013      	str	r3, [r2, #0]
 8011eec:	4b3d      	ldr	r3, [pc, #244]	; (8011fe4 <xTaskIncrementTick+0x154>)
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	3301      	adds	r3, #1
 8011ef2:	4a3c      	ldr	r2, [pc, #240]	; (8011fe4 <xTaskIncrementTick+0x154>)
 8011ef4:	6013      	str	r3, [r2, #0]
 8011ef6:	f000 faa9 	bl	801244c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011efa:	4b3b      	ldr	r3, [pc, #236]	; (8011fe8 <xTaskIncrementTick+0x158>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	693a      	ldr	r2, [r7, #16]
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d348      	bcc.n	8011f96 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011f04:	4b35      	ldr	r3, [pc, #212]	; (8011fdc <xTaskIncrementTick+0x14c>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d104      	bne.n	8011f18 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f0e:	4b36      	ldr	r3, [pc, #216]	; (8011fe8 <xTaskIncrementTick+0x158>)
 8011f10:	f04f 32ff 	mov.w	r2, #4294967295
 8011f14:	601a      	str	r2, [r3, #0]
					break;
 8011f16:	e03e      	b.n	8011f96 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f18:	4b30      	ldr	r3, [pc, #192]	; (8011fdc <xTaskIncrementTick+0x14c>)
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	68db      	ldr	r3, [r3, #12]
 8011f1e:	68db      	ldr	r3, [r3, #12]
 8011f20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011f22:	68bb      	ldr	r3, [r7, #8]
 8011f24:	685b      	ldr	r3, [r3, #4]
 8011f26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011f28:	693a      	ldr	r2, [r7, #16]
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	429a      	cmp	r2, r3
 8011f2e:	d203      	bcs.n	8011f38 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011f30:	4a2d      	ldr	r2, [pc, #180]	; (8011fe8 <xTaskIncrementTick+0x158>)
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011f36:	e02e      	b.n	8011f96 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	3304      	adds	r3, #4
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	f7fe ff37 	bl	8010db0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011f42:	68bb      	ldr	r3, [r7, #8]
 8011f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d004      	beq.n	8011f54 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011f4a:	68bb      	ldr	r3, [r7, #8]
 8011f4c:	3318      	adds	r3, #24
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f7fe ff2e 	bl	8010db0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f58:	2201      	movs	r2, #1
 8011f5a:	409a      	lsls	r2, r3
 8011f5c:	4b23      	ldr	r3, [pc, #140]	; (8011fec <xTaskIncrementTick+0x15c>)
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	4313      	orrs	r3, r2
 8011f62:	4a22      	ldr	r2, [pc, #136]	; (8011fec <xTaskIncrementTick+0x15c>)
 8011f64:	6013      	str	r3, [r2, #0]
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f6a:	4613      	mov	r3, r2
 8011f6c:	009b      	lsls	r3, r3, #2
 8011f6e:	4413      	add	r3, r2
 8011f70:	009b      	lsls	r3, r3, #2
 8011f72:	4a1f      	ldr	r2, [pc, #124]	; (8011ff0 <xTaskIncrementTick+0x160>)
 8011f74:	441a      	add	r2, r3
 8011f76:	68bb      	ldr	r3, [r7, #8]
 8011f78:	3304      	adds	r3, #4
 8011f7a:	4619      	mov	r1, r3
 8011f7c:	4610      	mov	r0, r2
 8011f7e:	f7fe feba 	bl	8010cf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011f82:	68bb      	ldr	r3, [r7, #8]
 8011f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f86:	4b1b      	ldr	r3, [pc, #108]	; (8011ff4 <xTaskIncrementTick+0x164>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	d3b9      	bcc.n	8011f04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011f90:	2301      	movs	r3, #1
 8011f92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011f94:	e7b6      	b.n	8011f04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011f96:	4b17      	ldr	r3, [pc, #92]	; (8011ff4 <xTaskIncrementTick+0x164>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f9c:	4914      	ldr	r1, [pc, #80]	; (8011ff0 <xTaskIncrementTick+0x160>)
 8011f9e:	4613      	mov	r3, r2
 8011fa0:	009b      	lsls	r3, r3, #2
 8011fa2:	4413      	add	r3, r2
 8011fa4:	009b      	lsls	r3, r3, #2
 8011fa6:	440b      	add	r3, r1
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	2b01      	cmp	r3, #1
 8011fac:	d901      	bls.n	8011fb2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8011fae:	2301      	movs	r3, #1
 8011fb0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011fb2:	4b11      	ldr	r3, [pc, #68]	; (8011ff8 <xTaskIncrementTick+0x168>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d007      	beq.n	8011fca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8011fba:	2301      	movs	r3, #1
 8011fbc:	617b      	str	r3, [r7, #20]
 8011fbe:	e004      	b.n	8011fca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011fc0:	4b0e      	ldr	r3, [pc, #56]	; (8011ffc <xTaskIncrementTick+0x16c>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	3301      	adds	r3, #1
 8011fc6:	4a0d      	ldr	r2, [pc, #52]	; (8011ffc <xTaskIncrementTick+0x16c>)
 8011fc8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011fca:	697b      	ldr	r3, [r7, #20]
}
 8011fcc:	4618      	mov	r0, r3
 8011fce:	3718      	adds	r7, #24
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	bd80      	pop	{r7, pc}
 8011fd4:	20002250 	.word	0x20002250
 8011fd8:	2000222c 	.word	0x2000222c
 8011fdc:	200021e0 	.word	0x200021e0
 8011fe0:	200021e4 	.word	0x200021e4
 8011fe4:	20002240 	.word	0x20002240
 8011fe8:	20002248 	.word	0x20002248
 8011fec:	20002230 	.word	0x20002230
 8011ff0:	2000212c 	.word	0x2000212c
 8011ff4:	20002128 	.word	0x20002128
 8011ff8:	2000223c 	.word	0x2000223c
 8011ffc:	20002238 	.word	0x20002238

08012000 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012000:	b480      	push	{r7}
 8012002:	b087      	sub	sp, #28
 8012004:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012006:	4b29      	ldr	r3, [pc, #164]	; (80120ac <vTaskSwitchContext+0xac>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d003      	beq.n	8012016 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801200e:	4b28      	ldr	r3, [pc, #160]	; (80120b0 <vTaskSwitchContext+0xb0>)
 8012010:	2201      	movs	r2, #1
 8012012:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012014:	e044      	b.n	80120a0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8012016:	4b26      	ldr	r3, [pc, #152]	; (80120b0 <vTaskSwitchContext+0xb0>)
 8012018:	2200      	movs	r2, #0
 801201a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801201c:	4b25      	ldr	r3, [pc, #148]	; (80120b4 <vTaskSwitchContext+0xb4>)
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	fab3 f383 	clz	r3, r3
 8012028:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801202a:	7afb      	ldrb	r3, [r7, #11]
 801202c:	f1c3 031f 	rsb	r3, r3, #31
 8012030:	617b      	str	r3, [r7, #20]
 8012032:	4921      	ldr	r1, [pc, #132]	; (80120b8 <vTaskSwitchContext+0xb8>)
 8012034:	697a      	ldr	r2, [r7, #20]
 8012036:	4613      	mov	r3, r2
 8012038:	009b      	lsls	r3, r3, #2
 801203a:	4413      	add	r3, r2
 801203c:	009b      	lsls	r3, r3, #2
 801203e:	440b      	add	r3, r1
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d10a      	bne.n	801205c <vTaskSwitchContext+0x5c>
	__asm volatile
 8012046:	f04f 0350 	mov.w	r3, #80	; 0x50
 801204a:	f383 8811 	msr	BASEPRI, r3
 801204e:	f3bf 8f6f 	isb	sy
 8012052:	f3bf 8f4f 	dsb	sy
 8012056:	607b      	str	r3, [r7, #4]
}
 8012058:	bf00      	nop
 801205a:	e7fe      	b.n	801205a <vTaskSwitchContext+0x5a>
 801205c:	697a      	ldr	r2, [r7, #20]
 801205e:	4613      	mov	r3, r2
 8012060:	009b      	lsls	r3, r3, #2
 8012062:	4413      	add	r3, r2
 8012064:	009b      	lsls	r3, r3, #2
 8012066:	4a14      	ldr	r2, [pc, #80]	; (80120b8 <vTaskSwitchContext+0xb8>)
 8012068:	4413      	add	r3, r2
 801206a:	613b      	str	r3, [r7, #16]
 801206c:	693b      	ldr	r3, [r7, #16]
 801206e:	685b      	ldr	r3, [r3, #4]
 8012070:	685a      	ldr	r2, [r3, #4]
 8012072:	693b      	ldr	r3, [r7, #16]
 8012074:	605a      	str	r2, [r3, #4]
 8012076:	693b      	ldr	r3, [r7, #16]
 8012078:	685a      	ldr	r2, [r3, #4]
 801207a:	693b      	ldr	r3, [r7, #16]
 801207c:	3308      	adds	r3, #8
 801207e:	429a      	cmp	r2, r3
 8012080:	d104      	bne.n	801208c <vTaskSwitchContext+0x8c>
 8012082:	693b      	ldr	r3, [r7, #16]
 8012084:	685b      	ldr	r3, [r3, #4]
 8012086:	685a      	ldr	r2, [r3, #4]
 8012088:	693b      	ldr	r3, [r7, #16]
 801208a:	605a      	str	r2, [r3, #4]
 801208c:	693b      	ldr	r3, [r7, #16]
 801208e:	685b      	ldr	r3, [r3, #4]
 8012090:	68db      	ldr	r3, [r3, #12]
 8012092:	4a0a      	ldr	r2, [pc, #40]	; (80120bc <vTaskSwitchContext+0xbc>)
 8012094:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012096:	4b09      	ldr	r3, [pc, #36]	; (80120bc <vTaskSwitchContext+0xbc>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	334c      	adds	r3, #76	; 0x4c
 801209c:	4a08      	ldr	r2, [pc, #32]	; (80120c0 <vTaskSwitchContext+0xc0>)
 801209e:	6013      	str	r3, [r2, #0]
}
 80120a0:	bf00      	nop
 80120a2:	371c      	adds	r7, #28
 80120a4:	46bd      	mov	sp, r7
 80120a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120aa:	4770      	bx	lr
 80120ac:	20002250 	.word	0x20002250
 80120b0:	2000223c 	.word	0x2000223c
 80120b4:	20002230 	.word	0x20002230
 80120b8:	2000212c 	.word	0x2000212c
 80120bc:	20002128 	.word	0x20002128
 80120c0:	200002b0 	.word	0x200002b0

080120c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b084      	sub	sp, #16
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
 80120cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d10a      	bne.n	80120ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80120d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d8:	f383 8811 	msr	BASEPRI, r3
 80120dc:	f3bf 8f6f 	isb	sy
 80120e0:	f3bf 8f4f 	dsb	sy
 80120e4:	60fb      	str	r3, [r7, #12]
}
 80120e6:	bf00      	nop
 80120e8:	e7fe      	b.n	80120e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80120ea:	4b07      	ldr	r3, [pc, #28]	; (8012108 <vTaskPlaceOnEventList+0x44>)
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	3318      	adds	r3, #24
 80120f0:	4619      	mov	r1, r3
 80120f2:	6878      	ldr	r0, [r7, #4]
 80120f4:	f7fe fe23 	bl	8010d3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80120f8:	2101      	movs	r1, #1
 80120fa:	6838      	ldr	r0, [r7, #0]
 80120fc:	f000 fa6a 	bl	80125d4 <prvAddCurrentTaskToDelayedList>
}
 8012100:	bf00      	nop
 8012102:	3710      	adds	r7, #16
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}
 8012108:	20002128 	.word	0x20002128

0801210c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b086      	sub	sp, #24
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	68db      	ldr	r3, [r3, #12]
 8012118:	68db      	ldr	r3, [r3, #12]
 801211a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801211c:	693b      	ldr	r3, [r7, #16]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d10a      	bne.n	8012138 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8012122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012126:	f383 8811 	msr	BASEPRI, r3
 801212a:	f3bf 8f6f 	isb	sy
 801212e:	f3bf 8f4f 	dsb	sy
 8012132:	60fb      	str	r3, [r7, #12]
}
 8012134:	bf00      	nop
 8012136:	e7fe      	b.n	8012136 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012138:	693b      	ldr	r3, [r7, #16]
 801213a:	3318      	adds	r3, #24
 801213c:	4618      	mov	r0, r3
 801213e:	f7fe fe37 	bl	8010db0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012142:	4b1d      	ldr	r3, [pc, #116]	; (80121b8 <xTaskRemoveFromEventList+0xac>)
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d11c      	bne.n	8012184 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801214a:	693b      	ldr	r3, [r7, #16]
 801214c:	3304      	adds	r3, #4
 801214e:	4618      	mov	r0, r3
 8012150:	f7fe fe2e 	bl	8010db0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012154:	693b      	ldr	r3, [r7, #16]
 8012156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012158:	2201      	movs	r2, #1
 801215a:	409a      	lsls	r2, r3
 801215c:	4b17      	ldr	r3, [pc, #92]	; (80121bc <xTaskRemoveFromEventList+0xb0>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	4313      	orrs	r3, r2
 8012162:	4a16      	ldr	r2, [pc, #88]	; (80121bc <xTaskRemoveFromEventList+0xb0>)
 8012164:	6013      	str	r3, [r2, #0]
 8012166:	693b      	ldr	r3, [r7, #16]
 8012168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801216a:	4613      	mov	r3, r2
 801216c:	009b      	lsls	r3, r3, #2
 801216e:	4413      	add	r3, r2
 8012170:	009b      	lsls	r3, r3, #2
 8012172:	4a13      	ldr	r2, [pc, #76]	; (80121c0 <xTaskRemoveFromEventList+0xb4>)
 8012174:	441a      	add	r2, r3
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	3304      	adds	r3, #4
 801217a:	4619      	mov	r1, r3
 801217c:	4610      	mov	r0, r2
 801217e:	f7fe fdba 	bl	8010cf6 <vListInsertEnd>
 8012182:	e005      	b.n	8012190 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012184:	693b      	ldr	r3, [r7, #16]
 8012186:	3318      	adds	r3, #24
 8012188:	4619      	mov	r1, r3
 801218a:	480e      	ldr	r0, [pc, #56]	; (80121c4 <xTaskRemoveFromEventList+0xb8>)
 801218c:	f7fe fdb3 	bl	8010cf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012190:	693b      	ldr	r3, [r7, #16]
 8012192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012194:	4b0c      	ldr	r3, [pc, #48]	; (80121c8 <xTaskRemoveFromEventList+0xbc>)
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801219a:	429a      	cmp	r2, r3
 801219c:	d905      	bls.n	80121aa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801219e:	2301      	movs	r3, #1
 80121a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80121a2:	4b0a      	ldr	r3, [pc, #40]	; (80121cc <xTaskRemoveFromEventList+0xc0>)
 80121a4:	2201      	movs	r2, #1
 80121a6:	601a      	str	r2, [r3, #0]
 80121a8:	e001      	b.n	80121ae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80121aa:	2300      	movs	r3, #0
 80121ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80121ae:	697b      	ldr	r3, [r7, #20]
}
 80121b0:	4618      	mov	r0, r3
 80121b2:	3718      	adds	r7, #24
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}
 80121b8:	20002250 	.word	0x20002250
 80121bc:	20002230 	.word	0x20002230
 80121c0:	2000212c 	.word	0x2000212c
 80121c4:	200021e8 	.word	0x200021e8
 80121c8:	20002128 	.word	0x20002128
 80121cc:	2000223c 	.word	0x2000223c

080121d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80121d0:	b480      	push	{r7}
 80121d2:	b083      	sub	sp, #12
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80121d8:	4b06      	ldr	r3, [pc, #24]	; (80121f4 <vTaskInternalSetTimeOutState+0x24>)
 80121da:	681a      	ldr	r2, [r3, #0]
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80121e0:	4b05      	ldr	r3, [pc, #20]	; (80121f8 <vTaskInternalSetTimeOutState+0x28>)
 80121e2:	681a      	ldr	r2, [r3, #0]
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	605a      	str	r2, [r3, #4]
}
 80121e8:	bf00      	nop
 80121ea:	370c      	adds	r7, #12
 80121ec:	46bd      	mov	sp, r7
 80121ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f2:	4770      	bx	lr
 80121f4:	20002240 	.word	0x20002240
 80121f8:	2000222c 	.word	0x2000222c

080121fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b088      	sub	sp, #32
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
 8012204:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d10a      	bne.n	8012222 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801220c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012210:	f383 8811 	msr	BASEPRI, r3
 8012214:	f3bf 8f6f 	isb	sy
 8012218:	f3bf 8f4f 	dsb	sy
 801221c:	613b      	str	r3, [r7, #16]
}
 801221e:	bf00      	nop
 8012220:	e7fe      	b.n	8012220 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d10a      	bne.n	801223e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801222c:	f383 8811 	msr	BASEPRI, r3
 8012230:	f3bf 8f6f 	isb	sy
 8012234:	f3bf 8f4f 	dsb	sy
 8012238:	60fb      	str	r3, [r7, #12]
}
 801223a:	bf00      	nop
 801223c:	e7fe      	b.n	801223c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801223e:	f000 fb59 	bl	80128f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012242:	4b1d      	ldr	r3, [pc, #116]	; (80122b8 <xTaskCheckForTimeOut+0xbc>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	685b      	ldr	r3, [r3, #4]
 801224c:	69ba      	ldr	r2, [r7, #24]
 801224e:	1ad3      	subs	r3, r2, r3
 8012250:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	f1b3 3fff 	cmp.w	r3, #4294967295
 801225a:	d102      	bne.n	8012262 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801225c:	2300      	movs	r3, #0
 801225e:	61fb      	str	r3, [r7, #28]
 8012260:	e023      	b.n	80122aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681a      	ldr	r2, [r3, #0]
 8012266:	4b15      	ldr	r3, [pc, #84]	; (80122bc <xTaskCheckForTimeOut+0xc0>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	429a      	cmp	r2, r3
 801226c:	d007      	beq.n	801227e <xTaskCheckForTimeOut+0x82>
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	685b      	ldr	r3, [r3, #4]
 8012272:	69ba      	ldr	r2, [r7, #24]
 8012274:	429a      	cmp	r2, r3
 8012276:	d302      	bcc.n	801227e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012278:	2301      	movs	r3, #1
 801227a:	61fb      	str	r3, [r7, #28]
 801227c:	e015      	b.n	80122aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801227e:	683b      	ldr	r3, [r7, #0]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	697a      	ldr	r2, [r7, #20]
 8012284:	429a      	cmp	r2, r3
 8012286:	d20b      	bcs.n	80122a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	681a      	ldr	r2, [r3, #0]
 801228c:	697b      	ldr	r3, [r7, #20]
 801228e:	1ad2      	subs	r2, r2, r3
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012294:	6878      	ldr	r0, [r7, #4]
 8012296:	f7ff ff9b 	bl	80121d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801229a:	2300      	movs	r3, #0
 801229c:	61fb      	str	r3, [r7, #28]
 801229e:	e004      	b.n	80122aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	2200      	movs	r2, #0
 80122a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80122a6:	2301      	movs	r3, #1
 80122a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80122aa:	f000 fb53 	bl	8012954 <vPortExitCritical>

	return xReturn;
 80122ae:	69fb      	ldr	r3, [r7, #28]
}
 80122b0:	4618      	mov	r0, r3
 80122b2:	3720      	adds	r7, #32
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd80      	pop	{r7, pc}
 80122b8:	2000222c 	.word	0x2000222c
 80122bc:	20002240 	.word	0x20002240

080122c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80122c0:	b480      	push	{r7}
 80122c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80122c4:	4b03      	ldr	r3, [pc, #12]	; (80122d4 <vTaskMissedYield+0x14>)
 80122c6:	2201      	movs	r2, #1
 80122c8:	601a      	str	r2, [r3, #0]
}
 80122ca:	bf00      	nop
 80122cc:	46bd      	mov	sp, r7
 80122ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d2:	4770      	bx	lr
 80122d4:	2000223c 	.word	0x2000223c

080122d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b082      	sub	sp, #8
 80122dc:	af00      	add	r7, sp, #0
 80122de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80122e0:	f000 f852 	bl	8012388 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80122e4:	4b06      	ldr	r3, [pc, #24]	; (8012300 <prvIdleTask+0x28>)
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	2b01      	cmp	r3, #1
 80122ea:	d9f9      	bls.n	80122e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80122ec:	4b05      	ldr	r3, [pc, #20]	; (8012304 <prvIdleTask+0x2c>)
 80122ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122f2:	601a      	str	r2, [r3, #0]
 80122f4:	f3bf 8f4f 	dsb	sy
 80122f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80122fc:	e7f0      	b.n	80122e0 <prvIdleTask+0x8>
 80122fe:	bf00      	nop
 8012300:	2000212c 	.word	0x2000212c
 8012304:	e000ed04 	.word	0xe000ed04

08012308 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b082      	sub	sp, #8
 801230c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801230e:	2300      	movs	r3, #0
 8012310:	607b      	str	r3, [r7, #4]
 8012312:	e00c      	b.n	801232e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012314:	687a      	ldr	r2, [r7, #4]
 8012316:	4613      	mov	r3, r2
 8012318:	009b      	lsls	r3, r3, #2
 801231a:	4413      	add	r3, r2
 801231c:	009b      	lsls	r3, r3, #2
 801231e:	4a12      	ldr	r2, [pc, #72]	; (8012368 <prvInitialiseTaskLists+0x60>)
 8012320:	4413      	add	r3, r2
 8012322:	4618      	mov	r0, r3
 8012324:	f7fe fcba 	bl	8010c9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	3301      	adds	r3, #1
 801232c:	607b      	str	r3, [r7, #4]
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	2b06      	cmp	r3, #6
 8012332:	d9ef      	bls.n	8012314 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012334:	480d      	ldr	r0, [pc, #52]	; (801236c <prvInitialiseTaskLists+0x64>)
 8012336:	f7fe fcb1 	bl	8010c9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801233a:	480d      	ldr	r0, [pc, #52]	; (8012370 <prvInitialiseTaskLists+0x68>)
 801233c:	f7fe fcae 	bl	8010c9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012340:	480c      	ldr	r0, [pc, #48]	; (8012374 <prvInitialiseTaskLists+0x6c>)
 8012342:	f7fe fcab 	bl	8010c9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012346:	480c      	ldr	r0, [pc, #48]	; (8012378 <prvInitialiseTaskLists+0x70>)
 8012348:	f7fe fca8 	bl	8010c9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801234c:	480b      	ldr	r0, [pc, #44]	; (801237c <prvInitialiseTaskLists+0x74>)
 801234e:	f7fe fca5 	bl	8010c9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012352:	4b0b      	ldr	r3, [pc, #44]	; (8012380 <prvInitialiseTaskLists+0x78>)
 8012354:	4a05      	ldr	r2, [pc, #20]	; (801236c <prvInitialiseTaskLists+0x64>)
 8012356:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012358:	4b0a      	ldr	r3, [pc, #40]	; (8012384 <prvInitialiseTaskLists+0x7c>)
 801235a:	4a05      	ldr	r2, [pc, #20]	; (8012370 <prvInitialiseTaskLists+0x68>)
 801235c:	601a      	str	r2, [r3, #0]
}
 801235e:	bf00      	nop
 8012360:	3708      	adds	r7, #8
 8012362:	46bd      	mov	sp, r7
 8012364:	bd80      	pop	{r7, pc}
 8012366:	bf00      	nop
 8012368:	2000212c 	.word	0x2000212c
 801236c:	200021b8 	.word	0x200021b8
 8012370:	200021cc 	.word	0x200021cc
 8012374:	200021e8 	.word	0x200021e8
 8012378:	200021fc 	.word	0x200021fc
 801237c:	20002214 	.word	0x20002214
 8012380:	200021e0 	.word	0x200021e0
 8012384:	200021e4 	.word	0x200021e4

08012388 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b082      	sub	sp, #8
 801238c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801238e:	e019      	b.n	80123c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012390:	f000 fab0 	bl	80128f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012394:	4b10      	ldr	r3, [pc, #64]	; (80123d8 <prvCheckTasksWaitingTermination+0x50>)
 8012396:	68db      	ldr	r3, [r3, #12]
 8012398:	68db      	ldr	r3, [r3, #12]
 801239a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	3304      	adds	r3, #4
 80123a0:	4618      	mov	r0, r3
 80123a2:	f7fe fd05 	bl	8010db0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80123a6:	4b0d      	ldr	r3, [pc, #52]	; (80123dc <prvCheckTasksWaitingTermination+0x54>)
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	3b01      	subs	r3, #1
 80123ac:	4a0b      	ldr	r2, [pc, #44]	; (80123dc <prvCheckTasksWaitingTermination+0x54>)
 80123ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80123b0:	4b0b      	ldr	r3, [pc, #44]	; (80123e0 <prvCheckTasksWaitingTermination+0x58>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	3b01      	subs	r3, #1
 80123b6:	4a0a      	ldr	r2, [pc, #40]	; (80123e0 <prvCheckTasksWaitingTermination+0x58>)
 80123b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80123ba:	f000 facb 	bl	8012954 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	f000 f810 	bl	80123e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80123c4:	4b06      	ldr	r3, [pc, #24]	; (80123e0 <prvCheckTasksWaitingTermination+0x58>)
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d1e1      	bne.n	8012390 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80123cc:	bf00      	nop
 80123ce:	bf00      	nop
 80123d0:	3708      	adds	r7, #8
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}
 80123d6:	bf00      	nop
 80123d8:	200021fc 	.word	0x200021fc
 80123dc:	20002228 	.word	0x20002228
 80123e0:	20002210 	.word	0x20002210

080123e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b084      	sub	sp, #16
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	334c      	adds	r3, #76	; 0x4c
 80123f0:	4618      	mov	r0, r3
 80123f2:	f001 fb29 	bl	8013a48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d108      	bne.n	8012412 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012404:	4618      	mov	r0, r3
 8012406:	f000 fc63 	bl	8012cd0 <vPortFree>
				vPortFree( pxTCB );
 801240a:	6878      	ldr	r0, [r7, #4]
 801240c:	f000 fc60 	bl	8012cd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012410:	e018      	b.n	8012444 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8012418:	2b01      	cmp	r3, #1
 801241a:	d103      	bne.n	8012424 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801241c:	6878      	ldr	r0, [r7, #4]
 801241e:	f000 fc57 	bl	8012cd0 <vPortFree>
	}
 8012422:	e00f      	b.n	8012444 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801242a:	2b02      	cmp	r3, #2
 801242c:	d00a      	beq.n	8012444 <prvDeleteTCB+0x60>
	__asm volatile
 801242e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012432:	f383 8811 	msr	BASEPRI, r3
 8012436:	f3bf 8f6f 	isb	sy
 801243a:	f3bf 8f4f 	dsb	sy
 801243e:	60fb      	str	r3, [r7, #12]
}
 8012440:	bf00      	nop
 8012442:	e7fe      	b.n	8012442 <prvDeleteTCB+0x5e>
	}
 8012444:	bf00      	nop
 8012446:	3710      	adds	r7, #16
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}

0801244c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801244c:	b480      	push	{r7}
 801244e:	b083      	sub	sp, #12
 8012450:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012452:	4b0c      	ldr	r3, [pc, #48]	; (8012484 <prvResetNextTaskUnblockTime+0x38>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d104      	bne.n	8012466 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801245c:	4b0a      	ldr	r3, [pc, #40]	; (8012488 <prvResetNextTaskUnblockTime+0x3c>)
 801245e:	f04f 32ff 	mov.w	r2, #4294967295
 8012462:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012464:	e008      	b.n	8012478 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012466:	4b07      	ldr	r3, [pc, #28]	; (8012484 <prvResetNextTaskUnblockTime+0x38>)
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	68db      	ldr	r3, [r3, #12]
 801246c:	68db      	ldr	r3, [r3, #12]
 801246e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	685b      	ldr	r3, [r3, #4]
 8012474:	4a04      	ldr	r2, [pc, #16]	; (8012488 <prvResetNextTaskUnblockTime+0x3c>)
 8012476:	6013      	str	r3, [r2, #0]
}
 8012478:	bf00      	nop
 801247a:	370c      	adds	r7, #12
 801247c:	46bd      	mov	sp, r7
 801247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012482:	4770      	bx	lr
 8012484:	200021e0 	.word	0x200021e0
 8012488:	20002248 	.word	0x20002248

0801248c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801248c:	b480      	push	{r7}
 801248e:	b083      	sub	sp, #12
 8012490:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012492:	4b0b      	ldr	r3, [pc, #44]	; (80124c0 <xTaskGetSchedulerState+0x34>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d102      	bne.n	80124a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801249a:	2301      	movs	r3, #1
 801249c:	607b      	str	r3, [r7, #4]
 801249e:	e008      	b.n	80124b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80124a0:	4b08      	ldr	r3, [pc, #32]	; (80124c4 <xTaskGetSchedulerState+0x38>)
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d102      	bne.n	80124ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80124a8:	2302      	movs	r3, #2
 80124aa:	607b      	str	r3, [r7, #4]
 80124ac:	e001      	b.n	80124b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80124ae:	2300      	movs	r3, #0
 80124b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80124b2:	687b      	ldr	r3, [r7, #4]
	}
 80124b4:	4618      	mov	r0, r3
 80124b6:	370c      	adds	r7, #12
 80124b8:	46bd      	mov	sp, r7
 80124ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124be:	4770      	bx	lr
 80124c0:	20002234 	.word	0x20002234
 80124c4:	20002250 	.word	0x20002250

080124c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b086      	sub	sp, #24
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80124d4:	2300      	movs	r3, #0
 80124d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d06e      	beq.n	80125bc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80124de:	4b3a      	ldr	r3, [pc, #232]	; (80125c8 <xTaskPriorityDisinherit+0x100>)
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	693a      	ldr	r2, [r7, #16]
 80124e4:	429a      	cmp	r2, r3
 80124e6:	d00a      	beq.n	80124fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80124e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ec:	f383 8811 	msr	BASEPRI, r3
 80124f0:	f3bf 8f6f 	isb	sy
 80124f4:	f3bf 8f4f 	dsb	sy
 80124f8:	60fb      	str	r3, [r7, #12]
}
 80124fa:	bf00      	nop
 80124fc:	e7fe      	b.n	80124fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80124fe:	693b      	ldr	r3, [r7, #16]
 8012500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012502:	2b00      	cmp	r3, #0
 8012504:	d10a      	bne.n	801251c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801250a:	f383 8811 	msr	BASEPRI, r3
 801250e:	f3bf 8f6f 	isb	sy
 8012512:	f3bf 8f4f 	dsb	sy
 8012516:	60bb      	str	r3, [r7, #8]
}
 8012518:	bf00      	nop
 801251a:	e7fe      	b.n	801251a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801251c:	693b      	ldr	r3, [r7, #16]
 801251e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012520:	1e5a      	subs	r2, r3, #1
 8012522:	693b      	ldr	r3, [r7, #16]
 8012524:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012526:	693b      	ldr	r3, [r7, #16]
 8012528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801252a:	693b      	ldr	r3, [r7, #16]
 801252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801252e:	429a      	cmp	r2, r3
 8012530:	d044      	beq.n	80125bc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012532:	693b      	ldr	r3, [r7, #16]
 8012534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012536:	2b00      	cmp	r3, #0
 8012538:	d140      	bne.n	80125bc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801253a:	693b      	ldr	r3, [r7, #16]
 801253c:	3304      	adds	r3, #4
 801253e:	4618      	mov	r0, r3
 8012540:	f7fe fc36 	bl	8010db0 <uxListRemove>
 8012544:	4603      	mov	r3, r0
 8012546:	2b00      	cmp	r3, #0
 8012548:	d115      	bne.n	8012576 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801254a:	693b      	ldr	r3, [r7, #16]
 801254c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801254e:	491f      	ldr	r1, [pc, #124]	; (80125cc <xTaskPriorityDisinherit+0x104>)
 8012550:	4613      	mov	r3, r2
 8012552:	009b      	lsls	r3, r3, #2
 8012554:	4413      	add	r3, r2
 8012556:	009b      	lsls	r3, r3, #2
 8012558:	440b      	add	r3, r1
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d10a      	bne.n	8012576 <xTaskPriorityDisinherit+0xae>
 8012560:	693b      	ldr	r3, [r7, #16]
 8012562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012564:	2201      	movs	r2, #1
 8012566:	fa02 f303 	lsl.w	r3, r2, r3
 801256a:	43da      	mvns	r2, r3
 801256c:	4b18      	ldr	r3, [pc, #96]	; (80125d0 <xTaskPriorityDisinherit+0x108>)
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	4013      	ands	r3, r2
 8012572:	4a17      	ldr	r2, [pc, #92]	; (80125d0 <xTaskPriorityDisinherit+0x108>)
 8012574:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012576:	693b      	ldr	r3, [r7, #16]
 8012578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801257a:	693b      	ldr	r3, [r7, #16]
 801257c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801257e:	693b      	ldr	r3, [r7, #16]
 8012580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012582:	f1c3 0207 	rsb	r2, r3, #7
 8012586:	693b      	ldr	r3, [r7, #16]
 8012588:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801258a:	693b      	ldr	r3, [r7, #16]
 801258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801258e:	2201      	movs	r2, #1
 8012590:	409a      	lsls	r2, r3
 8012592:	4b0f      	ldr	r3, [pc, #60]	; (80125d0 <xTaskPriorityDisinherit+0x108>)
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	4313      	orrs	r3, r2
 8012598:	4a0d      	ldr	r2, [pc, #52]	; (80125d0 <xTaskPriorityDisinherit+0x108>)
 801259a:	6013      	str	r3, [r2, #0]
 801259c:	693b      	ldr	r3, [r7, #16]
 801259e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125a0:	4613      	mov	r3, r2
 80125a2:	009b      	lsls	r3, r3, #2
 80125a4:	4413      	add	r3, r2
 80125a6:	009b      	lsls	r3, r3, #2
 80125a8:	4a08      	ldr	r2, [pc, #32]	; (80125cc <xTaskPriorityDisinherit+0x104>)
 80125aa:	441a      	add	r2, r3
 80125ac:	693b      	ldr	r3, [r7, #16]
 80125ae:	3304      	adds	r3, #4
 80125b0:	4619      	mov	r1, r3
 80125b2:	4610      	mov	r0, r2
 80125b4:	f7fe fb9f 	bl	8010cf6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80125b8:	2301      	movs	r3, #1
 80125ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80125bc:	697b      	ldr	r3, [r7, #20]
	}
 80125be:	4618      	mov	r0, r3
 80125c0:	3718      	adds	r7, #24
 80125c2:	46bd      	mov	sp, r7
 80125c4:	bd80      	pop	{r7, pc}
 80125c6:	bf00      	nop
 80125c8:	20002128 	.word	0x20002128
 80125cc:	2000212c 	.word	0x2000212c
 80125d0:	20002230 	.word	0x20002230

080125d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b084      	sub	sp, #16
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
 80125dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80125de:	4b29      	ldr	r3, [pc, #164]	; (8012684 <prvAddCurrentTaskToDelayedList+0xb0>)
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80125e4:	4b28      	ldr	r3, [pc, #160]	; (8012688 <prvAddCurrentTaskToDelayedList+0xb4>)
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	3304      	adds	r3, #4
 80125ea:	4618      	mov	r0, r3
 80125ec:	f7fe fbe0 	bl	8010db0 <uxListRemove>
 80125f0:	4603      	mov	r3, r0
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d10b      	bne.n	801260e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80125f6:	4b24      	ldr	r3, [pc, #144]	; (8012688 <prvAddCurrentTaskToDelayedList+0xb4>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125fc:	2201      	movs	r2, #1
 80125fe:	fa02 f303 	lsl.w	r3, r2, r3
 8012602:	43da      	mvns	r2, r3
 8012604:	4b21      	ldr	r3, [pc, #132]	; (801268c <prvAddCurrentTaskToDelayedList+0xb8>)
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	4013      	ands	r3, r2
 801260a:	4a20      	ldr	r2, [pc, #128]	; (801268c <prvAddCurrentTaskToDelayedList+0xb8>)
 801260c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012614:	d10a      	bne.n	801262c <prvAddCurrentTaskToDelayedList+0x58>
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d007      	beq.n	801262c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801261c:	4b1a      	ldr	r3, [pc, #104]	; (8012688 <prvAddCurrentTaskToDelayedList+0xb4>)
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	3304      	adds	r3, #4
 8012622:	4619      	mov	r1, r3
 8012624:	481a      	ldr	r0, [pc, #104]	; (8012690 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012626:	f7fe fb66 	bl	8010cf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801262a:	e026      	b.n	801267a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801262c:	68fa      	ldr	r2, [r7, #12]
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	4413      	add	r3, r2
 8012632:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012634:	4b14      	ldr	r3, [pc, #80]	; (8012688 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	68ba      	ldr	r2, [r7, #8]
 801263a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801263c:	68ba      	ldr	r2, [r7, #8]
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	429a      	cmp	r2, r3
 8012642:	d209      	bcs.n	8012658 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012644:	4b13      	ldr	r3, [pc, #76]	; (8012694 <prvAddCurrentTaskToDelayedList+0xc0>)
 8012646:	681a      	ldr	r2, [r3, #0]
 8012648:	4b0f      	ldr	r3, [pc, #60]	; (8012688 <prvAddCurrentTaskToDelayedList+0xb4>)
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	3304      	adds	r3, #4
 801264e:	4619      	mov	r1, r3
 8012650:	4610      	mov	r0, r2
 8012652:	f7fe fb74 	bl	8010d3e <vListInsert>
}
 8012656:	e010      	b.n	801267a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012658:	4b0f      	ldr	r3, [pc, #60]	; (8012698 <prvAddCurrentTaskToDelayedList+0xc4>)
 801265a:	681a      	ldr	r2, [r3, #0]
 801265c:	4b0a      	ldr	r3, [pc, #40]	; (8012688 <prvAddCurrentTaskToDelayedList+0xb4>)
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	3304      	adds	r3, #4
 8012662:	4619      	mov	r1, r3
 8012664:	4610      	mov	r0, r2
 8012666:	f7fe fb6a 	bl	8010d3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801266a:	4b0c      	ldr	r3, [pc, #48]	; (801269c <prvAddCurrentTaskToDelayedList+0xc8>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	68ba      	ldr	r2, [r7, #8]
 8012670:	429a      	cmp	r2, r3
 8012672:	d202      	bcs.n	801267a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012674:	4a09      	ldr	r2, [pc, #36]	; (801269c <prvAddCurrentTaskToDelayedList+0xc8>)
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	6013      	str	r3, [r2, #0]
}
 801267a:	bf00      	nop
 801267c:	3710      	adds	r7, #16
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}
 8012682:	bf00      	nop
 8012684:	2000222c 	.word	0x2000222c
 8012688:	20002128 	.word	0x20002128
 801268c:	20002230 	.word	0x20002230
 8012690:	20002214 	.word	0x20002214
 8012694:	200021e4 	.word	0x200021e4
 8012698:	200021e0 	.word	0x200021e0
 801269c:	20002248 	.word	0x20002248

080126a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80126a0:	b480      	push	{r7}
 80126a2:	b085      	sub	sp, #20
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	60f8      	str	r0, [r7, #12]
 80126a8:	60b9      	str	r1, [r7, #8]
 80126aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	3b04      	subs	r3, #4
 80126b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80126b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	3b04      	subs	r3, #4
 80126be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80126c0:	68bb      	ldr	r3, [r7, #8]
 80126c2:	f023 0201 	bic.w	r2, r3, #1
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	3b04      	subs	r3, #4
 80126ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80126d0:	4a0c      	ldr	r2, [pc, #48]	; (8012704 <pxPortInitialiseStack+0x64>)
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	3b14      	subs	r3, #20
 80126da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80126dc:	687a      	ldr	r2, [r7, #4]
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	3b04      	subs	r3, #4
 80126e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	f06f 0202 	mvn.w	r2, #2
 80126ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	3b20      	subs	r3, #32
 80126f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80126f6:	68fb      	ldr	r3, [r7, #12]
}
 80126f8:	4618      	mov	r0, r3
 80126fa:	3714      	adds	r7, #20
 80126fc:	46bd      	mov	sp, r7
 80126fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012702:	4770      	bx	lr
 8012704:	08012709 	.word	0x08012709

08012708 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012708:	b480      	push	{r7}
 801270a:	b085      	sub	sp, #20
 801270c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801270e:	2300      	movs	r3, #0
 8012710:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012712:	4b12      	ldr	r3, [pc, #72]	; (801275c <prvTaskExitError+0x54>)
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	f1b3 3fff 	cmp.w	r3, #4294967295
 801271a:	d00a      	beq.n	8012732 <prvTaskExitError+0x2a>
	__asm volatile
 801271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012720:	f383 8811 	msr	BASEPRI, r3
 8012724:	f3bf 8f6f 	isb	sy
 8012728:	f3bf 8f4f 	dsb	sy
 801272c:	60fb      	str	r3, [r7, #12]
}
 801272e:	bf00      	nop
 8012730:	e7fe      	b.n	8012730 <prvTaskExitError+0x28>
	__asm volatile
 8012732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012736:	f383 8811 	msr	BASEPRI, r3
 801273a:	f3bf 8f6f 	isb	sy
 801273e:	f3bf 8f4f 	dsb	sy
 8012742:	60bb      	str	r3, [r7, #8]
}
 8012744:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012746:	bf00      	nop
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d0fc      	beq.n	8012748 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801274e:	bf00      	nop
 8012750:	bf00      	nop
 8012752:	3714      	adds	r7, #20
 8012754:	46bd      	mov	sp, r7
 8012756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275a:	4770      	bx	lr
 801275c:	200002ac 	.word	0x200002ac

08012760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012760:	4b07      	ldr	r3, [pc, #28]	; (8012780 <pxCurrentTCBConst2>)
 8012762:	6819      	ldr	r1, [r3, #0]
 8012764:	6808      	ldr	r0, [r1, #0]
 8012766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801276a:	f380 8809 	msr	PSP, r0
 801276e:	f3bf 8f6f 	isb	sy
 8012772:	f04f 0000 	mov.w	r0, #0
 8012776:	f380 8811 	msr	BASEPRI, r0
 801277a:	4770      	bx	lr
 801277c:	f3af 8000 	nop.w

08012780 <pxCurrentTCBConst2>:
 8012780:	20002128 	.word	0x20002128
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012784:	bf00      	nop
 8012786:	bf00      	nop

08012788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012788:	4808      	ldr	r0, [pc, #32]	; (80127ac <prvPortStartFirstTask+0x24>)
 801278a:	6800      	ldr	r0, [r0, #0]
 801278c:	6800      	ldr	r0, [r0, #0]
 801278e:	f380 8808 	msr	MSP, r0
 8012792:	f04f 0000 	mov.w	r0, #0
 8012796:	f380 8814 	msr	CONTROL, r0
 801279a:	b662      	cpsie	i
 801279c:	b661      	cpsie	f
 801279e:	f3bf 8f4f 	dsb	sy
 80127a2:	f3bf 8f6f 	isb	sy
 80127a6:	df00      	svc	0
 80127a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80127aa:	bf00      	nop
 80127ac:	e000ed08 	.word	0xe000ed08

080127b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b086      	sub	sp, #24
 80127b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80127b6:	4b46      	ldr	r3, [pc, #280]	; (80128d0 <xPortStartScheduler+0x120>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	4a46      	ldr	r2, [pc, #280]	; (80128d4 <xPortStartScheduler+0x124>)
 80127bc:	4293      	cmp	r3, r2
 80127be:	d10a      	bne.n	80127d6 <xPortStartScheduler+0x26>
	__asm volatile
 80127c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127c4:	f383 8811 	msr	BASEPRI, r3
 80127c8:	f3bf 8f6f 	isb	sy
 80127cc:	f3bf 8f4f 	dsb	sy
 80127d0:	613b      	str	r3, [r7, #16]
}
 80127d2:	bf00      	nop
 80127d4:	e7fe      	b.n	80127d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80127d6:	4b3e      	ldr	r3, [pc, #248]	; (80128d0 <xPortStartScheduler+0x120>)
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	4a3f      	ldr	r2, [pc, #252]	; (80128d8 <xPortStartScheduler+0x128>)
 80127dc:	4293      	cmp	r3, r2
 80127de:	d10a      	bne.n	80127f6 <xPortStartScheduler+0x46>
	__asm volatile
 80127e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127e4:	f383 8811 	msr	BASEPRI, r3
 80127e8:	f3bf 8f6f 	isb	sy
 80127ec:	f3bf 8f4f 	dsb	sy
 80127f0:	60fb      	str	r3, [r7, #12]
}
 80127f2:	bf00      	nop
 80127f4:	e7fe      	b.n	80127f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80127f6:	4b39      	ldr	r3, [pc, #228]	; (80128dc <xPortStartScheduler+0x12c>)
 80127f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80127fa:	697b      	ldr	r3, [r7, #20]
 80127fc:	781b      	ldrb	r3, [r3, #0]
 80127fe:	b2db      	uxtb	r3, r3
 8012800:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012802:	697b      	ldr	r3, [r7, #20]
 8012804:	22ff      	movs	r2, #255	; 0xff
 8012806:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012808:	697b      	ldr	r3, [r7, #20]
 801280a:	781b      	ldrb	r3, [r3, #0]
 801280c:	b2db      	uxtb	r3, r3
 801280e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012810:	78fb      	ldrb	r3, [r7, #3]
 8012812:	b2db      	uxtb	r3, r3
 8012814:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012818:	b2da      	uxtb	r2, r3
 801281a:	4b31      	ldr	r3, [pc, #196]	; (80128e0 <xPortStartScheduler+0x130>)
 801281c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801281e:	4b31      	ldr	r3, [pc, #196]	; (80128e4 <xPortStartScheduler+0x134>)
 8012820:	2207      	movs	r2, #7
 8012822:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012824:	e009      	b.n	801283a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012826:	4b2f      	ldr	r3, [pc, #188]	; (80128e4 <xPortStartScheduler+0x134>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	3b01      	subs	r3, #1
 801282c:	4a2d      	ldr	r2, [pc, #180]	; (80128e4 <xPortStartScheduler+0x134>)
 801282e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012830:	78fb      	ldrb	r3, [r7, #3]
 8012832:	b2db      	uxtb	r3, r3
 8012834:	005b      	lsls	r3, r3, #1
 8012836:	b2db      	uxtb	r3, r3
 8012838:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801283a:	78fb      	ldrb	r3, [r7, #3]
 801283c:	b2db      	uxtb	r3, r3
 801283e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012842:	2b80      	cmp	r3, #128	; 0x80
 8012844:	d0ef      	beq.n	8012826 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012846:	4b27      	ldr	r3, [pc, #156]	; (80128e4 <xPortStartScheduler+0x134>)
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	f1c3 0307 	rsb	r3, r3, #7
 801284e:	2b04      	cmp	r3, #4
 8012850:	d00a      	beq.n	8012868 <xPortStartScheduler+0xb8>
	__asm volatile
 8012852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012856:	f383 8811 	msr	BASEPRI, r3
 801285a:	f3bf 8f6f 	isb	sy
 801285e:	f3bf 8f4f 	dsb	sy
 8012862:	60bb      	str	r3, [r7, #8]
}
 8012864:	bf00      	nop
 8012866:	e7fe      	b.n	8012866 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012868:	4b1e      	ldr	r3, [pc, #120]	; (80128e4 <xPortStartScheduler+0x134>)
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	021b      	lsls	r3, r3, #8
 801286e:	4a1d      	ldr	r2, [pc, #116]	; (80128e4 <xPortStartScheduler+0x134>)
 8012870:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012872:	4b1c      	ldr	r3, [pc, #112]	; (80128e4 <xPortStartScheduler+0x134>)
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801287a:	4a1a      	ldr	r2, [pc, #104]	; (80128e4 <xPortStartScheduler+0x134>)
 801287c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	b2da      	uxtb	r2, r3
 8012882:	697b      	ldr	r3, [r7, #20]
 8012884:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012886:	4b18      	ldr	r3, [pc, #96]	; (80128e8 <xPortStartScheduler+0x138>)
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	4a17      	ldr	r2, [pc, #92]	; (80128e8 <xPortStartScheduler+0x138>)
 801288c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012890:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012892:	4b15      	ldr	r3, [pc, #84]	; (80128e8 <xPortStartScheduler+0x138>)
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	4a14      	ldr	r2, [pc, #80]	; (80128e8 <xPortStartScheduler+0x138>)
 8012898:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801289c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801289e:	f000 f8dd 	bl	8012a5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80128a2:	4b12      	ldr	r3, [pc, #72]	; (80128ec <xPortStartScheduler+0x13c>)
 80128a4:	2200      	movs	r2, #0
 80128a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80128a8:	f000 f8fc 	bl	8012aa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80128ac:	4b10      	ldr	r3, [pc, #64]	; (80128f0 <xPortStartScheduler+0x140>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	4a0f      	ldr	r2, [pc, #60]	; (80128f0 <xPortStartScheduler+0x140>)
 80128b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80128b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80128b8:	f7ff ff66 	bl	8012788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80128bc:	f7ff fba0 	bl	8012000 <vTaskSwitchContext>
	prvTaskExitError();
 80128c0:	f7ff ff22 	bl	8012708 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80128c4:	2300      	movs	r3, #0
}
 80128c6:	4618      	mov	r0, r3
 80128c8:	3718      	adds	r7, #24
 80128ca:	46bd      	mov	sp, r7
 80128cc:	bd80      	pop	{r7, pc}
 80128ce:	bf00      	nop
 80128d0:	e000ed00 	.word	0xe000ed00
 80128d4:	410fc271 	.word	0x410fc271
 80128d8:	410fc270 	.word	0x410fc270
 80128dc:	e000e400 	.word	0xe000e400
 80128e0:	20002254 	.word	0x20002254
 80128e4:	20002258 	.word	0x20002258
 80128e8:	e000ed20 	.word	0xe000ed20
 80128ec:	200002ac 	.word	0x200002ac
 80128f0:	e000ef34 	.word	0xe000ef34

080128f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80128f4:	b480      	push	{r7}
 80128f6:	b083      	sub	sp, #12
 80128f8:	af00      	add	r7, sp, #0
	__asm volatile
 80128fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128fe:	f383 8811 	msr	BASEPRI, r3
 8012902:	f3bf 8f6f 	isb	sy
 8012906:	f3bf 8f4f 	dsb	sy
 801290a:	607b      	str	r3, [r7, #4]
}
 801290c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801290e:	4b0f      	ldr	r3, [pc, #60]	; (801294c <vPortEnterCritical+0x58>)
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	3301      	adds	r3, #1
 8012914:	4a0d      	ldr	r2, [pc, #52]	; (801294c <vPortEnterCritical+0x58>)
 8012916:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012918:	4b0c      	ldr	r3, [pc, #48]	; (801294c <vPortEnterCritical+0x58>)
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	2b01      	cmp	r3, #1
 801291e:	d10f      	bne.n	8012940 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012920:	4b0b      	ldr	r3, [pc, #44]	; (8012950 <vPortEnterCritical+0x5c>)
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	b2db      	uxtb	r3, r3
 8012926:	2b00      	cmp	r3, #0
 8012928:	d00a      	beq.n	8012940 <vPortEnterCritical+0x4c>
	__asm volatile
 801292a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801292e:	f383 8811 	msr	BASEPRI, r3
 8012932:	f3bf 8f6f 	isb	sy
 8012936:	f3bf 8f4f 	dsb	sy
 801293a:	603b      	str	r3, [r7, #0]
}
 801293c:	bf00      	nop
 801293e:	e7fe      	b.n	801293e <vPortEnterCritical+0x4a>
	}
}
 8012940:	bf00      	nop
 8012942:	370c      	adds	r7, #12
 8012944:	46bd      	mov	sp, r7
 8012946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294a:	4770      	bx	lr
 801294c:	200002ac 	.word	0x200002ac
 8012950:	e000ed04 	.word	0xe000ed04

08012954 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012954:	b480      	push	{r7}
 8012956:	b083      	sub	sp, #12
 8012958:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801295a:	4b12      	ldr	r3, [pc, #72]	; (80129a4 <vPortExitCritical+0x50>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d10a      	bne.n	8012978 <vPortExitCritical+0x24>
	__asm volatile
 8012962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012966:	f383 8811 	msr	BASEPRI, r3
 801296a:	f3bf 8f6f 	isb	sy
 801296e:	f3bf 8f4f 	dsb	sy
 8012972:	607b      	str	r3, [r7, #4]
}
 8012974:	bf00      	nop
 8012976:	e7fe      	b.n	8012976 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012978:	4b0a      	ldr	r3, [pc, #40]	; (80129a4 <vPortExitCritical+0x50>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	3b01      	subs	r3, #1
 801297e:	4a09      	ldr	r2, [pc, #36]	; (80129a4 <vPortExitCritical+0x50>)
 8012980:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012982:	4b08      	ldr	r3, [pc, #32]	; (80129a4 <vPortExitCritical+0x50>)
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d105      	bne.n	8012996 <vPortExitCritical+0x42>
 801298a:	2300      	movs	r3, #0
 801298c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	f383 8811 	msr	BASEPRI, r3
}
 8012994:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012996:	bf00      	nop
 8012998:	370c      	adds	r7, #12
 801299a:	46bd      	mov	sp, r7
 801299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a0:	4770      	bx	lr
 80129a2:	bf00      	nop
 80129a4:	200002ac 	.word	0x200002ac
	...

080129b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80129b0:	f3ef 8009 	mrs	r0, PSP
 80129b4:	f3bf 8f6f 	isb	sy
 80129b8:	4b15      	ldr	r3, [pc, #84]	; (8012a10 <pxCurrentTCBConst>)
 80129ba:	681a      	ldr	r2, [r3, #0]
 80129bc:	f01e 0f10 	tst.w	lr, #16
 80129c0:	bf08      	it	eq
 80129c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80129c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129ca:	6010      	str	r0, [r2, #0]
 80129cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80129d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80129d4:	f380 8811 	msr	BASEPRI, r0
 80129d8:	f3bf 8f4f 	dsb	sy
 80129dc:	f3bf 8f6f 	isb	sy
 80129e0:	f7ff fb0e 	bl	8012000 <vTaskSwitchContext>
 80129e4:	f04f 0000 	mov.w	r0, #0
 80129e8:	f380 8811 	msr	BASEPRI, r0
 80129ec:	bc09      	pop	{r0, r3}
 80129ee:	6819      	ldr	r1, [r3, #0]
 80129f0:	6808      	ldr	r0, [r1, #0]
 80129f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129f6:	f01e 0f10 	tst.w	lr, #16
 80129fa:	bf08      	it	eq
 80129fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012a00:	f380 8809 	msr	PSP, r0
 8012a04:	f3bf 8f6f 	isb	sy
 8012a08:	4770      	bx	lr
 8012a0a:	bf00      	nop
 8012a0c:	f3af 8000 	nop.w

08012a10 <pxCurrentTCBConst>:
 8012a10:	20002128 	.word	0x20002128
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012a14:	bf00      	nop
 8012a16:	bf00      	nop

08012a18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b082      	sub	sp, #8
 8012a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8012a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a22:	f383 8811 	msr	BASEPRI, r3
 8012a26:	f3bf 8f6f 	isb	sy
 8012a2a:	f3bf 8f4f 	dsb	sy
 8012a2e:	607b      	str	r3, [r7, #4]
}
 8012a30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012a32:	f7ff fa2d 	bl	8011e90 <xTaskIncrementTick>
 8012a36:	4603      	mov	r3, r0
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d003      	beq.n	8012a44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012a3c:	4b06      	ldr	r3, [pc, #24]	; (8012a58 <SysTick_Handler+0x40>)
 8012a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a42:	601a      	str	r2, [r3, #0]
 8012a44:	2300      	movs	r3, #0
 8012a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012a48:	683b      	ldr	r3, [r7, #0]
 8012a4a:	f383 8811 	msr	BASEPRI, r3
}
 8012a4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012a50:	bf00      	nop
 8012a52:	3708      	adds	r7, #8
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd80      	pop	{r7, pc}
 8012a58:	e000ed04 	.word	0xe000ed04

08012a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012a5c:	b480      	push	{r7}
 8012a5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012a60:	4b0b      	ldr	r3, [pc, #44]	; (8012a90 <vPortSetupTimerInterrupt+0x34>)
 8012a62:	2200      	movs	r2, #0
 8012a64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012a66:	4b0b      	ldr	r3, [pc, #44]	; (8012a94 <vPortSetupTimerInterrupt+0x38>)
 8012a68:	2200      	movs	r2, #0
 8012a6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012a6c:	4b0a      	ldr	r3, [pc, #40]	; (8012a98 <vPortSetupTimerInterrupt+0x3c>)
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	4a0a      	ldr	r2, [pc, #40]	; (8012a9c <vPortSetupTimerInterrupt+0x40>)
 8012a72:	fba2 2303 	umull	r2, r3, r2, r3
 8012a76:	099b      	lsrs	r3, r3, #6
 8012a78:	4a09      	ldr	r2, [pc, #36]	; (8012aa0 <vPortSetupTimerInterrupt+0x44>)
 8012a7a:	3b01      	subs	r3, #1
 8012a7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012a7e:	4b04      	ldr	r3, [pc, #16]	; (8012a90 <vPortSetupTimerInterrupt+0x34>)
 8012a80:	2207      	movs	r2, #7
 8012a82:	601a      	str	r2, [r3, #0]
}
 8012a84:	bf00      	nop
 8012a86:	46bd      	mov	sp, r7
 8012a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8c:	4770      	bx	lr
 8012a8e:	bf00      	nop
 8012a90:	e000e010 	.word	0xe000e010
 8012a94:	e000e018 	.word	0xe000e018
 8012a98:	20000230 	.word	0x20000230
 8012a9c:	10624dd3 	.word	0x10624dd3
 8012aa0:	e000e014 	.word	0xe000e014

08012aa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012aa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012ab4 <vPortEnableVFP+0x10>
 8012aa8:	6801      	ldr	r1, [r0, #0]
 8012aaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012aae:	6001      	str	r1, [r0, #0]
 8012ab0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012ab2:	bf00      	nop
 8012ab4:	e000ed88 	.word	0xe000ed88

08012ab8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012ab8:	b480      	push	{r7}
 8012aba:	b085      	sub	sp, #20
 8012abc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012abe:	f3ef 8305 	mrs	r3, IPSR
 8012ac2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	2b0f      	cmp	r3, #15
 8012ac8:	d914      	bls.n	8012af4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012aca:	4a17      	ldr	r2, [pc, #92]	; (8012b28 <vPortValidateInterruptPriority+0x70>)
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	4413      	add	r3, r2
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012ad4:	4b15      	ldr	r3, [pc, #84]	; (8012b2c <vPortValidateInterruptPriority+0x74>)
 8012ad6:	781b      	ldrb	r3, [r3, #0]
 8012ad8:	7afa      	ldrb	r2, [r7, #11]
 8012ada:	429a      	cmp	r2, r3
 8012adc:	d20a      	bcs.n	8012af4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae2:	f383 8811 	msr	BASEPRI, r3
 8012ae6:	f3bf 8f6f 	isb	sy
 8012aea:	f3bf 8f4f 	dsb	sy
 8012aee:	607b      	str	r3, [r7, #4]
}
 8012af0:	bf00      	nop
 8012af2:	e7fe      	b.n	8012af2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012af4:	4b0e      	ldr	r3, [pc, #56]	; (8012b30 <vPortValidateInterruptPriority+0x78>)
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012afc:	4b0d      	ldr	r3, [pc, #52]	; (8012b34 <vPortValidateInterruptPriority+0x7c>)
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	429a      	cmp	r2, r3
 8012b02:	d90a      	bls.n	8012b1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b08:	f383 8811 	msr	BASEPRI, r3
 8012b0c:	f3bf 8f6f 	isb	sy
 8012b10:	f3bf 8f4f 	dsb	sy
 8012b14:	603b      	str	r3, [r7, #0]
}
 8012b16:	bf00      	nop
 8012b18:	e7fe      	b.n	8012b18 <vPortValidateInterruptPriority+0x60>
	}
 8012b1a:	bf00      	nop
 8012b1c:	3714      	adds	r7, #20
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b24:	4770      	bx	lr
 8012b26:	bf00      	nop
 8012b28:	e000e3f0 	.word	0xe000e3f0
 8012b2c:	20002254 	.word	0x20002254
 8012b30:	e000ed0c 	.word	0xe000ed0c
 8012b34:	20002258 	.word	0x20002258

08012b38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b08a      	sub	sp, #40	; 0x28
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012b40:	2300      	movs	r3, #0
 8012b42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012b44:	f7ff f8ea 	bl	8011d1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012b48:	4b5b      	ldr	r3, [pc, #364]	; (8012cb8 <pvPortMalloc+0x180>)
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d101      	bne.n	8012b54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012b50:	f000 f920 	bl	8012d94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012b54:	4b59      	ldr	r3, [pc, #356]	; (8012cbc <pvPortMalloc+0x184>)
 8012b56:	681a      	ldr	r2, [r3, #0]
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	4013      	ands	r3, r2
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	f040 8093 	bne.w	8012c88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d01d      	beq.n	8012ba4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012b68:	2208      	movs	r2, #8
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	4413      	add	r3, r2
 8012b6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	f003 0307 	and.w	r3, r3, #7
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d014      	beq.n	8012ba4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	f023 0307 	bic.w	r3, r3, #7
 8012b80:	3308      	adds	r3, #8
 8012b82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	f003 0307 	and.w	r3, r3, #7
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d00a      	beq.n	8012ba4 <pvPortMalloc+0x6c>
	__asm volatile
 8012b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b92:	f383 8811 	msr	BASEPRI, r3
 8012b96:	f3bf 8f6f 	isb	sy
 8012b9a:	f3bf 8f4f 	dsb	sy
 8012b9e:	617b      	str	r3, [r7, #20]
}
 8012ba0:	bf00      	nop
 8012ba2:	e7fe      	b.n	8012ba2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d06e      	beq.n	8012c88 <pvPortMalloc+0x150>
 8012baa:	4b45      	ldr	r3, [pc, #276]	; (8012cc0 <pvPortMalloc+0x188>)
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	687a      	ldr	r2, [r7, #4]
 8012bb0:	429a      	cmp	r2, r3
 8012bb2:	d869      	bhi.n	8012c88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012bb4:	4b43      	ldr	r3, [pc, #268]	; (8012cc4 <pvPortMalloc+0x18c>)
 8012bb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012bb8:	4b42      	ldr	r3, [pc, #264]	; (8012cc4 <pvPortMalloc+0x18c>)
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012bbe:	e004      	b.n	8012bca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bcc:	685b      	ldr	r3, [r3, #4]
 8012bce:	687a      	ldr	r2, [r7, #4]
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	d903      	bls.n	8012bdc <pvPortMalloc+0xa4>
 8012bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d1f1      	bne.n	8012bc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012bdc:	4b36      	ldr	r3, [pc, #216]	; (8012cb8 <pvPortMalloc+0x180>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012be2:	429a      	cmp	r2, r3
 8012be4:	d050      	beq.n	8012c88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012be6:	6a3b      	ldr	r3, [r7, #32]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	2208      	movs	r2, #8
 8012bec:	4413      	add	r3, r2
 8012bee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf2:	681a      	ldr	r2, [r3, #0]
 8012bf4:	6a3b      	ldr	r3, [r7, #32]
 8012bf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bfa:	685a      	ldr	r2, [r3, #4]
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	1ad2      	subs	r2, r2, r3
 8012c00:	2308      	movs	r3, #8
 8012c02:	005b      	lsls	r3, r3, #1
 8012c04:	429a      	cmp	r2, r3
 8012c06:	d91f      	bls.n	8012c48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	4413      	add	r3, r2
 8012c0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012c10:	69bb      	ldr	r3, [r7, #24]
 8012c12:	f003 0307 	and.w	r3, r3, #7
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d00a      	beq.n	8012c30 <pvPortMalloc+0xf8>
	__asm volatile
 8012c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c1e:	f383 8811 	msr	BASEPRI, r3
 8012c22:	f3bf 8f6f 	isb	sy
 8012c26:	f3bf 8f4f 	dsb	sy
 8012c2a:	613b      	str	r3, [r7, #16]
}
 8012c2c:	bf00      	nop
 8012c2e:	e7fe      	b.n	8012c2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c32:	685a      	ldr	r2, [r3, #4]
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	1ad2      	subs	r2, r2, r3
 8012c38:	69bb      	ldr	r3, [r7, #24]
 8012c3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c3e:	687a      	ldr	r2, [r7, #4]
 8012c40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012c42:	69b8      	ldr	r0, [r7, #24]
 8012c44:	f000 f908 	bl	8012e58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012c48:	4b1d      	ldr	r3, [pc, #116]	; (8012cc0 <pvPortMalloc+0x188>)
 8012c4a:	681a      	ldr	r2, [r3, #0]
 8012c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4e:	685b      	ldr	r3, [r3, #4]
 8012c50:	1ad3      	subs	r3, r2, r3
 8012c52:	4a1b      	ldr	r2, [pc, #108]	; (8012cc0 <pvPortMalloc+0x188>)
 8012c54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012c56:	4b1a      	ldr	r3, [pc, #104]	; (8012cc0 <pvPortMalloc+0x188>)
 8012c58:	681a      	ldr	r2, [r3, #0]
 8012c5a:	4b1b      	ldr	r3, [pc, #108]	; (8012cc8 <pvPortMalloc+0x190>)
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	429a      	cmp	r2, r3
 8012c60:	d203      	bcs.n	8012c6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012c62:	4b17      	ldr	r3, [pc, #92]	; (8012cc0 <pvPortMalloc+0x188>)
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	4a18      	ldr	r2, [pc, #96]	; (8012cc8 <pvPortMalloc+0x190>)
 8012c68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c6c:	685a      	ldr	r2, [r3, #4]
 8012c6e:	4b13      	ldr	r3, [pc, #76]	; (8012cbc <pvPortMalloc+0x184>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	431a      	orrs	r2, r3
 8012c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012c7e:	4b13      	ldr	r3, [pc, #76]	; (8012ccc <pvPortMalloc+0x194>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	3301      	adds	r3, #1
 8012c84:	4a11      	ldr	r2, [pc, #68]	; (8012ccc <pvPortMalloc+0x194>)
 8012c86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012c88:	f7ff f856 	bl	8011d38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012c8c:	69fb      	ldr	r3, [r7, #28]
 8012c8e:	f003 0307 	and.w	r3, r3, #7
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d00a      	beq.n	8012cac <pvPortMalloc+0x174>
	__asm volatile
 8012c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c9a:	f383 8811 	msr	BASEPRI, r3
 8012c9e:	f3bf 8f6f 	isb	sy
 8012ca2:	f3bf 8f4f 	dsb	sy
 8012ca6:	60fb      	str	r3, [r7, #12]
}
 8012ca8:	bf00      	nop
 8012caa:	e7fe      	b.n	8012caa <pvPortMalloc+0x172>
	return pvReturn;
 8012cac:	69fb      	ldr	r3, [r7, #28]
}
 8012cae:	4618      	mov	r0, r3
 8012cb0:	3728      	adds	r7, #40	; 0x28
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd80      	pop	{r7, pc}
 8012cb6:	bf00      	nop
 8012cb8:	20008024 	.word	0x20008024
 8012cbc:	20008038 	.word	0x20008038
 8012cc0:	20008028 	.word	0x20008028
 8012cc4:	2000801c 	.word	0x2000801c
 8012cc8:	2000802c 	.word	0x2000802c
 8012ccc:	20008030 	.word	0x20008030

08012cd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b086      	sub	sp, #24
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d04d      	beq.n	8012d7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012ce2:	2308      	movs	r3, #8
 8012ce4:	425b      	negs	r3, r3
 8012ce6:	697a      	ldr	r2, [r7, #20]
 8012ce8:	4413      	add	r3, r2
 8012cea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012cec:	697b      	ldr	r3, [r7, #20]
 8012cee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012cf0:	693b      	ldr	r3, [r7, #16]
 8012cf2:	685a      	ldr	r2, [r3, #4]
 8012cf4:	4b24      	ldr	r3, [pc, #144]	; (8012d88 <vPortFree+0xb8>)
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	4013      	ands	r3, r2
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d10a      	bne.n	8012d14 <vPortFree+0x44>
	__asm volatile
 8012cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d02:	f383 8811 	msr	BASEPRI, r3
 8012d06:	f3bf 8f6f 	isb	sy
 8012d0a:	f3bf 8f4f 	dsb	sy
 8012d0e:	60fb      	str	r3, [r7, #12]
}
 8012d10:	bf00      	nop
 8012d12:	e7fe      	b.n	8012d12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012d14:	693b      	ldr	r3, [r7, #16]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d00a      	beq.n	8012d32 <vPortFree+0x62>
	__asm volatile
 8012d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d20:	f383 8811 	msr	BASEPRI, r3
 8012d24:	f3bf 8f6f 	isb	sy
 8012d28:	f3bf 8f4f 	dsb	sy
 8012d2c:	60bb      	str	r3, [r7, #8]
}
 8012d2e:	bf00      	nop
 8012d30:	e7fe      	b.n	8012d30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012d32:	693b      	ldr	r3, [r7, #16]
 8012d34:	685a      	ldr	r2, [r3, #4]
 8012d36:	4b14      	ldr	r3, [pc, #80]	; (8012d88 <vPortFree+0xb8>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	4013      	ands	r3, r2
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d01e      	beq.n	8012d7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012d40:	693b      	ldr	r3, [r7, #16]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d11a      	bne.n	8012d7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012d48:	693b      	ldr	r3, [r7, #16]
 8012d4a:	685a      	ldr	r2, [r3, #4]
 8012d4c:	4b0e      	ldr	r3, [pc, #56]	; (8012d88 <vPortFree+0xb8>)
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	43db      	mvns	r3, r3
 8012d52:	401a      	ands	r2, r3
 8012d54:	693b      	ldr	r3, [r7, #16]
 8012d56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012d58:	f7fe ffe0 	bl	8011d1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012d5c:	693b      	ldr	r3, [r7, #16]
 8012d5e:	685a      	ldr	r2, [r3, #4]
 8012d60:	4b0a      	ldr	r3, [pc, #40]	; (8012d8c <vPortFree+0xbc>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	4413      	add	r3, r2
 8012d66:	4a09      	ldr	r2, [pc, #36]	; (8012d8c <vPortFree+0xbc>)
 8012d68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012d6a:	6938      	ldr	r0, [r7, #16]
 8012d6c:	f000 f874 	bl	8012e58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012d70:	4b07      	ldr	r3, [pc, #28]	; (8012d90 <vPortFree+0xc0>)
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	3301      	adds	r3, #1
 8012d76:	4a06      	ldr	r2, [pc, #24]	; (8012d90 <vPortFree+0xc0>)
 8012d78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012d7a:	f7fe ffdd 	bl	8011d38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012d7e:	bf00      	nop
 8012d80:	3718      	adds	r7, #24
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}
 8012d86:	bf00      	nop
 8012d88:	20008038 	.word	0x20008038
 8012d8c:	20008028 	.word	0x20008028
 8012d90:	20008034 	.word	0x20008034

08012d94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012d94:	b480      	push	{r7}
 8012d96:	b085      	sub	sp, #20
 8012d98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012d9a:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 8012d9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012da0:	4b27      	ldr	r3, [pc, #156]	; (8012e40 <prvHeapInit+0xac>)
 8012da2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	f003 0307 	and.w	r3, r3, #7
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d00c      	beq.n	8012dc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	3307      	adds	r3, #7
 8012db2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	f023 0307 	bic.w	r3, r3, #7
 8012dba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012dbc:	68ba      	ldr	r2, [r7, #8]
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	1ad3      	subs	r3, r2, r3
 8012dc2:	4a1f      	ldr	r2, [pc, #124]	; (8012e40 <prvHeapInit+0xac>)
 8012dc4:	4413      	add	r3, r2
 8012dc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012dcc:	4a1d      	ldr	r2, [pc, #116]	; (8012e44 <prvHeapInit+0xb0>)
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012dd2:	4b1c      	ldr	r3, [pc, #112]	; (8012e44 <prvHeapInit+0xb0>)
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	68ba      	ldr	r2, [r7, #8]
 8012ddc:	4413      	add	r3, r2
 8012dde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012de0:	2208      	movs	r2, #8
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	1a9b      	subs	r3, r3, r2
 8012de6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	f023 0307 	bic.w	r3, r3, #7
 8012dee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	4a15      	ldr	r2, [pc, #84]	; (8012e48 <prvHeapInit+0xb4>)
 8012df4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012df6:	4b14      	ldr	r3, [pc, #80]	; (8012e48 <prvHeapInit+0xb4>)
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012dfe:	4b12      	ldr	r3, [pc, #72]	; (8012e48 <prvHeapInit+0xb4>)
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	2200      	movs	r2, #0
 8012e04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012e0a:	683b      	ldr	r3, [r7, #0]
 8012e0c:	68fa      	ldr	r2, [r7, #12]
 8012e0e:	1ad2      	subs	r2, r2, r3
 8012e10:	683b      	ldr	r3, [r7, #0]
 8012e12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012e14:	4b0c      	ldr	r3, [pc, #48]	; (8012e48 <prvHeapInit+0xb4>)
 8012e16:	681a      	ldr	r2, [r3, #0]
 8012e18:	683b      	ldr	r3, [r7, #0]
 8012e1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012e1c:	683b      	ldr	r3, [r7, #0]
 8012e1e:	685b      	ldr	r3, [r3, #4]
 8012e20:	4a0a      	ldr	r2, [pc, #40]	; (8012e4c <prvHeapInit+0xb8>)
 8012e22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012e24:	683b      	ldr	r3, [r7, #0]
 8012e26:	685b      	ldr	r3, [r3, #4]
 8012e28:	4a09      	ldr	r2, [pc, #36]	; (8012e50 <prvHeapInit+0xbc>)
 8012e2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012e2c:	4b09      	ldr	r3, [pc, #36]	; (8012e54 <prvHeapInit+0xc0>)
 8012e2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012e32:	601a      	str	r2, [r3, #0]
}
 8012e34:	bf00      	nop
 8012e36:	3714      	adds	r7, #20
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3e:	4770      	bx	lr
 8012e40:	2000225c 	.word	0x2000225c
 8012e44:	2000801c 	.word	0x2000801c
 8012e48:	20008024 	.word	0x20008024
 8012e4c:	2000802c 	.word	0x2000802c
 8012e50:	20008028 	.word	0x20008028
 8012e54:	20008038 	.word	0x20008038

08012e58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012e58:	b480      	push	{r7}
 8012e5a:	b085      	sub	sp, #20
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012e60:	4b28      	ldr	r3, [pc, #160]	; (8012f04 <prvInsertBlockIntoFreeList+0xac>)
 8012e62:	60fb      	str	r3, [r7, #12]
 8012e64:	e002      	b.n	8012e6c <prvInsertBlockIntoFreeList+0x14>
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	60fb      	str	r3, [r7, #12]
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	687a      	ldr	r2, [r7, #4]
 8012e72:	429a      	cmp	r2, r3
 8012e74:	d8f7      	bhi.n	8012e66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	685b      	ldr	r3, [r3, #4]
 8012e7e:	68ba      	ldr	r2, [r7, #8]
 8012e80:	4413      	add	r3, r2
 8012e82:	687a      	ldr	r2, [r7, #4]
 8012e84:	429a      	cmp	r2, r3
 8012e86:	d108      	bne.n	8012e9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	685a      	ldr	r2, [r3, #4]
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	685b      	ldr	r3, [r3, #4]
 8012e90:	441a      	add	r2, r3
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	685b      	ldr	r3, [r3, #4]
 8012ea2:	68ba      	ldr	r2, [r7, #8]
 8012ea4:	441a      	add	r2, r3
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	429a      	cmp	r2, r3
 8012eac:	d118      	bne.n	8012ee0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	681a      	ldr	r2, [r3, #0]
 8012eb2:	4b15      	ldr	r3, [pc, #84]	; (8012f08 <prvInsertBlockIntoFreeList+0xb0>)
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	429a      	cmp	r2, r3
 8012eb8:	d00d      	beq.n	8012ed6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	685a      	ldr	r2, [r3, #4]
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	685b      	ldr	r3, [r3, #4]
 8012ec4:	441a      	add	r2, r3
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	681a      	ldr	r2, [r3, #0]
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	601a      	str	r2, [r3, #0]
 8012ed4:	e008      	b.n	8012ee8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012ed6:	4b0c      	ldr	r3, [pc, #48]	; (8012f08 <prvInsertBlockIntoFreeList+0xb0>)
 8012ed8:	681a      	ldr	r2, [r3, #0]
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	601a      	str	r2, [r3, #0]
 8012ede:	e003      	b.n	8012ee8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	681a      	ldr	r2, [r3, #0]
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012ee8:	68fa      	ldr	r2, [r7, #12]
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	429a      	cmp	r2, r3
 8012eee:	d002      	beq.n	8012ef6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	687a      	ldr	r2, [r7, #4]
 8012ef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012ef6:	bf00      	nop
 8012ef8:	3714      	adds	r7, #20
 8012efa:	46bd      	mov	sp, r7
 8012efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f00:	4770      	bx	lr
 8012f02:	bf00      	nop
 8012f04:	2000801c 	.word	0x2000801c
 8012f08:	20008024 	.word	0x20008024

08012f0c <USB_transmit_msg>:

/*
 * -- Insert your variables declaration here --
 */
/* USER CODE BEGIN 0 */
void USB_transmit_msg(uint8_t* data,uint32_t size){
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b082      	sub	sp, #8
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
 8012f14:	6039      	str	r1, [r7, #0]
  USBH_CDC_Stop(&hUsbHostFS);
 8012f16:	4806      	ldr	r0, [pc, #24]	; (8012f30 <USB_transmit_msg+0x24>)
 8012f18:	f7f6 fdad 	bl	8009a76 <USBH_CDC_Stop>
  USBH_CDC_Transmit(&hUsbHostFS,data, size);
 8012f1c:	683a      	ldr	r2, [r7, #0]
 8012f1e:	6879      	ldr	r1, [r7, #4]
 8012f20:	4803      	ldr	r0, [pc, #12]	; (8012f30 <USB_transmit_msg+0x24>)
 8012f22:	f7f6 fe38 	bl	8009b96 <USBH_CDC_Transmit>
}
 8012f26:	bf00      	nop
 8012f28:	3708      	adds	r7, #8
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	bd80      	pop	{r7, pc}
 8012f2e:	bf00      	nop
 8012f30:	2000bec8 	.word	0x2000bec8

08012f34 <USB_receive_msg>:

void USB_receive_msg(){
 8012f34:	b580      	push	{r7, lr}
 8012f36:	af00      	add	r7, sp, #0
  USBH_CDC_Stop(&hUsbHostFS);
 8012f38:	4809      	ldr	r0, [pc, #36]	; (8012f60 <USB_receive_msg+0x2c>)
 8012f3a:	f7f6 fd9c 	bl	8009a76 <USBH_CDC_Stop>
  USBH_CDC_Receive(&hUsbHostFS,usb_rx_buff[usb_rx_buff_active],USB_RX_BUFF_SIZE);
 8012f3e:	4b09      	ldr	r3, [pc, #36]	; (8012f64 <USB_receive_msg+0x30>)
 8012f40:	781b      	ldrb	r3, [r3, #0]
 8012f42:	461a      	mov	r2, r3
 8012f44:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8012f48:	fb02 f303 	mul.w	r3, r2, r3
 8012f4c:	4a06      	ldr	r2, [pc, #24]	; (8012f68 <USB_receive_msg+0x34>)
 8012f4e:	4413      	add	r3, r2
 8012f50:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8012f54:	4619      	mov	r1, r3
 8012f56:	4802      	ldr	r0, [pc, #8]	; (8012f60 <USB_receive_msg+0x2c>)
 8012f58:	f7f6 fe58 	bl	8009c0c <USBH_CDC_Receive>
}
 8012f5c:	bf00      	nop
 8012f5e:	bd80      	pop	{r7, pc}
 8012f60:	2000bec8 	.word	0x2000bec8
 8012f64:	2000bec4 	.word	0x2000bec4
 8012f68:	20008044 	.word	0x20008044

08012f6c <USB_set_line_coding>:


void USB_set_line_coding(){
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	af00      	add	r7, sp, #0
	FrameFormat.b.dwDTERate = 1250000;
 8012f70:	4b08      	ldr	r3, [pc, #32]	; (8012f94 <USB_set_line_coding+0x28>)
 8012f72:	4a09      	ldr	r2, [pc, #36]	; (8012f98 <USB_set_line_coding+0x2c>)
 8012f74:	601a      	str	r2, [r3, #0]
	FrameFormat.b.bCharFormat = 0;
 8012f76:	4b07      	ldr	r3, [pc, #28]	; (8012f94 <USB_set_line_coding+0x28>)
 8012f78:	2200      	movs	r2, #0
 8012f7a:	711a      	strb	r2, [r3, #4]
	FrameFormat.b.bDataBits = 8;
 8012f7c:	4b05      	ldr	r3, [pc, #20]	; (8012f94 <USB_set_line_coding+0x28>)
 8012f7e:	2208      	movs	r2, #8
 8012f80:	719a      	strb	r2, [r3, #6]
	FrameFormat.b.bParityType = 0;
 8012f82:	4b04      	ldr	r3, [pc, #16]	; (8012f94 <USB_set_line_coding+0x28>)
 8012f84:	2200      	movs	r2, #0
 8012f86:	715a      	strb	r2, [r3, #5]

	USBH_CDC_SetLineCoding(&hUsbHostFS, &FrameFormat);
 8012f88:	4902      	ldr	r1, [pc, #8]	; (8012f94 <USB_set_line_coding+0x28>)
 8012f8a:	4804      	ldr	r0, [pc, #16]	; (8012f9c <USB_set_line_coding+0x30>)
 8012f8c:	f7f6 fdda 	bl	8009b44 <USBH_CDC_SetLineCoding>
}
 8012f90:	bf00      	nop
 8012f92:	bd80      	pop	{r7, pc}
 8012f94:	2000803c 	.word	0x2000803c
 8012f98:	001312d0 	.word	0x001312d0
 8012f9c:	2000bec8 	.word	0x2000bec8

08012fa0 <USBH_CDC_TransmitCallback>:
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */

void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b082      	sub	sp, #8
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
  USB_receive_msg();
 8012fa8:	f7ff ffc4 	bl	8012f34 <USB_receive_msg>
}
 8012fac:	bf00      	nop
 8012fae:	3708      	adds	r7, #8
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd80      	pop	{r7, pc}

08012fb4 <USBH_CDC_ReceiveCallback>:


void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8012fb4:	b480      	push	{r7}
 8012fb6:	b083      	sub	sp, #12
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
}
 8012fbc:	bf00      	nop
 8012fbe:	370c      	adds	r7, #12
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc6:	4770      	bx	lr

08012fc8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	af00      	add	r7, sp, #0


  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8012fcc:	2201      	movs	r2, #1
 8012fce:	490e      	ldr	r1, [pc, #56]	; (8013008 <MX_USB_HOST_Init+0x40>)
 8012fd0:	480e      	ldr	r0, [pc, #56]	; (801300c <MX_USB_HOST_Init+0x44>)
 8012fd2:	f7f6 ff95 	bl	8009f00 <USBH_Init>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d001      	beq.n	8012fe0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8012fdc:	f7ee fbca 	bl	8001774 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8012fe0:	490b      	ldr	r1, [pc, #44]	; (8013010 <MX_USB_HOST_Init+0x48>)
 8012fe2:	480a      	ldr	r0, [pc, #40]	; (801300c <MX_USB_HOST_Init+0x44>)
 8012fe4:	f7f7 f842 	bl	800a06c <USBH_RegisterClass>
 8012fe8:	4603      	mov	r3, r0
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d001      	beq.n	8012ff2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8012fee:	f7ee fbc1 	bl	8001774 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8012ff2:	4806      	ldr	r0, [pc, #24]	; (801300c <MX_USB_HOST_Init+0x44>)
 8012ff4:	f7f7 f8c6 	bl	800a184 <USBH_Start>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d001      	beq.n	8013002 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8012ffe:	f7ee fbb9 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8013002:	bf00      	nop
 8013004:	bd80      	pop	{r7, pc}
 8013006:	bf00      	nop
 8013008:	08013015 	.word	0x08013015
 801300c:	2000bec8 	.word	0x2000bec8
 8013010:	2000028c 	.word	0x2000028c

08013014 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b082      	sub	sp, #8
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
 801301c:	460b      	mov	r3, r1
 801301e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8013020:	78fb      	ldrb	r3, [r7, #3]
 8013022:	3b01      	subs	r3, #1
 8013024:	2b04      	cmp	r3, #4
 8013026:	d82e      	bhi.n	8013086 <USBH_UserProcess+0x72>
 8013028:	a201      	add	r2, pc, #4	; (adr r2, 8013030 <USBH_UserProcess+0x1c>)
 801302a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801302e:	bf00      	nop
 8013030:	08013087 	.word	0x08013087
 8013034:	0801305b 	.word	0x0801305b
 8013038:	08013087 	.word	0x08013087
 801303c:	08013071 	.word	0x08013071
 8013040:	08013045 	.word	0x08013045
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8013044:	4b12      	ldr	r3, [pc, #72]	; (8013090 <USBH_UserProcess+0x7c>)
 8013046:	2203      	movs	r2, #3
 8013048:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_DISCONNECT, 0);
 801304a:	4b12      	ldr	r3, [pc, #72]	; (8013094 <USBH_UserProcess+0x80>)
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	2200      	movs	r2, #0
 8013050:	2103      	movs	r1, #3
 8013052:	4618      	mov	r0, r3
 8013054:	f7fd fd6e 	bl	8010b34 <osMessagePut>
  break;
 8013058:	e016      	b.n	8013088 <USBH_UserProcess+0x74>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801305a:	4b0d      	ldr	r3, [pc, #52]	; (8013090 <USBH_UserProcess+0x7c>)
 801305c:	2202      	movs	r2, #2
 801305e:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_READY, 0);
 8013060:	4b0c      	ldr	r3, [pc, #48]	; (8013094 <USBH_UserProcess+0x80>)
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	2200      	movs	r2, #0
 8013066:	2102      	movs	r1, #2
 8013068:	4618      	mov	r0, r3
 801306a:	f7fd fd63 	bl	8010b34 <osMessagePut>
  break;
 801306e:	e00b      	b.n	8013088 <USBH_UserProcess+0x74>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8013070:	4b07      	ldr	r3, [pc, #28]	; (8013090 <USBH_UserProcess+0x7c>)
 8013072:	2201      	movs	r2, #1
 8013074:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_START, 0);
 8013076:	4b07      	ldr	r3, [pc, #28]	; (8013094 <USBH_UserProcess+0x80>)
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	2200      	movs	r2, #0
 801307c:	2101      	movs	r1, #1
 801307e:	4618      	mov	r0, r3
 8013080:	f7fd fd58 	bl	8010b34 <osMessagePut>
  break;
 8013084:	e000      	b.n	8013088 <USBH_UserProcess+0x74>

  default:
  break;
 8013086:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8013088:	bf00      	nop
 801308a:	3708      	adds	r7, #8
 801308c:	46bd      	mov	sp, r7
 801308e:	bd80      	pop	{r7, pc}
 8013090:	2000c2ac 	.word	0x2000c2ac
 8013094:	200008b4 	.word	0x200008b4

08013098 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b08a      	sub	sp, #40	; 0x28
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80130a0:	f107 0314 	add.w	r3, r7, #20
 80130a4:	2200      	movs	r2, #0
 80130a6:	601a      	str	r2, [r3, #0]
 80130a8:	605a      	str	r2, [r3, #4]
 80130aa:	609a      	str	r2, [r3, #8]
 80130ac:	60da      	str	r2, [r3, #12]
 80130ae:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80130b8:	d13a      	bne.n	8013130 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80130ba:	2300      	movs	r3, #0
 80130bc:	613b      	str	r3, [r7, #16]
 80130be:	4b1e      	ldr	r3, [pc, #120]	; (8013138 <HAL_HCD_MspInit+0xa0>)
 80130c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130c2:	4a1d      	ldr	r2, [pc, #116]	; (8013138 <HAL_HCD_MspInit+0xa0>)
 80130c4:	f043 0301 	orr.w	r3, r3, #1
 80130c8:	6313      	str	r3, [r2, #48]	; 0x30
 80130ca:	4b1b      	ldr	r3, [pc, #108]	; (8013138 <HAL_HCD_MspInit+0xa0>)
 80130cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130ce:	f003 0301 	and.w	r3, r3, #1
 80130d2:	613b      	str	r3, [r7, #16]
 80130d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80130d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80130da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80130dc:	2302      	movs	r3, #2
 80130de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130e0:	2300      	movs	r3, #0
 80130e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80130e4:	2303      	movs	r3, #3
 80130e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80130e8:	230a      	movs	r3, #10
 80130ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80130ec:	f107 0314 	add.w	r3, r7, #20
 80130f0:	4619      	mov	r1, r3
 80130f2:	4812      	ldr	r0, [pc, #72]	; (801313c <HAL_HCD_MspInit+0xa4>)
 80130f4:	f7f0 f9ee 	bl	80034d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80130f8:	4b0f      	ldr	r3, [pc, #60]	; (8013138 <HAL_HCD_MspInit+0xa0>)
 80130fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130fc:	4a0e      	ldr	r2, [pc, #56]	; (8013138 <HAL_HCD_MspInit+0xa0>)
 80130fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013102:	6353      	str	r3, [r2, #52]	; 0x34
 8013104:	2300      	movs	r3, #0
 8013106:	60fb      	str	r3, [r7, #12]
 8013108:	4b0b      	ldr	r3, [pc, #44]	; (8013138 <HAL_HCD_MspInit+0xa0>)
 801310a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801310c:	4a0a      	ldr	r2, [pc, #40]	; (8013138 <HAL_HCD_MspInit+0xa0>)
 801310e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013112:	6453      	str	r3, [r2, #68]	; 0x44
 8013114:	4b08      	ldr	r3, [pc, #32]	; (8013138 <HAL_HCD_MspInit+0xa0>)
 8013116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801311c:	60fb      	str	r3, [r7, #12]
 801311e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013120:	2200      	movs	r2, #0
 8013122:	2105      	movs	r1, #5
 8013124:	2043      	movs	r0, #67	; 0x43
 8013126:	f7ef fb57 	bl	80027d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801312a:	2043      	movs	r0, #67	; 0x43
 801312c:	f7ef fb70 	bl	8002810 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013130:	bf00      	nop
 8013132:	3728      	adds	r7, #40	; 0x28
 8013134:	46bd      	mov	sp, r7
 8013136:	bd80      	pop	{r7, pc}
 8013138:	40023800 	.word	0x40023800
 801313c:	40020000 	.word	0x40020000

08013140 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b082      	sub	sp, #8
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801314e:	4618      	mov	r0, r3
 8013150:	f7f7 fccf 	bl	800aaf2 <USBH_LL_IncTimer>
}
 8013154:	bf00      	nop
 8013156:	3708      	adds	r7, #8
 8013158:	46bd      	mov	sp, r7
 801315a:	bd80      	pop	{r7, pc}

0801315c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b082      	sub	sp, #8
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801316a:	4618      	mov	r0, r3
 801316c:	f7f7 fd13 	bl	800ab96 <USBH_LL_Connect>
}
 8013170:	bf00      	nop
 8013172:	3708      	adds	r7, #8
 8013174:	46bd      	mov	sp, r7
 8013176:	bd80      	pop	{r7, pc}

08013178 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b082      	sub	sp, #8
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013186:	4618      	mov	r0, r3
 8013188:	f7f7 fd28 	bl	800abdc <USBH_LL_Disconnect>
}
 801318c:	bf00      	nop
 801318e:	3708      	adds	r7, #8
 8013190:	46bd      	mov	sp, r7
 8013192:	bd80      	pop	{r7, pc}

08013194 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8013194:	b580      	push	{r7, lr}
 8013196:	b082      	sub	sp, #8
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
 801319c:	460b      	mov	r3, r1
 801319e:	70fb      	strb	r3, [r7, #3]
 80131a0:	4613      	mov	r3, r2
 80131a2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7f7 fd5d 	bl	800ac6a <USBH_LL_NotifyURBChange>
#endif
}
 80131b0:	bf00      	nop
 80131b2:	3708      	adds	r7, #8
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd80      	pop	{r7, pc}

080131b8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b082      	sub	sp, #8
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80131c6:	4618      	mov	r0, r3
 80131c8:	f7f7 fcbd 	bl	800ab46 <USBH_LL_PortEnabled>
}
 80131cc:	bf00      	nop
 80131ce:	3708      	adds	r7, #8
 80131d0:	46bd      	mov	sp, r7
 80131d2:	bd80      	pop	{r7, pc}

080131d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b082      	sub	sp, #8
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80131e2:	4618      	mov	r0, r3
 80131e4:	f7f7 fcc9 	bl	800ab7a <USBH_LL_PortDisabled>
}
 80131e8:	bf00      	nop
 80131ea:	3708      	adds	r7, #8
 80131ec:	46bd      	mov	sp, r7
 80131ee:	bd80      	pop	{r7, pc}

080131f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b082      	sub	sp, #8
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80131fe:	2b01      	cmp	r3, #1
 8013200:	d12a      	bne.n	8013258 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8013202:	4a18      	ldr	r2, [pc, #96]	; (8013264 <USBH_LL_Init+0x74>)
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	4a15      	ldr	r2, [pc, #84]	; (8013264 <USBH_LL_Init+0x74>)
 801320e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013212:	4b14      	ldr	r3, [pc, #80]	; (8013264 <USBH_LL_Init+0x74>)
 8013214:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013218:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801321a:	4b12      	ldr	r3, [pc, #72]	; (8013264 <USBH_LL_Init+0x74>)
 801321c:	2208      	movs	r2, #8
 801321e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8013220:	4b10      	ldr	r3, [pc, #64]	; (8013264 <USBH_LL_Init+0x74>)
 8013222:	2201      	movs	r2, #1
 8013224:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013226:	4b0f      	ldr	r3, [pc, #60]	; (8013264 <USBH_LL_Init+0x74>)
 8013228:	2200      	movs	r2, #0
 801322a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801322c:	4b0d      	ldr	r3, [pc, #52]	; (8013264 <USBH_LL_Init+0x74>)
 801322e:	2202      	movs	r2, #2
 8013230:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013232:	4b0c      	ldr	r3, [pc, #48]	; (8013264 <USBH_LL_Init+0x74>)
 8013234:	2200      	movs	r2, #0
 8013236:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8013238:	480a      	ldr	r0, [pc, #40]	; (8013264 <USBH_LL_Init+0x74>)
 801323a:	f7f0 fb00 	bl	800383e <HAL_HCD_Init>
 801323e:	4603      	mov	r3, r0
 8013240:	2b00      	cmp	r3, #0
 8013242:	d001      	beq.n	8013248 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8013244:	f7ee fa96 	bl	8001774 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8013248:	4806      	ldr	r0, [pc, #24]	; (8013264 <USBH_LL_Init+0x74>)
 801324a:	f7f0 fee4 	bl	8004016 <HAL_HCD_GetCurrentFrame>
 801324e:	4603      	mov	r3, r0
 8013250:	4619      	mov	r1, r3
 8013252:	6878      	ldr	r0, [r7, #4]
 8013254:	f7f7 fc3e 	bl	800aad4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8013258:	2300      	movs	r3, #0
}
 801325a:	4618      	mov	r0, r3
 801325c:	3708      	adds	r7, #8
 801325e:	46bd      	mov	sp, r7
 8013260:	bd80      	pop	{r7, pc}
 8013262:	bf00      	nop
 8013264:	2000c2b0 	.word	0x2000c2b0

08013268 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b084      	sub	sp, #16
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013270:	2300      	movs	r3, #0
 8013272:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013274:	2300      	movs	r3, #0
 8013276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801327e:	4618      	mov	r0, r3
 8013280:	f7f0 fe53 	bl	8003f2a <HAL_HCD_Start>
 8013284:	4603      	mov	r3, r0
 8013286:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013288:	7bfb      	ldrb	r3, [r7, #15]
 801328a:	4618      	mov	r0, r3
 801328c:	f000 f95c 	bl	8013548 <USBH_Get_USB_Status>
 8013290:	4603      	mov	r3, r0
 8013292:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013294:	7bbb      	ldrb	r3, [r7, #14]
}
 8013296:	4618      	mov	r0, r3
 8013298:	3710      	adds	r7, #16
 801329a:	46bd      	mov	sp, r7
 801329c:	bd80      	pop	{r7, pc}

0801329e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801329e:	b580      	push	{r7, lr}
 80132a0:	b084      	sub	sp, #16
 80132a2:	af00      	add	r7, sp, #0
 80132a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132a6:	2300      	movs	r3, #0
 80132a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80132aa:	2300      	movs	r3, #0
 80132ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80132b4:	4618      	mov	r0, r3
 80132b6:	f7f0 fe5b 	bl	8003f70 <HAL_HCD_Stop>
 80132ba:	4603      	mov	r3, r0
 80132bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80132be:	7bfb      	ldrb	r3, [r7, #15]
 80132c0:	4618      	mov	r0, r3
 80132c2:	f000 f941 	bl	8013548 <USBH_Get_USB_Status>
 80132c6:	4603      	mov	r3, r0
 80132c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80132ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80132cc:	4618      	mov	r0, r3
 80132ce:	3710      	adds	r7, #16
 80132d0:	46bd      	mov	sp, r7
 80132d2:	bd80      	pop	{r7, pc}

080132d4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b084      	sub	sp, #16
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80132dc:	2301      	movs	r3, #1
 80132de:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7f0 fea3 	bl	8004032 <HAL_HCD_GetCurrentSpeed>
 80132ec:	4603      	mov	r3, r0
 80132ee:	2b02      	cmp	r3, #2
 80132f0:	d00c      	beq.n	801330c <USBH_LL_GetSpeed+0x38>
 80132f2:	2b02      	cmp	r3, #2
 80132f4:	d80d      	bhi.n	8013312 <USBH_LL_GetSpeed+0x3e>
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d002      	beq.n	8013300 <USBH_LL_GetSpeed+0x2c>
 80132fa:	2b01      	cmp	r3, #1
 80132fc:	d003      	beq.n	8013306 <USBH_LL_GetSpeed+0x32>
 80132fe:	e008      	b.n	8013312 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8013300:	2300      	movs	r3, #0
 8013302:	73fb      	strb	r3, [r7, #15]
    break;
 8013304:	e008      	b.n	8013318 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8013306:	2301      	movs	r3, #1
 8013308:	73fb      	strb	r3, [r7, #15]
    break;
 801330a:	e005      	b.n	8013318 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801330c:	2302      	movs	r3, #2
 801330e:	73fb      	strb	r3, [r7, #15]
    break;
 8013310:	e002      	b.n	8013318 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8013312:	2301      	movs	r3, #1
 8013314:	73fb      	strb	r3, [r7, #15]
    break;
 8013316:	bf00      	nop
  }
  return  speed;
 8013318:	7bfb      	ldrb	r3, [r7, #15]
}
 801331a:	4618      	mov	r0, r3
 801331c:	3710      	adds	r7, #16
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}

08013322 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8013322:	b580      	push	{r7, lr}
 8013324:	b084      	sub	sp, #16
 8013326:	af00      	add	r7, sp, #0
 8013328:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801332a:	2300      	movs	r3, #0
 801332c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801332e:	2300      	movs	r3, #0
 8013330:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013338:	4618      	mov	r0, r3
 801333a:	f7f0 fe36 	bl	8003faa <HAL_HCD_ResetPort>
 801333e:	4603      	mov	r3, r0
 8013340:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013342:	7bfb      	ldrb	r3, [r7, #15]
 8013344:	4618      	mov	r0, r3
 8013346:	f000 f8ff 	bl	8013548 <USBH_Get_USB_Status>
 801334a:	4603      	mov	r3, r0
 801334c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801334e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013350:	4618      	mov	r0, r3
 8013352:	3710      	adds	r7, #16
 8013354:	46bd      	mov	sp, r7
 8013356:	bd80      	pop	{r7, pc}

08013358 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b082      	sub	sp, #8
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	460b      	mov	r3, r1
 8013362:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801336a:	78fa      	ldrb	r2, [r7, #3]
 801336c:	4611      	mov	r1, r2
 801336e:	4618      	mov	r0, r3
 8013370:	f7f0 fe3d 	bl	8003fee <HAL_HCD_HC_GetXferCount>
 8013374:	4603      	mov	r3, r0
}
 8013376:	4618      	mov	r0, r3
 8013378:	3708      	adds	r7, #8
 801337a:	46bd      	mov	sp, r7
 801337c:	bd80      	pop	{r7, pc}

0801337e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801337e:	b590      	push	{r4, r7, lr}
 8013380:	b089      	sub	sp, #36	; 0x24
 8013382:	af04      	add	r7, sp, #16
 8013384:	6078      	str	r0, [r7, #4]
 8013386:	4608      	mov	r0, r1
 8013388:	4611      	mov	r1, r2
 801338a:	461a      	mov	r2, r3
 801338c:	4603      	mov	r3, r0
 801338e:	70fb      	strb	r3, [r7, #3]
 8013390:	460b      	mov	r3, r1
 8013392:	70bb      	strb	r3, [r7, #2]
 8013394:	4613      	mov	r3, r2
 8013396:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013398:	2300      	movs	r3, #0
 801339a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801339c:	2300      	movs	r3, #0
 801339e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80133a6:	787c      	ldrb	r4, [r7, #1]
 80133a8:	78ba      	ldrb	r2, [r7, #2]
 80133aa:	78f9      	ldrb	r1, [r7, #3]
 80133ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80133ae:	9302      	str	r3, [sp, #8]
 80133b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80133b4:	9301      	str	r3, [sp, #4]
 80133b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80133ba:	9300      	str	r3, [sp, #0]
 80133bc:	4623      	mov	r3, r4
 80133be:	f7f0 faa0 	bl	8003902 <HAL_HCD_HC_Init>
 80133c2:	4603      	mov	r3, r0
 80133c4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80133c6:	7bfb      	ldrb	r3, [r7, #15]
 80133c8:	4618      	mov	r0, r3
 80133ca:	f000 f8bd 	bl	8013548 <USBH_Get_USB_Status>
 80133ce:	4603      	mov	r3, r0
 80133d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80133d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80133d4:	4618      	mov	r0, r3
 80133d6:	3714      	adds	r7, #20
 80133d8:	46bd      	mov	sp, r7
 80133da:	bd90      	pop	{r4, r7, pc}

080133dc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b084      	sub	sp, #16
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
 80133e4:	460b      	mov	r3, r1
 80133e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133e8:	2300      	movs	r3, #0
 80133ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80133ec:	2300      	movs	r3, #0
 80133ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80133f6:	78fa      	ldrb	r2, [r7, #3]
 80133f8:	4611      	mov	r1, r2
 80133fa:	4618      	mov	r0, r3
 80133fc:	f7f0 fb10 	bl	8003a20 <HAL_HCD_HC_Halt>
 8013400:	4603      	mov	r3, r0
 8013402:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013404:	7bfb      	ldrb	r3, [r7, #15]
 8013406:	4618      	mov	r0, r3
 8013408:	f000 f89e 	bl	8013548 <USBH_Get_USB_Status>
 801340c:	4603      	mov	r3, r0
 801340e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013410:	7bbb      	ldrb	r3, [r7, #14]
}
 8013412:	4618      	mov	r0, r3
 8013414:	3710      	adds	r7, #16
 8013416:	46bd      	mov	sp, r7
 8013418:	bd80      	pop	{r7, pc}

0801341a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801341a:	b590      	push	{r4, r7, lr}
 801341c:	b089      	sub	sp, #36	; 0x24
 801341e:	af04      	add	r7, sp, #16
 8013420:	6078      	str	r0, [r7, #4]
 8013422:	4608      	mov	r0, r1
 8013424:	4611      	mov	r1, r2
 8013426:	461a      	mov	r2, r3
 8013428:	4603      	mov	r3, r0
 801342a:	70fb      	strb	r3, [r7, #3]
 801342c:	460b      	mov	r3, r1
 801342e:	70bb      	strb	r3, [r7, #2]
 8013430:	4613      	mov	r3, r2
 8013432:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013434:	2300      	movs	r3, #0
 8013436:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013438:	2300      	movs	r3, #0
 801343a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8013442:	787c      	ldrb	r4, [r7, #1]
 8013444:	78ba      	ldrb	r2, [r7, #2]
 8013446:	78f9      	ldrb	r1, [r7, #3]
 8013448:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801344c:	9303      	str	r3, [sp, #12]
 801344e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013450:	9302      	str	r3, [sp, #8]
 8013452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013454:	9301      	str	r3, [sp, #4]
 8013456:	f897 3020 	ldrb.w	r3, [r7, #32]
 801345a:	9300      	str	r3, [sp, #0]
 801345c:	4623      	mov	r3, r4
 801345e:	f7f0 fb03 	bl	8003a68 <HAL_HCD_HC_SubmitRequest>
 8013462:	4603      	mov	r3, r0
 8013464:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8013466:	7bfb      	ldrb	r3, [r7, #15]
 8013468:	4618      	mov	r0, r3
 801346a:	f000 f86d 	bl	8013548 <USBH_Get_USB_Status>
 801346e:	4603      	mov	r3, r0
 8013470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013472:	7bbb      	ldrb	r3, [r7, #14]
}
 8013474:	4618      	mov	r0, r3
 8013476:	3714      	adds	r7, #20
 8013478:	46bd      	mov	sp, r7
 801347a:	bd90      	pop	{r4, r7, pc}

0801347c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801347c:	b580      	push	{r7, lr}
 801347e:	b082      	sub	sp, #8
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
 8013484:	460b      	mov	r3, r1
 8013486:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801348e:	78fa      	ldrb	r2, [r7, #3]
 8013490:	4611      	mov	r1, r2
 8013492:	4618      	mov	r0, r3
 8013494:	f7f0 fd97 	bl	8003fc6 <HAL_HCD_HC_GetURBState>
 8013498:	4603      	mov	r3, r0
}
 801349a:	4618      	mov	r0, r3
 801349c:	3708      	adds	r7, #8
 801349e:	46bd      	mov	sp, r7
 80134a0:	bd80      	pop	{r7, pc}

080134a2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80134a2:	b580      	push	{r7, lr}
 80134a4:	b082      	sub	sp, #8
 80134a6:	af00      	add	r7, sp, #0
 80134a8:	6078      	str	r0, [r7, #4]
 80134aa:	460b      	mov	r3, r1
 80134ac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80134b4:	2b01      	cmp	r3, #1
 80134b6:	d103      	bne.n	80134c0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80134b8:	78fb      	ldrb	r3, [r7, #3]
 80134ba:	4618      	mov	r0, r3
 80134bc:	f000 f870 	bl	80135a0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80134c0:	20c8      	movs	r0, #200	; 0xc8
 80134c2:	f7ef f8ad 	bl	8002620 <HAL_Delay>
  return USBH_OK;
 80134c6:	2300      	movs	r3, #0
}
 80134c8:	4618      	mov	r0, r3
 80134ca:	3708      	adds	r7, #8
 80134cc:	46bd      	mov	sp, r7
 80134ce:	bd80      	pop	{r7, pc}

080134d0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80134d0:	b480      	push	{r7}
 80134d2:	b085      	sub	sp, #20
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
 80134d8:	460b      	mov	r3, r1
 80134da:	70fb      	strb	r3, [r7, #3]
 80134dc:	4613      	mov	r3, r2
 80134de:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80134e6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80134e8:	78fb      	ldrb	r3, [r7, #3]
 80134ea:	68fa      	ldr	r2, [r7, #12]
 80134ec:	212c      	movs	r1, #44	; 0x2c
 80134ee:	fb01 f303 	mul.w	r3, r1, r3
 80134f2:	4413      	add	r3, r2
 80134f4:	333b      	adds	r3, #59	; 0x3b
 80134f6:	781b      	ldrb	r3, [r3, #0]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d009      	beq.n	8013510 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80134fc:	78fb      	ldrb	r3, [r7, #3]
 80134fe:	68fa      	ldr	r2, [r7, #12]
 8013500:	212c      	movs	r1, #44	; 0x2c
 8013502:	fb01 f303 	mul.w	r3, r1, r3
 8013506:	4413      	add	r3, r2
 8013508:	3354      	adds	r3, #84	; 0x54
 801350a:	78ba      	ldrb	r2, [r7, #2]
 801350c:	701a      	strb	r2, [r3, #0]
 801350e:	e008      	b.n	8013522 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8013510:	78fb      	ldrb	r3, [r7, #3]
 8013512:	68fa      	ldr	r2, [r7, #12]
 8013514:	212c      	movs	r1, #44	; 0x2c
 8013516:	fb01 f303 	mul.w	r3, r1, r3
 801351a:	4413      	add	r3, r2
 801351c:	3355      	adds	r3, #85	; 0x55
 801351e:	78ba      	ldrb	r2, [r7, #2]
 8013520:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8013522:	2300      	movs	r3, #0
}
 8013524:	4618      	mov	r0, r3
 8013526:	3714      	adds	r7, #20
 8013528:	46bd      	mov	sp, r7
 801352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352e:	4770      	bx	lr

08013530 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b082      	sub	sp, #8
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8013538:	6878      	ldr	r0, [r7, #4]
 801353a:	f7ef f871 	bl	8002620 <HAL_Delay>
}
 801353e:	bf00      	nop
 8013540:	3708      	adds	r7, #8
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}
	...

08013548 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013548:	b480      	push	{r7}
 801354a:	b085      	sub	sp, #20
 801354c:	af00      	add	r7, sp, #0
 801354e:	4603      	mov	r3, r0
 8013550:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013552:	2300      	movs	r3, #0
 8013554:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013556:	79fb      	ldrb	r3, [r7, #7]
 8013558:	2b03      	cmp	r3, #3
 801355a:	d817      	bhi.n	801358c <USBH_Get_USB_Status+0x44>
 801355c:	a201      	add	r2, pc, #4	; (adr r2, 8013564 <USBH_Get_USB_Status+0x1c>)
 801355e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013562:	bf00      	nop
 8013564:	08013575 	.word	0x08013575
 8013568:	0801357b 	.word	0x0801357b
 801356c:	08013581 	.word	0x08013581
 8013570:	08013587 	.word	0x08013587
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8013574:	2300      	movs	r3, #0
 8013576:	73fb      	strb	r3, [r7, #15]
    break;
 8013578:	e00b      	b.n	8013592 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801357a:	2302      	movs	r3, #2
 801357c:	73fb      	strb	r3, [r7, #15]
    break;
 801357e:	e008      	b.n	8013592 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8013580:	2301      	movs	r3, #1
 8013582:	73fb      	strb	r3, [r7, #15]
    break;
 8013584:	e005      	b.n	8013592 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8013586:	2302      	movs	r3, #2
 8013588:	73fb      	strb	r3, [r7, #15]
    break;
 801358a:	e002      	b.n	8013592 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801358c:	2302      	movs	r3, #2
 801358e:	73fb      	strb	r3, [r7, #15]
    break;
 8013590:	bf00      	nop
  }
  return usb_status;
 8013592:	7bfb      	ldrb	r3, [r7, #15]
}
 8013594:	4618      	mov	r0, r3
 8013596:	3714      	adds	r7, #20
 8013598:	46bd      	mov	sp, r7
 801359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359e:	4770      	bx	lr

080135a0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b084      	sub	sp, #16
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	4603      	mov	r3, r0
 80135a8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80135aa:	79fb      	ldrb	r3, [r7, #7]
 80135ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80135ae:	79fb      	ldrb	r3, [r7, #7]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d102      	bne.n	80135ba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80135b4:	2301      	movs	r3, #1
 80135b6:	73fb      	strb	r3, [r7, #15]
 80135b8:	e001      	b.n	80135be <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80135ba:	2300      	movs	r3, #0
 80135bc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,(GPIO_PinState)data);
 80135be:	7bfb      	ldrb	r3, [r7, #15]
 80135c0:	461a      	mov	r2, r3
 80135c2:	2101      	movs	r1, #1
 80135c4:	4803      	ldr	r0, [pc, #12]	; (80135d4 <MX_DriverVbusFS+0x34>)
 80135c6:	f7f0 f921 	bl	800380c <HAL_GPIO_WritePin>
}
 80135ca:	bf00      	nop
 80135cc:	3710      	adds	r7, #16
 80135ce:	46bd      	mov	sp, r7
 80135d0:	bd80      	pop	{r7, pc}
 80135d2:	bf00      	nop
 80135d4:	40020400 	.word	0x40020400

080135d8 <__errno>:
 80135d8:	4b01      	ldr	r3, [pc, #4]	; (80135e0 <__errno+0x8>)
 80135da:	6818      	ldr	r0, [r3, #0]
 80135dc:	4770      	bx	lr
 80135de:	bf00      	nop
 80135e0:	200002b0 	.word	0x200002b0

080135e4 <std>:
 80135e4:	2300      	movs	r3, #0
 80135e6:	b510      	push	{r4, lr}
 80135e8:	4604      	mov	r4, r0
 80135ea:	e9c0 3300 	strd	r3, r3, [r0]
 80135ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80135f2:	6083      	str	r3, [r0, #8]
 80135f4:	8181      	strh	r1, [r0, #12]
 80135f6:	6643      	str	r3, [r0, #100]	; 0x64
 80135f8:	81c2      	strh	r2, [r0, #14]
 80135fa:	6183      	str	r3, [r0, #24]
 80135fc:	4619      	mov	r1, r3
 80135fe:	2208      	movs	r2, #8
 8013600:	305c      	adds	r0, #92	; 0x5c
 8013602:	f000 f92b 	bl	801385c <memset>
 8013606:	4b05      	ldr	r3, [pc, #20]	; (801361c <std+0x38>)
 8013608:	6263      	str	r3, [r4, #36]	; 0x24
 801360a:	4b05      	ldr	r3, [pc, #20]	; (8013620 <std+0x3c>)
 801360c:	62a3      	str	r3, [r4, #40]	; 0x28
 801360e:	4b05      	ldr	r3, [pc, #20]	; (8013624 <std+0x40>)
 8013610:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013612:	4b05      	ldr	r3, [pc, #20]	; (8013628 <std+0x44>)
 8013614:	6224      	str	r4, [r4, #32]
 8013616:	6323      	str	r3, [r4, #48]	; 0x30
 8013618:	bd10      	pop	{r4, pc}
 801361a:	bf00      	nop
 801361c:	08013b61 	.word	0x08013b61
 8013620:	08013b83 	.word	0x08013b83
 8013624:	08013bbb 	.word	0x08013bbb
 8013628:	08013bdf 	.word	0x08013bdf

0801362c <_cleanup_r>:
 801362c:	4901      	ldr	r1, [pc, #4]	; (8013634 <_cleanup_r+0x8>)
 801362e:	f000 b8af 	b.w	8013790 <_fwalk_reent>
 8013632:	bf00      	nop
 8013634:	08013e2d 	.word	0x08013e2d

08013638 <__sfmoreglue>:
 8013638:	b570      	push	{r4, r5, r6, lr}
 801363a:	2268      	movs	r2, #104	; 0x68
 801363c:	1e4d      	subs	r5, r1, #1
 801363e:	4355      	muls	r5, r2
 8013640:	460e      	mov	r6, r1
 8013642:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013646:	f000 f97d 	bl	8013944 <_malloc_r>
 801364a:	4604      	mov	r4, r0
 801364c:	b140      	cbz	r0, 8013660 <__sfmoreglue+0x28>
 801364e:	2100      	movs	r1, #0
 8013650:	e9c0 1600 	strd	r1, r6, [r0]
 8013654:	300c      	adds	r0, #12
 8013656:	60a0      	str	r0, [r4, #8]
 8013658:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801365c:	f000 f8fe 	bl	801385c <memset>
 8013660:	4620      	mov	r0, r4
 8013662:	bd70      	pop	{r4, r5, r6, pc}

08013664 <__sfp_lock_acquire>:
 8013664:	4801      	ldr	r0, [pc, #4]	; (801366c <__sfp_lock_acquire+0x8>)
 8013666:	f000 b8d8 	b.w	801381a <__retarget_lock_acquire_recursive>
 801366a:	bf00      	nop
 801366c:	2000c5b5 	.word	0x2000c5b5

08013670 <__sfp_lock_release>:
 8013670:	4801      	ldr	r0, [pc, #4]	; (8013678 <__sfp_lock_release+0x8>)
 8013672:	f000 b8d3 	b.w	801381c <__retarget_lock_release_recursive>
 8013676:	bf00      	nop
 8013678:	2000c5b5 	.word	0x2000c5b5

0801367c <__sinit_lock_acquire>:
 801367c:	4801      	ldr	r0, [pc, #4]	; (8013684 <__sinit_lock_acquire+0x8>)
 801367e:	f000 b8cc 	b.w	801381a <__retarget_lock_acquire_recursive>
 8013682:	bf00      	nop
 8013684:	2000c5b6 	.word	0x2000c5b6

08013688 <__sinit_lock_release>:
 8013688:	4801      	ldr	r0, [pc, #4]	; (8013690 <__sinit_lock_release+0x8>)
 801368a:	f000 b8c7 	b.w	801381c <__retarget_lock_release_recursive>
 801368e:	bf00      	nop
 8013690:	2000c5b6 	.word	0x2000c5b6

08013694 <__sinit>:
 8013694:	b510      	push	{r4, lr}
 8013696:	4604      	mov	r4, r0
 8013698:	f7ff fff0 	bl	801367c <__sinit_lock_acquire>
 801369c:	69a3      	ldr	r3, [r4, #24]
 801369e:	b11b      	cbz	r3, 80136a8 <__sinit+0x14>
 80136a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136a4:	f7ff bff0 	b.w	8013688 <__sinit_lock_release>
 80136a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80136ac:	6523      	str	r3, [r4, #80]	; 0x50
 80136ae:	4b13      	ldr	r3, [pc, #76]	; (80136fc <__sinit+0x68>)
 80136b0:	4a13      	ldr	r2, [pc, #76]	; (8013700 <__sinit+0x6c>)
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80136b6:	42a3      	cmp	r3, r4
 80136b8:	bf04      	itt	eq
 80136ba:	2301      	moveq	r3, #1
 80136bc:	61a3      	streq	r3, [r4, #24]
 80136be:	4620      	mov	r0, r4
 80136c0:	f000 f820 	bl	8013704 <__sfp>
 80136c4:	6060      	str	r0, [r4, #4]
 80136c6:	4620      	mov	r0, r4
 80136c8:	f000 f81c 	bl	8013704 <__sfp>
 80136cc:	60a0      	str	r0, [r4, #8]
 80136ce:	4620      	mov	r0, r4
 80136d0:	f000 f818 	bl	8013704 <__sfp>
 80136d4:	2200      	movs	r2, #0
 80136d6:	60e0      	str	r0, [r4, #12]
 80136d8:	2104      	movs	r1, #4
 80136da:	6860      	ldr	r0, [r4, #4]
 80136dc:	f7ff ff82 	bl	80135e4 <std>
 80136e0:	68a0      	ldr	r0, [r4, #8]
 80136e2:	2201      	movs	r2, #1
 80136e4:	2109      	movs	r1, #9
 80136e6:	f7ff ff7d 	bl	80135e4 <std>
 80136ea:	68e0      	ldr	r0, [r4, #12]
 80136ec:	2202      	movs	r2, #2
 80136ee:	2112      	movs	r1, #18
 80136f0:	f7ff ff78 	bl	80135e4 <std>
 80136f4:	2301      	movs	r3, #1
 80136f6:	61a3      	str	r3, [r4, #24]
 80136f8:	e7d2      	b.n	80136a0 <__sinit+0xc>
 80136fa:	bf00      	nop
 80136fc:	080153a0 	.word	0x080153a0
 8013700:	0801362d 	.word	0x0801362d

08013704 <__sfp>:
 8013704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013706:	4607      	mov	r7, r0
 8013708:	f7ff ffac 	bl	8013664 <__sfp_lock_acquire>
 801370c:	4b1e      	ldr	r3, [pc, #120]	; (8013788 <__sfp+0x84>)
 801370e:	681e      	ldr	r6, [r3, #0]
 8013710:	69b3      	ldr	r3, [r6, #24]
 8013712:	b913      	cbnz	r3, 801371a <__sfp+0x16>
 8013714:	4630      	mov	r0, r6
 8013716:	f7ff ffbd 	bl	8013694 <__sinit>
 801371a:	3648      	adds	r6, #72	; 0x48
 801371c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013720:	3b01      	subs	r3, #1
 8013722:	d503      	bpl.n	801372c <__sfp+0x28>
 8013724:	6833      	ldr	r3, [r6, #0]
 8013726:	b30b      	cbz	r3, 801376c <__sfp+0x68>
 8013728:	6836      	ldr	r6, [r6, #0]
 801372a:	e7f7      	b.n	801371c <__sfp+0x18>
 801372c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013730:	b9d5      	cbnz	r5, 8013768 <__sfp+0x64>
 8013732:	4b16      	ldr	r3, [pc, #88]	; (801378c <__sfp+0x88>)
 8013734:	60e3      	str	r3, [r4, #12]
 8013736:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801373a:	6665      	str	r5, [r4, #100]	; 0x64
 801373c:	f000 f86c 	bl	8013818 <__retarget_lock_init_recursive>
 8013740:	f7ff ff96 	bl	8013670 <__sfp_lock_release>
 8013744:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013748:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801374c:	6025      	str	r5, [r4, #0]
 801374e:	61a5      	str	r5, [r4, #24]
 8013750:	2208      	movs	r2, #8
 8013752:	4629      	mov	r1, r5
 8013754:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013758:	f000 f880 	bl	801385c <memset>
 801375c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013760:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013764:	4620      	mov	r0, r4
 8013766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013768:	3468      	adds	r4, #104	; 0x68
 801376a:	e7d9      	b.n	8013720 <__sfp+0x1c>
 801376c:	2104      	movs	r1, #4
 801376e:	4638      	mov	r0, r7
 8013770:	f7ff ff62 	bl	8013638 <__sfmoreglue>
 8013774:	4604      	mov	r4, r0
 8013776:	6030      	str	r0, [r6, #0]
 8013778:	2800      	cmp	r0, #0
 801377a:	d1d5      	bne.n	8013728 <__sfp+0x24>
 801377c:	f7ff ff78 	bl	8013670 <__sfp_lock_release>
 8013780:	230c      	movs	r3, #12
 8013782:	603b      	str	r3, [r7, #0]
 8013784:	e7ee      	b.n	8013764 <__sfp+0x60>
 8013786:	bf00      	nop
 8013788:	080153a0 	.word	0x080153a0
 801378c:	ffff0001 	.word	0xffff0001

08013790 <_fwalk_reent>:
 8013790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013794:	4606      	mov	r6, r0
 8013796:	4688      	mov	r8, r1
 8013798:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801379c:	2700      	movs	r7, #0
 801379e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80137a2:	f1b9 0901 	subs.w	r9, r9, #1
 80137a6:	d505      	bpl.n	80137b4 <_fwalk_reent+0x24>
 80137a8:	6824      	ldr	r4, [r4, #0]
 80137aa:	2c00      	cmp	r4, #0
 80137ac:	d1f7      	bne.n	801379e <_fwalk_reent+0xe>
 80137ae:	4638      	mov	r0, r7
 80137b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137b4:	89ab      	ldrh	r3, [r5, #12]
 80137b6:	2b01      	cmp	r3, #1
 80137b8:	d907      	bls.n	80137ca <_fwalk_reent+0x3a>
 80137ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80137be:	3301      	adds	r3, #1
 80137c0:	d003      	beq.n	80137ca <_fwalk_reent+0x3a>
 80137c2:	4629      	mov	r1, r5
 80137c4:	4630      	mov	r0, r6
 80137c6:	47c0      	blx	r8
 80137c8:	4307      	orrs	r7, r0
 80137ca:	3568      	adds	r5, #104	; 0x68
 80137cc:	e7e9      	b.n	80137a2 <_fwalk_reent+0x12>
	...

080137d0 <__libc_init_array>:
 80137d0:	b570      	push	{r4, r5, r6, lr}
 80137d2:	4d0d      	ldr	r5, [pc, #52]	; (8013808 <__libc_init_array+0x38>)
 80137d4:	4c0d      	ldr	r4, [pc, #52]	; (801380c <__libc_init_array+0x3c>)
 80137d6:	1b64      	subs	r4, r4, r5
 80137d8:	10a4      	asrs	r4, r4, #2
 80137da:	2600      	movs	r6, #0
 80137dc:	42a6      	cmp	r6, r4
 80137de:	d109      	bne.n	80137f4 <__libc_init_array+0x24>
 80137e0:	4d0b      	ldr	r5, [pc, #44]	; (8013810 <__libc_init_array+0x40>)
 80137e2:	4c0c      	ldr	r4, [pc, #48]	; (8013814 <__libc_init_array+0x44>)
 80137e4:	f001 f9ce 	bl	8014b84 <_init>
 80137e8:	1b64      	subs	r4, r4, r5
 80137ea:	10a4      	asrs	r4, r4, #2
 80137ec:	2600      	movs	r6, #0
 80137ee:	42a6      	cmp	r6, r4
 80137f0:	d105      	bne.n	80137fe <__libc_init_array+0x2e>
 80137f2:	bd70      	pop	{r4, r5, r6, pc}
 80137f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80137f8:	4798      	blx	r3
 80137fa:	3601      	adds	r6, #1
 80137fc:	e7ee      	b.n	80137dc <__libc_init_array+0xc>
 80137fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8013802:	4798      	blx	r3
 8013804:	3601      	adds	r6, #1
 8013806:	e7f2      	b.n	80137ee <__libc_init_array+0x1e>
 8013808:	08015490 	.word	0x08015490
 801380c:	08015490 	.word	0x08015490
 8013810:	08015490 	.word	0x08015490
 8013814:	08015494 	.word	0x08015494

08013818 <__retarget_lock_init_recursive>:
 8013818:	4770      	bx	lr

0801381a <__retarget_lock_acquire_recursive>:
 801381a:	4770      	bx	lr

0801381c <__retarget_lock_release_recursive>:
 801381c:	4770      	bx	lr
	...

08013820 <malloc>:
 8013820:	4b02      	ldr	r3, [pc, #8]	; (801382c <malloc+0xc>)
 8013822:	4601      	mov	r1, r0
 8013824:	6818      	ldr	r0, [r3, #0]
 8013826:	f000 b88d 	b.w	8013944 <_malloc_r>
 801382a:	bf00      	nop
 801382c:	200002b0 	.word	0x200002b0

08013830 <free>:
 8013830:	4b02      	ldr	r3, [pc, #8]	; (801383c <free+0xc>)
 8013832:	4601      	mov	r1, r0
 8013834:	6818      	ldr	r0, [r3, #0]
 8013836:	f000 b819 	b.w	801386c <_free_r>
 801383a:	bf00      	nop
 801383c:	200002b0 	.word	0x200002b0

08013840 <memcpy>:
 8013840:	440a      	add	r2, r1
 8013842:	4291      	cmp	r1, r2
 8013844:	f100 33ff 	add.w	r3, r0, #4294967295
 8013848:	d100      	bne.n	801384c <memcpy+0xc>
 801384a:	4770      	bx	lr
 801384c:	b510      	push	{r4, lr}
 801384e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013852:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013856:	4291      	cmp	r1, r2
 8013858:	d1f9      	bne.n	801384e <memcpy+0xe>
 801385a:	bd10      	pop	{r4, pc}

0801385c <memset>:
 801385c:	4402      	add	r2, r0
 801385e:	4603      	mov	r3, r0
 8013860:	4293      	cmp	r3, r2
 8013862:	d100      	bne.n	8013866 <memset+0xa>
 8013864:	4770      	bx	lr
 8013866:	f803 1b01 	strb.w	r1, [r3], #1
 801386a:	e7f9      	b.n	8013860 <memset+0x4>

0801386c <_free_r>:
 801386c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801386e:	2900      	cmp	r1, #0
 8013870:	d044      	beq.n	80138fc <_free_r+0x90>
 8013872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013876:	9001      	str	r0, [sp, #4]
 8013878:	2b00      	cmp	r3, #0
 801387a:	f1a1 0404 	sub.w	r4, r1, #4
 801387e:	bfb8      	it	lt
 8013880:	18e4      	addlt	r4, r4, r3
 8013882:	f000 fb33 	bl	8013eec <__malloc_lock>
 8013886:	4a1e      	ldr	r2, [pc, #120]	; (8013900 <_free_r+0x94>)
 8013888:	9801      	ldr	r0, [sp, #4]
 801388a:	6813      	ldr	r3, [r2, #0]
 801388c:	b933      	cbnz	r3, 801389c <_free_r+0x30>
 801388e:	6063      	str	r3, [r4, #4]
 8013890:	6014      	str	r4, [r2, #0]
 8013892:	b003      	add	sp, #12
 8013894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013898:	f000 bb2e 	b.w	8013ef8 <__malloc_unlock>
 801389c:	42a3      	cmp	r3, r4
 801389e:	d908      	bls.n	80138b2 <_free_r+0x46>
 80138a0:	6825      	ldr	r5, [r4, #0]
 80138a2:	1961      	adds	r1, r4, r5
 80138a4:	428b      	cmp	r3, r1
 80138a6:	bf01      	itttt	eq
 80138a8:	6819      	ldreq	r1, [r3, #0]
 80138aa:	685b      	ldreq	r3, [r3, #4]
 80138ac:	1949      	addeq	r1, r1, r5
 80138ae:	6021      	streq	r1, [r4, #0]
 80138b0:	e7ed      	b.n	801388e <_free_r+0x22>
 80138b2:	461a      	mov	r2, r3
 80138b4:	685b      	ldr	r3, [r3, #4]
 80138b6:	b10b      	cbz	r3, 80138bc <_free_r+0x50>
 80138b8:	42a3      	cmp	r3, r4
 80138ba:	d9fa      	bls.n	80138b2 <_free_r+0x46>
 80138bc:	6811      	ldr	r1, [r2, #0]
 80138be:	1855      	adds	r5, r2, r1
 80138c0:	42a5      	cmp	r5, r4
 80138c2:	d10b      	bne.n	80138dc <_free_r+0x70>
 80138c4:	6824      	ldr	r4, [r4, #0]
 80138c6:	4421      	add	r1, r4
 80138c8:	1854      	adds	r4, r2, r1
 80138ca:	42a3      	cmp	r3, r4
 80138cc:	6011      	str	r1, [r2, #0]
 80138ce:	d1e0      	bne.n	8013892 <_free_r+0x26>
 80138d0:	681c      	ldr	r4, [r3, #0]
 80138d2:	685b      	ldr	r3, [r3, #4]
 80138d4:	6053      	str	r3, [r2, #4]
 80138d6:	4421      	add	r1, r4
 80138d8:	6011      	str	r1, [r2, #0]
 80138da:	e7da      	b.n	8013892 <_free_r+0x26>
 80138dc:	d902      	bls.n	80138e4 <_free_r+0x78>
 80138de:	230c      	movs	r3, #12
 80138e0:	6003      	str	r3, [r0, #0]
 80138e2:	e7d6      	b.n	8013892 <_free_r+0x26>
 80138e4:	6825      	ldr	r5, [r4, #0]
 80138e6:	1961      	adds	r1, r4, r5
 80138e8:	428b      	cmp	r3, r1
 80138ea:	bf04      	itt	eq
 80138ec:	6819      	ldreq	r1, [r3, #0]
 80138ee:	685b      	ldreq	r3, [r3, #4]
 80138f0:	6063      	str	r3, [r4, #4]
 80138f2:	bf04      	itt	eq
 80138f4:	1949      	addeq	r1, r1, r5
 80138f6:	6021      	streq	r1, [r4, #0]
 80138f8:	6054      	str	r4, [r2, #4]
 80138fa:	e7ca      	b.n	8013892 <_free_r+0x26>
 80138fc:	b003      	add	sp, #12
 80138fe:	bd30      	pop	{r4, r5, pc}
 8013900:	2000c5b8 	.word	0x2000c5b8

08013904 <sbrk_aligned>:
 8013904:	b570      	push	{r4, r5, r6, lr}
 8013906:	4e0e      	ldr	r6, [pc, #56]	; (8013940 <sbrk_aligned+0x3c>)
 8013908:	460c      	mov	r4, r1
 801390a:	6831      	ldr	r1, [r6, #0]
 801390c:	4605      	mov	r5, r0
 801390e:	b911      	cbnz	r1, 8013916 <sbrk_aligned+0x12>
 8013910:	f000 f8f6 	bl	8013b00 <_sbrk_r>
 8013914:	6030      	str	r0, [r6, #0]
 8013916:	4621      	mov	r1, r4
 8013918:	4628      	mov	r0, r5
 801391a:	f000 f8f1 	bl	8013b00 <_sbrk_r>
 801391e:	1c43      	adds	r3, r0, #1
 8013920:	d00a      	beq.n	8013938 <sbrk_aligned+0x34>
 8013922:	1cc4      	adds	r4, r0, #3
 8013924:	f024 0403 	bic.w	r4, r4, #3
 8013928:	42a0      	cmp	r0, r4
 801392a:	d007      	beq.n	801393c <sbrk_aligned+0x38>
 801392c:	1a21      	subs	r1, r4, r0
 801392e:	4628      	mov	r0, r5
 8013930:	f000 f8e6 	bl	8013b00 <_sbrk_r>
 8013934:	3001      	adds	r0, #1
 8013936:	d101      	bne.n	801393c <sbrk_aligned+0x38>
 8013938:	f04f 34ff 	mov.w	r4, #4294967295
 801393c:	4620      	mov	r0, r4
 801393e:	bd70      	pop	{r4, r5, r6, pc}
 8013940:	2000c5bc 	.word	0x2000c5bc

08013944 <_malloc_r>:
 8013944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013948:	1ccd      	adds	r5, r1, #3
 801394a:	f025 0503 	bic.w	r5, r5, #3
 801394e:	3508      	adds	r5, #8
 8013950:	2d0c      	cmp	r5, #12
 8013952:	bf38      	it	cc
 8013954:	250c      	movcc	r5, #12
 8013956:	2d00      	cmp	r5, #0
 8013958:	4607      	mov	r7, r0
 801395a:	db01      	blt.n	8013960 <_malloc_r+0x1c>
 801395c:	42a9      	cmp	r1, r5
 801395e:	d905      	bls.n	801396c <_malloc_r+0x28>
 8013960:	230c      	movs	r3, #12
 8013962:	603b      	str	r3, [r7, #0]
 8013964:	2600      	movs	r6, #0
 8013966:	4630      	mov	r0, r6
 8013968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801396c:	4e2e      	ldr	r6, [pc, #184]	; (8013a28 <_malloc_r+0xe4>)
 801396e:	f000 fabd 	bl	8013eec <__malloc_lock>
 8013972:	6833      	ldr	r3, [r6, #0]
 8013974:	461c      	mov	r4, r3
 8013976:	bb34      	cbnz	r4, 80139c6 <_malloc_r+0x82>
 8013978:	4629      	mov	r1, r5
 801397a:	4638      	mov	r0, r7
 801397c:	f7ff ffc2 	bl	8013904 <sbrk_aligned>
 8013980:	1c43      	adds	r3, r0, #1
 8013982:	4604      	mov	r4, r0
 8013984:	d14d      	bne.n	8013a22 <_malloc_r+0xde>
 8013986:	6834      	ldr	r4, [r6, #0]
 8013988:	4626      	mov	r6, r4
 801398a:	2e00      	cmp	r6, #0
 801398c:	d140      	bne.n	8013a10 <_malloc_r+0xcc>
 801398e:	6823      	ldr	r3, [r4, #0]
 8013990:	4631      	mov	r1, r6
 8013992:	4638      	mov	r0, r7
 8013994:	eb04 0803 	add.w	r8, r4, r3
 8013998:	f000 f8b2 	bl	8013b00 <_sbrk_r>
 801399c:	4580      	cmp	r8, r0
 801399e:	d13a      	bne.n	8013a16 <_malloc_r+0xd2>
 80139a0:	6821      	ldr	r1, [r4, #0]
 80139a2:	3503      	adds	r5, #3
 80139a4:	1a6d      	subs	r5, r5, r1
 80139a6:	f025 0503 	bic.w	r5, r5, #3
 80139aa:	3508      	adds	r5, #8
 80139ac:	2d0c      	cmp	r5, #12
 80139ae:	bf38      	it	cc
 80139b0:	250c      	movcc	r5, #12
 80139b2:	4629      	mov	r1, r5
 80139b4:	4638      	mov	r0, r7
 80139b6:	f7ff ffa5 	bl	8013904 <sbrk_aligned>
 80139ba:	3001      	adds	r0, #1
 80139bc:	d02b      	beq.n	8013a16 <_malloc_r+0xd2>
 80139be:	6823      	ldr	r3, [r4, #0]
 80139c0:	442b      	add	r3, r5
 80139c2:	6023      	str	r3, [r4, #0]
 80139c4:	e00e      	b.n	80139e4 <_malloc_r+0xa0>
 80139c6:	6822      	ldr	r2, [r4, #0]
 80139c8:	1b52      	subs	r2, r2, r5
 80139ca:	d41e      	bmi.n	8013a0a <_malloc_r+0xc6>
 80139cc:	2a0b      	cmp	r2, #11
 80139ce:	d916      	bls.n	80139fe <_malloc_r+0xba>
 80139d0:	1961      	adds	r1, r4, r5
 80139d2:	42a3      	cmp	r3, r4
 80139d4:	6025      	str	r5, [r4, #0]
 80139d6:	bf18      	it	ne
 80139d8:	6059      	strne	r1, [r3, #4]
 80139da:	6863      	ldr	r3, [r4, #4]
 80139dc:	bf08      	it	eq
 80139de:	6031      	streq	r1, [r6, #0]
 80139e0:	5162      	str	r2, [r4, r5]
 80139e2:	604b      	str	r3, [r1, #4]
 80139e4:	4638      	mov	r0, r7
 80139e6:	f104 060b 	add.w	r6, r4, #11
 80139ea:	f000 fa85 	bl	8013ef8 <__malloc_unlock>
 80139ee:	f026 0607 	bic.w	r6, r6, #7
 80139f2:	1d23      	adds	r3, r4, #4
 80139f4:	1af2      	subs	r2, r6, r3
 80139f6:	d0b6      	beq.n	8013966 <_malloc_r+0x22>
 80139f8:	1b9b      	subs	r3, r3, r6
 80139fa:	50a3      	str	r3, [r4, r2]
 80139fc:	e7b3      	b.n	8013966 <_malloc_r+0x22>
 80139fe:	6862      	ldr	r2, [r4, #4]
 8013a00:	42a3      	cmp	r3, r4
 8013a02:	bf0c      	ite	eq
 8013a04:	6032      	streq	r2, [r6, #0]
 8013a06:	605a      	strne	r2, [r3, #4]
 8013a08:	e7ec      	b.n	80139e4 <_malloc_r+0xa0>
 8013a0a:	4623      	mov	r3, r4
 8013a0c:	6864      	ldr	r4, [r4, #4]
 8013a0e:	e7b2      	b.n	8013976 <_malloc_r+0x32>
 8013a10:	4634      	mov	r4, r6
 8013a12:	6876      	ldr	r6, [r6, #4]
 8013a14:	e7b9      	b.n	801398a <_malloc_r+0x46>
 8013a16:	230c      	movs	r3, #12
 8013a18:	603b      	str	r3, [r7, #0]
 8013a1a:	4638      	mov	r0, r7
 8013a1c:	f000 fa6c 	bl	8013ef8 <__malloc_unlock>
 8013a20:	e7a1      	b.n	8013966 <_malloc_r+0x22>
 8013a22:	6025      	str	r5, [r4, #0]
 8013a24:	e7de      	b.n	80139e4 <_malloc_r+0xa0>
 8013a26:	bf00      	nop
 8013a28:	2000c5b8 	.word	0x2000c5b8

08013a2c <cleanup_glue>:
 8013a2c:	b538      	push	{r3, r4, r5, lr}
 8013a2e:	460c      	mov	r4, r1
 8013a30:	6809      	ldr	r1, [r1, #0]
 8013a32:	4605      	mov	r5, r0
 8013a34:	b109      	cbz	r1, 8013a3a <cleanup_glue+0xe>
 8013a36:	f7ff fff9 	bl	8013a2c <cleanup_glue>
 8013a3a:	4621      	mov	r1, r4
 8013a3c:	4628      	mov	r0, r5
 8013a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a42:	f7ff bf13 	b.w	801386c <_free_r>
	...

08013a48 <_reclaim_reent>:
 8013a48:	4b2c      	ldr	r3, [pc, #176]	; (8013afc <_reclaim_reent+0xb4>)
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	4283      	cmp	r3, r0
 8013a4e:	b570      	push	{r4, r5, r6, lr}
 8013a50:	4604      	mov	r4, r0
 8013a52:	d051      	beq.n	8013af8 <_reclaim_reent+0xb0>
 8013a54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013a56:	b143      	cbz	r3, 8013a6a <_reclaim_reent+0x22>
 8013a58:	68db      	ldr	r3, [r3, #12]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d14a      	bne.n	8013af4 <_reclaim_reent+0xac>
 8013a5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a60:	6819      	ldr	r1, [r3, #0]
 8013a62:	b111      	cbz	r1, 8013a6a <_reclaim_reent+0x22>
 8013a64:	4620      	mov	r0, r4
 8013a66:	f7ff ff01 	bl	801386c <_free_r>
 8013a6a:	6961      	ldr	r1, [r4, #20]
 8013a6c:	b111      	cbz	r1, 8013a74 <_reclaim_reent+0x2c>
 8013a6e:	4620      	mov	r0, r4
 8013a70:	f7ff fefc 	bl	801386c <_free_r>
 8013a74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013a76:	b111      	cbz	r1, 8013a7e <_reclaim_reent+0x36>
 8013a78:	4620      	mov	r0, r4
 8013a7a:	f7ff fef7 	bl	801386c <_free_r>
 8013a7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013a80:	b111      	cbz	r1, 8013a88 <_reclaim_reent+0x40>
 8013a82:	4620      	mov	r0, r4
 8013a84:	f7ff fef2 	bl	801386c <_free_r>
 8013a88:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013a8a:	b111      	cbz	r1, 8013a92 <_reclaim_reent+0x4a>
 8013a8c:	4620      	mov	r0, r4
 8013a8e:	f7ff feed 	bl	801386c <_free_r>
 8013a92:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8013a94:	b111      	cbz	r1, 8013a9c <_reclaim_reent+0x54>
 8013a96:	4620      	mov	r0, r4
 8013a98:	f7ff fee8 	bl	801386c <_free_r>
 8013a9c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8013a9e:	b111      	cbz	r1, 8013aa6 <_reclaim_reent+0x5e>
 8013aa0:	4620      	mov	r0, r4
 8013aa2:	f7ff fee3 	bl	801386c <_free_r>
 8013aa6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013aa8:	b111      	cbz	r1, 8013ab0 <_reclaim_reent+0x68>
 8013aaa:	4620      	mov	r0, r4
 8013aac:	f7ff fede 	bl	801386c <_free_r>
 8013ab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ab2:	b111      	cbz	r1, 8013aba <_reclaim_reent+0x72>
 8013ab4:	4620      	mov	r0, r4
 8013ab6:	f7ff fed9 	bl	801386c <_free_r>
 8013aba:	69a3      	ldr	r3, [r4, #24]
 8013abc:	b1e3      	cbz	r3, 8013af8 <_reclaim_reent+0xb0>
 8013abe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013ac0:	4620      	mov	r0, r4
 8013ac2:	4798      	blx	r3
 8013ac4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013ac6:	b1b9      	cbz	r1, 8013af8 <_reclaim_reent+0xb0>
 8013ac8:	4620      	mov	r0, r4
 8013aca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ace:	f7ff bfad 	b.w	8013a2c <cleanup_glue>
 8013ad2:	5949      	ldr	r1, [r1, r5]
 8013ad4:	b941      	cbnz	r1, 8013ae8 <_reclaim_reent+0xa0>
 8013ad6:	3504      	adds	r5, #4
 8013ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ada:	2d80      	cmp	r5, #128	; 0x80
 8013adc:	68d9      	ldr	r1, [r3, #12]
 8013ade:	d1f8      	bne.n	8013ad2 <_reclaim_reent+0x8a>
 8013ae0:	4620      	mov	r0, r4
 8013ae2:	f7ff fec3 	bl	801386c <_free_r>
 8013ae6:	e7ba      	b.n	8013a5e <_reclaim_reent+0x16>
 8013ae8:	680e      	ldr	r6, [r1, #0]
 8013aea:	4620      	mov	r0, r4
 8013aec:	f7ff febe 	bl	801386c <_free_r>
 8013af0:	4631      	mov	r1, r6
 8013af2:	e7ef      	b.n	8013ad4 <_reclaim_reent+0x8c>
 8013af4:	2500      	movs	r5, #0
 8013af6:	e7ef      	b.n	8013ad8 <_reclaim_reent+0x90>
 8013af8:	bd70      	pop	{r4, r5, r6, pc}
 8013afa:	bf00      	nop
 8013afc:	200002b0 	.word	0x200002b0

08013b00 <_sbrk_r>:
 8013b00:	b538      	push	{r3, r4, r5, lr}
 8013b02:	4d06      	ldr	r5, [pc, #24]	; (8013b1c <_sbrk_r+0x1c>)
 8013b04:	2300      	movs	r3, #0
 8013b06:	4604      	mov	r4, r0
 8013b08:	4608      	mov	r0, r1
 8013b0a:	602b      	str	r3, [r5, #0]
 8013b0c:	f7ee fc26 	bl	800235c <_sbrk>
 8013b10:	1c43      	adds	r3, r0, #1
 8013b12:	d102      	bne.n	8013b1a <_sbrk_r+0x1a>
 8013b14:	682b      	ldr	r3, [r5, #0]
 8013b16:	b103      	cbz	r3, 8013b1a <_sbrk_r+0x1a>
 8013b18:	6023      	str	r3, [r4, #0]
 8013b1a:	bd38      	pop	{r3, r4, r5, pc}
 8013b1c:	2000c5c0 	.word	0x2000c5c0

08013b20 <siprintf>:
 8013b20:	b40e      	push	{r1, r2, r3}
 8013b22:	b500      	push	{lr}
 8013b24:	b09c      	sub	sp, #112	; 0x70
 8013b26:	ab1d      	add	r3, sp, #116	; 0x74
 8013b28:	9002      	str	r0, [sp, #8]
 8013b2a:	9006      	str	r0, [sp, #24]
 8013b2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013b30:	4809      	ldr	r0, [pc, #36]	; (8013b58 <siprintf+0x38>)
 8013b32:	9107      	str	r1, [sp, #28]
 8013b34:	9104      	str	r1, [sp, #16]
 8013b36:	4909      	ldr	r1, [pc, #36]	; (8013b5c <siprintf+0x3c>)
 8013b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b3c:	9105      	str	r1, [sp, #20]
 8013b3e:	6800      	ldr	r0, [r0, #0]
 8013b40:	9301      	str	r3, [sp, #4]
 8013b42:	a902      	add	r1, sp, #8
 8013b44:	f000 fa3a 	bl	8013fbc <_svfiprintf_r>
 8013b48:	9b02      	ldr	r3, [sp, #8]
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	701a      	strb	r2, [r3, #0]
 8013b4e:	b01c      	add	sp, #112	; 0x70
 8013b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b54:	b003      	add	sp, #12
 8013b56:	4770      	bx	lr
 8013b58:	200002b0 	.word	0x200002b0
 8013b5c:	ffff0208 	.word	0xffff0208

08013b60 <__sread>:
 8013b60:	b510      	push	{r4, lr}
 8013b62:	460c      	mov	r4, r1
 8013b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b68:	f000 fe16 	bl	8014798 <_read_r>
 8013b6c:	2800      	cmp	r0, #0
 8013b6e:	bfab      	itete	ge
 8013b70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013b72:	89a3      	ldrhlt	r3, [r4, #12]
 8013b74:	181b      	addge	r3, r3, r0
 8013b76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013b7a:	bfac      	ite	ge
 8013b7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8013b7e:	81a3      	strhlt	r3, [r4, #12]
 8013b80:	bd10      	pop	{r4, pc}

08013b82 <__swrite>:
 8013b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b86:	461f      	mov	r7, r3
 8013b88:	898b      	ldrh	r3, [r1, #12]
 8013b8a:	05db      	lsls	r3, r3, #23
 8013b8c:	4605      	mov	r5, r0
 8013b8e:	460c      	mov	r4, r1
 8013b90:	4616      	mov	r6, r2
 8013b92:	d505      	bpl.n	8013ba0 <__swrite+0x1e>
 8013b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b98:	2302      	movs	r3, #2
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	f000 f994 	bl	8013ec8 <_lseek_r>
 8013ba0:	89a3      	ldrh	r3, [r4, #12]
 8013ba2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ba6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013baa:	81a3      	strh	r3, [r4, #12]
 8013bac:	4632      	mov	r2, r6
 8013bae:	463b      	mov	r3, r7
 8013bb0:	4628      	mov	r0, r5
 8013bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013bb6:	f000 b873 	b.w	8013ca0 <_write_r>

08013bba <__sseek>:
 8013bba:	b510      	push	{r4, lr}
 8013bbc:	460c      	mov	r4, r1
 8013bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bc2:	f000 f981 	bl	8013ec8 <_lseek_r>
 8013bc6:	1c43      	adds	r3, r0, #1
 8013bc8:	89a3      	ldrh	r3, [r4, #12]
 8013bca:	bf15      	itete	ne
 8013bcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8013bce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013bd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013bd6:	81a3      	strheq	r3, [r4, #12]
 8013bd8:	bf18      	it	ne
 8013bda:	81a3      	strhne	r3, [r4, #12]
 8013bdc:	bd10      	pop	{r4, pc}

08013bde <__sclose>:
 8013bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013be2:	f000 b88d 	b.w	8013d00 <_close_r>
	...

08013be8 <strtok>:
 8013be8:	4b16      	ldr	r3, [pc, #88]	; (8013c44 <strtok+0x5c>)
 8013bea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013bec:	681e      	ldr	r6, [r3, #0]
 8013bee:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8013bf0:	4605      	mov	r5, r0
 8013bf2:	b9fc      	cbnz	r4, 8013c34 <strtok+0x4c>
 8013bf4:	2050      	movs	r0, #80	; 0x50
 8013bf6:	9101      	str	r1, [sp, #4]
 8013bf8:	f7ff fe12 	bl	8013820 <malloc>
 8013bfc:	9901      	ldr	r1, [sp, #4]
 8013bfe:	65b0      	str	r0, [r6, #88]	; 0x58
 8013c00:	4602      	mov	r2, r0
 8013c02:	b920      	cbnz	r0, 8013c0e <strtok+0x26>
 8013c04:	4b10      	ldr	r3, [pc, #64]	; (8013c48 <strtok+0x60>)
 8013c06:	4811      	ldr	r0, [pc, #68]	; (8013c4c <strtok+0x64>)
 8013c08:	2157      	movs	r1, #87	; 0x57
 8013c0a:	f000 f85b 	bl	8013cc4 <__assert_func>
 8013c0e:	e9c0 4400 	strd	r4, r4, [r0]
 8013c12:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8013c16:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8013c1a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8013c1e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8013c22:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8013c26:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8013c2a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8013c2e:	6184      	str	r4, [r0, #24]
 8013c30:	7704      	strb	r4, [r0, #28]
 8013c32:	6244      	str	r4, [r0, #36]	; 0x24
 8013c34:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8013c36:	2301      	movs	r3, #1
 8013c38:	4628      	mov	r0, r5
 8013c3a:	b002      	add	sp, #8
 8013c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c40:	f000 b806 	b.w	8013c50 <__strtok_r>
 8013c44:	200002b0 	.word	0x200002b0
 8013c48:	080153a4 	.word	0x080153a4
 8013c4c:	080153bb 	.word	0x080153bb

08013c50 <__strtok_r>:
 8013c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c52:	b908      	cbnz	r0, 8013c58 <__strtok_r+0x8>
 8013c54:	6810      	ldr	r0, [r2, #0]
 8013c56:	b188      	cbz	r0, 8013c7c <__strtok_r+0x2c>
 8013c58:	4604      	mov	r4, r0
 8013c5a:	4620      	mov	r0, r4
 8013c5c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013c60:	460f      	mov	r7, r1
 8013c62:	f817 6b01 	ldrb.w	r6, [r7], #1
 8013c66:	b91e      	cbnz	r6, 8013c70 <__strtok_r+0x20>
 8013c68:	b965      	cbnz	r5, 8013c84 <__strtok_r+0x34>
 8013c6a:	6015      	str	r5, [r2, #0]
 8013c6c:	4628      	mov	r0, r5
 8013c6e:	e005      	b.n	8013c7c <__strtok_r+0x2c>
 8013c70:	42b5      	cmp	r5, r6
 8013c72:	d1f6      	bne.n	8013c62 <__strtok_r+0x12>
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d1f0      	bne.n	8013c5a <__strtok_r+0xa>
 8013c78:	6014      	str	r4, [r2, #0]
 8013c7a:	7003      	strb	r3, [r0, #0]
 8013c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c7e:	461c      	mov	r4, r3
 8013c80:	e00c      	b.n	8013c9c <__strtok_r+0x4c>
 8013c82:	b915      	cbnz	r5, 8013c8a <__strtok_r+0x3a>
 8013c84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013c88:	460e      	mov	r6, r1
 8013c8a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013c8e:	42ab      	cmp	r3, r5
 8013c90:	d1f7      	bne.n	8013c82 <__strtok_r+0x32>
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d0f3      	beq.n	8013c7e <__strtok_r+0x2e>
 8013c96:	2300      	movs	r3, #0
 8013c98:	f804 3c01 	strb.w	r3, [r4, #-1]
 8013c9c:	6014      	str	r4, [r2, #0]
 8013c9e:	e7ed      	b.n	8013c7c <__strtok_r+0x2c>

08013ca0 <_write_r>:
 8013ca0:	b538      	push	{r3, r4, r5, lr}
 8013ca2:	4d07      	ldr	r5, [pc, #28]	; (8013cc0 <_write_r+0x20>)
 8013ca4:	4604      	mov	r4, r0
 8013ca6:	4608      	mov	r0, r1
 8013ca8:	4611      	mov	r1, r2
 8013caa:	2200      	movs	r2, #0
 8013cac:	602a      	str	r2, [r5, #0]
 8013cae:	461a      	mov	r2, r3
 8013cb0:	f7ee fb03 	bl	80022ba <_write>
 8013cb4:	1c43      	adds	r3, r0, #1
 8013cb6:	d102      	bne.n	8013cbe <_write_r+0x1e>
 8013cb8:	682b      	ldr	r3, [r5, #0]
 8013cba:	b103      	cbz	r3, 8013cbe <_write_r+0x1e>
 8013cbc:	6023      	str	r3, [r4, #0]
 8013cbe:	bd38      	pop	{r3, r4, r5, pc}
 8013cc0:	2000c5c0 	.word	0x2000c5c0

08013cc4 <__assert_func>:
 8013cc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013cc6:	4614      	mov	r4, r2
 8013cc8:	461a      	mov	r2, r3
 8013cca:	4b09      	ldr	r3, [pc, #36]	; (8013cf0 <__assert_func+0x2c>)
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	4605      	mov	r5, r0
 8013cd0:	68d8      	ldr	r0, [r3, #12]
 8013cd2:	b14c      	cbz	r4, 8013ce8 <__assert_func+0x24>
 8013cd4:	4b07      	ldr	r3, [pc, #28]	; (8013cf4 <__assert_func+0x30>)
 8013cd6:	9100      	str	r1, [sp, #0]
 8013cd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013cdc:	4906      	ldr	r1, [pc, #24]	; (8013cf8 <__assert_func+0x34>)
 8013cde:	462b      	mov	r3, r5
 8013ce0:	f000 f8e0 	bl	8013ea4 <fiprintf>
 8013ce4:	f000 fe2a 	bl	801493c <abort>
 8013ce8:	4b04      	ldr	r3, [pc, #16]	; (8013cfc <__assert_func+0x38>)
 8013cea:	461c      	mov	r4, r3
 8013cec:	e7f3      	b.n	8013cd6 <__assert_func+0x12>
 8013cee:	bf00      	nop
 8013cf0:	200002b0 	.word	0x200002b0
 8013cf4:	08015418 	.word	0x08015418
 8013cf8:	08015425 	.word	0x08015425
 8013cfc:	08015453 	.word	0x08015453

08013d00 <_close_r>:
 8013d00:	b538      	push	{r3, r4, r5, lr}
 8013d02:	4d06      	ldr	r5, [pc, #24]	; (8013d1c <_close_r+0x1c>)
 8013d04:	2300      	movs	r3, #0
 8013d06:	4604      	mov	r4, r0
 8013d08:	4608      	mov	r0, r1
 8013d0a:	602b      	str	r3, [r5, #0]
 8013d0c:	f7ee faf1 	bl	80022f2 <_close>
 8013d10:	1c43      	adds	r3, r0, #1
 8013d12:	d102      	bne.n	8013d1a <_close_r+0x1a>
 8013d14:	682b      	ldr	r3, [r5, #0]
 8013d16:	b103      	cbz	r3, 8013d1a <_close_r+0x1a>
 8013d18:	6023      	str	r3, [r4, #0]
 8013d1a:	bd38      	pop	{r3, r4, r5, pc}
 8013d1c:	2000c5c0 	.word	0x2000c5c0

08013d20 <__sflush_r>:
 8013d20:	898a      	ldrh	r2, [r1, #12]
 8013d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d26:	4605      	mov	r5, r0
 8013d28:	0710      	lsls	r0, r2, #28
 8013d2a:	460c      	mov	r4, r1
 8013d2c:	d458      	bmi.n	8013de0 <__sflush_r+0xc0>
 8013d2e:	684b      	ldr	r3, [r1, #4]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	dc05      	bgt.n	8013d40 <__sflush_r+0x20>
 8013d34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	dc02      	bgt.n	8013d40 <__sflush_r+0x20>
 8013d3a:	2000      	movs	r0, #0
 8013d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d42:	2e00      	cmp	r6, #0
 8013d44:	d0f9      	beq.n	8013d3a <__sflush_r+0x1a>
 8013d46:	2300      	movs	r3, #0
 8013d48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013d4c:	682f      	ldr	r7, [r5, #0]
 8013d4e:	602b      	str	r3, [r5, #0]
 8013d50:	d032      	beq.n	8013db8 <__sflush_r+0x98>
 8013d52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013d54:	89a3      	ldrh	r3, [r4, #12]
 8013d56:	075a      	lsls	r2, r3, #29
 8013d58:	d505      	bpl.n	8013d66 <__sflush_r+0x46>
 8013d5a:	6863      	ldr	r3, [r4, #4]
 8013d5c:	1ac0      	subs	r0, r0, r3
 8013d5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013d60:	b10b      	cbz	r3, 8013d66 <__sflush_r+0x46>
 8013d62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013d64:	1ac0      	subs	r0, r0, r3
 8013d66:	2300      	movs	r3, #0
 8013d68:	4602      	mov	r2, r0
 8013d6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d6c:	6a21      	ldr	r1, [r4, #32]
 8013d6e:	4628      	mov	r0, r5
 8013d70:	47b0      	blx	r6
 8013d72:	1c43      	adds	r3, r0, #1
 8013d74:	89a3      	ldrh	r3, [r4, #12]
 8013d76:	d106      	bne.n	8013d86 <__sflush_r+0x66>
 8013d78:	6829      	ldr	r1, [r5, #0]
 8013d7a:	291d      	cmp	r1, #29
 8013d7c:	d82c      	bhi.n	8013dd8 <__sflush_r+0xb8>
 8013d7e:	4a2a      	ldr	r2, [pc, #168]	; (8013e28 <__sflush_r+0x108>)
 8013d80:	40ca      	lsrs	r2, r1
 8013d82:	07d6      	lsls	r6, r2, #31
 8013d84:	d528      	bpl.n	8013dd8 <__sflush_r+0xb8>
 8013d86:	2200      	movs	r2, #0
 8013d88:	6062      	str	r2, [r4, #4]
 8013d8a:	04d9      	lsls	r1, r3, #19
 8013d8c:	6922      	ldr	r2, [r4, #16]
 8013d8e:	6022      	str	r2, [r4, #0]
 8013d90:	d504      	bpl.n	8013d9c <__sflush_r+0x7c>
 8013d92:	1c42      	adds	r2, r0, #1
 8013d94:	d101      	bne.n	8013d9a <__sflush_r+0x7a>
 8013d96:	682b      	ldr	r3, [r5, #0]
 8013d98:	b903      	cbnz	r3, 8013d9c <__sflush_r+0x7c>
 8013d9a:	6560      	str	r0, [r4, #84]	; 0x54
 8013d9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d9e:	602f      	str	r7, [r5, #0]
 8013da0:	2900      	cmp	r1, #0
 8013da2:	d0ca      	beq.n	8013d3a <__sflush_r+0x1a>
 8013da4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013da8:	4299      	cmp	r1, r3
 8013daa:	d002      	beq.n	8013db2 <__sflush_r+0x92>
 8013dac:	4628      	mov	r0, r5
 8013dae:	f7ff fd5d 	bl	801386c <_free_r>
 8013db2:	2000      	movs	r0, #0
 8013db4:	6360      	str	r0, [r4, #52]	; 0x34
 8013db6:	e7c1      	b.n	8013d3c <__sflush_r+0x1c>
 8013db8:	6a21      	ldr	r1, [r4, #32]
 8013dba:	2301      	movs	r3, #1
 8013dbc:	4628      	mov	r0, r5
 8013dbe:	47b0      	blx	r6
 8013dc0:	1c41      	adds	r1, r0, #1
 8013dc2:	d1c7      	bne.n	8013d54 <__sflush_r+0x34>
 8013dc4:	682b      	ldr	r3, [r5, #0]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d0c4      	beq.n	8013d54 <__sflush_r+0x34>
 8013dca:	2b1d      	cmp	r3, #29
 8013dcc:	d001      	beq.n	8013dd2 <__sflush_r+0xb2>
 8013dce:	2b16      	cmp	r3, #22
 8013dd0:	d101      	bne.n	8013dd6 <__sflush_r+0xb6>
 8013dd2:	602f      	str	r7, [r5, #0]
 8013dd4:	e7b1      	b.n	8013d3a <__sflush_r+0x1a>
 8013dd6:	89a3      	ldrh	r3, [r4, #12]
 8013dd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ddc:	81a3      	strh	r3, [r4, #12]
 8013dde:	e7ad      	b.n	8013d3c <__sflush_r+0x1c>
 8013de0:	690f      	ldr	r7, [r1, #16]
 8013de2:	2f00      	cmp	r7, #0
 8013de4:	d0a9      	beq.n	8013d3a <__sflush_r+0x1a>
 8013de6:	0793      	lsls	r3, r2, #30
 8013de8:	680e      	ldr	r6, [r1, #0]
 8013dea:	bf08      	it	eq
 8013dec:	694b      	ldreq	r3, [r1, #20]
 8013dee:	600f      	str	r7, [r1, #0]
 8013df0:	bf18      	it	ne
 8013df2:	2300      	movne	r3, #0
 8013df4:	eba6 0807 	sub.w	r8, r6, r7
 8013df8:	608b      	str	r3, [r1, #8]
 8013dfa:	f1b8 0f00 	cmp.w	r8, #0
 8013dfe:	dd9c      	ble.n	8013d3a <__sflush_r+0x1a>
 8013e00:	6a21      	ldr	r1, [r4, #32]
 8013e02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013e04:	4643      	mov	r3, r8
 8013e06:	463a      	mov	r2, r7
 8013e08:	4628      	mov	r0, r5
 8013e0a:	47b0      	blx	r6
 8013e0c:	2800      	cmp	r0, #0
 8013e0e:	dc06      	bgt.n	8013e1e <__sflush_r+0xfe>
 8013e10:	89a3      	ldrh	r3, [r4, #12]
 8013e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e16:	81a3      	strh	r3, [r4, #12]
 8013e18:	f04f 30ff 	mov.w	r0, #4294967295
 8013e1c:	e78e      	b.n	8013d3c <__sflush_r+0x1c>
 8013e1e:	4407      	add	r7, r0
 8013e20:	eba8 0800 	sub.w	r8, r8, r0
 8013e24:	e7e9      	b.n	8013dfa <__sflush_r+0xda>
 8013e26:	bf00      	nop
 8013e28:	20400001 	.word	0x20400001

08013e2c <_fflush_r>:
 8013e2c:	b538      	push	{r3, r4, r5, lr}
 8013e2e:	690b      	ldr	r3, [r1, #16]
 8013e30:	4605      	mov	r5, r0
 8013e32:	460c      	mov	r4, r1
 8013e34:	b913      	cbnz	r3, 8013e3c <_fflush_r+0x10>
 8013e36:	2500      	movs	r5, #0
 8013e38:	4628      	mov	r0, r5
 8013e3a:	bd38      	pop	{r3, r4, r5, pc}
 8013e3c:	b118      	cbz	r0, 8013e46 <_fflush_r+0x1a>
 8013e3e:	6983      	ldr	r3, [r0, #24]
 8013e40:	b90b      	cbnz	r3, 8013e46 <_fflush_r+0x1a>
 8013e42:	f7ff fc27 	bl	8013694 <__sinit>
 8013e46:	4b14      	ldr	r3, [pc, #80]	; (8013e98 <_fflush_r+0x6c>)
 8013e48:	429c      	cmp	r4, r3
 8013e4a:	d11b      	bne.n	8013e84 <_fflush_r+0x58>
 8013e4c:	686c      	ldr	r4, [r5, #4]
 8013e4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d0ef      	beq.n	8013e36 <_fflush_r+0xa>
 8013e56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013e58:	07d0      	lsls	r0, r2, #31
 8013e5a:	d404      	bmi.n	8013e66 <_fflush_r+0x3a>
 8013e5c:	0599      	lsls	r1, r3, #22
 8013e5e:	d402      	bmi.n	8013e66 <_fflush_r+0x3a>
 8013e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e62:	f7ff fcda 	bl	801381a <__retarget_lock_acquire_recursive>
 8013e66:	4628      	mov	r0, r5
 8013e68:	4621      	mov	r1, r4
 8013e6a:	f7ff ff59 	bl	8013d20 <__sflush_r>
 8013e6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e70:	07da      	lsls	r2, r3, #31
 8013e72:	4605      	mov	r5, r0
 8013e74:	d4e0      	bmi.n	8013e38 <_fflush_r+0xc>
 8013e76:	89a3      	ldrh	r3, [r4, #12]
 8013e78:	059b      	lsls	r3, r3, #22
 8013e7a:	d4dd      	bmi.n	8013e38 <_fflush_r+0xc>
 8013e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e7e:	f7ff fccd 	bl	801381c <__retarget_lock_release_recursive>
 8013e82:	e7d9      	b.n	8013e38 <_fflush_r+0xc>
 8013e84:	4b05      	ldr	r3, [pc, #20]	; (8013e9c <_fflush_r+0x70>)
 8013e86:	429c      	cmp	r4, r3
 8013e88:	d101      	bne.n	8013e8e <_fflush_r+0x62>
 8013e8a:	68ac      	ldr	r4, [r5, #8]
 8013e8c:	e7df      	b.n	8013e4e <_fflush_r+0x22>
 8013e8e:	4b04      	ldr	r3, [pc, #16]	; (8013ea0 <_fflush_r+0x74>)
 8013e90:	429c      	cmp	r4, r3
 8013e92:	bf08      	it	eq
 8013e94:	68ec      	ldreq	r4, [r5, #12]
 8013e96:	e7da      	b.n	8013e4e <_fflush_r+0x22>
 8013e98:	08015360 	.word	0x08015360
 8013e9c:	08015380 	.word	0x08015380
 8013ea0:	08015340 	.word	0x08015340

08013ea4 <fiprintf>:
 8013ea4:	b40e      	push	{r1, r2, r3}
 8013ea6:	b503      	push	{r0, r1, lr}
 8013ea8:	4601      	mov	r1, r0
 8013eaa:	ab03      	add	r3, sp, #12
 8013eac:	4805      	ldr	r0, [pc, #20]	; (8013ec4 <fiprintf+0x20>)
 8013eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8013eb2:	6800      	ldr	r0, [r0, #0]
 8013eb4:	9301      	str	r3, [sp, #4]
 8013eb6:	f000 f9ab 	bl	8014210 <_vfiprintf_r>
 8013eba:	b002      	add	sp, #8
 8013ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ec0:	b003      	add	sp, #12
 8013ec2:	4770      	bx	lr
 8013ec4:	200002b0 	.word	0x200002b0

08013ec8 <_lseek_r>:
 8013ec8:	b538      	push	{r3, r4, r5, lr}
 8013eca:	4d07      	ldr	r5, [pc, #28]	; (8013ee8 <_lseek_r+0x20>)
 8013ecc:	4604      	mov	r4, r0
 8013ece:	4608      	mov	r0, r1
 8013ed0:	4611      	mov	r1, r2
 8013ed2:	2200      	movs	r2, #0
 8013ed4:	602a      	str	r2, [r5, #0]
 8013ed6:	461a      	mov	r2, r3
 8013ed8:	f7ee fa32 	bl	8002340 <_lseek>
 8013edc:	1c43      	adds	r3, r0, #1
 8013ede:	d102      	bne.n	8013ee6 <_lseek_r+0x1e>
 8013ee0:	682b      	ldr	r3, [r5, #0]
 8013ee2:	b103      	cbz	r3, 8013ee6 <_lseek_r+0x1e>
 8013ee4:	6023      	str	r3, [r4, #0]
 8013ee6:	bd38      	pop	{r3, r4, r5, pc}
 8013ee8:	2000c5c0 	.word	0x2000c5c0

08013eec <__malloc_lock>:
 8013eec:	4801      	ldr	r0, [pc, #4]	; (8013ef4 <__malloc_lock+0x8>)
 8013eee:	f7ff bc94 	b.w	801381a <__retarget_lock_acquire_recursive>
 8013ef2:	bf00      	nop
 8013ef4:	2000c5b4 	.word	0x2000c5b4

08013ef8 <__malloc_unlock>:
 8013ef8:	4801      	ldr	r0, [pc, #4]	; (8013f00 <__malloc_unlock+0x8>)
 8013efa:	f7ff bc8f 	b.w	801381c <__retarget_lock_release_recursive>
 8013efe:	bf00      	nop
 8013f00:	2000c5b4 	.word	0x2000c5b4

08013f04 <__ssputs_r>:
 8013f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f08:	688e      	ldr	r6, [r1, #8]
 8013f0a:	429e      	cmp	r6, r3
 8013f0c:	4682      	mov	sl, r0
 8013f0e:	460c      	mov	r4, r1
 8013f10:	4690      	mov	r8, r2
 8013f12:	461f      	mov	r7, r3
 8013f14:	d838      	bhi.n	8013f88 <__ssputs_r+0x84>
 8013f16:	898a      	ldrh	r2, [r1, #12]
 8013f18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013f1c:	d032      	beq.n	8013f84 <__ssputs_r+0x80>
 8013f1e:	6825      	ldr	r5, [r4, #0]
 8013f20:	6909      	ldr	r1, [r1, #16]
 8013f22:	eba5 0901 	sub.w	r9, r5, r1
 8013f26:	6965      	ldr	r5, [r4, #20]
 8013f28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013f2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013f30:	3301      	adds	r3, #1
 8013f32:	444b      	add	r3, r9
 8013f34:	106d      	asrs	r5, r5, #1
 8013f36:	429d      	cmp	r5, r3
 8013f38:	bf38      	it	cc
 8013f3a:	461d      	movcc	r5, r3
 8013f3c:	0553      	lsls	r3, r2, #21
 8013f3e:	d531      	bpl.n	8013fa4 <__ssputs_r+0xa0>
 8013f40:	4629      	mov	r1, r5
 8013f42:	f7ff fcff 	bl	8013944 <_malloc_r>
 8013f46:	4606      	mov	r6, r0
 8013f48:	b950      	cbnz	r0, 8013f60 <__ssputs_r+0x5c>
 8013f4a:	230c      	movs	r3, #12
 8013f4c:	f8ca 3000 	str.w	r3, [sl]
 8013f50:	89a3      	ldrh	r3, [r4, #12]
 8013f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f56:	81a3      	strh	r3, [r4, #12]
 8013f58:	f04f 30ff 	mov.w	r0, #4294967295
 8013f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f60:	6921      	ldr	r1, [r4, #16]
 8013f62:	464a      	mov	r2, r9
 8013f64:	f7ff fc6c 	bl	8013840 <memcpy>
 8013f68:	89a3      	ldrh	r3, [r4, #12]
 8013f6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f72:	81a3      	strh	r3, [r4, #12]
 8013f74:	6126      	str	r6, [r4, #16]
 8013f76:	6165      	str	r5, [r4, #20]
 8013f78:	444e      	add	r6, r9
 8013f7a:	eba5 0509 	sub.w	r5, r5, r9
 8013f7e:	6026      	str	r6, [r4, #0]
 8013f80:	60a5      	str	r5, [r4, #8]
 8013f82:	463e      	mov	r6, r7
 8013f84:	42be      	cmp	r6, r7
 8013f86:	d900      	bls.n	8013f8a <__ssputs_r+0x86>
 8013f88:	463e      	mov	r6, r7
 8013f8a:	6820      	ldr	r0, [r4, #0]
 8013f8c:	4632      	mov	r2, r6
 8013f8e:	4641      	mov	r1, r8
 8013f90:	f000 fd40 	bl	8014a14 <memmove>
 8013f94:	68a3      	ldr	r3, [r4, #8]
 8013f96:	1b9b      	subs	r3, r3, r6
 8013f98:	60a3      	str	r3, [r4, #8]
 8013f9a:	6823      	ldr	r3, [r4, #0]
 8013f9c:	4433      	add	r3, r6
 8013f9e:	6023      	str	r3, [r4, #0]
 8013fa0:	2000      	movs	r0, #0
 8013fa2:	e7db      	b.n	8013f5c <__ssputs_r+0x58>
 8013fa4:	462a      	mov	r2, r5
 8013fa6:	f000 fd4f 	bl	8014a48 <_realloc_r>
 8013faa:	4606      	mov	r6, r0
 8013fac:	2800      	cmp	r0, #0
 8013fae:	d1e1      	bne.n	8013f74 <__ssputs_r+0x70>
 8013fb0:	6921      	ldr	r1, [r4, #16]
 8013fb2:	4650      	mov	r0, sl
 8013fb4:	f7ff fc5a 	bl	801386c <_free_r>
 8013fb8:	e7c7      	b.n	8013f4a <__ssputs_r+0x46>
	...

08013fbc <_svfiprintf_r>:
 8013fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fc0:	4698      	mov	r8, r3
 8013fc2:	898b      	ldrh	r3, [r1, #12]
 8013fc4:	061b      	lsls	r3, r3, #24
 8013fc6:	b09d      	sub	sp, #116	; 0x74
 8013fc8:	4607      	mov	r7, r0
 8013fca:	460d      	mov	r5, r1
 8013fcc:	4614      	mov	r4, r2
 8013fce:	d50e      	bpl.n	8013fee <_svfiprintf_r+0x32>
 8013fd0:	690b      	ldr	r3, [r1, #16]
 8013fd2:	b963      	cbnz	r3, 8013fee <_svfiprintf_r+0x32>
 8013fd4:	2140      	movs	r1, #64	; 0x40
 8013fd6:	f7ff fcb5 	bl	8013944 <_malloc_r>
 8013fda:	6028      	str	r0, [r5, #0]
 8013fdc:	6128      	str	r0, [r5, #16]
 8013fde:	b920      	cbnz	r0, 8013fea <_svfiprintf_r+0x2e>
 8013fe0:	230c      	movs	r3, #12
 8013fe2:	603b      	str	r3, [r7, #0]
 8013fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8013fe8:	e0d1      	b.n	801418e <_svfiprintf_r+0x1d2>
 8013fea:	2340      	movs	r3, #64	; 0x40
 8013fec:	616b      	str	r3, [r5, #20]
 8013fee:	2300      	movs	r3, #0
 8013ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8013ff2:	2320      	movs	r3, #32
 8013ff4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ff8:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ffc:	2330      	movs	r3, #48	; 0x30
 8013ffe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80141a8 <_svfiprintf_r+0x1ec>
 8014002:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014006:	f04f 0901 	mov.w	r9, #1
 801400a:	4623      	mov	r3, r4
 801400c:	469a      	mov	sl, r3
 801400e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014012:	b10a      	cbz	r2, 8014018 <_svfiprintf_r+0x5c>
 8014014:	2a25      	cmp	r2, #37	; 0x25
 8014016:	d1f9      	bne.n	801400c <_svfiprintf_r+0x50>
 8014018:	ebba 0b04 	subs.w	fp, sl, r4
 801401c:	d00b      	beq.n	8014036 <_svfiprintf_r+0x7a>
 801401e:	465b      	mov	r3, fp
 8014020:	4622      	mov	r2, r4
 8014022:	4629      	mov	r1, r5
 8014024:	4638      	mov	r0, r7
 8014026:	f7ff ff6d 	bl	8013f04 <__ssputs_r>
 801402a:	3001      	adds	r0, #1
 801402c:	f000 80aa 	beq.w	8014184 <_svfiprintf_r+0x1c8>
 8014030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014032:	445a      	add	r2, fp
 8014034:	9209      	str	r2, [sp, #36]	; 0x24
 8014036:	f89a 3000 	ldrb.w	r3, [sl]
 801403a:	2b00      	cmp	r3, #0
 801403c:	f000 80a2 	beq.w	8014184 <_svfiprintf_r+0x1c8>
 8014040:	2300      	movs	r3, #0
 8014042:	f04f 32ff 	mov.w	r2, #4294967295
 8014046:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801404a:	f10a 0a01 	add.w	sl, sl, #1
 801404e:	9304      	str	r3, [sp, #16]
 8014050:	9307      	str	r3, [sp, #28]
 8014052:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014056:	931a      	str	r3, [sp, #104]	; 0x68
 8014058:	4654      	mov	r4, sl
 801405a:	2205      	movs	r2, #5
 801405c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014060:	4851      	ldr	r0, [pc, #324]	; (80141a8 <_svfiprintf_r+0x1ec>)
 8014062:	f7ec f8cd 	bl	8000200 <memchr>
 8014066:	9a04      	ldr	r2, [sp, #16]
 8014068:	b9d8      	cbnz	r0, 80140a2 <_svfiprintf_r+0xe6>
 801406a:	06d0      	lsls	r0, r2, #27
 801406c:	bf44      	itt	mi
 801406e:	2320      	movmi	r3, #32
 8014070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014074:	0711      	lsls	r1, r2, #28
 8014076:	bf44      	itt	mi
 8014078:	232b      	movmi	r3, #43	; 0x2b
 801407a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801407e:	f89a 3000 	ldrb.w	r3, [sl]
 8014082:	2b2a      	cmp	r3, #42	; 0x2a
 8014084:	d015      	beq.n	80140b2 <_svfiprintf_r+0xf6>
 8014086:	9a07      	ldr	r2, [sp, #28]
 8014088:	4654      	mov	r4, sl
 801408a:	2000      	movs	r0, #0
 801408c:	f04f 0c0a 	mov.w	ip, #10
 8014090:	4621      	mov	r1, r4
 8014092:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014096:	3b30      	subs	r3, #48	; 0x30
 8014098:	2b09      	cmp	r3, #9
 801409a:	d94e      	bls.n	801413a <_svfiprintf_r+0x17e>
 801409c:	b1b0      	cbz	r0, 80140cc <_svfiprintf_r+0x110>
 801409e:	9207      	str	r2, [sp, #28]
 80140a0:	e014      	b.n	80140cc <_svfiprintf_r+0x110>
 80140a2:	eba0 0308 	sub.w	r3, r0, r8
 80140a6:	fa09 f303 	lsl.w	r3, r9, r3
 80140aa:	4313      	orrs	r3, r2
 80140ac:	9304      	str	r3, [sp, #16]
 80140ae:	46a2      	mov	sl, r4
 80140b0:	e7d2      	b.n	8014058 <_svfiprintf_r+0x9c>
 80140b2:	9b03      	ldr	r3, [sp, #12]
 80140b4:	1d19      	adds	r1, r3, #4
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	9103      	str	r1, [sp, #12]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	bfbb      	ittet	lt
 80140be:	425b      	neglt	r3, r3
 80140c0:	f042 0202 	orrlt.w	r2, r2, #2
 80140c4:	9307      	strge	r3, [sp, #28]
 80140c6:	9307      	strlt	r3, [sp, #28]
 80140c8:	bfb8      	it	lt
 80140ca:	9204      	strlt	r2, [sp, #16]
 80140cc:	7823      	ldrb	r3, [r4, #0]
 80140ce:	2b2e      	cmp	r3, #46	; 0x2e
 80140d0:	d10c      	bne.n	80140ec <_svfiprintf_r+0x130>
 80140d2:	7863      	ldrb	r3, [r4, #1]
 80140d4:	2b2a      	cmp	r3, #42	; 0x2a
 80140d6:	d135      	bne.n	8014144 <_svfiprintf_r+0x188>
 80140d8:	9b03      	ldr	r3, [sp, #12]
 80140da:	1d1a      	adds	r2, r3, #4
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	9203      	str	r2, [sp, #12]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	bfb8      	it	lt
 80140e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80140e8:	3402      	adds	r4, #2
 80140ea:	9305      	str	r3, [sp, #20]
 80140ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80141b8 <_svfiprintf_r+0x1fc>
 80140f0:	7821      	ldrb	r1, [r4, #0]
 80140f2:	2203      	movs	r2, #3
 80140f4:	4650      	mov	r0, sl
 80140f6:	f7ec f883 	bl	8000200 <memchr>
 80140fa:	b140      	cbz	r0, 801410e <_svfiprintf_r+0x152>
 80140fc:	2340      	movs	r3, #64	; 0x40
 80140fe:	eba0 000a 	sub.w	r0, r0, sl
 8014102:	fa03 f000 	lsl.w	r0, r3, r0
 8014106:	9b04      	ldr	r3, [sp, #16]
 8014108:	4303      	orrs	r3, r0
 801410a:	3401      	adds	r4, #1
 801410c:	9304      	str	r3, [sp, #16]
 801410e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014112:	4826      	ldr	r0, [pc, #152]	; (80141ac <_svfiprintf_r+0x1f0>)
 8014114:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014118:	2206      	movs	r2, #6
 801411a:	f7ec f871 	bl	8000200 <memchr>
 801411e:	2800      	cmp	r0, #0
 8014120:	d038      	beq.n	8014194 <_svfiprintf_r+0x1d8>
 8014122:	4b23      	ldr	r3, [pc, #140]	; (80141b0 <_svfiprintf_r+0x1f4>)
 8014124:	bb1b      	cbnz	r3, 801416e <_svfiprintf_r+0x1b2>
 8014126:	9b03      	ldr	r3, [sp, #12]
 8014128:	3307      	adds	r3, #7
 801412a:	f023 0307 	bic.w	r3, r3, #7
 801412e:	3308      	adds	r3, #8
 8014130:	9303      	str	r3, [sp, #12]
 8014132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014134:	4433      	add	r3, r6
 8014136:	9309      	str	r3, [sp, #36]	; 0x24
 8014138:	e767      	b.n	801400a <_svfiprintf_r+0x4e>
 801413a:	fb0c 3202 	mla	r2, ip, r2, r3
 801413e:	460c      	mov	r4, r1
 8014140:	2001      	movs	r0, #1
 8014142:	e7a5      	b.n	8014090 <_svfiprintf_r+0xd4>
 8014144:	2300      	movs	r3, #0
 8014146:	3401      	adds	r4, #1
 8014148:	9305      	str	r3, [sp, #20]
 801414a:	4619      	mov	r1, r3
 801414c:	f04f 0c0a 	mov.w	ip, #10
 8014150:	4620      	mov	r0, r4
 8014152:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014156:	3a30      	subs	r2, #48	; 0x30
 8014158:	2a09      	cmp	r2, #9
 801415a:	d903      	bls.n	8014164 <_svfiprintf_r+0x1a8>
 801415c:	2b00      	cmp	r3, #0
 801415e:	d0c5      	beq.n	80140ec <_svfiprintf_r+0x130>
 8014160:	9105      	str	r1, [sp, #20]
 8014162:	e7c3      	b.n	80140ec <_svfiprintf_r+0x130>
 8014164:	fb0c 2101 	mla	r1, ip, r1, r2
 8014168:	4604      	mov	r4, r0
 801416a:	2301      	movs	r3, #1
 801416c:	e7f0      	b.n	8014150 <_svfiprintf_r+0x194>
 801416e:	ab03      	add	r3, sp, #12
 8014170:	9300      	str	r3, [sp, #0]
 8014172:	462a      	mov	r2, r5
 8014174:	4b0f      	ldr	r3, [pc, #60]	; (80141b4 <_svfiprintf_r+0x1f8>)
 8014176:	a904      	add	r1, sp, #16
 8014178:	4638      	mov	r0, r7
 801417a:	f3af 8000 	nop.w
 801417e:	1c42      	adds	r2, r0, #1
 8014180:	4606      	mov	r6, r0
 8014182:	d1d6      	bne.n	8014132 <_svfiprintf_r+0x176>
 8014184:	89ab      	ldrh	r3, [r5, #12]
 8014186:	065b      	lsls	r3, r3, #25
 8014188:	f53f af2c 	bmi.w	8013fe4 <_svfiprintf_r+0x28>
 801418c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801418e:	b01d      	add	sp, #116	; 0x74
 8014190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014194:	ab03      	add	r3, sp, #12
 8014196:	9300      	str	r3, [sp, #0]
 8014198:	462a      	mov	r2, r5
 801419a:	4b06      	ldr	r3, [pc, #24]	; (80141b4 <_svfiprintf_r+0x1f8>)
 801419c:	a904      	add	r1, sp, #16
 801419e:	4638      	mov	r0, r7
 80141a0:	f000 f9d4 	bl	801454c <_printf_i>
 80141a4:	e7eb      	b.n	801417e <_svfiprintf_r+0x1c2>
 80141a6:	bf00      	nop
 80141a8:	08015454 	.word	0x08015454
 80141ac:	0801545e 	.word	0x0801545e
 80141b0:	00000000 	.word	0x00000000
 80141b4:	08013f05 	.word	0x08013f05
 80141b8:	0801545a 	.word	0x0801545a

080141bc <__sfputc_r>:
 80141bc:	6893      	ldr	r3, [r2, #8]
 80141be:	3b01      	subs	r3, #1
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	b410      	push	{r4}
 80141c4:	6093      	str	r3, [r2, #8]
 80141c6:	da08      	bge.n	80141da <__sfputc_r+0x1e>
 80141c8:	6994      	ldr	r4, [r2, #24]
 80141ca:	42a3      	cmp	r3, r4
 80141cc:	db01      	blt.n	80141d2 <__sfputc_r+0x16>
 80141ce:	290a      	cmp	r1, #10
 80141d0:	d103      	bne.n	80141da <__sfputc_r+0x1e>
 80141d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141d6:	f000 baf1 	b.w	80147bc <__swbuf_r>
 80141da:	6813      	ldr	r3, [r2, #0]
 80141dc:	1c58      	adds	r0, r3, #1
 80141de:	6010      	str	r0, [r2, #0]
 80141e0:	7019      	strb	r1, [r3, #0]
 80141e2:	4608      	mov	r0, r1
 80141e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141e8:	4770      	bx	lr

080141ea <__sfputs_r>:
 80141ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141ec:	4606      	mov	r6, r0
 80141ee:	460f      	mov	r7, r1
 80141f0:	4614      	mov	r4, r2
 80141f2:	18d5      	adds	r5, r2, r3
 80141f4:	42ac      	cmp	r4, r5
 80141f6:	d101      	bne.n	80141fc <__sfputs_r+0x12>
 80141f8:	2000      	movs	r0, #0
 80141fa:	e007      	b.n	801420c <__sfputs_r+0x22>
 80141fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014200:	463a      	mov	r2, r7
 8014202:	4630      	mov	r0, r6
 8014204:	f7ff ffda 	bl	80141bc <__sfputc_r>
 8014208:	1c43      	adds	r3, r0, #1
 801420a:	d1f3      	bne.n	80141f4 <__sfputs_r+0xa>
 801420c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014210 <_vfiprintf_r>:
 8014210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014214:	460d      	mov	r5, r1
 8014216:	b09d      	sub	sp, #116	; 0x74
 8014218:	4614      	mov	r4, r2
 801421a:	4698      	mov	r8, r3
 801421c:	4606      	mov	r6, r0
 801421e:	b118      	cbz	r0, 8014228 <_vfiprintf_r+0x18>
 8014220:	6983      	ldr	r3, [r0, #24]
 8014222:	b90b      	cbnz	r3, 8014228 <_vfiprintf_r+0x18>
 8014224:	f7ff fa36 	bl	8013694 <__sinit>
 8014228:	4b89      	ldr	r3, [pc, #548]	; (8014450 <_vfiprintf_r+0x240>)
 801422a:	429d      	cmp	r5, r3
 801422c:	d11b      	bne.n	8014266 <_vfiprintf_r+0x56>
 801422e:	6875      	ldr	r5, [r6, #4]
 8014230:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014232:	07d9      	lsls	r1, r3, #31
 8014234:	d405      	bmi.n	8014242 <_vfiprintf_r+0x32>
 8014236:	89ab      	ldrh	r3, [r5, #12]
 8014238:	059a      	lsls	r2, r3, #22
 801423a:	d402      	bmi.n	8014242 <_vfiprintf_r+0x32>
 801423c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801423e:	f7ff faec 	bl	801381a <__retarget_lock_acquire_recursive>
 8014242:	89ab      	ldrh	r3, [r5, #12]
 8014244:	071b      	lsls	r3, r3, #28
 8014246:	d501      	bpl.n	801424c <_vfiprintf_r+0x3c>
 8014248:	692b      	ldr	r3, [r5, #16]
 801424a:	b9eb      	cbnz	r3, 8014288 <_vfiprintf_r+0x78>
 801424c:	4629      	mov	r1, r5
 801424e:	4630      	mov	r0, r6
 8014250:	f000 fb06 	bl	8014860 <__swsetup_r>
 8014254:	b1c0      	cbz	r0, 8014288 <_vfiprintf_r+0x78>
 8014256:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014258:	07dc      	lsls	r4, r3, #31
 801425a:	d50e      	bpl.n	801427a <_vfiprintf_r+0x6a>
 801425c:	f04f 30ff 	mov.w	r0, #4294967295
 8014260:	b01d      	add	sp, #116	; 0x74
 8014262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014266:	4b7b      	ldr	r3, [pc, #492]	; (8014454 <_vfiprintf_r+0x244>)
 8014268:	429d      	cmp	r5, r3
 801426a:	d101      	bne.n	8014270 <_vfiprintf_r+0x60>
 801426c:	68b5      	ldr	r5, [r6, #8]
 801426e:	e7df      	b.n	8014230 <_vfiprintf_r+0x20>
 8014270:	4b79      	ldr	r3, [pc, #484]	; (8014458 <_vfiprintf_r+0x248>)
 8014272:	429d      	cmp	r5, r3
 8014274:	bf08      	it	eq
 8014276:	68f5      	ldreq	r5, [r6, #12]
 8014278:	e7da      	b.n	8014230 <_vfiprintf_r+0x20>
 801427a:	89ab      	ldrh	r3, [r5, #12]
 801427c:	0598      	lsls	r0, r3, #22
 801427e:	d4ed      	bmi.n	801425c <_vfiprintf_r+0x4c>
 8014280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014282:	f7ff facb 	bl	801381c <__retarget_lock_release_recursive>
 8014286:	e7e9      	b.n	801425c <_vfiprintf_r+0x4c>
 8014288:	2300      	movs	r3, #0
 801428a:	9309      	str	r3, [sp, #36]	; 0x24
 801428c:	2320      	movs	r3, #32
 801428e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014292:	f8cd 800c 	str.w	r8, [sp, #12]
 8014296:	2330      	movs	r3, #48	; 0x30
 8014298:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801445c <_vfiprintf_r+0x24c>
 801429c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80142a0:	f04f 0901 	mov.w	r9, #1
 80142a4:	4623      	mov	r3, r4
 80142a6:	469a      	mov	sl, r3
 80142a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80142ac:	b10a      	cbz	r2, 80142b2 <_vfiprintf_r+0xa2>
 80142ae:	2a25      	cmp	r2, #37	; 0x25
 80142b0:	d1f9      	bne.n	80142a6 <_vfiprintf_r+0x96>
 80142b2:	ebba 0b04 	subs.w	fp, sl, r4
 80142b6:	d00b      	beq.n	80142d0 <_vfiprintf_r+0xc0>
 80142b8:	465b      	mov	r3, fp
 80142ba:	4622      	mov	r2, r4
 80142bc:	4629      	mov	r1, r5
 80142be:	4630      	mov	r0, r6
 80142c0:	f7ff ff93 	bl	80141ea <__sfputs_r>
 80142c4:	3001      	adds	r0, #1
 80142c6:	f000 80aa 	beq.w	801441e <_vfiprintf_r+0x20e>
 80142ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80142cc:	445a      	add	r2, fp
 80142ce:	9209      	str	r2, [sp, #36]	; 0x24
 80142d0:	f89a 3000 	ldrb.w	r3, [sl]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	f000 80a2 	beq.w	801441e <_vfiprintf_r+0x20e>
 80142da:	2300      	movs	r3, #0
 80142dc:	f04f 32ff 	mov.w	r2, #4294967295
 80142e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80142e4:	f10a 0a01 	add.w	sl, sl, #1
 80142e8:	9304      	str	r3, [sp, #16]
 80142ea:	9307      	str	r3, [sp, #28]
 80142ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80142f0:	931a      	str	r3, [sp, #104]	; 0x68
 80142f2:	4654      	mov	r4, sl
 80142f4:	2205      	movs	r2, #5
 80142f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142fa:	4858      	ldr	r0, [pc, #352]	; (801445c <_vfiprintf_r+0x24c>)
 80142fc:	f7eb ff80 	bl	8000200 <memchr>
 8014300:	9a04      	ldr	r2, [sp, #16]
 8014302:	b9d8      	cbnz	r0, 801433c <_vfiprintf_r+0x12c>
 8014304:	06d1      	lsls	r1, r2, #27
 8014306:	bf44      	itt	mi
 8014308:	2320      	movmi	r3, #32
 801430a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801430e:	0713      	lsls	r3, r2, #28
 8014310:	bf44      	itt	mi
 8014312:	232b      	movmi	r3, #43	; 0x2b
 8014314:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014318:	f89a 3000 	ldrb.w	r3, [sl]
 801431c:	2b2a      	cmp	r3, #42	; 0x2a
 801431e:	d015      	beq.n	801434c <_vfiprintf_r+0x13c>
 8014320:	9a07      	ldr	r2, [sp, #28]
 8014322:	4654      	mov	r4, sl
 8014324:	2000      	movs	r0, #0
 8014326:	f04f 0c0a 	mov.w	ip, #10
 801432a:	4621      	mov	r1, r4
 801432c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014330:	3b30      	subs	r3, #48	; 0x30
 8014332:	2b09      	cmp	r3, #9
 8014334:	d94e      	bls.n	80143d4 <_vfiprintf_r+0x1c4>
 8014336:	b1b0      	cbz	r0, 8014366 <_vfiprintf_r+0x156>
 8014338:	9207      	str	r2, [sp, #28]
 801433a:	e014      	b.n	8014366 <_vfiprintf_r+0x156>
 801433c:	eba0 0308 	sub.w	r3, r0, r8
 8014340:	fa09 f303 	lsl.w	r3, r9, r3
 8014344:	4313      	orrs	r3, r2
 8014346:	9304      	str	r3, [sp, #16]
 8014348:	46a2      	mov	sl, r4
 801434a:	e7d2      	b.n	80142f2 <_vfiprintf_r+0xe2>
 801434c:	9b03      	ldr	r3, [sp, #12]
 801434e:	1d19      	adds	r1, r3, #4
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	9103      	str	r1, [sp, #12]
 8014354:	2b00      	cmp	r3, #0
 8014356:	bfbb      	ittet	lt
 8014358:	425b      	neglt	r3, r3
 801435a:	f042 0202 	orrlt.w	r2, r2, #2
 801435e:	9307      	strge	r3, [sp, #28]
 8014360:	9307      	strlt	r3, [sp, #28]
 8014362:	bfb8      	it	lt
 8014364:	9204      	strlt	r2, [sp, #16]
 8014366:	7823      	ldrb	r3, [r4, #0]
 8014368:	2b2e      	cmp	r3, #46	; 0x2e
 801436a:	d10c      	bne.n	8014386 <_vfiprintf_r+0x176>
 801436c:	7863      	ldrb	r3, [r4, #1]
 801436e:	2b2a      	cmp	r3, #42	; 0x2a
 8014370:	d135      	bne.n	80143de <_vfiprintf_r+0x1ce>
 8014372:	9b03      	ldr	r3, [sp, #12]
 8014374:	1d1a      	adds	r2, r3, #4
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	9203      	str	r2, [sp, #12]
 801437a:	2b00      	cmp	r3, #0
 801437c:	bfb8      	it	lt
 801437e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014382:	3402      	adds	r4, #2
 8014384:	9305      	str	r3, [sp, #20]
 8014386:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801446c <_vfiprintf_r+0x25c>
 801438a:	7821      	ldrb	r1, [r4, #0]
 801438c:	2203      	movs	r2, #3
 801438e:	4650      	mov	r0, sl
 8014390:	f7eb ff36 	bl	8000200 <memchr>
 8014394:	b140      	cbz	r0, 80143a8 <_vfiprintf_r+0x198>
 8014396:	2340      	movs	r3, #64	; 0x40
 8014398:	eba0 000a 	sub.w	r0, r0, sl
 801439c:	fa03 f000 	lsl.w	r0, r3, r0
 80143a0:	9b04      	ldr	r3, [sp, #16]
 80143a2:	4303      	orrs	r3, r0
 80143a4:	3401      	adds	r4, #1
 80143a6:	9304      	str	r3, [sp, #16]
 80143a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143ac:	482c      	ldr	r0, [pc, #176]	; (8014460 <_vfiprintf_r+0x250>)
 80143ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80143b2:	2206      	movs	r2, #6
 80143b4:	f7eb ff24 	bl	8000200 <memchr>
 80143b8:	2800      	cmp	r0, #0
 80143ba:	d03f      	beq.n	801443c <_vfiprintf_r+0x22c>
 80143bc:	4b29      	ldr	r3, [pc, #164]	; (8014464 <_vfiprintf_r+0x254>)
 80143be:	bb1b      	cbnz	r3, 8014408 <_vfiprintf_r+0x1f8>
 80143c0:	9b03      	ldr	r3, [sp, #12]
 80143c2:	3307      	adds	r3, #7
 80143c4:	f023 0307 	bic.w	r3, r3, #7
 80143c8:	3308      	adds	r3, #8
 80143ca:	9303      	str	r3, [sp, #12]
 80143cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143ce:	443b      	add	r3, r7
 80143d0:	9309      	str	r3, [sp, #36]	; 0x24
 80143d2:	e767      	b.n	80142a4 <_vfiprintf_r+0x94>
 80143d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80143d8:	460c      	mov	r4, r1
 80143da:	2001      	movs	r0, #1
 80143dc:	e7a5      	b.n	801432a <_vfiprintf_r+0x11a>
 80143de:	2300      	movs	r3, #0
 80143e0:	3401      	adds	r4, #1
 80143e2:	9305      	str	r3, [sp, #20]
 80143e4:	4619      	mov	r1, r3
 80143e6:	f04f 0c0a 	mov.w	ip, #10
 80143ea:	4620      	mov	r0, r4
 80143ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80143f0:	3a30      	subs	r2, #48	; 0x30
 80143f2:	2a09      	cmp	r2, #9
 80143f4:	d903      	bls.n	80143fe <_vfiprintf_r+0x1ee>
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d0c5      	beq.n	8014386 <_vfiprintf_r+0x176>
 80143fa:	9105      	str	r1, [sp, #20]
 80143fc:	e7c3      	b.n	8014386 <_vfiprintf_r+0x176>
 80143fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8014402:	4604      	mov	r4, r0
 8014404:	2301      	movs	r3, #1
 8014406:	e7f0      	b.n	80143ea <_vfiprintf_r+0x1da>
 8014408:	ab03      	add	r3, sp, #12
 801440a:	9300      	str	r3, [sp, #0]
 801440c:	462a      	mov	r2, r5
 801440e:	4b16      	ldr	r3, [pc, #88]	; (8014468 <_vfiprintf_r+0x258>)
 8014410:	a904      	add	r1, sp, #16
 8014412:	4630      	mov	r0, r6
 8014414:	f3af 8000 	nop.w
 8014418:	4607      	mov	r7, r0
 801441a:	1c78      	adds	r0, r7, #1
 801441c:	d1d6      	bne.n	80143cc <_vfiprintf_r+0x1bc>
 801441e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014420:	07d9      	lsls	r1, r3, #31
 8014422:	d405      	bmi.n	8014430 <_vfiprintf_r+0x220>
 8014424:	89ab      	ldrh	r3, [r5, #12]
 8014426:	059a      	lsls	r2, r3, #22
 8014428:	d402      	bmi.n	8014430 <_vfiprintf_r+0x220>
 801442a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801442c:	f7ff f9f6 	bl	801381c <__retarget_lock_release_recursive>
 8014430:	89ab      	ldrh	r3, [r5, #12]
 8014432:	065b      	lsls	r3, r3, #25
 8014434:	f53f af12 	bmi.w	801425c <_vfiprintf_r+0x4c>
 8014438:	9809      	ldr	r0, [sp, #36]	; 0x24
 801443a:	e711      	b.n	8014260 <_vfiprintf_r+0x50>
 801443c:	ab03      	add	r3, sp, #12
 801443e:	9300      	str	r3, [sp, #0]
 8014440:	462a      	mov	r2, r5
 8014442:	4b09      	ldr	r3, [pc, #36]	; (8014468 <_vfiprintf_r+0x258>)
 8014444:	a904      	add	r1, sp, #16
 8014446:	4630      	mov	r0, r6
 8014448:	f000 f880 	bl	801454c <_printf_i>
 801444c:	e7e4      	b.n	8014418 <_vfiprintf_r+0x208>
 801444e:	bf00      	nop
 8014450:	08015360 	.word	0x08015360
 8014454:	08015380 	.word	0x08015380
 8014458:	08015340 	.word	0x08015340
 801445c:	08015454 	.word	0x08015454
 8014460:	0801545e 	.word	0x0801545e
 8014464:	00000000 	.word	0x00000000
 8014468:	080141eb 	.word	0x080141eb
 801446c:	0801545a 	.word	0x0801545a

08014470 <_printf_common>:
 8014470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014474:	4616      	mov	r6, r2
 8014476:	4699      	mov	r9, r3
 8014478:	688a      	ldr	r2, [r1, #8]
 801447a:	690b      	ldr	r3, [r1, #16]
 801447c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014480:	4293      	cmp	r3, r2
 8014482:	bfb8      	it	lt
 8014484:	4613      	movlt	r3, r2
 8014486:	6033      	str	r3, [r6, #0]
 8014488:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801448c:	4607      	mov	r7, r0
 801448e:	460c      	mov	r4, r1
 8014490:	b10a      	cbz	r2, 8014496 <_printf_common+0x26>
 8014492:	3301      	adds	r3, #1
 8014494:	6033      	str	r3, [r6, #0]
 8014496:	6823      	ldr	r3, [r4, #0]
 8014498:	0699      	lsls	r1, r3, #26
 801449a:	bf42      	ittt	mi
 801449c:	6833      	ldrmi	r3, [r6, #0]
 801449e:	3302      	addmi	r3, #2
 80144a0:	6033      	strmi	r3, [r6, #0]
 80144a2:	6825      	ldr	r5, [r4, #0]
 80144a4:	f015 0506 	ands.w	r5, r5, #6
 80144a8:	d106      	bne.n	80144b8 <_printf_common+0x48>
 80144aa:	f104 0a19 	add.w	sl, r4, #25
 80144ae:	68e3      	ldr	r3, [r4, #12]
 80144b0:	6832      	ldr	r2, [r6, #0]
 80144b2:	1a9b      	subs	r3, r3, r2
 80144b4:	42ab      	cmp	r3, r5
 80144b6:	dc26      	bgt.n	8014506 <_printf_common+0x96>
 80144b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80144bc:	1e13      	subs	r3, r2, #0
 80144be:	6822      	ldr	r2, [r4, #0]
 80144c0:	bf18      	it	ne
 80144c2:	2301      	movne	r3, #1
 80144c4:	0692      	lsls	r2, r2, #26
 80144c6:	d42b      	bmi.n	8014520 <_printf_common+0xb0>
 80144c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80144cc:	4649      	mov	r1, r9
 80144ce:	4638      	mov	r0, r7
 80144d0:	47c0      	blx	r8
 80144d2:	3001      	adds	r0, #1
 80144d4:	d01e      	beq.n	8014514 <_printf_common+0xa4>
 80144d6:	6823      	ldr	r3, [r4, #0]
 80144d8:	68e5      	ldr	r5, [r4, #12]
 80144da:	6832      	ldr	r2, [r6, #0]
 80144dc:	f003 0306 	and.w	r3, r3, #6
 80144e0:	2b04      	cmp	r3, #4
 80144e2:	bf08      	it	eq
 80144e4:	1aad      	subeq	r5, r5, r2
 80144e6:	68a3      	ldr	r3, [r4, #8]
 80144e8:	6922      	ldr	r2, [r4, #16]
 80144ea:	bf0c      	ite	eq
 80144ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80144f0:	2500      	movne	r5, #0
 80144f2:	4293      	cmp	r3, r2
 80144f4:	bfc4      	itt	gt
 80144f6:	1a9b      	subgt	r3, r3, r2
 80144f8:	18ed      	addgt	r5, r5, r3
 80144fa:	2600      	movs	r6, #0
 80144fc:	341a      	adds	r4, #26
 80144fe:	42b5      	cmp	r5, r6
 8014500:	d11a      	bne.n	8014538 <_printf_common+0xc8>
 8014502:	2000      	movs	r0, #0
 8014504:	e008      	b.n	8014518 <_printf_common+0xa8>
 8014506:	2301      	movs	r3, #1
 8014508:	4652      	mov	r2, sl
 801450a:	4649      	mov	r1, r9
 801450c:	4638      	mov	r0, r7
 801450e:	47c0      	blx	r8
 8014510:	3001      	adds	r0, #1
 8014512:	d103      	bne.n	801451c <_printf_common+0xac>
 8014514:	f04f 30ff 	mov.w	r0, #4294967295
 8014518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801451c:	3501      	adds	r5, #1
 801451e:	e7c6      	b.n	80144ae <_printf_common+0x3e>
 8014520:	18e1      	adds	r1, r4, r3
 8014522:	1c5a      	adds	r2, r3, #1
 8014524:	2030      	movs	r0, #48	; 0x30
 8014526:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801452a:	4422      	add	r2, r4
 801452c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014530:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014534:	3302      	adds	r3, #2
 8014536:	e7c7      	b.n	80144c8 <_printf_common+0x58>
 8014538:	2301      	movs	r3, #1
 801453a:	4622      	mov	r2, r4
 801453c:	4649      	mov	r1, r9
 801453e:	4638      	mov	r0, r7
 8014540:	47c0      	blx	r8
 8014542:	3001      	adds	r0, #1
 8014544:	d0e6      	beq.n	8014514 <_printf_common+0xa4>
 8014546:	3601      	adds	r6, #1
 8014548:	e7d9      	b.n	80144fe <_printf_common+0x8e>
	...

0801454c <_printf_i>:
 801454c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014550:	7e0f      	ldrb	r7, [r1, #24]
 8014552:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014554:	2f78      	cmp	r7, #120	; 0x78
 8014556:	4691      	mov	r9, r2
 8014558:	4680      	mov	r8, r0
 801455a:	460c      	mov	r4, r1
 801455c:	469a      	mov	sl, r3
 801455e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014562:	d807      	bhi.n	8014574 <_printf_i+0x28>
 8014564:	2f62      	cmp	r7, #98	; 0x62
 8014566:	d80a      	bhi.n	801457e <_printf_i+0x32>
 8014568:	2f00      	cmp	r7, #0
 801456a:	f000 80d8 	beq.w	801471e <_printf_i+0x1d2>
 801456e:	2f58      	cmp	r7, #88	; 0x58
 8014570:	f000 80a3 	beq.w	80146ba <_printf_i+0x16e>
 8014574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014578:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801457c:	e03a      	b.n	80145f4 <_printf_i+0xa8>
 801457e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014582:	2b15      	cmp	r3, #21
 8014584:	d8f6      	bhi.n	8014574 <_printf_i+0x28>
 8014586:	a101      	add	r1, pc, #4	; (adr r1, 801458c <_printf_i+0x40>)
 8014588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801458c:	080145e5 	.word	0x080145e5
 8014590:	080145f9 	.word	0x080145f9
 8014594:	08014575 	.word	0x08014575
 8014598:	08014575 	.word	0x08014575
 801459c:	08014575 	.word	0x08014575
 80145a0:	08014575 	.word	0x08014575
 80145a4:	080145f9 	.word	0x080145f9
 80145a8:	08014575 	.word	0x08014575
 80145ac:	08014575 	.word	0x08014575
 80145b0:	08014575 	.word	0x08014575
 80145b4:	08014575 	.word	0x08014575
 80145b8:	08014705 	.word	0x08014705
 80145bc:	08014629 	.word	0x08014629
 80145c0:	080146e7 	.word	0x080146e7
 80145c4:	08014575 	.word	0x08014575
 80145c8:	08014575 	.word	0x08014575
 80145cc:	08014727 	.word	0x08014727
 80145d0:	08014575 	.word	0x08014575
 80145d4:	08014629 	.word	0x08014629
 80145d8:	08014575 	.word	0x08014575
 80145dc:	08014575 	.word	0x08014575
 80145e0:	080146ef 	.word	0x080146ef
 80145e4:	682b      	ldr	r3, [r5, #0]
 80145e6:	1d1a      	adds	r2, r3, #4
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	602a      	str	r2, [r5, #0]
 80145ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80145f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80145f4:	2301      	movs	r3, #1
 80145f6:	e0a3      	b.n	8014740 <_printf_i+0x1f4>
 80145f8:	6820      	ldr	r0, [r4, #0]
 80145fa:	6829      	ldr	r1, [r5, #0]
 80145fc:	0606      	lsls	r6, r0, #24
 80145fe:	f101 0304 	add.w	r3, r1, #4
 8014602:	d50a      	bpl.n	801461a <_printf_i+0xce>
 8014604:	680e      	ldr	r6, [r1, #0]
 8014606:	602b      	str	r3, [r5, #0]
 8014608:	2e00      	cmp	r6, #0
 801460a:	da03      	bge.n	8014614 <_printf_i+0xc8>
 801460c:	232d      	movs	r3, #45	; 0x2d
 801460e:	4276      	negs	r6, r6
 8014610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014614:	485e      	ldr	r0, [pc, #376]	; (8014790 <_printf_i+0x244>)
 8014616:	230a      	movs	r3, #10
 8014618:	e019      	b.n	801464e <_printf_i+0x102>
 801461a:	680e      	ldr	r6, [r1, #0]
 801461c:	602b      	str	r3, [r5, #0]
 801461e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014622:	bf18      	it	ne
 8014624:	b236      	sxthne	r6, r6
 8014626:	e7ef      	b.n	8014608 <_printf_i+0xbc>
 8014628:	682b      	ldr	r3, [r5, #0]
 801462a:	6820      	ldr	r0, [r4, #0]
 801462c:	1d19      	adds	r1, r3, #4
 801462e:	6029      	str	r1, [r5, #0]
 8014630:	0601      	lsls	r1, r0, #24
 8014632:	d501      	bpl.n	8014638 <_printf_i+0xec>
 8014634:	681e      	ldr	r6, [r3, #0]
 8014636:	e002      	b.n	801463e <_printf_i+0xf2>
 8014638:	0646      	lsls	r6, r0, #25
 801463a:	d5fb      	bpl.n	8014634 <_printf_i+0xe8>
 801463c:	881e      	ldrh	r6, [r3, #0]
 801463e:	4854      	ldr	r0, [pc, #336]	; (8014790 <_printf_i+0x244>)
 8014640:	2f6f      	cmp	r7, #111	; 0x6f
 8014642:	bf0c      	ite	eq
 8014644:	2308      	moveq	r3, #8
 8014646:	230a      	movne	r3, #10
 8014648:	2100      	movs	r1, #0
 801464a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801464e:	6865      	ldr	r5, [r4, #4]
 8014650:	60a5      	str	r5, [r4, #8]
 8014652:	2d00      	cmp	r5, #0
 8014654:	bfa2      	ittt	ge
 8014656:	6821      	ldrge	r1, [r4, #0]
 8014658:	f021 0104 	bicge.w	r1, r1, #4
 801465c:	6021      	strge	r1, [r4, #0]
 801465e:	b90e      	cbnz	r6, 8014664 <_printf_i+0x118>
 8014660:	2d00      	cmp	r5, #0
 8014662:	d04d      	beq.n	8014700 <_printf_i+0x1b4>
 8014664:	4615      	mov	r5, r2
 8014666:	fbb6 f1f3 	udiv	r1, r6, r3
 801466a:	fb03 6711 	mls	r7, r3, r1, r6
 801466e:	5dc7      	ldrb	r7, [r0, r7]
 8014670:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014674:	4637      	mov	r7, r6
 8014676:	42bb      	cmp	r3, r7
 8014678:	460e      	mov	r6, r1
 801467a:	d9f4      	bls.n	8014666 <_printf_i+0x11a>
 801467c:	2b08      	cmp	r3, #8
 801467e:	d10b      	bne.n	8014698 <_printf_i+0x14c>
 8014680:	6823      	ldr	r3, [r4, #0]
 8014682:	07de      	lsls	r6, r3, #31
 8014684:	d508      	bpl.n	8014698 <_printf_i+0x14c>
 8014686:	6923      	ldr	r3, [r4, #16]
 8014688:	6861      	ldr	r1, [r4, #4]
 801468a:	4299      	cmp	r1, r3
 801468c:	bfde      	ittt	le
 801468e:	2330      	movle	r3, #48	; 0x30
 8014690:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014694:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014698:	1b52      	subs	r2, r2, r5
 801469a:	6122      	str	r2, [r4, #16]
 801469c:	f8cd a000 	str.w	sl, [sp]
 80146a0:	464b      	mov	r3, r9
 80146a2:	aa03      	add	r2, sp, #12
 80146a4:	4621      	mov	r1, r4
 80146a6:	4640      	mov	r0, r8
 80146a8:	f7ff fee2 	bl	8014470 <_printf_common>
 80146ac:	3001      	adds	r0, #1
 80146ae:	d14c      	bne.n	801474a <_printf_i+0x1fe>
 80146b0:	f04f 30ff 	mov.w	r0, #4294967295
 80146b4:	b004      	add	sp, #16
 80146b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146ba:	4835      	ldr	r0, [pc, #212]	; (8014790 <_printf_i+0x244>)
 80146bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80146c0:	6829      	ldr	r1, [r5, #0]
 80146c2:	6823      	ldr	r3, [r4, #0]
 80146c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80146c8:	6029      	str	r1, [r5, #0]
 80146ca:	061d      	lsls	r5, r3, #24
 80146cc:	d514      	bpl.n	80146f8 <_printf_i+0x1ac>
 80146ce:	07df      	lsls	r7, r3, #31
 80146d0:	bf44      	itt	mi
 80146d2:	f043 0320 	orrmi.w	r3, r3, #32
 80146d6:	6023      	strmi	r3, [r4, #0]
 80146d8:	b91e      	cbnz	r6, 80146e2 <_printf_i+0x196>
 80146da:	6823      	ldr	r3, [r4, #0]
 80146dc:	f023 0320 	bic.w	r3, r3, #32
 80146e0:	6023      	str	r3, [r4, #0]
 80146e2:	2310      	movs	r3, #16
 80146e4:	e7b0      	b.n	8014648 <_printf_i+0xfc>
 80146e6:	6823      	ldr	r3, [r4, #0]
 80146e8:	f043 0320 	orr.w	r3, r3, #32
 80146ec:	6023      	str	r3, [r4, #0]
 80146ee:	2378      	movs	r3, #120	; 0x78
 80146f0:	4828      	ldr	r0, [pc, #160]	; (8014794 <_printf_i+0x248>)
 80146f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80146f6:	e7e3      	b.n	80146c0 <_printf_i+0x174>
 80146f8:	0659      	lsls	r1, r3, #25
 80146fa:	bf48      	it	mi
 80146fc:	b2b6      	uxthmi	r6, r6
 80146fe:	e7e6      	b.n	80146ce <_printf_i+0x182>
 8014700:	4615      	mov	r5, r2
 8014702:	e7bb      	b.n	801467c <_printf_i+0x130>
 8014704:	682b      	ldr	r3, [r5, #0]
 8014706:	6826      	ldr	r6, [r4, #0]
 8014708:	6961      	ldr	r1, [r4, #20]
 801470a:	1d18      	adds	r0, r3, #4
 801470c:	6028      	str	r0, [r5, #0]
 801470e:	0635      	lsls	r5, r6, #24
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	d501      	bpl.n	8014718 <_printf_i+0x1cc>
 8014714:	6019      	str	r1, [r3, #0]
 8014716:	e002      	b.n	801471e <_printf_i+0x1d2>
 8014718:	0670      	lsls	r0, r6, #25
 801471a:	d5fb      	bpl.n	8014714 <_printf_i+0x1c8>
 801471c:	8019      	strh	r1, [r3, #0]
 801471e:	2300      	movs	r3, #0
 8014720:	6123      	str	r3, [r4, #16]
 8014722:	4615      	mov	r5, r2
 8014724:	e7ba      	b.n	801469c <_printf_i+0x150>
 8014726:	682b      	ldr	r3, [r5, #0]
 8014728:	1d1a      	adds	r2, r3, #4
 801472a:	602a      	str	r2, [r5, #0]
 801472c:	681d      	ldr	r5, [r3, #0]
 801472e:	6862      	ldr	r2, [r4, #4]
 8014730:	2100      	movs	r1, #0
 8014732:	4628      	mov	r0, r5
 8014734:	f7eb fd64 	bl	8000200 <memchr>
 8014738:	b108      	cbz	r0, 801473e <_printf_i+0x1f2>
 801473a:	1b40      	subs	r0, r0, r5
 801473c:	6060      	str	r0, [r4, #4]
 801473e:	6863      	ldr	r3, [r4, #4]
 8014740:	6123      	str	r3, [r4, #16]
 8014742:	2300      	movs	r3, #0
 8014744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014748:	e7a8      	b.n	801469c <_printf_i+0x150>
 801474a:	6923      	ldr	r3, [r4, #16]
 801474c:	462a      	mov	r2, r5
 801474e:	4649      	mov	r1, r9
 8014750:	4640      	mov	r0, r8
 8014752:	47d0      	blx	sl
 8014754:	3001      	adds	r0, #1
 8014756:	d0ab      	beq.n	80146b0 <_printf_i+0x164>
 8014758:	6823      	ldr	r3, [r4, #0]
 801475a:	079b      	lsls	r3, r3, #30
 801475c:	d413      	bmi.n	8014786 <_printf_i+0x23a>
 801475e:	68e0      	ldr	r0, [r4, #12]
 8014760:	9b03      	ldr	r3, [sp, #12]
 8014762:	4298      	cmp	r0, r3
 8014764:	bfb8      	it	lt
 8014766:	4618      	movlt	r0, r3
 8014768:	e7a4      	b.n	80146b4 <_printf_i+0x168>
 801476a:	2301      	movs	r3, #1
 801476c:	4632      	mov	r2, r6
 801476e:	4649      	mov	r1, r9
 8014770:	4640      	mov	r0, r8
 8014772:	47d0      	blx	sl
 8014774:	3001      	adds	r0, #1
 8014776:	d09b      	beq.n	80146b0 <_printf_i+0x164>
 8014778:	3501      	adds	r5, #1
 801477a:	68e3      	ldr	r3, [r4, #12]
 801477c:	9903      	ldr	r1, [sp, #12]
 801477e:	1a5b      	subs	r3, r3, r1
 8014780:	42ab      	cmp	r3, r5
 8014782:	dcf2      	bgt.n	801476a <_printf_i+0x21e>
 8014784:	e7eb      	b.n	801475e <_printf_i+0x212>
 8014786:	2500      	movs	r5, #0
 8014788:	f104 0619 	add.w	r6, r4, #25
 801478c:	e7f5      	b.n	801477a <_printf_i+0x22e>
 801478e:	bf00      	nop
 8014790:	08015465 	.word	0x08015465
 8014794:	08015476 	.word	0x08015476

08014798 <_read_r>:
 8014798:	b538      	push	{r3, r4, r5, lr}
 801479a:	4d07      	ldr	r5, [pc, #28]	; (80147b8 <_read_r+0x20>)
 801479c:	4604      	mov	r4, r0
 801479e:	4608      	mov	r0, r1
 80147a0:	4611      	mov	r1, r2
 80147a2:	2200      	movs	r2, #0
 80147a4:	602a      	str	r2, [r5, #0]
 80147a6:	461a      	mov	r2, r3
 80147a8:	f7ed fd6a 	bl	8002280 <_read>
 80147ac:	1c43      	adds	r3, r0, #1
 80147ae:	d102      	bne.n	80147b6 <_read_r+0x1e>
 80147b0:	682b      	ldr	r3, [r5, #0]
 80147b2:	b103      	cbz	r3, 80147b6 <_read_r+0x1e>
 80147b4:	6023      	str	r3, [r4, #0]
 80147b6:	bd38      	pop	{r3, r4, r5, pc}
 80147b8:	2000c5c0 	.word	0x2000c5c0

080147bc <__swbuf_r>:
 80147bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147be:	460e      	mov	r6, r1
 80147c0:	4614      	mov	r4, r2
 80147c2:	4605      	mov	r5, r0
 80147c4:	b118      	cbz	r0, 80147ce <__swbuf_r+0x12>
 80147c6:	6983      	ldr	r3, [r0, #24]
 80147c8:	b90b      	cbnz	r3, 80147ce <__swbuf_r+0x12>
 80147ca:	f7fe ff63 	bl	8013694 <__sinit>
 80147ce:	4b21      	ldr	r3, [pc, #132]	; (8014854 <__swbuf_r+0x98>)
 80147d0:	429c      	cmp	r4, r3
 80147d2:	d12b      	bne.n	801482c <__swbuf_r+0x70>
 80147d4:	686c      	ldr	r4, [r5, #4]
 80147d6:	69a3      	ldr	r3, [r4, #24]
 80147d8:	60a3      	str	r3, [r4, #8]
 80147da:	89a3      	ldrh	r3, [r4, #12]
 80147dc:	071a      	lsls	r2, r3, #28
 80147de:	d52f      	bpl.n	8014840 <__swbuf_r+0x84>
 80147e0:	6923      	ldr	r3, [r4, #16]
 80147e2:	b36b      	cbz	r3, 8014840 <__swbuf_r+0x84>
 80147e4:	6923      	ldr	r3, [r4, #16]
 80147e6:	6820      	ldr	r0, [r4, #0]
 80147e8:	1ac0      	subs	r0, r0, r3
 80147ea:	6963      	ldr	r3, [r4, #20]
 80147ec:	b2f6      	uxtb	r6, r6
 80147ee:	4283      	cmp	r3, r0
 80147f0:	4637      	mov	r7, r6
 80147f2:	dc04      	bgt.n	80147fe <__swbuf_r+0x42>
 80147f4:	4621      	mov	r1, r4
 80147f6:	4628      	mov	r0, r5
 80147f8:	f7ff fb18 	bl	8013e2c <_fflush_r>
 80147fc:	bb30      	cbnz	r0, 801484c <__swbuf_r+0x90>
 80147fe:	68a3      	ldr	r3, [r4, #8]
 8014800:	3b01      	subs	r3, #1
 8014802:	60a3      	str	r3, [r4, #8]
 8014804:	6823      	ldr	r3, [r4, #0]
 8014806:	1c5a      	adds	r2, r3, #1
 8014808:	6022      	str	r2, [r4, #0]
 801480a:	701e      	strb	r6, [r3, #0]
 801480c:	6963      	ldr	r3, [r4, #20]
 801480e:	3001      	adds	r0, #1
 8014810:	4283      	cmp	r3, r0
 8014812:	d004      	beq.n	801481e <__swbuf_r+0x62>
 8014814:	89a3      	ldrh	r3, [r4, #12]
 8014816:	07db      	lsls	r3, r3, #31
 8014818:	d506      	bpl.n	8014828 <__swbuf_r+0x6c>
 801481a:	2e0a      	cmp	r6, #10
 801481c:	d104      	bne.n	8014828 <__swbuf_r+0x6c>
 801481e:	4621      	mov	r1, r4
 8014820:	4628      	mov	r0, r5
 8014822:	f7ff fb03 	bl	8013e2c <_fflush_r>
 8014826:	b988      	cbnz	r0, 801484c <__swbuf_r+0x90>
 8014828:	4638      	mov	r0, r7
 801482a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801482c:	4b0a      	ldr	r3, [pc, #40]	; (8014858 <__swbuf_r+0x9c>)
 801482e:	429c      	cmp	r4, r3
 8014830:	d101      	bne.n	8014836 <__swbuf_r+0x7a>
 8014832:	68ac      	ldr	r4, [r5, #8]
 8014834:	e7cf      	b.n	80147d6 <__swbuf_r+0x1a>
 8014836:	4b09      	ldr	r3, [pc, #36]	; (801485c <__swbuf_r+0xa0>)
 8014838:	429c      	cmp	r4, r3
 801483a:	bf08      	it	eq
 801483c:	68ec      	ldreq	r4, [r5, #12]
 801483e:	e7ca      	b.n	80147d6 <__swbuf_r+0x1a>
 8014840:	4621      	mov	r1, r4
 8014842:	4628      	mov	r0, r5
 8014844:	f000 f80c 	bl	8014860 <__swsetup_r>
 8014848:	2800      	cmp	r0, #0
 801484a:	d0cb      	beq.n	80147e4 <__swbuf_r+0x28>
 801484c:	f04f 37ff 	mov.w	r7, #4294967295
 8014850:	e7ea      	b.n	8014828 <__swbuf_r+0x6c>
 8014852:	bf00      	nop
 8014854:	08015360 	.word	0x08015360
 8014858:	08015380 	.word	0x08015380
 801485c:	08015340 	.word	0x08015340

08014860 <__swsetup_r>:
 8014860:	4b32      	ldr	r3, [pc, #200]	; (801492c <__swsetup_r+0xcc>)
 8014862:	b570      	push	{r4, r5, r6, lr}
 8014864:	681d      	ldr	r5, [r3, #0]
 8014866:	4606      	mov	r6, r0
 8014868:	460c      	mov	r4, r1
 801486a:	b125      	cbz	r5, 8014876 <__swsetup_r+0x16>
 801486c:	69ab      	ldr	r3, [r5, #24]
 801486e:	b913      	cbnz	r3, 8014876 <__swsetup_r+0x16>
 8014870:	4628      	mov	r0, r5
 8014872:	f7fe ff0f 	bl	8013694 <__sinit>
 8014876:	4b2e      	ldr	r3, [pc, #184]	; (8014930 <__swsetup_r+0xd0>)
 8014878:	429c      	cmp	r4, r3
 801487a:	d10f      	bne.n	801489c <__swsetup_r+0x3c>
 801487c:	686c      	ldr	r4, [r5, #4]
 801487e:	89a3      	ldrh	r3, [r4, #12]
 8014880:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014884:	0719      	lsls	r1, r3, #28
 8014886:	d42c      	bmi.n	80148e2 <__swsetup_r+0x82>
 8014888:	06dd      	lsls	r5, r3, #27
 801488a:	d411      	bmi.n	80148b0 <__swsetup_r+0x50>
 801488c:	2309      	movs	r3, #9
 801488e:	6033      	str	r3, [r6, #0]
 8014890:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014894:	81a3      	strh	r3, [r4, #12]
 8014896:	f04f 30ff 	mov.w	r0, #4294967295
 801489a:	e03e      	b.n	801491a <__swsetup_r+0xba>
 801489c:	4b25      	ldr	r3, [pc, #148]	; (8014934 <__swsetup_r+0xd4>)
 801489e:	429c      	cmp	r4, r3
 80148a0:	d101      	bne.n	80148a6 <__swsetup_r+0x46>
 80148a2:	68ac      	ldr	r4, [r5, #8]
 80148a4:	e7eb      	b.n	801487e <__swsetup_r+0x1e>
 80148a6:	4b24      	ldr	r3, [pc, #144]	; (8014938 <__swsetup_r+0xd8>)
 80148a8:	429c      	cmp	r4, r3
 80148aa:	bf08      	it	eq
 80148ac:	68ec      	ldreq	r4, [r5, #12]
 80148ae:	e7e6      	b.n	801487e <__swsetup_r+0x1e>
 80148b0:	0758      	lsls	r0, r3, #29
 80148b2:	d512      	bpl.n	80148da <__swsetup_r+0x7a>
 80148b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80148b6:	b141      	cbz	r1, 80148ca <__swsetup_r+0x6a>
 80148b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80148bc:	4299      	cmp	r1, r3
 80148be:	d002      	beq.n	80148c6 <__swsetup_r+0x66>
 80148c0:	4630      	mov	r0, r6
 80148c2:	f7fe ffd3 	bl	801386c <_free_r>
 80148c6:	2300      	movs	r3, #0
 80148c8:	6363      	str	r3, [r4, #52]	; 0x34
 80148ca:	89a3      	ldrh	r3, [r4, #12]
 80148cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80148d0:	81a3      	strh	r3, [r4, #12]
 80148d2:	2300      	movs	r3, #0
 80148d4:	6063      	str	r3, [r4, #4]
 80148d6:	6923      	ldr	r3, [r4, #16]
 80148d8:	6023      	str	r3, [r4, #0]
 80148da:	89a3      	ldrh	r3, [r4, #12]
 80148dc:	f043 0308 	orr.w	r3, r3, #8
 80148e0:	81a3      	strh	r3, [r4, #12]
 80148e2:	6923      	ldr	r3, [r4, #16]
 80148e4:	b94b      	cbnz	r3, 80148fa <__swsetup_r+0x9a>
 80148e6:	89a3      	ldrh	r3, [r4, #12]
 80148e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80148ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80148f0:	d003      	beq.n	80148fa <__swsetup_r+0x9a>
 80148f2:	4621      	mov	r1, r4
 80148f4:	4630      	mov	r0, r6
 80148f6:	f000 f84d 	bl	8014994 <__smakebuf_r>
 80148fa:	89a0      	ldrh	r0, [r4, #12]
 80148fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014900:	f010 0301 	ands.w	r3, r0, #1
 8014904:	d00a      	beq.n	801491c <__swsetup_r+0xbc>
 8014906:	2300      	movs	r3, #0
 8014908:	60a3      	str	r3, [r4, #8]
 801490a:	6963      	ldr	r3, [r4, #20]
 801490c:	425b      	negs	r3, r3
 801490e:	61a3      	str	r3, [r4, #24]
 8014910:	6923      	ldr	r3, [r4, #16]
 8014912:	b943      	cbnz	r3, 8014926 <__swsetup_r+0xc6>
 8014914:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014918:	d1ba      	bne.n	8014890 <__swsetup_r+0x30>
 801491a:	bd70      	pop	{r4, r5, r6, pc}
 801491c:	0781      	lsls	r1, r0, #30
 801491e:	bf58      	it	pl
 8014920:	6963      	ldrpl	r3, [r4, #20]
 8014922:	60a3      	str	r3, [r4, #8]
 8014924:	e7f4      	b.n	8014910 <__swsetup_r+0xb0>
 8014926:	2000      	movs	r0, #0
 8014928:	e7f7      	b.n	801491a <__swsetup_r+0xba>
 801492a:	bf00      	nop
 801492c:	200002b0 	.word	0x200002b0
 8014930:	08015360 	.word	0x08015360
 8014934:	08015380 	.word	0x08015380
 8014938:	08015340 	.word	0x08015340

0801493c <abort>:
 801493c:	b508      	push	{r3, lr}
 801493e:	2006      	movs	r0, #6
 8014940:	f000 f8da 	bl	8014af8 <raise>
 8014944:	2001      	movs	r0, #1
 8014946:	f7ed fc91 	bl	800226c <_exit>

0801494a <__swhatbuf_r>:
 801494a:	b570      	push	{r4, r5, r6, lr}
 801494c:	460e      	mov	r6, r1
 801494e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014952:	2900      	cmp	r1, #0
 8014954:	b096      	sub	sp, #88	; 0x58
 8014956:	4614      	mov	r4, r2
 8014958:	461d      	mov	r5, r3
 801495a:	da08      	bge.n	801496e <__swhatbuf_r+0x24>
 801495c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014960:	2200      	movs	r2, #0
 8014962:	602a      	str	r2, [r5, #0]
 8014964:	061a      	lsls	r2, r3, #24
 8014966:	d410      	bmi.n	801498a <__swhatbuf_r+0x40>
 8014968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801496c:	e00e      	b.n	801498c <__swhatbuf_r+0x42>
 801496e:	466a      	mov	r2, sp
 8014970:	f000 f8de 	bl	8014b30 <_fstat_r>
 8014974:	2800      	cmp	r0, #0
 8014976:	dbf1      	blt.n	801495c <__swhatbuf_r+0x12>
 8014978:	9a01      	ldr	r2, [sp, #4]
 801497a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801497e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014982:	425a      	negs	r2, r3
 8014984:	415a      	adcs	r2, r3
 8014986:	602a      	str	r2, [r5, #0]
 8014988:	e7ee      	b.n	8014968 <__swhatbuf_r+0x1e>
 801498a:	2340      	movs	r3, #64	; 0x40
 801498c:	2000      	movs	r0, #0
 801498e:	6023      	str	r3, [r4, #0]
 8014990:	b016      	add	sp, #88	; 0x58
 8014992:	bd70      	pop	{r4, r5, r6, pc}

08014994 <__smakebuf_r>:
 8014994:	898b      	ldrh	r3, [r1, #12]
 8014996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014998:	079d      	lsls	r5, r3, #30
 801499a:	4606      	mov	r6, r0
 801499c:	460c      	mov	r4, r1
 801499e:	d507      	bpl.n	80149b0 <__smakebuf_r+0x1c>
 80149a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80149a4:	6023      	str	r3, [r4, #0]
 80149a6:	6123      	str	r3, [r4, #16]
 80149a8:	2301      	movs	r3, #1
 80149aa:	6163      	str	r3, [r4, #20]
 80149ac:	b002      	add	sp, #8
 80149ae:	bd70      	pop	{r4, r5, r6, pc}
 80149b0:	ab01      	add	r3, sp, #4
 80149b2:	466a      	mov	r2, sp
 80149b4:	f7ff ffc9 	bl	801494a <__swhatbuf_r>
 80149b8:	9900      	ldr	r1, [sp, #0]
 80149ba:	4605      	mov	r5, r0
 80149bc:	4630      	mov	r0, r6
 80149be:	f7fe ffc1 	bl	8013944 <_malloc_r>
 80149c2:	b948      	cbnz	r0, 80149d8 <__smakebuf_r+0x44>
 80149c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149c8:	059a      	lsls	r2, r3, #22
 80149ca:	d4ef      	bmi.n	80149ac <__smakebuf_r+0x18>
 80149cc:	f023 0303 	bic.w	r3, r3, #3
 80149d0:	f043 0302 	orr.w	r3, r3, #2
 80149d4:	81a3      	strh	r3, [r4, #12]
 80149d6:	e7e3      	b.n	80149a0 <__smakebuf_r+0xc>
 80149d8:	4b0d      	ldr	r3, [pc, #52]	; (8014a10 <__smakebuf_r+0x7c>)
 80149da:	62b3      	str	r3, [r6, #40]	; 0x28
 80149dc:	89a3      	ldrh	r3, [r4, #12]
 80149de:	6020      	str	r0, [r4, #0]
 80149e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80149e4:	81a3      	strh	r3, [r4, #12]
 80149e6:	9b00      	ldr	r3, [sp, #0]
 80149e8:	6163      	str	r3, [r4, #20]
 80149ea:	9b01      	ldr	r3, [sp, #4]
 80149ec:	6120      	str	r0, [r4, #16]
 80149ee:	b15b      	cbz	r3, 8014a08 <__smakebuf_r+0x74>
 80149f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80149f4:	4630      	mov	r0, r6
 80149f6:	f000 f8ad 	bl	8014b54 <_isatty_r>
 80149fa:	b128      	cbz	r0, 8014a08 <__smakebuf_r+0x74>
 80149fc:	89a3      	ldrh	r3, [r4, #12]
 80149fe:	f023 0303 	bic.w	r3, r3, #3
 8014a02:	f043 0301 	orr.w	r3, r3, #1
 8014a06:	81a3      	strh	r3, [r4, #12]
 8014a08:	89a0      	ldrh	r0, [r4, #12]
 8014a0a:	4305      	orrs	r5, r0
 8014a0c:	81a5      	strh	r5, [r4, #12]
 8014a0e:	e7cd      	b.n	80149ac <__smakebuf_r+0x18>
 8014a10:	0801362d 	.word	0x0801362d

08014a14 <memmove>:
 8014a14:	4288      	cmp	r0, r1
 8014a16:	b510      	push	{r4, lr}
 8014a18:	eb01 0402 	add.w	r4, r1, r2
 8014a1c:	d902      	bls.n	8014a24 <memmove+0x10>
 8014a1e:	4284      	cmp	r4, r0
 8014a20:	4623      	mov	r3, r4
 8014a22:	d807      	bhi.n	8014a34 <memmove+0x20>
 8014a24:	1e43      	subs	r3, r0, #1
 8014a26:	42a1      	cmp	r1, r4
 8014a28:	d008      	beq.n	8014a3c <memmove+0x28>
 8014a2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014a2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014a32:	e7f8      	b.n	8014a26 <memmove+0x12>
 8014a34:	4402      	add	r2, r0
 8014a36:	4601      	mov	r1, r0
 8014a38:	428a      	cmp	r2, r1
 8014a3a:	d100      	bne.n	8014a3e <memmove+0x2a>
 8014a3c:	bd10      	pop	{r4, pc}
 8014a3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014a42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014a46:	e7f7      	b.n	8014a38 <memmove+0x24>

08014a48 <_realloc_r>:
 8014a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a4c:	4680      	mov	r8, r0
 8014a4e:	4614      	mov	r4, r2
 8014a50:	460e      	mov	r6, r1
 8014a52:	b921      	cbnz	r1, 8014a5e <_realloc_r+0x16>
 8014a54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a58:	4611      	mov	r1, r2
 8014a5a:	f7fe bf73 	b.w	8013944 <_malloc_r>
 8014a5e:	b92a      	cbnz	r2, 8014a6c <_realloc_r+0x24>
 8014a60:	f7fe ff04 	bl	801386c <_free_r>
 8014a64:	4625      	mov	r5, r4
 8014a66:	4628      	mov	r0, r5
 8014a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a6c:	f000 f882 	bl	8014b74 <_malloc_usable_size_r>
 8014a70:	4284      	cmp	r4, r0
 8014a72:	4607      	mov	r7, r0
 8014a74:	d802      	bhi.n	8014a7c <_realloc_r+0x34>
 8014a76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014a7a:	d812      	bhi.n	8014aa2 <_realloc_r+0x5a>
 8014a7c:	4621      	mov	r1, r4
 8014a7e:	4640      	mov	r0, r8
 8014a80:	f7fe ff60 	bl	8013944 <_malloc_r>
 8014a84:	4605      	mov	r5, r0
 8014a86:	2800      	cmp	r0, #0
 8014a88:	d0ed      	beq.n	8014a66 <_realloc_r+0x1e>
 8014a8a:	42bc      	cmp	r4, r7
 8014a8c:	4622      	mov	r2, r4
 8014a8e:	4631      	mov	r1, r6
 8014a90:	bf28      	it	cs
 8014a92:	463a      	movcs	r2, r7
 8014a94:	f7fe fed4 	bl	8013840 <memcpy>
 8014a98:	4631      	mov	r1, r6
 8014a9a:	4640      	mov	r0, r8
 8014a9c:	f7fe fee6 	bl	801386c <_free_r>
 8014aa0:	e7e1      	b.n	8014a66 <_realloc_r+0x1e>
 8014aa2:	4635      	mov	r5, r6
 8014aa4:	e7df      	b.n	8014a66 <_realloc_r+0x1e>

08014aa6 <_raise_r>:
 8014aa6:	291f      	cmp	r1, #31
 8014aa8:	b538      	push	{r3, r4, r5, lr}
 8014aaa:	4604      	mov	r4, r0
 8014aac:	460d      	mov	r5, r1
 8014aae:	d904      	bls.n	8014aba <_raise_r+0x14>
 8014ab0:	2316      	movs	r3, #22
 8014ab2:	6003      	str	r3, [r0, #0]
 8014ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8014ab8:	bd38      	pop	{r3, r4, r5, pc}
 8014aba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014abc:	b112      	cbz	r2, 8014ac4 <_raise_r+0x1e>
 8014abe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014ac2:	b94b      	cbnz	r3, 8014ad8 <_raise_r+0x32>
 8014ac4:	4620      	mov	r0, r4
 8014ac6:	f000 f831 	bl	8014b2c <_getpid_r>
 8014aca:	462a      	mov	r2, r5
 8014acc:	4601      	mov	r1, r0
 8014ace:	4620      	mov	r0, r4
 8014ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014ad4:	f000 b818 	b.w	8014b08 <_kill_r>
 8014ad8:	2b01      	cmp	r3, #1
 8014ada:	d00a      	beq.n	8014af2 <_raise_r+0x4c>
 8014adc:	1c59      	adds	r1, r3, #1
 8014ade:	d103      	bne.n	8014ae8 <_raise_r+0x42>
 8014ae0:	2316      	movs	r3, #22
 8014ae2:	6003      	str	r3, [r0, #0]
 8014ae4:	2001      	movs	r0, #1
 8014ae6:	e7e7      	b.n	8014ab8 <_raise_r+0x12>
 8014ae8:	2400      	movs	r4, #0
 8014aea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014aee:	4628      	mov	r0, r5
 8014af0:	4798      	blx	r3
 8014af2:	2000      	movs	r0, #0
 8014af4:	e7e0      	b.n	8014ab8 <_raise_r+0x12>
	...

08014af8 <raise>:
 8014af8:	4b02      	ldr	r3, [pc, #8]	; (8014b04 <raise+0xc>)
 8014afa:	4601      	mov	r1, r0
 8014afc:	6818      	ldr	r0, [r3, #0]
 8014afe:	f7ff bfd2 	b.w	8014aa6 <_raise_r>
 8014b02:	bf00      	nop
 8014b04:	200002b0 	.word	0x200002b0

08014b08 <_kill_r>:
 8014b08:	b538      	push	{r3, r4, r5, lr}
 8014b0a:	4d07      	ldr	r5, [pc, #28]	; (8014b28 <_kill_r+0x20>)
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	4604      	mov	r4, r0
 8014b10:	4608      	mov	r0, r1
 8014b12:	4611      	mov	r1, r2
 8014b14:	602b      	str	r3, [r5, #0]
 8014b16:	f7ed fb99 	bl	800224c <_kill>
 8014b1a:	1c43      	adds	r3, r0, #1
 8014b1c:	d102      	bne.n	8014b24 <_kill_r+0x1c>
 8014b1e:	682b      	ldr	r3, [r5, #0]
 8014b20:	b103      	cbz	r3, 8014b24 <_kill_r+0x1c>
 8014b22:	6023      	str	r3, [r4, #0]
 8014b24:	bd38      	pop	{r3, r4, r5, pc}
 8014b26:	bf00      	nop
 8014b28:	2000c5c0 	.word	0x2000c5c0

08014b2c <_getpid_r>:
 8014b2c:	f7ed bb86 	b.w	800223c <_getpid>

08014b30 <_fstat_r>:
 8014b30:	b538      	push	{r3, r4, r5, lr}
 8014b32:	4d07      	ldr	r5, [pc, #28]	; (8014b50 <_fstat_r+0x20>)
 8014b34:	2300      	movs	r3, #0
 8014b36:	4604      	mov	r4, r0
 8014b38:	4608      	mov	r0, r1
 8014b3a:	4611      	mov	r1, r2
 8014b3c:	602b      	str	r3, [r5, #0]
 8014b3e:	f7ed fbe4 	bl	800230a <_fstat>
 8014b42:	1c43      	adds	r3, r0, #1
 8014b44:	d102      	bne.n	8014b4c <_fstat_r+0x1c>
 8014b46:	682b      	ldr	r3, [r5, #0]
 8014b48:	b103      	cbz	r3, 8014b4c <_fstat_r+0x1c>
 8014b4a:	6023      	str	r3, [r4, #0]
 8014b4c:	bd38      	pop	{r3, r4, r5, pc}
 8014b4e:	bf00      	nop
 8014b50:	2000c5c0 	.word	0x2000c5c0

08014b54 <_isatty_r>:
 8014b54:	b538      	push	{r3, r4, r5, lr}
 8014b56:	4d06      	ldr	r5, [pc, #24]	; (8014b70 <_isatty_r+0x1c>)
 8014b58:	2300      	movs	r3, #0
 8014b5a:	4604      	mov	r4, r0
 8014b5c:	4608      	mov	r0, r1
 8014b5e:	602b      	str	r3, [r5, #0]
 8014b60:	f7ed fbe3 	bl	800232a <_isatty>
 8014b64:	1c43      	adds	r3, r0, #1
 8014b66:	d102      	bne.n	8014b6e <_isatty_r+0x1a>
 8014b68:	682b      	ldr	r3, [r5, #0]
 8014b6a:	b103      	cbz	r3, 8014b6e <_isatty_r+0x1a>
 8014b6c:	6023      	str	r3, [r4, #0]
 8014b6e:	bd38      	pop	{r3, r4, r5, pc}
 8014b70:	2000c5c0 	.word	0x2000c5c0

08014b74 <_malloc_usable_size_r>:
 8014b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b78:	1f18      	subs	r0, r3, #4
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	bfbc      	itt	lt
 8014b7e:	580b      	ldrlt	r3, [r1, r0]
 8014b80:	18c0      	addlt	r0, r0, r3
 8014b82:	4770      	bx	lr

08014b84 <_init>:
 8014b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b86:	bf00      	nop
 8014b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b8a:	bc08      	pop	{r3}
 8014b8c:	469e      	mov	lr, r3
 8014b8e:	4770      	bx	lr

08014b90 <_fini>:
 8014b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b92:	bf00      	nop
 8014b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b96:	bc08      	pop	{r3}
 8014b98:	469e      	mov	lr, r3
 8014b9a:	4770      	bx	lr
