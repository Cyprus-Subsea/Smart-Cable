
icListen_SD9_USB_R_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017100  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c40  08017290  08017290  00027290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017ed0  08017ed0  00030378  2**0
                  CONTENTS
  4 .ARM          00000008  08017ed0  08017ed0  00027ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017ed8  08017ed8  00030378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017ed8  08017ed8  00027ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017edc  08017edc  00027edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  08017ee0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030378  2**0
                  CONTENTS
 10 .bss          0000e588  20000378  20000378  00030378  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2000e900  2000e900  00030378  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032c44  00000000  00000000  000303a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000074f3  00000000  00000000  00062fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024e0  00000000  00000000  0006a4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002208  00000000  00000000  0006c9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b04c  00000000  00000000  0006ebc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033e4e  00000000  00000000  00099c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dadef  00000000  00000000  000cda62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a8851  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a92c  00000000  00000000  001a88a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000378 	.word	0x20000378
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017278 	.word	0x08017278

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000037c 	.word	0x2000037c
 80001cc:	08017278 	.word	0x08017278

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <IsNotNumber>:
char temp_array[400];
const char* UI_commands_strings[]={"help here\r"};


uint8_t IsNotNumber(char* msg)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 for(int i=0;i<strlen(msg);i++){
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	e010      	b.n	80005d4 <IsNotNumber+0x30>
	 if(msg[i]<0x30||msg[i]>0x39) return 1;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	4413      	add	r3, r2
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b2f      	cmp	r3, #47	; 0x2f
 80005bc:	d905      	bls.n	80005ca <IsNotNumber+0x26>
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	4413      	add	r3, r2
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b39      	cmp	r3, #57	; 0x39
 80005c8:	d901      	bls.n	80005ce <IsNotNumber+0x2a>
 80005ca:	2301      	movs	r3, #1
 80005cc:	e00a      	b.n	80005e4 <IsNotNumber+0x40>
 for(int i=0;i<strlen(msg);i++){
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	3301      	adds	r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f7ff fe05 	bl	80001e4 <strlen>
 80005da:	4602      	mov	r2, r0
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d8e7      	bhi.n	80005b2 <IsNotNumber+0xe>
 }
 return 0;
 80005e2:	2300      	movs	r3, #0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <UI_init>:

void UI_init(UI_typedef* UI_obj)
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b096      	sub	sp, #88	; 0x58
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	UI_messages_init(UI_obj);
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f000 f967 	bl	80008c8 <UI_messages_init>


	osMessageQDef(UI_events_q, 20, uint8_t);
 80005fa:	4b20      	ldr	r3, [pc, #128]	; (800067c <UI_init+0x90>)
 80005fc:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000600:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000602:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->events_q= osMessageCreate(osMessageQ(UI_events_q), NULL);
 8000606:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f011 fbd6 	bl	8011dbe <osMessageCreate>
 8000612:	4602      	mov	r2, r0
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	609a      	str	r2, [r3, #8]

	osMessageQDef(UI_media_rx_q, 20, uint16_t);
 8000618:	4b19      	ldr	r3, [pc, #100]	; (8000680 <UI_init+0x94>)
 800061a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800061e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000620:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->media_rx_messages_q= osMessageCreate(osMessageQ(UI_media_rx_q), NULL);
 8000624:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f011 fbc7 	bl	8011dbe <osMessageCreate>
 8000630:	4602      	mov	r2, r0
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	601a      	str	r2, [r3, #0]

	osMessageQDef(UI_media_tx_q, 200, uint8_t);
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <UI_init+0x98>)
 8000638:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800063c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800063e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->media_tx_q = osMessageCreate(osMessageQ(UI_media_tx_q), NULL);
 8000642:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f011 fbb8 	bl	8011dbe <osMessageCreate>
 800064e:	4602      	mov	r2, r0
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	605a      	str	r2, [r3, #4]

	osThreadDef(UI_task, UI_loop, osPriorityNormal, 0, 256);
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <UI_init+0x9c>)
 8000656:	f107 040c 	add.w	r4, r7, #12
 800065a:	461d      	mov	r5, r3
 800065c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000660:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000664:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(UI_task), UI_obj);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	6879      	ldr	r1, [r7, #4]
 800066e:	4618      	mov	r0, r3
 8000670:	f011 fb45 	bl	8011cfe <osThreadCreate>
}
 8000674:	bf00      	nop
 8000676:	3758      	adds	r7, #88	; 0x58
 8000678:	46bd      	mov	sp, r7
 800067a:	bdb0      	pop	{r4, r5, r7, pc}
 800067c:	080172a4 	.word	0x080172a4
 8000680:	080172b4 	.word	0x080172b4
 8000684:	080172c4 	.word	0x080172c4
 8000688:	080172d4 	.word	0x080172d4

0800068c <UI_loop>:


void UI_loop(UI_typedef* UI_obj)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	 uint16_t msg_indx;
	 for(;;)
	 {
		if(xQueueReceive(UI_obj->media_rx_messages_q,&msg_indx,osWaitForever))
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f107 010a 	add.w	r1, r7, #10
 800069c:	f04f 32ff 	mov.w	r2, #4294967295
 80006a0:	4618      	mov	r0, r3
 80006a2:	f011 fff1 	bl	8012688 <xQueueReceive>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d0f3      	beq.n	8000694 <UI_loop+0x8>
		{   uint8_t* msg=UI_obj->rx_buffer+msg_indx;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	330e      	adds	r3, #14
 80006b0:	897a      	ldrh	r2, [r7, #10]
 80006b2:	4413      	add	r3, r2
 80006b4:	60fb      	str	r3, [r7, #12]
			UI_parse_message(UI_obj,msg);
 80006b6:	68f9      	ldr	r1, [r7, #12]
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f000 f8c7 	bl	800084c <UI_parse_message>
		if(xQueueReceive(UI_obj->media_rx_messages_q,&msg_indx,osWaitForever))
 80006be:	e7e9      	b.n	8000694 <UI_loop+0x8>

080006c0 <UI_media_process_byte>:

}


void UI_media_process_byte(UI_typedef* UI_obj,uint8_t rx_byte)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	70fb      	strb	r3, [r7, #3]
	if(UI_obj->media_status==UI_MEDIA_READY && rx_byte!=0x00)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	7b5b      	ldrb	r3, [r3, #13]
 80006d0:	2b0a      	cmp	r3, #10
 80006d2:	d160      	bne.n	8000796 <UI_media_process_byte+0xd6>
 80006d4:	78fb      	ldrb	r3, [r7, #3]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d05d      	beq.n	8000796 <UI_media_process_byte+0xd6>
	{
		UI_obj->rx_buffer[UI_obj->rx_buffer_indx]=rx_byte;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	461a      	mov	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4413      	add	r3, r2
 80006e8:	78fa      	ldrb	r2, [r7, #3]
 80006ea:	739a      	strb	r2, [r3, #14]
		if(rx_byte=='\r')
 80006ec:	78fb      	ldrb	r3, [r7, #3]
 80006ee:	2b0d      	cmp	r3, #13
 80006f0:	d132      	bne.n	8000758 <UI_media_process_byte+0x98>
		{
			UI_obj->rx_buffer[UI_obj->rx_buffer_indx]=0x00;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	461a      	mov	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4413      	add	r3, r2
 8000700:	2200      	movs	r2, #0
 8000702:	739a      	strb	r2, [r3, #14]
			osMessagePut(UI_obj->media_rx_messages_q,UI_obj->rx_buffer_new_string_indx,0);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6818      	ldr	r0, [r3, #0]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
 800070e:	b29b      	uxth	r3, r3
 8000710:	2200      	movs	r2, #0
 8000712:	4619      	mov	r1, r3
 8000714:	f011 fb7c 	bl	8011e10 <osMessagePut>
			if(UI_obj->rx_buffer_indx>UI_RX_BUFFER_THR) UI_obj->rx_buffer_indx=0;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800071e:	b29b      	uxth	r3, r3
 8000720:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000724:	d907      	bls.n	8000736 <UI_media_process_byte+0x76>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 800072e:	2200      	movs	r2, #0
 8000730:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
 8000734:	e008      	b.n	8000748 <UI_media_process_byte+0x88>
			else  UI_obj->rx_buffer_indx++;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800073c:	b29b      	uxth	r3, r3
 800073e:	3301      	adds	r3, #1
 8000740:	b29a      	uxth	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
			UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800074e:	b29a      	uxth	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
 8000756:	e008      	b.n	800076a <UI_media_process_byte+0xaa>
		}
		else UI_obj->rx_buffer_indx++;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800075e:	b29b      	uxth	r3, r3
 8000760:	3301      	adds	r3, #1
 8000762:	b29a      	uxth	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
		if(UI_obj->rx_buffer_indx==UI_RX_BUFFER_SIZE)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000770:	b29b      	uxth	r3, r3
 8000772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000776:	d11d      	bne.n	80007b4 <UI_media_process_byte+0xf4>
		{
			UI_obj->rx_buffer_indx=0;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2200      	movs	r2, #0
 800077c:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8000780:	2200      	movs	r2, #0
 8000782:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
			UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800078c:	b29a      	uxth	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
		if(UI_obj->rx_buffer_indx==UI_RX_BUFFER_SIZE)
 8000794:	e00e      	b.n	80007b4 <UI_media_process_byte+0xf4>
		}
	}
	else
	{
		UI_obj->rx_buffer_indx=0;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2200      	movs	r2, #0
 800079a:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
		UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
	}
}
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <UI_media_get_byte>:

uint8_t UI_media_get_byte(UI_typedef* UI_obj,uint8_t* tx_byte)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
	osEvent res=osMessageGet(UI_obj->media_tx_q,0);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	6859      	ldr	r1, [r3, #4]
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2200      	movs	r2, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f011 fb5d 	bl	8011e90 <osMessageGet>
	if(res.status==osEventMessage)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	2b10      	cmp	r3, #16
 80007da:	d105      	bne.n	80007e8 <UI_media_get_byte+0x2c>
    {
		*tx_byte=res.value.v;
 80007dc:	693b      	ldr	r3, [r7, #16]
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	701a      	strb	r2, [r3, #0]
		return UI_F_OK;
 80007e4:	2300      	movs	r3, #0
 80007e6:	e000      	b.n	80007ea <UI_media_get_byte+0x2e>
    }
  return UI_F_ERR;
 80007e8:	2301      	movs	r3, #1
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <UI_send_msg>:


void UI_send_msg(UI_typedef* UI_obj,uint8_t cmd_id,void* arg)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	60f8      	str	r0, [r7, #12]
 80007fa:	460b      	mov	r3, r1
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	72fb      	strb	r3, [r7, #11]
 memory_region_pointer*  ptr=arg;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	613b      	str	r3, [r7, #16]

 switch(cmd_id)
 8000804:	7afb      	ldrb	r3, [r7, #11]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d01a      	beq.n	8000840 <UI_send_msg+0x4e>
 800080a:	2b01      	cmp	r3, #1
 800080c:	d000      	beq.n	8000810 <UI_send_msg+0x1e>
		   osMessagePut(UI_obj->media_tx_q,*((uint8_t*)(ptr->start_addr)+i),osWaitForever);
	   }
     break;
 }

}
 800080e:	e018      	b.n	8000842 <UI_send_msg+0x50>
       for(int i=0;i<ptr->size;i++)
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	e00e      	b.n	8000834 <UI_send_msg+0x42>
		   osMessagePut(UI_obj->media_tx_q,*((uint8_t*)(ptr->start_addr)+i),osWaitForever);
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	6858      	ldr	r0, [r3, #4]
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	4413      	add	r3, r2
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	f04f 32ff 	mov.w	r2, #4294967295
 8000828:	4619      	mov	r1, r3
 800082a:	f011 faf1 	bl	8011e10 <osMessagePut>
       for(int i=0;i<ptr->size;i++)
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	3301      	adds	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	685a      	ldr	r2, [r3, #4]
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	429a      	cmp	r2, r3
 800083c:	d8eb      	bhi.n	8000816 <UI_send_msg+0x24>
     break;
 800083e:	e000      	b.n	8000842 <UI_send_msg+0x50>
	 break;
 8000840:	bf00      	nop
}
 8000842:	bf00      	nop
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <UI_parse_message>:
	return UI_F_ERR;
}


int UI_parse_message(UI_typedef* UI_obj,uint8_t* msg)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
 char* pch;
 pch=strtok(msg," ");
 8000856:	4919      	ldr	r1, [pc, #100]	; (80008bc <UI_parse_message+0x70>)
 8000858:	6838      	ldr	r0, [r7, #0]
 800085a:	f014 fdaf 	bl	80153bc <strtok>
 800085e:	60b8      	str	r0, [r7, #8]
 for(int i=0;i<UI_MSG_NUM_OF_FUNCTIONS;i++)
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	e022      	b.n	80008ac <UI_parse_message+0x60>
 {
	  if(strcmp(pch,UI_messages_strings[i])==0)
 8000866:	4a16      	ldr	r2, [pc, #88]	; (80008c0 <UI_parse_message+0x74>)
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800086e:	4619      	mov	r1, r3
 8000870:	68b8      	ldr	r0, [r7, #8]
 8000872:	f7ff fcad 	bl	80001d0 <strcmp>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d114      	bne.n	80008a6 <UI_parse_message+0x5a>
		{
			if(UI_functions[i](UI_obj,pch+strlen(pch)+1)==UI_F_OK) return UI_F_OK;
 800087c:	4a11      	ldr	r2, [pc, #68]	; (80008c4 <UI_parse_message+0x78>)
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000884:	68b8      	ldr	r0, [r7, #8]
 8000886:	f7ff fcad 	bl	80001e4 <strlen>
 800088a:	4603      	mov	r3, r0
 800088c:	3301      	adds	r3, #1
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	4413      	add	r3, r2
 8000892:	4619      	mov	r1, r3
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	47a0      	blx	r4
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d101      	bne.n	80008a2 <UI_parse_message+0x56>
 800089e:	2300      	movs	r3, #0
 80008a0:	e008      	b.n	80008b4 <UI_parse_message+0x68>
      else return UI_F_ERR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e006      	b.n	80008b4 <UI_parse_message+0x68>
 for(int i=0;i<UI_MSG_NUM_OF_FUNCTIONS;i++)
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	3301      	adds	r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	ddd9      	ble.n	8000866 <UI_parse_message+0x1a>
		}

 }
 return UI_F_ERR;
 80008b2:	2301      	movs	r3, #1
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	080172f0 	.word	0x080172f0
 80008c0:	200003a4 	.word	0x200003a4
 80008c4:	20000394 	.word	0x20000394

080008c8 <UI_messages_init>:

void UI_messages_init(UI_typedef* UI_obj)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	UI_functions[UI_MSG_SET] = UI_MSG_SET_f;
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <UI_messages_init+0x44>)
 80008d2:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <UI_messages_init+0x48>)
 80008d4:	601a      	str	r2, [r3, #0]
	UI_functions[UI_MSG_SHOW] = UI_MSG_SHOW_f;
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <UI_messages_init+0x44>)
 80008d8:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <UI_messages_init+0x4c>)
 80008da:	605a      	str	r2, [r3, #4]
	UI_functions[UI_MSG_RESET] = UI_MSG_RESET_f;
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <UI_messages_init+0x44>)
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <UI_messages_init+0x50>)
 80008e0:	609a      	str	r2, [r3, #8]
	UI_functions[UI_MSG_HELP] = UI_MSG_HELP_f;
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <UI_messages_init+0x44>)
 80008e4:	4a0d      	ldr	r2, [pc, #52]	; (800091c <UI_messages_init+0x54>)
 80008e6:	60da      	str	r2, [r3, #12]

	UI_messages_strings[UI_MSG_SET] = "set";
 80008e8:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <UI_messages_init+0x58>)
 80008ea:	4a0e      	ldr	r2, [pc, #56]	; (8000924 <UI_messages_init+0x5c>)
 80008ec:	601a      	str	r2, [r3, #0]
	UI_messages_strings[UI_MSG_SHOW] = "show";
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <UI_messages_init+0x58>)
 80008f0:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <UI_messages_init+0x60>)
 80008f2:	605a      	str	r2, [r3, #4]
	UI_messages_strings[UI_MSG_RESET] = "reset";
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <UI_messages_init+0x58>)
 80008f6:	4a0d      	ldr	r2, [pc, #52]	; (800092c <UI_messages_init+0x64>)
 80008f8:	609a      	str	r2, [r3, #8]
	UI_messages_strings[UI_MSG_HELP] = "help";
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <UI_messages_init+0x58>)
 80008fc:	4a0c      	ldr	r2, [pc, #48]	; (8000930 <UI_messages_init+0x68>)
 80008fe:	60da      	str	r2, [r3, #12]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	20000394 	.word	0x20000394
 8000910:	08000c85 	.word	0x08000c85
 8000914:	08000a85 	.word	0x08000a85
 8000918:	08000965 	.word	0x08000965
 800091c:	08000935 	.word	0x08000935
 8000920:	200003a4 	.word	0x200003a4
 8000924:	080172f4 	.word	0x080172f4
 8000928:	080172f8 	.word	0x080172f8
 800092c:	08017300 	.word	0x08017300
 8000930:	08017308 	.word	0x08017308

08000934 <UI_MSG_HELP_f>:

int UI_MSG_HELP_f(UI_typedef* UI_obj,uint8_t* msg)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
	char * pch;
	memory_region_pointer ptr;

	pch = strtok (NULL," ");//subcomand
 800093e:	4908      	ldr	r1, [pc, #32]	; (8000960 <UI_MSG_HELP_f+0x2c>)
 8000940:	2000      	movs	r0, #0
 8000942:	f014 fd3b 	bl	80153bc <strtok>
 8000946:	6178      	str	r0, [r7, #20]
	osMessagePut(UI_obj->events_q,UI_EVNT_HELP,1);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	2201      	movs	r2, #1
 800094e:	2103      	movs	r1, #3
 8000950:	4618      	mov	r0, r3
 8000952:	f011 fa5d 	bl	8011e10 <osMessagePut>
	return UI_F_OK;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	080172f0 	.word	0x080172f0

08000964 <UI_MSG_RESET_f>:

int UI_MSG_RESET_f(UI_typedef* UI_obj,uint8_t* msg)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
	char * pch;
	memory_region_pointer ptr;

	pch = strtok (NULL," ");//subcomand
 800096e:	493c      	ldr	r1, [pc, #240]	; (8000a60 <UI_MSG_RESET_f+0xfc>)
 8000970:	2000      	movs	r0, #0
 8000972:	f014 fd23 	bl	80153bc <strtok>
 8000976:	6178      	str	r0, [r7, #20]
	if(strcmp(pch,"settings")==0){
 8000978:	493a      	ldr	r1, [pc, #232]	; (8000a64 <UI_MSG_RESET_f+0x100>)
 800097a:	6978      	ldr	r0, [r7, #20]
 800097c:	f7ff fc28 	bl	80001d0 <strcmp>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d135      	bne.n	80009f2 <UI_MSG_RESET_f+0x8e>
		icListen.settings->wav_sample_rate=ICLISTEN_DEFAULT_WAV_SAMPLE_RATE;
 8000986:	4b38      	ldr	r3, [pc, #224]	; (8000a68 <UI_MSG_RESET_f+0x104>)
 8000988:	6a1b      	ldr	r3, [r3, #32]
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
 800098e:	2200      	movs	r2, #0
 8000990:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 8000994:	705a      	strb	r2, [r3, #1]
 8000996:	2200      	movs	r2, #0
 8000998:	709a      	strb	r2, [r3, #2]
 800099a:	2200      	movs	r2, #0
 800099c:	70da      	strb	r2, [r3, #3]
		icListen.settings->wav_sample_bit_depth=ICLISTEN_DEFAULT_WAV_SAMPLE_BIT_DEPTH;
 800099e:	4b32      	ldr	r3, [pc, #200]	; (8000a68 <UI_MSG_RESET_f+0x104>)
 80009a0:	6a1b      	ldr	r3, [r3, #32]
 80009a2:	2200      	movs	r2, #0
 80009a4:	f042 0218 	orr.w	r2, r2, #24
 80009a8:	711a      	strb	r2, [r3, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	715a      	strb	r2, [r3, #5]
 80009ae:	2200      	movs	r2, #0
 80009b0:	719a      	strb	r2, [r3, #6]
 80009b2:	2200      	movs	r2, #0
 80009b4:	71da      	strb	r2, [r3, #7]
		icListen.settings->file_duration=ICLISTEN_DEFAULT_FILE_DURATION;
 80009b6:	4b2c      	ldr	r3, [pc, #176]	; (8000a68 <UI_MSG_RESET_f+0x104>)
 80009b8:	6a1b      	ldr	r3, [r3, #32]
 80009ba:	2200      	movs	r2, #0
 80009bc:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 80009c0:	721a      	strb	r2, [r3, #8]
 80009c2:	2200      	movs	r2, #0
 80009c4:	725a      	strb	r2, [r3, #9]
 80009c6:	2200      	movs	r2, #0
 80009c8:	729a      	strb	r2, [r3, #10]
 80009ca:	2200      	movs	r2, #0
 80009cc:	72da      	strb	r2, [r3, #11]
		icListen.settings->file_index=0;
 80009ce:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <UI_MSG_RESET_f+0x104>)
 80009d0:	6a1b      	ldr	r3, [r3, #32]
 80009d2:	2200      	movs	r2, #0
 80009d4:	731a      	strb	r2, [r3, #12]
 80009d6:	2200      	movs	r2, #0
 80009d8:	735a      	strb	r2, [r3, #13]
 80009da:	2200      	movs	r2, #0
 80009dc:	739a      	strb	r2, [r3, #14]
 80009de:	2200      	movs	r2, #0
 80009e0:	73da      	strb	r2, [r3, #15]
		mcu_flash_save(&mcu_flash);
 80009e2:	4822      	ldr	r0, [pc, #136]	; (8000a6c <UI_MSG_RESET_f+0x108>)
 80009e4:	f001 fe3e 	bl	8002664 <mcu_flash_save>
		sprintf(temp_array,"ok\r");
 80009e8:	4921      	ldr	r1, [pc, #132]	; (8000a70 <UI_MSG_RESET_f+0x10c>)
 80009ea:	4822      	ldr	r0, [pc, #136]	; (8000a74 <UI_MSG_RESET_f+0x110>)
 80009ec:	f014 fc80 	bl	80152f0 <siprintf>
 80009f0:	e01c      	b.n	8000a2c <UI_MSG_RESET_f+0xc8>
	}
	else if(strcmp(pch,"file_index")==0){
 80009f2:	4921      	ldr	r1, [pc, #132]	; (8000a78 <UI_MSG_RESET_f+0x114>)
 80009f4:	6978      	ldr	r0, [r7, #20]
 80009f6:	f7ff fbeb 	bl	80001d0 <strcmp>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d111      	bne.n	8000a24 <UI_MSG_RESET_f+0xc0>
		icListen.settings->file_index=0;
 8000a00:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <UI_MSG_RESET_f+0x104>)
 8000a02:	6a1b      	ldr	r3, [r3, #32]
 8000a04:	2200      	movs	r2, #0
 8000a06:	731a      	strb	r2, [r3, #12]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	735a      	strb	r2, [r3, #13]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	739a      	strb	r2, [r3, #14]
 8000a10:	2200      	movs	r2, #0
 8000a12:	73da      	strb	r2, [r3, #15]
		mcu_flash_save(&mcu_flash);
 8000a14:	4815      	ldr	r0, [pc, #84]	; (8000a6c <UI_MSG_RESET_f+0x108>)
 8000a16:	f001 fe25 	bl	8002664 <mcu_flash_save>
		sprintf(temp_array,"ok\r");
 8000a1a:	4915      	ldr	r1, [pc, #84]	; (8000a70 <UI_MSG_RESET_f+0x10c>)
 8000a1c:	4815      	ldr	r0, [pc, #84]	; (8000a74 <UI_MSG_RESET_f+0x110>)
 8000a1e:	f014 fc67 	bl	80152f0 <siprintf>
 8000a22:	e003      	b.n	8000a2c <UI_MSG_RESET_f+0xc8>
	}
	else{
		sprintf(temp_array,"settings\rfile_index\r");
 8000a24:	4915      	ldr	r1, [pc, #84]	; (8000a7c <UI_MSG_RESET_f+0x118>)
 8000a26:	4813      	ldr	r0, [pc, #76]	; (8000a74 <UI_MSG_RESET_f+0x110>)
 8000a28:	f014 fc62 	bl	80152f0 <siprintf>
	}
	temp_ptr.start_addr=temp_array;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <UI_MSG_RESET_f+0x11c>)
 8000a2e:	4a11      	ldr	r2, [pc, #68]	; (8000a74 <UI_MSG_RESET_f+0x110>)
 8000a30:	601a      	str	r2, [r3, #0]
	temp_ptr.size=strlen(temp_array);
 8000a32:	4810      	ldr	r0, [pc, #64]	; (8000a74 <UI_MSG_RESET_f+0x110>)
 8000a34:	f7ff fbd6 	bl	80001e4 <strlen>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	4a11      	ldr	r2, [pc, #68]	; (8000a80 <UI_MSG_RESET_f+0x11c>)
 8000a3c:	6053      	str	r3, [r2, #4]
	UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000a3e:	4a10      	ldr	r2, [pc, #64]	; (8000a80 <UI_MSG_RESET_f+0x11c>)
 8000a40:	2101      	movs	r1, #1
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff fed5 	bl	80007f2 <UI_send_msg>
	osMessagePut(UI_obj->events_q,UI_EVNT_RESET,1);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2102      	movs	r1, #2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f011 f9dd 	bl	8011e10 <osMessagePut>
	return UI_F_OK;
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	080172f0 	.word	0x080172f0
 8000a64:	08017310 	.word	0x08017310
 8000a68:	20000800 	.word	0x20000800
 8000a6c:	20000e78 	.word	0x20000e78
 8000a70:	0801731c 	.word	0x0801731c
 8000a74:	200003bc 	.word	0x200003bc
 8000a78:	08017320 	.word	0x08017320
 8000a7c:	0801732c 	.word	0x0801732c
 8000a80:	200003b4 	.word	0x200003b4

08000a84 <UI_MSG_SHOW_f>:

int UI_MSG_SHOW_f(UI_typedef* UI_obj,uint8_t* msg)
{
 8000a84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a88:	b095      	sub	sp, #84	; 0x54
 8000a8a:	af0c      	add	r7, sp, #48	; 0x30
 8000a8c:	6178      	str	r0, [r7, #20]
 8000a8e:	6139      	str	r1, [r7, #16]
	char * pch;
	pch = strtok (NULL," ");//subcomand
 8000a90:	496d      	ldr	r1, [pc, #436]	; (8000c48 <UI_MSG_SHOW_f+0x1c4>)
 8000a92:	2000      	movs	r0, #0
 8000a94:	f014 fc92 	bl	80153bc <strtok>
 8000a98:	61b8      	str	r0, [r7, #24]

	if(strcmp(pch,"sensor")==0){
 8000a9a:	496c      	ldr	r1, [pc, #432]	; (8000c4c <UI_MSG_SHOW_f+0x1c8>)
 8000a9c:	69b8      	ldr	r0, [r7, #24]
 8000a9e:	f7ff fb97 	bl	80001d0 <strcmp>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d146      	bne.n	8000b36 <UI_MSG_SHOW_f+0xb2>
                           "Seq err:%d\r"
				           "Misconfig err:%d\r"
				           "Last msg num:%d\r"
				           "File index:%d\r"
				           "Disc free:%d\r"
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000aa8:	4b69      	ldr	r3, [pc, #420]	; (8000c50 <UI_MSG_SHOW_f+0x1cc>)
 8000aaa:	7f1b      	ldrb	r3, [r3, #28]
		sprintf(temp_array,"Device type: %d\r"
 8000aac:	4698      	mov	r8, r3
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000aae:	4b68      	ldr	r3, [pc, #416]	; (8000c50 <UI_MSG_SHOW_f+0x1cc>)
 8000ab0:	881b      	ldrh	r3, [r3, #0]
		sprintf(temp_array,"Device type: %d\r"
 8000ab2:	4699      	mov	r9, r3
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000ab4:	4b66      	ldr	r3, [pc, #408]	; (8000c50 <UI_MSG_SHOW_f+0x1cc>)
 8000ab6:	7f5b      	ldrb	r3, [r3, #29]
		sprintf(temp_array,"Device type: %d\r"
 8000ab8:	60fb      	str	r3, [r7, #12]
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000aba:	4b65      	ldr	r3, [pc, #404]	; (8000c50 <UI_MSG_SHOW_f+0x1cc>)
 8000abc:	6a1b      	ldr	r3, [r3, #32]
		sprintf(temp_array,"Device type: %d\r"
 8000abe:	689b      	ldr	r3, [r3, #8]
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000ac0:	4a63      	ldr	r2, [pc, #396]	; (8000c50 <UI_MSG_SHOW_f+0x1cc>)
 8000ac2:	6a12      	ldr	r2, [r2, #32]
		sprintf(temp_array,"Device type: %d\r"
 8000ac4:	6852      	ldr	r2, [r2, #4]
 8000ac6:	60ba      	str	r2, [r7, #8]
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000ac8:	4961      	ldr	r1, [pc, #388]	; (8000c50 <UI_MSG_SHOW_f+0x1cc>)
 8000aca:	6a09      	ldr	r1, [r1, #32]
		sprintf(temp_array,"Device type: %d\r"
 8000acc:	6809      	ldr	r1, [r1, #0]
 8000ace:	4860      	ldr	r0, [pc, #384]	; (8000c50 <UI_MSG_SHOW_f+0x1cc>)
 8000ad0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8000ad2:	4c5f      	ldr	r4, [pc, #380]	; (8000c50 <UI_MSG_SHOW_f+0x1cc>)
 8000ad4:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8000ad6:	4d5e      	ldr	r5, [pc, #376]	; (8000c50 <UI_MSG_SHOW_f+0x1cc>)
 8000ad8:	6a6d      	ldr	r5, [r5, #36]	; 0x24
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000ada:	4e5d      	ldr	r6, [pc, #372]	; (8000c50 <UI_MSG_SHOW_f+0x1cc>)
 8000adc:	6a36      	ldr	r6, [r6, #32]
		sprintf(temp_array,"Device type: %d\r"
 8000ade:	68f6      	ldr	r6, [r6, #12]
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000ae0:	4a5c      	ldr	r2, [pc, #368]	; (8000c54 <UI_MSG_SHOW_f+0x1d0>)
 8000ae2:	f892 c910 	ldrb.w	ip, [r2, #2320]	; 0x910
 8000ae6:	46e6      	mov	lr, ip
		sprintf(temp_array,"Device type: %d\r"
 8000ae8:	4a5a      	ldr	r2, [pc, #360]	; (8000c54 <UI_MSG_SHOW_f+0x1d0>)
 8000aea:	f44f 7c11 	mov.w	ip, #580	; 0x244
 8000aee:	fb0c fc0e 	mul.w	ip, ip, lr
 8000af2:	4494      	add	ip, r2
 8000af4:	f50c 7c10 	add.w	ip, ip, #576	; 0x240
 8000af8:	f8dc 2000 	ldr.w	r2, [ip]
 8000afc:	607a      	str	r2, [r7, #4]
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000afe:	4a55      	ldr	r2, [pc, #340]	; (8000c54 <UI_MSG_SHOW_f+0x1d0>)
 8000b00:	f892 c910 	ldrb.w	ip, [r2, #2320]	; 0x910
		sprintf(temp_array,"Device type: %d\r"
 8000b04:	4662      	mov	r2, ip
 8000b06:	920b      	str	r2, [sp, #44]	; 0x2c
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	920a      	str	r2, [sp, #40]	; 0x28
 8000b0c:	9609      	str	r6, [sp, #36]	; 0x24
 8000b0e:	9508      	str	r5, [sp, #32]
 8000b10:	9407      	str	r4, [sp, #28]
 8000b12:	9006      	str	r0, [sp, #24]
 8000b14:	9105      	str	r1, [sp, #20]
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	9204      	str	r2, [sp, #16]
 8000b1a:	9303      	str	r3, [sp, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	9302      	str	r3, [sp, #8]
 8000b20:	4b4d      	ldr	r3, [pc, #308]	; (8000c58 <UI_MSG_SHOW_f+0x1d4>)
 8000b22:	9301      	str	r3, [sp, #4]
 8000b24:	4b4d      	ldr	r3, [pc, #308]	; (8000c5c <UI_MSG_SHOW_f+0x1d8>)
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	464b      	mov	r3, r9
 8000b2a:	4642      	mov	r2, r8
 8000b2c:	494c      	ldr	r1, [pc, #304]	; (8000c60 <UI_MSG_SHOW_f+0x1dc>)
 8000b2e:	484d      	ldr	r0, [pc, #308]	; (8000c64 <UI_MSG_SHOW_f+0x1e0>)
 8000b30:	f014 fbde 	bl	80152f0 <siprintf>
 8000b34:	e06c      	b.n	8000c10 <UI_MSG_SHOW_f+0x18c>
	}
	else if(strcmp(pch,"storage")==0){
 8000b36:	494c      	ldr	r1, [pc, #304]	; (8000c68 <UI_MSG_SHOW_f+0x1e4>)
 8000b38:	69b8      	ldr	r0, [r7, #24]
 8000b3a:	f7ff fb49 	bl	80001d0 <strcmp>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d138      	bne.n	8000bb6 <UI_MSG_SHOW_f+0x132>
		temp_array[0]=0x00;
 8000b44:	4b47      	ldr	r3, [pc, #284]	; (8000c64 <UI_MSG_SHOW_f+0x1e0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
 8000b4e:	e02e      	b.n	8000bae <UI_MSG_SHOW_f+0x12a>
		{
		 sprintf(temp_array+strlen(temp_array),"Disk: %d\rStatus: %d\rSize: %d KB\rFree space: %d KB\r",i,microsd_storage.disks[i].status,microsd_storage.disks[i].size,microsd_storage.disks[i].free_space);
 8000b50:	4844      	ldr	r0, [pc, #272]	; (8000c64 <UI_MSG_SHOW_f+0x1e0>)
 8000b52:	f7ff fb47 	bl	80001e4 <strlen>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4a42      	ldr	r2, [pc, #264]	; (8000c64 <UI_MSG_SHOW_f+0x1e0>)
 8000b5a:	1898      	adds	r0, r3, r2
 8000b5c:	4a3d      	ldr	r2, [pc, #244]	; (8000c54 <UI_MSG_SHOW_f+0x1d0>)
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000b64:	fb01 f303 	mul.w	r3, r1, r3
 8000b68:	4413      	add	r3, r2
 8000b6a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461d      	mov	r5, r3
 8000b72:	4a38      	ldr	r2, [pc, #224]	; (8000c54 <UI_MSG_SHOW_f+0x1d0>)
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000b7a:	fb01 f303 	mul.w	r3, r1, r3
 8000b7e:	4413      	add	r3, r2
 8000b80:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4933      	ldr	r1, [pc, #204]	; (8000c54 <UI_MSG_SHOW_f+0x1d0>)
 8000b88:	69fa      	ldr	r2, [r7, #28]
 8000b8a:	f44f 7411 	mov.w	r4, #580	; 0x244
 8000b8e:	fb04 f202 	mul.w	r2, r4, r2
 8000b92:	440a      	add	r2, r1
 8000b94:	f502 7210 	add.w	r2, r2, #576	; 0x240
 8000b98:	6812      	ldr	r2, [r2, #0]
 8000b9a:	9201      	str	r2, [sp, #4]
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	462b      	mov	r3, r5
 8000ba0:	69fa      	ldr	r2, [r7, #28]
 8000ba2:	4932      	ldr	r1, [pc, #200]	; (8000c6c <UI_MSG_SHOW_f+0x1e8>)
 8000ba4:	f014 fba4 	bl	80152f0 <siprintf>
		for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	3301      	adds	r3, #1
 8000bac:	61fb      	str	r3, [r7, #28]
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	2b03      	cmp	r3, #3
 8000bb2:	ddcd      	ble.n	8000b50 <UI_MSG_SHOW_f+0xcc>
 8000bb4:	e02c      	b.n	8000c10 <UI_MSG_SHOW_f+0x18c>
		}
	}
	else if(strcmp(pch,"clock")==0){
 8000bb6:	492e      	ldr	r1, [pc, #184]	; (8000c70 <UI_MSG_SHOW_f+0x1ec>)
 8000bb8:	69b8      	ldr	r0, [r7, #24]
 8000bba:	f7ff fb09 	bl	80001d0 <strcmp>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d121      	bne.n	8000c08 <UI_MSG_SHOW_f+0x184>
		temp_array[0]=0x00;
 8000bc4:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <UI_MSG_SHOW_f+0x1e0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
		read_time(&rtc);
 8000bca:	482a      	ldr	r0, [pc, #168]	; (8000c74 <UI_MSG_SHOW_f+0x1f0>)
 8000bcc:	f001 fdac 	bl	8002728 <read_time>
        sprintf(temp_array,"clock: %02d:%02d:%02d %02d/%02d/%02d\r",rtc.time.Hours,rtc.time.Minutes,rtc.time.Seconds,rtc.date.Date,rtc.date.Month,rtc.date.Year);
 8000bd0:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <UI_MSG_SHOW_f+0x1f0>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	461c      	mov	r4, r3
 8000bd6:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <UI_MSG_SHOW_f+0x1f0>)
 8000bd8:	785b      	ldrb	r3, [r3, #1]
 8000bda:	461d      	mov	r5, r3
 8000bdc:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <UI_MSG_SHOW_f+0x1f0>)
 8000bde:	789b      	ldrb	r3, [r3, #2]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <UI_MSG_SHOW_f+0x1f0>)
 8000be4:	7d9b      	ldrb	r3, [r3, #22]
 8000be6:	4619      	mov	r1, r3
 8000be8:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <UI_MSG_SHOW_f+0x1f0>)
 8000bea:	7d5b      	ldrb	r3, [r3, #21]
 8000bec:	4618      	mov	r0, r3
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <UI_MSG_SHOW_f+0x1f0>)
 8000bf0:	7ddb      	ldrb	r3, [r3, #23]
 8000bf2:	9303      	str	r3, [sp, #12]
 8000bf4:	9002      	str	r0, [sp, #8]
 8000bf6:	9101      	str	r1, [sp, #4]
 8000bf8:	9200      	str	r2, [sp, #0]
 8000bfa:	462b      	mov	r3, r5
 8000bfc:	4622      	mov	r2, r4
 8000bfe:	491e      	ldr	r1, [pc, #120]	; (8000c78 <UI_MSG_SHOW_f+0x1f4>)
 8000c00:	4818      	ldr	r0, [pc, #96]	; (8000c64 <UI_MSG_SHOW_f+0x1e0>)
 8000c02:	f014 fb75 	bl	80152f0 <siprintf>
 8000c06:	e003      	b.n	8000c10 <UI_MSG_SHOW_f+0x18c>
	}
	else{
		sprintf(temp_array,"sensor\rstorage\rclock\r");
 8000c08:	491c      	ldr	r1, [pc, #112]	; (8000c7c <UI_MSG_SHOW_f+0x1f8>)
 8000c0a:	4816      	ldr	r0, [pc, #88]	; (8000c64 <UI_MSG_SHOW_f+0x1e0>)
 8000c0c:	f014 fb70 	bl	80152f0 <siprintf>
	}

	temp_ptr.start_addr=temp_array;
 8000c10:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <UI_MSG_SHOW_f+0x1fc>)
 8000c12:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <UI_MSG_SHOW_f+0x1e0>)
 8000c14:	601a      	str	r2, [r3, #0]
	temp_ptr.size=strlen(temp_array);
 8000c16:	4813      	ldr	r0, [pc, #76]	; (8000c64 <UI_MSG_SHOW_f+0x1e0>)
 8000c18:	f7ff fae4 	bl	80001e4 <strlen>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	4a18      	ldr	r2, [pc, #96]	; (8000c80 <UI_MSG_SHOW_f+0x1fc>)
 8000c20:	6053      	str	r3, [r2, #4]
	UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000c22:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <UI_MSG_SHOW_f+0x1fc>)
 8000c24:	2101      	movs	r1, #1
 8000c26:	6978      	ldr	r0, [r7, #20]
 8000c28:	f7ff fde3 	bl	80007f2 <UI_send_msg>
	osMessagePut(UI_obj->events_q,UI_EVNT_SHOW,1);
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	2201      	movs	r2, #1
 8000c32:	2101      	movs	r1, #1
 8000c34:	4618      	mov	r0, r3
 8000c36:	f011 f8eb 	bl	8011e10 <osMessagePut>
	return UI_F_OK;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3724      	adds	r7, #36	; 0x24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c46:	bf00      	nop
 8000c48:	080172f0 	.word	0x080172f0
 8000c4c:	08017344 	.word	0x08017344
 8000c50:	20000800 	.word	0x20000800
 8000c54:	20000e9c 	.word	0x20000e9c
 8000c58:	2000080a 	.word	0x2000080a
 8000c5c:	20000802 	.word	0x20000802
 8000c60:	0801734c 	.word	0x0801734c
 8000c64:	200003bc 	.word	0x200003bc
 8000c68:	08017424 	.word	0x08017424
 8000c6c:	0801742c 	.word	0x0801742c
 8000c70:	08017460 	.word	0x08017460
 8000c74:	20001b88 	.word	0x20001b88
 8000c78:	08017468 	.word	0x08017468
 8000c7c:	08017490 	.word	0x08017490
 8000c80:	200003b4 	.word	0x200003b4

08000c84 <UI_MSG_SET_f>:




int UI_MSG_SET_f(UI_typedef* UI_obj,uint8_t* msg)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08c      	sub	sp, #48	; 0x30
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
	char *             pch=0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t   sample_rate;
	uint32_t      duration;
	char*            tmpHr=0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
	char*           tmpMin=0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
	char*           tmpSec=0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
	char*           tmpDay=0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
	char*           tmpMon=0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
	char*          tmpYear=0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
	uint32_t             tmp;

	pch = strtok (NULL," ");//subcomand
 8000caa:	4997      	ldr	r1, [pc, #604]	; (8000f08 <UI_MSG_SET_f+0x284>)
 8000cac:	2000      	movs	r0, #0
 8000cae:	f014 fb85 	bl	80153bc <strtok>
 8000cb2:	62f8      	str	r0, [r7, #44]	; 0x2c
	if(strcmp(pch,"clock")==0){
 8000cb4:	4995      	ldr	r1, [pc, #596]	; (8000f0c <UI_MSG_SET_f+0x288>)
 8000cb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000cb8:	f7ff fa8a 	bl	80001d0 <strcmp>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 80cf 	bne.w	8000e62 <UI_MSG_SET_f+0x1de>

	   tmpHr = strtok (NULL,":");//hours
 8000cc4:	4992      	ldr	r1, [pc, #584]	; (8000f10 <UI_MSG_SET_f+0x28c>)
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f014 fb78 	bl	80153bc <strtok>
 8000ccc:	62b8      	str	r0, [r7, #40]	; 0x28
       tmpMin = strtok (NULL,":");//minutes
 8000cce:	4990      	ldr	r1, [pc, #576]	; (8000f10 <UI_MSG_SET_f+0x28c>)
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f014 fb73 	bl	80153bc <strtok>
 8000cd6:	6278      	str	r0, [r7, #36]	; 0x24
       tmpSec = strtok (NULL," ");//seconds
 8000cd8:	498b      	ldr	r1, [pc, #556]	; (8000f08 <UI_MSG_SET_f+0x284>)
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f014 fb6e 	bl	80153bc <strtok>
 8000ce0:	6238      	str	r0, [r7, #32]
	   tmpDay = strtok (NULL,"/");//day
 8000ce2:	498c      	ldr	r1, [pc, #560]	; (8000f14 <UI_MSG_SET_f+0x290>)
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f014 fb69 	bl	80153bc <strtok>
 8000cea:	61f8      	str	r0, [r7, #28]
	   tmpMon = strtok (NULL,"/");//month
 8000cec:	4989      	ldr	r1, [pc, #548]	; (8000f14 <UI_MSG_SET_f+0x290>)
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f014 fb64 	bl	80153bc <strtok>
 8000cf4:	61b8      	str	r0, [r7, #24]
	   tmpYear = strtok (NULL," ");//year
 8000cf6:	4984      	ldr	r1, [pc, #528]	; (8000f08 <UI_MSG_SET_f+0x284>)
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f014 fb5f 	bl	80153bc <strtok>
 8000cfe:	6178      	str	r0, [r7, #20]

	   if(tmpHr==0||tmpMin==0||tmpSec==0||tmpDay==0||tmpMon==0||tmpYear==0) sprintf(temp_array,"syntax error\r");
 8000d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d00e      	beq.n	8000d24 <UI_MSG_SET_f+0xa0>
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d00b      	beq.n	8000d24 <UI_MSG_SET_f+0xa0>
 8000d0c:	6a3b      	ldr	r3, [r7, #32]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d008      	beq.n	8000d24 <UI_MSG_SET_f+0xa0>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d005      	beq.n	8000d24 <UI_MSG_SET_f+0xa0>
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d002      	beq.n	8000d24 <UI_MSG_SET_f+0xa0>
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d104      	bne.n	8000d2e <UI_MSG_SET_f+0xaa>
 8000d24:	497c      	ldr	r1, [pc, #496]	; (8000f18 <UI_MSG_SET_f+0x294>)
 8000d26:	487d      	ldr	r0, [pc, #500]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000d28:	f014 fae2 	bl	80152f0 <siprintf>
 8000d2c:	e14a      	b.n	8000fc4 <UI_MSG_SET_f+0x340>
	   else{
		   if(IsNotNumber(tmpHr)||IsNotNumber(tmpMin)||IsNotNumber(tmpSec)||IsNotNumber(tmpDay)||IsNotNumber(tmpMon)||IsNotNumber(tmpYear)) sprintf(temp_array,"syntax error\r");
 8000d2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d30:	f7ff fc38 	bl	80005a4 <IsNotNumber>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d11d      	bne.n	8000d76 <UI_MSG_SET_f+0xf2>
 8000d3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d3c:	f7ff fc32 	bl	80005a4 <IsNotNumber>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d117      	bne.n	8000d76 <UI_MSG_SET_f+0xf2>
 8000d46:	6a38      	ldr	r0, [r7, #32]
 8000d48:	f7ff fc2c 	bl	80005a4 <IsNotNumber>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d111      	bne.n	8000d76 <UI_MSG_SET_f+0xf2>
 8000d52:	69f8      	ldr	r0, [r7, #28]
 8000d54:	f7ff fc26 	bl	80005a4 <IsNotNumber>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d10b      	bne.n	8000d76 <UI_MSG_SET_f+0xf2>
 8000d5e:	69b8      	ldr	r0, [r7, #24]
 8000d60:	f7ff fc20 	bl	80005a4 <IsNotNumber>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d105      	bne.n	8000d76 <UI_MSG_SET_f+0xf2>
 8000d6a:	6978      	ldr	r0, [r7, #20]
 8000d6c:	f7ff fc1a 	bl	80005a4 <IsNotNumber>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d004      	beq.n	8000d80 <UI_MSG_SET_f+0xfc>
 8000d76:	4968      	ldr	r1, [pc, #416]	; (8000f18 <UI_MSG_SET_f+0x294>)
 8000d78:	4868      	ldr	r0, [pc, #416]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000d7a:	f014 fab9 	bl	80152f0 <siprintf>
 8000d7e:	e121      	b.n	8000fc4 <UI_MSG_SET_f+0x340>
		   else{
            tmp=atol(tmpHr);
 8000d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d82:	f013 fd99 	bl	80148b8 <atol>
 8000d86:	4603      	mov	r3, r0
 8000d88:	60bb      	str	r3, [r7, #8]
            if(tmp>23) sprintf(temp_array,"syntax error\r");
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	2b17      	cmp	r3, #23
 8000d8e:	d904      	bls.n	8000d9a <UI_MSG_SET_f+0x116>
 8000d90:	4961      	ldr	r1, [pc, #388]	; (8000f18 <UI_MSG_SET_f+0x294>)
 8000d92:	4862      	ldr	r0, [pc, #392]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000d94:	f014 faac 	bl	80152f0 <siprintf>
 8000d98:	e114      	b.n	8000fc4 <UI_MSG_SET_f+0x340>
            else{
              rtc.time.Hours=tmp;
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4b60      	ldr	r3, [pc, #384]	; (8000f20 <UI_MSG_SET_f+0x29c>)
 8000da0:	701a      	strb	r2, [r3, #0]
              tmp=atol(tmpMin);
 8000da2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000da4:	f013 fd88 	bl	80148b8 <atol>
 8000da8:	4603      	mov	r3, r0
 8000daa:	60bb      	str	r3, [r7, #8]
              if(tmp>59) sprintf(temp_array,"syntax error\r");
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	2b3b      	cmp	r3, #59	; 0x3b
 8000db0:	d904      	bls.n	8000dbc <UI_MSG_SET_f+0x138>
 8000db2:	4959      	ldr	r1, [pc, #356]	; (8000f18 <UI_MSG_SET_f+0x294>)
 8000db4:	4859      	ldr	r0, [pc, #356]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000db6:	f014 fa9b 	bl	80152f0 <siprintf>
 8000dba:	e103      	b.n	8000fc4 <UI_MSG_SET_f+0x340>
              else{
  			    rtc.time.Minutes=tmp;
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	4b57      	ldr	r3, [pc, #348]	; (8000f20 <UI_MSG_SET_f+0x29c>)
 8000dc2:	705a      	strb	r2, [r3, #1]
  			    tmp=atol(tmpSec);
 8000dc4:	6a38      	ldr	r0, [r7, #32]
 8000dc6:	f013 fd77 	bl	80148b8 <atol>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	60bb      	str	r3, [r7, #8]
                if(tmp>59) sprintf(temp_array,"syntax error\r");
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	2b3b      	cmp	r3, #59	; 0x3b
 8000dd2:	d904      	bls.n	8000dde <UI_MSG_SET_f+0x15a>
 8000dd4:	4950      	ldr	r1, [pc, #320]	; (8000f18 <UI_MSG_SET_f+0x294>)
 8000dd6:	4851      	ldr	r0, [pc, #324]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000dd8:	f014 fa8a 	bl	80152f0 <siprintf>
 8000ddc:	e0f2      	b.n	8000fc4 <UI_MSG_SET_f+0x340>
                else{
  			       rtc.time.Seconds=tmp;
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4b4f      	ldr	r3, [pc, #316]	; (8000f20 <UI_MSG_SET_f+0x29c>)
 8000de4:	709a      	strb	r2, [r3, #2]
  			       tmp=atol(tmpDay);
 8000de6:	69f8      	ldr	r0, [r7, #28]
 8000de8:	f013 fd66 	bl	80148b8 <atol>
 8000dec:	4603      	mov	r3, r0
 8000dee:	60bb      	str	r3, [r7, #8]
  	               if(tmp>31) sprintf(temp_array,"syntax error\r");
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	2b1f      	cmp	r3, #31
 8000df4:	d904      	bls.n	8000e00 <UI_MSG_SET_f+0x17c>
 8000df6:	4948      	ldr	r1, [pc, #288]	; (8000f18 <UI_MSG_SET_f+0x294>)
 8000df8:	4848      	ldr	r0, [pc, #288]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000dfa:	f014 fa79 	bl	80152f0 <siprintf>
 8000dfe:	e0e1      	b.n	8000fc4 <UI_MSG_SET_f+0x340>
  	               else{
  			         rtc.date.Date=tmp;
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	4b46      	ldr	r3, [pc, #280]	; (8000f20 <UI_MSG_SET_f+0x29c>)
 8000e06:	759a      	strb	r2, [r3, #22]
  			         tmp=atol(tmpMon);
 8000e08:	69b8      	ldr	r0, [r7, #24]
 8000e0a:	f013 fd55 	bl	80148b8 <atol>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	60bb      	str	r3, [r7, #8]
  	                 if(tmp>12) sprintf(temp_array,"syntax error\r");
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	2b0c      	cmp	r3, #12
 8000e16:	d904      	bls.n	8000e22 <UI_MSG_SET_f+0x19e>
 8000e18:	493f      	ldr	r1, [pc, #252]	; (8000f18 <UI_MSG_SET_f+0x294>)
 8000e1a:	4840      	ldr	r0, [pc, #256]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000e1c:	f014 fa68 	bl	80152f0 <siprintf>
 8000e20:	e0d0      	b.n	8000fc4 <UI_MSG_SET_f+0x340>
  	                 else{
  			           rtc.date.Month=tmp;
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4b3e      	ldr	r3, [pc, #248]	; (8000f20 <UI_MSG_SET_f+0x29c>)
 8000e28:	755a      	strb	r2, [r3, #21]
    			       tmp=atol(tmpYear);
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f013 fd44 	bl	80148b8 <atol>
 8000e30:	4603      	mov	r3, r0
 8000e32:	60bb      	str	r3, [r7, #8]
    	               if(tmp>99) sprintf(temp_array,"syntax error\r");
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	2b63      	cmp	r3, #99	; 0x63
 8000e38:	d904      	bls.n	8000e44 <UI_MSG_SET_f+0x1c0>
 8000e3a:	4937      	ldr	r1, [pc, #220]	; (8000f18 <UI_MSG_SET_f+0x294>)
 8000e3c:	4837      	ldr	r0, [pc, #220]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000e3e:	f014 fa57 	bl	80152f0 <siprintf>
 8000e42:	e0bf      	b.n	8000fc4 <UI_MSG_SET_f+0x340>
    	               else{
  			             rtc.date.Year=tmp;
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	4b35      	ldr	r3, [pc, #212]	; (8000f20 <UI_MSG_SET_f+0x29c>)
 8000e4a:	75da      	strb	r2, [r3, #23]

  			             rtc.date.WeekDay=RTC_WEEKDAY_MONDAY;
 8000e4c:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <UI_MSG_SET_f+0x29c>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	751a      	strb	r2, [r3, #20]
  			             set_time(&rtc);
 8000e52:	4833      	ldr	r0, [pc, #204]	; (8000f20 <UI_MSG_SET_f+0x29c>)
 8000e54:	f001 fca2 	bl	800279c <set_time>
  			             sprintf(temp_array,"ok\r");
 8000e58:	4932      	ldr	r1, [pc, #200]	; (8000f24 <UI_MSG_SET_f+0x2a0>)
 8000e5a:	4830      	ldr	r0, [pc, #192]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000e5c:	f014 fa48 	bl	80152f0 <siprintf>
 8000e60:	e0b0      	b.n	8000fc4 <UI_MSG_SET_f+0x340>
              }
            }
		   }
	   }
	}
	else if(strcmp(pch,"rate")==0){
 8000e62:	4931      	ldr	r1, [pc, #196]	; (8000f28 <UI_MSG_SET_f+0x2a4>)
 8000e64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e66:	f7ff f9b3 	bl	80001d0 <strcmp>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d169      	bne.n	8000f44 <UI_MSG_SET_f+0x2c0>
		pch = strtok (NULL," ");//rate
 8000e70:	4925      	ldr	r1, [pc, #148]	; (8000f08 <UI_MSG_SET_f+0x284>)
 8000e72:	2000      	movs	r0, #0
 8000e74:	f014 faa2 	bl	80153bc <strtok>
 8000e78:	62f8      	str	r0, [r7, #44]	; 0x2c
		if(IsNotNumber(pch)) sprintf(temp_array,"syntax error\r");
 8000e7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e7c:	f7ff fb92 	bl	80005a4 <IsNotNumber>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d004      	beq.n	8000e90 <UI_MSG_SET_f+0x20c>
 8000e86:	4924      	ldr	r1, [pc, #144]	; (8000f18 <UI_MSG_SET_f+0x294>)
 8000e88:	4824      	ldr	r0, [pc, #144]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000e8a:	f014 fa31 	bl	80152f0 <siprintf>
 8000e8e:	e099      	b.n	8000fc4 <UI_MSG_SET_f+0x340>
		else{
		  sample_rate=atol(pch);
 8000e90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e92:	f013 fd11 	bl	80148b8 <atol>
 8000e96:	4603      	mov	r3, r0
 8000e98:	60fb      	str	r3, [r7, #12]
		  if(sample_rate==4000 || sample_rate==8000 || sample_rate==16000 || sample_rate==32000 || sample_rate==48000 || sample_rate==96000 || sample_rate==120000 || sample_rate==240000 || sample_rate==480000){
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000ea0:	d020      	beq.n	8000ee4 <UI_MSG_SET_f+0x260>
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000ea8:	d01c      	beq.n	8000ee4 <UI_MSG_SET_f+0x260>
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000eb0:	d018      	beq.n	8000ee4 <UI_MSG_SET_f+0x260>
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000eb8:	d014      	beq.n	8000ee4 <UI_MSG_SET_f+0x260>
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d00f      	beq.n	8000ee4 <UI_MSG_SET_f+0x260>
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4a19      	ldr	r2, [pc, #100]	; (8000f2c <UI_MSG_SET_f+0x2a8>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d00b      	beq.n	8000ee4 <UI_MSG_SET_f+0x260>
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4a18      	ldr	r2, [pc, #96]	; (8000f30 <UI_MSG_SET_f+0x2ac>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d007      	beq.n	8000ee4 <UI_MSG_SET_f+0x260>
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4a17      	ldr	r2, [pc, #92]	; (8000f34 <UI_MSG_SET_f+0x2b0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d003      	beq.n	8000ee4 <UI_MSG_SET_f+0x260>
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4a16      	ldr	r2, [pc, #88]	; (8000f38 <UI_MSG_SET_f+0x2b4>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d10b      	bne.n	8000efc <UI_MSG_SET_f+0x278>
           icListen.settings->wav_sample_rate=sample_rate;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <UI_MSG_SET_f+0x2b8>)
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	601a      	str	r2, [r3, #0]
           mcu_flash_save(&mcu_flash);
 8000eec:	4814      	ldr	r0, [pc, #80]	; (8000f40 <UI_MSG_SET_f+0x2bc>)
 8000eee:	f001 fbb9 	bl	8002664 <mcu_flash_save>
           sprintf(temp_array,"ok\r");
 8000ef2:	490c      	ldr	r1, [pc, #48]	; (8000f24 <UI_MSG_SET_f+0x2a0>)
 8000ef4:	4809      	ldr	r0, [pc, #36]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000ef6:	f014 f9fb 	bl	80152f0 <siprintf>
 8000efa:	e063      	b.n	8000fc4 <UI_MSG_SET_f+0x340>
		  }
		  else sprintf(temp_array,"syntax error\r");
 8000efc:	4906      	ldr	r1, [pc, #24]	; (8000f18 <UI_MSG_SET_f+0x294>)
 8000efe:	4807      	ldr	r0, [pc, #28]	; (8000f1c <UI_MSG_SET_f+0x298>)
 8000f00:	f014 f9f6 	bl	80152f0 <siprintf>
 8000f04:	e05e      	b.n	8000fc4 <UI_MSG_SET_f+0x340>
 8000f06:	bf00      	nop
 8000f08:	080172f0 	.word	0x080172f0
 8000f0c:	08017460 	.word	0x08017460
 8000f10:	080174a8 	.word	0x080174a8
 8000f14:	080174ac 	.word	0x080174ac
 8000f18:	080174b0 	.word	0x080174b0
 8000f1c:	200003bc 	.word	0x200003bc
 8000f20:	20001b88 	.word	0x20001b88
 8000f24:	0801731c 	.word	0x0801731c
 8000f28:	080174c0 	.word	0x080174c0
 8000f2c:	00017700 	.word	0x00017700
 8000f30:	0001d4c0 	.word	0x0001d4c0
 8000f34:	0003a980 	.word	0x0003a980
 8000f38:	00075300 	.word	0x00075300
 8000f3c:	20000800 	.word	0x20000800
 8000f40:	20000e78 	.word	0x20000e78
		}
	}
	else if(strcmp(pch,"duration")==0){
 8000f44:	492c      	ldr	r1, [pc, #176]	; (8000ff8 <UI_MSG_SET_f+0x374>)
 8000f46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f48:	f7ff f942 	bl	80001d0 <strcmp>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d134      	bne.n	8000fbc <UI_MSG_SET_f+0x338>
		pch = strtok (NULL," ");//duration
 8000f52:	492a      	ldr	r1, [pc, #168]	; (8000ffc <UI_MSG_SET_f+0x378>)
 8000f54:	2000      	movs	r0, #0
 8000f56:	f014 fa31 	bl	80153bc <strtok>
 8000f5a:	62f8      	str	r0, [r7, #44]	; 0x2c
		if(IsNotNumber(pch)) sprintf(temp_array,"syntax error\r");
 8000f5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f5e:	f7ff fb21 	bl	80005a4 <IsNotNumber>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d004      	beq.n	8000f72 <UI_MSG_SET_f+0x2ee>
 8000f68:	4925      	ldr	r1, [pc, #148]	; (8001000 <UI_MSG_SET_f+0x37c>)
 8000f6a:	4826      	ldr	r0, [pc, #152]	; (8001004 <UI_MSG_SET_f+0x380>)
 8000f6c:	f014 f9c0 	bl	80152f0 <siprintf>
 8000f70:	e028      	b.n	8000fc4 <UI_MSG_SET_f+0x340>
		else{
		  duration=atol(pch);
 8000f72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f74:	f013 fca0 	bl	80148b8 <atol>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	613b      	str	r3, [r7, #16]
		  if((icListen.settings->wav_sample_bit_depth/8)*icListen.settings->wav_sample_rate*duration<4294967200){
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <UI_MSG_SET_f+0x384>)
 8000f7e:	6a1b      	ldr	r3, [r3, #32]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	08db      	lsrs	r3, r3, #3
 8000f84:	4a20      	ldr	r2, [pc, #128]	; (8001008 <UI_MSG_SET_f+0x384>)
 8000f86:	6a12      	ldr	r2, [r2, #32]
 8000f88:	6812      	ldr	r2, [r2, #0]
 8000f8a:	fb02 f303 	mul.w	r3, r2, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	fb02 f303 	mul.w	r3, r2, r3
 8000f94:	f113 0f61 	cmn.w	r3, #97	; 0x61
 8000f98:	d80b      	bhi.n	8000fb2 <UI_MSG_SET_f+0x32e>
           icListen.settings->file_duration=duration;
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <UI_MSG_SET_f+0x384>)
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	609a      	str	r2, [r3, #8]
           mcu_flash_save(&mcu_flash);
 8000fa2:	481a      	ldr	r0, [pc, #104]	; (800100c <UI_MSG_SET_f+0x388>)
 8000fa4:	f001 fb5e 	bl	8002664 <mcu_flash_save>
           sprintf(temp_array,"ok\r");
 8000fa8:	4919      	ldr	r1, [pc, #100]	; (8001010 <UI_MSG_SET_f+0x38c>)
 8000faa:	4816      	ldr	r0, [pc, #88]	; (8001004 <UI_MSG_SET_f+0x380>)
 8000fac:	f014 f9a0 	bl	80152f0 <siprintf>
 8000fb0:	e008      	b.n	8000fc4 <UI_MSG_SET_f+0x340>
		  }
		  else sprintf(temp_array,"syntax error\r");
 8000fb2:	4913      	ldr	r1, [pc, #76]	; (8001000 <UI_MSG_SET_f+0x37c>)
 8000fb4:	4813      	ldr	r0, [pc, #76]	; (8001004 <UI_MSG_SET_f+0x380>)
 8000fb6:	f014 f99b 	bl	80152f0 <siprintf>
 8000fba:	e003      	b.n	8000fc4 <UI_MSG_SET_f+0x340>
		}
	}
	else{
		sprintf(temp_array,"clock\rrate\rduration\r");
 8000fbc:	4915      	ldr	r1, [pc, #84]	; (8001014 <UI_MSG_SET_f+0x390>)
 8000fbe:	4811      	ldr	r0, [pc, #68]	; (8001004 <UI_MSG_SET_f+0x380>)
 8000fc0:	f014 f996 	bl	80152f0 <siprintf>
	}

	temp_ptr.start_addr=temp_array;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <UI_MSG_SET_f+0x394>)
 8000fc6:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <UI_MSG_SET_f+0x380>)
 8000fc8:	601a      	str	r2, [r3, #0]
	temp_ptr.size=strlen(temp_array);
 8000fca:	480e      	ldr	r0, [pc, #56]	; (8001004 <UI_MSG_SET_f+0x380>)
 8000fcc:	f7ff f90a 	bl	80001e4 <strlen>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4a11      	ldr	r2, [pc, #68]	; (8001018 <UI_MSG_SET_f+0x394>)
 8000fd4:	6053      	str	r3, [r2, #4]
	UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000fd6:	4a10      	ldr	r2, [pc, #64]	; (8001018 <UI_MSG_SET_f+0x394>)
 8000fd8:	2101      	movs	r1, #1
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff fc09 	bl	80007f2 <UI_send_msg>
	osMessagePut(UI_obj->events_q,UI_EVNT_SET,1);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f010 ff11 	bl	8011e10 <osMessagePut>
	return UI_F_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3730      	adds	r7, #48	; 0x30
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	080174c8 	.word	0x080174c8
 8000ffc:	080172f0 	.word	0x080172f0
 8001000:	080174b0 	.word	0x080174b0
 8001004:	200003bc 	.word	0x200003bc
 8001008:	20000800 	.word	0x20000800
 800100c:	20000e78 	.word	0x20000e78
 8001010:	0801731c 	.word	0x0801731c
 8001014:	080174d4 	.word	0x080174d4
 8001018:	200003b4 	.word	0x200003b4

0800101c <crc16_arc_update>:
};



uint16_t crc16_arc_update( char data, uint16_t accum )
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	460a      	mov	r2, r1
 8001026:	71fb      	strb	r3, [r7, #7]
 8001028:	4613      	mov	r3, r2
 800102a:	80bb      	strh	r3, [r7, #4]
  unsigned char comb_value;
  comb_value = ( accum&0x00ff ) ^ (unsigned char)data;
 800102c:	88bb      	ldrh	r3, [r7, #4]
 800102e:	b25a      	sxtb	r2, r3
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	4053      	eors	r3, r2
 8001036:	b25b      	sxtb	r3, r3
 8001038:	73fb      	strb	r3, [r7, #15]
  accum = ( accum >> 8 ) ^ crc16_arc_table[ comb_value ];
 800103a:	88bb      	ldrh	r3, [r7, #4]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	b29a      	uxth	r2, r3
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	4906      	ldr	r1, [pc, #24]	; (800105c <crc16_arc_update+0x40>)
 8001044:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001048:	4053      	eors	r3, r2
 800104a:	80bb      	strh	r3, [r7, #4]
  return ( accum );
 800104c:	88bb      	ldrh	r3, [r7, #4]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000000 	.word	0x20000000

08001060 <get_crc16_arc>:

uint16_t get_crc16_arc( uint8_t* data,uint16_t length )
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	807b      	strh	r3, [r7, #2]
  uint16_t accm=0;
 800106c:	2300      	movs	r3, #0
 800106e:	81fb      	strh	r3, [r7, #14]

  for(int i=0;i<length;i++)
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	e00d      	b.n	8001092 <get_crc16_arc+0x32>
  {
    accm=crc16_arc_update(data[i], accm);
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	89fa      	ldrh	r2, [r7, #14]
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ffca 	bl	800101c <crc16_arc_update>
 8001088:	4603      	mov	r3, r0
 800108a:	81fb      	strh	r3, [r7, #14]
  for(int i=0;i<length;i++)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	3301      	adds	r3, #1
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	429a      	cmp	r2, r3
 8001098:	dbed      	blt.n	8001076 <get_crc16_arc+0x16>
  }

  return accm;
 800109a:	89fb      	ldrh	r3, [r7, #14]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <sd_storage_disk_init>:

extern ss_pp sd_cards_ss[4];
extern UART_HandleTypeDef huart1;

F_RES sd_storage_disk_init(FATFS* fs,char* path)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
	if(f_mount(fs,path,1)==FR_OK) return F_OK;
 80010ae:	2201      	movs	r2, #1
 80010b0:	6839      	ldr	r1, [r7, #0]
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f00f f9fe 	bl	80104b4 <f_mount>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <sd_storage_disk_init+0x1e>
 80010be:	2300      	movs	r3, #0
 80010c0:	e000      	b.n	80010c4 <sd_storage_disk_init+0x20>
	else return F_ERR;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <sd_storage_init>:
F_RES sd_storage_init(sd_storage_t* self_object)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	; 0x30
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  char tt[10];
  FRESULT res;
  DWORD fre_clust, fre_sect, tot_sect;
  FATFS*  fs;
  self_object->active_disk_indx=0;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
  self_object->num_of_discs=0;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2918 	strb.w	r2, [r3, #2328]	; 0x918
  self_object->status=STORAGE_NOT_INITTIALIZED;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2919 	strb.w	r2, [r3, #2329]	; 0x919

  MX_FATFS_Init();
 80010ec:	f009 f8d8 	bl	800a2a0 <MX_FATFS_Init>

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010f4:	e080      	b.n	80011f8 <sd_storage_init+0x12c>
  {
   sprintf(tt,"%d:",i);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010fc:	4953      	ldr	r1, [pc, #332]	; (800124c <sd_storage_init+0x180>)
 80010fe:	4618      	mov	r0, r3
 8001100:	f014 f8f6 	bl	80152f0 <siprintf>
   if(sd_storage_disk_init(&self_object->disks[i].fs,tt)==F_OK){
 8001104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001106:	f44f 7211 	mov.w	r2, #580	; 0x244
 800110a:	fb02 f303 	mul.w	r3, r2, r3
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	f107 0214 	add.w	r2, r7, #20
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ffc3 	bl	80010a4 <sd_storage_disk_init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d15b      	bne.n	80011dc <sd_storage_init+0x110>
		  self_object->disks[i].status=DISK_PRESENT;
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001128:	f44f 7111 	mov.w	r1, #580	; 0x244
 800112c:	fb01 f303 	mul.w	r3, r1, r3
 8001130:	4413      	add	r3, r2
 8001132:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
		  self_object->num_of_discs++;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 3918 	ldrb.w	r3, [r3, #2328]	; 0x918
 8001140:	3301      	adds	r3, #1
 8001142:	b2da      	uxtb	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f883 2918 	strb.w	r2, [r3, #2328]	; 0x918
  		  if(f_getfree(tt, &fre_clust, &fs)==FR_OK){
 800114a:	f107 020c 	add.w	r2, r7, #12
 800114e:	f107 0110 	add.w	r1, r7, #16
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4618      	mov	r0, r3
 8001158:	f010 fb7b 	bl	8011852 <f_getfree>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d147      	bne.n	80011f2 <sd_storage_init+0x126>
		    tot_sect = (self_object->disks[i].fs.n_fatent - 2) * self_object->disks[i].fs.csize;
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001166:	f44f 7111 	mov.w	r1, #580	; 0x244
 800116a:	fb01 f303 	mul.w	r3, r1, r3
 800116e:	4413      	add	r3, r2
 8001170:	331c      	adds	r3, #28
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	3b02      	subs	r3, #2
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800117a:	f44f 7011 	mov.w	r0, #580	; 0x244
 800117e:	fb00 f202 	mul.w	r2, r0, r2
 8001182:	440a      	add	r2, r1
 8001184:	320a      	adds	r2, #10
 8001186:	8812      	ldrh	r2, [r2, #0]
 8001188:	fb02 f303 	mul.w	r3, r2, r3
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
			fre_sect = fre_clust * self_object->disks[i].fs.csize;
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001192:	f44f 7111 	mov.w	r1, #580	; 0x244
 8001196:	fb01 f303 	mul.w	r3, r1, r3
 800119a:	4413      	add	r3, r2
 800119c:	330a      	adds	r3, #10
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	fb02 f303 	mul.w	r3, r2, r3
 80011a8:	623b      	str	r3, [r7, #32]
			self_object->disks[i].size=tot_sect/2;
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	085a      	lsrs	r2, r3, #1
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b2:	f44f 7011 	mov.w	r0, #580	; 0x244
 80011b6:	fb00 f303 	mul.w	r3, r0, r3
 80011ba:	440b      	add	r3, r1
 80011bc:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80011c0:	601a      	str	r2, [r3, #0]
			self_object->disks[i].free_space=fre_sect/2;
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	085a      	lsrs	r2, r3, #1
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ca:	f44f 7011 	mov.w	r0, #580	; 0x244
 80011ce:	fb00 f303 	mul.w	r3, r0, r3
 80011d2:	440b      	add	r3, r1
 80011d4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	e00a      	b.n	80011f2 <sd_storage_init+0x126>
		  }
   }
   else{
		 self_object->disks[i].status=DISK_ABSENT;
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e0:	f44f 7111 	mov.w	r1, #580	; 0x244
 80011e4:	fb01 f303 	mul.w	r3, r1, r3
 80011e8:	4413      	add	r3, r2
 80011ea:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 80011f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f4:	3301      	adds	r3, #1
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	f77f af7b 	ble.w	80010f6 <sd_storage_init+0x2a>
   }
  }

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8001200:	2300      	movs	r3, #0
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
 8001204:	e019      	b.n	800123a <sd_storage_init+0x16e>
  {
   if(self_object->disks[i].status==DISK_PRESENT){
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120a:	f44f 7111 	mov.w	r1, #580	; 0x244
 800120e:	fb01 f303 	mul.w	r3, r1, r3
 8001212:	4413      	add	r3, r2
 8001214:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10a      	bne.n	8001234 <sd_storage_init+0x168>
	   self_object->active_disk_indx=i;
 800121e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001220:	b2da      	uxtb	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
	   self_object->status=STORAGE_INITTIALIZED;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2919 	strb.w	r2, [r3, #2329]	; 0x919
	   return F_OK;
 8001230:	2300      	movs	r3, #0
 8001232:	e006      	b.n	8001242 <sd_storage_init+0x176>
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8001234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001236:	3301      	adds	r3, #1
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
 800123a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123c:	2b03      	cmp	r3, #3
 800123e:	dde2      	ble.n	8001206 <sd_storage_init+0x13a>
   }
  }
  return F_ERR;
 8001240:	2301      	movs	r3, #1
}
 8001242:	4618      	mov	r0, r3
 8001244:	3730      	adds	r7, #48	; 0x30
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	080174ec 	.word	0x080174ec

08001250 <sd_storage_link_ss>:

F_RES sd_storage_link_ss(sd_storage_t* self_object,uint8_t disk_num, uint16_t sd_ss_pin,GPIO_TypeDef* sd_ss_port)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	460b      	mov	r3, r1
 800125c:	72fb      	strb	r3, [r7, #11]
 800125e:	4613      	mov	r3, r2
 8001260:	813b      	strh	r3, [r7, #8]
	  sd_cards_ss[disk_num].sd_ss_pin=sd_ss_pin;
 8001262:	7afb      	ldrb	r3, [r7, #11]
 8001264:	4908      	ldr	r1, [pc, #32]	; (8001288 <sd_storage_link_ss+0x38>)
 8001266:	893a      	ldrh	r2, [r7, #8]
 8001268:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
	  sd_cards_ss[disk_num].sd_ss_port=sd_ss_port;
 800126c:	7afb      	ldrb	r3, [r7, #11]
 800126e:	4a06      	ldr	r2, [pc, #24]	; (8001288 <sd_storage_link_ss+0x38>)
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	4413      	add	r3, r2
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	605a      	str	r2, [r3, #4]
	  return F_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20001bb0 	.word	0x20001bb0

0800128c <sd_storage_set_next_disk>:
F_RES sd_storage_read(sd_storage_t* self_object)
{

}
F_RES sd_storage_set_next_disk(sd_storage_t* self_object)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 int i=self_object->active_disk_indx+1;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 800129a:	3301      	adds	r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
 for(;i<SD_STORAGE_NUM_DISKS;i++)
 800129e:	e015      	b.n	80012cc <sd_storage_set_next_disk+0x40>
 {
   if(self_object->disks[i].status==DISK_PRESENT){
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f44f 7111 	mov.w	r1, #580	; 0x244
 80012a8:	fb01 f303 	mul.w	r3, r1, r3
 80012ac:	4413      	add	r3, r2
 80012ae:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d106      	bne.n	80012c6 <sd_storage_set_next_disk+0x3a>
	 self_object->active_disk_indx=i;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
	 return F_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e006      	b.n	80012d4 <sd_storage_set_next_disk+0x48>
 for(;i<SD_STORAGE_NUM_DISKS;i++)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3301      	adds	r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	dde6      	ble.n	80012a0 <sd_storage_set_next_disk+0x14>
   }
 }
 return F_ERR;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4a07      	ldr	r2, [pc, #28]	; (800130c <vApplicationGetIdleTaskMemory+0x2c>)
 80012f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <vApplicationGetIdleTaskMemory+0x30>)
 80012f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2280      	movs	r2, #128	; 0x80
 80012fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	2000054c 	.word	0x2000054c
 8001310:	20000600 	.word	0x20000600

08001314 <icListen_init_sensor_status>:

icListen_object_typedef icListen;


void icListen_init_sensor_status(icListen_object_typedef* self_object)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	self_object->status=ICLISTEN_DISCONNECTED;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	775a      	strb	r2, [r3, #29]
	memset(self_object->build_date,0x00,18);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	330a      	adds	r3, #10
 8001326:	2212      	movs	r2, #18
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f013 fc0c 	bl	8014b48 <memset>
	memset(self_object->firmware_version,0x00,8);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3302      	adds	r3, #2
 8001334:	2208      	movs	r2, #8
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f013 fc05 	bl	8014b48 <memset>
	self_object->serial_number=0;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	801a      	strh	r2, [r3, #0]
	self_object->device_type=0;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	771a      	strb	r2, [r3, #28]
	self_object->last_collect_msg_num=0;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	625a      	str	r2, [r3, #36]	; 0x24
	self_object->collect_seq_num_err=0;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	629a      	str	r2, [r3, #40]	; 0x28
	self_object->wav_misconfig_err=0;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	62da      	str	r2, [r3, #44]	; 0x2c

}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <icListen_prepare_setup_msg>:

void icListen_prepare_setup_msg(icListen_setup_full_msg* msg,uint32_t wav_sample_rate,uint32_t wav_sample_bit_depth)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
	msg->basic_hdr.sync=MSG_SYNC;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	222a      	movs	r2, #42	; 0x2a
 8001374:	701a      	strb	r2, [r3, #0]
	msg->basic_hdr.type=MSG_TYPE_JOB_SETUP;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2244      	movs	r2, #68	; 0x44
 800137a:	705a      	strb	r2, [r3, #1]
	msg->setup_type=MSG_JOB_SETUP_WAVEFORM_HF;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2200      	movs	r2, #0
 8001380:	f042 0214 	orr.w	r2, r2, #20
 8001384:	711a      	strb	r2, [r3, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	715a      	strb	r2, [r3, #5]
	msg->num_of_tags=11;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2200      	movs	r2, #0
 800138e:	f042 020b 	orr.w	r2, r2, #11
 8001392:	719a      	strb	r2, [r3, #6]
 8001394:	2200      	movs	r2, #0
 8001396:	71da      	strb	r2, [r3, #7]

	msg->t01_log_start_time.tag=MSG_JOB_SETUP_TAG_LOG_START_TIME;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2200      	movs	r2, #0
 800139c:	f042 0201 	orr.w	r2, r2, #1
 80013a0:	721a      	strb	r2, [r3, #8]
 80013a2:	2200      	movs	r2, #0
 80013a4:	725a      	strb	r2, [r3, #9]
	msg->t01_log_start_time.tag_value=4294967295;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	731a      	strb	r2, [r3, #12]
 80013ae:	f04f 32ff 	mov.w	r2, #4294967295
 80013b2:	735a      	strb	r2, [r3, #13]
 80013b4:	f04f 32ff 	mov.w	r2, #4294967295
 80013b8:	739a      	strb	r2, [r3, #14]
 80013ba:	f04f 32ff 	mov.w	r2, #4294967295
 80013be:	73da      	strb	r2, [r3, #15]
	msg->t01_log_start_time.tag_value_len=4;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f042 0204 	orr.w	r2, r2, #4
 80013c8:	729a      	strb	r2, [r3, #10]
 80013ca:	2200      	movs	r2, #0
 80013cc:	72da      	strb	r2, [r3, #11]

	msg->t02_spectrum_sample_rate.tag=MSG_JOB_SETUP_TAG_SPECT_SAMPLE_RATE;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f042 0202 	orr.w	r2, r2, #2
 80013d6:	741a      	strb	r2, [r3, #16]
 80013d8:	2200      	movs	r2, #0
 80013da:	745a      	strb	r2, [r3, #17]
	msg->t02_spectrum_sample_rate.tag_value=0;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2200      	movs	r2, #0
 80013e0:	751a      	strb	r2, [r3, #20]
 80013e2:	2200      	movs	r2, #0
 80013e4:	755a      	strb	r2, [r3, #21]
 80013e6:	2200      	movs	r2, #0
 80013e8:	759a      	strb	r2, [r3, #22]
 80013ea:	2200      	movs	r2, #0
 80013ec:	75da      	strb	r2, [r3, #23]
	msg->t02_spectrum_sample_rate.tag_value_len=4;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f042 0204 	orr.w	r2, r2, #4
 80013f6:	749a      	strb	r2, [r3, #18]
 80013f8:	2200      	movs	r2, #0
 80013fa:	74da      	strb	r2, [r3, #19]

	msg->t06_fft_processing_type.tag=MSG_JOB_SETUP_TAG_FFT_PROCESSING_TYPE;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	f042 0206 	orr.w	r2, r2, #6
 8001404:	761a      	strb	r2, [r3, #24]
 8001406:	2200      	movs	r2, #0
 8001408:	765a      	strb	r2, [r3, #25]
	msg->t06_fft_processing_type.tag_value=0;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	771a      	strb	r2, [r3, #28]
 8001410:	2200      	movs	r2, #0
 8001412:	775a      	strb	r2, [r3, #29]
 8001414:	2200      	movs	r2, #0
 8001416:	779a      	strb	r2, [r3, #30]
 8001418:	2200      	movs	r2, #0
 800141a:	77da      	strb	r2, [r3, #31]
	msg->t06_fft_processing_type.tag_value_len=4;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	f042 0204 	orr.w	r2, r2, #4
 8001424:	769a      	strb	r2, [r3, #26]
 8001426:	2200      	movs	r2, #0
 8001428:	76da      	strb	r2, [r3, #27]

	msg->t07_fft_accumulates.tag=MSG_JOB_SETUP_TAG_FFT_ACCUMULATED;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2200      	movs	r2, #0
 800142e:	f042 0207 	orr.w	r2, r2, #7
 8001432:	f883 2020 	strb.w	r2, [r3, #32]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	msg->t07_fft_accumulates.tag_value=0;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	msg->t07_fft_accumulates.tag_value_len=4;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f042 0204 	orr.w	r2, r2, #4
 800145e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	msg->t09_spectrum_logging_mode.tag=MSG_JOB_SETUP_TAG_SPECT_LOGGING_MODE;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2200      	movs	r2, #0
 800146c:	f042 0209 	orr.w	r2, r2, #9
 8001470:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	msg->t09_spectrum_logging_mode.tag_value=0;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001482:	2200      	movs	r2, #0
 8001484:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8001488:	2200      	movs	r2, #0
 800148a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800148e:	2200      	movs	r2, #0
 8001490:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	msg->t09_spectrum_logging_mode.tag_value_len=4;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	f042 0204 	orr.w	r2, r2, #4
 800149c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	msg->t0A_spectrum_log_file_length.tag=MSG_JOB_SETUP_TAG_SPECT_LOG_FILE_LEN;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f042 020a 	orr.w	r2, r2, #10
 80014ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	msg->t0A_spectrum_log_file_length.tag_value=1;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f042 0201 	orr.w	r2, r2, #1
 80014c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	msg->t0A_spectrum_log_file_length.tag_value_len=4;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2200      	movs	r2, #0
 80014da:	f042 0204 	orr.w	r2, r2, #4
 80014de:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	msg->t0E_waveform_sample_rate.tag=MSG_JOB_SETUP_TAG_WAVEFORM_SAMPLE_RATE;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f042 020e 	orr.w	r2, r2, #14
 80014f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	msg->t0E_waveform_sample_rate.tag_value=wav_sample_rate;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	63da      	str	r2, [r3, #60]	; 0x3c
	msg->t0E_waveform_sample_rate.tag_value_len=4;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2200      	movs	r2, #0
 8001504:	f042 0204 	orr.w	r2, r2, #4
 8001508:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800150c:	2200      	movs	r2, #0
 800150e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	msg->t0F_waveform_data_bit_depth.tag=MSG_JOB_SETUP_TAG_WAVEFORM_DATA_BITS_DEPTH;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	f042 020f 	orr.w	r2, r2, #15
 800151a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	msg->t0F_waveform_data_bit_depth.tag_value=wav_sample_bit_depth;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	645a      	str	r2, [r3, #68]	; 0x44
	msg->t0F_waveform_data_bit_depth.tag_value_len=4;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2200      	movs	r2, #0
 800152e:	f042 0204 	orr.w	r2, r2, #4
 8001532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	msg->t12_waveform_logging_mode.tag=MSG_JOB_SETUP_TAG_WAVEFROM_DATA_LOGGING_MODE;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	f042 0212 	orr.w	r2, r2, #18
 8001544:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	msg->t12_waveform_logging_mode.tag_value=0;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8001556:	2200      	movs	r2, #0
 8001558:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800155c:	2200      	movs	r2, #0
 800155e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8001562:	2200      	movs	r2, #0
 8001564:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	msg->t12_waveform_logging_mode.tag_value_len=4;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2200      	movs	r2, #0
 800156c:	f042 0204 	orr.w	r2, r2, #4
 8001570:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8001574:	2200      	movs	r2, #0
 8001576:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	msg->t13_waveform_log_file_length.tag=MSG_JOB_SETUP_TAG_WAVEFORM_LOG_FILE_LENGTH;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2200      	movs	r2, #0
 800157e:	f042 0213 	orr.w	r2, r2, #19
 8001582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	msg->t13_waveform_log_file_length.tag_value=1;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	f042 0201 	orr.w	r2, r2, #1
 8001594:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	msg->t13_waveform_log_file_length.tag_value_len=4;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f042 0204 	orr.w	r2, r2, #4
 80015b2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	msg->t14_aux_pin_messages.tag=MSG_JOB_SETUP_TAG_AUX_PIN_MESSAGE;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2200      	movs	r2, #0
 80015c0:	f042 0214 	orr.w	r2, r2, #20
 80015c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	msg->t14_aux_pin_messages.tag_value=1;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f042 0201 	orr.w	r2, r2, #1
 80015d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	msg->t14_aux_pin_messages.tag_value_len=4;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f042 0204 	orr.w	r2, r2, #4
 80015f4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b


	msg->basic_hdr.length=sizeof(icListen_setup_full_msg)-4-2;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	f042 025c 	orr.w	r2, r2, #92	; 0x5c
 8001606:	709a      	strb	r2, [r3, #2]
 8001608:	2200      	movs	r2, #0
 800160a:	70da      	strb	r2, [r3, #3]
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_setup_full_msg)-2);
 800160c:	2160      	movs	r1, #96	; 0x60
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	f7ff fd26 	bl	8001060 <get_crc16_arc>
 8001614:	4603      	mov	r3, r0
 8001616:	461a      	mov	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <icListen_prepare_collect_msg>:

void icListen_prepare_collect_msg(icListen_collect_short_mask_msg* msg,uint8_t mask)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	460b      	mov	r3, r1
 8001630:	70fb      	strb	r3, [r7, #3]
	msg->basic_hdr.sync=MSG_SYNC;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	222a      	movs	r2, #42	; 0x2a
 8001636:	701a      	strb	r2, [r3, #0]
    msg->basic_hdr.type=MSG_TYPE_COLLECT_DATA;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2243      	movs	r2, #67	; 0x43
 800163c:	705a      	strb	r2, [r3, #1]
    msg->mask_hdr.mask=mask;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	78fa      	ldrb	r2, [r7, #3]
 8001642:	711a      	strb	r2, [r3, #4]
    msg->basic_hdr.length=1;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f042 0201 	orr.w	r2, r2, #1
 800164c:	709a      	strb	r2, [r3, #2]
 800164e:	2200      	movs	r2, #0
 8001650:	70da      	strb	r2, [r3, #3]
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_collect_short_mask_msg)-2);
 8001652:	2105      	movs	r1, #5
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff fd03 	bl	8001060 <get_crc16_arc>
 800165a:	4603      	mov	r3, r0
 800165c:	461a      	mov	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f8a3 2005 	strh.w	r2, [r3, #5]
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <icListen_prepare_enquire_device_msg>:

void icListen_prepare_enquire_device_msg(icListen_enquire_device_msg* msg)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	msg->basic_hdr.sync=MSG_SYNC;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	222a      	movs	r2, #42	; 0x2a
 8001678:	701a      	strb	r2, [r3, #0]
    msg->basic_hdr.type=MSG_TYPE_ENQUIRE_DEVICE;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2245      	movs	r2, #69	; 0x45
 800167e:	705a      	strb	r2, [r3, #1]
    msg->basic_hdr.length=0;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	709a      	strb	r2, [r3, #2]
 8001686:	2200      	movs	r2, #0
 8001688:	70da      	strb	r2, [r3, #3]
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_enquire_device_msg)-2);
 800168a:	2104      	movs	r1, #4
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff fce7 	bl	8001060 <get_crc16_arc>
 8001692:	4603      	mov	r3, r0
 8001694:	461a      	mov	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	809a      	strh	r2, [r3, #4]

}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <icListen_parse_msg>:

F_RES icListen_parse_msg(uint8_t* msg,icListen_object_typedef* self_object,uint8_t* msg_type,memory_region_pointer* parsed_data_ptr)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b088      	sub	sp, #32
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	603b      	str	r3, [r7, #0]

	icListen_basic_header* basic_header=(icListen_basic_header*)msg;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	61fb      	str	r3, [r7, #28]
	icListen_status_basic_msg* status_msg=(icListen_status_basic_msg*)msg;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	61bb      	str	r3, [r7, #24]
	icListen_wav_full_header* collected_wav_header=(icListen_wav_full_header*)msg;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	617b      	str	r3, [r7, #20]

	uint16_t crc_msg=*(uint16_t*)(msg+basic_header->length+4);
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	885b      	ldrh	r3, [r3, #2]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	3304      	adds	r3, #4
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	4413      	add	r3, r2
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	827b      	strh	r3, [r7, #18]

	if(basic_header->sync==MSG_SYNC){
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b2a      	cmp	r3, #42	; 0x2a
 80016d2:	f040 8089 	bne.w	80017e8 <icListen_parse_msg+0x146>
	*msg_type=basic_header->type;
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	785a      	ldrb	r2, [r3, #1]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	701a      	strb	r2, [r3, #0]
	switch(basic_header->type){
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	785b      	ldrb	r3, [r3, #1]
 80016e2:	2b43      	cmp	r3, #67	; 0x43
 80016e4:	d033      	beq.n	800174e <icListen_parse_msg+0xac>
 80016e6:	2b45      	cmp	r3, #69	; 0x45
 80016e8:	d17c      	bne.n	80017e4 <icListen_parse_msg+0x142>
	     case MSG_TYPE_ENQUIRE_DEVICE:
	    	 if(crc_msg==get_crc16_arc(msg,(uint16_t)basic_header->length+4)){
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	885b      	ldrh	r3, [r3, #2]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	3304      	adds	r3, #4
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	4619      	mov	r1, r3
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f7ff fcb2 	bl	8001060 <get_crc16_arc>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	8a7b      	ldrh	r3, [r7, #18]
 8001702:	4293      	cmp	r3, r2
 8001704:	d121      	bne.n	800174a <icListen_parse_msg+0xa8>
		    	  self_object->status=status_msg->status;
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	775a      	strb	r2, [r3, #29]
		    	  memcpy(self_object->build_date,status_msg->build_date,18);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	f103 000a 	add.w	r0, r3, #10
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	330e      	adds	r3, #14
 800171a:	2212      	movs	r2, #18
 800171c:	4619      	mov	r1, r3
 800171e:	f013 fa05 	bl	8014b2c <memcpy>
		    	  memcpy(self_object->firmware_version,status_msg->firmware_version,8);
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	1c98      	adds	r0, r3, #2
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	3306      	adds	r3, #6
 800172a:	2208      	movs	r2, #8
 800172c:	4619      	mov	r1, r3
 800172e:	f013 f9fd 	bl	8014b2c <memcpy>
		    	  self_object->serial_number=status_msg->serial_number;
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	889b      	ldrh	r3, [r3, #4]
 8001736:	b29a      	uxth	r2, r3
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	801a      	strh	r2, [r3, #0]
		    	  self_object->device_type=status_msg->device_type;
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	771a      	strb	r2, [r3, #28]
		    	  return F_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	e04f      	b.n	80017ea <icListen_parse_msg+0x148>
	    	  }
	    	 else return F_ERR;
 800174a:	2301      	movs	r3, #1
 800174c:	e04d      	b.n	80017ea <icListen_parse_msg+0x148>
	     break;
		 case MSG_TYPE_COLLECT_DATA:
			 if(collected_wav_header->basic_hdr.length>1){
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	885b      	ldrh	r3, [r3, #2]
 8001752:	b29b      	uxth	r3, r3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d93a      	bls.n	80017ce <icListen_parse_msg+0x12c>
			      if((self_object->last_collect_msg_num+1)!=collected_wav_header->wav_hdr.seq_num && self_object->last_collect_msg_num !=0){
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	3301      	adds	r3, #1
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	f8b2 2005 	ldrh.w	r2, [r2, #5]
 8001764:	b292      	uxth	r2, r2
 8001766:	4293      	cmp	r3, r2
 8001768:	d008      	beq.n	800177c <icListen_parse_msg+0xda>
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	2b00      	cmp	r3, #0
 8001770:	d004      	beq.n	800177c <icListen_parse_msg+0xda>
			    	  self_object->collect_seq_num_err++;
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	629a      	str	r2, [r3, #40]	; 0x28
			      }
			      self_object->last_collect_msg_num=collected_wav_header->wav_hdr.seq_num;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001782:	b29b      	uxth	r3, r3
 8001784:	461a      	mov	r2, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	625a      	str	r2, [r3, #36]	; 0x24
			      if(collected_wav_header->wav_hdr.sample_rate!=self_object->settings->wav_sample_rate || collected_wav_header->wav_hdr.bit_depth!=self_object->settings->wav_sample_bit_depth ){
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f8d3 200b 	ldr.w	r2, [r3, #11]
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d107      	bne.n	80017aa <icListen_parse_msg+0x108>
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	79db      	ldrb	r3, [r3, #7]
 800179e:	461a      	mov	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d004      	beq.n	80017b4 <icListen_parse_msg+0x112>
			        self_object->wav_misconfig_err++;
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
			      }
		    	  parsed_data_ptr->start_addr=msg+sizeof(icListen_wav_full_header);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f103 0213 	add.w	r2, r3, #19
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	601a      	str	r2, [r3, #0]
		    	  parsed_data_ptr->size=collected_wav_header->wav_hdr.num_of_bytes;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	891b      	ldrh	r3, [r3, #8]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	461a      	mov	r2, r3
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	605a      	str	r2, [r3, #4]
			    //parsed_data_ptr->start_addr=msg;
				//parsed_data_ptr->size=collected_wav_header->basic_hdr.length+4;
				  return F_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e00d      	b.n	80017ea <icListen_parse_msg+0x148>
			 }
			 parsed_data_ptr->size=0;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2200      	movs	r2, #0
 80017d2:	711a      	strb	r2, [r3, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	715a      	strb	r2, [r3, #5]
 80017d8:	2200      	movs	r2, #0
 80017da:	719a      	strb	r2, [r3, #6]
 80017dc:	2200      	movs	r2, #0
 80017de:	71da      	strb	r2, [r3, #7]
		     return F_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	e002      	b.n	80017ea <icListen_parse_msg+0x148>
		 break;
		 default:
			 return F_ERR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <icListen_parse_msg+0x148>
	     break;
	 };
	}
	else{
		return F_ERR;
 80017e8:	2301      	movs	r3, #1
	}
	return F_ERR;
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3720      	adds	r7, #32
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f4:	b5b0      	push	{r4, r5, r7, lr}
 80017f6:	b0ac      	sub	sp, #176	; 0xb0
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017fa:	f001 fe5d 	bl	80034b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017fe:	f000 f8cd 	bl	800199c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001802:	f000 fa5d 	bl	8001cc0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001806:	f000 f98f 	bl	8001b28 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800180a:	f000 fa0f 	bl	8001c2c <MX_USART1_UART_Init>
  MX_DMA_Init();
 800180e:	f000 fa37 	bl	8001c80 <MX_DMA_Init>
  MX_TIM2_Init();
 8001812:	f000 f9bf 	bl	8001b94 <MX_TIM2_Init>
  MX_RTC_Init();
 8001816:	f000 f92d 	bl	8001a74 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  UI_init(&user_interface);
 800181a:	484c      	ldr	r0, [pc, #304]	; (800194c <main+0x158>)
 800181c:	f7fe fee6 	bl	80005ec <UI_init>
  HAL_UART_Receive_IT(&UI_UART,&(user_interface.media_rx_byte),1);
 8001820:	2201      	movs	r2, #1
 8001822:	494b      	ldr	r1, [pc, #300]	; (8001950 <main+0x15c>)
 8001824:	484b      	ldr	r0, [pc, #300]	; (8001954 <main+0x160>)
 8001826:	f006 fdc7 	bl	80083b8 <HAL_UART_Receive_IT>
  mcu_flash_init(&mcu_flash,FLASH_SECTOR_11);
 800182a:	210b      	movs	r1, #11
 800182c:	484a      	ldr	r0, [pc, #296]	; (8001958 <main+0x164>)
 800182e:	f000 fea7 	bl	8002580 <mcu_flash_init>

  system_status=SYSTEM_STARTED;
 8001832:	4b4a      	ldr	r3, [pc, #296]	; (800195c <main+0x168>)
 8001834:	220b      	movs	r2, #11
 8001836:	701a      	strb	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of AppliEvent */
  osMessageQDef(AppliEvent, 16, uint16_t);
 8001838:	4b49      	ldr	r3, [pc, #292]	; (8001960 <main+0x16c>)
 800183a:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 800183e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001840:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AppliEventHandle = osMessageCreate(osMessageQ(AppliEvent), NULL);
 8001844:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f010 fab7 	bl	8011dbe <osMessageCreate>
 8001850:	4603      	mov	r3, r0
 8001852:	4a44      	ldr	r2, [pc, #272]	; (8001964 <main+0x170>)
 8001854:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_rx */
  osMessageQDef(USB_rx, 10, uint32_t);
 8001856:	4b44      	ldr	r3, [pc, #272]	; (8001968 <main+0x174>)
 8001858:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800185c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800185e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  USB_rxHandle = osMessageCreate(osMessageQ(USB_rx), NULL);
 8001862:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f010 faa8 	bl	8011dbe <osMessageCreate>
 800186e:	4603      	mov	r3, r0
 8001870:	4a3e      	ldr	r2, [pc, #248]	; (800196c <main+0x178>)
 8001872:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_tx */
  osMessageQDef(USB_tx, 10, uint32_t);
 8001874:	4b3c      	ldr	r3, [pc, #240]	; (8001968 <main+0x174>)
 8001876:	f107 0480 	add.w	r4, r7, #128	; 0x80
 800187a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800187c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  USB_txHandle = osMessageCreate(osMessageQ(USB_tx), NULL);
 8001880:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f010 fa99 	bl	8011dbe <osMessageCreate>
 800188c:	4603      	mov	r3, r0
 800188e:	4a38      	ldr	r2, [pc, #224]	; (8001970 <main+0x17c>)
 8001890:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_w */
  osMessageQDef(storage_w, 5, uint32_t);
 8001892:	4b38      	ldr	r3, [pc, #224]	; (8001974 <main+0x180>)
 8001894:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001898:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800189a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  storage_wHandle = osMessageCreate(osMessageQ(storage_w), NULL);
 800189e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f010 fa8a 	bl	8011dbe <osMessageCreate>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4a32      	ldr	r2, [pc, #200]	; (8001978 <main+0x184>)
 80018ae:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80018b0:	4b32      	ldr	r3, [pc, #200]	; (800197c <main+0x188>)
 80018b2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80018b6:	461d      	mov	r5, r3
 80018b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80018c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018c8:	2100      	movs	r1, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f010 fa17 	bl	8011cfe <osThreadCreate>
 80018d0:	4603      	mov	r3, r0
 80018d2:	4a2b      	ldr	r2, [pc, #172]	; (8001980 <main+0x18c>)
 80018d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_t */
  osThreadDef(storage_t, storage_f, osPriorityNormal, 0, 512);
 80018d6:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <main+0x190>)
 80018d8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80018dc:	461d      	mov	r5, r3
 80018de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  storage_tHandle = osThreadCreate(osThread(storage_t), NULL);
 80018ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f010 fa04 	bl	8011cfe <osThreadCreate>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4a23      	ldr	r2, [pc, #140]	; (8001988 <main+0x194>)
 80018fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of icListen_t */
  osThreadDef(icListen_t, icListen_f, osPriorityNormal, 0, 512);
 80018fc:	4b23      	ldr	r3, [pc, #140]	; (800198c <main+0x198>)
 80018fe:	f107 041c 	add.w	r4, r7, #28
 8001902:	461d      	mov	r5, r3
 8001904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001908:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800190c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  icListen_tHandle = osThreadCreate(osThread(icListen_t), NULL);
 8001910:	f107 031c 	add.w	r3, r7, #28
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f010 f9f1 	bl	8011cfe <osThreadCreate>
 800191c:	4603      	mov	r3, r0
 800191e:	4a1c      	ldr	r2, [pc, #112]	; (8001990 <main+0x19c>)
 8001920:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart_t */
  osThreadDef(uart_t, uart_f, osPriorityNormal, 0, 256);
 8001922:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <main+0x1a0>)
 8001924:	463c      	mov	r4, r7
 8001926:	461d      	mov	r5, r3
 8001928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800192a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800192c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001930:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart_tHandle = osThreadCreate(osThread(uart_t), NULL);
 8001934:	463b      	mov	r3, r7
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f010 f9e0 	bl	8011cfe <osThreadCreate>
 800193e:	4603      	mov	r3, r0
 8001940:	4a15      	ldr	r2, [pc, #84]	; (8001998 <main+0x1a4>)
 8001942:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001944:	f010 f9d4 	bl	8011cf0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001948:	e7fe      	b.n	8001948 <main+0x154>
 800194a:	bf00      	nop
 800194c:	20000a64 	.word	0x20000a64
 8001950:	20000a70 	.word	0x20000a70
 8001954:	20000954 	.word	0x20000954
 8001958:	20000e78 	.word	0x20000e78
 800195c:	20001b70 	.word	0x20001b70
 8001960:	0801751c 	.word	0x0801751c
 8001964:	200009a8 	.word	0x200009a8
 8001968:	0801752c 	.word	0x0801752c
 800196c:	200009ac 	.word	0x200009ac
 8001970:	200009b0 	.word	0x200009b0
 8001974:	0801753c 	.word	0x0801753c
 8001978:	200009b4 	.word	0x200009b4
 800197c:	0801754c 	.word	0x0801754c
 8001980:	20000998 	.word	0x20000998
 8001984:	08017568 	.word	0x08017568
 8001988:	2000099c 	.word	0x2000099c
 800198c:	08017584 	.word	0x08017584
 8001990:	200009a0 	.word	0x200009a0
 8001994:	080175a0 	.word	0x080175a0
 8001998:	200009a4 	.word	0x200009a4

0800199c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b094      	sub	sp, #80	; 0x50
 80019a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a2:	f107 0320 	add.w	r3, r7, #32
 80019a6:	2230      	movs	r2, #48	; 0x30
 80019a8:	2100      	movs	r1, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f013 f8cc 	bl	8014b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b0:	f107 030c 	add.w	r3, r7, #12
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c0:	2300      	movs	r3, #0
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <SystemClock_Config+0xd0>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	4a28      	ldr	r2, [pc, #160]	; (8001a6c <SystemClock_Config+0xd0>)
 80019ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ce:	6413      	str	r3, [r2, #64]	; 0x40
 80019d0:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <SystemClock_Config+0xd0>)
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019dc:	2300      	movs	r3, #0
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <SystemClock_Config+0xd4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a22      	ldr	r2, [pc, #136]	; (8001a70 <SystemClock_Config+0xd4>)
 80019e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <SystemClock_Config+0xd4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80019f8:	2305      	movs	r3, #5
 80019fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a02:	2301      	movs	r3, #1
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a06:	2302      	movs	r3, #2
 8001a08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001a10:	230f      	movs	r3, #15
 8001a12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001a14:	2390      	movs	r3, #144	; 0x90
 8001a16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001a1c:	2305      	movs	r3, #5
 8001a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a20:	f107 0320 	add.w	r3, r7, #32
 8001a24:	4618      	mov	r0, r3
 8001a26:	f004 faa3 	bl	8005f70 <HAL_RCC_OscConfig>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a30:	f000 fda0 	bl	8002574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a34:	230f      	movs	r3, #15
 8001a36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	2103      	movs	r1, #3
 8001a52:	4618      	mov	r0, r3
 8001a54:	f004 fd04 	bl	8006460 <HAL_RCC_ClockConfig>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001a5e:	f000 fd89 	bl	8002574 <Error_Handler>
  }
}
 8001a62:	bf00      	nop
 8001a64:	3750      	adds	r7, #80	; 0x50
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40007000 	.word	0x40007000

08001a74 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001a88:	2300      	movs	r3, #0
 8001a8a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a8c:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <MX_RTC_Init+0xac>)
 8001a8e:	4a25      	ldr	r2, [pc, #148]	; (8001b24 <MX_RTC_Init+0xb0>)
 8001a90:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a92:	4b23      	ldr	r3, [pc, #140]	; (8001b20 <MX_RTC_Init+0xac>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a98:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <MX_RTC_Init+0xac>)
 8001a9a:	227f      	movs	r2, #127	; 0x7f
 8001a9c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <MX_RTC_Init+0xac>)
 8001aa0:	22ff      	movs	r2, #255	; 0xff
 8001aa2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <MX_RTC_Init+0xac>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <MX_RTC_Init+0xac>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <MX_RTC_Init+0xac>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ab6:	481a      	ldr	r0, [pc, #104]	; (8001b20 <MX_RTC_Init+0xac>)
 8001ab8:	f004 ffc6 	bl	8006a48 <HAL_RTC_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001ac2:	f000 fd57 	bl	8002574 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	2200      	movs	r2, #0
 8001ade:	4619      	mov	r1, r3
 8001ae0:	480f      	ldr	r0, [pc, #60]	; (8001b20 <MX_RTC_Init+0xac>)
 8001ae2:	f005 f827 	bl	8006b34 <HAL_RTC_SetTime>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001aec:	f000 fd42 	bl	8002574 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001af0:	2301      	movs	r3, #1
 8001af2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001af4:	2301      	movs	r3, #1
 8001af6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001af8:	2301      	movs	r3, #1
 8001afa:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001b00:	463b      	mov	r3, r7
 8001b02:	2200      	movs	r2, #0
 8001b04:	4619      	mov	r1, r3
 8001b06:	4806      	ldr	r0, [pc, #24]	; (8001b20 <MX_RTC_Init+0xac>)
 8001b08:	f005 f90c 	bl	8006d24 <HAL_RTC_SetDate>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001b12:	f000 fd2f 	bl	8002574 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b16:	bf00      	nop
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000834 	.word	0x20000834
 8001b24:	40002800 	.word	0x40002800

08001b28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b2c:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b2e:	4a18      	ldr	r2, [pc, #96]	; (8001b90 <MX_SPI1_Init+0x68>)
 8001b30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b32:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b5c:	2208      	movs	r2, #8
 8001b5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b60:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b6c:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b74:	220a      	movs	r2, #10
 8001b76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b78:	4804      	ldr	r0, [pc, #16]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b7a:	f005 fa63 	bl	8007044 <HAL_SPI_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b84:	f000 fcf6 	bl	8002574 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000854 	.word	0x20000854
 8001b90:	40013000 	.word	0x40013000

08001b94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b9a:	f107 0308 	add.w	r3, r7, #8
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba8:	463b      	mov	r3, r7
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <MX_TIM2_Init+0x94>)
 8001bb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <MX_TIM2_Init+0x94>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <MX_TIM2_Init+0x94>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001bc4:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <MX_TIM2_Init+0x94>)
 8001bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8001bca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bcc:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <MX_TIM2_Init+0x94>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <MX_TIM2_Init+0x94>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bd8:	4813      	ldr	r0, [pc, #76]	; (8001c28 <MX_TIM2_Init+0x94>)
 8001bda:	f005 fe47 	bl	800786c <HAL_TIM_Base_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001be4:	f000 fcc6 	bl	8002574 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bee:	f107 0308 	add.w	r3, r7, #8
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	480c      	ldr	r0, [pc, #48]	; (8001c28 <MX_TIM2_Init+0x94>)
 8001bf6:	f006 f801 	bl	8007bfc <HAL_TIM_ConfigClockSource>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c00:	f000 fcb8 	bl	8002574 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c04:	2300      	movs	r3, #0
 8001c06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c0c:	463b      	mov	r3, r7
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4805      	ldr	r0, [pc, #20]	; (8001c28 <MX_TIM2_Init+0x94>)
 8001c12:	f006 fa1d 	bl	8008050 <HAL_TIMEx_MasterConfigSynchronization>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c1c:	f000 fcaa 	bl	8002574 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c20:	bf00      	nop
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	2000090c 	.word	0x2000090c

08001c2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <MX_USART1_UART_Init+0x4c>)
 8001c32:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <MX_USART1_UART_Init+0x50>)
 8001c34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <MX_USART1_UART_Init+0x4c>)
 8001c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <MX_USART1_UART_Init+0x4c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <MX_USART1_UART_Init+0x4c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <MX_USART1_UART_Init+0x4c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <MX_USART1_UART_Init+0x4c>)
 8001c52:	220c      	movs	r2, #12
 8001c54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <MX_USART1_UART_Init+0x4c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <MX_USART1_UART_Init+0x4c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c62:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_USART1_UART_Init+0x4c>)
 8001c64:	f006 fa84 	bl	8008170 <HAL_UART_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c6e:	f000 fc81 	bl	8002574 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000954 	.word	0x20000954
 8001c7c:	40011000 	.word	0x40011000

08001c80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <MX_DMA_Init+0x3c>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a0b      	ldr	r2, [pc, #44]	; (8001cbc <MX_DMA_Init+0x3c>)
 8001c90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <MX_DMA_Init+0x3c>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2105      	movs	r1, #5
 8001ca6:	203b      	movs	r0, #59	; 0x3b
 8001ca8:	f001 fd24 	bl	80036f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001cac:	203b      	movs	r0, #59	; 0x3b
 8001cae:	f001 fd3d 	bl	800372c <HAL_NVIC_EnableIRQ>

}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800

08001cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
 8001cd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	4b39      	ldr	r3, [pc, #228]	; (8001dc0 <MX_GPIO_Init+0x100>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a38      	ldr	r2, [pc, #224]	; (8001dc0 <MX_GPIO_Init+0x100>)
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b36      	ldr	r3, [pc, #216]	; (8001dc0 <MX_GPIO_Init+0x100>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	4b32      	ldr	r3, [pc, #200]	; (8001dc0 <MX_GPIO_Init+0x100>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a31      	ldr	r2, [pc, #196]	; (8001dc0 <MX_GPIO_Init+0x100>)
 8001cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b2f      	ldr	r3, [pc, #188]	; (8001dc0 <MX_GPIO_Init+0x100>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <MX_GPIO_Init+0x100>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a2a      	ldr	r2, [pc, #168]	; (8001dc0 <MX_GPIO_Init+0x100>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <MX_GPIO_Init+0x100>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <MX_GPIO_Init+0x100>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a23      	ldr	r2, [pc, #140]	; (8001dc0 <MX_GPIO_Init+0x100>)
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <MX_GPIO_Init+0x100>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_SD3_GPIO_Port, SS_SD3_Pin, GPIO_PIN_SET);
 8001d46:	2201      	movs	r2, #1
 8001d48:	2102      	movs	r1, #2
 8001d4a:	481e      	ldr	r0, [pc, #120]	; (8001dc4 <MX_GPIO_Init+0x104>)
 8001d4c:	f002 fcec 	bl	8004728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin, GPIO_PIN_SET);
 8001d50:	2201      	movs	r2, #1
 8001d52:	2186      	movs	r1, #134	; 0x86
 8001d54:	481c      	ldr	r0, [pc, #112]	; (8001dc8 <MX_GPIO_Init+0x108>)
 8001d56:	f002 fce7 	bl	8004728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_VBUS_GPIO_Port, USB_VBUS_Pin, GPIO_PIN_SET);
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	481b      	ldr	r0, [pc, #108]	; (8001dcc <MX_GPIO_Init+0x10c>)
 8001d60:	f002 fce2 	bl	8004728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS_SD3_Pin */
  GPIO_InitStruct.Pin = SS_SD3_Pin;
 8001d64:	2302      	movs	r3, #2
 8001d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d70:	2302      	movs	r3, #2
 8001d72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SS_SD3_GPIO_Port, &GPIO_InitStruct);
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4812      	ldr	r0, [pc, #72]	; (8001dc4 <MX_GPIO_Init+0x104>)
 8001d7c:	f002 fb38 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_SD1_Pin SS_SD2_Pin SS_SD4_Pin */
  GPIO_InitStruct.Pin = SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin;
 8001d80:	2386      	movs	r3, #134	; 0x86
 8001d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d84:	2301      	movs	r3, #1
 8001d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4619      	mov	r1, r3
 8001d96:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <MX_GPIO_Init+0x108>)
 8001d98:	f002 fb2a 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da0:	2301      	movs	r3, #1
 8001da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	4619      	mov	r1, r3
 8001db2:	4806      	ldr	r0, [pc, #24]	; (8001dcc <MX_GPIO_Init+0x10c>)
 8001db4:	f002 fb1c 	bl	80043f0 <HAL_GPIO_Init>

}
 8001db8:	bf00      	nop
 8001dba:	3728      	adds	r7, #40	; 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40020800 	.word	0x40020800
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	40020400 	.word	0x40020400

08001dd0 <HAL_UART_RxCpltCallback>:

uint8_t tmp1;
uint8_t tmp2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 if(huart==&UI_UART && system_status==SYSTEM_READY)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a0b      	ldr	r2, [pc, #44]	; (8001e08 <HAL_UART_RxCpltCallback+0x38>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d10e      	bne.n	8001dfe <HAL_UART_RxCpltCallback+0x2e>
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <HAL_UART_RxCpltCallback+0x3c>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b0a      	cmp	r3, #10
 8001de6:	d10a      	bne.n	8001dfe <HAL_UART_RxCpltCallback+0x2e>
 {
	 UI_media_process_byte(&user_interface,user_interface.media_rx_byte);
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_UART_RxCpltCallback+0x40>)
 8001dea:	7b1b      	ldrb	r3, [r3, #12]
 8001dec:	4619      	mov	r1, r3
 8001dee:	4808      	ldr	r0, [pc, #32]	; (8001e10 <HAL_UART_RxCpltCallback+0x40>)
 8001df0:	f7fe fc66 	bl	80006c0 <UI_media_process_byte>
	 HAL_UART_Receive_IT(&UI_UART,&(user_interface.media_rx_byte),1);
 8001df4:	2201      	movs	r2, #1
 8001df6:	4907      	ldr	r1, [pc, #28]	; (8001e14 <HAL_UART_RxCpltCallback+0x44>)
 8001df8:	4803      	ldr	r0, [pc, #12]	; (8001e08 <HAL_UART_RxCpltCallback+0x38>)
 8001dfa:	f006 fadd 	bl	80083b8 <HAL_UART_Receive_IT>
 }
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000954 	.word	0x20000954
 8001e0c:	20001b70 	.word	0x20001b70
 8001e10:	20000a64 	.word	0x20000a64
 8001e14:	20000a70 	.word	0x20000a70

08001e18 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

 if(huart==&UI_UART)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a09      	ldr	r2, [pc, #36]	; (8001e48 <HAL_UART_TxCpltCallback+0x30>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d10b      	bne.n	8001e40 <HAL_UART_TxCpltCallback+0x28>
 {
  if(UI_media_get_byte(&user_interface,&tmp2)==UI_F_OK)
 8001e28:	4908      	ldr	r1, [pc, #32]	; (8001e4c <HAL_UART_TxCpltCallback+0x34>)
 8001e2a:	4809      	ldr	r0, [pc, #36]	; (8001e50 <HAL_UART_TxCpltCallback+0x38>)
 8001e2c:	f7fe fcc6 	bl	80007bc <UI_media_get_byte>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d104      	bne.n	8001e40 <HAL_UART_TxCpltCallback+0x28>
  {
	    HAL_UART_Transmit_IT(&UI_UART,&tmp2,1);
 8001e36:	2201      	movs	r2, #1
 8001e38:	4904      	ldr	r1, [pc, #16]	; (8001e4c <HAL_UART_TxCpltCallback+0x34>)
 8001e3a:	4803      	ldr	r0, [pc, #12]	; (8001e48 <HAL_UART_TxCpltCallback+0x30>)
 8001e3c:	f006 fa77 	bl	800832e <HAL_UART_Transmit_IT>
  }
 }
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000954 	.word	0x20000954
 8001e4c:	20001b84 	.word	0x20001b84
 8001e50:	20000a64 	.word	0x20000a64

08001e54 <icListen_prepare_messages>:

void icListen_prepare_messages(icListen_object_typedef* self_object)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  collect_msg_ptr.start_addr=(uint8_t*)&collect_msg;
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <icListen_prepare_messages+0x58>)
 8001e5e:	4a14      	ldr	r2, [pc, #80]	; (8001eb0 <icListen_prepare_messages+0x5c>)
 8001e60:	601a      	str	r2, [r3, #0]
  collect_msg_ptr.size=sizeof(icListen_collect_short_mask_msg);
 8001e62:	4b12      	ldr	r3, [pc, #72]	; (8001eac <icListen_prepare_messages+0x58>)
 8001e64:	2207      	movs	r2, #7
 8001e66:	605a      	str	r2, [r3, #4]

  status_msg_ptr.start_addr=(uint8_t*)&status_msg;
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <icListen_prepare_messages+0x60>)
 8001e6a:	4a13      	ldr	r2, [pc, #76]	; (8001eb8 <icListen_prepare_messages+0x64>)
 8001e6c:	601a      	str	r2, [r3, #0]
  status_msg_ptr.size=sizeof(icListen_enquire_device_msg);
 8001e6e:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <icListen_prepare_messages+0x60>)
 8001e70:	2206      	movs	r2, #6
 8001e72:	605a      	str	r2, [r3, #4]

  setup_msg_ptr.start_addr=(uint8_t*)&setup_msg;
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <icListen_prepare_messages+0x68>)
 8001e76:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <icListen_prepare_messages+0x6c>)
 8001e78:	601a      	str	r2, [r3, #0]
  setup_msg_ptr.size=sizeof(icListen_setup_full_msg);
 8001e7a:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <icListen_prepare_messages+0x68>)
 8001e7c:	2262      	movs	r2, #98	; 0x62
 8001e7e:	605a      	str	r2, [r3, #4]

  icListen_prepare_collect_msg(&collect_msg,0x20);
 8001e80:	2120      	movs	r1, #32
 8001e82:	480b      	ldr	r0, [pc, #44]	; (8001eb0 <icListen_prepare_messages+0x5c>)
 8001e84:	f7ff fbcf 	bl	8001626 <icListen_prepare_collect_msg>
  icListen_prepare_enquire_device_msg(&status_msg);
 8001e88:	480b      	ldr	r0, [pc, #44]	; (8001eb8 <icListen_prepare_messages+0x64>)
 8001e8a:	f7ff fbef 	bl	800166c <icListen_prepare_enquire_device_msg>
  icListen_prepare_setup_msg(&setup_msg,self_object->settings->wav_sample_rate,self_object->settings->wav_sample_bit_depth);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	6819      	ldr	r1, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4808      	ldr	r0, [pc, #32]	; (8001ec0 <icListen_prepare_messages+0x6c>)
 8001e9e:	f7ff fa61 	bl	8001364 <icListen_prepare_setup_msg>
  //HAL_UART_Transmit(&huart1,(uint8_t*)&setup_msg,98,100);
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	200009e8 	.word	0x200009e8
 8001eb0:	200009f0 	.word	0x200009f0
 8001eb4:	200009b8 	.word	0x200009b8
 8001eb8:	200009c0 	.word	0x200009c0
 8001ebc:	200009f8 	.word	0x200009f8
 8001ec0:	20000a00 	.word	0x20000a00

08001ec4 <open_new_wav_file>:

F_RES open_new_wav_file()
{
 8001ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec6:	b091      	sub	sp, #68	; 0x44
 8001ec8:	af06      	add	r7, sp, #24
	char file_name[30];
	file_bytes_left=((icListen.settings->wav_sample_bit_depth/8)*icListen.settings->wav_sample_rate*icListen.settings->file_duration)-44;
 8001eca:	4b33      	ldr	r3, [pc, #204]	; (8001f98 <open_new_wav_file+0xd4>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	08db      	lsrs	r3, r3, #3
 8001ed2:	4a31      	ldr	r2, [pc, #196]	; (8001f98 <open_new_wav_file+0xd4>)
 8001ed4:	6a12      	ldr	r2, [r2, #32]
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	fb02 f303 	mul.w	r3, r2, r3
 8001edc:	4a2e      	ldr	r2, [pc, #184]	; (8001f98 <open_new_wav_file+0xd4>)
 8001ede:	6a12      	ldr	r2, [r2, #32]
 8001ee0:	6892      	ldr	r2, [r2, #8]
 8001ee2:	fb02 f303 	mul.w	r3, r2, r3
 8001ee6:	3b2c      	subs	r3, #44	; 0x2c
 8001ee8:	4a2c      	ldr	r2, [pc, #176]	; (8001f9c <open_new_wav_file+0xd8>)
 8001eea:	6013      	str	r3, [r2, #0]
	read_time(&rtc);
 8001eec:	482c      	ldr	r0, [pc, #176]	; (8001fa0 <open_new_wav_file+0xdc>)
 8001eee:	f000 fc1b 	bl	8002728 <read_time>
	sprintf(file_name,"%d:%d_%02d%02d%02d_%02d%02d%02d.wav",microsd_storage.active_disk_indx,icListen.settings->file_index,rtc.time.Hours,rtc.time.Minutes,rtc.time.Seconds,rtc.date.Date,rtc.date.Month,rtc.date.Year);
 8001ef2:	4b2c      	ldr	r3, [pc, #176]	; (8001fa4 <open_new_wav_file+0xe0>)
 8001ef4:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 8001ef8:	469c      	mov	ip, r3
 8001efa:	4b27      	ldr	r3, [pc, #156]	; (8001f98 <open_new_wav_file+0xd4>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4a27      	ldr	r2, [pc, #156]	; (8001fa0 <open_new_wav_file+0xdc>)
 8001f02:	7812      	ldrb	r2, [r2, #0]
 8001f04:	4611      	mov	r1, r2
 8001f06:	4a26      	ldr	r2, [pc, #152]	; (8001fa0 <open_new_wav_file+0xdc>)
 8001f08:	7852      	ldrb	r2, [r2, #1]
 8001f0a:	4614      	mov	r4, r2
 8001f0c:	4a24      	ldr	r2, [pc, #144]	; (8001fa0 <open_new_wav_file+0xdc>)
 8001f0e:	7892      	ldrb	r2, [r2, #2]
 8001f10:	4615      	mov	r5, r2
 8001f12:	4a23      	ldr	r2, [pc, #140]	; (8001fa0 <open_new_wav_file+0xdc>)
 8001f14:	7d92      	ldrb	r2, [r2, #22]
 8001f16:	4616      	mov	r6, r2
 8001f18:	4a21      	ldr	r2, [pc, #132]	; (8001fa0 <open_new_wav_file+0xdc>)
 8001f1a:	7d52      	ldrb	r2, [r2, #21]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	4a20      	ldr	r2, [pc, #128]	; (8001fa0 <open_new_wav_file+0xdc>)
 8001f20:	7dd2      	ldrb	r2, [r2, #23]
 8001f22:	f107 0008 	add.w	r0, r7, #8
 8001f26:	9205      	str	r2, [sp, #20]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	9204      	str	r2, [sp, #16]
 8001f2c:	9603      	str	r6, [sp, #12]
 8001f2e:	9502      	str	r5, [sp, #8]
 8001f30:	9401      	str	r4, [sp, #4]
 8001f32:	9100      	str	r1, [sp, #0]
 8001f34:	4662      	mov	r2, ip
 8001f36:	491c      	ldr	r1, [pc, #112]	; (8001fa8 <open_new_wav_file+0xe4>)
 8001f38:	f013 f9da 	bl	80152f0 <siprintf>
	if(disk_kbytes_left>(file_bytes_left/1024)){
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <open_new_wav_file+0xd8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	0a9a      	lsrs	r2, r3, #10
 8001f42:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <open_new_wav_file+0xe8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d221      	bcs.n	8001f8e <open_new_wav_file+0xca>
	 if(wav_file_open(&wav_file,file_name,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,1)==F_OK){
 8001f4a:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <open_new_wav_file+0xd4>)
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <open_new_wav_file+0xd4>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f107 0108 	add.w	r1, r7, #8
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	9000      	str	r0, [sp, #0]
 8001f5e:	4814      	ldr	r0, [pc, #80]	; (8001fb0 <open_new_wav_file+0xec>)
 8001f60:	f001 f9a8 	bl	80032b4 <wav_file_open>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d111      	bne.n	8001f8e <open_new_wav_file+0xca>
		disk_kbytes_left-=(file_bytes_left/1024);
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <open_new_wav_file+0xe8>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <open_new_wav_file+0xd8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	0a9b      	lsrs	r3, r3, #10
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	4a0d      	ldr	r2, [pc, #52]	; (8001fac <open_new_wav_file+0xe8>)
 8001f78:	6013      	str	r3, [r2, #0]
		icListen.settings->file_index++;
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <open_new_wav_file+0xd4>)
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	3201      	adds	r2, #1
 8001f82:	60da      	str	r2, [r3, #12]
		mcu_flash_save(&mcu_flash);
 8001f84:	480b      	ldr	r0, [pc, #44]	; (8001fb4 <open_new_wav_file+0xf0>)
 8001f86:	f000 fb6d 	bl	8002664 <mcu_flash_save>
		return F_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e000      	b.n	8001f90 <open_new_wav_file+0xcc>
	 }
	}
    return F_ERR;
 8001f8e:	2301      	movs	r3, #1
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	372c      	adds	r7, #44	; 0x2c
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f98:	20000800 	.word	0x20000800
 8001f9c:	20001b74 	.word	0x20001b74
 8001fa0:	20001b88 	.word	0x20001b88
 8001fa4:	20000e9c 	.word	0x20000e9c
 8001fa8:	080175bc 	.word	0x080175bc
 8001fac:	20001b78 	.word	0x20001b78
 8001fb0:	200017b8 	.word	0x200017b8
 8001fb4:	20000e78 	.word	0x20000e78

08001fb8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001fc0:	f012 f972 	bl	80142a8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
   osEvent event;

  if(mcu_flash_read(&mcu_flash)!=F_OK){
 8001fc4:	483c      	ldr	r0, [pc, #240]	; (80020b8 <StartDefaultTask+0x100>)
 8001fc6:	f000 fb2d 	bl	8002624 <mcu_flash_read>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d02a      	beq.n	8002026 <StartDefaultTask+0x6e>
  		icListen.settings->wav_sample_rate=ICLISTEN_DEFAULT_WAV_SAMPLE_RATE;
 8001fd0:	4b3a      	ldr	r3, [pc, #232]	; (80020bc <StartDefaultTask+0x104>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 8001fde:	705a      	strb	r2, [r3, #1]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	709a      	strb	r2, [r3, #2]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	70da      	strb	r2, [r3, #3]
  		icListen.settings->wav_sample_bit_depth=ICLISTEN_DEFAULT_WAV_SAMPLE_BIT_DEPTH;
 8001fe8:	4b34      	ldr	r3, [pc, #208]	; (80020bc <StartDefaultTask+0x104>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f042 0218 	orr.w	r2, r2, #24
 8001ff2:	711a      	strb	r2, [r3, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	715a      	strb	r2, [r3, #5]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	719a      	strb	r2, [r3, #6]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	71da      	strb	r2, [r3, #7]
  		icListen.settings->file_duration=ICLISTEN_DEFAULT_FILE_DURATION;
 8002000:	4b2e      	ldr	r3, [pc, #184]	; (80020bc <StartDefaultTask+0x104>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	2200      	movs	r2, #0
 8002006:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 800200a:	721a      	strb	r2, [r3, #8]
 800200c:	2200      	movs	r2, #0
 800200e:	725a      	strb	r2, [r3, #9]
 8002010:	2200      	movs	r2, #0
 8002012:	729a      	strb	r2, [r3, #10]
 8002014:	2200      	movs	r2, #0
 8002016:	72da      	strb	r2, [r3, #11]
  		mcu_flash_save(&mcu_flash);
 8002018:	4827      	ldr	r0, [pc, #156]	; (80020b8 <StartDefaultTask+0x100>)
 800201a:	f000 fb23 	bl	8002664 <mcu_flash_save>
  }
  while(microsd_storage.status!=STORAGE_NOT_INITTIALIZED) {osDelay(1);}
 800201e:	e002      	b.n	8002026 <StartDefaultTask+0x6e>
 8002020:	2001      	movs	r0, #1
 8002022:	f00f feb8 	bl	8011d96 <osDelay>
 8002026:	4b26      	ldr	r3, [pc, #152]	; (80020c0 <StartDefaultTask+0x108>)
 8002028:	f893 3919 	ldrb.w	r3, [r3, #2329]	; 0x919
 800202c:	2b01      	cmp	r3, #1
 800202e:	d1f7      	bne.n	8002020 <StartDefaultTask+0x68>
  system_status=SYSTEM_READY;
 8002030:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <StartDefaultTask+0x10c>)
 8002032:	220a      	movs	r2, #10
 8002034:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  for(;;)
  {
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 8002036:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <StartDefaultTask+0x110>)
 8002038:	6819      	ldr	r1, [r3, #0]
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	f04f 32ff 	mov.w	r2, #4294967295
 8002042:	4618      	mov	r0, r3
 8002044:	f00f ff24 	bl	8011e90 <osMessageGet>

	  if(event.status == osEventMessage)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b10      	cmp	r3, #16
 800204c:	d130      	bne.n	80020b0 <StartDefaultTask+0xf8>
	  {
		switch(event.value.v)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	2b03      	cmp	r3, #3
 8002052:	d006      	beq.n	8002062 <StartDefaultTask+0xaa>
 8002054:	2b03      	cmp	r3, #3
 8002056:	d82d      	bhi.n	80020b4 <StartDefaultTask+0xfc>
 8002058:	2b01      	cmp	r3, #1
 800205a:	d026      	beq.n	80020aa <StartDefaultTask+0xf2>
 800205c:	2b02      	cmp	r3, #2
 800205e:	d004      	beq.n	800206a <StartDefaultTask+0xb2>
		 case APPLICATION_START:
		   USB_set_line_coding();
		 break;

		 default:
		 break;
 8002060:	e028      	b.n	80020b4 <StartDefaultTask+0xfc>
			 icListen_init_sensor_status(&icListen);
 8002062:	4816      	ldr	r0, [pc, #88]	; (80020bc <StartDefaultTask+0x104>)
 8002064:	f7ff f956 	bl	8001314 <icListen_init_sensor_status>
		 break;
 8002068:	e025      	b.n	80020b6 <StartDefaultTask+0xfe>
			 osDelay(5000);
 800206a:	f241 3088 	movw	r0, #5000	; 0x1388
 800206e:	f00f fe92 	bl	8011d96 <osDelay>
			 icListen_init_sensor_status(&icListen);
 8002072:	4812      	ldr	r0, [pc, #72]	; (80020bc <StartDefaultTask+0x104>)
 8002074:	f7ff f94e 	bl	8001314 <icListen_init_sensor_status>
			 icListen.status=ICLISTEN_CONNECTED;
 8002078:	4b10      	ldr	r3, [pc, #64]	; (80020bc <StartDefaultTask+0x104>)
 800207a:	2200      	movs	r2, #0
 800207c:	775a      	strb	r2, [r3, #29]
			 osMessagePut(USB_txHandle,(uint32_t)&status_msg_ptr, 0);
 800207e:	4b13      	ldr	r3, [pc, #76]	; (80020cc <StartDefaultTask+0x114>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4913      	ldr	r1, [pc, #76]	; (80020d0 <StartDefaultTask+0x118>)
 8002084:	2200      	movs	r2, #0
 8002086:	4618      	mov	r0, r3
 8002088:	f00f fec2 	bl	8011e10 <osMessagePut>
			 osMessagePut(USB_txHandle,(uint32_t)&setup_msg_ptr, 0);
 800208c:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <StartDefaultTask+0x114>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4910      	ldr	r1, [pc, #64]	; (80020d4 <StartDefaultTask+0x11c>)
 8002092:	2200      	movs	r2, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f00f febb 	bl	8011e10 <osMessagePut>
			 osMessagePut(USB_txHandle,(uint32_t)&collect_msg_ptr, 0);
 800209a:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <StartDefaultTask+0x114>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	490e      	ldr	r1, [pc, #56]	; (80020d8 <StartDefaultTask+0x120>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	4618      	mov	r0, r3
 80020a4:	f00f feb4 	bl	8011e10 <osMessagePut>
		 break;
 80020a8:	e005      	b.n	80020b6 <StartDefaultTask+0xfe>
		   USB_set_line_coding();
 80020aa:	f012 f8cf 	bl	801424c <USB_set_line_coding>
		 break;
 80020ae:	e002      	b.n	80020b6 <StartDefaultTask+0xfe>
		 }
	   }
 80020b0:	bf00      	nop
 80020b2:	e7c0      	b.n	8002036 <StartDefaultTask+0x7e>
		 break;
 80020b4:	bf00      	nop
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 80020b6:	e7be      	b.n	8002036 <StartDefaultTask+0x7e>
 80020b8:	20000e78 	.word	0x20000e78
 80020bc:	20000800 	.word	0x20000800
 80020c0:	20000e9c 	.word	0x20000e9c
 80020c4:	20001b70 	.word	0x20001b70
 80020c8:	200009a8 	.word	0x200009a8
 80020cc:	200009b0 	.word	0x200009b0
 80020d0:	200009b8 	.word	0x200009b8
 80020d4:	200009f8 	.word	0x200009f8
 80020d8:	200009e8 	.word	0x200009e8

080020dc <storage_f>:
* @retval None
*/

/* USER CODE END Header_storage_f */
void storage_f(void const * argument)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b0a0      	sub	sp, #128	; 0x80
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN storage_f */
  osDelay(500);
 80020e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020e8:	f00f fe55 	bl	8011d96 <osDelay>
  char info_msg[100];

  memory_region_pointer* data_ptr;
  osEvent storage_w_event;

  sprintf(info_msg,"Wait for storage init....");
 80020ec:	f107 0318 	add.w	r3, r7, #24
 80020f0:	499b      	ldr	r1, [pc, #620]	; (8002360 <storage_f+0x284>)
 80020f2:	4618      	mov	r0, r3
 80020f4:	f013 f8fc 	bl	80152f0 <siprintf>
  HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 80020f8:	f107 0318 	add.w	r3, r7, #24
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe f871 	bl	80001e4 <strlen>
 8002102:	4603      	mov	r3, r0
 8002104:	b29a      	uxth	r2, r3
 8002106:	f107 0118 	add.w	r1, r7, #24
 800210a:	2364      	movs	r3, #100	; 0x64
 800210c:	4895      	ldr	r0, [pc, #596]	; (8002364 <storage_f+0x288>)
 800210e:	f006 f87c 	bl	800820a <HAL_UART_Transmit>

  sd_storage_link_ss(&microsd_storage,0,SS_SD1_Pin,GPIOA);
 8002112:	4b95      	ldr	r3, [pc, #596]	; (8002368 <storage_f+0x28c>)
 8002114:	2202      	movs	r2, #2
 8002116:	2100      	movs	r1, #0
 8002118:	4894      	ldr	r0, [pc, #592]	; (800236c <storage_f+0x290>)
 800211a:	f7ff f899 	bl	8001250 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,1,SS_SD2_Pin,GPIOA);
 800211e:	4b92      	ldr	r3, [pc, #584]	; (8002368 <storage_f+0x28c>)
 8002120:	2204      	movs	r2, #4
 8002122:	2101      	movs	r1, #1
 8002124:	4891      	ldr	r0, [pc, #580]	; (800236c <storage_f+0x290>)
 8002126:	f7ff f893 	bl	8001250 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,2,SS_SD3_Pin,SS_SD3_GPIO_Port);
 800212a:	4b91      	ldr	r3, [pc, #580]	; (8002370 <storage_f+0x294>)
 800212c:	2202      	movs	r2, #2
 800212e:	2102      	movs	r1, #2
 8002130:	488e      	ldr	r0, [pc, #568]	; (800236c <storage_f+0x290>)
 8002132:	f7ff f88d 	bl	8001250 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,3,SS_SD4_Pin,GPIOA);
 8002136:	4b8c      	ldr	r3, [pc, #560]	; (8002368 <storage_f+0x28c>)
 8002138:	2280      	movs	r2, #128	; 0x80
 800213a:	2103      	movs	r1, #3
 800213c:	488b      	ldr	r0, [pc, #556]	; (800236c <storage_f+0x290>)
 800213e:	f7ff f887 	bl	8001250 <sd_storage_link_ss>
  while(sd_storage_init(&microsd_storage)!=F_OK) osDelay(1000);
 8002142:	e003      	b.n	800214c <storage_f+0x70>
 8002144:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002148:	f00f fe25 	bl	8011d96 <osDelay>
 800214c:	4887      	ldr	r0, [pc, #540]	; (800236c <storage_f+0x290>)
 800214e:	f7fe ffbd 	bl	80010cc <sd_storage_init>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1f5      	bne.n	8002144 <storage_f+0x68>

  sprintf(info_msg,"detected %d cards.\r",microsd_storage.num_of_discs);
 8002158:	4b84      	ldr	r3, [pc, #528]	; (800236c <storage_f+0x290>)
 800215a:	f893 3918 	ldrb.w	r3, [r3, #2328]	; 0x918
 800215e:	461a      	mov	r2, r3
 8002160:	f107 0318 	add.w	r3, r7, #24
 8002164:	4983      	ldr	r1, [pc, #524]	; (8002374 <storage_f+0x298>)
 8002166:	4618      	mov	r0, r3
 8002168:	f013 f8c2 	bl	80152f0 <siprintf>
  HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 800216c:	f107 0318 	add.w	r3, r7, #24
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe f837 	bl	80001e4 <strlen>
 8002176:	4603      	mov	r3, r0
 8002178:	b29a      	uxth	r2, r3
 800217a:	f107 0118 	add.w	r1, r7, #24
 800217e:	2364      	movs	r3, #100	; 0x64
 8002180:	4878      	ldr	r0, [pc, #480]	; (8002364 <storage_f+0x288>)
 8002182:	f006 f842 	bl	800820a <HAL_UART_Transmit>



  disk_kbytes_left=microsd_storage.disks[microsd_storage.active_disk_indx].free_space;
 8002186:	4b79      	ldr	r3, [pc, #484]	; (800236c <storage_f+0x290>)
 8002188:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 800218c:	4619      	mov	r1, r3
 800218e:	4a77      	ldr	r2, [pc, #476]	; (800236c <storage_f+0x290>)
 8002190:	f44f 7311 	mov.w	r3, #580	; 0x244
 8002194:	fb01 f303 	mul.w	r3, r1, r3
 8002198:	4413      	add	r3, r2
 800219a:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a75      	ldr	r2, [pc, #468]	; (8002378 <storage_f+0x29c>)
 80021a2:	6013      	str	r3, [r2, #0]
  if(open_new_wav_file()!=F_OK){
 80021a4:	f7ff fe8e 	bl	8001ec4 <open_new_wav_file>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d030      	beq.n	8002210 <storage_f+0x134>
  do{
     if(sd_storage_set_next_disk(&microsd_storage)!=F_OK){
 80021ae:	486f      	ldr	r0, [pc, #444]	; (800236c <storage_f+0x290>)
 80021b0:	f7ff f86c 	bl	800128c <sd_storage_set_next_disk>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d016      	beq.n	80021e8 <storage_f+0x10c>
    	sprintf(info_msg,"End of storage reached.\r");
 80021ba:	f107 0318 	add.w	r3, r7, #24
 80021be:	496f      	ldr	r1, [pc, #444]	; (800237c <storage_f+0x2a0>)
 80021c0:	4618      	mov	r0, r3
 80021c2:	f013 f895 	bl	80152f0 <siprintf>
  	    HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 80021c6:	f107 0318 	add.w	r3, r7, #24
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe f80a 	bl	80001e4 <strlen>
 80021d0:	4603      	mov	r3, r0
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	f107 0118 	add.w	r1, r7, #24
 80021d8:	2364      	movs	r3, #100	; 0x64
 80021da:	4862      	ldr	r0, [pc, #392]	; (8002364 <storage_f+0x288>)
 80021dc:	f006 f815 	bl	800820a <HAL_UART_Transmit>
      	while(1){osDelay(1);}
 80021e0:	2001      	movs	r0, #1
 80021e2:	f00f fdd8 	bl	8011d96 <osDelay>
 80021e6:	e7fb      	b.n	80021e0 <storage_f+0x104>
     }
  	 disk_kbytes_left=microsd_storage.disks[microsd_storage.active_disk_indx].free_space;
 80021e8:	4b60      	ldr	r3, [pc, #384]	; (800236c <storage_f+0x290>)
 80021ea:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 80021ee:	4619      	mov	r1, r3
 80021f0:	4a5e      	ldr	r2, [pc, #376]	; (800236c <storage_f+0x290>)
 80021f2:	f44f 7311 	mov.w	r3, #580	; 0x244
 80021f6:	fb01 f303 	mul.w	r3, r1, r3
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a5d      	ldr	r2, [pc, #372]	; (8002378 <storage_f+0x29c>)
 8002204:	6013      	str	r3, [r2, #0]
   }while(open_new_wav_file()!=F_OK);
 8002206:	f7ff fe5d 	bl	8001ec4 <open_new_wav_file>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1ce      	bne.n	80021ae <storage_f+0xd2>

  /* Infinite loop */
  for(;;)
  {

   storage_w_event = osMessageGet(storage_wHandle, osWaitForever);
 8002210:	4b5b      	ldr	r3, [pc, #364]	; (8002380 <storage_f+0x2a4>)
 8002212:	6819      	ldr	r1, [r3, #0]
 8002214:	f107 030c 	add.w	r3, r7, #12
 8002218:	f04f 32ff 	mov.w	r2, #4294967295
 800221c:	4618      	mov	r0, r3
 800221e:	f00f fe37 	bl	8011e90 <osMessageGet>
   if(storage_w_event.status == osEventMessage){
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b10      	cmp	r3, #16
 8002226:	d1f3      	bne.n	8002210 <storage_f+0x134>
	 data_ptr=(memory_region_pointer*)storage_w_event.value.v;
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	67fb      	str	r3, [r7, #124]	; 0x7c


	 if(file_bytes_left>data_ptr->size){
 800222c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	4b54      	ldr	r3, [pc, #336]	; (8002384 <storage_f+0x2a8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d22c      	bcs.n	8002292 <storage_f+0x1b6>
	   if(wav_file_write(&wav_file,data_ptr->start_addr,data_ptr->size)==F_OK){
 8002238:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800223a:	6819      	ldr	r1, [r3, #0]
 800223c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	461a      	mov	r2, r3
 8002242:	4851      	ldr	r0, [pc, #324]	; (8002388 <storage_f+0x2ac>)
 8002244:	f001 f8eb 	bl	800341e <wav_file_write>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d107      	bne.n	800225e <storage_f+0x182>
	      file_bytes_left-=data_ptr->size;
 800224e:	4b4d      	ldr	r3, [pc, #308]	; (8002384 <storage_f+0x2a8>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	4a4a      	ldr	r2, [pc, #296]	; (8002384 <storage_f+0x2a8>)
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	e7d8      	b.n	8002210 <storage_f+0x134>
	   }
	   else{
	      wav_file_close(&wav_file);
 800225e:	484a      	ldr	r0, [pc, #296]	; (8002388 <storage_f+0x2ac>)
 8002260:	f001 f8ac 	bl	80033bc <wav_file_close>
	      sprintf(info_msg,"Write error.\r");
 8002264:	f107 0318 	add.w	r3, r7, #24
 8002268:	4948      	ldr	r1, [pc, #288]	; (800238c <storage_f+0x2b0>)
 800226a:	4618      	mov	r0, r3
 800226c:	f013 f840 	bl	80152f0 <siprintf>
	      HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8002270:	f107 0318 	add.w	r3, r7, #24
 8002274:	4618      	mov	r0, r3
 8002276:	f7fd ffb5 	bl	80001e4 <strlen>
 800227a:	4603      	mov	r3, r0
 800227c:	b29a      	uxth	r2, r3
 800227e:	f107 0118 	add.w	r1, r7, #24
 8002282:	2364      	movs	r3, #100	; 0x64
 8002284:	4837      	ldr	r0, [pc, #220]	; (8002364 <storage_f+0x288>)
 8002286:	f005 ffc0 	bl	800820a <HAL_UART_Transmit>
	      while(1){osDelay(1);}
 800228a:	2001      	movs	r0, #1
 800228c:	f00f fd83 	bl	8011d96 <osDelay>
 8002290:	e7fb      	b.n	800228a <storage_f+0x1ae>
	   }
	 }
	 else{
		wav_file_close(&wav_file);
 8002292:	483d      	ldr	r0, [pc, #244]	; (8002388 <storage_f+0x2ac>)
 8002294:	f001 f892 	bl	80033bc <wav_file_close>
		if(open_new_wav_file()!=F_OK){
 8002298:	f7ff fe14 	bl	8001ec4 <open_new_wav_file>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d030      	beq.n	8002304 <storage_f+0x228>
		  do{
				if(sd_storage_set_next_disk(&microsd_storage)!=F_OK){
 80022a2:	4832      	ldr	r0, [pc, #200]	; (800236c <storage_f+0x290>)
 80022a4:	f7fe fff2 	bl	800128c <sd_storage_set_next_disk>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d016      	beq.n	80022dc <storage_f+0x200>
	        		sprintf(info_msg,"End of storage reached.\r");
 80022ae:	f107 0318 	add.w	r3, r7, #24
 80022b2:	4932      	ldr	r1, [pc, #200]	; (800237c <storage_f+0x2a0>)
 80022b4:	4618      	mov	r0, r3
 80022b6:	f013 f81b 	bl	80152f0 <siprintf>
		        	HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 80022ba:	f107 0318 	add.w	r3, r7, #24
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fd ff90 	bl	80001e4 <strlen>
 80022c4:	4603      	mov	r3, r0
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	f107 0118 	add.w	r1, r7, #24
 80022cc:	2364      	movs	r3, #100	; 0x64
 80022ce:	4825      	ldr	r0, [pc, #148]	; (8002364 <storage_f+0x288>)
 80022d0:	f005 ff9b 	bl	800820a <HAL_UART_Transmit>
		        	while(1){osDelay(1);}
 80022d4:	2001      	movs	r0, #1
 80022d6:	f00f fd5e 	bl	8011d96 <osDelay>
 80022da:	e7fb      	b.n	80022d4 <storage_f+0x1f8>
				}
				disk_kbytes_left=microsd_storage.disks[microsd_storage.active_disk_indx].free_space;
 80022dc:	4b23      	ldr	r3, [pc, #140]	; (800236c <storage_f+0x290>)
 80022de:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 80022e2:	4619      	mov	r1, r3
 80022e4:	4a21      	ldr	r2, [pc, #132]	; (800236c <storage_f+0x290>)
 80022e6:	f44f 7311 	mov.w	r3, #580	; 0x244
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a20      	ldr	r2, [pc, #128]	; (8002378 <storage_f+0x29c>)
 80022f8:	6013      	str	r3, [r2, #0]
		   }while(open_new_wav_file()!=F_OK);
 80022fa:	f7ff fde3 	bl	8001ec4 <open_new_wav_file>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1ce      	bne.n	80022a2 <storage_f+0x1c6>
	   	 }
		 if(wav_file_write(&wav_file,data_ptr->start_addr,data_ptr->size)==F_OK){
 8002304:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002306:	6819      	ldr	r1, [r3, #0]
 8002308:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	461a      	mov	r2, r3
 800230e:	481e      	ldr	r0, [pc, #120]	; (8002388 <storage_f+0x2ac>)
 8002310:	f001 f885 	bl	800341e <wav_file_write>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d107      	bne.n	800232a <storage_f+0x24e>
			 file_bytes_left-=data_ptr->size;
 800231a:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <storage_f+0x2a8>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	4a17      	ldr	r2, [pc, #92]	; (8002384 <storage_f+0x2a8>)
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	e772      	b.n	8002210 <storage_f+0x134>

	     }
		 else{
			 wav_file_close(&wav_file);
 800232a:	4817      	ldr	r0, [pc, #92]	; (8002388 <storage_f+0x2ac>)
 800232c:	f001 f846 	bl	80033bc <wav_file_close>
		     sprintf(info_msg,"Write error.\r");
 8002330:	f107 0318 	add.w	r3, r7, #24
 8002334:	4915      	ldr	r1, [pc, #84]	; (800238c <storage_f+0x2b0>)
 8002336:	4618      	mov	r0, r3
 8002338:	f012 ffda 	bl	80152f0 <siprintf>
		     HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 800233c:	f107 0318 	add.w	r3, r7, #24
 8002340:	4618      	mov	r0, r3
 8002342:	f7fd ff4f 	bl	80001e4 <strlen>
 8002346:	4603      	mov	r3, r0
 8002348:	b29a      	uxth	r2, r3
 800234a:	f107 0118 	add.w	r1, r7, #24
 800234e:	2364      	movs	r3, #100	; 0x64
 8002350:	4804      	ldr	r0, [pc, #16]	; (8002364 <storage_f+0x288>)
 8002352:	f005 ff5a 	bl	800820a <HAL_UART_Transmit>
		     while(1){osDelay(1);}
 8002356:	2001      	movs	r0, #1
 8002358:	f00f fd1d 	bl	8011d96 <osDelay>
 800235c:	e7fb      	b.n	8002356 <storage_f+0x27a>
 800235e:	bf00      	nop
 8002360:	080175e0 	.word	0x080175e0
 8002364:	20000954 	.word	0x20000954
 8002368:	40020000 	.word	0x40020000
 800236c:	20000e9c 	.word	0x20000e9c
 8002370:	40020800 	.word	0x40020800
 8002374:	080175fc 	.word	0x080175fc
 8002378:	20001b78 	.word	0x20001b78
 800237c:	08017610 	.word	0x08017610
 8002380:	200009b4 	.word	0x200009b4
 8002384:	20001b74 	.word	0x20001b74
 8002388:	200017b8 	.word	0x200017b8
 800238c:	0801762c 	.word	0x0801762c

08002390 <icListen_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_icListen_f */
void icListen_f(void const * argument)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b0a0      	sub	sp, #128	; 0x80
 8002394:	af00      	add	r7, sp, #0
 8002396:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN icListen_f */
  /* Infinite loop */
  uint8_t msg_type;
  memory_region_pointer* usb_tx_msg_ptr;
  memory_region_pointer  parsed_data_ptr[10];
  uint8_t                parsed_data_ptr_index=0;
 8002398:	2300      	movs	r3, #0
 800239a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  osEvent event;

  while(system_status!=SYSTEM_READY) {osDelay(1);}
 800239e:	e002      	b.n	80023a6 <icListen_f+0x16>
 80023a0:	2001      	movs	r0, #1
 80023a2:	f00f fcf8 	bl	8011d96 <osDelay>
 80023a6:	4b49      	ldr	r3, [pc, #292]	; (80024cc <icListen_f+0x13c>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b0a      	cmp	r3, #10
 80023ac:	d1f8      	bne.n	80023a0 <icListen_f+0x10>
  icListen_init_sensor_status(&icListen);
 80023ae:	4848      	ldr	r0, [pc, #288]	; (80024d0 <icListen_f+0x140>)
 80023b0:	f7fe ffb0 	bl	8001314 <icListen_init_sensor_status>
  icListen.settings=(icListen_settings_typedef*)mcu_flash.data.raw_data;
 80023b4:	4b46      	ldr	r3, [pc, #280]	; (80024d0 <icListen_f+0x140>)
 80023b6:	4a47      	ldr	r2, [pc, #284]	; (80024d4 <icListen_f+0x144>)
 80023b8:	621a      	str	r2, [r3, #32]
  icListen_prepare_messages(&icListen);
 80023ba:	4845      	ldr	r0, [pc, #276]	; (80024d0 <icListen_f+0x140>)
 80023bc:	f7ff fd4a 	bl	8001e54 <icListen_prepare_messages>
  icListen.delay_time=((3000*1000)/((icListen.settings->wav_sample_bit_depth/8)*icListen.settings->wav_sample_rate))/3;
 80023c0:	4b43      	ldr	r3, [pc, #268]	; (80024d0 <icListen_f+0x140>)
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	08db      	lsrs	r3, r3, #3
 80023c8:	4a41      	ldr	r2, [pc, #260]	; (80024d0 <icListen_f+0x140>)
 80023ca:	6a12      	ldr	r2, [r2, #32]
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	4a41      	ldr	r2, [pc, #260]	; (80024d8 <icListen_f+0x148>)
 80023d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d8:	b29a      	uxth	r2, r3
 80023da:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <icListen_f+0x140>)
 80023dc:	861a      	strh	r2, [r3, #48]	; 0x30


  /* Infinite loop */
  for(;;)
  {
	   event = osMessageGet(USB_txHandle, osWaitForever);
 80023de:	4b3f      	ldr	r3, [pc, #252]	; (80024dc <icListen_f+0x14c>)
 80023e0:	6819      	ldr	r1, [r3, #0]
 80023e2:	f107 0318 	add.w	r3, r7, #24
 80023e6:	f04f 32ff 	mov.w	r2, #4294967295
 80023ea:	4618      	mov	r0, r3
 80023ec:	f00f fd50 	bl	8011e90 <osMessageGet>
	   if(icListen.status==ICLISTEN_CONNECTED){
 80023f0:	4b37      	ldr	r3, [pc, #220]	; (80024d0 <icListen_f+0x140>)
 80023f2:	7f5b      	ldrb	r3, [r3, #29]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f2      	bne.n	80023de <icListen_f+0x4e>
		if(event.status == osEventMessage){
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	2b10      	cmp	r3, #16
 80023fc:	d109      	bne.n	8002412 <icListen_f+0x82>
		   usb_tx_msg_ptr=(memory_region_pointer*)event.value.v;
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	67bb      	str	r3, [r7, #120]	; 0x78
		   USB_transmit_msg(usb_tx_msg_ptr->start_addr,usb_tx_msg_ptr->size);
 8002402:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4619      	mov	r1, r3
 800240c:	4610      	mov	r0, r2
 800240e:	f011 feed 	bl	80141ec <USB_transmit_msg>
		}

		event = osMessageGet(USB_rxHandle, 20);
 8002412:	4b33      	ldr	r3, [pc, #204]	; (80024e0 <icListen_f+0x150>)
 8002414:	6819      	ldr	r1, [r3, #0]
 8002416:	463b      	mov	r3, r7
 8002418:	2214      	movs	r2, #20
 800241a:	4618      	mov	r0, r3
 800241c:	f00f fd38 	bl	8011e90 <osMessageGet>
 8002420:	f107 0318 	add.w	r3, r7, #24
 8002424:	463a      	mov	r2, r7
 8002426:	ca07      	ldmia	r2, {r0, r1, r2}
 8002428:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if(event.status == osEventMessage){
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	2b10      	cmp	r3, #16
 8002430:	d1d5      	bne.n	80023de <icListen_f+0x4e>

		   if(icListen_parse_msg((uint8_t*)event.value.v,&icListen,&msg_type,&parsed_data_ptr[parsed_data_ptr_index])==F_OK)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	4618      	mov	r0, r3
 8002436:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800243a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4413      	add	r3, r2
 8002442:	f107 0277 	add.w	r2, r7, #119	; 0x77
 8002446:	4922      	ldr	r1, [pc, #136]	; (80024d0 <icListen_f+0x140>)
 8002448:	f7ff f92b 	bl	80016a2 <icListen_parse_msg>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1c5      	bne.n	80023de <icListen_f+0x4e>
		   {
			   if(msg_type==MSG_TYPE_COLLECT_DATA){
 8002452:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002456:	2b43      	cmp	r3, #67	; 0x43
 8002458:	d1c1      	bne.n	80023de <icListen_f+0x4e>
			     if(parsed_data_ptr[parsed_data_ptr_index].size>7){
 800245a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	3380      	adds	r3, #128	; 0x80
 8002462:	443b      	add	r3, r7
 8002464:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8002468:	2b07      	cmp	r3, #7
 800246a:	d91d      	bls.n	80024a8 <icListen_f+0x118>
				  osMessagePut(storage_wHandle,(uint32_t)&parsed_data_ptr[parsed_data_ptr_index],0);
 800246c:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <icListen_f+0x154>)
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002474:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	4413      	add	r3, r2
 800247c:	2200      	movs	r2, #0
 800247e:	4619      	mov	r1, r3
 8002480:	f00f fcc6 	bl	8011e10 <osMessagePut>
				  parsed_data_ptr_index++;
 8002484:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002488:	3301      	adds	r3, #1
 800248a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				  parsed_data_ptr_index%=10;
 800248e:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <icListen_f+0x158>)
 8002494:	fba3 1302 	umull	r1, r3, r3, r2
 8002498:	08d9      	lsrs	r1, r3, #3
 800249a:	460b      	mov	r3, r1
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			     }
			     if(icListen.delay_time>0) osDelay(icListen.delay_time);
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <icListen_f+0x140>)
 80024aa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d004      	beq.n	80024ba <icListen_f+0x12a>
 80024b0:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <icListen_f+0x140>)
 80024b2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80024b4:	4618      	mov	r0, r3
 80024b6:	f00f fc6e 	bl	8011d96 <osDelay>
				 osMessagePut(USB_txHandle,(uint32_t)&collect_msg_ptr, 0);
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <icListen_f+0x14c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	490b      	ldr	r1, [pc, #44]	; (80024ec <icListen_f+0x15c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f00f fca4 	bl	8011e10 <osMessagePut>
	   event = osMessageGet(USB_txHandle, osWaitForever);
 80024c8:	e789      	b.n	80023de <icListen_f+0x4e>
 80024ca:	bf00      	nop
 80024cc:	20001b70 	.word	0x20001b70
 80024d0:	20000800 	.word	0x20000800
 80024d4:	20000e84 	.word	0x20000e84
 80024d8:	000f4240 	.word	0x000f4240
 80024dc:	200009b0 	.word	0x200009b0
 80024e0:	200009ac 	.word	0x200009ac
 80024e4:	200009b4 	.word	0x200009b4
 80024e8:	cccccccd 	.word	0xcccccccd
 80024ec:	200009e8 	.word	0x200009e8

080024f0 <uart_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_f */
void uart_f(void const * argument)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart_f */
  uint8_t tmp;
  while(system_status!=SYSTEM_READY) {osDelay(1);}
 80024f8:	e002      	b.n	8002500 <uart_f+0x10>
 80024fa:	2001      	movs	r0, #1
 80024fc:	f00f fc4b 	bl	8011d96 <osDelay>
 8002500:	4b10      	ldr	r3, [pc, #64]	; (8002544 <uart_f+0x54>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b0a      	cmp	r3, #10
 8002506:	d1f8      	bne.n	80024fa <uart_f+0xa>
  user_interface.media_status=UI_MEDIA_READY;
 8002508:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <uart_f+0x58>)
 800250a:	220a      	movs	r2, #10
 800250c:	735a      	strb	r2, [r3, #13]
  /* Infinite loop */

  for(;;)
  {
   if(UI_UART.gState!=HAL_UART_STATE_BUSY_TX)
 800250e:	4b0f      	ldr	r3, [pc, #60]	; (800254c <uart_f+0x5c>)
 8002510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b21      	cmp	r3, #33	; 0x21
 8002518:	d00f      	beq.n	800253a <uart_f+0x4a>
   {
 	if(UI_media_get_byte(&user_interface,&tmp)==UI_F_OK) HAL_UART_Transmit_IT(&UI_UART,&tmp,1);
 800251a:	f107 030f 	add.w	r3, r7, #15
 800251e:	4619      	mov	r1, r3
 8002520:	4809      	ldr	r0, [pc, #36]	; (8002548 <uart_f+0x58>)
 8002522:	f7fe f94b 	bl	80007bc <UI_media_get_byte>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d106      	bne.n	800253a <uart_f+0x4a>
 800252c:	f107 030f 	add.w	r3, r7, #15
 8002530:	2201      	movs	r2, #1
 8002532:	4619      	mov	r1, r3
 8002534:	4805      	ldr	r0, [pc, #20]	; (800254c <uart_f+0x5c>)
 8002536:	f005 fefa 	bl	800832e <HAL_UART_Transmit_IT>
   }
   osDelay(1);
 800253a:	2001      	movs	r0, #1
 800253c:	f00f fc2b 	bl	8011d96 <osDelay>
   if(UI_UART.gState!=HAL_UART_STATE_BUSY_TX)
 8002540:	e7e5      	b.n	800250e <uart_f+0x1e>
 8002542:	bf00      	nop
 8002544:	20001b70 	.word	0x20001b70
 8002548:	20000a64 	.word	0x20000a64
 800254c:	20000954 	.word	0x20000954

08002550 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a04      	ldr	r2, [pc, #16]	; (8002570 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d101      	bne.n	8002566 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002562:	f000 ffcb 	bl	80034fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40010000 	.word	0x40010000

08002574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002578:	b672      	cpsid	i
}
 800257a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800257c:	e7fe      	b.n	800257c <Error_Handler+0x8>
	...

08002580 <mcu_flash_init>:
#if defined(STM32F205xx)  //KB
uint32_t  flash_block_size[]={16,16,16,16,64,128,128,128,128,128,128,128};
#endif

void mcu_flash_init(mcu_flash_typedef* mcu_flash_obj,uint32_t first_block)
{
 8002580:	b480      	push	{r7}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
	uint32_t temp=0;
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
	int32_t temp2=0;
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
	if(first_block<FLASH_NUM_OF_BLOCKS){
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b0b      	cmp	r3, #11
 8002596:	d83d      	bhi.n	8002614 <mcu_flash_init+0x94>
      mcu_flash_obj->first_block_num=first_block;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	605a      	str	r2, [r3, #4]
      for(int i=0;i<first_block;i++) temp+=flash_block_size[i];
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	e009      	b.n	80025b8 <mcu_flash_init+0x38>
 80025a4:	4a1e      	ldr	r2, [pc, #120]	; (8002620 <mcu_flash_init+0xa0>)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	4413      	add	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	3301      	adds	r3, #1
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d8f1      	bhi.n	80025a4 <mcu_flash_init+0x24>
	  mcu_flash_obj->first_block_addr=FLASH_BASE+(temp*1024);
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80025c6:	029a      	lsls	r2, r3, #10
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	601a      	str	r2, [r3, #0]

	  temp2=FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE;
 80025cc:	2316      	movs	r3, #22
 80025ce:	613b      	str	r3, [r7, #16]
	  mcu_flash_obj->num_of_blocks=0;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	721a      	strb	r2, [r3, #8]
 80025d6:	2200      	movs	r2, #0
 80025d8:	725a      	strb	r2, [r3, #9]
 80025da:	2200      	movs	r2, #0
 80025dc:	729a      	strb	r2, [r3, #10]
 80025de:	2200      	movs	r2, #0
 80025e0:	72da      	strb	r2, [r3, #11]
	  for(int i=mcu_flash_obj->first_block_num;i<FLASH_NUM_OF_BLOCKS&&temp2>0;i++) {
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	60bb      	str	r3, [r7, #8]
 80025e8:	e00e      	b.n	8002608 <mcu_flash_init+0x88>
		  temp2-=flash_block_size[i];
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	490c      	ldr	r1, [pc, #48]	; (8002620 <mcu_flash_init+0xa0>)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	613b      	str	r3, [r7, #16]
		  mcu_flash_obj->num_of_blocks++;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	609a      	str	r2, [r3, #8]
	  for(int i=mcu_flash_obj->first_block_num;i<FLASH_NUM_OF_BLOCKS&&temp2>0;i++) {
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	3301      	adds	r3, #1
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b0b      	cmp	r3, #11
 800260c:	dc02      	bgt.n	8002614 <mcu_flash_init+0x94>
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	dcea      	bgt.n	80025ea <mcu_flash_init+0x6a>
	  }
	}
}
 8002614:	bf00      	nop
 8002616:	371c      	adds	r7, #28
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	20000200 	.word	0x20000200

08002624 <mcu_flash_read>:

F_RES mcu_flash_read(mcu_flash_typedef* mcu_flash_obj)
{
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	 memcpy((uint8_t*)&(mcu_flash_obj->data),(uint8_t*)mcu_flash_obj->first_block_addr,FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f103 000c 	add.w	r0, r3, #12
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2216      	movs	r2, #22
 8002638:	4619      	mov	r1, r3
 800263a:	f012 fa77 	bl	8014b2c <memcpy>
	 if(mcu_flash_obj->data.crc==get_crc16_arc(mcu_flash_obj->data.raw_data,FLASH_DATA_SIZE)){
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	8c1b      	ldrh	r3, [r3, #32]
 8002642:	b29c      	uxth	r4, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	330c      	adds	r3, #12
 8002648:	2114      	movs	r1, #20
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe fd08 	bl	8001060 <get_crc16_arc>
 8002650:	4603      	mov	r3, r0
 8002652:	429c      	cmp	r4, r3
 8002654:	d101      	bne.n	800265a <mcu_flash_read+0x36>
		 return F_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	e000      	b.n	800265c <mcu_flash_read+0x38>
	 }
	 else{
		 return F_ERR;
 800265a:	2301      	movs	r3, #1
	 }

}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	bd90      	pop	{r4, r7, pc}

08002664 <mcu_flash_save>:
void mcu_flash_save(mcu_flash_typedef* mcu_flash_obj)
{
 8002664:	b5b0      	push	{r4, r5, r7, lr}
 8002666:	b08c      	sub	sp, #48	; 0x30
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	uint32_t i=0;
 800266c:	2300      	movs	r3, #0
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t tmp;
	uint32_t pgerr = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	623b      	str	r3, [r7, #32]
	uint8_t* data=(uint8_t*)&mcu_flash_obj->data;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	330c      	adds	r3, #12
 8002678:	627b      	str	r3, [r7, #36]	; 0x24

	mcu_flash_obj->data.crc=get_crc16_arc(mcu_flash_obj->data.raw_data,FLASH_DATA_SIZE);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	330c      	adds	r3, #12
 800267e:	2114      	movs	r1, #20
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe fced 	bl	8001060 <get_crc16_arc>
 8002686:	4603      	mov	r3, r0
 8002688:	461a      	mov	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	841a      	strh	r2, [r3, #32]

    HAL_FLASH_Unlock();
 800268e:	f001 fc2b 	bl	8003ee8 <HAL_FLASH_Unlock>
    #if defined(STM32F405xx)
	FLASH_EraseInitTypeDef erase_info = {
 8002692:	f107 030c 	add.w	r3, r7, #12
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]
 800269c:	609a      	str	r2, [r3, #8]
 800269e:	60da      	str	r2, [r3, #12]
 80026a0:	611a      	str	r2, [r3, #16]
		.TypeErase = FLASH_TYPEERASE_SECTORS,
		.Sector = mcu_flash_obj->first_block_num,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
	FLASH_EraseInitTypeDef erase_info = {
 80026a6:	617b      	str	r3, [r7, #20]
		.NbSectors = mcu_flash_obj->num_of_blocks,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
	FLASH_EraseInitTypeDef erase_info = {
 80026ac:	61bb      	str	r3, [r7, #24]
	.NbPages = mcu_flash_obj->num_of_blocks,
    };
    #endif


	HAL_FLASHEx_Erase(&erase_info, &pgerr);
 80026ae:	f107 0220 	add.w	r2, r7, #32
 80026b2:	f107 030c 	add.w	r3, r7, #12
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f001 fd77 	bl	80041ac <HAL_FLASHEx_Erase>

	if(pgerr != 0xFFFFFFFFul)
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c4:	d027      	beq.n	8002716 <mcu_flash_save+0xb2>
	{
		HAL_FLASH_Lock();
 80026c6:	f001 fc31 	bl	8003f2c <HAL_FLASH_Lock>
 80026ca:	e029      	b.n	8002720 <mcu_flash_save+0xbc>
		return ;
	}

	while(i<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE))
	{
        tmp=(tmp&0x0000)|(data[i]&0x00FF);
 80026cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	4413      	add	r3, r2
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	857b      	strh	r3, [r7, #42]	; 0x2a
		if((i+1)<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE)) tmp=tmp|(data[i+1]<<8&0xFF00);
 80026d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d8:	3301      	adds	r3, #1
 80026da:	2b15      	cmp	r3, #21
 80026dc:	d80b      	bhi.n	80026f6 <mcu_flash_save+0x92>
 80026de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e0:	3301      	adds	r3, #1
 80026e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e4:	4413      	add	r3, r2
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	021b      	lsls	r3, r3, #8
 80026ea:	b21a      	sxth	r2, r3
 80026ec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80026f0:	4313      	orrs	r3, r2
 80026f2:	b21b      	sxth	r3, r3
 80026f4:	857b      	strh	r3, [r7, #42]	; 0x2a
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,mcu_flash_obj->first_block_addr+i,tmp);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fc:	18d1      	adds	r1, r2, r3
 80026fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002700:	2200      	movs	r2, #0
 8002702:	461c      	mov	r4, r3
 8002704:	4615      	mov	r5, r2
 8002706:	4622      	mov	r2, r4
 8002708:	462b      	mov	r3, r5
 800270a:	2001      	movs	r0, #1
 800270c:	f001 fb98 	bl	8003e40 <HAL_FLASH_Program>
		i=i+2;
 8002710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002712:	3302      	adds	r3, #2
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(i<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE))
 8002716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002718:	2b15      	cmp	r3, #21
 800271a:	d9d7      	bls.n	80026cc <mcu_flash_save+0x68>
	}

	HAL_FLASH_Lock();
 800271c:	f001 fc06 	bl	8003f2c <HAL_FLASH_Lock>
}
 8002720:	3730      	adds	r7, #48	; 0x30
 8002722:	46bd      	mov	sp, r7
 8002724:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002728 <read_time>:

extern RTC_HandleTypeDef hrtc;
rtc_typedef rtc;

time_t read_time(rtc_typedef* self_object)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08c      	sub	sp, #48	; 0x30
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
	struct tm currTime;
	HAL_RTC_GetTime(&hrtc, &self_object->time, RTC_FORMAT_BIN);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	4619      	mov	r1, r3
 8002736:	4818      	ldr	r0, [pc, #96]	; (8002798 <read_time+0x70>)
 8002738:	f004 fa96 	bl	8006c68 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &self_object->date, RTC_FORMAT_BIN);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3314      	adds	r3, #20
 8002740:	2200      	movs	r2, #0
 8002742:	4619      	mov	r1, r3
 8002744:	4814      	ldr	r0, [pc, #80]	; (8002798 <read_time+0x70>)
 8002746:	f004 fb71 	bl	8006e2c <HAL_RTC_GetDate>
	currTime.tm_hour=self_object->time.Hours;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	617b      	str	r3, [r7, #20]
	currTime.tm_min=self_object->time.Minutes;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	785b      	ldrb	r3, [r3, #1]
 8002754:	613b      	str	r3, [r7, #16]
	currTime.tm_sec=self_object->time.Seconds;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	789b      	ldrb	r3, [r3, #2]
 800275a:	60fb      	str	r3, [r7, #12]
	currTime.tm_mday=self_object->date.Date;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	7d9b      	ldrb	r3, [r3, #22]
 8002760:	61bb      	str	r3, [r7, #24]
	currTime.tm_mon=self_object->date.Month-1;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	7d5b      	ldrb	r3, [r3, #21]
 8002766:	3b01      	subs	r3, #1
 8002768:	61fb      	str	r3, [r7, #28]
	currTime.tm_year=(2000+self_object->date.Year)-1900;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	7ddb      	ldrb	r3, [r3, #23]
 800276e:	3364      	adds	r3, #100	; 0x64
 8002770:	623b      	str	r3, [r7, #32]
	self_object->timestamp=mktime(&currTime);
 8002772:	f107 030c 	add.w	r3, r7, #12
 8002776:	4618      	mov	r0, r3
 8002778:	f012 fac6 	bl	8014d08 <mktime>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	e9c1 2306 	strd	r2, r3, [r1, #24]
	return self_object->timestamp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 800278c:	4610      	mov	r0, r2
 800278e:	4619      	mov	r1, r3
 8002790:	3730      	adds	r7, #48	; 0x30
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000834 	.word	0x20000834

0800279c <set_time>:

time_t set_time(rtc_typedef* self_object)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetTime(&hrtc, &self_object->time, RTC_FORMAT_BIN);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	4619      	mov	r1, r3
 80027aa:	4808      	ldr	r0, [pc, #32]	; (80027cc <set_time+0x30>)
 80027ac:	f004 f9c2 	bl	8006b34 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &self_object->date, RTC_FORMAT_BIN);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3314      	adds	r3, #20
 80027b4:	2200      	movs	r2, #0
 80027b6:	4619      	mov	r1, r3
 80027b8:	4804      	ldr	r0, [pc, #16]	; (80027cc <set_time+0x30>)
 80027ba:	f004 fab3 	bl	8006d24 <HAL_RTC_SetDate>
}
 80027be:	bf00      	nop
 80027c0:	4610      	mov	r0, r2
 80027c2:	4619      	mov	r1, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000834 	.word	0x20000834

080027d0 <sd_ss_set_active>:
extern volatile uint16_t htim2;

uint8_t spi_rx_buffer[512];

void sd_ss_set_active(uint8_t drv)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	71fb      	strb	r3, [r7, #7]
  active_sd_ss_pin=sd_cards_ss[drv].sd_ss_pin;
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	4a08      	ldr	r2, [pc, #32]	; (8002800 <sd_ss_set_active+0x30>)
 80027de:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <sd_ss_set_active+0x34>)
 80027e4:	801a      	strh	r2, [r3, #0]
  active_sd_ss_port=sd_cards_ss[drv].sd_ss_port;
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	4a05      	ldr	r2, [pc, #20]	; (8002800 <sd_ss_set_active+0x30>)
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4413      	add	r3, r2
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	4a05      	ldr	r2, [pc, #20]	; (8002808 <sd_ss_set_active+0x38>)
 80027f2:	6013      	str	r3, [r2, #0]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	20001bb0 	.word	0x20001bb0
 8002804:	20001baa 	.word	0x20001baa
 8002808:	20001bac 	.word	0x20001bac

0800280c <sd_ss_active_pin_down>:

void sd_ss_active_pin_down()
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_RESET);
 8002810:	4b04      	ldr	r3, [pc, #16]	; (8002824 <sd_ss_active_pin_down+0x18>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a04      	ldr	r2, [pc, #16]	; (8002828 <sd_ss_active_pin_down+0x1c>)
 8002816:	8811      	ldrh	r1, [r2, #0]
 8002818:	2200      	movs	r2, #0
 800281a:	4618      	mov	r0, r3
 800281c:	f001 ff84 	bl	8004728 <HAL_GPIO_WritePin>
}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20001bac 	.word	0x20001bac
 8002828:	20001baa 	.word	0x20001baa

0800282c <sd_ss_active_pin_up>:
void sd_ss_active_pin_up()
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_SET);
 8002830:	4b04      	ldr	r3, [pc, #16]	; (8002844 <sd_ss_active_pin_up+0x18>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a04      	ldr	r2, [pc, #16]	; (8002848 <sd_ss_active_pin_up+0x1c>)
 8002836:	8811      	ldrh	r1, [r2, #0]
 8002838:	2201      	movs	r2, #1
 800283a:	4618      	mov	r0, r3
 800283c:	f001 ff74 	bl	8004728 <HAL_GPIO_WritePin>
}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20001bac 	.word	0x20001bac
 8002848:	20001baa 	.word	0x20001baa

0800284c <SD_cmd>:



//-----------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	6039      	str	r1, [r7, #0]
 8002856:	71fb      	strb	r3, [r7, #7]
  uint8_t n, res;
  // ACMD<n> is the command sequense of CMD55-CMD<n>
  if (cmd & 0x80)
 8002858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285c:	2b00      	cmp	r3, #0
 800285e:	da0e      	bge.n	800287e <SD_cmd+0x32>
  {
    cmd &= 0x7F;
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002866:	71fb      	strb	r3, [r7, #7]
    res = SD_cmd(CMD55, 0);
 8002868:	2100      	movs	r1, #0
 800286a:	2077      	movs	r0, #119	; 0x77
 800286c:	f7ff ffee 	bl	800284c <SD_cmd>
 8002870:	4603      	mov	r3, r0
 8002872:	73bb      	strb	r3, [r7, #14]
    if (res > 1) return res;
 8002874:	7bbb      	ldrb	r3, [r7, #14]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d901      	bls.n	800287e <SD_cmd+0x32>
 800287a:	7bbb      	ldrb	r3, [r7, #14]
 800287c:	e043      	b.n	8002906 <SD_cmd+0xba>
  }
  // Select the card
  SS_SD_DESELECT();
 800287e:	f7ff ffd5 	bl	800282c <sd_ss_active_pin_up>
  SPI_ReceiveByte();
 8002882:	f000 f96a 	bl	8002b5a <SPI_ReceiveByte>

  SS_SD_SELECT();
 8002886:	f7ff ffc1 	bl	800280c <sd_ss_active_pin_down>
  SPI_ReceiveByte();
 800288a:	f000 f966 	bl	8002b5a <SPI_ReceiveByte>
  // Send a command packet
  SPI_SendByte(cmd); // Start + Command index
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	4618      	mov	r0, r3
 8002892:	f000 f955 	bl	8002b40 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	0e1b      	lsrs	r3, r3, #24
 800289a:	b2db      	uxtb	r3, r3
 800289c:	4618      	mov	r0, r3
 800289e:	f000 f94f 	bl	8002b40 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	0c1b      	lsrs	r3, r3, #16
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 f949 	bl	8002b40 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 f943 	bl	8002b40 <SPI_SendByte>
  SPI_SendByte((uint8_t)arg); // Argument[7..0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f93e 	bl	8002b40 <SPI_SendByte>

  n = 0x01; // Dummy CRC + Stop
 80028c4:	2301      	movs	r3, #1
 80028c6:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	2b40      	cmp	r3, #64	; 0x40
 80028cc:	d101      	bne.n	80028d2 <SD_cmd+0x86>
 80028ce:	2395      	movs	r3, #149	; 0x95
 80028d0:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	2b48      	cmp	r3, #72	; 0x48
 80028d6:	d101      	bne.n	80028dc <SD_cmd+0x90>
 80028d8:	2387      	movs	r3, #135	; 0x87
 80028da:	73fb      	strb	r3, [r7, #15]
  SPI_SendByte(n);
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 f92e 	bl	8002b40 <SPI_SendByte>
  // Receive a command response
  n = 10; // Wait for a valid response in timeout of 10 attempts
 80028e4:	230a      	movs	r3, #10
 80028e6:	73fb      	strb	r3, [r7, #15]
  do {
    res = SPI_ReceiveByte();
 80028e8:	f000 f937 	bl	8002b5a <SPI_ReceiveByte>
 80028ec:	4603      	mov	r3, r0
 80028ee:	73bb      	strb	r3, [r7, #14]
  } while ((res & 0x80) && --n);
 80028f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	da05      	bge.n	8002904 <SD_cmd+0xb8>
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	73fb      	strb	r3, [r7, #15]
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f1      	bne.n	80028e8 <SD_cmd+0x9c>
  return res;
 8002904:	7bbb      	ldrb	r3, [r7, #14]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <sd_ini>:

uint8_t sd_ini(void)
{
 8002910:	b590      	push	{r4, r7, lr}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
	  uint8_t i, cmd;;
	  uint8_t ocr[4];
	  int16_t tmr;
	  uint32_t temp;
	  //LD_OFF;
	  sdinfo.type = 0;
 8002916:	4b57      	ldr	r3, [pc, #348]	; (8002a74 <sd_ini+0x164>)
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]

	  hspi1.Init.BaudRatePrescaler = temp;
	  HAL_SPI_Init(&hspi1);
	  */

	  SS_SD_SELECT();
 800291c:	f7ff ff76 	bl	800280c <sd_ss_active_pin_down>
	  if (SD_cmd(CMD0, 0) == 1) // Enter Idle state
 8002920:	2100      	movs	r1, #0
 8002922:	2040      	movs	r0, #64	; 0x40
 8002924:	f7ff ff92 	bl	800284c <SD_cmd>
 8002928:	4603      	mov	r3, r0
 800292a:	2b01      	cmp	r3, #1
 800292c:	f040 809a 	bne.w	8002a64 <sd_ini+0x154>
	  {
		  SPI_Release();
 8002930:	f000 f920 	bl	8002b74 <SPI_Release>
		  if (SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8002934:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002938:	2048      	movs	r0, #72	; 0x48
 800293a:	f7ff ff87 	bl	800284c <SD_cmd>
 800293e:	4603      	mov	r3, r0
 8002940:	2b01      	cmp	r3, #1
 8002942:	d157      	bne.n	80029f4 <sd_ini+0xe4>
		  {
			  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8002944:	2300      	movs	r3, #0
 8002946:	71fb      	strb	r3, [r7, #7]
 8002948:	e00c      	b.n	8002964 <sd_ini+0x54>
 800294a:	79fc      	ldrb	r4, [r7, #7]
 800294c:	f000 f905 	bl	8002b5a <SPI_ReceiveByte>
 8002950:	4603      	mov	r3, r0
 8002952:	461a      	mov	r2, r3
 8002954:	f104 0308 	add.w	r3, r4, #8
 8002958:	443b      	add	r3, r7
 800295a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	3301      	adds	r3, #1
 8002962:	71fb      	strb	r3, [r7, #7]
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	2b03      	cmp	r3, #3
 8002968:	d9ef      	bls.n	800294a <sd_ini+0x3a>

			    // Get trailing return value of R7 resp
			    if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 800296a:	78bb      	ldrb	r3, [r7, #2]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d17b      	bne.n	8002a68 <sd_ini+0x158>
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	2baa      	cmp	r3, #170	; 0xaa
 8002974:	d178      	bne.n	8002a68 <sd_ini+0x158>
			    {
			    	for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--)
 8002976:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800297a:	80bb      	strh	r3, [r7, #4]
 800297c:	e005      	b.n	800298a <sd_ini+0x7a>
 800297e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29b      	uxth	r3, r3
 8002988:	80bb      	strh	r3, [r7, #4]
 800298a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d007      	beq.n	80029a2 <sd_ini+0x92>
 8002992:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002996:	20e9      	movs	r0, #233	; 0xe9
 8002998:	f7ff ff58 	bl	800284c <SD_cmd>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1ed      	bne.n	800297e <sd_ini+0x6e>
			    	    ; // Wait for leaving idle state (ACMD41 with HCS bit)
			    	if (tmr && SD_cmd(CMD58, 0) == 0)
 80029a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d05e      	beq.n	8002a68 <sd_ini+0x158>
 80029aa:	2100      	movs	r1, #0
 80029ac:	207a      	movs	r0, #122	; 0x7a
 80029ae:	f7ff ff4d 	bl	800284c <SD_cmd>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d157      	bne.n	8002a68 <sd_ini+0x158>
			    	 { // Check CCS bit in the OCR
			    	  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 80029b8:	2300      	movs	r3, #0
 80029ba:	71fb      	strb	r3, [r7, #7]
 80029bc:	e00c      	b.n	80029d8 <sd_ini+0xc8>
 80029be:	79fc      	ldrb	r4, [r7, #7]
 80029c0:	f000 f8cb 	bl	8002b5a <SPI_ReceiveByte>
 80029c4:	4603      	mov	r3, r0
 80029c6:	461a      	mov	r2, r3
 80029c8:	f104 0308 	add.w	r3, r4, #8
 80029cc:	443b      	add	r3, r7
 80029ce:	f803 2c08 	strb.w	r2, [r3, #-8]
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	3301      	adds	r3, #1
 80029d6:	71fb      	strb	r3, [r7, #7]
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d9ef      	bls.n	80029be <sd_ini+0xae>
			     	   sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 80029de:	783b      	ldrb	r3, [r7, #0]
 80029e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <sd_ini+0xdc>
 80029e8:	220c      	movs	r2, #12
 80029ea:	e000      	b.n	80029ee <sd_ini+0xde>
 80029ec:	2204      	movs	r2, #4
 80029ee:	4b21      	ldr	r3, [pc, #132]	; (8002a74 <sd_ini+0x164>)
 80029f0:	701a      	strb	r2, [r3, #0]
 80029f2:	e039      	b.n	8002a68 <sd_ini+0x158>
			    	}
			    }
		  }
		  else //SDv1 or MMCv3
		  {
			  if (SD_cmd(ACMD41, 0) <= 1)
 80029f4:	2100      	movs	r1, #0
 80029f6:	20e9      	movs	r0, #233	; 0xe9
 80029f8:	f7ff ff28 	bl	800284c <SD_cmd>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d805      	bhi.n	8002a0e <sd_ini+0xfe>
			    {
			      sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 8002a02:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <sd_ini+0x164>)
 8002a04:	2202      	movs	r2, #2
 8002a06:	701a      	strb	r2, [r3, #0]
 8002a08:	23e9      	movs	r3, #233	; 0xe9
 8002a0a:	71bb      	strb	r3, [r7, #6]
 8002a0c:	e004      	b.n	8002a18 <sd_ini+0x108>
			    }
			    else
			    {
			      sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 8002a0e:	4b19      	ldr	r3, [pc, #100]	; (8002a74 <sd_ini+0x164>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	701a      	strb	r2, [r3, #0]
 8002a14:	2341      	movs	r3, #65	; 0x41
 8002a16:	71bb      	strb	r3, [r7, #6]
			    }
			    for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 8002a18:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8002a1c:	80bb      	strh	r3, [r7, #4]
 8002a1e:	e005      	b.n	8002a2c <sd_ini+0x11c>
 8002a20:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	80bb      	strh	r3, [r7, #4]
 8002a2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <sd_ini+0x134>
 8002a34:	79bb      	ldrb	r3, [r7, #6]
 8002a36:	2100      	movs	r1, #0
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff07 	bl	800284c <SD_cmd>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1ed      	bne.n	8002a20 <sd_ini+0x110>
			    if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8002a44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d007      	beq.n	8002a5c <sd_ini+0x14c>
 8002a4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a50:	2050      	movs	r0, #80	; 0x50
 8002a52:	f7ff fefb 	bl	800284c <SD_cmd>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <sd_ini+0x158>
			    sdinfo.type = 0;
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <sd_ini+0x164>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	701a      	strb	r2, [r3, #0]
 8002a62:	e001      	b.n	8002a68 <sd_ini+0x158>

	  }
	  else
	  {

	    return 1;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <sd_ini+0x15a>
	  }




  return 0;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd90      	pop	{r4, r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20001ba8 	.word	0x20001ba8

08002a78 <Error>:

static void Error (void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  //LD_ON;
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <SPI_wait_ready>:

uint8_t SPI_wait_ready(void)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
  uint8_t res;
  uint16_t cnt;
  cnt=0;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	80fb      	strh	r3, [r7, #6]
  do {
    res=SPI_ReceiveByte();
 8002a90:	f000 f863 	bl	8002b5a <SPI_ReceiveByte>
 8002a94:	4603      	mov	r3, r0
 8002a96:	717b      	strb	r3, [r7, #5]
    cnt++;
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	80fb      	strh	r3, [r7, #6]
  } while ( (res!=0xFF)&&(cnt<0xFFFF) );
 8002a9e:	797b      	ldrb	r3, [r7, #5]
 8002aa0:	2bff      	cmp	r3, #255	; 0xff
 8002aa2:	d004      	beq.n	8002aae <SPI_wait_ready+0x28>
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d1f0      	bne.n	8002a90 <SPI_wait_ready+0xa>
  if (cnt>=0xFFFF) return 1;
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d101      	bne.n	8002abc <SPI_wait_ready+0x36>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <SPI_wait_ready+0x38>
  return res;
 8002abc:	797b      	ldrb	r3, [r7, #5]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <SPIx_Write_Multi>:
{
	if(HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_READY) return F_OK;
	else return F_ERR;
}
F_RES SPIx_Write_Multi(uint8_t* tx_buf,uint32_t size)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
	if(HAL_SPI_TransmitReceive(&hspi1, tx_buf, spi_rx_buffer, size,HAL_MAX_DELAY)==HAL_OK) return F_OK;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8002ada:	9200      	str	r2, [sp, #0]
 8002adc:	4a07      	ldr	r2, [pc, #28]	; (8002afc <SPIx_Write_Multi+0x34>)
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4807      	ldr	r0, [pc, #28]	; (8002b00 <SPIx_Write_Multi+0x38>)
 8002ae2:	f004 fb38 	bl	8007156 <HAL_SPI_TransmitReceive>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <SPIx_Write_Multi+0x28>
 8002aec:	2300      	movs	r3, #0
 8002aee:	e000      	b.n	8002af2 <SPIx_Write_Multi+0x2a>
		else return F_ERR;
 8002af0:	2301      	movs	r3, #1
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20001bd0 	.word	0x20001bd0
 8002b00:	20000854 	.word	0x20000854

08002b04 <SPIx_WriteRead>:
	if(HAL_SPI_Transmit_DMA(&hspi1, tx_buf, size)==HAL_OK) return F_OK;
	else return F_ERR;
}

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8002b12:	f107 020f 	add.w	r2, r7, #15
 8002b16:	1df9      	adds	r1, r7, #7
 8002b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	2301      	movs	r3, #1
 8002b20:	4806      	ldr	r0, [pc, #24]	; (8002b3c <SPIx_WriteRead+0x38>)
 8002b22:	f004 fb18 	bl	8007156 <HAL_SPI_TransmitReceive>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <SPIx_WriteRead+0x2c>
  {
    Error();
 8002b2c:	f7ff ffa4 	bl	8002a78 <Error>
  }
  return receivedbyte;
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000854 	.word	0x20000854

08002b40 <SPI_SendByte>:

void SPI_SendByte(uint8_t bt)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(bt);
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ffd9 	bl	8002b04 <SPIx_WriteRead>
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <SPI_ReceiveByte>:

uint8_t SPI_ReceiveByte(void)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
  uint8_t bt = SPIx_WriteRead(0xFF);
 8002b60:	20ff      	movs	r0, #255	; 0xff
 8002b62:	f7ff ffcf 	bl	8002b04 <SPIx_WriteRead>
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]
  return bt;
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <SPI_Release>:
void SPI_Release(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 8002b78:	20ff      	movs	r0, #255	; 0xff
 8002b7a:	f7ff ffc3 	bl	8002b04 <SPIx_WriteRead>
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <SD_Read_Block>:

uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)
{
 8002b82:	b590      	push	{r4, r7, lr}
 8002b84:	b085      	sub	sp, #20
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;

  result=SD_cmd (CMD17, lba);
 8002b8c:	6839      	ldr	r1, [r7, #0]
 8002b8e:	2051      	movs	r0, #81	; 0x51
 8002b90:	f7ff fe5c 	bl	800284c <SD_cmd>
 8002b94:	4603      	mov	r3, r0
 8002b96:	737b      	strb	r3, [r7, #13]
  if (result!=0x00){
 8002b98:	7b7b      	ldrb	r3, [r7, #13]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <SD_Read_Block+0x20>
	  return 5;
 8002b9e:	2305      	movs	r3, #5
 8002ba0:	e02f      	b.n	8002c02 <SD_Read_Block+0x80>
  }

  SPI_Release();
 8002ba2:	f7ff ffe7 	bl	8002b74 <SPI_Release>
   cnt=0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	81fb      	strh	r3, [r7, #14]
   do{
     result=SPI_ReceiveByte();
 8002baa:	f7ff ffd6 	bl	8002b5a <SPI_ReceiveByte>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	737b      	strb	r3, [r7, #13]
     cnt++;
 8002bb2:	89fb      	ldrh	r3, [r7, #14]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	81fb      	strh	r3, [r7, #14]
   } while ( (result!=0xFE)&&(cnt<0xFFFF) );
 8002bb8:	7b7b      	ldrb	r3, [r7, #13]
 8002bba:	2bfe      	cmp	r3, #254	; 0xfe
 8002bbc:	d004      	beq.n	8002bc8 <SD_Read_Block+0x46>
 8002bbe:	89fb      	ldrh	r3, [r7, #14]
 8002bc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d1f0      	bne.n	8002baa <SD_Read_Block+0x28>
   if (cnt>=0xFFFF) {
 8002bc8:	89fb      	ldrh	r3, [r7, #14]
 8002bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d101      	bne.n	8002bd6 <SD_Read_Block+0x54>
	   return 5;
 8002bd2:	2305      	movs	r3, #5
 8002bd4:	e015      	b.n	8002c02 <SD_Read_Block+0x80>
   }
   for (cnt=0;cnt<512;cnt++) buff[cnt]=SPI_ReceiveByte();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	81fb      	strh	r3, [r7, #14]
 8002bda:	e009      	b.n	8002bf0 <SD_Read_Block+0x6e>
 8002bdc:	89fb      	ldrh	r3, [r7, #14]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	18d4      	adds	r4, r2, r3
 8002be2:	f7ff ffba 	bl	8002b5a <SPI_ReceiveByte>
 8002be6:	4603      	mov	r3, r0
 8002be8:	7023      	strb	r3, [r4, #0]
 8002bea:	89fb      	ldrh	r3, [r7, #14]
 8002bec:	3301      	adds	r3, #1
 8002bee:	81fb      	strh	r3, [r7, #14]
 8002bf0:	89fb      	ldrh	r3, [r7, #14]
 8002bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf6:	d3f1      	bcc.n	8002bdc <SD_Read_Block+0x5a>
   SPI_Release();
 8002bf8:	f7ff ffbc 	bl	8002b74 <SPI_Release>
   SPI_Release();
 8002bfc:	f7ff ffba 	bl	8002b74 <SPI_Release>



  return 0;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd90      	pop	{r4, r7, pc}
	...

08002c0c <SD_Write_Blocks>:

uint8_t SD_Write_Blocks (uint8_t *buff, uint32_t lba,uint16_t count)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	4613      	mov	r3, r2
 8002c18:	80fb      	strh	r3, [r7, #6]
  tick1=xTaskGetTickCount();
 8002c1a:	f010 fa97 	bl	801314c <xTaskGetTickCount>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	4a39      	ldr	r2, [pc, #228]	; (8002d08 <SD_Write_Blocks+0xfc>)
 8002c22:	6013      	str	r3, [r2, #0]
  uint8_t result;
  uint16_t cnt;


  result=SD_cmd(CMD25,lba);//CMD25
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	2059      	movs	r0, #89	; 0x59
 8002c28:	f7ff fe10 	bl	800284c <SD_cmd>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	75fb      	strb	r3, [r7, #23]
  if (result!=0x00){
 8002c30:	7dfb      	ldrb	r3, [r7, #23]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <SD_Write_Blocks+0x2e>
	  return 6;
 8002c36:	2306      	movs	r3, #6
 8002c38:	e061      	b.n	8002cfe <SD_Write_Blocks+0xf2>
  }
  SPI_Release();  //1byte gap
 8002c3a:	f7ff ff9b 	bl	8002b74 <SPI_Release>

  for(int i=0;i<count;i++){
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
 8002c42:	e035      	b.n	8002cb0 <SD_Write_Blocks+0xa4>
   SPI_SendByte (0xFC);//token CMD25
 8002c44:	20fc      	movs	r0, #252	; 0xfc
 8002c46:	f7ff ff7b 	bl	8002b40 <SPI_SendByte>

   SPIx_Write_Multi(buff,512);
 8002c4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f7ff ff3a 	bl	8002ac8 <SPIx_Write_Multi>
   buff+=512;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002c5a:	60fb      	str	r3, [r7, #12]
   SPI_Release();   //CRC
 8002c5c:	f7ff ff8a 	bl	8002b74 <SPI_Release>
   SPI_Release();   //CRC
 8002c60:	f7ff ff88 	bl	8002b74 <SPI_Release>


   result=SPI_ReceiveByte();
 8002c64:	f7ff ff79 	bl	8002b5a <SPI_ReceiveByte>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	75fb      	strb	r3, [r7, #23]
   if ((result&0x1F)!=0x05) {
 8002c6c:	7dfb      	ldrb	r3, [r7, #23]
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	d001      	beq.n	8002c7a <SD_Write_Blocks+0x6e>
	  return 6;
 8002c76:	2306      	movs	r3, #6
 8002c78:	e041      	b.n	8002cfe <SD_Write_Blocks+0xf2>
   }
   cnt=0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	83fb      	strh	r3, [r7, #30]
   do {
    result=SPI_ReceiveByte();
 8002c7e:	f7ff ff6c 	bl	8002b5a <SPI_ReceiveByte>
 8002c82:	4603      	mov	r3, r0
 8002c84:	75fb      	strb	r3, [r7, #23]
    cnt++;
 8002c86:	8bfb      	ldrh	r3, [r7, #30]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	83fb      	strh	r3, [r7, #30]
   } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 8002c8c:	7dfb      	ldrb	r3, [r7, #23]
 8002c8e:	2bff      	cmp	r3, #255	; 0xff
 8002c90:	d004      	beq.n	8002c9c <SD_Write_Blocks+0x90>
 8002c92:	8bfb      	ldrh	r3, [r7, #30]
 8002c94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d1f0      	bne.n	8002c7e <SD_Write_Blocks+0x72>
   if (cnt>=0xFFFF) {
 8002c9c:	8bfb      	ldrh	r3, [r7, #30]
 8002c9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d101      	bne.n	8002caa <SD_Write_Blocks+0x9e>
	  return 6;
 8002ca6:	2306      	movs	r3, #6
 8002ca8:	e029      	b.n	8002cfe <SD_Write_Blocks+0xf2>
  for(int i=0;i<count;i++){
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	3301      	adds	r3, #1
 8002cae:	61bb      	str	r3, [r7, #24]
 8002cb0:	88fb      	ldrh	r3, [r7, #6]
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	dbc5      	blt.n	8002c44 <SD_Write_Blocks+0x38>
   }
  }

  SPI_SendByte (0xFD); //stop transaction token for CMD25
 8002cb8:	20fd      	movs	r0, #253	; 0xfd
 8002cba:	f7ff ff41 	bl	8002b40 <SPI_SendByte>
  SPI_Release();       //1byte gap
 8002cbe:	f7ff ff59 	bl	8002b74 <SPI_Release>
  cnt=0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	83fb      	strh	r3, [r7, #30]
  do {
	result=SPI_ReceiveByte();
 8002cc6:	f7ff ff48 	bl	8002b5a <SPI_ReceiveByte>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	75fb      	strb	r3, [r7, #23]
	cnt++;
 8002cce:	8bfb      	ldrh	r3, [r7, #30]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	83fb      	strh	r3, [r7, #30]
  } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
 8002cd6:	2bff      	cmp	r3, #255	; 0xff
 8002cd8:	d004      	beq.n	8002ce4 <SD_Write_Blocks+0xd8>
 8002cda:	8bfb      	ldrh	r3, [r7, #30]
 8002cdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d1f0      	bne.n	8002cc6 <SD_Write_Blocks+0xba>
  if (cnt>=0xFFFF) return 6;
 8002ce4:	8bfb      	ldrh	r3, [r7, #30]
 8002ce6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <SD_Write_Blocks+0xe6>
 8002cee:	2306      	movs	r3, #6
 8002cf0:	e005      	b.n	8002cfe <SD_Write_Blocks+0xf2>
  tick2=xTaskGetTickCount();
 8002cf2:	f010 fa2b 	bl	801314c <xTaskGetTickCount>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	4a04      	ldr	r2, [pc, #16]	; (8002d0c <SD_Write_Blocks+0x100>)
 8002cfa:	6013      	str	r3, [r2, #0]
  return 0;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3720      	adds	r7, #32
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20001b7c 	.word	0x20001b7c
 8002d0c:	20001b80 	.word	0x20001b80

08002d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	607b      	str	r3, [r7, #4]
 8002d1a:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <HAL_MspInit+0x54>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	4a11      	ldr	r2, [pc, #68]	; (8002d64 <HAL_MspInit+0x54>)
 8002d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d24:	6453      	str	r3, [r2, #68]	; 0x44
 8002d26:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <HAL_MspInit+0x54>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	603b      	str	r3, [r7, #0]
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_MspInit+0x54>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <HAL_MspInit+0x54>)
 8002d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <HAL_MspInit+0x54>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	210f      	movs	r1, #15
 8002d52:	f06f 0001 	mvn.w	r0, #1
 8002d56:	f000 fccd 	bl	80036f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800

08002d68 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d70:	f107 0308 	add.w	r3, r7, #8
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a0c      	ldr	r2, [pc, #48]	; (8002db4 <HAL_RTC_MspInit+0x4c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d111      	bne.n	8002dac <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d90:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d92:	f107 0308 	add.w	r3, r7, #8
 8002d96:	4618      	mov	r0, r3
 8002d98:	f003 fd74 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002da2:	f7ff fbe7 	bl	8002574 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002da6:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <HAL_RTC_MspInit+0x50>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002dac:	bf00      	nop
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40002800 	.word	0x40002800
 8002db8:	42470e3c 	.word	0x42470e3c

08002dbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08a      	sub	sp, #40	; 0x28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
 8002dd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a34      	ldr	r2, [pc, #208]	; (8002eac <HAL_SPI_MspInit+0xf0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d162      	bne.n	8002ea4 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	4b33      	ldr	r3, [pc, #204]	; (8002eb0 <HAL_SPI_MspInit+0xf4>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	4a32      	ldr	r2, [pc, #200]	; (8002eb0 <HAL_SPI_MspInit+0xf4>)
 8002de8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dec:	6453      	str	r3, [r2, #68]	; 0x44
 8002dee:	4b30      	ldr	r3, [pc, #192]	; (8002eb0 <HAL_SPI_MspInit+0xf4>)
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	4b2c      	ldr	r3, [pc, #176]	; (8002eb0 <HAL_SPI_MspInit+0xf4>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	4a2b      	ldr	r2, [pc, #172]	; (8002eb0 <HAL_SPI_MspInit+0xf4>)
 8002e04:	f043 0302 	orr.w	r3, r3, #2
 8002e08:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0a:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <HAL_SPI_MspInit+0xf4>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002e16:	2338      	movs	r3, #56	; 0x38
 8002e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e22:	2303      	movs	r3, #3
 8002e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e26:	2305      	movs	r3, #5
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2a:	f107 0314 	add.w	r3, r7, #20
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4820      	ldr	r0, [pc, #128]	; (8002eb4 <HAL_SPI_MspInit+0xf8>)
 8002e32:	f001 fadd 	bl	80043f0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002e36:	4b20      	ldr	r3, [pc, #128]	; (8002eb8 <HAL_SPI_MspInit+0xfc>)
 8002e38:	4a20      	ldr	r2, [pc, #128]	; (8002ebc <HAL_SPI_MspInit+0x100>)
 8002e3a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002e3c:	4b1e      	ldr	r3, [pc, #120]	; (8002eb8 <HAL_SPI_MspInit+0xfc>)
 8002e3e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002e42:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e44:	4b1c      	ldr	r3, [pc, #112]	; (8002eb8 <HAL_SPI_MspInit+0xfc>)
 8002e46:	2240      	movs	r2, #64	; 0x40
 8002e48:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e4a:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <HAL_SPI_MspInit+0xfc>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e50:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <HAL_SPI_MspInit+0xfc>)
 8002e52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e56:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e58:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <HAL_SPI_MspInit+0xfc>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e5e:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <HAL_SPI_MspInit+0xfc>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002e64:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <HAL_SPI_MspInit+0xfc>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002e6a:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <HAL_SPI_MspInit+0xfc>)
 8002e6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e70:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e72:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <HAL_SPI_MspInit+0xfc>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002e78:	480f      	ldr	r0, [pc, #60]	; (8002eb8 <HAL_SPI_MspInit+0xfc>)
 8002e7a:	f000 fc65 	bl	8003748 <HAL_DMA_Init>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002e84:	f7ff fb76 	bl	8002574 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a0b      	ldr	r2, [pc, #44]	; (8002eb8 <HAL_SPI_MspInit+0xfc>)
 8002e8c:	649a      	str	r2, [r3, #72]	; 0x48
 8002e8e:	4a0a      	ldr	r2, [pc, #40]	; (8002eb8 <HAL_SPI_MspInit+0xfc>)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002e94:	2200      	movs	r2, #0
 8002e96:	2105      	movs	r1, #5
 8002e98:	2023      	movs	r0, #35	; 0x23
 8002e9a:	f000 fc2b 	bl	80036f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002e9e:	2023      	movs	r0, #35	; 0x23
 8002ea0:	f000 fc44 	bl	800372c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ea4:	bf00      	nop
 8002ea6:	3728      	adds	r7, #40	; 0x28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40013000 	.word	0x40013000
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40020400 	.word	0x40020400
 8002eb8:	200008ac 	.word	0x200008ac
 8002ebc:	40026458 	.word	0x40026458

08002ec0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed0:	d115      	bne.n	8002efe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <HAL_TIM_Base_MspInit+0x48>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	4a0b      	ldr	r2, [pc, #44]	; (8002f08 <HAL_TIM_Base_MspInit+0x48>)
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <HAL_TIM_Base_MspInit+0x48>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2105      	movs	r1, #5
 8002ef2:	201c      	movs	r0, #28
 8002ef4:	f000 fbfe 	bl	80036f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ef8:	201c      	movs	r0, #28
 8002efa:	f000 fc17 	bl	800372c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40023800 	.word	0x40023800

08002f0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08a      	sub	sp, #40	; 0x28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f14:	f107 0314 	add.w	r3, r7, #20
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1d      	ldr	r2, [pc, #116]	; (8002fa0 <HAL_UART_MspInit+0x94>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d134      	bne.n	8002f98 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	4b1c      	ldr	r3, [pc, #112]	; (8002fa4 <HAL_UART_MspInit+0x98>)
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	4a1b      	ldr	r2, [pc, #108]	; (8002fa4 <HAL_UART_MspInit+0x98>)
 8002f38:	f043 0310 	orr.w	r3, r3, #16
 8002f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3e:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_UART_MspInit+0x98>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <HAL_UART_MspInit+0x98>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	4a14      	ldr	r2, [pc, #80]	; (8002fa4 <HAL_UART_MspInit+0x98>)
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5a:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_UART_MspInit+0x98>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f74:	2303      	movs	r3, #3
 8002f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f78:	2307      	movs	r3, #7
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7c:	f107 0314 	add.w	r3, r7, #20
 8002f80:	4619      	mov	r1, r3
 8002f82:	4809      	ldr	r0, [pc, #36]	; (8002fa8 <HAL_UART_MspInit+0x9c>)
 8002f84:	f001 fa34 	bl	80043f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2105      	movs	r1, #5
 8002f8c:	2025      	movs	r0, #37	; 0x25
 8002f8e:	f000 fbb1 	bl	80036f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f92:	2025      	movs	r0, #37	; 0x25
 8002f94:	f000 fbca 	bl	800372c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002f98:	bf00      	nop
 8002f9a:	3728      	adds	r7, #40	; 0x28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40011000 	.word	0x40011000
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40020000 	.word	0x40020000

08002fac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08c      	sub	sp, #48	; 0x30
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	2019      	movs	r0, #25
 8002fc2:	f000 fb97 	bl	80036f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002fc6:	2019      	movs	r0, #25
 8002fc8:	f000 fbb0 	bl	800372c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	4b1f      	ldr	r3, [pc, #124]	; (8003050 <HAL_InitTick+0xa4>)
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd4:	4a1e      	ldr	r2, [pc, #120]	; (8003050 <HAL_InitTick+0xa4>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	6453      	str	r3, [r2, #68]	; 0x44
 8002fdc:	4b1c      	ldr	r3, [pc, #112]	; (8003050 <HAL_InitTick+0xa4>)
 8002fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fe8:	f107 0210 	add.w	r2, r7, #16
 8002fec:	f107 0314 	add.w	r3, r7, #20
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f003 fc14 	bl	8006820 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002ff8:	f003 fbfe 	bl	80067f8 <HAL_RCC_GetPCLK2Freq>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003004:	4a13      	ldr	r2, [pc, #76]	; (8003054 <HAL_InitTick+0xa8>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	0c9b      	lsrs	r3, r3, #18
 800300c:	3b01      	subs	r3, #1
 800300e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003010:	4b11      	ldr	r3, [pc, #68]	; (8003058 <HAL_InitTick+0xac>)
 8003012:	4a12      	ldr	r2, [pc, #72]	; (800305c <HAL_InitTick+0xb0>)
 8003014:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003016:	4b10      	ldr	r3, [pc, #64]	; (8003058 <HAL_InitTick+0xac>)
 8003018:	f240 32e7 	movw	r2, #999	; 0x3e7
 800301c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800301e:	4a0e      	ldr	r2, [pc, #56]	; (8003058 <HAL_InitTick+0xac>)
 8003020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003022:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003024:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <HAL_InitTick+0xac>)
 8003026:	2200      	movs	r2, #0
 8003028:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_InitTick+0xac>)
 800302c:	2200      	movs	r2, #0
 800302e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003030:	4809      	ldr	r0, [pc, #36]	; (8003058 <HAL_InitTick+0xac>)
 8003032:	f004 fc1b 	bl	800786c <HAL_TIM_Base_Init>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d104      	bne.n	8003046 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800303c:	4806      	ldr	r0, [pc, #24]	; (8003058 <HAL_InitTick+0xac>)
 800303e:	f004 fc65 	bl	800790c <HAL_TIM_Base_Start_IT>
 8003042:	4603      	mov	r3, r0
 8003044:	e000      	b.n	8003048 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
}
 8003048:	4618      	mov	r0, r3
 800304a:	3730      	adds	r7, #48	; 0x30
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40023800 	.word	0x40023800
 8003054:	431bde83 	.word	0x431bde83
 8003058:	20001dd0 	.word	0x20001dd0
 800305c:	40010000 	.word	0x40010000

08003060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003064:	e7fe      	b.n	8003064 <NMI_Handler+0x4>

08003066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003066:	b480      	push	{r7}
 8003068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800306a:	e7fe      	b.n	800306a <HardFault_Handler+0x4>

0800306c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003070:	e7fe      	b.n	8003070 <MemManage_Handler+0x4>

08003072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003072:	b480      	push	{r7}
 8003074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003076:	e7fe      	b.n	8003076 <BusFault_Handler+0x4>

08003078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800307c:	e7fe      	b.n	800307c <UsageFault_Handler+0x4>

0800307e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800307e:	b480      	push	{r7}
 8003080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003090:	4802      	ldr	r0, [pc, #8]	; (800309c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003092:	f004 fcab 	bl	80079ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20001dd0 	.word	0x20001dd0

080030a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030a4:	4802      	ldr	r0, [pc, #8]	; (80030b0 <TIM2_IRQHandler+0x10>)
 80030a6:	f004 fca1 	bl	80079ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	2000090c 	.word	0x2000090c

080030b4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80030b8:	4802      	ldr	r0, [pc, #8]	; (80030c4 <SPI1_IRQHandler+0x10>)
 80030ba:	f004 f9ef 	bl	800749c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000854 	.word	0x20000854

080030c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030cc:	4802      	ldr	r0, [pc, #8]	; (80030d8 <USART1_IRQHandler+0x10>)
 80030ce:	f005 f9a3 	bl	8008418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20000954 	.word	0x20000954

080030dc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80030e0:	4802      	ldr	r0, [pc, #8]	; (80030ec <DMA2_Stream3_IRQHandler+0x10>)
 80030e2:	f000 fc71 	bl	80039c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	200008ac 	.word	0x200008ac

080030f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80030f4:	4802      	ldr	r0, [pc, #8]	; (8003100 <OTG_FS_IRQHandler+0x10>)
 80030f6:	f001 fd9b 	bl	8004c30 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	2000e5c4 	.word	0x2000e5c4

08003104 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
	return 1;
 8003108:	2301      	movs	r3, #1
}
 800310a:	4618      	mov	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <_kill>:

int _kill(int pid, int sig)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800311e:	f011 fbcf 	bl	80148c0 <__errno>
 8003122:	4603      	mov	r3, r0
 8003124:	2216      	movs	r2, #22
 8003126:	601a      	str	r2, [r3, #0]
	return -1;
 8003128:	f04f 33ff 	mov.w	r3, #4294967295
}
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <_exit>:

void _exit (int status)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800313c:	f04f 31ff 	mov.w	r1, #4294967295
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff ffe7 	bl	8003114 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003146:	e7fe      	b.n	8003146 <_exit+0x12>

08003148 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	e00a      	b.n	8003170 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800315a:	f3af 8000 	nop.w
 800315e:	4601      	mov	r1, r0
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	60ba      	str	r2, [r7, #8]
 8003166:	b2ca      	uxtb	r2, r1
 8003168:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	3301      	adds	r3, #1
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	429a      	cmp	r2, r3
 8003176:	dbf0      	blt.n	800315a <_read+0x12>
	}

return len;
 8003178:	687b      	ldr	r3, [r7, #4]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b086      	sub	sp, #24
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	e009      	b.n	80031a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	60ba      	str	r2, [r7, #8]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	3301      	adds	r3, #1
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	dbf1      	blt.n	8003194 <_write+0x12>
	}
	return len;
 80031b0:	687b      	ldr	r3, [r7, #4]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <_close>:

int _close(int file)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
	return -1;
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031e2:	605a      	str	r2, [r3, #4]
	return 0;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <_isatty>:

int _isatty(int file)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
	return 1;
 80031fa:	2301      	movs	r3, #1
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
	return 0;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800322c:	4a14      	ldr	r2, [pc, #80]	; (8003280 <_sbrk+0x5c>)
 800322e:	4b15      	ldr	r3, [pc, #84]	; (8003284 <_sbrk+0x60>)
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003238:	4b13      	ldr	r3, [pc, #76]	; (8003288 <_sbrk+0x64>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d102      	bne.n	8003246 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003240:	4b11      	ldr	r3, [pc, #68]	; (8003288 <_sbrk+0x64>)
 8003242:	4a12      	ldr	r2, [pc, #72]	; (800328c <_sbrk+0x68>)
 8003244:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003246:	4b10      	ldr	r3, [pc, #64]	; (8003288 <_sbrk+0x64>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	429a      	cmp	r2, r3
 8003252:	d207      	bcs.n	8003264 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003254:	f011 fb34 	bl	80148c0 <__errno>
 8003258:	4603      	mov	r3, r0
 800325a:	220c      	movs	r2, #12
 800325c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800325e:	f04f 33ff 	mov.w	r3, #4294967295
 8003262:	e009      	b.n	8003278 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003264:	4b08      	ldr	r3, [pc, #32]	; (8003288 <_sbrk+0x64>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800326a:	4b07      	ldr	r3, [pc, #28]	; (8003288 <_sbrk+0x64>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	4a05      	ldr	r2, [pc, #20]	; (8003288 <_sbrk+0x64>)
 8003274:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003276:	68fb      	ldr	r3, [r7, #12]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20020000 	.word	0x20020000
 8003284:	00000400 	.word	0x00000400
 8003288:	20001e1c 	.word	0x20001e1c
 800328c:	2000e900 	.word	0x2000e900

08003290 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <SystemInit+0x20>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	4a05      	ldr	r2, [pc, #20]	; (80032b0 <SystemInit+0x20>)
 800329c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <wav_file_open>:


extern UART_HandleTypeDef huart1;

F_RES wav_file_open(wav_file_typedef* self_object,char* filename,uint32_t sample_size,uint32_t sample_rate,uint8_t num_channels)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
 80032c0:	603b      	str	r3, [r7, #0]
  memcpy(self_object->header.chunk.prefix,"RIFF",4);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2204      	movs	r2, #4
 80032c6:	4939      	ldr	r1, [pc, #228]	; (80033ac <wav_file_open+0xf8>)
 80032c8:	4618      	mov	r0, r3
 80032ca:	f011 fc2f 	bl	8014b2c <memcpy>
  memcpy(self_object->header.chunk.postfix,"WAVE",4);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	3308      	adds	r3, #8
 80032d2:	2204      	movs	r2, #4
 80032d4:	4936      	ldr	r1, [pc, #216]	; (80033b0 <wav_file_open+0xfc>)
 80032d6:	4618      	mov	r0, r3
 80032d8:	f011 fc28 	bl	8014b2c <memcpy>
  memcpy(self_object->header.subchunk_fmt.prefix,"fmt ",4);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	330c      	adds	r3, #12
 80032e0:	2204      	movs	r2, #4
 80032e2:	4934      	ldr	r1, [pc, #208]	; (80033b4 <wav_file_open+0x100>)
 80032e4:	4618      	mov	r0, r3
 80032e6:	f011 fc21 	bl	8014b2c <memcpy>
  self_object->header.subchunk_fmt.size=16;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f042 0210 	orr.w	r2, r2, #16
 80032f2:	741a      	strb	r2, [r3, #16]
 80032f4:	2200      	movs	r2, #0
 80032f6:	745a      	strb	r2, [r3, #17]
 80032f8:	2200      	movs	r2, #0
 80032fa:	749a      	strb	r2, [r3, #18]
 80032fc:	2200      	movs	r2, #0
 80032fe:	74da      	strb	r2, [r3, #19]
  self_object->header.subchunk_fmt.format=1;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f042 0201 	orr.w	r2, r2, #1
 8003308:	751a      	strb	r2, [r3, #20]
 800330a:	2200      	movs	r2, #0
 800330c:	755a      	strb	r2, [r3, #21]
  self_object->header.subchunk_fmt.numchannels=num_channels;
 800330e:	7e3b      	ldrb	r3, [r7, #24]
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	82da      	strh	r2, [r3, #22]
  self_object->header.subchunk_fmt.samplerate=sample_rate;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	619a      	str	r2, [r3, #24]
  self_object->header.subchunk_fmt.bps=sample_size;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	845a      	strh	r2, [r3, #34]	; 0x22
  self_object->header.subchunk_fmt.byterate=sample_rate*num_channels*(sample_size/8);
 8003324:	7e3b      	ldrb	r3, [r7, #24]
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	fb02 f303 	mul.w	r3, r2, r3
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	08d2      	lsrs	r2, r2, #3
 8003330:	fb03 f202 	mul.w	r2, r3, r2
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	61da      	str	r2, [r3, #28]
  self_object->header.subchunk_fmt.block_align=num_channels*(sample_size/8);
 8003338:	7e3b      	ldrb	r3, [r7, #24]
 800333a:	b29a      	uxth	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	08db      	lsrs	r3, r3, #3
 8003340:	b29b      	uxth	r3, r3
 8003342:	fb12 f303 	smulbb	r3, r2, r3
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	841a      	strh	r2, [r3, #32]
  memcpy(self_object->header.subchunk_data.prefix,"data",4);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3324      	adds	r3, #36	; 0x24
 8003350:	2204      	movs	r2, #4
 8003352:	4919      	ldr	r1, [pc, #100]	; (80033b8 <wav_file_open+0x104>)
 8003354:	4618      	mov	r0, r3
 8003356:	f011 fbe9 	bl	8014b2c <memcpy>
  self_object->data_counter=0;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003362:	2200      	movs	r2, #0
 8003364:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8003368:	2200      	movs	r2, #0
 800336a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800336e:	2200      	movs	r2, #0
 8003370:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  if(f_open(&self_object->media.file,filename,FA_CREATE_ALWAYS|FA_WRITE)==FR_OK){
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3330      	adds	r3, #48	; 0x30
 8003378:	220a      	movs	r2, #10
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	4618      	mov	r0, r3
 800337e:	f00d f8df 	bl	8010540 <f_open>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10b      	bne.n	80033a0 <wav_file_open+0xec>
   f_lseek(&self_object->media.file, sizeof(self_object->header));
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800338e:	f04f 022c 	mov.w	r2, #44	; 0x2c
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	4608      	mov	r0, r1
 8003398:	f00d fe8f 	bl	80110ba <f_lseek>
   return F_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	e000      	b.n	80033a2 <wav_file_open+0xee>
  }
  return F_ERR;
 80033a0:	2301      	movs	r3, #1
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	0801763c 	.word	0x0801763c
 80033b0:	08017644 	.word	0x08017644
 80033b4:	0801764c 	.word	0x0801764c
 80033b8:	08017654 	.word	0x08017654

080033bc <wav_file_close>:

F_RES wav_file_close(wav_file_typedef* self_object)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
	self_object->header.subchunk_data.size=self_object->data_counter;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	629a      	str	r2, [r3, #40]	; 0x28
	self_object->header.chunk.size=36+self_object->data_counter;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	605a      	str	r2, [r3, #4]
 	f_lseek(&self_object->media.file, 0);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	4608      	mov	r0, r1
 80033e8:	f00d fe67 	bl	80110ba <f_lseek>
 	if(f_write(&self_object->media.file,(uint8_t*)&self_object->header,sizeof(self_object->header),(void*)&self_object->media.byteswritten)==FR_OK){
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 80033fa:	222c      	movs	r2, #44	; 0x2c
 80033fc:	f00d fb61 	bl	8010ac2 <f_write>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <wav_file_close+0x58>
 	  f_close(&self_object->media.file);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3330      	adds	r3, #48	; 0x30
 800340a:	4618      	mov	r0, r3
 800340c:	f00d fe2b 	bl	8011066 <f_close>
 	  return F_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	e000      	b.n	8003416 <wav_file_close+0x5a>
 	}
 	return F_ERR;
 8003414:	2301      	movs	r3, #1
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <wav_file_write>:

F_RES wav_file_write(wav_file_typedef* self_object,uint8_t* data,uint32_t length)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b086      	sub	sp, #24
 8003422:	af00      	add	r7, sp, #0
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	607a      	str	r2, [r7, #4]
	FRESULT res;
	self_object->data_counter+=length;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	441a      	add	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	62da      	str	r2, [r3, #44]	; 0x2c
	res=f_write(&self_object->media.file,data,length,(void*)&self_object->media.byteswritten);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68b9      	ldr	r1, [r7, #8]
 8003446:	f00d fb3c 	bl	8010ac2 <f_write>
 800344a:	4603      	mov	r3, r0
 800344c:	75fb      	strb	r3, [r7, #23]
	if(res==FR_OK) return F_OK;
 800344e:	7dfb      	ldrb	r3, [r7, #23]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <wav_file_write+0x3a>
 8003454:	2300      	movs	r3, #0
 8003456:	e000      	b.n	800345a <wav_file_write+0x3c>
	return F_ERR;
 8003458:	2301      	movs	r3, #1
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003464:	f8df d034 	ldr.w	sp, [pc, #52]	; 800349c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003468:	480d      	ldr	r0, [pc, #52]	; (80034a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800346a:	490e      	ldr	r1, [pc, #56]	; (80034a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800346c:	4a0e      	ldr	r2, [pc, #56]	; (80034a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800346e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003470:	e002      	b.n	8003478 <LoopCopyDataInit>

08003472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003476:	3304      	adds	r3, #4

08003478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800347a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800347c:	d3f9      	bcc.n	8003472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800347e:	4a0b      	ldr	r2, [pc, #44]	; (80034ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003480:	4c0b      	ldr	r4, [pc, #44]	; (80034b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003484:	e001      	b.n	800348a <LoopFillZerobss>

08003486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003488:	3204      	adds	r2, #4

0800348a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800348a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800348c:	d3fb      	bcc.n	8003486 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800348e:	f7ff feff 	bl	8003290 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003492:	f011 fb11 	bl	8014ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003496:	f7fe f9ad 	bl	80017f4 <main>
  bx  lr    
 800349a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800349c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034a4:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 80034a8:	08017ee0 	.word	0x08017ee0
  ldr r2, =_sbss
 80034ac:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 80034b0:	2000e900 	.word	0x2000e900

080034b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034b4:	e7fe      	b.n	80034b4 <ADC_IRQHandler>
	...

080034b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034bc:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <HAL_Init+0x40>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a0d      	ldr	r2, [pc, #52]	; (80034f8 <HAL_Init+0x40>)
 80034c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <HAL_Init+0x40>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a0a      	ldr	r2, [pc, #40]	; (80034f8 <HAL_Init+0x40>)
 80034ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034d4:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <HAL_Init+0x40>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a07      	ldr	r2, [pc, #28]	; (80034f8 <HAL_Init+0x40>)
 80034da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034e0:	2003      	movs	r0, #3
 80034e2:	f000 f8fc 	bl	80036de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034e6:	200f      	movs	r0, #15
 80034e8:	f7ff fd60 	bl	8002fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034ec:	f7ff fc10 	bl	8002d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023c00 	.word	0x40023c00

080034fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003500:	4b06      	ldr	r3, [pc, #24]	; (800351c <HAL_IncTick+0x20>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	461a      	mov	r2, r3
 8003506:	4b06      	ldr	r3, [pc, #24]	; (8003520 <HAL_IncTick+0x24>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4413      	add	r3, r2
 800350c:	4a04      	ldr	r2, [pc, #16]	; (8003520 <HAL_IncTick+0x24>)
 800350e:	6013      	str	r3, [r2, #0]
}
 8003510:	bf00      	nop
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	2000023c 	.word	0x2000023c
 8003520:	20001e20 	.word	0x20001e20

08003524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return uwTick;
 8003528:	4b03      	ldr	r3, [pc, #12]	; (8003538 <HAL_GetTick+0x14>)
 800352a:	681b      	ldr	r3, [r3, #0]
}
 800352c:	4618      	mov	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	20001e20 	.word	0x20001e20

0800353c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003544:	f7ff ffee 	bl	8003524 <HAL_GetTick>
 8003548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003554:	d005      	beq.n	8003562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003556:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <HAL_Delay+0x44>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4413      	add	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003562:	bf00      	nop
 8003564:	f7ff ffde 	bl	8003524 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	429a      	cmp	r2, r3
 8003572:	d8f7      	bhi.n	8003564 <HAL_Delay+0x28>
  {
  }
}
 8003574:	bf00      	nop
 8003576:	bf00      	nop
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	2000023c 	.word	0x2000023c

08003584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003594:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035a0:	4013      	ands	r3, r2
 80035a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035b6:	4a04      	ldr	r2, [pc, #16]	; (80035c8 <__NVIC_SetPriorityGrouping+0x44>)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	60d3      	str	r3, [r2, #12]
}
 80035bc:	bf00      	nop
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035d0:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <__NVIC_GetPriorityGrouping+0x18>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	0a1b      	lsrs	r3, r3, #8
 80035d6:	f003 0307 	and.w	r3, r3, #7
}
 80035da:	4618      	mov	r0, r3
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	db0b      	blt.n	8003612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	f003 021f 	and.w	r2, r3, #31
 8003600:	4907      	ldr	r1, [pc, #28]	; (8003620 <__NVIC_EnableIRQ+0x38>)
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	2001      	movs	r0, #1
 800360a:	fa00 f202 	lsl.w	r2, r0, r2
 800360e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	e000e100 	.word	0xe000e100

08003624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	6039      	str	r1, [r7, #0]
 800362e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003634:	2b00      	cmp	r3, #0
 8003636:	db0a      	blt.n	800364e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	b2da      	uxtb	r2, r3
 800363c:	490c      	ldr	r1, [pc, #48]	; (8003670 <__NVIC_SetPriority+0x4c>)
 800363e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003642:	0112      	lsls	r2, r2, #4
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	440b      	add	r3, r1
 8003648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800364c:	e00a      	b.n	8003664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	b2da      	uxtb	r2, r3
 8003652:	4908      	ldr	r1, [pc, #32]	; (8003674 <__NVIC_SetPriority+0x50>)
 8003654:	79fb      	ldrb	r3, [r7, #7]
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	3b04      	subs	r3, #4
 800365c:	0112      	lsls	r2, r2, #4
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	440b      	add	r3, r1
 8003662:	761a      	strb	r2, [r3, #24]
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	e000e100 	.word	0xe000e100
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003678:	b480      	push	{r7}
 800367a:	b089      	sub	sp, #36	; 0x24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f1c3 0307 	rsb	r3, r3, #7
 8003692:	2b04      	cmp	r3, #4
 8003694:	bf28      	it	cs
 8003696:	2304      	movcs	r3, #4
 8003698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	3304      	adds	r3, #4
 800369e:	2b06      	cmp	r3, #6
 80036a0:	d902      	bls.n	80036a8 <NVIC_EncodePriority+0x30>
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	3b03      	subs	r3, #3
 80036a6:	e000      	b.n	80036aa <NVIC_EncodePriority+0x32>
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ac:	f04f 32ff 	mov.w	r2, #4294967295
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43da      	mvns	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	401a      	ands	r2, r3
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036c0:	f04f 31ff 	mov.w	r1, #4294967295
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ca:	43d9      	mvns	r1, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d0:	4313      	orrs	r3, r2
         );
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3724      	adds	r7, #36	; 0x24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b082      	sub	sp, #8
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7ff ff4c 	bl	8003584 <__NVIC_SetPriorityGrouping>
}
 80036ec:	bf00      	nop
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003706:	f7ff ff61 	bl	80035cc <__NVIC_GetPriorityGrouping>
 800370a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	68b9      	ldr	r1, [r7, #8]
 8003710:	6978      	ldr	r0, [r7, #20]
 8003712:	f7ff ffb1 	bl	8003678 <NVIC_EncodePriority>
 8003716:	4602      	mov	r2, r0
 8003718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800371c:	4611      	mov	r1, r2
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff ff80 	bl	8003624 <__NVIC_SetPriority>
}
 8003724:	bf00      	nop
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff ff54 	bl	80035e8 <__NVIC_EnableIRQ>
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003754:	f7ff fee6 	bl	8003524 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e099      	b.n	8003898 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003784:	e00f      	b.n	80037a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003786:	f7ff fecd 	bl	8003524 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b05      	cmp	r3, #5
 8003792:	d908      	bls.n	80037a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2203      	movs	r2, #3
 800379e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e078      	b.n	8003898 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e8      	bne.n	8003786 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	4b38      	ldr	r3, [pc, #224]	; (80038a0 <HAL_DMA_Init+0x158>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d107      	bne.n	8003810 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003808:	4313      	orrs	r3, r2
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f023 0307 	bic.w	r3, r3, #7
 8003826:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	2b04      	cmp	r3, #4
 8003838:	d117      	bne.n	800386a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00e      	beq.n	800386a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fa7b 	bl	8003d48 <DMA_CheckFifoParam>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2240      	movs	r2, #64	; 0x40
 800385c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003866:	2301      	movs	r3, #1
 8003868:	e016      	b.n	8003898 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fa32 	bl	8003cdc <DMA_CalcBaseAndBitshift>
 8003878:	4603      	mov	r3, r0
 800387a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003880:	223f      	movs	r2, #63	; 0x3f
 8003882:	409a      	lsls	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	f010803f 	.word	0xf010803f

080038a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038b2:	f7ff fe37 	bl	8003524 <HAL_GetTick>
 80038b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d008      	beq.n	80038d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2280      	movs	r2, #128	; 0x80
 80038c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e052      	b.n	800397c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0216 	bic.w	r2, r2, #22
 80038e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695a      	ldr	r2, [r3, #20]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d103      	bne.n	8003906 <HAL_DMA_Abort+0x62>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003902:	2b00      	cmp	r3, #0
 8003904:	d007      	beq.n	8003916 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0208 	bic.w	r2, r2, #8
 8003914:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0201 	bic.w	r2, r2, #1
 8003924:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003926:	e013      	b.n	8003950 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003928:	f7ff fdfc 	bl	8003524 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b05      	cmp	r3, #5
 8003934:	d90c      	bls.n	8003950 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2203      	movs	r2, #3
 8003940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e015      	b.n	800397c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1e4      	bne.n	8003928 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003962:	223f      	movs	r2, #63	; 0x3f
 8003964:	409a      	lsls	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d004      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2280      	movs	r2, #128	; 0x80
 800399c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e00c      	b.n	80039bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2205      	movs	r2, #5
 80039a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0201 	bic.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039d4:	4b8e      	ldr	r3, [pc, #568]	; (8003c10 <HAL_DMA_IRQHandler+0x248>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a8e      	ldr	r2, [pc, #568]	; (8003c14 <HAL_DMA_IRQHandler+0x24c>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	0a9b      	lsrs	r3, r3, #10
 80039e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f2:	2208      	movs	r2, #8
 80039f4:	409a      	lsls	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4013      	ands	r3, r2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d01a      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d013      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0204 	bic.w	r2, r2, #4
 8003a1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a20:	2208      	movs	r2, #8
 8003a22:	409a      	lsls	r2, r3
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2c:	f043 0201 	orr.w	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a38:	2201      	movs	r2, #1
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d012      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00b      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a56:	2201      	movs	r2, #1
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a62:	f043 0202 	orr.w	r2, r3, #2
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	2204      	movs	r2, #4
 8003a70:	409a      	lsls	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d012      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00b      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	409a      	lsls	r2, r3
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a98:	f043 0204 	orr.w	r2, r3, #4
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa4:	2210      	movs	r2, #16
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d043      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d03c      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac2:	2210      	movs	r2, #16
 8003ac4:	409a      	lsls	r2, r3
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d018      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d108      	bne.n	8003af8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d024      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	4798      	blx	r3
 8003af6:	e01f      	b.n	8003b38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d01b      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	4798      	blx	r3
 8003b08:	e016      	b.n	8003b38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d107      	bne.n	8003b28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0208 	bic.w	r2, r2, #8
 8003b26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 808f 	beq.w	8003c68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0310 	and.w	r3, r3, #16
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 8087 	beq.w	8003c68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5e:	2220      	movs	r2, #32
 8003b60:	409a      	lsls	r2, r3
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b05      	cmp	r3, #5
 8003b70:	d136      	bne.n	8003be0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0216 	bic.w	r2, r2, #22
 8003b80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695a      	ldr	r2, [r3, #20]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d103      	bne.n	8003ba2 <HAL_DMA_IRQHandler+0x1da>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d007      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0208 	bic.w	r2, r2, #8
 8003bb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb6:	223f      	movs	r2, #63	; 0x3f
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d07e      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	4798      	blx	r3
        }
        return;
 8003bde:	e079      	b.n	8003cd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d01d      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10d      	bne.n	8003c18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d031      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	4798      	blx	r3
 8003c0c:	e02c      	b.n	8003c68 <HAL_DMA_IRQHandler+0x2a0>
 8003c0e:	bf00      	nop
 8003c10:	20000234 	.word	0x20000234
 8003c14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d023      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
 8003c28:	e01e      	b.n	8003c68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10f      	bne.n	8003c58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0210 	bic.w	r2, r2, #16
 8003c46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d032      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d022      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2205      	movs	r2, #5
 8003c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0201 	bic.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	3301      	adds	r3, #1
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d307      	bcc.n	8003cb0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f2      	bne.n	8003c94 <HAL_DMA_IRQHandler+0x2cc>
 8003cae:	e000      	b.n	8003cb2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003cb0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	4798      	blx	r3
 8003cd2:	e000      	b.n	8003cd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003cd4:	bf00      	nop
    }
  }
}
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	3b10      	subs	r3, #16
 8003cec:	4a14      	ldr	r2, [pc, #80]	; (8003d40 <DMA_CalcBaseAndBitshift+0x64>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	091b      	lsrs	r3, r3, #4
 8003cf4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cf6:	4a13      	ldr	r2, [pc, #76]	; (8003d44 <DMA_CalcBaseAndBitshift+0x68>)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d909      	bls.n	8003d1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d12:	f023 0303 	bic.w	r3, r3, #3
 8003d16:	1d1a      	adds	r2, r3, #4
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	659a      	str	r2, [r3, #88]	; 0x58
 8003d1c:	e007      	b.n	8003d2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d26:	f023 0303 	bic.w	r3, r3, #3
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	aaaaaaab 	.word	0xaaaaaaab
 8003d44:	08017724 	.word	0x08017724

08003d48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d11f      	bne.n	8003da2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d856      	bhi.n	8003e16 <DMA_CheckFifoParam+0xce>
 8003d68:	a201      	add	r2, pc, #4	; (adr r2, 8003d70 <DMA_CheckFifoParam+0x28>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08003d81 	.word	0x08003d81
 8003d74:	08003d93 	.word	0x08003d93
 8003d78:	08003d81 	.word	0x08003d81
 8003d7c:	08003e17 	.word	0x08003e17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d046      	beq.n	8003e1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d90:	e043      	b.n	8003e1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d9a:	d140      	bne.n	8003e1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da0:	e03d      	b.n	8003e1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003daa:	d121      	bne.n	8003df0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d837      	bhi.n	8003e22 <DMA_CheckFifoParam+0xda>
 8003db2:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <DMA_CheckFifoParam+0x70>)
 8003db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db8:	08003dc9 	.word	0x08003dc9
 8003dbc:	08003dcf 	.word	0x08003dcf
 8003dc0:	08003dc9 	.word	0x08003dc9
 8003dc4:	08003de1 	.word	0x08003de1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
      break;
 8003dcc:	e030      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d025      	beq.n	8003e26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dde:	e022      	b.n	8003e26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003de8:	d11f      	bne.n	8003e2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dee:	e01c      	b.n	8003e2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d903      	bls.n	8003dfe <DMA_CheckFifoParam+0xb6>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d003      	beq.n	8003e04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003dfc:	e018      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	73fb      	strb	r3, [r7, #15]
      break;
 8003e02:	e015      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00e      	beq.n	8003e2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	73fb      	strb	r3, [r7, #15]
      break;
 8003e14:	e00b      	b.n	8003e2e <DMA_CheckFifoParam+0xe6>
      break;
 8003e16:	bf00      	nop
 8003e18:	e00a      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;
 8003e1a:	bf00      	nop
 8003e1c:	e008      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;
 8003e1e:	bf00      	nop
 8003e20:	e006      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;
 8003e22:	bf00      	nop
 8003e24:	e004      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;
 8003e26:	bf00      	nop
 8003e28:	e002      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e2a:	bf00      	nop
 8003e2c:	e000      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;
 8003e2e:	bf00      	nop
    }
  } 
  
  return status; 
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop

08003e40 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e52:	4b23      	ldr	r3, [pc, #140]	; (8003ee0 <HAL_FLASH_Program+0xa0>)
 8003e54:	7e1b      	ldrb	r3, [r3, #24]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_FLASH_Program+0x1e>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e03b      	b.n	8003ed6 <HAL_FLASH_Program+0x96>
 8003e5e:	4b20      	ldr	r3, [pc, #128]	; (8003ee0 <HAL_FLASH_Program+0xa0>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e64:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e68:	f000 f870 	bl	8003f4c <FLASH_WaitForLastOperation>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d12b      	bne.n	8003ece <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d105      	bne.n	8003e88 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003e7c:	783b      	ldrb	r3, [r7, #0]
 8003e7e:	4619      	mov	r1, r3
 8003e80:	68b8      	ldr	r0, [r7, #8]
 8003e82:	f000 f91b 	bl	80040bc <FLASH_Program_Byte>
 8003e86:	e016      	b.n	8003eb6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d105      	bne.n	8003e9a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003e8e:	883b      	ldrh	r3, [r7, #0]
 8003e90:	4619      	mov	r1, r3
 8003e92:	68b8      	ldr	r0, [r7, #8]
 8003e94:	f000 f8ee 	bl	8004074 <FLASH_Program_HalfWord>
 8003e98:	e00d      	b.n	8003eb6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d105      	bne.n	8003eac <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	68b8      	ldr	r0, [r7, #8]
 8003ea6:	f000 f8c3 	bl	8004030 <FLASH_Program_Word>
 8003eaa:	e004      	b.n	8003eb6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003eac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eb0:	68b8      	ldr	r0, [r7, #8]
 8003eb2:	f000 f88b 	bl	8003fcc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003eb6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003eba:	f000 f847 	bl	8003f4c <FLASH_WaitForLastOperation>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003ec2:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <HAL_FLASH_Program+0xa4>)
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	4a07      	ldr	r2, [pc, #28]	; (8003ee4 <HAL_FLASH_Program+0xa4>)
 8003ec8:	f023 0301 	bic.w	r3, r3, #1
 8003ecc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003ece:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <HAL_FLASH_Program+0xa0>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20001e24 	.word	0x20001e24
 8003ee4:	40023c00 	.word	0x40023c00

08003ee8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003ef2:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <HAL_FLASH_Unlock+0x38>)
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	da0b      	bge.n	8003f12 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003efa:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <HAL_FLASH_Unlock+0x38>)
 8003efc:	4a09      	ldr	r2, [pc, #36]	; (8003f24 <HAL_FLASH_Unlock+0x3c>)
 8003efe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003f00:	4b07      	ldr	r3, [pc, #28]	; (8003f20 <HAL_FLASH_Unlock+0x38>)
 8003f02:	4a09      	ldr	r2, [pc, #36]	; (8003f28 <HAL_FLASH_Unlock+0x40>)
 8003f04:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003f06:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <HAL_FLASH_Unlock+0x38>)
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	da01      	bge.n	8003f12 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003f12:	79fb      	ldrb	r3, [r7, #7]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	40023c00 	.word	0x40023c00
 8003f24:	45670123 	.word	0x45670123
 8003f28:	cdef89ab 	.word	0xcdef89ab

08003f2c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <HAL_FLASH_Lock+0x1c>)
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <HAL_FLASH_Lock+0x1c>)
 8003f36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f3a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	40023c00 	.word	0x40023c00

08003f4c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f58:	4b1a      	ldr	r3, [pc, #104]	; (8003fc4 <FLASH_WaitForLastOperation+0x78>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003f5e:	f7ff fae1 	bl	8003524 <HAL_GetTick>
 8003f62:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003f64:	e010      	b.n	8003f88 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6c:	d00c      	beq.n	8003f88 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d007      	beq.n	8003f84 <FLASH_WaitForLastOperation+0x38>
 8003f74:	f7ff fad6 	bl	8003524 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d201      	bcs.n	8003f88 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e019      	b.n	8003fbc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003f88:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <FLASH_WaitForLastOperation+0x7c>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e8      	bne.n	8003f66 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003f94:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <FLASH_WaitForLastOperation+0x7c>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003fa0:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <FLASH_WaitForLastOperation+0x7c>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003fa6:	4b08      	ldr	r3, [pc, #32]	; (8003fc8 <FLASH_WaitForLastOperation+0x7c>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003fb2:	f000 f8a5 	bl	8004100 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
  
}  
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20001e24 	.word	0x20001e24
 8003fc8:	40023c00 	.word	0x40023c00

08003fcc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003fd8:	4b14      	ldr	r3, [pc, #80]	; (800402c <FLASH_Program_DoubleWord+0x60>)
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	4a13      	ldr	r2, [pc, #76]	; (800402c <FLASH_Program_DoubleWord+0x60>)
 8003fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003fe4:	4b11      	ldr	r3, [pc, #68]	; (800402c <FLASH_Program_DoubleWord+0x60>)
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	4a10      	ldr	r2, [pc, #64]	; (800402c <FLASH_Program_DoubleWord+0x60>)
 8003fea:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003fee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003ff0:	4b0e      	ldr	r3, [pc, #56]	; (800402c <FLASH_Program_DoubleWord+0x60>)
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	4a0d      	ldr	r2, [pc, #52]	; (800402c <FLASH_Program_DoubleWord+0x60>)
 8003ff6:	f043 0301 	orr.w	r3, r3, #1
 8003ffa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004002:	f3bf 8f6f 	isb	sy
}
 8004006:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004008:	e9d7 0100 	ldrd	r0, r1, [r7]
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	f04f 0300 	mov.w	r3, #0
 8004014:	000a      	movs	r2, r1
 8004016:	2300      	movs	r3, #0
 8004018:	68f9      	ldr	r1, [r7, #12]
 800401a:	3104      	adds	r1, #4
 800401c:	4613      	mov	r3, r2
 800401e:	600b      	str	r3, [r1, #0]
}
 8004020:	bf00      	nop
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	40023c00 	.word	0x40023c00

08004030 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800403a:	4b0d      	ldr	r3, [pc, #52]	; (8004070 <FLASH_Program_Word+0x40>)
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	4a0c      	ldr	r2, [pc, #48]	; (8004070 <FLASH_Program_Word+0x40>)
 8004040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004044:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004046:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <FLASH_Program_Word+0x40>)
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	4a09      	ldr	r2, [pc, #36]	; (8004070 <FLASH_Program_Word+0x40>)
 800404c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004050:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004052:	4b07      	ldr	r3, [pc, #28]	; (8004070 <FLASH_Program_Word+0x40>)
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	4a06      	ldr	r2, [pc, #24]	; (8004070 <FLASH_Program_Word+0x40>)
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	601a      	str	r2, [r3, #0]
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	40023c00 	.word	0x40023c00

08004074 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004080:	4b0d      	ldr	r3, [pc, #52]	; (80040b8 <FLASH_Program_HalfWord+0x44>)
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	4a0c      	ldr	r2, [pc, #48]	; (80040b8 <FLASH_Program_HalfWord+0x44>)
 8004086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800408a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800408c:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <FLASH_Program_HalfWord+0x44>)
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	4a09      	ldr	r2, [pc, #36]	; (80040b8 <FLASH_Program_HalfWord+0x44>)
 8004092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004096:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004098:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <FLASH_Program_HalfWord+0x44>)
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	4a06      	ldr	r2, [pc, #24]	; (80040b8 <FLASH_Program_HalfWord+0x44>)
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	887a      	ldrh	r2, [r7, #2]
 80040a8:	801a      	strh	r2, [r3, #0]
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40023c00 	.word	0x40023c00

080040bc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80040c8:	4b0c      	ldr	r3, [pc, #48]	; (80040fc <FLASH_Program_Byte+0x40>)
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	4a0b      	ldr	r2, [pc, #44]	; (80040fc <FLASH_Program_Byte+0x40>)
 80040ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80040d4:	4b09      	ldr	r3, [pc, #36]	; (80040fc <FLASH_Program_Byte+0x40>)
 80040d6:	4a09      	ldr	r2, [pc, #36]	; (80040fc <FLASH_Program_Byte+0x40>)
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80040dc:	4b07      	ldr	r3, [pc, #28]	; (80040fc <FLASH_Program_Byte+0x40>)
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	4a06      	ldr	r2, [pc, #24]	; (80040fc <FLASH_Program_Byte+0x40>)
 80040e2:	f043 0301 	orr.w	r3, r3, #1
 80040e6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	78fa      	ldrb	r2, [r7, #3]
 80040ec:	701a      	strb	r2, [r3, #0]
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40023c00 	.word	0x40023c00

08004100 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004104:	4b27      	ldr	r3, [pc, #156]	; (80041a4 <FLASH_SetErrorCode+0xa4>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004110:	4b25      	ldr	r3, [pc, #148]	; (80041a8 <FLASH_SetErrorCode+0xa8>)
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	f043 0310 	orr.w	r3, r3, #16
 8004118:	4a23      	ldr	r2, [pc, #140]	; (80041a8 <FLASH_SetErrorCode+0xa8>)
 800411a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800411c:	4b21      	ldr	r3, [pc, #132]	; (80041a4 <FLASH_SetErrorCode+0xa4>)
 800411e:	2210      	movs	r2, #16
 8004120:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004122:	4b20      	ldr	r3, [pc, #128]	; (80041a4 <FLASH_SetErrorCode+0xa4>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b00      	cmp	r3, #0
 800412c:	d008      	beq.n	8004140 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800412e:	4b1e      	ldr	r3, [pc, #120]	; (80041a8 <FLASH_SetErrorCode+0xa8>)
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f043 0308 	orr.w	r3, r3, #8
 8004136:	4a1c      	ldr	r2, [pc, #112]	; (80041a8 <FLASH_SetErrorCode+0xa8>)
 8004138:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800413a:	4b1a      	ldr	r3, [pc, #104]	; (80041a4 <FLASH_SetErrorCode+0xa4>)
 800413c:	2220      	movs	r2, #32
 800413e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004140:	4b18      	ldr	r3, [pc, #96]	; (80041a4 <FLASH_SetErrorCode+0xa4>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800414c:	4b16      	ldr	r3, [pc, #88]	; (80041a8 <FLASH_SetErrorCode+0xa8>)
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	f043 0304 	orr.w	r3, r3, #4
 8004154:	4a14      	ldr	r2, [pc, #80]	; (80041a8 <FLASH_SetErrorCode+0xa8>)
 8004156:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004158:	4b12      	ldr	r3, [pc, #72]	; (80041a4 <FLASH_SetErrorCode+0xa4>)
 800415a:	2240      	movs	r2, #64	; 0x40
 800415c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800415e:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <FLASH_SetErrorCode+0xa4>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004166:	2b00      	cmp	r3, #0
 8004168:	d008      	beq.n	800417c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800416a:	4b0f      	ldr	r3, [pc, #60]	; (80041a8 <FLASH_SetErrorCode+0xa8>)
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	f043 0302 	orr.w	r3, r3, #2
 8004172:	4a0d      	ldr	r2, [pc, #52]	; (80041a8 <FLASH_SetErrorCode+0xa8>)
 8004174:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004176:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <FLASH_SetErrorCode+0xa4>)
 8004178:	2280      	movs	r2, #128	; 0x80
 800417a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800417c:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <FLASH_SetErrorCode+0xa4>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d008      	beq.n	800419a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004188:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <FLASH_SetErrorCode+0xa8>)
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	f043 0320 	orr.w	r3, r3, #32
 8004190:	4a05      	ldr	r2, [pc, #20]	; (80041a8 <FLASH_SetErrorCode+0xa8>)
 8004192:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004194:	4b03      	ldr	r3, [pc, #12]	; (80041a4 <FLASH_SetErrorCode+0xa4>)
 8004196:	2202      	movs	r2, #2
 8004198:	60da      	str	r2, [r3, #12]
  }
}
 800419a:	bf00      	nop
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	40023c00 	.word	0x40023c00
 80041a8:	20001e24 	.word	0x20001e24

080041ac <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80041ba:	2300      	movs	r3, #0
 80041bc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80041be:	4b31      	ldr	r3, [pc, #196]	; (8004284 <HAL_FLASHEx_Erase+0xd8>)
 80041c0:	7e1b      	ldrb	r3, [r3, #24]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <HAL_FLASHEx_Erase+0x1e>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e058      	b.n	800427c <HAL_FLASHEx_Erase+0xd0>
 80041ca:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <HAL_FLASHEx_Erase+0xd8>)
 80041cc:	2201      	movs	r2, #1
 80041ce:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80041d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041d4:	f7ff feba 	bl	8003f4c <FLASH_WaitForLastOperation>
 80041d8:	4603      	mov	r3, r0
 80041da:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d148      	bne.n	8004274 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	f04f 32ff 	mov.w	r2, #4294967295
 80041e8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d115      	bne.n	800421e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	4619      	mov	r1, r3
 80041fe:	4610      	mov	r0, r2
 8004200:	f000 f844 	bl	800428c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004204:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004208:	f7ff fea0 	bl	8003f4c <FLASH_WaitForLastOperation>
 800420c:	4603      	mov	r3, r0
 800420e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004210:	4b1d      	ldr	r3, [pc, #116]	; (8004288 <HAL_FLASHEx_Erase+0xdc>)
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	4a1c      	ldr	r2, [pc, #112]	; (8004288 <HAL_FLASHEx_Erase+0xdc>)
 8004216:	f023 0304 	bic.w	r3, r3, #4
 800421a:	6113      	str	r3, [r2, #16]
 800421c:	e028      	b.n	8004270 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	e01c      	b.n	8004260 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	b2db      	uxtb	r3, r3
 800422c:	4619      	mov	r1, r3
 800422e:	68b8      	ldr	r0, [r7, #8]
 8004230:	f000 f850 	bl	80042d4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004234:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004238:	f7ff fe88 	bl	8003f4c <FLASH_WaitForLastOperation>
 800423c:	4603      	mov	r3, r0
 800423e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004240:	4b11      	ldr	r3, [pc, #68]	; (8004288 <HAL_FLASHEx_Erase+0xdc>)
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	4a10      	ldr	r2, [pc, #64]	; (8004288 <HAL_FLASHEx_Erase+0xdc>)
 8004246:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800424a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	601a      	str	r2, [r3, #0]
          break;
 8004258:	e00a      	b.n	8004270 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	3301      	adds	r3, #1
 800425e:	60bb      	str	r3, [r7, #8]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	4413      	add	r3, r2
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	429a      	cmp	r2, r3
 800426e:	d3da      	bcc.n	8004226 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004270:	f000 f878 	bl	8004364 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004274:	4b03      	ldr	r3, [pc, #12]	; (8004284 <HAL_FLASHEx_Erase+0xd8>)
 8004276:	2200      	movs	r2, #0
 8004278:	761a      	strb	r2, [r3, #24]

  return status;
 800427a:	7bfb      	ldrb	r3, [r7, #15]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20001e24 	.word	0x20001e24
 8004288:	40023c00 	.word	0x40023c00

0800428c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	6039      	str	r1, [r7, #0]
 8004296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004298:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <FLASH_MassErase+0x44>)
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	4a0c      	ldr	r2, [pc, #48]	; (80042d0 <FLASH_MassErase+0x44>)
 800429e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80042a4:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <FLASH_MassErase+0x44>)
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	4a09      	ldr	r2, [pc, #36]	; (80042d0 <FLASH_MassErase+0x44>)
 80042aa:	f043 0304 	orr.w	r3, r3, #4
 80042ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80042b0:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <FLASH_MassErase+0x44>)
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	021b      	lsls	r3, r3, #8
 80042b8:	4313      	orrs	r3, r2
 80042ba:	4a05      	ldr	r2, [pc, #20]	; (80042d0 <FLASH_MassErase+0x44>)
 80042bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c0:	6113      	str	r3, [r2, #16]
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40023c00 	.word	0x40023c00

080042d4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d102      	bne.n	80042f0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	e010      	b.n	8004312 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80042f0:	78fb      	ldrb	r3, [r7, #3]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d103      	bne.n	80042fe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80042f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	e009      	b.n	8004312 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80042fe:	78fb      	ldrb	r3, [r7, #3]
 8004300:	2b02      	cmp	r3, #2
 8004302:	d103      	bne.n	800430c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	e002      	b.n	8004312 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800430c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004310:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004312:	4b13      	ldr	r3, [pc, #76]	; (8004360 <FLASH_Erase_Sector+0x8c>)
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	4a12      	ldr	r2, [pc, #72]	; (8004360 <FLASH_Erase_Sector+0x8c>)
 8004318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800431c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800431e:	4b10      	ldr	r3, [pc, #64]	; (8004360 <FLASH_Erase_Sector+0x8c>)
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	490f      	ldr	r1, [pc, #60]	; (8004360 <FLASH_Erase_Sector+0x8c>)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800432a:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <FLASH_Erase_Sector+0x8c>)
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	4a0c      	ldr	r2, [pc, #48]	; (8004360 <FLASH_Erase_Sector+0x8c>)
 8004330:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004334:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004336:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <FLASH_Erase_Sector+0x8c>)
 8004338:	691a      	ldr	r2, [r3, #16]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	4313      	orrs	r3, r2
 8004340:	4a07      	ldr	r2, [pc, #28]	; (8004360 <FLASH_Erase_Sector+0x8c>)
 8004342:	f043 0302 	orr.w	r3, r3, #2
 8004346:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <FLASH_Erase_Sector+0x8c>)
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	4a04      	ldr	r2, [pc, #16]	; (8004360 <FLASH_Erase_Sector+0x8c>)
 800434e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004352:	6113      	str	r3, [r2, #16]
}
 8004354:	bf00      	nop
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	40023c00 	.word	0x40023c00

08004364 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004368:	4b20      	ldr	r3, [pc, #128]	; (80043ec <FLASH_FlushCaches+0x88>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004370:	2b00      	cmp	r3, #0
 8004372:	d017      	beq.n	80043a4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004374:	4b1d      	ldr	r3, [pc, #116]	; (80043ec <FLASH_FlushCaches+0x88>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1c      	ldr	r2, [pc, #112]	; (80043ec <FLASH_FlushCaches+0x88>)
 800437a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800437e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004380:	4b1a      	ldr	r3, [pc, #104]	; (80043ec <FLASH_FlushCaches+0x88>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a19      	ldr	r2, [pc, #100]	; (80043ec <FLASH_FlushCaches+0x88>)
 8004386:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	4b17      	ldr	r3, [pc, #92]	; (80043ec <FLASH_FlushCaches+0x88>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a16      	ldr	r2, [pc, #88]	; (80043ec <FLASH_FlushCaches+0x88>)
 8004392:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004396:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004398:	4b14      	ldr	r3, [pc, #80]	; (80043ec <FLASH_FlushCaches+0x88>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a13      	ldr	r2, [pc, #76]	; (80043ec <FLASH_FlushCaches+0x88>)
 800439e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043a2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80043a4:	4b11      	ldr	r3, [pc, #68]	; (80043ec <FLASH_FlushCaches+0x88>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d017      	beq.n	80043e0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80043b0:	4b0e      	ldr	r3, [pc, #56]	; (80043ec <FLASH_FlushCaches+0x88>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a0d      	ldr	r2, [pc, #52]	; (80043ec <FLASH_FlushCaches+0x88>)
 80043b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043ba:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80043bc:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <FLASH_FlushCaches+0x88>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a0a      	ldr	r2, [pc, #40]	; (80043ec <FLASH_FlushCaches+0x88>)
 80043c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	4b08      	ldr	r3, [pc, #32]	; (80043ec <FLASH_FlushCaches+0x88>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a07      	ldr	r2, [pc, #28]	; (80043ec <FLASH_FlushCaches+0x88>)
 80043ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043d2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <FLASH_FlushCaches+0x88>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a04      	ldr	r2, [pc, #16]	; (80043ec <FLASH_FlushCaches+0x88>)
 80043da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043de:	6013      	str	r3, [r2, #0]
  }
}
 80043e0:	bf00      	nop
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40023c00 	.word	0x40023c00

080043f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b089      	sub	sp, #36	; 0x24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043fe:	2300      	movs	r3, #0
 8004400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004402:	2300      	movs	r3, #0
 8004404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004406:	2300      	movs	r3, #0
 8004408:	61fb      	str	r3, [r7, #28]
 800440a:	e16b      	b.n	80046e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800440c:	2201      	movs	r2, #1
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4013      	ands	r3, r2
 800441e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	429a      	cmp	r2, r3
 8004426:	f040 815a 	bne.w	80046de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	2b01      	cmp	r3, #1
 8004434:	d005      	beq.n	8004442 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800443e:	2b02      	cmp	r3, #2
 8004440:	d130      	bne.n	80044a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	2203      	movs	r2, #3
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	43db      	mvns	r3, r3
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	4013      	ands	r3, r2
 8004458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	4313      	orrs	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004478:	2201      	movs	r2, #1
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	43db      	mvns	r3, r3
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	4013      	ands	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	091b      	lsrs	r3, r3, #4
 800448e:	f003 0201 	and.w	r2, r3, #1
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4313      	orrs	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	2b03      	cmp	r3, #3
 80044ae:	d017      	beq.n	80044e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	2203      	movs	r2, #3
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	43db      	mvns	r3, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4013      	ands	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d123      	bne.n	8004534 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	08da      	lsrs	r2, r3, #3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3208      	adds	r2, #8
 80044f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	220f      	movs	r2, #15
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	43db      	mvns	r3, r3
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4013      	ands	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	4313      	orrs	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	08da      	lsrs	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3208      	adds	r2, #8
 800452e:	69b9      	ldr	r1, [r7, #24]
 8004530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	2203      	movs	r2, #3
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	43db      	mvns	r3, r3
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4013      	ands	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 0203 	and.w	r2, r3, #3
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	4313      	orrs	r3, r2
 8004560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80b4 	beq.w	80046de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	4b60      	ldr	r3, [pc, #384]	; (80046fc <HAL_GPIO_Init+0x30c>)
 800457c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457e:	4a5f      	ldr	r2, [pc, #380]	; (80046fc <HAL_GPIO_Init+0x30c>)
 8004580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004584:	6453      	str	r3, [r2, #68]	; 0x44
 8004586:	4b5d      	ldr	r3, [pc, #372]	; (80046fc <HAL_GPIO_Init+0x30c>)
 8004588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004592:	4a5b      	ldr	r2, [pc, #364]	; (8004700 <HAL_GPIO_Init+0x310>)
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	089b      	lsrs	r3, r3, #2
 8004598:	3302      	adds	r3, #2
 800459a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800459e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	220f      	movs	r2, #15
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	43db      	mvns	r3, r3
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	4013      	ands	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a52      	ldr	r2, [pc, #328]	; (8004704 <HAL_GPIO_Init+0x314>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d02b      	beq.n	8004616 <HAL_GPIO_Init+0x226>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a51      	ldr	r2, [pc, #324]	; (8004708 <HAL_GPIO_Init+0x318>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d025      	beq.n	8004612 <HAL_GPIO_Init+0x222>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a50      	ldr	r2, [pc, #320]	; (800470c <HAL_GPIO_Init+0x31c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d01f      	beq.n	800460e <HAL_GPIO_Init+0x21e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a4f      	ldr	r2, [pc, #316]	; (8004710 <HAL_GPIO_Init+0x320>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d019      	beq.n	800460a <HAL_GPIO_Init+0x21a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a4e      	ldr	r2, [pc, #312]	; (8004714 <HAL_GPIO_Init+0x324>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d013      	beq.n	8004606 <HAL_GPIO_Init+0x216>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a4d      	ldr	r2, [pc, #308]	; (8004718 <HAL_GPIO_Init+0x328>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d00d      	beq.n	8004602 <HAL_GPIO_Init+0x212>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a4c      	ldr	r2, [pc, #304]	; (800471c <HAL_GPIO_Init+0x32c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d007      	beq.n	80045fe <HAL_GPIO_Init+0x20e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a4b      	ldr	r2, [pc, #300]	; (8004720 <HAL_GPIO_Init+0x330>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d101      	bne.n	80045fa <HAL_GPIO_Init+0x20a>
 80045f6:	2307      	movs	r3, #7
 80045f8:	e00e      	b.n	8004618 <HAL_GPIO_Init+0x228>
 80045fa:	2308      	movs	r3, #8
 80045fc:	e00c      	b.n	8004618 <HAL_GPIO_Init+0x228>
 80045fe:	2306      	movs	r3, #6
 8004600:	e00a      	b.n	8004618 <HAL_GPIO_Init+0x228>
 8004602:	2305      	movs	r3, #5
 8004604:	e008      	b.n	8004618 <HAL_GPIO_Init+0x228>
 8004606:	2304      	movs	r3, #4
 8004608:	e006      	b.n	8004618 <HAL_GPIO_Init+0x228>
 800460a:	2303      	movs	r3, #3
 800460c:	e004      	b.n	8004618 <HAL_GPIO_Init+0x228>
 800460e:	2302      	movs	r3, #2
 8004610:	e002      	b.n	8004618 <HAL_GPIO_Init+0x228>
 8004612:	2301      	movs	r3, #1
 8004614:	e000      	b.n	8004618 <HAL_GPIO_Init+0x228>
 8004616:	2300      	movs	r3, #0
 8004618:	69fa      	ldr	r2, [r7, #28]
 800461a:	f002 0203 	and.w	r2, r2, #3
 800461e:	0092      	lsls	r2, r2, #2
 8004620:	4093      	lsls	r3, r2
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	4313      	orrs	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004628:	4935      	ldr	r1, [pc, #212]	; (8004700 <HAL_GPIO_Init+0x310>)
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	089b      	lsrs	r3, r3, #2
 800462e:	3302      	adds	r3, #2
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004636:	4b3b      	ldr	r3, [pc, #236]	; (8004724 <HAL_GPIO_Init+0x334>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	43db      	mvns	r3, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4013      	ands	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800465a:	4a32      	ldr	r2, [pc, #200]	; (8004724 <HAL_GPIO_Init+0x334>)
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004660:	4b30      	ldr	r3, [pc, #192]	; (8004724 <HAL_GPIO_Init+0x334>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	43db      	mvns	r3, r3
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	4013      	ands	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004684:	4a27      	ldr	r2, [pc, #156]	; (8004724 <HAL_GPIO_Init+0x334>)
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800468a:	4b26      	ldr	r3, [pc, #152]	; (8004724 <HAL_GPIO_Init+0x334>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	43db      	mvns	r3, r3
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4013      	ands	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046ae:	4a1d      	ldr	r2, [pc, #116]	; (8004724 <HAL_GPIO_Init+0x334>)
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046b4:	4b1b      	ldr	r3, [pc, #108]	; (8004724 <HAL_GPIO_Init+0x334>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	43db      	mvns	r3, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4013      	ands	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046d8:	4a12      	ldr	r2, [pc, #72]	; (8004724 <HAL_GPIO_Init+0x334>)
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	3301      	adds	r3, #1
 80046e2:	61fb      	str	r3, [r7, #28]
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	2b0f      	cmp	r3, #15
 80046e8:	f67f ae90 	bls.w	800440c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046ec:	bf00      	nop
 80046ee:	bf00      	nop
 80046f0:	3724      	adds	r7, #36	; 0x24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40023800 	.word	0x40023800
 8004700:	40013800 	.word	0x40013800
 8004704:	40020000 	.word	0x40020000
 8004708:	40020400 	.word	0x40020400
 800470c:	40020800 	.word	0x40020800
 8004710:	40020c00 	.word	0x40020c00
 8004714:	40021000 	.word	0x40021000
 8004718:	40021400 	.word	0x40021400
 800471c:	40021800 	.word	0x40021800
 8004720:	40021c00 	.word	0x40021c00
 8004724:	40013c00 	.word	0x40013c00

08004728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	807b      	strh	r3, [r7, #2]
 8004734:	4613      	mov	r3, r2
 8004736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004738:	787b      	ldrb	r3, [r7, #1]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800473e:	887a      	ldrh	r2, [r7, #2]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004744:	e003      	b.n	800474e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004746:	887b      	ldrh	r3, [r7, #2]
 8004748:	041a      	lsls	r2, r3, #16
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	619a      	str	r2, [r3, #24]
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800475a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800475c:	b08f      	sub	sp, #60	; 0x3c
 800475e:	af0a      	add	r7, sp, #40	; 0x28
 8004760:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e054      	b.n	8004816 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f00f fdf6 	bl	8014378 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2203      	movs	r2, #3
 8004790:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479c:	2b00      	cmp	r3, #0
 800479e:	d102      	bne.n	80047a6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f004 fe04 	bl	80093b8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	603b      	str	r3, [r7, #0]
 80047b6:	687e      	ldr	r6, [r7, #4]
 80047b8:	466d      	mov	r5, sp
 80047ba:	f106 0410 	add.w	r4, r6, #16
 80047be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80047ce:	1d33      	adds	r3, r6, #4
 80047d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047d2:	6838      	ldr	r0, [r7, #0]
 80047d4:	f004 fd7e 	bl	80092d4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2101      	movs	r1, #1
 80047de:	4618      	mov	r0, r3
 80047e0:	f004 fdfb 	bl	80093da <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	603b      	str	r3, [r7, #0]
 80047ea:	687e      	ldr	r6, [r7, #4]
 80047ec:	466d      	mov	r5, sp
 80047ee:	f106 0410 	add.w	r4, r6, #16
 80047f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8004802:	1d33      	adds	r3, r6, #4
 8004804:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004806:	6838      	ldr	r0, [r7, #0]
 8004808:	f004 ff84 	bl	8009714 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800481e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800481e:	b590      	push	{r4, r7, lr}
 8004820:	b089      	sub	sp, #36	; 0x24
 8004822:	af04      	add	r7, sp, #16
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	4608      	mov	r0, r1
 8004828:	4611      	mov	r1, r2
 800482a:	461a      	mov	r2, r3
 800482c:	4603      	mov	r3, r0
 800482e:	70fb      	strb	r3, [r7, #3]
 8004830:	460b      	mov	r3, r1
 8004832:	70bb      	strb	r3, [r7, #2]
 8004834:	4613      	mov	r3, r2
 8004836:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800483e:	2b01      	cmp	r3, #1
 8004840:	d101      	bne.n	8004846 <HAL_HCD_HC_Init+0x28>
 8004842:	2302      	movs	r3, #2
 8004844:	e076      	b.n	8004934 <HAL_HCD_HC_Init+0x116>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800484e:	78fb      	ldrb	r3, [r7, #3]
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	212c      	movs	r1, #44	; 0x2c
 8004854:	fb01 f303 	mul.w	r3, r1, r3
 8004858:	4413      	add	r3, r2
 800485a:	333d      	adds	r3, #61	; 0x3d
 800485c:	2200      	movs	r2, #0
 800485e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004860:	78fb      	ldrb	r3, [r7, #3]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	212c      	movs	r1, #44	; 0x2c
 8004866:	fb01 f303 	mul.w	r3, r1, r3
 800486a:	4413      	add	r3, r2
 800486c:	3338      	adds	r3, #56	; 0x38
 800486e:	787a      	ldrb	r2, [r7, #1]
 8004870:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004872:	78fb      	ldrb	r3, [r7, #3]
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	212c      	movs	r1, #44	; 0x2c
 8004878:	fb01 f303 	mul.w	r3, r1, r3
 800487c:	4413      	add	r3, r2
 800487e:	3340      	adds	r3, #64	; 0x40
 8004880:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004882:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	212c      	movs	r1, #44	; 0x2c
 800488a:	fb01 f303 	mul.w	r3, r1, r3
 800488e:	4413      	add	r3, r2
 8004890:	3339      	adds	r3, #57	; 0x39
 8004892:	78fa      	ldrb	r2, [r7, #3]
 8004894:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004896:	78fb      	ldrb	r3, [r7, #3]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	212c      	movs	r1, #44	; 0x2c
 800489c:	fb01 f303 	mul.w	r3, r1, r3
 80048a0:	4413      	add	r3, r2
 80048a2:	333f      	adds	r3, #63	; 0x3f
 80048a4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80048a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80048aa:	78fb      	ldrb	r3, [r7, #3]
 80048ac:	78ba      	ldrb	r2, [r7, #2]
 80048ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048b2:	b2d0      	uxtb	r0, r2
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	212c      	movs	r1, #44	; 0x2c
 80048b8:	fb01 f303 	mul.w	r3, r1, r3
 80048bc:	4413      	add	r3, r2
 80048be:	333a      	adds	r3, #58	; 0x3a
 80048c0:	4602      	mov	r2, r0
 80048c2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80048c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	da09      	bge.n	80048e0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	212c      	movs	r1, #44	; 0x2c
 80048d2:	fb01 f303 	mul.w	r3, r1, r3
 80048d6:	4413      	add	r3, r2
 80048d8:	333b      	adds	r3, #59	; 0x3b
 80048da:	2201      	movs	r2, #1
 80048dc:	701a      	strb	r2, [r3, #0]
 80048de:	e008      	b.n	80048f2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80048e0:	78fb      	ldrb	r3, [r7, #3]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	212c      	movs	r1, #44	; 0x2c
 80048e6:	fb01 f303 	mul.w	r3, r1, r3
 80048ea:	4413      	add	r3, r2
 80048ec:	333b      	adds	r3, #59	; 0x3b
 80048ee:	2200      	movs	r2, #0
 80048f0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80048f2:	78fb      	ldrb	r3, [r7, #3]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	212c      	movs	r1, #44	; 0x2c
 80048f8:	fb01 f303 	mul.w	r3, r1, r3
 80048fc:	4413      	add	r3, r2
 80048fe:	333c      	adds	r3, #60	; 0x3c
 8004900:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004904:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6818      	ldr	r0, [r3, #0]
 800490a:	787c      	ldrb	r4, [r7, #1]
 800490c:	78ba      	ldrb	r2, [r7, #2]
 800490e:	78f9      	ldrb	r1, [r7, #3]
 8004910:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004912:	9302      	str	r3, [sp, #8]
 8004914:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004918:	9301      	str	r3, [sp, #4]
 800491a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	4623      	mov	r3, r4
 8004922:	f005 f87d 	bl	8009a20 <USB_HC_Init>
 8004926:	4603      	mov	r3, r0
 8004928:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004932:	7bfb      	ldrb	r3, [r7, #15]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	bd90      	pop	{r4, r7, pc}

0800493c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004952:	2b01      	cmp	r3, #1
 8004954:	d101      	bne.n	800495a <HAL_HCD_HC_Halt+0x1e>
 8004956:	2302      	movs	r3, #2
 8004958:	e00f      	b.n	800497a <HAL_HCD_HC_Halt+0x3e>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	78fa      	ldrb	r2, [r7, #3]
 8004968:	4611      	mov	r1, r2
 800496a:	4618      	mov	r0, r3
 800496c:	f005 facd 	bl	8009f0a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004978:	7bfb      	ldrb	r3, [r7, #15]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	4608      	mov	r0, r1
 800498e:	4611      	mov	r1, r2
 8004990:	461a      	mov	r2, r3
 8004992:	4603      	mov	r3, r0
 8004994:	70fb      	strb	r3, [r7, #3]
 8004996:	460b      	mov	r3, r1
 8004998:	70bb      	strb	r3, [r7, #2]
 800499a:	4613      	mov	r3, r2
 800499c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	212c      	movs	r1, #44	; 0x2c
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	4413      	add	r3, r2
 80049aa:	333b      	adds	r3, #59	; 0x3b
 80049ac:	78ba      	ldrb	r2, [r7, #2]
 80049ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	212c      	movs	r1, #44	; 0x2c
 80049b6:	fb01 f303 	mul.w	r3, r1, r3
 80049ba:	4413      	add	r3, r2
 80049bc:	333f      	adds	r3, #63	; 0x3f
 80049be:	787a      	ldrb	r2, [r7, #1]
 80049c0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80049c2:	7c3b      	ldrb	r3, [r7, #16]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d112      	bne.n	80049ee <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80049c8:	78fb      	ldrb	r3, [r7, #3]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	212c      	movs	r1, #44	; 0x2c
 80049ce:	fb01 f303 	mul.w	r3, r1, r3
 80049d2:	4413      	add	r3, r2
 80049d4:	3342      	adds	r3, #66	; 0x42
 80049d6:	2203      	movs	r2, #3
 80049d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	212c      	movs	r1, #44	; 0x2c
 80049e0:	fb01 f303 	mul.w	r3, r1, r3
 80049e4:	4413      	add	r3, r2
 80049e6:	333d      	adds	r3, #61	; 0x3d
 80049e8:	7f3a      	ldrb	r2, [r7, #28]
 80049ea:	701a      	strb	r2, [r3, #0]
 80049ec:	e008      	b.n	8004a00 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80049ee:	78fb      	ldrb	r3, [r7, #3]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	212c      	movs	r1, #44	; 0x2c
 80049f4:	fb01 f303 	mul.w	r3, r1, r3
 80049f8:	4413      	add	r3, r2
 80049fa:	3342      	adds	r3, #66	; 0x42
 80049fc:	2202      	movs	r2, #2
 80049fe:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004a00:	787b      	ldrb	r3, [r7, #1]
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	f200 80c6 	bhi.w	8004b94 <HAL_HCD_HC_SubmitRequest+0x210>
 8004a08:	a201      	add	r2, pc, #4	; (adr r2, 8004a10 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0e:	bf00      	nop
 8004a10:	08004a21 	.word	0x08004a21
 8004a14:	08004b81 	.word	0x08004b81
 8004a18:	08004a85 	.word	0x08004a85
 8004a1c:	08004b03 	.word	0x08004b03
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004a20:	7c3b      	ldrb	r3, [r7, #16]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	f040 80b8 	bne.w	8004b98 <HAL_HCD_HC_SubmitRequest+0x214>
 8004a28:	78bb      	ldrb	r3, [r7, #2]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f040 80b4 	bne.w	8004b98 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004a30:	8b3b      	ldrh	r3, [r7, #24]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d108      	bne.n	8004a48 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004a36:	78fb      	ldrb	r3, [r7, #3]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	212c      	movs	r1, #44	; 0x2c
 8004a3c:	fb01 f303 	mul.w	r3, r1, r3
 8004a40:	4413      	add	r3, r2
 8004a42:	3355      	adds	r3, #85	; 0x55
 8004a44:	2201      	movs	r2, #1
 8004a46:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004a48:	78fb      	ldrb	r3, [r7, #3]
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	212c      	movs	r1, #44	; 0x2c
 8004a4e:	fb01 f303 	mul.w	r3, r1, r3
 8004a52:	4413      	add	r3, r2
 8004a54:	3355      	adds	r3, #85	; 0x55
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d109      	bne.n	8004a70 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a5c:	78fb      	ldrb	r3, [r7, #3]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	212c      	movs	r1, #44	; 0x2c
 8004a62:	fb01 f303 	mul.w	r3, r1, r3
 8004a66:	4413      	add	r3, r2
 8004a68:	3342      	adds	r3, #66	; 0x42
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004a6e:	e093      	b.n	8004b98 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	212c      	movs	r1, #44	; 0x2c
 8004a76:	fb01 f303 	mul.w	r3, r1, r3
 8004a7a:	4413      	add	r3, r2
 8004a7c:	3342      	adds	r3, #66	; 0x42
 8004a7e:	2202      	movs	r2, #2
 8004a80:	701a      	strb	r2, [r3, #0]
      break;
 8004a82:	e089      	b.n	8004b98 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004a84:	78bb      	ldrb	r3, [r7, #2]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d11d      	bne.n	8004ac6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004a8a:	78fb      	ldrb	r3, [r7, #3]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	212c      	movs	r1, #44	; 0x2c
 8004a90:	fb01 f303 	mul.w	r3, r1, r3
 8004a94:	4413      	add	r3, r2
 8004a96:	3355      	adds	r3, #85	; 0x55
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d109      	bne.n	8004ab2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a9e:	78fb      	ldrb	r3, [r7, #3]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	212c      	movs	r1, #44	; 0x2c
 8004aa4:	fb01 f303 	mul.w	r3, r1, r3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	3342      	adds	r3, #66	; 0x42
 8004aac:	2200      	movs	r2, #0
 8004aae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004ab0:	e073      	b.n	8004b9a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ab2:	78fb      	ldrb	r3, [r7, #3]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	212c      	movs	r1, #44	; 0x2c
 8004ab8:	fb01 f303 	mul.w	r3, r1, r3
 8004abc:	4413      	add	r3, r2
 8004abe:	3342      	adds	r3, #66	; 0x42
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	701a      	strb	r2, [r3, #0]
      break;
 8004ac4:	e069      	b.n	8004b9a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004ac6:	78fb      	ldrb	r3, [r7, #3]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	212c      	movs	r1, #44	; 0x2c
 8004acc:	fb01 f303 	mul.w	r3, r1, r3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3354      	adds	r3, #84	; 0x54
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d109      	bne.n	8004aee <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ada:	78fb      	ldrb	r3, [r7, #3]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	212c      	movs	r1, #44	; 0x2c
 8004ae0:	fb01 f303 	mul.w	r3, r1, r3
 8004ae4:	4413      	add	r3, r2
 8004ae6:	3342      	adds	r3, #66	; 0x42
 8004ae8:	2200      	movs	r2, #0
 8004aea:	701a      	strb	r2, [r3, #0]
      break;
 8004aec:	e055      	b.n	8004b9a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004aee:	78fb      	ldrb	r3, [r7, #3]
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	212c      	movs	r1, #44	; 0x2c
 8004af4:	fb01 f303 	mul.w	r3, r1, r3
 8004af8:	4413      	add	r3, r2
 8004afa:	3342      	adds	r3, #66	; 0x42
 8004afc:	2202      	movs	r2, #2
 8004afe:	701a      	strb	r2, [r3, #0]
      break;
 8004b00:	e04b      	b.n	8004b9a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004b02:	78bb      	ldrb	r3, [r7, #2]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d11d      	bne.n	8004b44 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	212c      	movs	r1, #44	; 0x2c
 8004b0e:	fb01 f303 	mul.w	r3, r1, r3
 8004b12:	4413      	add	r3, r2
 8004b14:	3355      	adds	r3, #85	; 0x55
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	212c      	movs	r1, #44	; 0x2c
 8004b22:	fb01 f303 	mul.w	r3, r1, r3
 8004b26:	4413      	add	r3, r2
 8004b28:	3342      	adds	r3, #66	; 0x42
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004b2e:	e034      	b.n	8004b9a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	212c      	movs	r1, #44	; 0x2c
 8004b36:	fb01 f303 	mul.w	r3, r1, r3
 8004b3a:	4413      	add	r3, r2
 8004b3c:	3342      	adds	r3, #66	; 0x42
 8004b3e:	2202      	movs	r2, #2
 8004b40:	701a      	strb	r2, [r3, #0]
      break;
 8004b42:	e02a      	b.n	8004b9a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	212c      	movs	r1, #44	; 0x2c
 8004b4a:	fb01 f303 	mul.w	r3, r1, r3
 8004b4e:	4413      	add	r3, r2
 8004b50:	3354      	adds	r3, #84	; 0x54
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d109      	bne.n	8004b6c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	212c      	movs	r1, #44	; 0x2c
 8004b5e:	fb01 f303 	mul.w	r3, r1, r3
 8004b62:	4413      	add	r3, r2
 8004b64:	3342      	adds	r3, #66	; 0x42
 8004b66:	2200      	movs	r2, #0
 8004b68:	701a      	strb	r2, [r3, #0]
      break;
 8004b6a:	e016      	b.n	8004b9a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	212c      	movs	r1, #44	; 0x2c
 8004b72:	fb01 f303 	mul.w	r3, r1, r3
 8004b76:	4413      	add	r3, r2
 8004b78:	3342      	adds	r3, #66	; 0x42
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	701a      	strb	r2, [r3, #0]
      break;
 8004b7e:	e00c      	b.n	8004b9a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	212c      	movs	r1, #44	; 0x2c
 8004b86:	fb01 f303 	mul.w	r3, r1, r3
 8004b8a:	4413      	add	r3, r2
 8004b8c:	3342      	adds	r3, #66	; 0x42
 8004b8e:	2200      	movs	r2, #0
 8004b90:	701a      	strb	r2, [r3, #0]
      break;
 8004b92:	e002      	b.n	8004b9a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004b94:	bf00      	nop
 8004b96:	e000      	b.n	8004b9a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004b98:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	212c      	movs	r1, #44	; 0x2c
 8004ba0:	fb01 f303 	mul.w	r3, r1, r3
 8004ba4:	4413      	add	r3, r2
 8004ba6:	3344      	adds	r3, #68	; 0x44
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	8b3a      	ldrh	r2, [r7, #24]
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	202c      	movs	r0, #44	; 0x2c
 8004bb4:	fb00 f303 	mul.w	r3, r0, r3
 8004bb8:	440b      	add	r3, r1
 8004bba:	334c      	adds	r3, #76	; 0x4c
 8004bbc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004bbe:	78fb      	ldrb	r3, [r7, #3]
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	212c      	movs	r1, #44	; 0x2c
 8004bc4:	fb01 f303 	mul.w	r3, r1, r3
 8004bc8:	4413      	add	r3, r2
 8004bca:	3360      	adds	r3, #96	; 0x60
 8004bcc:	2200      	movs	r2, #0
 8004bce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004bd0:	78fb      	ldrb	r3, [r7, #3]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	212c      	movs	r1, #44	; 0x2c
 8004bd6:	fb01 f303 	mul.w	r3, r1, r3
 8004bda:	4413      	add	r3, r2
 8004bdc:	3350      	adds	r3, #80	; 0x50
 8004bde:	2200      	movs	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	212c      	movs	r1, #44	; 0x2c
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	4413      	add	r3, r2
 8004bee:	3339      	adds	r3, #57	; 0x39
 8004bf0:	78fa      	ldrb	r2, [r7, #3]
 8004bf2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	212c      	movs	r1, #44	; 0x2c
 8004bfa:	fb01 f303 	mul.w	r3, r1, r3
 8004bfe:	4413      	add	r3, r2
 8004c00:	3361      	adds	r3, #97	; 0x61
 8004c02:	2200      	movs	r2, #0
 8004c04:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6818      	ldr	r0, [r3, #0]
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	222c      	movs	r2, #44	; 0x2c
 8004c0e:	fb02 f303 	mul.w	r3, r2, r3
 8004c12:	3338      	adds	r3, #56	; 0x38
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	18d1      	adds	r1, r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f005 f820 	bl	8009c64 <USB_HC_StartXfer>
 8004c24:	4603      	mov	r3, r0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop

08004c30 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f004 fd21 	bl	800968e <USB_GetMode>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	f040 80f6 	bne.w	8004e40 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f004 fd05 	bl	8009668 <USB_ReadInterrupts>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 80ec 	beq.w	8004e3e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f004 fcfc 	bl	8009668 <USB_ReadInterrupts>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c7a:	d104      	bne.n	8004c86 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004c84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f004 fcec 	bl	8009668 <USB_ReadInterrupts>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c9a:	d104      	bne.n	8004ca6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ca4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f004 fcdc 	bl	8009668 <USB_ReadInterrupts>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cba:	d104      	bne.n	8004cc6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004cc4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f004 fccc 	bl	8009668 <USB_ReadInterrupts>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d103      	bne.n	8004ce2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f004 fcbe 	bl	8009668 <USB_ReadInterrupts>
 8004cec:	4603      	mov	r3, r0
 8004cee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cf6:	d11c      	bne.n	8004d32 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004d00:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10f      	bne.n	8004d32 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004d12:	2110      	movs	r1, #16
 8004d14:	6938      	ldr	r0, [r7, #16]
 8004d16:	f004 fbad 	bl	8009474 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004d1a:	6938      	ldr	r0, [r7, #16]
 8004d1c:	f004 fbde 	bl	80094dc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2101      	movs	r1, #1
 8004d26:	4618      	mov	r0, r3
 8004d28:	f004 fdb4 	bl	8009894 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f00f fb93 	bl	8014458 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f004 fc96 	bl	8009668 <USB_ReadInterrupts>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d46:	d102      	bne.n	8004d4e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f001 f89e 	bl	8005e8a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f004 fc88 	bl	8009668 <USB_ReadInterrupts>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d106      	bne.n	8004d70 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f00f fb5c 	bl	8014420 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2208      	movs	r2, #8
 8004d6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f004 fc77 	bl	8009668 <USB_ReadInterrupts>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	f003 0310 	and.w	r3, r3, #16
 8004d80:	2b10      	cmp	r3, #16
 8004d82:	d101      	bne.n	8004d88 <HAL_HCD_IRQHandler+0x158>
 8004d84:	2301      	movs	r3, #1
 8004d86:	e000      	b.n	8004d8a <HAL_HCD_IRQHandler+0x15a>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d012      	beq.n	8004db4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	699a      	ldr	r2, [r3, #24]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0210 	bic.w	r2, r2, #16
 8004d9c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 ffa1 	bl	8005ce6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0210 	orr.w	r2, r2, #16
 8004db2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f004 fc55 	bl	8009668 <USB_ReadInterrupts>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dc8:	d13a      	bne.n	8004e40 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f005 f88a 	bl	8009ee8 <USB_HC_ReadInterrupt>
 8004dd4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	e025      	b.n	8004e28 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	fa22 f303 	lsr.w	r3, r2, r3
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d018      	beq.n	8004e22 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e06:	d106      	bne.n	8004e16 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f8ab 	bl	8004f6a <HCD_HC_IN_IRQHandler>
 8004e14:	e005      	b.n	8004e22 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 fbf9 	bl	8005614 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	3301      	adds	r3, #1
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d3d4      	bcc.n	8004ddc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e3a:	615a      	str	r2, [r3, #20]
 8004e3c:	e000      	b.n	8004e40 <HAL_HCD_IRQHandler+0x210>
      return;
 8004e3e:	bf00      	nop
    }
  }
}
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b082      	sub	sp, #8
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <HAL_HCD_Start+0x16>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e013      	b.n	8004e84 <HAL_HCD_Start+0x3e>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2101      	movs	r1, #1
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f004 fd76 	bl	800995c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f004 fa8e 	bl	8009396 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d101      	bne.n	8004ea2 <HAL_HCD_Stop+0x16>
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	e00d      	b.n	8004ebe <HAL_HCD_Stop+0x32>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f005 f964 	bl	800a17c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b082      	sub	sp, #8
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f004 fd18 	bl	8009908 <USB_ResetPort>
 8004ed8:	4603      	mov	r3, r0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	460b      	mov	r3, r1
 8004eec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004eee:	78fb      	ldrb	r3, [r7, #3]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	212c      	movs	r1, #44	; 0x2c
 8004ef4:	fb01 f303 	mul.w	r3, r1, r3
 8004ef8:	4413      	add	r3, r2
 8004efa:	3360      	adds	r3, #96	; 0x60
 8004efc:	781b      	ldrb	r3, [r3, #0]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	460b      	mov	r3, r1
 8004f14:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004f16:	78fb      	ldrb	r3, [r7, #3]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	212c      	movs	r1, #44	; 0x2c
 8004f1c:	fb01 f303 	mul.w	r3, r1, r3
 8004f20:	4413      	add	r3, r2
 8004f22:	3350      	adds	r3, #80	; 0x50
 8004f24:	681b      	ldr	r3, [r3, #0]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f004 fd5c 	bl	80099fc <USB_GetCurrentFrame>
 8004f44:	4603      	mov	r3, r0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b082      	sub	sp, #8
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f004 fd37 	bl	80099ce <USB_GetHostSpeed>
 8004f60:	4603      	mov	r3, r0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b086      	sub	sp, #24
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	460b      	mov	r3, r1
 8004f74:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004f80:	78fb      	ldrb	r3, [r7, #3]
 8004f82:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d11a      	bne.n	8004fd0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	2304      	movs	r3, #4
 8004faa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	212c      	movs	r1, #44	; 0x2c
 8004fb2:	fb01 f303 	mul.w	r3, r1, r3
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3361      	adds	r3, #97	; 0x61
 8004fba:	2206      	movs	r2, #6
 8004fbc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	b2d2      	uxtb	r2, r2
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f004 ff9e 	bl	8009f0a <USB_HC_Halt>
 8004fce:	e0af      	b.n	8005130 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fe6:	d11b      	bne.n	8005020 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ffa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	212c      	movs	r1, #44	; 0x2c
 8005002:	fb01 f303 	mul.w	r3, r1, r3
 8005006:	4413      	add	r3, r2
 8005008:	3361      	adds	r3, #97	; 0x61
 800500a:	2207      	movs	r2, #7
 800500c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	4611      	mov	r1, r2
 8005018:	4618      	mov	r0, r3
 800501a:	f004 ff76 	bl	8009f0a <USB_HC_Halt>
 800501e:	e087      	b.n	8005130 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	4413      	add	r3, r2
 8005028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b20      	cmp	r3, #32
 8005034:	d109      	bne.n	800504a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	4413      	add	r3, r2
 800503e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005042:	461a      	mov	r2, r3
 8005044:	2320      	movs	r3, #32
 8005046:	6093      	str	r3, [r2, #8]
 8005048:	e072      	b.n	8005130 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	4413      	add	r3, r2
 8005052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b08      	cmp	r3, #8
 800505e:	d11a      	bne.n	8005096 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	4413      	add	r3, r2
 8005068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506c:	461a      	mov	r2, r3
 800506e:	2308      	movs	r3, #8
 8005070:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	212c      	movs	r1, #44	; 0x2c
 8005078:	fb01 f303 	mul.w	r3, r1, r3
 800507c:	4413      	add	r3, r2
 800507e:	3361      	adds	r3, #97	; 0x61
 8005080:	2205      	movs	r2, #5
 8005082:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	4611      	mov	r1, r2
 800508e:	4618      	mov	r0, r3
 8005090:	f004 ff3b 	bl	8009f0a <USB_HC_Halt>
 8005094:	e04c      	b.n	8005130 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	4413      	add	r3, r2
 800509e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ac:	d11b      	bne.n	80050e6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ba:	461a      	mov	r2, r3
 80050bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	212c      	movs	r1, #44	; 0x2c
 80050c8:	fb01 f303 	mul.w	r3, r1, r3
 80050cc:	4413      	add	r3, r2
 80050ce:	3361      	adds	r3, #97	; 0x61
 80050d0:	2208      	movs	r2, #8
 80050d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	4611      	mov	r1, r2
 80050de:	4618      	mov	r0, r3
 80050e0:	f004 ff13 	bl	8009f0a <USB_HC_Halt>
 80050e4:	e024      	b.n	8005130 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f8:	2b80      	cmp	r3, #128	; 0x80
 80050fa:	d119      	bne.n	8005130 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	4413      	add	r3, r2
 8005104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005108:	461a      	mov	r2, r3
 800510a:	2380      	movs	r3, #128	; 0x80
 800510c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	212c      	movs	r1, #44	; 0x2c
 8005114:	fb01 f303 	mul.w	r3, r1, r3
 8005118:	4413      	add	r3, r2
 800511a:	3361      	adds	r3, #97	; 0x61
 800511c:	2206      	movs	r2, #6
 800511e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	4611      	mov	r1, r2
 800512a:	4618      	mov	r0, r3
 800512c:	f004 feed 	bl	8009f0a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	4413      	add	r3, r2
 8005138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005146:	d112      	bne.n	800516e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	4611      	mov	r1, r2
 8005152:	4618      	mov	r0, r3
 8005154:	f004 fed9 	bl	8009f0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	4413      	add	r3, r2
 8005160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005164:	461a      	mov	r2, r3
 8005166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800516a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800516c:	e24e      	b.n	800560c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4413      	add	r3, r2
 8005176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b01      	cmp	r3, #1
 8005182:	f040 80df 	bne.w	8005344 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d019      	beq.n	80051c2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	212c      	movs	r1, #44	; 0x2c
 8005194:	fb01 f303 	mul.w	r3, r1, r3
 8005198:	4413      	add	r3, r2
 800519a:	3348      	adds	r3, #72	; 0x48
 800519c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	0159      	lsls	r1, r3, #5
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	440b      	add	r3, r1
 80051a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80051b0:	1ad2      	subs	r2, r2, r3
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	202c      	movs	r0, #44	; 0x2c
 80051b8:	fb00 f303 	mul.w	r3, r0, r3
 80051bc:	440b      	add	r3, r1
 80051be:	3350      	adds	r3, #80	; 0x50
 80051c0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	212c      	movs	r1, #44	; 0x2c
 80051c8:	fb01 f303 	mul.w	r3, r1, r3
 80051cc:	4413      	add	r3, r2
 80051ce:	3361      	adds	r3, #97	; 0x61
 80051d0:	2201      	movs	r2, #1
 80051d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	212c      	movs	r1, #44	; 0x2c
 80051da:	fb01 f303 	mul.w	r3, r1, r3
 80051de:	4413      	add	r3, r2
 80051e0:	335c      	adds	r3, #92	; 0x5c
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f2:	461a      	mov	r2, r3
 80051f4:	2301      	movs	r3, #1
 80051f6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	212c      	movs	r1, #44	; 0x2c
 80051fe:	fb01 f303 	mul.w	r3, r1, r3
 8005202:	4413      	add	r3, r2
 8005204:	333f      	adds	r3, #63	; 0x3f
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d009      	beq.n	8005220 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	212c      	movs	r1, #44	; 0x2c
 8005212:	fb01 f303 	mul.w	r3, r1, r3
 8005216:	4413      	add	r3, r2
 8005218:	333f      	adds	r3, #63	; 0x3f
 800521a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800521c:	2b02      	cmp	r3, #2
 800521e:	d111      	bne.n	8005244 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	4611      	mov	r1, r2
 800522a:	4618      	mov	r0, r3
 800522c:	f004 fe6d 	bl	8009f0a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	4413      	add	r3, r2
 8005238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523c:	461a      	mov	r2, r3
 800523e:	2310      	movs	r3, #16
 8005240:	6093      	str	r3, [r2, #8]
 8005242:	e03a      	b.n	80052ba <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	212c      	movs	r1, #44	; 0x2c
 800524a:	fb01 f303 	mul.w	r3, r1, r3
 800524e:	4413      	add	r3, r2
 8005250:	333f      	adds	r3, #63	; 0x3f
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b03      	cmp	r3, #3
 8005256:	d009      	beq.n	800526c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	212c      	movs	r1, #44	; 0x2c
 800525e:	fb01 f303 	mul.w	r3, r1, r3
 8005262:	4413      	add	r3, r2
 8005264:	333f      	adds	r3, #63	; 0x3f
 8005266:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005268:	2b01      	cmp	r3, #1
 800526a:	d126      	bne.n	80052ba <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	4413      	add	r3, r2
 8005274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	0151      	lsls	r1, r2, #5
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	440a      	add	r2, r1
 8005282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005286:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800528a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	212c      	movs	r1, #44	; 0x2c
 8005292:	fb01 f303 	mul.w	r3, r1, r3
 8005296:	4413      	add	r3, r2
 8005298:	3360      	adds	r3, #96	; 0x60
 800529a:	2201      	movs	r2, #1
 800529c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	b2d9      	uxtb	r1, r3
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	202c      	movs	r0, #44	; 0x2c
 80052a8:	fb00 f303 	mul.w	r3, r0, r3
 80052ac:	4413      	add	r3, r2
 80052ae:	3360      	adds	r3, #96	; 0x60
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f00f f8dd 	bl	8014474 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d12b      	bne.n	800531a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	212c      	movs	r1, #44	; 0x2c
 80052c8:	fb01 f303 	mul.w	r3, r1, r3
 80052cc:	4413      	add	r3, r2
 80052ce:	3348      	adds	r3, #72	; 0x48
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6879      	ldr	r1, [r7, #4]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	202c      	movs	r0, #44	; 0x2c
 80052d8:	fb00 f202 	mul.w	r2, r0, r2
 80052dc:	440a      	add	r2, r1
 80052de:	3240      	adds	r2, #64	; 0x40
 80052e0:	8812      	ldrh	r2, [r2, #0]
 80052e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 818e 	beq.w	800560c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	212c      	movs	r1, #44	; 0x2c
 80052f6:	fb01 f303 	mul.w	r3, r1, r3
 80052fa:	4413      	add	r3, r2
 80052fc:	3354      	adds	r3, #84	; 0x54
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	f083 0301 	eor.w	r3, r3, #1
 8005304:	b2d8      	uxtb	r0, r3
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	212c      	movs	r1, #44	; 0x2c
 800530c:	fb01 f303 	mul.w	r3, r1, r3
 8005310:	4413      	add	r3, r2
 8005312:	3354      	adds	r3, #84	; 0x54
 8005314:	4602      	mov	r2, r0
 8005316:	701a      	strb	r2, [r3, #0]
}
 8005318:	e178      	b.n	800560c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	212c      	movs	r1, #44	; 0x2c
 8005320:	fb01 f303 	mul.w	r3, r1, r3
 8005324:	4413      	add	r3, r2
 8005326:	3354      	adds	r3, #84	; 0x54
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	f083 0301 	eor.w	r3, r3, #1
 800532e:	b2d8      	uxtb	r0, r3
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	212c      	movs	r1, #44	; 0x2c
 8005336:	fb01 f303 	mul.w	r3, r1, r3
 800533a:	4413      	add	r3, r2
 800533c:	3354      	adds	r3, #84	; 0x54
 800533e:	4602      	mov	r2, r0
 8005340:	701a      	strb	r2, [r3, #0]
}
 8005342:	e163      	b.n	800560c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	4413      	add	r3, r2
 800534c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b02      	cmp	r3, #2
 8005358:	f040 80f6 	bne.w	8005548 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	212c      	movs	r1, #44	; 0x2c
 8005362:	fb01 f303 	mul.w	r3, r1, r3
 8005366:	4413      	add	r3, r2
 8005368:	3361      	adds	r3, #97	; 0x61
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d109      	bne.n	8005384 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	212c      	movs	r1, #44	; 0x2c
 8005376:	fb01 f303 	mul.w	r3, r1, r3
 800537a:	4413      	add	r3, r2
 800537c:	3360      	adds	r3, #96	; 0x60
 800537e:	2201      	movs	r2, #1
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	e0c9      	b.n	8005518 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	212c      	movs	r1, #44	; 0x2c
 800538a:	fb01 f303 	mul.w	r3, r1, r3
 800538e:	4413      	add	r3, r2
 8005390:	3361      	adds	r3, #97	; 0x61
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	2b05      	cmp	r3, #5
 8005396:	d109      	bne.n	80053ac <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	212c      	movs	r1, #44	; 0x2c
 800539e:	fb01 f303 	mul.w	r3, r1, r3
 80053a2:	4413      	add	r3, r2
 80053a4:	3360      	adds	r3, #96	; 0x60
 80053a6:	2205      	movs	r2, #5
 80053a8:	701a      	strb	r2, [r3, #0]
 80053aa:	e0b5      	b.n	8005518 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	212c      	movs	r1, #44	; 0x2c
 80053b2:	fb01 f303 	mul.w	r3, r1, r3
 80053b6:	4413      	add	r3, r2
 80053b8:	3361      	adds	r3, #97	; 0x61
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b06      	cmp	r3, #6
 80053be:	d009      	beq.n	80053d4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	212c      	movs	r1, #44	; 0x2c
 80053c6:	fb01 f303 	mul.w	r3, r1, r3
 80053ca:	4413      	add	r3, r2
 80053cc:	3361      	adds	r3, #97	; 0x61
 80053ce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	d150      	bne.n	8005476 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	212c      	movs	r1, #44	; 0x2c
 80053da:	fb01 f303 	mul.w	r3, r1, r3
 80053de:	4413      	add	r3, r2
 80053e0:	335c      	adds	r3, #92	; 0x5c
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	202c      	movs	r0, #44	; 0x2c
 80053ec:	fb00 f303 	mul.w	r3, r0, r3
 80053f0:	440b      	add	r3, r1
 80053f2:	335c      	adds	r3, #92	; 0x5c
 80053f4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	212c      	movs	r1, #44	; 0x2c
 80053fc:	fb01 f303 	mul.w	r3, r1, r3
 8005400:	4413      	add	r3, r2
 8005402:	335c      	adds	r3, #92	; 0x5c
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b02      	cmp	r3, #2
 8005408:	d912      	bls.n	8005430 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	212c      	movs	r1, #44	; 0x2c
 8005410:	fb01 f303 	mul.w	r3, r1, r3
 8005414:	4413      	add	r3, r2
 8005416:	335c      	adds	r3, #92	; 0x5c
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	212c      	movs	r1, #44	; 0x2c
 8005422:	fb01 f303 	mul.w	r3, r1, r3
 8005426:	4413      	add	r3, r2
 8005428:	3360      	adds	r3, #96	; 0x60
 800542a:	2204      	movs	r2, #4
 800542c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800542e:	e073      	b.n	8005518 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	212c      	movs	r1, #44	; 0x2c
 8005436:	fb01 f303 	mul.w	r3, r1, r3
 800543a:	4413      	add	r3, r2
 800543c:	3360      	adds	r3, #96	; 0x60
 800543e:	2202      	movs	r2, #2
 8005440:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	4413      	add	r3, r2
 800544a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005458:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005460:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	4413      	add	r3, r2
 800546a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800546e:	461a      	mov	r2, r3
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005474:	e050      	b.n	8005518 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	212c      	movs	r1, #44	; 0x2c
 800547c:	fb01 f303 	mul.w	r3, r1, r3
 8005480:	4413      	add	r3, r2
 8005482:	3361      	adds	r3, #97	; 0x61
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b03      	cmp	r3, #3
 8005488:	d122      	bne.n	80054d0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	212c      	movs	r1, #44	; 0x2c
 8005490:	fb01 f303 	mul.w	r3, r1, r3
 8005494:	4413      	add	r3, r2
 8005496:	3360      	adds	r3, #96	; 0x60
 8005498:	2202      	movs	r2, #2
 800549a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054b2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054ba:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c8:	461a      	mov	r2, r3
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	e023      	b.n	8005518 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	212c      	movs	r1, #44	; 0x2c
 80054d6:	fb01 f303 	mul.w	r3, r1, r3
 80054da:	4413      	add	r3, r2
 80054dc:	3361      	adds	r3, #97	; 0x61
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b07      	cmp	r3, #7
 80054e2:	d119      	bne.n	8005518 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	212c      	movs	r1, #44	; 0x2c
 80054ea:	fb01 f303 	mul.w	r3, r1, r3
 80054ee:	4413      	add	r3, r2
 80054f0:	335c      	adds	r3, #92	; 0x5c
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	202c      	movs	r0, #44	; 0x2c
 80054fc:	fb00 f303 	mul.w	r3, r0, r3
 8005500:	440b      	add	r3, r1
 8005502:	335c      	adds	r3, #92	; 0x5c
 8005504:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	212c      	movs	r1, #44	; 0x2c
 800550c:	fb01 f303 	mul.w	r3, r1, r3
 8005510:	4413      	add	r3, r2
 8005512:	3360      	adds	r3, #96	; 0x60
 8005514:	2204      	movs	r2, #4
 8005516:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	4413      	add	r3, r2
 8005520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005524:	461a      	mov	r2, r3
 8005526:	2302      	movs	r3, #2
 8005528:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	b2d9      	uxtb	r1, r3
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	202c      	movs	r0, #44	; 0x2c
 8005534:	fb00 f303 	mul.w	r3, r0, r3
 8005538:	4413      	add	r3, r2
 800553a:	3360      	adds	r3, #96	; 0x60
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f00e ff97 	bl	8014474 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005546:	e061      	b.n	800560c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	4413      	add	r3, r2
 8005550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 0310 	and.w	r3, r3, #16
 800555a:	2b10      	cmp	r3, #16
 800555c:	d156      	bne.n	800560c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	212c      	movs	r1, #44	; 0x2c
 8005564:	fb01 f303 	mul.w	r3, r1, r3
 8005568:	4413      	add	r3, r2
 800556a:	333f      	adds	r3, #63	; 0x3f
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b03      	cmp	r3, #3
 8005570:	d111      	bne.n	8005596 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	212c      	movs	r1, #44	; 0x2c
 8005578:	fb01 f303 	mul.w	r3, r1, r3
 800557c:	4413      	add	r3, r2
 800557e:	335c      	adds	r3, #92	; 0x5c
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	4611      	mov	r1, r2
 800558e:	4618      	mov	r0, r3
 8005590:	f004 fcbb 	bl	8009f0a <USB_HC_Halt>
 8005594:	e031      	b.n	80055fa <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	212c      	movs	r1, #44	; 0x2c
 800559c:	fb01 f303 	mul.w	r3, r1, r3
 80055a0:	4413      	add	r3, r2
 80055a2:	333f      	adds	r3, #63	; 0x3f
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d009      	beq.n	80055be <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	212c      	movs	r1, #44	; 0x2c
 80055b0:	fb01 f303 	mul.w	r3, r1, r3
 80055b4:	4413      	add	r3, r2
 80055b6:	333f      	adds	r3, #63	; 0x3f
 80055b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d11d      	bne.n	80055fa <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	212c      	movs	r1, #44	; 0x2c
 80055c4:	fb01 f303 	mul.w	r3, r1, r3
 80055c8:	4413      	add	r3, r2
 80055ca:	335c      	adds	r3, #92	; 0x5c
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d110      	bne.n	80055fa <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	212c      	movs	r1, #44	; 0x2c
 80055de:	fb01 f303 	mul.w	r3, r1, r3
 80055e2:	4413      	add	r3, r2
 80055e4:	3361      	adds	r3, #97	; 0x61
 80055e6:	2203      	movs	r2, #3
 80055e8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	4611      	mov	r1, r2
 80055f4:	4618      	mov	r0, r3
 80055f6:	f004 fc88 	bl	8009f0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	4413      	add	r3, r2
 8005602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005606:	461a      	mov	r2, r3
 8005608:	2310      	movs	r3, #16
 800560a:	6093      	str	r3, [r2, #8]
}
 800560c:	bf00      	nop
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	460b      	mov	r3, r1
 800561e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800562a:	78fb      	ldrb	r3, [r7, #3]
 800562c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	4413      	add	r3, r2
 8005636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b04      	cmp	r3, #4
 8005642:	d11a      	bne.n	800567a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	4413      	add	r3, r2
 800564c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005650:	461a      	mov	r2, r3
 8005652:	2304      	movs	r3, #4
 8005654:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	212c      	movs	r1, #44	; 0x2c
 800565c:	fb01 f303 	mul.w	r3, r1, r3
 8005660:	4413      	add	r3, r2
 8005662:	3361      	adds	r3, #97	; 0x61
 8005664:	2206      	movs	r2, #6
 8005666:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	4611      	mov	r1, r2
 8005672:	4618      	mov	r0, r3
 8005674:	f004 fc49 	bl	8009f0a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8005678:	e331      	b.n	8005cde <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	4413      	add	r3, r2
 8005682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b20      	cmp	r3, #32
 800568e:	d12e      	bne.n	80056ee <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	4413      	add	r3, r2
 8005698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800569c:	461a      	mov	r2, r3
 800569e:	2320      	movs	r3, #32
 80056a0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	212c      	movs	r1, #44	; 0x2c
 80056a8:	fb01 f303 	mul.w	r3, r1, r3
 80056ac:	4413      	add	r3, r2
 80056ae:	333d      	adds	r3, #61	; 0x3d
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	f040 8313 	bne.w	8005cde <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	212c      	movs	r1, #44	; 0x2c
 80056be:	fb01 f303 	mul.w	r3, r1, r3
 80056c2:	4413      	add	r3, r2
 80056c4:	333d      	adds	r3, #61	; 0x3d
 80056c6:	2200      	movs	r2, #0
 80056c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	212c      	movs	r1, #44	; 0x2c
 80056d0:	fb01 f303 	mul.w	r3, r1, r3
 80056d4:	4413      	add	r3, r2
 80056d6:	3360      	adds	r3, #96	; 0x60
 80056d8:	2202      	movs	r2, #2
 80056da:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	b2d2      	uxtb	r2, r2
 80056e4:	4611      	mov	r1, r2
 80056e6:	4618      	mov	r0, r3
 80056e8:	f004 fc0f 	bl	8009f0a <USB_HC_Halt>
}
 80056ec:	e2f7      	b.n	8005cde <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005704:	d112      	bne.n	800572c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	4413      	add	r3, r2
 800570e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005712:	461a      	mov	r2, r3
 8005714:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005718:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	4611      	mov	r1, r2
 8005724:	4618      	mov	r0, r3
 8005726:	f004 fbf0 	bl	8009f0a <USB_HC_Halt>
}
 800572a:	e2d8      	b.n	8005cde <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	4413      	add	r3, r2
 8005734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b01      	cmp	r3, #1
 8005740:	d140      	bne.n	80057c4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	212c      	movs	r1, #44	; 0x2c
 8005748:	fb01 f303 	mul.w	r3, r1, r3
 800574c:	4413      	add	r3, r2
 800574e:	335c      	adds	r3, #92	; 0x5c
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	4413      	add	r3, r2
 800575c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005766:	2b40      	cmp	r3, #64	; 0x40
 8005768:	d111      	bne.n	800578e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	212c      	movs	r1, #44	; 0x2c
 8005770:	fb01 f303 	mul.w	r3, r1, r3
 8005774:	4413      	add	r3, r2
 8005776:	333d      	adds	r3, #61	; 0x3d
 8005778:	2201      	movs	r2, #1
 800577a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	4413      	add	r3, r2
 8005784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005788:	461a      	mov	r2, r3
 800578a:	2340      	movs	r3, #64	; 0x40
 800578c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	4413      	add	r3, r2
 8005796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579a:	461a      	mov	r2, r3
 800579c:	2301      	movs	r3, #1
 800579e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	212c      	movs	r1, #44	; 0x2c
 80057a6:	fb01 f303 	mul.w	r3, r1, r3
 80057aa:	4413      	add	r3, r2
 80057ac:	3361      	adds	r3, #97	; 0x61
 80057ae:	2201      	movs	r2, #1
 80057b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	4611      	mov	r1, r2
 80057bc:	4618      	mov	r0, r3
 80057be:	f004 fba4 	bl	8009f0a <USB_HC_Halt>
}
 80057c2:	e28c      	b.n	8005cde <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	d12c      	bne.n	8005834 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	212c      	movs	r1, #44	; 0x2c
 80057e0:	fb01 f303 	mul.w	r3, r1, r3
 80057e4:	4413      	add	r3, r2
 80057e6:	3361      	adds	r3, #97	; 0x61
 80057e8:	2204      	movs	r2, #4
 80057ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	212c      	movs	r1, #44	; 0x2c
 80057f2:	fb01 f303 	mul.w	r3, r1, r3
 80057f6:	4413      	add	r3, r2
 80057f8:	333d      	adds	r3, #61	; 0x3d
 80057fa:	2201      	movs	r2, #1
 80057fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	212c      	movs	r1, #44	; 0x2c
 8005804:	fb01 f303 	mul.w	r3, r1, r3
 8005808:	4413      	add	r3, r2
 800580a:	335c      	adds	r3, #92	; 0x5c
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	b2d2      	uxtb	r2, r2
 8005818:	4611      	mov	r1, r2
 800581a:	4618      	mov	r0, r3
 800581c:	f004 fb75 	bl	8009f0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	4413      	add	r3, r2
 8005828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800582c:	461a      	mov	r2, r3
 800582e:	2340      	movs	r3, #64	; 0x40
 8005830:	6093      	str	r3, [r2, #8]
}
 8005832:	e254      	b.n	8005cde <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	4413      	add	r3, r2
 800583c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b08      	cmp	r3, #8
 8005848:	d11a      	bne.n	8005880 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	4413      	add	r3, r2
 8005852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005856:	461a      	mov	r2, r3
 8005858:	2308      	movs	r3, #8
 800585a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	212c      	movs	r1, #44	; 0x2c
 8005862:	fb01 f303 	mul.w	r3, r1, r3
 8005866:	4413      	add	r3, r2
 8005868:	3361      	adds	r3, #97	; 0x61
 800586a:	2205      	movs	r2, #5
 800586c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	4611      	mov	r1, r2
 8005878:	4618      	mov	r0, r3
 800587a:	f004 fb46 	bl	8009f0a <USB_HC_Halt>
}
 800587e:	e22e      	b.n	8005cde <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	4413      	add	r3, r2
 8005888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 0310 	and.w	r3, r3, #16
 8005892:	2b10      	cmp	r3, #16
 8005894:	d140      	bne.n	8005918 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	212c      	movs	r1, #44	; 0x2c
 800589c:	fb01 f303 	mul.w	r3, r1, r3
 80058a0:	4413      	add	r3, r2
 80058a2:	335c      	adds	r3, #92	; 0x5c
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	212c      	movs	r1, #44	; 0x2c
 80058ae:	fb01 f303 	mul.w	r3, r1, r3
 80058b2:	4413      	add	r3, r2
 80058b4:	3361      	adds	r3, #97	; 0x61
 80058b6:	2203      	movs	r2, #3
 80058b8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	212c      	movs	r1, #44	; 0x2c
 80058c0:	fb01 f303 	mul.w	r3, r1, r3
 80058c4:	4413      	add	r3, r2
 80058c6:	333d      	adds	r3, #61	; 0x3d
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d112      	bne.n	80058f4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	212c      	movs	r1, #44	; 0x2c
 80058d4:	fb01 f303 	mul.w	r3, r1, r3
 80058d8:	4413      	add	r3, r2
 80058da:	333c      	adds	r3, #60	; 0x3c
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d108      	bne.n	80058f4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	212c      	movs	r1, #44	; 0x2c
 80058e8:	fb01 f303 	mul.w	r3, r1, r3
 80058ec:	4413      	add	r3, r2
 80058ee:	333d      	adds	r3, #61	; 0x3d
 80058f0:	2201      	movs	r2, #1
 80058f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	4611      	mov	r1, r2
 80058fe:	4618      	mov	r0, r3
 8005900:	f004 fb03 	bl	8009f0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	4413      	add	r3, r2
 800590c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005910:	461a      	mov	r2, r3
 8005912:	2310      	movs	r3, #16
 8005914:	6093      	str	r3, [r2, #8]
}
 8005916:	e1e2      	b.n	8005cde <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	4413      	add	r3, r2
 8005920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592a:	2b80      	cmp	r3, #128	; 0x80
 800592c:	d164      	bne.n	80059f8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d111      	bne.n	800595a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	212c      	movs	r1, #44	; 0x2c
 800593c:	fb01 f303 	mul.w	r3, r1, r3
 8005940:	4413      	add	r3, r2
 8005942:	3361      	adds	r3, #97	; 0x61
 8005944:	2206      	movs	r2, #6
 8005946:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	4611      	mov	r1, r2
 8005952:	4618      	mov	r0, r3
 8005954:	f004 fad9 	bl	8009f0a <USB_HC_Halt>
 8005958:	e044      	b.n	80059e4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	212c      	movs	r1, #44	; 0x2c
 8005960:	fb01 f303 	mul.w	r3, r1, r3
 8005964:	4413      	add	r3, r2
 8005966:	335c      	adds	r3, #92	; 0x5c
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	202c      	movs	r0, #44	; 0x2c
 8005972:	fb00 f303 	mul.w	r3, r0, r3
 8005976:	440b      	add	r3, r1
 8005978:	335c      	adds	r3, #92	; 0x5c
 800597a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	212c      	movs	r1, #44	; 0x2c
 8005982:	fb01 f303 	mul.w	r3, r1, r3
 8005986:	4413      	add	r3, r2
 8005988:	335c      	adds	r3, #92	; 0x5c
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2b02      	cmp	r3, #2
 800598e:	d920      	bls.n	80059d2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	212c      	movs	r1, #44	; 0x2c
 8005996:	fb01 f303 	mul.w	r3, r1, r3
 800599a:	4413      	add	r3, r2
 800599c:	335c      	adds	r3, #92	; 0x5c
 800599e:	2200      	movs	r2, #0
 80059a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	212c      	movs	r1, #44	; 0x2c
 80059a8:	fb01 f303 	mul.w	r3, r1, r3
 80059ac:	4413      	add	r3, r2
 80059ae:	3360      	adds	r3, #96	; 0x60
 80059b0:	2204      	movs	r2, #4
 80059b2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	b2d9      	uxtb	r1, r3
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	202c      	movs	r0, #44	; 0x2c
 80059be:	fb00 f303 	mul.w	r3, r0, r3
 80059c2:	4413      	add	r3, r2
 80059c4:	3360      	adds	r3, #96	; 0x60
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	461a      	mov	r2, r3
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f00e fd52 	bl	8014474 <HAL_HCD_HC_NotifyURBChange_Callback>
 80059d0:	e008      	b.n	80059e4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	212c      	movs	r1, #44	; 0x2c
 80059d8:	fb01 f303 	mul.w	r3, r1, r3
 80059dc:	4413      	add	r3, r2
 80059de:	3360      	adds	r3, #96	; 0x60
 80059e0:	2202      	movs	r2, #2
 80059e2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f0:	461a      	mov	r2, r3
 80059f2:	2380      	movs	r3, #128	; 0x80
 80059f4:	6093      	str	r3, [r2, #8]
}
 80059f6:	e172      	b.n	8005cde <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a0e:	d11b      	bne.n	8005a48 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	212c      	movs	r1, #44	; 0x2c
 8005a16:	fb01 f303 	mul.w	r3, r1, r3
 8005a1a:	4413      	add	r3, r2
 8005a1c:	3361      	adds	r3, #97	; 0x61
 8005a1e:	2208      	movs	r2, #8
 8005a20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f004 fa6c 	bl	8009f0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3e:	461a      	mov	r2, r3
 8005a40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a44:	6093      	str	r3, [r2, #8]
}
 8005a46:	e14a      	b.n	8005cde <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	f040 813f 	bne.w	8005cde <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	212c      	movs	r1, #44	; 0x2c
 8005a66:	fb01 f303 	mul.w	r3, r1, r3
 8005a6a:	4413      	add	r3, r2
 8005a6c:	3361      	adds	r3, #97	; 0x61
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d17d      	bne.n	8005b70 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	212c      	movs	r1, #44	; 0x2c
 8005a7a:	fb01 f303 	mul.w	r3, r1, r3
 8005a7e:	4413      	add	r3, r2
 8005a80:	3360      	adds	r3, #96	; 0x60
 8005a82:	2201      	movs	r2, #1
 8005a84:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	212c      	movs	r1, #44	; 0x2c
 8005a8c:	fb01 f303 	mul.w	r3, r1, r3
 8005a90:	4413      	add	r3, r2
 8005a92:	333f      	adds	r3, #63	; 0x3f
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d00a      	beq.n	8005ab0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	212c      	movs	r1, #44	; 0x2c
 8005aa0:	fb01 f303 	mul.w	r3, r1, r3
 8005aa4:	4413      	add	r3, r2
 8005aa6:	333f      	adds	r3, #63	; 0x3f
 8005aa8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	f040 8100 	bne.w	8005cb0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d113      	bne.n	8005ae0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	212c      	movs	r1, #44	; 0x2c
 8005abe:	fb01 f303 	mul.w	r3, r1, r3
 8005ac2:	4413      	add	r3, r2
 8005ac4:	3355      	adds	r3, #85	; 0x55
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	f083 0301 	eor.w	r3, r3, #1
 8005acc:	b2d8      	uxtb	r0, r3
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	212c      	movs	r1, #44	; 0x2c
 8005ad4:	fb01 f303 	mul.w	r3, r1, r3
 8005ad8:	4413      	add	r3, r2
 8005ada:	3355      	adds	r3, #85	; 0x55
 8005adc:	4602      	mov	r2, r0
 8005ade:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	f040 80e3 	bne.w	8005cb0 <HCD_HC_OUT_IRQHandler+0x69c>
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	212c      	movs	r1, #44	; 0x2c
 8005af0:	fb01 f303 	mul.w	r3, r1, r3
 8005af4:	4413      	add	r3, r2
 8005af6:	334c      	adds	r3, #76	; 0x4c
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 80d8 	beq.w	8005cb0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	212c      	movs	r1, #44	; 0x2c
 8005b06:	fb01 f303 	mul.w	r3, r1, r3
 8005b0a:	4413      	add	r3, r2
 8005b0c:	334c      	adds	r3, #76	; 0x4c
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6879      	ldr	r1, [r7, #4]
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	202c      	movs	r0, #44	; 0x2c
 8005b16:	fb00 f202 	mul.w	r2, r0, r2
 8005b1a:	440a      	add	r2, r1
 8005b1c:	3240      	adds	r2, #64	; 0x40
 8005b1e:	8812      	ldrh	r2, [r2, #0]
 8005b20:	4413      	add	r3, r2
 8005b22:	3b01      	subs	r3, #1
 8005b24:	6879      	ldr	r1, [r7, #4]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	202c      	movs	r0, #44	; 0x2c
 8005b2a:	fb00 f202 	mul.w	r2, r0, r2
 8005b2e:	440a      	add	r2, r1
 8005b30:	3240      	adds	r2, #64	; 0x40
 8005b32:	8812      	ldrh	r2, [r2, #0]
 8005b34:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 80b5 	beq.w	8005cb0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	212c      	movs	r1, #44	; 0x2c
 8005b4c:	fb01 f303 	mul.w	r3, r1, r3
 8005b50:	4413      	add	r3, r2
 8005b52:	3355      	adds	r3, #85	; 0x55
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	f083 0301 	eor.w	r3, r3, #1
 8005b5a:	b2d8      	uxtb	r0, r3
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	212c      	movs	r1, #44	; 0x2c
 8005b62:	fb01 f303 	mul.w	r3, r1, r3
 8005b66:	4413      	add	r3, r2
 8005b68:	3355      	adds	r3, #85	; 0x55
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	701a      	strb	r2, [r3, #0]
 8005b6e:	e09f      	b.n	8005cb0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	212c      	movs	r1, #44	; 0x2c
 8005b76:	fb01 f303 	mul.w	r3, r1, r3
 8005b7a:	4413      	add	r3, r2
 8005b7c:	3361      	adds	r3, #97	; 0x61
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b03      	cmp	r3, #3
 8005b82:	d109      	bne.n	8005b98 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	212c      	movs	r1, #44	; 0x2c
 8005b8a:	fb01 f303 	mul.w	r3, r1, r3
 8005b8e:	4413      	add	r3, r2
 8005b90:	3360      	adds	r3, #96	; 0x60
 8005b92:	2202      	movs	r2, #2
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	e08b      	b.n	8005cb0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	212c      	movs	r1, #44	; 0x2c
 8005b9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ba2:	4413      	add	r3, r2
 8005ba4:	3361      	adds	r3, #97	; 0x61
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	d109      	bne.n	8005bc0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	212c      	movs	r1, #44	; 0x2c
 8005bb2:	fb01 f303 	mul.w	r3, r1, r3
 8005bb6:	4413      	add	r3, r2
 8005bb8:	3360      	adds	r3, #96	; 0x60
 8005bba:	2202      	movs	r2, #2
 8005bbc:	701a      	strb	r2, [r3, #0]
 8005bbe:	e077      	b.n	8005cb0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	212c      	movs	r1, #44	; 0x2c
 8005bc6:	fb01 f303 	mul.w	r3, r1, r3
 8005bca:	4413      	add	r3, r2
 8005bcc:	3361      	adds	r3, #97	; 0x61
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b05      	cmp	r3, #5
 8005bd2:	d109      	bne.n	8005be8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	212c      	movs	r1, #44	; 0x2c
 8005bda:	fb01 f303 	mul.w	r3, r1, r3
 8005bde:	4413      	add	r3, r2
 8005be0:	3360      	adds	r3, #96	; 0x60
 8005be2:	2205      	movs	r2, #5
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	e063      	b.n	8005cb0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	212c      	movs	r1, #44	; 0x2c
 8005bee:	fb01 f303 	mul.w	r3, r1, r3
 8005bf2:	4413      	add	r3, r2
 8005bf4:	3361      	adds	r3, #97	; 0x61
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b06      	cmp	r3, #6
 8005bfa:	d009      	beq.n	8005c10 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	212c      	movs	r1, #44	; 0x2c
 8005c02:	fb01 f303 	mul.w	r3, r1, r3
 8005c06:	4413      	add	r3, r2
 8005c08:	3361      	adds	r3, #97	; 0x61
 8005c0a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d14f      	bne.n	8005cb0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	212c      	movs	r1, #44	; 0x2c
 8005c16:	fb01 f303 	mul.w	r3, r1, r3
 8005c1a:	4413      	add	r3, r2
 8005c1c:	335c      	adds	r3, #92	; 0x5c
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	1c5a      	adds	r2, r3, #1
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	202c      	movs	r0, #44	; 0x2c
 8005c28:	fb00 f303 	mul.w	r3, r0, r3
 8005c2c:	440b      	add	r3, r1
 8005c2e:	335c      	adds	r3, #92	; 0x5c
 8005c30:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	212c      	movs	r1, #44	; 0x2c
 8005c38:	fb01 f303 	mul.w	r3, r1, r3
 8005c3c:	4413      	add	r3, r2
 8005c3e:	335c      	adds	r3, #92	; 0x5c
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d912      	bls.n	8005c6c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	212c      	movs	r1, #44	; 0x2c
 8005c4c:	fb01 f303 	mul.w	r3, r1, r3
 8005c50:	4413      	add	r3, r2
 8005c52:	335c      	adds	r3, #92	; 0x5c
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	212c      	movs	r1, #44	; 0x2c
 8005c5e:	fb01 f303 	mul.w	r3, r1, r3
 8005c62:	4413      	add	r3, r2
 8005c64:	3360      	adds	r3, #96	; 0x60
 8005c66:	2204      	movs	r2, #4
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	e021      	b.n	8005cb0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	212c      	movs	r1, #44	; 0x2c
 8005c72:	fb01 f303 	mul.w	r3, r1, r3
 8005c76:	4413      	add	r3, r2
 8005c78:	3360      	adds	r3, #96	; 0x60
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c94:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c9c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005caa:	461a      	mov	r2, r3
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	b2d9      	uxtb	r1, r3
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	202c      	movs	r0, #44	; 0x2c
 8005ccc:	fb00 f303 	mul.w	r3, r0, r3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	3360      	adds	r3, #96	; 0x60
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f00e fbcb 	bl	8014474 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005cde:	bf00      	nop
 8005ce0:	3720      	adds	r7, #32
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b08a      	sub	sp, #40	; 0x28
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	f003 030f 	and.w	r3, r3, #15
 8005d06:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	0c5b      	lsrs	r3, r3, #17
 8005d0c:	f003 030f 	and.w	r3, r3, #15
 8005d10:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	091b      	lsrs	r3, r3, #4
 8005d16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d1a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d004      	beq.n	8005d2c <HCD_RXQLVL_IRQHandler+0x46>
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2b05      	cmp	r3, #5
 8005d26:	f000 80a9 	beq.w	8005e7c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005d2a:	e0aa      	b.n	8005e82 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f000 80a6 	beq.w	8005e80 <HCD_RXQLVL_IRQHandler+0x19a>
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	212c      	movs	r1, #44	; 0x2c
 8005d3a:	fb01 f303 	mul.w	r3, r1, r3
 8005d3e:	4413      	add	r3, r2
 8005d40:	3344      	adds	r3, #68	; 0x44
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 809b 	beq.w	8005e80 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	212c      	movs	r1, #44	; 0x2c
 8005d50:	fb01 f303 	mul.w	r3, r1, r3
 8005d54:	4413      	add	r3, r2
 8005d56:	3350      	adds	r3, #80	; 0x50
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	441a      	add	r2, r3
 8005d5e:	6879      	ldr	r1, [r7, #4]
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	202c      	movs	r0, #44	; 0x2c
 8005d64:	fb00 f303 	mul.w	r3, r0, r3
 8005d68:	440b      	add	r3, r1
 8005d6a:	334c      	adds	r3, #76	; 0x4c
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d87a      	bhi.n	8005e68 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	212c      	movs	r1, #44	; 0x2c
 8005d7c:	fb01 f303 	mul.w	r3, r1, r3
 8005d80:	4413      	add	r3, r2
 8005d82:	3344      	adds	r3, #68	; 0x44
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	b292      	uxth	r2, r2
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	f003 fc14 	bl	80095b8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	212c      	movs	r1, #44	; 0x2c
 8005d96:	fb01 f303 	mul.w	r3, r1, r3
 8005d9a:	4413      	add	r3, r2
 8005d9c:	3344      	adds	r3, #68	; 0x44
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	441a      	add	r2, r3
 8005da4:	6879      	ldr	r1, [r7, #4]
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	202c      	movs	r0, #44	; 0x2c
 8005daa:	fb00 f303 	mul.w	r3, r0, r3
 8005dae:	440b      	add	r3, r1
 8005db0:	3344      	adds	r3, #68	; 0x44
 8005db2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	212c      	movs	r1, #44	; 0x2c
 8005dba:	fb01 f303 	mul.w	r3, r1, r3
 8005dbe:	4413      	add	r3, r2
 8005dc0:	3350      	adds	r3, #80	; 0x50
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	441a      	add	r2, r3
 8005dc8:	6879      	ldr	r1, [r7, #4]
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	202c      	movs	r0, #44	; 0x2c
 8005dce:	fb00 f303 	mul.w	r3, r0, r3
 8005dd2:	440b      	add	r3, r1
 8005dd4:	3350      	adds	r3, #80	; 0x50
 8005dd6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	0cdb      	lsrs	r3, r3, #19
 8005de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dec:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	212c      	movs	r1, #44	; 0x2c
 8005df4:	fb01 f303 	mul.w	r3, r1, r3
 8005df8:	4413      	add	r3, r2
 8005dfa:	3340      	adds	r3, #64	; 0x40
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d13c      	bne.n	8005e80 <HCD_RXQLVL_IRQHandler+0x19a>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d039      	beq.n	8005e80 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e22:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e2a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e38:	461a      	mov	r2, r3
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	212c      	movs	r1, #44	; 0x2c
 8005e44:	fb01 f303 	mul.w	r3, r1, r3
 8005e48:	4413      	add	r3, r2
 8005e4a:	3354      	adds	r3, #84	; 0x54
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	f083 0301 	eor.w	r3, r3, #1
 8005e52:	b2d8      	uxtb	r0, r3
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	212c      	movs	r1, #44	; 0x2c
 8005e5a:	fb01 f303 	mul.w	r3, r1, r3
 8005e5e:	4413      	add	r3, r2
 8005e60:	3354      	adds	r3, #84	; 0x54
 8005e62:	4602      	mov	r2, r0
 8005e64:	701a      	strb	r2, [r3, #0]
      break;
 8005e66:	e00b      	b.n	8005e80 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	212c      	movs	r1, #44	; 0x2c
 8005e6e:	fb01 f303 	mul.w	r3, r1, r3
 8005e72:	4413      	add	r3, r2
 8005e74:	3360      	adds	r3, #96	; 0x60
 8005e76:	2204      	movs	r2, #4
 8005e78:	701a      	strb	r2, [r3, #0]
      break;
 8005e7a:	e001      	b.n	8005e80 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005e7c:	bf00      	nop
 8005e7e:	e000      	b.n	8005e82 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005e80:	bf00      	nop
  }
}
 8005e82:	bf00      	nop
 8005e84:	3728      	adds	r7, #40	; 0x28
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b086      	sub	sp, #24
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005eb6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d10b      	bne.n	8005eda <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d102      	bne.n	8005ed2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f00e fab5 	bl	801443c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	f043 0302 	orr.w	r3, r3, #2
 8005ed8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f003 0308 	and.w	r3, r3, #8
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d132      	bne.n	8005f4a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f043 0308 	orr.w	r3, r3, #8
 8005eea:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f003 0304 	and.w	r3, r3, #4
 8005ef2:	2b04      	cmp	r3, #4
 8005ef4:	d126      	bne.n	8005f44 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d113      	bne.n	8005f26 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005f04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f08:	d106      	bne.n	8005f18 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2102      	movs	r1, #2
 8005f10:	4618      	mov	r0, r3
 8005f12:	f003 fcbf 	bl	8009894 <USB_InitFSLSPClkSel>
 8005f16:	e011      	b.n	8005f3c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f003 fcb8 	bl	8009894 <USB_InitFSLSPClkSel>
 8005f24:	e00a      	b.n	8005f3c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d106      	bne.n	8005f3c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f34:	461a      	mov	r2, r3
 8005f36:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005f3a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f00e faab 	bl	8014498 <HAL_HCD_PortEnabled_Callback>
 8005f42:	e002      	b.n	8005f4a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f00e fab5 	bl	80144b4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f003 0320 	and.w	r3, r3, #32
 8005f50:	2b20      	cmp	r3, #32
 8005f52:	d103      	bne.n	8005f5c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f043 0320 	orr.w	r3, r3, #32
 8005f5a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f62:	461a      	mov	r2, r3
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	6013      	str	r3, [r2, #0]
}
 8005f68:	bf00      	nop
 8005f6a:	3718      	adds	r7, #24
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e267      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d075      	beq.n	800607a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f8e:	4b88      	ldr	r3, [pc, #544]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 030c 	and.w	r3, r3, #12
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d00c      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f9a:	4b85      	ldr	r3, [pc, #532]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fa2:	2b08      	cmp	r3, #8
 8005fa4:	d112      	bne.n	8005fcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fa6:	4b82      	ldr	r3, [pc, #520]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fb2:	d10b      	bne.n	8005fcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fb4:	4b7e      	ldr	r3, [pc, #504]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d05b      	beq.n	8006078 <HAL_RCC_OscConfig+0x108>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d157      	bne.n	8006078 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e242      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fd4:	d106      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x74>
 8005fd6:	4b76      	ldr	r3, [pc, #472]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a75      	ldr	r2, [pc, #468]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	e01d      	b.n	8006020 <HAL_RCC_OscConfig+0xb0>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fec:	d10c      	bne.n	8006008 <HAL_RCC_OscConfig+0x98>
 8005fee:	4b70      	ldr	r3, [pc, #448]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a6f      	ldr	r2, [pc, #444]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	4b6d      	ldr	r3, [pc, #436]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a6c      	ldr	r2, [pc, #432]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006004:	6013      	str	r3, [r2, #0]
 8006006:	e00b      	b.n	8006020 <HAL_RCC_OscConfig+0xb0>
 8006008:	4b69      	ldr	r3, [pc, #420]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a68      	ldr	r2, [pc, #416]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800600e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006012:	6013      	str	r3, [r2, #0]
 8006014:	4b66      	ldr	r3, [pc, #408]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a65      	ldr	r2, [pc, #404]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800601a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800601e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d013      	beq.n	8006050 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006028:	f7fd fa7c 	bl	8003524 <HAL_GetTick>
 800602c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800602e:	e008      	b.n	8006042 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006030:	f7fd fa78 	bl	8003524 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b64      	cmp	r3, #100	; 0x64
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e207      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006042:	4b5b      	ldr	r3, [pc, #364]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0f0      	beq.n	8006030 <HAL_RCC_OscConfig+0xc0>
 800604e:	e014      	b.n	800607a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006050:	f7fd fa68 	bl	8003524 <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006058:	f7fd fa64 	bl	8003524 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b64      	cmp	r3, #100	; 0x64
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e1f3      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800606a:	4b51      	ldr	r3, [pc, #324]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1f0      	bne.n	8006058 <HAL_RCC_OscConfig+0xe8>
 8006076:	e000      	b.n	800607a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d063      	beq.n	800614e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006086:	4b4a      	ldr	r3, [pc, #296]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f003 030c 	and.w	r3, r3, #12
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00b      	beq.n	80060aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006092:	4b47      	ldr	r3, [pc, #284]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800609a:	2b08      	cmp	r3, #8
 800609c:	d11c      	bne.n	80060d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800609e:	4b44      	ldr	r3, [pc, #272]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d116      	bne.n	80060d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060aa:	4b41      	ldr	r3, [pc, #260]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d005      	beq.n	80060c2 <HAL_RCC_OscConfig+0x152>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d001      	beq.n	80060c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e1c7      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c2:	4b3b      	ldr	r3, [pc, #236]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	4937      	ldr	r1, [pc, #220]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060d6:	e03a      	b.n	800614e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d020      	beq.n	8006122 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060e0:	4b34      	ldr	r3, [pc, #208]	; (80061b4 <HAL_RCC_OscConfig+0x244>)
 80060e2:	2201      	movs	r2, #1
 80060e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e6:	f7fd fa1d 	bl	8003524 <HAL_GetTick>
 80060ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ec:	e008      	b.n	8006100 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060ee:	f7fd fa19 	bl	8003524 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d901      	bls.n	8006100 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e1a8      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006100:	4b2b      	ldr	r3, [pc, #172]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d0f0      	beq.n	80060ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800610c:	4b28      	ldr	r3, [pc, #160]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	4925      	ldr	r1, [pc, #148]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800611c:	4313      	orrs	r3, r2
 800611e:	600b      	str	r3, [r1, #0]
 8006120:	e015      	b.n	800614e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006122:	4b24      	ldr	r3, [pc, #144]	; (80061b4 <HAL_RCC_OscConfig+0x244>)
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006128:	f7fd f9fc 	bl	8003524 <HAL_GetTick>
 800612c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800612e:	e008      	b.n	8006142 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006130:	f7fd f9f8 	bl	8003524 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e187      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006142:	4b1b      	ldr	r3, [pc, #108]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1f0      	bne.n	8006130 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	2b00      	cmp	r3, #0
 8006158:	d036      	beq.n	80061c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d016      	beq.n	8006190 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006162:	4b15      	ldr	r3, [pc, #84]	; (80061b8 <HAL_RCC_OscConfig+0x248>)
 8006164:	2201      	movs	r2, #1
 8006166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006168:	f7fd f9dc 	bl	8003524 <HAL_GetTick>
 800616c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800616e:	e008      	b.n	8006182 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006170:	f7fd f9d8 	bl	8003524 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d901      	bls.n	8006182 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e167      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006182:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0f0      	beq.n	8006170 <HAL_RCC_OscConfig+0x200>
 800618e:	e01b      	b.n	80061c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006190:	4b09      	ldr	r3, [pc, #36]	; (80061b8 <HAL_RCC_OscConfig+0x248>)
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006196:	f7fd f9c5 	bl	8003524 <HAL_GetTick>
 800619a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800619c:	e00e      	b.n	80061bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800619e:	f7fd f9c1 	bl	8003524 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d907      	bls.n	80061bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e150      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
 80061b0:	40023800 	.word	0x40023800
 80061b4:	42470000 	.word	0x42470000
 80061b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061bc:	4b88      	ldr	r3, [pc, #544]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80061be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1ea      	bne.n	800619e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 8097 	beq.w	8006304 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061d6:	2300      	movs	r3, #0
 80061d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061da:	4b81      	ldr	r3, [pc, #516]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10f      	bne.n	8006206 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061e6:	2300      	movs	r3, #0
 80061e8:	60bb      	str	r3, [r7, #8]
 80061ea:	4b7d      	ldr	r3, [pc, #500]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	4a7c      	ldr	r2, [pc, #496]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80061f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f4:	6413      	str	r3, [r2, #64]	; 0x40
 80061f6:	4b7a      	ldr	r3, [pc, #488]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061fe:	60bb      	str	r3, [r7, #8]
 8006200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006202:	2301      	movs	r3, #1
 8006204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006206:	4b77      	ldr	r3, [pc, #476]	; (80063e4 <HAL_RCC_OscConfig+0x474>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620e:	2b00      	cmp	r3, #0
 8006210:	d118      	bne.n	8006244 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006212:	4b74      	ldr	r3, [pc, #464]	; (80063e4 <HAL_RCC_OscConfig+0x474>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a73      	ldr	r2, [pc, #460]	; (80063e4 <HAL_RCC_OscConfig+0x474>)
 8006218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800621c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800621e:	f7fd f981 	bl	8003524 <HAL_GetTick>
 8006222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006224:	e008      	b.n	8006238 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006226:	f7fd f97d 	bl	8003524 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d901      	bls.n	8006238 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e10c      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006238:	4b6a      	ldr	r3, [pc, #424]	; (80063e4 <HAL_RCC_OscConfig+0x474>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006240:	2b00      	cmp	r3, #0
 8006242:	d0f0      	beq.n	8006226 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d106      	bne.n	800625a <HAL_RCC_OscConfig+0x2ea>
 800624c:	4b64      	ldr	r3, [pc, #400]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 800624e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006250:	4a63      	ldr	r2, [pc, #396]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006252:	f043 0301 	orr.w	r3, r3, #1
 8006256:	6713      	str	r3, [r2, #112]	; 0x70
 8006258:	e01c      	b.n	8006294 <HAL_RCC_OscConfig+0x324>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	2b05      	cmp	r3, #5
 8006260:	d10c      	bne.n	800627c <HAL_RCC_OscConfig+0x30c>
 8006262:	4b5f      	ldr	r3, [pc, #380]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006266:	4a5e      	ldr	r2, [pc, #376]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006268:	f043 0304 	orr.w	r3, r3, #4
 800626c:	6713      	str	r3, [r2, #112]	; 0x70
 800626e:	4b5c      	ldr	r3, [pc, #368]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006272:	4a5b      	ldr	r2, [pc, #364]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006274:	f043 0301 	orr.w	r3, r3, #1
 8006278:	6713      	str	r3, [r2, #112]	; 0x70
 800627a:	e00b      	b.n	8006294 <HAL_RCC_OscConfig+0x324>
 800627c:	4b58      	ldr	r3, [pc, #352]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 800627e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006280:	4a57      	ldr	r2, [pc, #348]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006282:	f023 0301 	bic.w	r3, r3, #1
 8006286:	6713      	str	r3, [r2, #112]	; 0x70
 8006288:	4b55      	ldr	r3, [pc, #340]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 800628a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628c:	4a54      	ldr	r2, [pc, #336]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 800628e:	f023 0304 	bic.w	r3, r3, #4
 8006292:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d015      	beq.n	80062c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800629c:	f7fd f942 	bl	8003524 <HAL_GetTick>
 80062a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062a2:	e00a      	b.n	80062ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062a4:	f7fd f93e 	bl	8003524 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e0cb      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ba:	4b49      	ldr	r3, [pc, #292]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80062bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0ee      	beq.n	80062a4 <HAL_RCC_OscConfig+0x334>
 80062c6:	e014      	b.n	80062f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062c8:	f7fd f92c 	bl	8003524 <HAL_GetTick>
 80062cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ce:	e00a      	b.n	80062e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062d0:	f7fd f928 	bl	8003524 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	f241 3288 	movw	r2, #5000	; 0x1388
 80062de:	4293      	cmp	r3, r2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e0b5      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062e6:	4b3e      	ldr	r3, [pc, #248]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80062e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1ee      	bne.n	80062d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062f2:	7dfb      	ldrb	r3, [r7, #23]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d105      	bne.n	8006304 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062f8:	4b39      	ldr	r3, [pc, #228]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	4a38      	ldr	r2, [pc, #224]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80062fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006302:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 80a1 	beq.w	8006450 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800630e:	4b34      	ldr	r3, [pc, #208]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f003 030c 	and.w	r3, r3, #12
 8006316:	2b08      	cmp	r3, #8
 8006318:	d05c      	beq.n	80063d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	2b02      	cmp	r3, #2
 8006320:	d141      	bne.n	80063a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006322:	4b31      	ldr	r3, [pc, #196]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006328:	f7fd f8fc 	bl	8003524 <HAL_GetTick>
 800632c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800632e:	e008      	b.n	8006342 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006330:	f7fd f8f8 	bl	8003524 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b02      	cmp	r3, #2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e087      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006342:	4b27      	ldr	r3, [pc, #156]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1f0      	bne.n	8006330 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	69da      	ldr	r2, [r3, #28]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	431a      	orrs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	019b      	lsls	r3, r3, #6
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006364:	085b      	lsrs	r3, r3, #1
 8006366:	3b01      	subs	r3, #1
 8006368:	041b      	lsls	r3, r3, #16
 800636a:	431a      	orrs	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	061b      	lsls	r3, r3, #24
 8006372:	491b      	ldr	r1, [pc, #108]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006374:	4313      	orrs	r3, r2
 8006376:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006378:	4b1b      	ldr	r3, [pc, #108]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 800637a:	2201      	movs	r2, #1
 800637c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800637e:	f7fd f8d1 	bl	8003524 <HAL_GetTick>
 8006382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006386:	f7fd f8cd 	bl	8003524 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e05c      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006398:	4b11      	ldr	r3, [pc, #68]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0f0      	beq.n	8006386 <HAL_RCC_OscConfig+0x416>
 80063a4:	e054      	b.n	8006450 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063a6:	4b10      	ldr	r3, [pc, #64]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ac:	f7fd f8ba 	bl	8003524 <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063b4:	f7fd f8b6 	bl	8003524 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e045      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063c6:	4b06      	ldr	r3, [pc, #24]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1f0      	bne.n	80063b4 <HAL_RCC_OscConfig+0x444>
 80063d2:	e03d      	b.n	8006450 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d107      	bne.n	80063ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e038      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
 80063e0:	40023800 	.word	0x40023800
 80063e4:	40007000 	.word	0x40007000
 80063e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063ec:	4b1b      	ldr	r3, [pc, #108]	; (800645c <HAL_RCC_OscConfig+0x4ec>)
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d028      	beq.n	800644c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006404:	429a      	cmp	r2, r3
 8006406:	d121      	bne.n	800644c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006412:	429a      	cmp	r2, r3
 8006414:	d11a      	bne.n	800644c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800641c:	4013      	ands	r3, r2
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006422:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006424:	4293      	cmp	r3, r2
 8006426:	d111      	bne.n	800644c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006432:	085b      	lsrs	r3, r3, #1
 8006434:	3b01      	subs	r3, #1
 8006436:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006438:	429a      	cmp	r2, r3
 800643a:	d107      	bne.n	800644c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006446:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006448:	429a      	cmp	r2, r3
 800644a:	d001      	beq.n	8006450 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e000      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	40023800 	.word	0x40023800

08006460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e0cc      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006474:	4b68      	ldr	r3, [pc, #416]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0307 	and.w	r3, r3, #7
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	429a      	cmp	r2, r3
 8006480:	d90c      	bls.n	800649c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006482:	4b65      	ldr	r3, [pc, #404]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800648a:	4b63      	ldr	r3, [pc, #396]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	429a      	cmp	r2, r3
 8006496:	d001      	beq.n	800649c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e0b8      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d020      	beq.n	80064ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0304 	and.w	r3, r3, #4
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d005      	beq.n	80064c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064b4:	4b59      	ldr	r3, [pc, #356]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	4a58      	ldr	r2, [pc, #352]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0308 	and.w	r3, r3, #8
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d005      	beq.n	80064d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064cc:	4b53      	ldr	r3, [pc, #332]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	4a52      	ldr	r2, [pc, #328]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064d8:	4b50      	ldr	r3, [pc, #320]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	494d      	ldr	r1, [pc, #308]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d044      	beq.n	8006580 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d107      	bne.n	800650e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064fe:	4b47      	ldr	r3, [pc, #284]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d119      	bne.n	800653e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e07f      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2b02      	cmp	r3, #2
 8006514:	d003      	beq.n	800651e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800651a:	2b03      	cmp	r3, #3
 800651c:	d107      	bne.n	800652e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800651e:	4b3f      	ldr	r3, [pc, #252]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d109      	bne.n	800653e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e06f      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800652e:	4b3b      	ldr	r3, [pc, #236]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e067      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800653e:	4b37      	ldr	r3, [pc, #220]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f023 0203 	bic.w	r2, r3, #3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	4934      	ldr	r1, [pc, #208]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 800654c:	4313      	orrs	r3, r2
 800654e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006550:	f7fc ffe8 	bl	8003524 <HAL_GetTick>
 8006554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006556:	e00a      	b.n	800656e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006558:	f7fc ffe4 	bl	8003524 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	f241 3288 	movw	r2, #5000	; 0x1388
 8006566:	4293      	cmp	r3, r2
 8006568:	d901      	bls.n	800656e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e04f      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800656e:	4b2b      	ldr	r3, [pc, #172]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f003 020c 	and.w	r2, r3, #12
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	429a      	cmp	r2, r3
 800657e:	d1eb      	bne.n	8006558 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006580:	4b25      	ldr	r3, [pc, #148]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0307 	and.w	r3, r3, #7
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	429a      	cmp	r2, r3
 800658c:	d20c      	bcs.n	80065a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800658e:	4b22      	ldr	r3, [pc, #136]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006596:	4b20      	ldr	r3, [pc, #128]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0307 	and.w	r3, r3, #7
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d001      	beq.n	80065a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e032      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d008      	beq.n	80065c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065b4:	4b19      	ldr	r3, [pc, #100]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	4916      	ldr	r1, [pc, #88]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0308 	and.w	r3, r3, #8
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d009      	beq.n	80065e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065d2:	4b12      	ldr	r3, [pc, #72]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	490e      	ldr	r1, [pc, #56]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065e6:	f000 f821 	bl	800662c <HAL_RCC_GetSysClockFreq>
 80065ea:	4602      	mov	r2, r0
 80065ec:	4b0b      	ldr	r3, [pc, #44]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	091b      	lsrs	r3, r3, #4
 80065f2:	f003 030f 	and.w	r3, r3, #15
 80065f6:	490a      	ldr	r1, [pc, #40]	; (8006620 <HAL_RCC_ClockConfig+0x1c0>)
 80065f8:	5ccb      	ldrb	r3, [r1, r3]
 80065fa:	fa22 f303 	lsr.w	r3, r2, r3
 80065fe:	4a09      	ldr	r2, [pc, #36]	; (8006624 <HAL_RCC_ClockConfig+0x1c4>)
 8006600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006602:	4b09      	ldr	r3, [pc, #36]	; (8006628 <HAL_RCC_ClockConfig+0x1c8>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f7fc fcd0 	bl	8002fac <HAL_InitTick>

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	40023c00 	.word	0x40023c00
 800661c:	40023800 	.word	0x40023800
 8006620:	0801770c 	.word	0x0801770c
 8006624:	20000234 	.word	0x20000234
 8006628:	20000238 	.word	0x20000238

0800662c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800662c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006630:	b090      	sub	sp, #64	; 0x40
 8006632:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	637b      	str	r3, [r7, #52]	; 0x34
 8006638:	2300      	movs	r3, #0
 800663a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800663c:	2300      	movs	r3, #0
 800663e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006644:	4b59      	ldr	r3, [pc, #356]	; (80067ac <HAL_RCC_GetSysClockFreq+0x180>)
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f003 030c 	and.w	r3, r3, #12
 800664c:	2b08      	cmp	r3, #8
 800664e:	d00d      	beq.n	800666c <HAL_RCC_GetSysClockFreq+0x40>
 8006650:	2b08      	cmp	r3, #8
 8006652:	f200 80a1 	bhi.w	8006798 <HAL_RCC_GetSysClockFreq+0x16c>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <HAL_RCC_GetSysClockFreq+0x34>
 800665a:	2b04      	cmp	r3, #4
 800665c:	d003      	beq.n	8006666 <HAL_RCC_GetSysClockFreq+0x3a>
 800665e:	e09b      	b.n	8006798 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006660:	4b53      	ldr	r3, [pc, #332]	; (80067b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006662:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006664:	e09b      	b.n	800679e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006666:	4b53      	ldr	r3, [pc, #332]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006668:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800666a:	e098      	b.n	800679e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800666c:	4b4f      	ldr	r3, [pc, #316]	; (80067ac <HAL_RCC_GetSysClockFreq+0x180>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006674:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006676:	4b4d      	ldr	r3, [pc, #308]	; (80067ac <HAL_RCC_GetSysClockFreq+0x180>)
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d028      	beq.n	80066d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006682:	4b4a      	ldr	r3, [pc, #296]	; (80067ac <HAL_RCC_GetSysClockFreq+0x180>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	099b      	lsrs	r3, r3, #6
 8006688:	2200      	movs	r2, #0
 800668a:	623b      	str	r3, [r7, #32]
 800668c:	627a      	str	r2, [r7, #36]	; 0x24
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006694:	2100      	movs	r1, #0
 8006696:	4b47      	ldr	r3, [pc, #284]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006698:	fb03 f201 	mul.w	r2, r3, r1
 800669c:	2300      	movs	r3, #0
 800669e:	fb00 f303 	mul.w	r3, r0, r3
 80066a2:	4413      	add	r3, r2
 80066a4:	4a43      	ldr	r2, [pc, #268]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80066a6:	fba0 1202 	umull	r1, r2, r0, r2
 80066aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066ac:	460a      	mov	r2, r1
 80066ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80066b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066b2:	4413      	add	r3, r2
 80066b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b8:	2200      	movs	r2, #0
 80066ba:	61bb      	str	r3, [r7, #24]
 80066bc:	61fa      	str	r2, [r7, #28]
 80066be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80066c6:	f7f9 fdeb 	bl	80002a0 <__aeabi_uldivmod>
 80066ca:	4602      	mov	r2, r0
 80066cc:	460b      	mov	r3, r1
 80066ce:	4613      	mov	r3, r2
 80066d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066d2:	e053      	b.n	800677c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066d4:	4b35      	ldr	r3, [pc, #212]	; (80067ac <HAL_RCC_GetSysClockFreq+0x180>)
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	099b      	lsrs	r3, r3, #6
 80066da:	2200      	movs	r2, #0
 80066dc:	613b      	str	r3, [r7, #16]
 80066de:	617a      	str	r2, [r7, #20]
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80066e6:	f04f 0b00 	mov.w	fp, #0
 80066ea:	4652      	mov	r2, sl
 80066ec:	465b      	mov	r3, fp
 80066ee:	f04f 0000 	mov.w	r0, #0
 80066f2:	f04f 0100 	mov.w	r1, #0
 80066f6:	0159      	lsls	r1, r3, #5
 80066f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066fc:	0150      	lsls	r0, r2, #5
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	ebb2 080a 	subs.w	r8, r2, sl
 8006706:	eb63 090b 	sbc.w	r9, r3, fp
 800670a:	f04f 0200 	mov.w	r2, #0
 800670e:	f04f 0300 	mov.w	r3, #0
 8006712:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006716:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800671a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800671e:	ebb2 0408 	subs.w	r4, r2, r8
 8006722:	eb63 0509 	sbc.w	r5, r3, r9
 8006726:	f04f 0200 	mov.w	r2, #0
 800672a:	f04f 0300 	mov.w	r3, #0
 800672e:	00eb      	lsls	r3, r5, #3
 8006730:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006734:	00e2      	lsls	r2, r4, #3
 8006736:	4614      	mov	r4, r2
 8006738:	461d      	mov	r5, r3
 800673a:	eb14 030a 	adds.w	r3, r4, sl
 800673e:	603b      	str	r3, [r7, #0]
 8006740:	eb45 030b 	adc.w	r3, r5, fp
 8006744:	607b      	str	r3, [r7, #4]
 8006746:	f04f 0200 	mov.w	r2, #0
 800674a:	f04f 0300 	mov.w	r3, #0
 800674e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006752:	4629      	mov	r1, r5
 8006754:	028b      	lsls	r3, r1, #10
 8006756:	4621      	mov	r1, r4
 8006758:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800675c:	4621      	mov	r1, r4
 800675e:	028a      	lsls	r2, r1, #10
 8006760:	4610      	mov	r0, r2
 8006762:	4619      	mov	r1, r3
 8006764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006766:	2200      	movs	r2, #0
 8006768:	60bb      	str	r3, [r7, #8]
 800676a:	60fa      	str	r2, [r7, #12]
 800676c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006770:	f7f9 fd96 	bl	80002a0 <__aeabi_uldivmod>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	4613      	mov	r3, r2
 800677a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800677c:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <HAL_RCC_GetSysClockFreq+0x180>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	0c1b      	lsrs	r3, r3, #16
 8006782:	f003 0303 	and.w	r3, r3, #3
 8006786:	3301      	adds	r3, #1
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800678c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	fbb2 f3f3 	udiv	r3, r2, r3
 8006794:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006796:	e002      	b.n	800679e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006798:	4b05      	ldr	r3, [pc, #20]	; (80067b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800679a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800679c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800679e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3740      	adds	r7, #64	; 0x40
 80067a4:	46bd      	mov	sp, r7
 80067a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067aa:	bf00      	nop
 80067ac:	40023800 	.word	0x40023800
 80067b0:	00f42400 	.word	0x00f42400
 80067b4:	017d7840 	.word	0x017d7840

080067b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067b8:	b480      	push	{r7}
 80067ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067bc:	4b03      	ldr	r3, [pc, #12]	; (80067cc <HAL_RCC_GetHCLKFreq+0x14>)
 80067be:	681b      	ldr	r3, [r3, #0]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	20000234 	.word	0x20000234

080067d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80067d4:	f7ff fff0 	bl	80067b8 <HAL_RCC_GetHCLKFreq>
 80067d8:	4602      	mov	r2, r0
 80067da:	4b05      	ldr	r3, [pc, #20]	; (80067f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	0a9b      	lsrs	r3, r3, #10
 80067e0:	f003 0307 	and.w	r3, r3, #7
 80067e4:	4903      	ldr	r1, [pc, #12]	; (80067f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067e6:	5ccb      	ldrb	r3, [r1, r3]
 80067e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	40023800 	.word	0x40023800
 80067f4:	0801771c 	.word	0x0801771c

080067f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80067fc:	f7ff ffdc 	bl	80067b8 <HAL_RCC_GetHCLKFreq>
 8006800:	4602      	mov	r2, r0
 8006802:	4b05      	ldr	r3, [pc, #20]	; (8006818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	0b5b      	lsrs	r3, r3, #13
 8006808:	f003 0307 	and.w	r3, r3, #7
 800680c:	4903      	ldr	r1, [pc, #12]	; (800681c <HAL_RCC_GetPCLK2Freq+0x24>)
 800680e:	5ccb      	ldrb	r3, [r1, r3]
 8006810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006814:	4618      	mov	r0, r3
 8006816:	bd80      	pop	{r7, pc}
 8006818:	40023800 	.word	0x40023800
 800681c:	0801771c 	.word	0x0801771c

08006820 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	220f      	movs	r2, #15
 800682e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006830:	4b12      	ldr	r3, [pc, #72]	; (800687c <HAL_RCC_GetClockConfig+0x5c>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f003 0203 	and.w	r2, r3, #3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800683c:	4b0f      	ldr	r3, [pc, #60]	; (800687c <HAL_RCC_GetClockConfig+0x5c>)
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006848:	4b0c      	ldr	r3, [pc, #48]	; (800687c <HAL_RCC_GetClockConfig+0x5c>)
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006854:	4b09      	ldr	r3, [pc, #36]	; (800687c <HAL_RCC_GetClockConfig+0x5c>)
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	08db      	lsrs	r3, r3, #3
 800685a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006862:	4b07      	ldr	r3, [pc, #28]	; (8006880 <HAL_RCC_GetClockConfig+0x60>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0207 	and.w	r2, r3, #7
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	601a      	str	r2, [r3, #0]
}
 800686e:	bf00      	nop
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	40023800 	.word	0x40023800
 8006880:	40023c00 	.word	0x40023c00

08006884 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d105      	bne.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d035      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80068ac:	4b62      	ldr	r3, [pc, #392]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068b2:	f7fc fe37 	bl	8003524 <HAL_GetTick>
 80068b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068b8:	e008      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80068ba:	f7fc fe33 	bl	8003524 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d901      	bls.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e0b0      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068cc:	4b5b      	ldr	r3, [pc, #364]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1f0      	bne.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	019a      	lsls	r2, r3, #6
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	071b      	lsls	r3, r3, #28
 80068e4:	4955      	ldr	r1, [pc, #340]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80068ec:	4b52      	ldr	r3, [pc, #328]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80068ee:	2201      	movs	r2, #1
 80068f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068f2:	f7fc fe17 	bl	8003524 <HAL_GetTick>
 80068f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068f8:	e008      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80068fa:	f7fc fe13 	bl	8003524 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d901      	bls.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e090      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800690c:	4b4b      	ldr	r3, [pc, #300]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0f0      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0302 	and.w	r3, r3, #2
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 8083 	beq.w	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006926:	2300      	movs	r3, #0
 8006928:	60fb      	str	r3, [r7, #12]
 800692a:	4b44      	ldr	r3, [pc, #272]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800692c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692e:	4a43      	ldr	r2, [pc, #268]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006934:	6413      	str	r3, [r2, #64]	; 0x40
 8006936:	4b41      	ldr	r3, [pc, #260]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006942:	4b3f      	ldr	r3, [pc, #252]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a3e      	ldr	r2, [pc, #248]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800694c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800694e:	f7fc fde9 	bl	8003524 <HAL_GetTick>
 8006952:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006954:	e008      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006956:	f7fc fde5 	bl	8003524 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d901      	bls.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e062      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006968:	4b35      	ldr	r3, [pc, #212]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0f0      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006974:	4b31      	ldr	r3, [pc, #196]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006978:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800697c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d02f      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	429a      	cmp	r2, r3
 8006990:	d028      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006992:	4b2a      	ldr	r3, [pc, #168]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800699a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800699c:	4b29      	ldr	r3, [pc, #164]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800699e:	2201      	movs	r2, #1
 80069a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069a2:	4b28      	ldr	r3, [pc, #160]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80069a8:	4a24      	ldr	r2, [pc, #144]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80069ae:	4b23      	ldr	r3, [pc, #140]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d114      	bne.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80069ba:	f7fc fdb3 	bl	8003524 <HAL_GetTick>
 80069be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069c0:	e00a      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069c2:	f7fc fdaf 	bl	8003524 <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d901      	bls.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e02a      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069d8:	4b18      	ldr	r3, [pc, #96]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0ee      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069f0:	d10d      	bne.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80069f2:	4b12      	ldr	r3, [pc, #72]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a06:	490d      	ldr	r1, [pc, #52]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	608b      	str	r3, [r1, #8]
 8006a0c:	e005      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006a0e:	4b0b      	ldr	r3, [pc, #44]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	4a0a      	ldr	r2, [pc, #40]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a14:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006a18:	6093      	str	r3, [r2, #8]
 8006a1a:	4b08      	ldr	r3, [pc, #32]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a26:	4905      	ldr	r1, [pc, #20]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	42470068 	.word	0x42470068
 8006a3c:	40023800 	.word	0x40023800
 8006a40:	40007000 	.word	0x40007000
 8006a44:	42470e40 	.word	0x42470e40

08006a48 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e066      	b.n	8006b2c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	7f5b      	ldrb	r3, [r3, #29]
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d105      	bne.n	8006a74 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7fc f97a 	bl	8002d68 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	22ca      	movs	r2, #202	; 0xca
 8006a80:	625a      	str	r2, [r3, #36]	; 0x24
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2253      	movs	r2, #83	; 0x53
 8006a88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fa45 	bl	8006f1a <RTC_EnterInitMode>
 8006a90:	4603      	mov	r3, r0
 8006a92:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d12c      	bne.n	8006af4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	6812      	ldr	r2, [r2, #0]
 8006aa4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aac:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6899      	ldr	r1, [r3, #8]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	68d2      	ldr	r2, [r2, #12]
 8006ad4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6919      	ldr	r1, [r3, #16]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	041a      	lsls	r2, r3, #16
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fa4c 	bl	8006f88 <RTC_ExitInitMode>
 8006af0:	4603      	mov	r3, r0
 8006af2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d113      	bne.n	8006b22 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b08:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	699a      	ldr	r2, [r3, #24]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	22ff      	movs	r2, #255	; 0xff
 8006b28:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006b34:	b590      	push	{r4, r7, lr}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	7f1b      	ldrb	r3, [r3, #28]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d101      	bne.n	8006b50 <HAL_RTC_SetTime+0x1c>
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	e087      	b.n	8006c60 <HAL_RTC_SetTime+0x12c>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2201      	movs	r2, #1
 8006b54:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2202      	movs	r2, #2
 8006b5a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d126      	bne.n	8006bb0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d102      	bne.n	8006b76 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2200      	movs	r2, #0
 8006b74:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 fa29 	bl	8006fd2 <RTC_ByteToBcd2>
 8006b80:	4603      	mov	r3, r0
 8006b82:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	785b      	ldrb	r3, [r3, #1]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 fa22 	bl	8006fd2 <RTC_ByteToBcd2>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006b92:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	789b      	ldrb	r3, [r3, #2]
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f000 fa1a 	bl	8006fd2 <RTC_ByteToBcd2>
 8006b9e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006ba0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	78db      	ldrb	r3, [r3, #3]
 8006ba8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006baa:	4313      	orrs	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]
 8006bae:	e018      	b.n	8006be2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d102      	bne.n	8006bc4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	785b      	ldrb	r3, [r3, #1]
 8006bce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006bd0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006bd6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	78db      	ldrb	r3, [r3, #3]
 8006bdc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006bde:	4313      	orrs	r3, r2
 8006be0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	22ca      	movs	r2, #202	; 0xca
 8006be8:	625a      	str	r2, [r3, #36]	; 0x24
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2253      	movs	r2, #83	; 0x53
 8006bf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 f991 	bl	8006f1a <RTC_EnterInitMode>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006bfc:	7cfb      	ldrb	r3, [r7, #19]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d120      	bne.n	8006c44 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006c0c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006c10:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c20:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6899      	ldr	r1, [r3, #8]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	68da      	ldr	r2, [r3, #12]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	431a      	orrs	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f000 f9a4 	bl	8006f88 <RTC_ExitInitMode>
 8006c40:	4603      	mov	r3, r0
 8006c42:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006c44:	7cfb      	ldrb	r3, [r7, #19]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d102      	bne.n	8006c50 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	22ff      	movs	r2, #255	; 0xff
 8006c56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	771a      	strb	r2, [r3, #28]

  return status;
 8006c5e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	371c      	adds	r7, #28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd90      	pop	{r4, r7, pc}

08006c68 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006c9a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006c9e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	0c1b      	lsrs	r3, r3, #16
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	0a1b      	lsrs	r3, r3, #8
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	0d9b      	lsrs	r3, r3, #22
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d11a      	bne.n	8006d1a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 f98f 	bl	800700c <RTC_Bcd2ToByte>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	785b      	ldrb	r3, [r3, #1]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 f986 	bl	800700c <RTC_Bcd2ToByte>
 8006d00:	4603      	mov	r3, r0
 8006d02:	461a      	mov	r2, r3
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	789b      	ldrb	r3, [r3, #2]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 f97d 	bl	800700c <RTC_Bcd2ToByte>
 8006d12:	4603      	mov	r3, r0
 8006d14:	461a      	mov	r2, r3
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3718      	adds	r7, #24
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d24:	b590      	push	{r4, r7, lr}
 8006d26:	b087      	sub	sp, #28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	7f1b      	ldrb	r3, [r3, #28]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d101      	bne.n	8006d40 <HAL_RTC_SetDate+0x1c>
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	e071      	b.n	8006e24 <HAL_RTC_SetDate+0x100>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2201      	movs	r2, #1
 8006d44:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2202      	movs	r2, #2
 8006d4a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10e      	bne.n	8006d70 <HAL_RTC_SetDate+0x4c>
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	785b      	ldrb	r3, [r3, #1]
 8006d56:	f003 0310 	and.w	r3, r3, #16
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d008      	beq.n	8006d70 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	785b      	ldrb	r3, [r3, #1]
 8006d62:	f023 0310 	bic.w	r3, r3, #16
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	330a      	adds	r3, #10
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d11c      	bne.n	8006db0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	78db      	ldrb	r3, [r3, #3]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 f929 	bl	8006fd2 <RTC_ByteToBcd2>
 8006d80:	4603      	mov	r3, r0
 8006d82:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	785b      	ldrb	r3, [r3, #1]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f000 f922 	bl	8006fd2 <RTC_ByteToBcd2>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d92:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	789b      	ldrb	r3, [r3, #2]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 f91a 	bl	8006fd2 <RTC_ByteToBcd2>
 8006d9e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006da0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006daa:	4313      	orrs	r3, r2
 8006dac:	617b      	str	r3, [r7, #20]
 8006dae:	e00e      	b.n	8006dce <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	78db      	ldrb	r3, [r3, #3]
 8006db4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	785b      	ldrb	r3, [r3, #1]
 8006dba:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006dbc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006dc2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	22ca      	movs	r2, #202	; 0xca
 8006dd4:	625a      	str	r2, [r3, #36]	; 0x24
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2253      	movs	r2, #83	; 0x53
 8006ddc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f000 f89b 	bl	8006f1a <RTC_EnterInitMode>
 8006de4:	4603      	mov	r3, r0
 8006de6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006de8:	7cfb      	ldrb	r3, [r7, #19]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10c      	bne.n	8006e08 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006df8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006dfc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f000 f8c2 	bl	8006f88 <RTC_ExitInitMode>
 8006e04:	4603      	mov	r3, r0
 8006e06:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006e08:	7cfb      	ldrb	r3, [r7, #19]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d102      	bne.n	8006e14 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2201      	movs	r2, #1
 8006e12:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	22ff      	movs	r2, #255	; 0xff
 8006e1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	771a      	strb	r2, [r3, #28]

  return status;
 8006e22:	7cfb      	ldrb	r3, [r7, #19]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	371c      	adds	r7, #28
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd90      	pop	{r4, r7, pc}

08006e2c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e46:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e4a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	0c1b      	lsrs	r3, r3, #16
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	0a1b      	lsrs	r3, r3, #8
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f003 031f 	and.w	r3, r3, #31
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	0b5b      	lsrs	r3, r3, #13
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	f003 0307 	and.w	r3, r3, #7
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d11a      	bne.n	8006ec0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	78db      	ldrb	r3, [r3, #3]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 f8bc 	bl	800700c <RTC_Bcd2ToByte>
 8006e94:	4603      	mov	r3, r0
 8006e96:	461a      	mov	r2, r3
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	785b      	ldrb	r3, [r3, #1]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 f8b3 	bl	800700c <RTC_Bcd2ToByte>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	789b      	ldrb	r3, [r3, #2]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 f8aa 	bl	800700c <RTC_Bcd2ToByte>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	461a      	mov	r2, r3
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b084      	sub	sp, #16
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68da      	ldr	r2, [r3, #12]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ee4:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ee6:	f7fc fb1d 	bl	8003524 <HAL_GetTick>
 8006eea:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006eec:	e009      	b.n	8006f02 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006eee:	f7fc fb19 	bl	8003524 <HAL_GetTick>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006efc:	d901      	bls.n	8006f02 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e007      	b.n	8006f12 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	f003 0320 	and.w	r3, r3, #32
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0ee      	beq.n	8006eee <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b084      	sub	sp, #16
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d122      	bne.n	8006f7e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f46:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006f48:	f7fc faec 	bl	8003524 <HAL_GetTick>
 8006f4c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006f4e:	e00c      	b.n	8006f6a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f50:	f7fc fae8 	bl	8003524 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f5e:	d904      	bls.n	8006f6a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2204      	movs	r2, #4
 8006f64:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d102      	bne.n	8006f7e <RTC_EnterInitMode+0x64>
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d1e8      	bne.n	8006f50 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68da      	ldr	r2, [r3, #12]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fa2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f003 0320 	and.w	r3, r3, #32
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10a      	bne.n	8006fc8 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7ff ff89 	bl	8006eca <HAL_RTC_WaitForSynchro>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d004      	beq.n	8006fc8 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2204      	movs	r2, #4
 8006fc2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b085      	sub	sp, #20
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	4603      	mov	r3, r0
 8006fda:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006fe0:	e005      	b.n	8006fee <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006fe8:	79fb      	ldrb	r3, [r7, #7]
 8006fea:	3b0a      	subs	r3, #10
 8006fec:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006fee:	79fb      	ldrb	r3, [r7, #7]
 8006ff0:	2b09      	cmp	r3, #9
 8006ff2:	d8f6      	bhi.n	8006fe2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
 8006ff6:	011b      	lsls	r3, r3, #4
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	79fb      	ldrb	r3, [r7, #7]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	b2db      	uxtb	r3, r3
}
 8007000:	4618      	mov	r0, r3
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	4603      	mov	r3, r0
 8007014:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8007016:	2300      	movs	r3, #0
 8007018:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800701a:	79fb      	ldrb	r3, [r7, #7]
 800701c:	091b      	lsrs	r3, r3, #4
 800701e:	b2db      	uxtb	r3, r3
 8007020:	461a      	mov	r2, r3
 8007022:	0092      	lsls	r2, r2, #2
 8007024:	4413      	add	r3, r2
 8007026:	005b      	lsls	r3, r3, #1
 8007028:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800702a:	79fb      	ldrb	r3, [r7, #7]
 800702c:	f003 030f 	and.w	r3, r3, #15
 8007030:	b2da      	uxtb	r2, r3
 8007032:	7bfb      	ldrb	r3, [r7, #15]
 8007034:	4413      	add	r3, r2
 8007036:	b2db      	uxtb	r3, r3
}
 8007038:	4618      	mov	r0, r3
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e07b      	b.n	800714e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	2b00      	cmp	r3, #0
 800705c:	d108      	bne.n	8007070 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007066:	d009      	beq.n	800707c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	61da      	str	r2, [r3, #28]
 800706e:	e005      	b.n	800707c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d106      	bne.n	800709c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7fb fe90 	bl	8002dbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2202      	movs	r2, #2
 80070a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80070c4:	431a      	orrs	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070ce:	431a      	orrs	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	f003 0302 	and.w	r3, r3, #2
 80070d8:	431a      	orrs	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	431a      	orrs	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070ec:	431a      	orrs	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070f6:	431a      	orrs	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a1b      	ldr	r3, [r3, #32]
 80070fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007100:	ea42 0103 	orr.w	r1, r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007108:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	430a      	orrs	r2, r1
 8007112:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	0c1b      	lsrs	r3, r3, #16
 800711a:	f003 0104 	and.w	r1, r3, #4
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	f003 0210 	and.w	r2, r3, #16
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	430a      	orrs	r2, r1
 800712c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	69da      	ldr	r2, [r3, #28]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800713c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b08c      	sub	sp, #48	; 0x30
 800715a:	af00      	add	r7, sp, #0
 800715c:	60f8      	str	r0, [r7, #12]
 800715e:	60b9      	str	r1, [r7, #8]
 8007160:	607a      	str	r2, [r7, #4]
 8007162:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007164:	2301      	movs	r3, #1
 8007166:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007168:	2300      	movs	r3, #0
 800716a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007174:	2b01      	cmp	r3, #1
 8007176:	d101      	bne.n	800717c <HAL_SPI_TransmitReceive+0x26>
 8007178:	2302      	movs	r3, #2
 800717a:	e18a      	b.n	8007492 <HAL_SPI_TransmitReceive+0x33c>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007184:	f7fc f9ce 	bl	8003524 <HAL_GetTick>
 8007188:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007190:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800719a:	887b      	ldrh	r3, [r7, #2]
 800719c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800719e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d00f      	beq.n	80071c6 <HAL_SPI_TransmitReceive+0x70>
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071ac:	d107      	bne.n	80071be <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d103      	bne.n	80071be <HAL_SPI_TransmitReceive+0x68>
 80071b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071ba:	2b04      	cmp	r3, #4
 80071bc:	d003      	beq.n	80071c6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80071be:	2302      	movs	r3, #2
 80071c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80071c4:	e15b      	b.n	800747e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d005      	beq.n	80071d8 <HAL_SPI_TransmitReceive+0x82>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d002      	beq.n	80071d8 <HAL_SPI_TransmitReceive+0x82>
 80071d2:	887b      	ldrh	r3, [r7, #2]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d103      	bne.n	80071e0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80071de:	e14e      	b.n	800747e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	2b04      	cmp	r3, #4
 80071ea:	d003      	beq.n	80071f4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2205      	movs	r2, #5
 80071f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	887a      	ldrh	r2, [r7, #2]
 8007204:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	887a      	ldrh	r2, [r7, #2]
 800720a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	887a      	ldrh	r2, [r7, #2]
 8007216:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	887a      	ldrh	r2, [r7, #2]
 800721c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007234:	2b40      	cmp	r3, #64	; 0x40
 8007236:	d007      	beq.n	8007248 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007246:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007250:	d178      	bne.n	8007344 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <HAL_SPI_TransmitReceive+0x10a>
 800725a:	8b7b      	ldrh	r3, [r7, #26]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d166      	bne.n	800732e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007264:	881a      	ldrh	r2, [r3, #0]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007270:	1c9a      	adds	r2, r3, #2
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800727a:	b29b      	uxth	r3, r3
 800727c:	3b01      	subs	r3, #1
 800727e:	b29a      	uxth	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007284:	e053      	b.n	800732e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f003 0302 	and.w	r3, r3, #2
 8007290:	2b02      	cmp	r3, #2
 8007292:	d11b      	bne.n	80072cc <HAL_SPI_TransmitReceive+0x176>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007298:	b29b      	uxth	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d016      	beq.n	80072cc <HAL_SPI_TransmitReceive+0x176>
 800729e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d113      	bne.n	80072cc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a8:	881a      	ldrh	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b4:	1c9a      	adds	r2, r3, #2
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072be:	b29b      	uxth	r3, r3
 80072c0:	3b01      	subs	r3, #1
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072c8:	2300      	movs	r3, #0
 80072ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d119      	bne.n	800730e <HAL_SPI_TransmitReceive+0x1b8>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072de:	b29b      	uxth	r3, r3
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d014      	beq.n	800730e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68da      	ldr	r2, [r3, #12]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ee:	b292      	uxth	r2, r2
 80072f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f6:	1c9a      	adds	r2, r3, #2
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007300:	b29b      	uxth	r3, r3
 8007302:	3b01      	subs	r3, #1
 8007304:	b29a      	uxth	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800730a:	2301      	movs	r3, #1
 800730c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800730e:	f7fc f909 	bl	8003524 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800731a:	429a      	cmp	r2, r3
 800731c:	d807      	bhi.n	800732e <HAL_SPI_TransmitReceive+0x1d8>
 800731e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007324:	d003      	beq.n	800732e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800732c:	e0a7      	b.n	800747e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007332:	b29b      	uxth	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1a6      	bne.n	8007286 <HAL_SPI_TransmitReceive+0x130>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800733c:	b29b      	uxth	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1a1      	bne.n	8007286 <HAL_SPI_TransmitReceive+0x130>
 8007342:	e07c      	b.n	800743e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <HAL_SPI_TransmitReceive+0x1fc>
 800734c:	8b7b      	ldrh	r3, [r7, #26]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d16b      	bne.n	800742a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	330c      	adds	r3, #12
 800735c:	7812      	ldrb	r2, [r2, #0]
 800735e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007364:	1c5a      	adds	r2, r3, #1
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800736e:	b29b      	uxth	r3, r3
 8007370:	3b01      	subs	r3, #1
 8007372:	b29a      	uxth	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007378:	e057      	b.n	800742a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f003 0302 	and.w	r3, r3, #2
 8007384:	2b02      	cmp	r3, #2
 8007386:	d11c      	bne.n	80073c2 <HAL_SPI_TransmitReceive+0x26c>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800738c:	b29b      	uxth	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d017      	beq.n	80073c2 <HAL_SPI_TransmitReceive+0x26c>
 8007392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007394:	2b01      	cmp	r3, #1
 8007396:	d114      	bne.n	80073c2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	330c      	adds	r3, #12
 80073a2:	7812      	ldrb	r2, [r2, #0]
 80073a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073aa:	1c5a      	adds	r2, r3, #1
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	3b01      	subs	r3, #1
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d119      	bne.n	8007404 <HAL_SPI_TransmitReceive+0x2ae>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d014      	beq.n	8007404 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68da      	ldr	r2, [r3, #12]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e4:	b2d2      	uxtb	r2, r2
 80073e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ec:	1c5a      	adds	r2, r3, #1
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	3b01      	subs	r3, #1
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007400:	2301      	movs	r3, #1
 8007402:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007404:	f7fc f88e 	bl	8003524 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007410:	429a      	cmp	r2, r3
 8007412:	d803      	bhi.n	800741c <HAL_SPI_TransmitReceive+0x2c6>
 8007414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741a:	d102      	bne.n	8007422 <HAL_SPI_TransmitReceive+0x2cc>
 800741c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741e:	2b00      	cmp	r3, #0
 8007420:	d103      	bne.n	800742a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007428:	e029      	b.n	800747e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800742e:	b29b      	uxth	r3, r3
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1a2      	bne.n	800737a <HAL_SPI_TransmitReceive+0x224>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007438:	b29b      	uxth	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d19d      	bne.n	800737a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800743e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007440:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f000 f9d0 	bl	80077e8 <SPI_EndRxTxTransaction>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d006      	beq.n	800745c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2220      	movs	r2, #32
 8007458:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800745a:	e010      	b.n	800747e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10b      	bne.n	800747c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007464:	2300      	movs	r3, #0
 8007466:	617b      	str	r3, [r7, #20]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	617b      	str	r3, [r7, #20]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	617b      	str	r3, [r7, #20]
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	e000      	b.n	800747e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800747c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800748e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007492:	4618      	mov	r0, r3
 8007494:	3730      	adds	r7, #48	; 0x30
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
	...

0800749c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b088      	sub	sp, #32
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	099b      	lsrs	r3, r3, #6
 80074b8:	f003 0301 	and.w	r3, r3, #1
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10f      	bne.n	80074e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	099b      	lsrs	r3, r3, #6
 80074ce:	f003 0301 	and.w	r3, r3, #1
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d004      	beq.n	80074e0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	4798      	blx	r3
    return;
 80074de:	e0d7      	b.n	8007690 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	085b      	lsrs	r3, r3, #1
 80074e4:	f003 0301 	and.w	r3, r3, #1
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00a      	beq.n	8007502 <HAL_SPI_IRQHandler+0x66>
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	09db      	lsrs	r3, r3, #7
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d004      	beq.n	8007502 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	4798      	blx	r3
    return;
 8007500:	e0c6      	b.n	8007690 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	095b      	lsrs	r3, r3, #5
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10c      	bne.n	8007528 <HAL_SPI_IRQHandler+0x8c>
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	099b      	lsrs	r3, r3, #6
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d106      	bne.n	8007528 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	0a1b      	lsrs	r3, r3, #8
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 80b4 	beq.w	8007690 <HAL_SPI_IRQHandler+0x1f4>
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	095b      	lsrs	r3, r3, #5
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 80ad 	beq.w	8007690 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	099b      	lsrs	r3, r3, #6
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b00      	cmp	r3, #0
 8007540:	d023      	beq.n	800758a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b03      	cmp	r3, #3
 800754c:	d011      	beq.n	8007572 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007552:	f043 0204 	orr.w	r2, r3, #4
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800755a:	2300      	movs	r3, #0
 800755c:	617b      	str	r3, [r7, #20]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	617b      	str	r3, [r7, #20]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	617b      	str	r3, [r7, #20]
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	e00b      	b.n	800758a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007572:	2300      	movs	r3, #0
 8007574:	613b      	str	r3, [r7, #16]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	613b      	str	r3, [r7, #16]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	613b      	str	r3, [r7, #16]
 8007586:	693b      	ldr	r3, [r7, #16]
        return;
 8007588:	e082      	b.n	8007690 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	095b      	lsrs	r3, r3, #5
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d014      	beq.n	80075c0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759a:	f043 0201 	orr.w	r2, r3, #1
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80075a2:	2300      	movs	r3, #0
 80075a4:	60fb      	str	r3, [r7, #12]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	60fb      	str	r3, [r7, #12]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	0a1b      	lsrs	r3, r3, #8
 80075c4:	f003 0301 	and.w	r3, r3, #1
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00c      	beq.n	80075e6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d0:	f043 0208 	orr.w	r2, r3, #8
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80075d8:	2300      	movs	r3, #0
 80075da:	60bb      	str	r3, [r7, #8]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	60bb      	str	r3, [r7, #8]
 80075e4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d04f      	beq.n	800768e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	685a      	ldr	r2, [r3, #4]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80075fc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	f003 0302 	and.w	r3, r3, #2
 800760c:	2b00      	cmp	r3, #0
 800760e:	d104      	bne.n	800761a <HAL_SPI_IRQHandler+0x17e>
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	d034      	beq.n	8007684 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f022 0203 	bic.w	r2, r2, #3
 8007628:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800762e:	2b00      	cmp	r3, #0
 8007630:	d011      	beq.n	8007656 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007636:	4a18      	ldr	r2, [pc, #96]	; (8007698 <HAL_SPI_IRQHandler+0x1fc>)
 8007638:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800763e:	4618      	mov	r0, r3
 8007640:	f7fc f9a0 	bl	8003984 <HAL_DMA_Abort_IT>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d005      	beq.n	8007656 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800765a:	2b00      	cmp	r3, #0
 800765c:	d016      	beq.n	800768c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007662:	4a0d      	ldr	r2, [pc, #52]	; (8007698 <HAL_SPI_IRQHandler+0x1fc>)
 8007664:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800766a:	4618      	mov	r0, r3
 800766c:	f7fc f98a 	bl	8003984 <HAL_DMA_Abort_IT>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800767a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007682:	e003      	b.n	800768c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f809 	bl	800769c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800768a:	e000      	b.n	800768e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800768c:	bf00      	nop
    return;
 800768e:	bf00      	nop
  }
}
 8007690:	3720      	adds	r7, #32
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	080076b1 	.word	0x080076b1

0800769c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f7ff ffe6 	bl	800769c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80076d0:	bf00      	nop
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b088      	sub	sp, #32
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	603b      	str	r3, [r7, #0]
 80076e4:	4613      	mov	r3, r2
 80076e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80076e8:	f7fb ff1c 	bl	8003524 <HAL_GetTick>
 80076ec:	4602      	mov	r2, r0
 80076ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f0:	1a9b      	subs	r3, r3, r2
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	4413      	add	r3, r2
 80076f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80076f8:	f7fb ff14 	bl	8003524 <HAL_GetTick>
 80076fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80076fe:	4b39      	ldr	r3, [pc, #228]	; (80077e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	015b      	lsls	r3, r3, #5
 8007704:	0d1b      	lsrs	r3, r3, #20
 8007706:	69fa      	ldr	r2, [r7, #28]
 8007708:	fb02 f303 	mul.w	r3, r2, r3
 800770c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800770e:	e054      	b.n	80077ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007716:	d050      	beq.n	80077ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007718:	f7fb ff04 	bl	8003524 <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	69fa      	ldr	r2, [r7, #28]
 8007724:	429a      	cmp	r2, r3
 8007726:	d902      	bls.n	800772e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d13d      	bne.n	80077aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800773c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007746:	d111      	bne.n	800776c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007750:	d004      	beq.n	800775c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800775a:	d107      	bne.n	800776c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800776a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007774:	d10f      	bne.n	8007796 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007794:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e017      	b.n	80077da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d101      	bne.n	80077b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	3b01      	subs	r3, #1
 80077b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	689a      	ldr	r2, [r3, #8]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	4013      	ands	r3, r2
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	bf0c      	ite	eq
 80077ca:	2301      	moveq	r3, #1
 80077cc:	2300      	movne	r3, #0
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	461a      	mov	r2, r3
 80077d2:	79fb      	ldrb	r3, [r7, #7]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d19b      	bne.n	8007710 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3720      	adds	r7, #32
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	20000234 	.word	0x20000234

080077e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b088      	sub	sp, #32
 80077ec:	af02      	add	r7, sp, #8
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80077f4:	4b1b      	ldr	r3, [pc, #108]	; (8007864 <SPI_EndRxTxTransaction+0x7c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a1b      	ldr	r2, [pc, #108]	; (8007868 <SPI_EndRxTxTransaction+0x80>)
 80077fa:	fba2 2303 	umull	r2, r3, r2, r3
 80077fe:	0d5b      	lsrs	r3, r3, #21
 8007800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007804:	fb02 f303 	mul.w	r3, r2, r3
 8007808:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007812:	d112      	bne.n	800783a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2200      	movs	r2, #0
 800781c:	2180      	movs	r1, #128	; 0x80
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f7ff ff5a 	bl	80076d8 <SPI_WaitFlagStateUntilTimeout>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d016      	beq.n	8007858 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800782e:	f043 0220 	orr.w	r2, r3, #32
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e00f      	b.n	800785a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00a      	beq.n	8007856 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	3b01      	subs	r3, #1
 8007844:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007850:	2b80      	cmp	r3, #128	; 0x80
 8007852:	d0f2      	beq.n	800783a <SPI_EndRxTxTransaction+0x52>
 8007854:	e000      	b.n	8007858 <SPI_EndRxTxTransaction+0x70>
        break;
 8007856:	bf00      	nop
  }

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3718      	adds	r7, #24
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	20000234 	.word	0x20000234
 8007868:	165e9f81 	.word	0x165e9f81

0800786c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d101      	bne.n	800787e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e041      	b.n	8007902 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d106      	bne.n	8007898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7fb fb14 	bl	8002ec0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2202      	movs	r2, #2
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3304      	adds	r3, #4
 80078a8:	4619      	mov	r1, r3
 80078aa:	4610      	mov	r0, r2
 80078ac:	f000 fa96 	bl	8007ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
	...

0800790c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b01      	cmp	r3, #1
 800791e:	d001      	beq.n	8007924 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e04e      	b.n	80079c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2202      	movs	r2, #2
 8007928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68da      	ldr	r2, [r3, #12]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f042 0201 	orr.w	r2, r2, #1
 800793a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a23      	ldr	r2, [pc, #140]	; (80079d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d022      	beq.n	800798c <HAL_TIM_Base_Start_IT+0x80>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800794e:	d01d      	beq.n	800798c <HAL_TIM_Base_Start_IT+0x80>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a1f      	ldr	r2, [pc, #124]	; (80079d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d018      	beq.n	800798c <HAL_TIM_Base_Start_IT+0x80>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a1e      	ldr	r2, [pc, #120]	; (80079d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d013      	beq.n	800798c <HAL_TIM_Base_Start_IT+0x80>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a1c      	ldr	r2, [pc, #112]	; (80079dc <HAL_TIM_Base_Start_IT+0xd0>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d00e      	beq.n	800798c <HAL_TIM_Base_Start_IT+0x80>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a1b      	ldr	r2, [pc, #108]	; (80079e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d009      	beq.n	800798c <HAL_TIM_Base_Start_IT+0x80>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a19      	ldr	r2, [pc, #100]	; (80079e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d004      	beq.n	800798c <HAL_TIM_Base_Start_IT+0x80>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a18      	ldr	r2, [pc, #96]	; (80079e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d111      	bne.n	80079b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f003 0307 	and.w	r3, r3, #7
 8007996:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2b06      	cmp	r3, #6
 800799c:	d010      	beq.n	80079c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f042 0201 	orr.w	r2, r2, #1
 80079ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ae:	e007      	b.n	80079c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f042 0201 	orr.w	r2, r2, #1
 80079be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	40010000 	.word	0x40010000
 80079d4:	40000400 	.word	0x40000400
 80079d8:	40000800 	.word	0x40000800
 80079dc:	40000c00 	.word	0x40000c00
 80079e0:	40010400 	.word	0x40010400
 80079e4:	40014000 	.word	0x40014000
 80079e8:	40001800 	.word	0x40001800

080079ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d122      	bne.n	8007a48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	f003 0302 	and.w	r3, r3, #2
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d11b      	bne.n	8007a48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f06f 0202 	mvn.w	r2, #2
 8007a18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	f003 0303 	and.w	r3, r3, #3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d003      	beq.n	8007a36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f9b5 	bl	8007d9e <HAL_TIM_IC_CaptureCallback>
 8007a34:	e005      	b.n	8007a42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f9a7 	bl	8007d8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f9b8 	bl	8007db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	f003 0304 	and.w	r3, r3, #4
 8007a52:	2b04      	cmp	r3, #4
 8007a54:	d122      	bne.n	8007a9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	f003 0304 	and.w	r3, r3, #4
 8007a60:	2b04      	cmp	r3, #4
 8007a62:	d11b      	bne.n	8007a9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f06f 0204 	mvn.w	r2, #4
 8007a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2202      	movs	r2, #2
 8007a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f98b 	bl	8007d9e <HAL_TIM_IC_CaptureCallback>
 8007a88:	e005      	b.n	8007a96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f97d 	bl	8007d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f98e 	bl	8007db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	f003 0308 	and.w	r3, r3, #8
 8007aa6:	2b08      	cmp	r3, #8
 8007aa8:	d122      	bne.n	8007af0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	f003 0308 	and.w	r3, r3, #8
 8007ab4:	2b08      	cmp	r3, #8
 8007ab6:	d11b      	bne.n	8007af0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f06f 0208 	mvn.w	r2, #8
 8007ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2204      	movs	r2, #4
 8007ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	f003 0303 	and.w	r3, r3, #3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f961 	bl	8007d9e <HAL_TIM_IC_CaptureCallback>
 8007adc:	e005      	b.n	8007aea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f953 	bl	8007d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f964 	bl	8007db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	f003 0310 	and.w	r3, r3, #16
 8007afa:	2b10      	cmp	r3, #16
 8007afc:	d122      	bne.n	8007b44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f003 0310 	and.w	r3, r3, #16
 8007b08:	2b10      	cmp	r3, #16
 8007b0a:	d11b      	bne.n	8007b44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f06f 0210 	mvn.w	r2, #16
 8007b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2208      	movs	r2, #8
 8007b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	69db      	ldr	r3, [r3, #28]
 8007b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d003      	beq.n	8007b32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f937 	bl	8007d9e <HAL_TIM_IC_CaptureCallback>
 8007b30:	e005      	b.n	8007b3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f929 	bl	8007d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f93a 	bl	8007db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d10e      	bne.n	8007b70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d107      	bne.n	8007b70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f06f 0201 	mvn.w	r2, #1
 8007b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7fa fcf0 	bl	8002550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b7a:	2b80      	cmp	r3, #128	; 0x80
 8007b7c:	d10e      	bne.n	8007b9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b88:	2b80      	cmp	r3, #128	; 0x80
 8007b8a:	d107      	bne.n	8007b9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fae0 	bl	800815c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba6:	2b40      	cmp	r3, #64	; 0x40
 8007ba8:	d10e      	bne.n	8007bc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb4:	2b40      	cmp	r3, #64	; 0x40
 8007bb6:	d107      	bne.n	8007bc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f8ff 	bl	8007dc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	f003 0320 	and.w	r3, r3, #32
 8007bd2:	2b20      	cmp	r3, #32
 8007bd4:	d10e      	bne.n	8007bf4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	f003 0320 	and.w	r3, r3, #32
 8007be0:	2b20      	cmp	r3, #32
 8007be2:	d107      	bne.n	8007bf4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f06f 0220 	mvn.w	r2, #32
 8007bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 faaa 	bl	8008148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bf4:	bf00      	nop
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d101      	bne.n	8007c18 <HAL_TIM_ConfigClockSource+0x1c>
 8007c14:	2302      	movs	r3, #2
 8007c16:	e0b4      	b.n	8007d82 <HAL_TIM_ConfigClockSource+0x186>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2202      	movs	r2, #2
 8007c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c50:	d03e      	beq.n	8007cd0 <HAL_TIM_ConfigClockSource+0xd4>
 8007c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c56:	f200 8087 	bhi.w	8007d68 <HAL_TIM_ConfigClockSource+0x16c>
 8007c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c5e:	f000 8086 	beq.w	8007d6e <HAL_TIM_ConfigClockSource+0x172>
 8007c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c66:	d87f      	bhi.n	8007d68 <HAL_TIM_ConfigClockSource+0x16c>
 8007c68:	2b70      	cmp	r3, #112	; 0x70
 8007c6a:	d01a      	beq.n	8007ca2 <HAL_TIM_ConfigClockSource+0xa6>
 8007c6c:	2b70      	cmp	r3, #112	; 0x70
 8007c6e:	d87b      	bhi.n	8007d68 <HAL_TIM_ConfigClockSource+0x16c>
 8007c70:	2b60      	cmp	r3, #96	; 0x60
 8007c72:	d050      	beq.n	8007d16 <HAL_TIM_ConfigClockSource+0x11a>
 8007c74:	2b60      	cmp	r3, #96	; 0x60
 8007c76:	d877      	bhi.n	8007d68 <HAL_TIM_ConfigClockSource+0x16c>
 8007c78:	2b50      	cmp	r3, #80	; 0x50
 8007c7a:	d03c      	beq.n	8007cf6 <HAL_TIM_ConfigClockSource+0xfa>
 8007c7c:	2b50      	cmp	r3, #80	; 0x50
 8007c7e:	d873      	bhi.n	8007d68 <HAL_TIM_ConfigClockSource+0x16c>
 8007c80:	2b40      	cmp	r3, #64	; 0x40
 8007c82:	d058      	beq.n	8007d36 <HAL_TIM_ConfigClockSource+0x13a>
 8007c84:	2b40      	cmp	r3, #64	; 0x40
 8007c86:	d86f      	bhi.n	8007d68 <HAL_TIM_ConfigClockSource+0x16c>
 8007c88:	2b30      	cmp	r3, #48	; 0x30
 8007c8a:	d064      	beq.n	8007d56 <HAL_TIM_ConfigClockSource+0x15a>
 8007c8c:	2b30      	cmp	r3, #48	; 0x30
 8007c8e:	d86b      	bhi.n	8007d68 <HAL_TIM_ConfigClockSource+0x16c>
 8007c90:	2b20      	cmp	r3, #32
 8007c92:	d060      	beq.n	8007d56 <HAL_TIM_ConfigClockSource+0x15a>
 8007c94:	2b20      	cmp	r3, #32
 8007c96:	d867      	bhi.n	8007d68 <HAL_TIM_ConfigClockSource+0x16c>
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d05c      	beq.n	8007d56 <HAL_TIM_ConfigClockSource+0x15a>
 8007c9c:	2b10      	cmp	r3, #16
 8007c9e:	d05a      	beq.n	8007d56 <HAL_TIM_ConfigClockSource+0x15a>
 8007ca0:	e062      	b.n	8007d68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6818      	ldr	r0, [r3, #0]
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	6899      	ldr	r1, [r3, #8]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	f000 f9ad 	bl	8008010 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007cc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	609a      	str	r2, [r3, #8]
      break;
 8007cce:	e04f      	b.n	8007d70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6818      	ldr	r0, [r3, #0]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	6899      	ldr	r1, [r3, #8]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	f000 f996 	bl	8008010 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689a      	ldr	r2, [r3, #8]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cf2:	609a      	str	r2, [r3, #8]
      break;
 8007cf4:	e03c      	b.n	8007d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6818      	ldr	r0, [r3, #0]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	6859      	ldr	r1, [r3, #4]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	461a      	mov	r2, r3
 8007d04:	f000 f90a 	bl	8007f1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2150      	movs	r1, #80	; 0x50
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f000 f963 	bl	8007fda <TIM_ITRx_SetConfig>
      break;
 8007d14:	e02c      	b.n	8007d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6818      	ldr	r0, [r3, #0]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	6859      	ldr	r1, [r3, #4]
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	461a      	mov	r2, r3
 8007d24:	f000 f929 	bl	8007f7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2160      	movs	r1, #96	; 0x60
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f000 f953 	bl	8007fda <TIM_ITRx_SetConfig>
      break;
 8007d34:	e01c      	b.n	8007d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6818      	ldr	r0, [r3, #0]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	6859      	ldr	r1, [r3, #4]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	461a      	mov	r2, r3
 8007d44:	f000 f8ea 	bl	8007f1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2140      	movs	r1, #64	; 0x40
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 f943 	bl	8007fda <TIM_ITRx_SetConfig>
      break;
 8007d54:	e00c      	b.n	8007d70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	4610      	mov	r0, r2
 8007d62:	f000 f93a 	bl	8007fda <TIM_ITRx_SetConfig>
      break;
 8007d66:	e003      	b.n	8007d70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d6c:	e000      	b.n	8007d70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007d6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b083      	sub	sp, #12
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d92:	bf00      	nop
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b083      	sub	sp, #12
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007dba:	bf00      	nop
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b083      	sub	sp, #12
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007dce:	bf00      	nop
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
	...

08007ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a40      	ldr	r2, [pc, #256]	; (8007ef0 <TIM_Base_SetConfig+0x114>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d013      	beq.n	8007e1c <TIM_Base_SetConfig+0x40>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dfa:	d00f      	beq.n	8007e1c <TIM_Base_SetConfig+0x40>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a3d      	ldr	r2, [pc, #244]	; (8007ef4 <TIM_Base_SetConfig+0x118>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d00b      	beq.n	8007e1c <TIM_Base_SetConfig+0x40>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a3c      	ldr	r2, [pc, #240]	; (8007ef8 <TIM_Base_SetConfig+0x11c>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d007      	beq.n	8007e1c <TIM_Base_SetConfig+0x40>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a3b      	ldr	r2, [pc, #236]	; (8007efc <TIM_Base_SetConfig+0x120>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d003      	beq.n	8007e1c <TIM_Base_SetConfig+0x40>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a3a      	ldr	r2, [pc, #232]	; (8007f00 <TIM_Base_SetConfig+0x124>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d108      	bne.n	8007e2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a2f      	ldr	r2, [pc, #188]	; (8007ef0 <TIM_Base_SetConfig+0x114>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d02b      	beq.n	8007e8e <TIM_Base_SetConfig+0xb2>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e3c:	d027      	beq.n	8007e8e <TIM_Base_SetConfig+0xb2>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a2c      	ldr	r2, [pc, #176]	; (8007ef4 <TIM_Base_SetConfig+0x118>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d023      	beq.n	8007e8e <TIM_Base_SetConfig+0xb2>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a2b      	ldr	r2, [pc, #172]	; (8007ef8 <TIM_Base_SetConfig+0x11c>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d01f      	beq.n	8007e8e <TIM_Base_SetConfig+0xb2>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a2a      	ldr	r2, [pc, #168]	; (8007efc <TIM_Base_SetConfig+0x120>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d01b      	beq.n	8007e8e <TIM_Base_SetConfig+0xb2>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a29      	ldr	r2, [pc, #164]	; (8007f00 <TIM_Base_SetConfig+0x124>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d017      	beq.n	8007e8e <TIM_Base_SetConfig+0xb2>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a28      	ldr	r2, [pc, #160]	; (8007f04 <TIM_Base_SetConfig+0x128>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d013      	beq.n	8007e8e <TIM_Base_SetConfig+0xb2>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a27      	ldr	r2, [pc, #156]	; (8007f08 <TIM_Base_SetConfig+0x12c>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d00f      	beq.n	8007e8e <TIM_Base_SetConfig+0xb2>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a26      	ldr	r2, [pc, #152]	; (8007f0c <TIM_Base_SetConfig+0x130>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d00b      	beq.n	8007e8e <TIM_Base_SetConfig+0xb2>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a25      	ldr	r2, [pc, #148]	; (8007f10 <TIM_Base_SetConfig+0x134>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d007      	beq.n	8007e8e <TIM_Base_SetConfig+0xb2>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a24      	ldr	r2, [pc, #144]	; (8007f14 <TIM_Base_SetConfig+0x138>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d003      	beq.n	8007e8e <TIM_Base_SetConfig+0xb2>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a23      	ldr	r2, [pc, #140]	; (8007f18 <TIM_Base_SetConfig+0x13c>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d108      	bne.n	8007ea0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	689a      	ldr	r2, [r3, #8]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a0a      	ldr	r2, [pc, #40]	; (8007ef0 <TIM_Base_SetConfig+0x114>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d003      	beq.n	8007ed4 <TIM_Base_SetConfig+0xf8>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a0c      	ldr	r2, [pc, #48]	; (8007f00 <TIM_Base_SetConfig+0x124>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d103      	bne.n	8007edc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	691a      	ldr	r2, [r3, #16]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	615a      	str	r2, [r3, #20]
}
 8007ee2:	bf00      	nop
 8007ee4:	3714      	adds	r7, #20
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	40010000 	.word	0x40010000
 8007ef4:	40000400 	.word	0x40000400
 8007ef8:	40000800 	.word	0x40000800
 8007efc:	40000c00 	.word	0x40000c00
 8007f00:	40010400 	.word	0x40010400
 8007f04:	40014000 	.word	0x40014000
 8007f08:	40014400 	.word	0x40014400
 8007f0c:	40014800 	.word	0x40014800
 8007f10:	40001800 	.word	0x40001800
 8007f14:	40001c00 	.word	0x40001c00
 8007f18:	40002000 	.word	0x40002000

08007f1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b087      	sub	sp, #28
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6a1b      	ldr	r3, [r3, #32]
 8007f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	f023 0201 	bic.w	r2, r3, #1
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	011b      	lsls	r3, r3, #4
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f023 030a 	bic.w	r3, r3, #10
 8007f58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	621a      	str	r2, [r3, #32]
}
 8007f6e:	bf00      	nop
 8007f70:	371c      	adds	r7, #28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b087      	sub	sp, #28
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	60f8      	str	r0, [r7, #12]
 8007f82:	60b9      	str	r1, [r7, #8]
 8007f84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	f023 0210 	bic.w	r2, r3, #16
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6a1b      	ldr	r3, [r3, #32]
 8007f9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	031b      	lsls	r3, r3, #12
 8007faa:	697a      	ldr	r2, [r7, #20]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	011b      	lsls	r3, r3, #4
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	697a      	ldr	r2, [r7, #20]
 8007fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	693a      	ldr	r2, [r7, #16]
 8007fcc:	621a      	str	r2, [r3, #32]
}
 8007fce:	bf00      	nop
 8007fd0:	371c      	adds	r7, #28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b085      	sub	sp, #20
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
 8007fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ff2:	683a      	ldr	r2, [r7, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	f043 0307 	orr.w	r3, r3, #7
 8007ffc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	609a      	str	r2, [r3, #8]
}
 8008004:	bf00      	nop
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008010:	b480      	push	{r7}
 8008012:	b087      	sub	sp, #28
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
 800801c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800802a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	021a      	lsls	r2, r3, #8
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	431a      	orrs	r2, r3
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	4313      	orrs	r3, r2
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	4313      	orrs	r3, r2
 800803c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	609a      	str	r2, [r3, #8]
}
 8008044:	bf00      	nop
 8008046:	371c      	adds	r7, #28
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008060:	2b01      	cmp	r3, #1
 8008062:	d101      	bne.n	8008068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008064:	2302      	movs	r3, #2
 8008066:	e05a      	b.n	800811e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2202      	movs	r2, #2
 8008074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	4313      	orrs	r3, r2
 8008098:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a21      	ldr	r2, [pc, #132]	; (800812c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d022      	beq.n	80080f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080b4:	d01d      	beq.n	80080f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a1d      	ldr	r2, [pc, #116]	; (8008130 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d018      	beq.n	80080f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a1b      	ldr	r2, [pc, #108]	; (8008134 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d013      	beq.n	80080f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a1a      	ldr	r2, [pc, #104]	; (8008138 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d00e      	beq.n	80080f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a18      	ldr	r2, [pc, #96]	; (800813c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d009      	beq.n	80080f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a17      	ldr	r2, [pc, #92]	; (8008140 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d004      	beq.n	80080f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a15      	ldr	r2, [pc, #84]	; (8008144 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d10c      	bne.n	800810c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	4313      	orrs	r3, r2
 8008102:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	40010000 	.word	0x40010000
 8008130:	40000400 	.word	0x40000400
 8008134:	40000800 	.word	0x40000800
 8008138:	40000c00 	.word	0x40000c00
 800813c:	40010400 	.word	0x40010400
 8008140:	40014000 	.word	0x40014000
 8008144:	40001800 	.word	0x40001800

08008148 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d101      	bne.n	8008182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e03f      	b.n	8008202 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b00      	cmp	r3, #0
 800818c:	d106      	bne.n	800819c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7fa feb8 	bl	8002f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2224      	movs	r2, #36	; 0x24
 80081a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68da      	ldr	r2, [r3, #12]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fe19 	bl	8008dec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	691a      	ldr	r2, [r3, #16]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	695a      	ldr	r2, [r3, #20]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68da      	ldr	r2, [r3, #12]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2220      	movs	r2, #32
 80081f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2220      	movs	r2, #32
 80081fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b08a      	sub	sp, #40	; 0x28
 800820e:	af02      	add	r7, sp, #8
 8008210:	60f8      	str	r0, [r7, #12]
 8008212:	60b9      	str	r1, [r7, #8]
 8008214:	603b      	str	r3, [r7, #0]
 8008216:	4613      	mov	r3, r2
 8008218:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008224:	b2db      	uxtb	r3, r3
 8008226:	2b20      	cmp	r3, #32
 8008228:	d17c      	bne.n	8008324 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d002      	beq.n	8008236 <HAL_UART_Transmit+0x2c>
 8008230:	88fb      	ldrh	r3, [r7, #6]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d101      	bne.n	800823a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e075      	b.n	8008326 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008240:	2b01      	cmp	r3, #1
 8008242:	d101      	bne.n	8008248 <HAL_UART_Transmit+0x3e>
 8008244:	2302      	movs	r3, #2
 8008246:	e06e      	b.n	8008326 <HAL_UART_Transmit+0x11c>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2221      	movs	r2, #33	; 0x21
 800825a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800825e:	f7fb f961 	bl	8003524 <HAL_GetTick>
 8008262:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	88fa      	ldrh	r2, [r7, #6]
 8008268:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	88fa      	ldrh	r2, [r7, #6]
 800826e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008278:	d108      	bne.n	800828c <HAL_UART_Transmit+0x82>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d104      	bne.n	800828c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008282:	2300      	movs	r3, #0
 8008284:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	61bb      	str	r3, [r7, #24]
 800828a:	e003      	b.n	8008294 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008290:	2300      	movs	r3, #0
 8008292:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800829c:	e02a      	b.n	80082f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	9300      	str	r3, [sp, #0]
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	2200      	movs	r2, #0
 80082a6:	2180      	movs	r1, #128	; 0x80
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f000 fb59 	bl	8008960 <UART_WaitOnFlagUntilTimeout>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e036      	b.n	8008326 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d10b      	bne.n	80082d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	881b      	ldrh	r3, [r3, #0]
 80082c2:	461a      	mov	r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	3302      	adds	r3, #2
 80082d2:	61bb      	str	r3, [r7, #24]
 80082d4:	e007      	b.n	80082e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	781a      	ldrb	r2, [r3, #0]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	3301      	adds	r3, #1
 80082e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	3b01      	subs	r3, #1
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d1cf      	bne.n	800829e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	2200      	movs	r2, #0
 8008306:	2140      	movs	r1, #64	; 0x40
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f000 fb29 	bl	8008960 <UART_WaitOnFlagUntilTimeout>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e006      	b.n	8008326 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2220      	movs	r2, #32
 800831c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	e000      	b.n	8008326 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008324:	2302      	movs	r3, #2
  }
}
 8008326:	4618      	mov	r0, r3
 8008328:	3720      	adds	r7, #32
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800832e:	b480      	push	{r7}
 8008330:	b085      	sub	sp, #20
 8008332:	af00      	add	r7, sp, #0
 8008334:	60f8      	str	r0, [r7, #12]
 8008336:	60b9      	str	r1, [r7, #8]
 8008338:	4613      	mov	r3, r2
 800833a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008342:	b2db      	uxtb	r3, r3
 8008344:	2b20      	cmp	r3, #32
 8008346:	d130      	bne.n	80083aa <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d002      	beq.n	8008354 <HAL_UART_Transmit_IT+0x26>
 800834e:	88fb      	ldrh	r3, [r7, #6]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d101      	bne.n	8008358 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	e029      	b.n	80083ac <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800835e:	2b01      	cmp	r3, #1
 8008360:	d101      	bne.n	8008366 <HAL_UART_Transmit_IT+0x38>
 8008362:	2302      	movs	r3, #2
 8008364:	e022      	b.n	80083ac <HAL_UART_Transmit_IT+0x7e>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	88fa      	ldrh	r2, [r7, #6]
 8008378:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	88fa      	ldrh	r2, [r7, #6]
 800837e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2221      	movs	r2, #33	; 0x21
 800838a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68da      	ldr	r2, [r3, #12]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083a4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	e000      	b.n	80083ac <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80083aa:	2302      	movs	r3, #2
  }
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	4613      	mov	r3, r2
 80083c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	2b20      	cmp	r3, #32
 80083d0:	d11d      	bne.n	800840e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d002      	beq.n	80083de <HAL_UART_Receive_IT+0x26>
 80083d8:	88fb      	ldrh	r3, [r7, #6]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d101      	bne.n	80083e2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e016      	b.n	8008410 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d101      	bne.n	80083f0 <HAL_UART_Receive_IT+0x38>
 80083ec:	2302      	movs	r3, #2
 80083ee:	e00f      	b.n	8008410 <HAL_UART_Receive_IT+0x58>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80083fe:	88fb      	ldrh	r3, [r7, #6]
 8008400:	461a      	mov	r2, r3
 8008402:	68b9      	ldr	r1, [r7, #8]
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f000 fb19 	bl	8008a3c <UART_Start_Receive_IT>
 800840a:	4603      	mov	r3, r0
 800840c:	e000      	b.n	8008410 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800840e:	2302      	movs	r3, #2
  }
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b0ba      	sub	sp, #232	; 0xe8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	695b      	ldr	r3, [r3, #20]
 800843a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800843e:	2300      	movs	r3, #0
 8008440:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008444:	2300      	movs	r3, #0
 8008446:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800844a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800844e:	f003 030f 	and.w	r3, r3, #15
 8008452:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008456:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10f      	bne.n	800847e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800845e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008462:	f003 0320 	and.w	r3, r3, #32
 8008466:	2b00      	cmp	r3, #0
 8008468:	d009      	beq.n	800847e <HAL_UART_IRQHandler+0x66>
 800846a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800846e:	f003 0320 	and.w	r3, r3, #32
 8008472:	2b00      	cmp	r3, #0
 8008474:	d003      	beq.n	800847e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fbfd 	bl	8008c76 <UART_Receive_IT>
      return;
 800847c:	e256      	b.n	800892c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800847e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 80de 	beq.w	8008644 <HAL_UART_IRQHandler+0x22c>
 8008488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800848c:	f003 0301 	and.w	r3, r3, #1
 8008490:	2b00      	cmp	r3, #0
 8008492:	d106      	bne.n	80084a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008498:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 80d1 	beq.w	8008644 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80084a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00b      	beq.n	80084c6 <HAL_UART_IRQHandler+0xae>
 80084ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d005      	beq.n	80084c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084be:	f043 0201 	orr.w	r2, r3, #1
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ca:	f003 0304 	and.w	r3, r3, #4
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00b      	beq.n	80084ea <HAL_UART_IRQHandler+0xd2>
 80084d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d005      	beq.n	80084ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e2:	f043 0202 	orr.w	r2, r3, #2
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ee:	f003 0302 	and.w	r3, r3, #2
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00b      	beq.n	800850e <HAL_UART_IRQHandler+0xf6>
 80084f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d005      	beq.n	800850e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008506:	f043 0204 	orr.w	r2, r3, #4
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800850e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008512:	f003 0308 	and.w	r3, r3, #8
 8008516:	2b00      	cmp	r3, #0
 8008518:	d011      	beq.n	800853e <HAL_UART_IRQHandler+0x126>
 800851a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800851e:	f003 0320 	and.w	r3, r3, #32
 8008522:	2b00      	cmp	r3, #0
 8008524:	d105      	bne.n	8008532 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800852a:	f003 0301 	and.w	r3, r3, #1
 800852e:	2b00      	cmp	r3, #0
 8008530:	d005      	beq.n	800853e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008536:	f043 0208 	orr.w	r2, r3, #8
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008542:	2b00      	cmp	r3, #0
 8008544:	f000 81ed 	beq.w	8008922 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800854c:	f003 0320 	and.w	r3, r3, #32
 8008550:	2b00      	cmp	r3, #0
 8008552:	d008      	beq.n	8008566 <HAL_UART_IRQHandler+0x14e>
 8008554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008558:	f003 0320 	and.w	r3, r3, #32
 800855c:	2b00      	cmp	r3, #0
 800855e:	d002      	beq.n	8008566 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fb88 	bl	8008c76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	695b      	ldr	r3, [r3, #20]
 800856c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008570:	2b40      	cmp	r3, #64	; 0x40
 8008572:	bf0c      	ite	eq
 8008574:	2301      	moveq	r3, #1
 8008576:	2300      	movne	r3, #0
 8008578:	b2db      	uxtb	r3, r3
 800857a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008582:	f003 0308 	and.w	r3, r3, #8
 8008586:	2b00      	cmp	r3, #0
 8008588:	d103      	bne.n	8008592 <HAL_UART_IRQHandler+0x17a>
 800858a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800858e:	2b00      	cmp	r3, #0
 8008590:	d04f      	beq.n	8008632 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fa90 	bl	8008ab8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a2:	2b40      	cmp	r3, #64	; 0x40
 80085a4:	d141      	bne.n	800862a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	3314      	adds	r3, #20
 80085ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085b4:	e853 3f00 	ldrex	r3, [r3]
 80085b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80085bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	3314      	adds	r3, #20
 80085ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80085d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80085d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80085de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80085e2:	e841 2300 	strex	r3, r2, [r1]
 80085e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80085ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1d9      	bne.n	80085a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d013      	beq.n	8008622 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fe:	4a7d      	ldr	r2, [pc, #500]	; (80087f4 <HAL_UART_IRQHandler+0x3dc>)
 8008600:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008606:	4618      	mov	r0, r3
 8008608:	f7fb f9bc 	bl	8003984 <HAL_DMA_Abort_IT>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d016      	beq.n	8008640 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800861c:	4610      	mov	r0, r2
 800861e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008620:	e00e      	b.n	8008640 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f986 	bl	8008934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008628:	e00a      	b.n	8008640 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 f982 	bl	8008934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008630:	e006      	b.n	8008640 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 f97e 	bl	8008934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800863e:	e170      	b.n	8008922 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008640:	bf00      	nop
    return;
 8008642:	e16e      	b.n	8008922 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008648:	2b01      	cmp	r3, #1
 800864a:	f040 814a 	bne.w	80088e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800864e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008652:	f003 0310 	and.w	r3, r3, #16
 8008656:	2b00      	cmp	r3, #0
 8008658:	f000 8143 	beq.w	80088e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800865c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008660:	f003 0310 	and.w	r3, r3, #16
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 813c 	beq.w	80088e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800866a:	2300      	movs	r3, #0
 800866c:	60bb      	str	r3, [r7, #8]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	60bb      	str	r3, [r7, #8]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	60bb      	str	r3, [r7, #8]
 800867e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800868a:	2b40      	cmp	r3, #64	; 0x40
 800868c:	f040 80b4 	bne.w	80087f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800869c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 8140 	beq.w	8008926 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086ae:	429a      	cmp	r2, r3
 80086b0:	f080 8139 	bcs.w	8008926 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c0:	69db      	ldr	r3, [r3, #28]
 80086c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086c6:	f000 8088 	beq.w	80087da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	330c      	adds	r3, #12
 80086d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80086d8:	e853 3f00 	ldrex	r3, [r3]
 80086dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80086e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80086e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	330c      	adds	r3, #12
 80086f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80086f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80086fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008702:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008706:	e841 2300 	strex	r3, r2, [r1]
 800870a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800870e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1d9      	bne.n	80086ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3314      	adds	r3, #20
 800871c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008720:	e853 3f00 	ldrex	r3, [r3]
 8008724:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008726:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008728:	f023 0301 	bic.w	r3, r3, #1
 800872c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3314      	adds	r3, #20
 8008736:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800873a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800873e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008740:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008742:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008746:	e841 2300 	strex	r3, r2, [r1]
 800874a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800874c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1e1      	bne.n	8008716 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3314      	adds	r3, #20
 8008758:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800875c:	e853 3f00 	ldrex	r3, [r3]
 8008760:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008768:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	3314      	adds	r3, #20
 8008772:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008776:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008778:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800877c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800877e:	e841 2300 	strex	r3, r2, [r1]
 8008782:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1e3      	bne.n	8008752 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2220      	movs	r2, #32
 800878e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	330c      	adds	r3, #12
 800879e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087a2:	e853 3f00 	ldrex	r3, [r3]
 80087a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80087a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087aa:	f023 0310 	bic.w	r3, r3, #16
 80087ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	330c      	adds	r3, #12
 80087b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80087bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80087be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087c4:	e841 2300 	strex	r3, r2, [r1]
 80087c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80087ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1e3      	bne.n	8008798 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7fb f865 	bl	80038a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f8ac 	bl	8008948 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80087f0:	e099      	b.n	8008926 <HAL_UART_IRQHandler+0x50e>
 80087f2:	bf00      	nop
 80087f4:	08008b7f 	.word	0x08008b7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008800:	b29b      	uxth	r3, r3
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800880c:	b29b      	uxth	r3, r3
 800880e:	2b00      	cmp	r3, #0
 8008810:	f000 808b 	beq.w	800892a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008814:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008818:	2b00      	cmp	r3, #0
 800881a:	f000 8086 	beq.w	800892a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	330c      	adds	r3, #12
 8008824:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008828:	e853 3f00 	ldrex	r3, [r3]
 800882c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800882e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008830:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008834:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	330c      	adds	r3, #12
 800883e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008842:	647a      	str	r2, [r7, #68]	; 0x44
 8008844:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008846:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008848:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800884a:	e841 2300 	strex	r3, r2, [r1]
 800884e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1e3      	bne.n	800881e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	3314      	adds	r3, #20
 800885c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008860:	e853 3f00 	ldrex	r3, [r3]
 8008864:	623b      	str	r3, [r7, #32]
   return(result);
 8008866:	6a3b      	ldr	r3, [r7, #32]
 8008868:	f023 0301 	bic.w	r3, r3, #1
 800886c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	3314      	adds	r3, #20
 8008876:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800887a:	633a      	str	r2, [r7, #48]	; 0x30
 800887c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008882:	e841 2300 	strex	r3, r2, [r1]
 8008886:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1e3      	bne.n	8008856 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2220      	movs	r2, #32
 8008892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	330c      	adds	r3, #12
 80088a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	e853 3f00 	ldrex	r3, [r3]
 80088aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f023 0310 	bic.w	r3, r3, #16
 80088b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	330c      	adds	r3, #12
 80088bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80088c0:	61fa      	str	r2, [r7, #28]
 80088c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c4:	69b9      	ldr	r1, [r7, #24]
 80088c6:	69fa      	ldr	r2, [r7, #28]
 80088c8:	e841 2300 	strex	r3, r2, [r1]
 80088cc:	617b      	str	r3, [r7, #20]
   return(result);
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1e3      	bne.n	800889c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088d8:	4619      	mov	r1, r3
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f834 	bl	8008948 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80088e0:	e023      	b.n	800892a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80088e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d009      	beq.n	8008902 <HAL_UART_IRQHandler+0x4ea>
 80088ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d003      	beq.n	8008902 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f953 	bl	8008ba6 <UART_Transmit_IT>
    return;
 8008900:	e014      	b.n	800892c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00e      	beq.n	800892c <HAL_UART_IRQHandler+0x514>
 800890e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008916:	2b00      	cmp	r3, #0
 8008918:	d008      	beq.n	800892c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f993 	bl	8008c46 <UART_EndTransmit_IT>
    return;
 8008920:	e004      	b.n	800892c <HAL_UART_IRQHandler+0x514>
    return;
 8008922:	bf00      	nop
 8008924:	e002      	b.n	800892c <HAL_UART_IRQHandler+0x514>
      return;
 8008926:	bf00      	nop
 8008928:	e000      	b.n	800892c <HAL_UART_IRQHandler+0x514>
      return;
 800892a:	bf00      	nop
  }
}
 800892c:	37e8      	adds	r7, #232	; 0xe8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop

08008934 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	460b      	mov	r3, r1
 8008952:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b090      	sub	sp, #64	; 0x40
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	603b      	str	r3, [r7, #0]
 800896c:	4613      	mov	r3, r2
 800896e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008970:	e050      	b.n	8008a14 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008978:	d04c      	beq.n	8008a14 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800897a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800897c:	2b00      	cmp	r3, #0
 800897e:	d007      	beq.n	8008990 <UART_WaitOnFlagUntilTimeout+0x30>
 8008980:	f7fa fdd0 	bl	8003524 <HAL_GetTick>
 8008984:	4602      	mov	r2, r0
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800898c:	429a      	cmp	r2, r3
 800898e:	d241      	bcs.n	8008a14 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	330c      	adds	r3, #12
 8008996:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899a:	e853 3f00 	ldrex	r3, [r3]
 800899e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	330c      	adds	r3, #12
 80089ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089b0:	637a      	str	r2, [r7, #52]	; 0x34
 80089b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089b8:	e841 2300 	strex	r3, r2, [r1]
 80089bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80089be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1e5      	bne.n	8008990 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	3314      	adds	r3, #20
 80089ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	e853 3f00 	ldrex	r3, [r3]
 80089d2:	613b      	str	r3, [r7, #16]
   return(result);
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	f023 0301 	bic.w	r3, r3, #1
 80089da:	63bb      	str	r3, [r7, #56]	; 0x38
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	3314      	adds	r3, #20
 80089e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089e4:	623a      	str	r2, [r7, #32]
 80089e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e8:	69f9      	ldr	r1, [r7, #28]
 80089ea:	6a3a      	ldr	r2, [r7, #32]
 80089ec:	e841 2300 	strex	r3, r2, [r1]
 80089f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d1e5      	bne.n	80089c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2220      	movs	r2, #32
 80089fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2220      	movs	r2, #32
 8008a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e00f      	b.n	8008a34 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	68ba      	ldr	r2, [r7, #8]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	bf0c      	ite	eq
 8008a24:	2301      	moveq	r3, #1
 8008a26:	2300      	movne	r3, #0
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	79fb      	ldrb	r3, [r7, #7]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d09f      	beq.n	8008972 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3740      	adds	r7, #64	; 0x40
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	4613      	mov	r3, r2
 8008a48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	88fa      	ldrh	r2, [r7, #6]
 8008a54:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	88fa      	ldrh	r2, [r7, #6]
 8008a5a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2222      	movs	r2, #34	; 0x22
 8008a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d007      	beq.n	8008a8a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68da      	ldr	r2, [r3, #12]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	695a      	ldr	r2, [r3, #20]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f042 0201 	orr.w	r2, r2, #1
 8008a98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68da      	ldr	r2, [r3, #12]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f042 0220 	orr.w	r2, r2, #32
 8008aa8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b095      	sub	sp, #84	; 0x54
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	330c      	adds	r3, #12
 8008ac6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aca:	e853 3f00 	ldrex	r3, [r3]
 8008ace:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	330c      	adds	r3, #12
 8008ade:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ae0:	643a      	str	r2, [r7, #64]	; 0x40
 8008ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ae6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ae8:	e841 2300 	strex	r3, r2, [r1]
 8008aec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1e5      	bne.n	8008ac0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3314      	adds	r3, #20
 8008afa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	e853 3f00 	ldrex	r3, [r3]
 8008b02:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	f023 0301 	bic.w	r3, r3, #1
 8008b0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	3314      	adds	r3, #20
 8008b12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b1c:	e841 2300 	strex	r3, r2, [r1]
 8008b20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1e5      	bne.n	8008af4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d119      	bne.n	8008b64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	330c      	adds	r3, #12
 8008b36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	e853 3f00 	ldrex	r3, [r3]
 8008b3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	f023 0310 	bic.w	r3, r3, #16
 8008b46:	647b      	str	r3, [r7, #68]	; 0x44
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	330c      	adds	r3, #12
 8008b4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b50:	61ba      	str	r2, [r7, #24]
 8008b52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b54:	6979      	ldr	r1, [r7, #20]
 8008b56:	69ba      	ldr	r2, [r7, #24]
 8008b58:	e841 2300 	strex	r3, r2, [r1]
 8008b5c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1e5      	bne.n	8008b30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2220      	movs	r2, #32
 8008b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008b72:	bf00      	nop
 8008b74:	3754      	adds	r7, #84	; 0x54
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b084      	sub	sp, #16
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f7ff fecb 	bl	8008934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b9e:	bf00      	nop
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b085      	sub	sp, #20
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b21      	cmp	r3, #33	; 0x21
 8008bb8:	d13e      	bne.n	8008c38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bc2:	d114      	bne.n	8008bee <UART_Transmit_IT+0x48>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d110      	bne.n	8008bee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a1b      	ldr	r3, [r3, #32]
 8008bd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	881b      	ldrh	r3, [r3, #0]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008be0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	1c9a      	adds	r2, r3, #2
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	621a      	str	r2, [r3, #32]
 8008bec:	e008      	b.n	8008c00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a1b      	ldr	r3, [r3, #32]
 8008bf2:	1c59      	adds	r1, r3, #1
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	6211      	str	r1, [r2, #32]
 8008bf8:	781a      	ldrb	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	3b01      	subs	r3, #1
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10f      	bne.n	8008c34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	68da      	ldr	r2, [r3, #12]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68da      	ldr	r2, [r3, #12]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	e000      	b.n	8008c3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008c38:	2302      	movs	r3, #2
  }
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3714      	adds	r7, #20
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b082      	sub	sp, #8
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68da      	ldr	r2, [r3, #12]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2220      	movs	r2, #32
 8008c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7f9 f8d6 	bl	8001e18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b08c      	sub	sp, #48	; 0x30
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b22      	cmp	r3, #34	; 0x22
 8008c88:	f040 80ab 	bne.w	8008de2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c94:	d117      	bne.n	8008cc6 <UART_Receive_IT+0x50>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d113      	bne.n	8008cc6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cb4:	b29a      	uxth	r2, r3
 8008cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cbe:	1c9a      	adds	r2, r3, #2
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	629a      	str	r2, [r3, #40]	; 0x28
 8008cc4:	e026      	b.n	8008d14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cd8:	d007      	beq.n	8008cea <UART_Receive_IT+0x74>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10a      	bne.n	8008cf8 <UART_Receive_IT+0x82>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d106      	bne.n	8008cf8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf4:	701a      	strb	r2, [r3, #0]
 8008cf6:	e008      	b.n	8008d0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d04:	b2da      	uxtb	r2, r3
 8008d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0e:	1c5a      	adds	r2, r3, #1
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	4619      	mov	r1, r3
 8008d22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d15a      	bne.n	8008dde <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68da      	ldr	r2, [r3, #12]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f022 0220 	bic.w	r2, r2, #32
 8008d36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68da      	ldr	r2, [r3, #12]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	695a      	ldr	r2, [r3, #20]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f022 0201 	bic.w	r2, r2, #1
 8008d56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2220      	movs	r2, #32
 8008d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d135      	bne.n	8008dd4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	330c      	adds	r3, #12
 8008d74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	e853 3f00 	ldrex	r3, [r3]
 8008d7c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	f023 0310 	bic.w	r3, r3, #16
 8008d84:	627b      	str	r3, [r7, #36]	; 0x24
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	330c      	adds	r3, #12
 8008d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d8e:	623a      	str	r2, [r7, #32]
 8008d90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d92:	69f9      	ldr	r1, [r7, #28]
 8008d94:	6a3a      	ldr	r2, [r7, #32]
 8008d96:	e841 2300 	strex	r3, r2, [r1]
 8008d9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1e5      	bne.n	8008d6e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0310 	and.w	r3, r3, #16
 8008dac:	2b10      	cmp	r3, #16
 8008dae:	d10a      	bne.n	8008dc6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008db0:	2300      	movs	r3, #0
 8008db2:	60fb      	str	r3, [r7, #12]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	60fb      	str	r3, [r7, #12]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	60fb      	str	r3, [r7, #12]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008dca:	4619      	mov	r1, r3
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7ff fdbb 	bl	8008948 <HAL_UARTEx_RxEventCallback>
 8008dd2:	e002      	b.n	8008dda <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f7f8 fffb 	bl	8001dd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	e002      	b.n	8008de4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	e000      	b.n	8008de4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008de2:	2302      	movs	r3, #2
  }
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3730      	adds	r7, #48	; 0x30
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008df0:	b0c0      	sub	sp, #256	; 0x100
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e08:	68d9      	ldr	r1, [r3, #12]
 8008e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	ea40 0301 	orr.w	r3, r0, r1
 8008e14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e1a:	689a      	ldr	r2, [r3, #8]
 8008e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	431a      	orrs	r2, r3
 8008e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e28:	695b      	ldr	r3, [r3, #20]
 8008e2a:	431a      	orrs	r2, r3
 8008e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e30:	69db      	ldr	r3, [r3, #28]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008e44:	f021 010c 	bic.w	r1, r1, #12
 8008e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e52:	430b      	orrs	r3, r1
 8008e54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e66:	6999      	ldr	r1, [r3, #24]
 8008e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	ea40 0301 	orr.w	r3, r0, r1
 8008e72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	4b8f      	ldr	r3, [pc, #572]	; (80090b8 <UART_SetConfig+0x2cc>)
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d005      	beq.n	8008e8c <UART_SetConfig+0xa0>
 8008e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	4b8d      	ldr	r3, [pc, #564]	; (80090bc <UART_SetConfig+0x2d0>)
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d104      	bne.n	8008e96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e8c:	f7fd fcb4 	bl	80067f8 <HAL_RCC_GetPCLK2Freq>
 8008e90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008e94:	e003      	b.n	8008e9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e96:	f7fd fc9b 	bl	80067d0 <HAL_RCC_GetPCLK1Freq>
 8008e9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea2:	69db      	ldr	r3, [r3, #28]
 8008ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ea8:	f040 810c 	bne.w	80090c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008eb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008eba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008ebe:	4622      	mov	r2, r4
 8008ec0:	462b      	mov	r3, r5
 8008ec2:	1891      	adds	r1, r2, r2
 8008ec4:	65b9      	str	r1, [r7, #88]	; 0x58
 8008ec6:	415b      	adcs	r3, r3
 8008ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008eca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008ece:	4621      	mov	r1, r4
 8008ed0:	eb12 0801 	adds.w	r8, r2, r1
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	eb43 0901 	adc.w	r9, r3, r1
 8008eda:	f04f 0200 	mov.w	r2, #0
 8008ede:	f04f 0300 	mov.w	r3, #0
 8008ee2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ee6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008eea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008eee:	4690      	mov	r8, r2
 8008ef0:	4699      	mov	r9, r3
 8008ef2:	4623      	mov	r3, r4
 8008ef4:	eb18 0303 	adds.w	r3, r8, r3
 8008ef8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008efc:	462b      	mov	r3, r5
 8008efe:	eb49 0303 	adc.w	r3, r9, r3
 8008f02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008f12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008f16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	18db      	adds	r3, r3, r3
 8008f1e:	653b      	str	r3, [r7, #80]	; 0x50
 8008f20:	4613      	mov	r3, r2
 8008f22:	eb42 0303 	adc.w	r3, r2, r3
 8008f26:	657b      	str	r3, [r7, #84]	; 0x54
 8008f28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008f2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008f30:	f7f7 f9b6 	bl	80002a0 <__aeabi_uldivmod>
 8008f34:	4602      	mov	r2, r0
 8008f36:	460b      	mov	r3, r1
 8008f38:	4b61      	ldr	r3, [pc, #388]	; (80090c0 <UART_SetConfig+0x2d4>)
 8008f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8008f3e:	095b      	lsrs	r3, r3, #5
 8008f40:	011c      	lsls	r4, r3, #4
 8008f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f46:	2200      	movs	r2, #0
 8008f48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008f50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008f54:	4642      	mov	r2, r8
 8008f56:	464b      	mov	r3, r9
 8008f58:	1891      	adds	r1, r2, r2
 8008f5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008f5c:	415b      	adcs	r3, r3
 8008f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008f64:	4641      	mov	r1, r8
 8008f66:	eb12 0a01 	adds.w	sl, r2, r1
 8008f6a:	4649      	mov	r1, r9
 8008f6c:	eb43 0b01 	adc.w	fp, r3, r1
 8008f70:	f04f 0200 	mov.w	r2, #0
 8008f74:	f04f 0300 	mov.w	r3, #0
 8008f78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f84:	4692      	mov	sl, r2
 8008f86:	469b      	mov	fp, r3
 8008f88:	4643      	mov	r3, r8
 8008f8a:	eb1a 0303 	adds.w	r3, sl, r3
 8008f8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f92:	464b      	mov	r3, r9
 8008f94:	eb4b 0303 	adc.w	r3, fp, r3
 8008f98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008fa8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008fac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	18db      	adds	r3, r3, r3
 8008fb4:	643b      	str	r3, [r7, #64]	; 0x40
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	eb42 0303 	adc.w	r3, r2, r3
 8008fbc:	647b      	str	r3, [r7, #68]	; 0x44
 8008fbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008fc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008fc6:	f7f7 f96b 	bl	80002a0 <__aeabi_uldivmod>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	460b      	mov	r3, r1
 8008fce:	4611      	mov	r1, r2
 8008fd0:	4b3b      	ldr	r3, [pc, #236]	; (80090c0 <UART_SetConfig+0x2d4>)
 8008fd2:	fba3 2301 	umull	r2, r3, r3, r1
 8008fd6:	095b      	lsrs	r3, r3, #5
 8008fd8:	2264      	movs	r2, #100	; 0x64
 8008fda:	fb02 f303 	mul.w	r3, r2, r3
 8008fde:	1acb      	subs	r3, r1, r3
 8008fe0:	00db      	lsls	r3, r3, #3
 8008fe2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008fe6:	4b36      	ldr	r3, [pc, #216]	; (80090c0 <UART_SetConfig+0x2d4>)
 8008fe8:	fba3 2302 	umull	r2, r3, r3, r2
 8008fec:	095b      	lsrs	r3, r3, #5
 8008fee:	005b      	lsls	r3, r3, #1
 8008ff0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ff4:	441c      	add	r4, r3
 8008ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009000:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009004:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009008:	4642      	mov	r2, r8
 800900a:	464b      	mov	r3, r9
 800900c:	1891      	adds	r1, r2, r2
 800900e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009010:	415b      	adcs	r3, r3
 8009012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009014:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009018:	4641      	mov	r1, r8
 800901a:	1851      	adds	r1, r2, r1
 800901c:	6339      	str	r1, [r7, #48]	; 0x30
 800901e:	4649      	mov	r1, r9
 8009020:	414b      	adcs	r3, r1
 8009022:	637b      	str	r3, [r7, #52]	; 0x34
 8009024:	f04f 0200 	mov.w	r2, #0
 8009028:	f04f 0300 	mov.w	r3, #0
 800902c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009030:	4659      	mov	r1, fp
 8009032:	00cb      	lsls	r3, r1, #3
 8009034:	4651      	mov	r1, sl
 8009036:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800903a:	4651      	mov	r1, sl
 800903c:	00ca      	lsls	r2, r1, #3
 800903e:	4610      	mov	r0, r2
 8009040:	4619      	mov	r1, r3
 8009042:	4603      	mov	r3, r0
 8009044:	4642      	mov	r2, r8
 8009046:	189b      	adds	r3, r3, r2
 8009048:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800904c:	464b      	mov	r3, r9
 800904e:	460a      	mov	r2, r1
 8009050:	eb42 0303 	adc.w	r3, r2, r3
 8009054:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009064:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009068:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800906c:	460b      	mov	r3, r1
 800906e:	18db      	adds	r3, r3, r3
 8009070:	62bb      	str	r3, [r7, #40]	; 0x28
 8009072:	4613      	mov	r3, r2
 8009074:	eb42 0303 	adc.w	r3, r2, r3
 8009078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800907a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800907e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009082:	f7f7 f90d 	bl	80002a0 <__aeabi_uldivmod>
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	4b0d      	ldr	r3, [pc, #52]	; (80090c0 <UART_SetConfig+0x2d4>)
 800908c:	fba3 1302 	umull	r1, r3, r3, r2
 8009090:	095b      	lsrs	r3, r3, #5
 8009092:	2164      	movs	r1, #100	; 0x64
 8009094:	fb01 f303 	mul.w	r3, r1, r3
 8009098:	1ad3      	subs	r3, r2, r3
 800909a:	00db      	lsls	r3, r3, #3
 800909c:	3332      	adds	r3, #50	; 0x32
 800909e:	4a08      	ldr	r2, [pc, #32]	; (80090c0 <UART_SetConfig+0x2d4>)
 80090a0:	fba2 2303 	umull	r2, r3, r2, r3
 80090a4:	095b      	lsrs	r3, r3, #5
 80090a6:	f003 0207 	and.w	r2, r3, #7
 80090aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4422      	add	r2, r4
 80090b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80090b4:	e105      	b.n	80092c2 <UART_SetConfig+0x4d6>
 80090b6:	bf00      	nop
 80090b8:	40011000 	.word	0x40011000
 80090bc:	40011400 	.word	0x40011400
 80090c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80090c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090c8:	2200      	movs	r2, #0
 80090ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80090ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80090d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80090d6:	4642      	mov	r2, r8
 80090d8:	464b      	mov	r3, r9
 80090da:	1891      	adds	r1, r2, r2
 80090dc:	6239      	str	r1, [r7, #32]
 80090de:	415b      	adcs	r3, r3
 80090e0:	627b      	str	r3, [r7, #36]	; 0x24
 80090e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80090e6:	4641      	mov	r1, r8
 80090e8:	1854      	adds	r4, r2, r1
 80090ea:	4649      	mov	r1, r9
 80090ec:	eb43 0501 	adc.w	r5, r3, r1
 80090f0:	f04f 0200 	mov.w	r2, #0
 80090f4:	f04f 0300 	mov.w	r3, #0
 80090f8:	00eb      	lsls	r3, r5, #3
 80090fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80090fe:	00e2      	lsls	r2, r4, #3
 8009100:	4614      	mov	r4, r2
 8009102:	461d      	mov	r5, r3
 8009104:	4643      	mov	r3, r8
 8009106:	18e3      	adds	r3, r4, r3
 8009108:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800910c:	464b      	mov	r3, r9
 800910e:	eb45 0303 	adc.w	r3, r5, r3
 8009112:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009122:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009126:	f04f 0200 	mov.w	r2, #0
 800912a:	f04f 0300 	mov.w	r3, #0
 800912e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009132:	4629      	mov	r1, r5
 8009134:	008b      	lsls	r3, r1, #2
 8009136:	4621      	mov	r1, r4
 8009138:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800913c:	4621      	mov	r1, r4
 800913e:	008a      	lsls	r2, r1, #2
 8009140:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009144:	f7f7 f8ac 	bl	80002a0 <__aeabi_uldivmod>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4b60      	ldr	r3, [pc, #384]	; (80092d0 <UART_SetConfig+0x4e4>)
 800914e:	fba3 2302 	umull	r2, r3, r3, r2
 8009152:	095b      	lsrs	r3, r3, #5
 8009154:	011c      	lsls	r4, r3, #4
 8009156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800915a:	2200      	movs	r2, #0
 800915c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009160:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009164:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009168:	4642      	mov	r2, r8
 800916a:	464b      	mov	r3, r9
 800916c:	1891      	adds	r1, r2, r2
 800916e:	61b9      	str	r1, [r7, #24]
 8009170:	415b      	adcs	r3, r3
 8009172:	61fb      	str	r3, [r7, #28]
 8009174:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009178:	4641      	mov	r1, r8
 800917a:	1851      	adds	r1, r2, r1
 800917c:	6139      	str	r1, [r7, #16]
 800917e:	4649      	mov	r1, r9
 8009180:	414b      	adcs	r3, r1
 8009182:	617b      	str	r3, [r7, #20]
 8009184:	f04f 0200 	mov.w	r2, #0
 8009188:	f04f 0300 	mov.w	r3, #0
 800918c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009190:	4659      	mov	r1, fp
 8009192:	00cb      	lsls	r3, r1, #3
 8009194:	4651      	mov	r1, sl
 8009196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800919a:	4651      	mov	r1, sl
 800919c:	00ca      	lsls	r2, r1, #3
 800919e:	4610      	mov	r0, r2
 80091a0:	4619      	mov	r1, r3
 80091a2:	4603      	mov	r3, r0
 80091a4:	4642      	mov	r2, r8
 80091a6:	189b      	adds	r3, r3, r2
 80091a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80091ac:	464b      	mov	r3, r9
 80091ae:	460a      	mov	r2, r1
 80091b0:	eb42 0303 	adc.w	r3, r2, r3
 80091b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80091b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80091c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80091c4:	f04f 0200 	mov.w	r2, #0
 80091c8:	f04f 0300 	mov.w	r3, #0
 80091cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80091d0:	4649      	mov	r1, r9
 80091d2:	008b      	lsls	r3, r1, #2
 80091d4:	4641      	mov	r1, r8
 80091d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091da:	4641      	mov	r1, r8
 80091dc:	008a      	lsls	r2, r1, #2
 80091de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80091e2:	f7f7 f85d 	bl	80002a0 <__aeabi_uldivmod>
 80091e6:	4602      	mov	r2, r0
 80091e8:	460b      	mov	r3, r1
 80091ea:	4b39      	ldr	r3, [pc, #228]	; (80092d0 <UART_SetConfig+0x4e4>)
 80091ec:	fba3 1302 	umull	r1, r3, r3, r2
 80091f0:	095b      	lsrs	r3, r3, #5
 80091f2:	2164      	movs	r1, #100	; 0x64
 80091f4:	fb01 f303 	mul.w	r3, r1, r3
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	011b      	lsls	r3, r3, #4
 80091fc:	3332      	adds	r3, #50	; 0x32
 80091fe:	4a34      	ldr	r2, [pc, #208]	; (80092d0 <UART_SetConfig+0x4e4>)
 8009200:	fba2 2303 	umull	r2, r3, r2, r3
 8009204:	095b      	lsrs	r3, r3, #5
 8009206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800920a:	441c      	add	r4, r3
 800920c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009210:	2200      	movs	r2, #0
 8009212:	673b      	str	r3, [r7, #112]	; 0x70
 8009214:	677a      	str	r2, [r7, #116]	; 0x74
 8009216:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800921a:	4642      	mov	r2, r8
 800921c:	464b      	mov	r3, r9
 800921e:	1891      	adds	r1, r2, r2
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	415b      	adcs	r3, r3
 8009224:	60fb      	str	r3, [r7, #12]
 8009226:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800922a:	4641      	mov	r1, r8
 800922c:	1851      	adds	r1, r2, r1
 800922e:	6039      	str	r1, [r7, #0]
 8009230:	4649      	mov	r1, r9
 8009232:	414b      	adcs	r3, r1
 8009234:	607b      	str	r3, [r7, #4]
 8009236:	f04f 0200 	mov.w	r2, #0
 800923a:	f04f 0300 	mov.w	r3, #0
 800923e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009242:	4659      	mov	r1, fp
 8009244:	00cb      	lsls	r3, r1, #3
 8009246:	4651      	mov	r1, sl
 8009248:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800924c:	4651      	mov	r1, sl
 800924e:	00ca      	lsls	r2, r1, #3
 8009250:	4610      	mov	r0, r2
 8009252:	4619      	mov	r1, r3
 8009254:	4603      	mov	r3, r0
 8009256:	4642      	mov	r2, r8
 8009258:	189b      	adds	r3, r3, r2
 800925a:	66bb      	str	r3, [r7, #104]	; 0x68
 800925c:	464b      	mov	r3, r9
 800925e:	460a      	mov	r2, r1
 8009260:	eb42 0303 	adc.w	r3, r2, r3
 8009264:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	663b      	str	r3, [r7, #96]	; 0x60
 8009270:	667a      	str	r2, [r7, #100]	; 0x64
 8009272:	f04f 0200 	mov.w	r2, #0
 8009276:	f04f 0300 	mov.w	r3, #0
 800927a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800927e:	4649      	mov	r1, r9
 8009280:	008b      	lsls	r3, r1, #2
 8009282:	4641      	mov	r1, r8
 8009284:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009288:	4641      	mov	r1, r8
 800928a:	008a      	lsls	r2, r1, #2
 800928c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009290:	f7f7 f806 	bl	80002a0 <__aeabi_uldivmod>
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	4b0d      	ldr	r3, [pc, #52]	; (80092d0 <UART_SetConfig+0x4e4>)
 800929a:	fba3 1302 	umull	r1, r3, r3, r2
 800929e:	095b      	lsrs	r3, r3, #5
 80092a0:	2164      	movs	r1, #100	; 0x64
 80092a2:	fb01 f303 	mul.w	r3, r1, r3
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	011b      	lsls	r3, r3, #4
 80092aa:	3332      	adds	r3, #50	; 0x32
 80092ac:	4a08      	ldr	r2, [pc, #32]	; (80092d0 <UART_SetConfig+0x4e4>)
 80092ae:	fba2 2303 	umull	r2, r3, r2, r3
 80092b2:	095b      	lsrs	r3, r3, #5
 80092b4:	f003 020f 	and.w	r2, r3, #15
 80092b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4422      	add	r2, r4
 80092c0:	609a      	str	r2, [r3, #8]
}
 80092c2:	bf00      	nop
 80092c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80092c8:	46bd      	mov	sp, r7
 80092ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092ce:	bf00      	nop
 80092d0:	51eb851f 	.word	0x51eb851f

080092d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092d4:	b084      	sub	sp, #16
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b084      	sub	sp, #16
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	f107 001c 	add.w	r0, r7, #28
 80092e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80092e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d122      	bne.n	8009332 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009316:	2b01      	cmp	r3, #1
 8009318:	d105      	bne.n	8009326 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f9c0 	bl	80096ac <USB_CoreReset>
 800932c:	4603      	mov	r3, r0
 800932e:	73fb      	strb	r3, [r7, #15]
 8009330:	e01a      	b.n	8009368 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f9b4 	bl	80096ac <USB_CoreReset>
 8009344:	4603      	mov	r3, r0
 8009346:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800934a:	2b00      	cmp	r3, #0
 800934c:	d106      	bne.n	800935c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009352:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	639a      	str	r2, [r3, #56]	; 0x38
 800935a:	e005      	b.n	8009368 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009360:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936a:	2b01      	cmp	r3, #1
 800936c:	d10b      	bne.n	8009386 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	f043 0206 	orr.w	r2, r3, #6
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	f043 0220 	orr.w	r2, r3, #32
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009386:	7bfb      	ldrb	r3, [r7, #15]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009392:	b004      	add	sp, #16
 8009394:	4770      	bx	lr

08009396 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009396:	b480      	push	{r7}
 8009398:	b083      	sub	sp, #12
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	f043 0201 	orr.w	r2, r3, #1
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	f023 0201 	bic.w	r2, r3, #1
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	370c      	adds	r7, #12
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	460b      	mov	r3, r1
 80093e4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80093e6:	2300      	movs	r3, #0
 80093e8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80093f6:	78fb      	ldrb	r3, [r7, #3]
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d115      	bne.n	8009428 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009408:	2001      	movs	r0, #1
 800940a:	f7fa f897 	bl	800353c <HAL_Delay>
      ms++;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	3301      	adds	r3, #1
 8009412:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f93a 	bl	800968e <USB_GetMode>
 800941a:	4603      	mov	r3, r0
 800941c:	2b01      	cmp	r3, #1
 800941e:	d01e      	beq.n	800945e <USB_SetCurrentMode+0x84>
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2b31      	cmp	r3, #49	; 0x31
 8009424:	d9f0      	bls.n	8009408 <USB_SetCurrentMode+0x2e>
 8009426:	e01a      	b.n	800945e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009428:	78fb      	ldrb	r3, [r7, #3]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d115      	bne.n	800945a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800943a:	2001      	movs	r0, #1
 800943c:	f7fa f87e 	bl	800353c <HAL_Delay>
      ms++;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	3301      	adds	r3, #1
 8009444:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 f921 	bl	800968e <USB_GetMode>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d005      	beq.n	800945e <USB_SetCurrentMode+0x84>
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2b31      	cmp	r3, #49	; 0x31
 8009456:	d9f0      	bls.n	800943a <USB_SetCurrentMode+0x60>
 8009458:	e001      	b.n	800945e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e005      	b.n	800946a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2b32      	cmp	r3, #50	; 0x32
 8009462:	d101      	bne.n	8009468 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	e000      	b.n	800946a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
	...

08009474 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800947e:	2300      	movs	r3, #0
 8009480:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3301      	adds	r3, #1
 8009486:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	4a13      	ldr	r2, [pc, #76]	; (80094d8 <USB_FlushTxFifo+0x64>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d901      	bls.n	8009494 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009490:	2303      	movs	r3, #3
 8009492:	e01b      	b.n	80094cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	2b00      	cmp	r3, #0
 800949a:	daf2      	bge.n	8009482 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800949c:	2300      	movs	r3, #0
 800949e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	019b      	lsls	r3, r3, #6
 80094a4:	f043 0220 	orr.w	r2, r3, #32
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	3301      	adds	r3, #1
 80094b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	4a08      	ldr	r2, [pc, #32]	; (80094d8 <USB_FlushTxFifo+0x64>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d901      	bls.n	80094be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80094ba:	2303      	movs	r3, #3
 80094bc:	e006      	b.n	80094cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	f003 0320 	and.w	r3, r3, #32
 80094c6:	2b20      	cmp	r3, #32
 80094c8:	d0f0      	beq.n	80094ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3714      	adds	r7, #20
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr
 80094d8:	00030d40 	.word	0x00030d40

080094dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094e4:	2300      	movs	r3, #0
 80094e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	3301      	adds	r3, #1
 80094ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	4a11      	ldr	r2, [pc, #68]	; (8009538 <USB_FlushRxFifo+0x5c>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d901      	bls.n	80094fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80094f6:	2303      	movs	r3, #3
 80094f8:	e018      	b.n	800952c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	daf2      	bge.n	80094e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009502:	2300      	movs	r3, #0
 8009504:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2210      	movs	r2, #16
 800950a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	3301      	adds	r3, #1
 8009510:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	4a08      	ldr	r2, [pc, #32]	; (8009538 <USB_FlushRxFifo+0x5c>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d901      	bls.n	800951e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800951a:	2303      	movs	r3, #3
 800951c:	e006      	b.n	800952c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	f003 0310 	and.w	r3, r3, #16
 8009526:	2b10      	cmp	r3, #16
 8009528:	d0f0      	beq.n	800950c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3714      	adds	r7, #20
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr
 8009538:	00030d40 	.word	0x00030d40

0800953c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800953c:	b480      	push	{r7}
 800953e:	b089      	sub	sp, #36	; 0x24
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	4611      	mov	r1, r2
 8009548:	461a      	mov	r2, r3
 800954a:	460b      	mov	r3, r1
 800954c:	71fb      	strb	r3, [r7, #7]
 800954e:	4613      	mov	r3, r2
 8009550:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800955a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800955e:	2b00      	cmp	r3, #0
 8009560:	d123      	bne.n	80095aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009562:	88bb      	ldrh	r3, [r7, #4]
 8009564:	3303      	adds	r3, #3
 8009566:	089b      	lsrs	r3, r3, #2
 8009568:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800956a:	2300      	movs	r3, #0
 800956c:	61bb      	str	r3, [r7, #24]
 800956e:	e018      	b.n	80095a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009570:	79fb      	ldrb	r3, [r7, #7]
 8009572:	031a      	lsls	r2, r3, #12
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	4413      	add	r3, r2
 8009578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800957c:	461a      	mov	r2, r3
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	3301      	adds	r3, #1
 8009588:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	3301      	adds	r3, #1
 800958e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	3301      	adds	r3, #1
 8009594:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	3301      	adds	r3, #1
 800959a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	3301      	adds	r3, #1
 80095a0:	61bb      	str	r3, [r7, #24]
 80095a2:	69ba      	ldr	r2, [r7, #24]
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d3e2      	bcc.n	8009570 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3724      	adds	r7, #36	; 0x24
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b08b      	sub	sp, #44	; 0x2c
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	4613      	mov	r3, r2
 80095c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80095ce:	88fb      	ldrh	r3, [r7, #6]
 80095d0:	089b      	lsrs	r3, r3, #2
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80095d6:	88fb      	ldrh	r3, [r7, #6]
 80095d8:	f003 0303 	and.w	r3, r3, #3
 80095dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80095de:	2300      	movs	r3, #0
 80095e0:	623b      	str	r3, [r7, #32]
 80095e2:	e014      	b.n	800960e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80095f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f2:	3301      	adds	r3, #1
 80095f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80095f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f8:	3301      	adds	r3, #1
 80095fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80095fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fe:	3301      	adds	r3, #1
 8009600:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009604:	3301      	adds	r3, #1
 8009606:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009608:	6a3b      	ldr	r3, [r7, #32]
 800960a:	3301      	adds	r3, #1
 800960c:	623b      	str	r3, [r7, #32]
 800960e:	6a3a      	ldr	r2, [r7, #32]
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	429a      	cmp	r2, r3
 8009614:	d3e6      	bcc.n	80095e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009616:	8bfb      	ldrh	r3, [r7, #30]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d01e      	beq.n	800965a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800961c:	2300      	movs	r3, #0
 800961e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009626:	461a      	mov	r2, r3
 8009628:	f107 0310 	add.w	r3, r7, #16
 800962c:	6812      	ldr	r2, [r2, #0]
 800962e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009630:	693a      	ldr	r2, [r7, #16]
 8009632:	6a3b      	ldr	r3, [r7, #32]
 8009634:	b2db      	uxtb	r3, r3
 8009636:	00db      	lsls	r3, r3, #3
 8009638:	fa22 f303 	lsr.w	r3, r2, r3
 800963c:	b2da      	uxtb	r2, r3
 800963e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009640:	701a      	strb	r2, [r3, #0]
      i++;
 8009642:	6a3b      	ldr	r3, [r7, #32]
 8009644:	3301      	adds	r3, #1
 8009646:	623b      	str	r3, [r7, #32]
      pDest++;
 8009648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964a:	3301      	adds	r3, #1
 800964c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800964e:	8bfb      	ldrh	r3, [r7, #30]
 8009650:	3b01      	subs	r3, #1
 8009652:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009654:	8bfb      	ldrh	r3, [r7, #30]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1ea      	bne.n	8009630 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800965c:	4618      	mov	r0, r3
 800965e:	372c      	adds	r7, #44	; 0x2c
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	695b      	ldr	r3, [r3, #20]
 8009674:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	4013      	ands	r3, r2
 800967e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009680:	68fb      	ldr	r3, [r7, #12]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3714      	adds	r7, #20
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr

0800968e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800968e:	b480      	push	{r7}
 8009690:	b083      	sub	sp, #12
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	f003 0301 	and.w	r3, r3, #1
}
 800969e:	4618      	mov	r0, r3
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
	...

080096ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80096b4:	2300      	movs	r3, #0
 80096b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	3301      	adds	r3, #1
 80096bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	4a13      	ldr	r2, [pc, #76]	; (8009710 <USB_CoreReset+0x64>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d901      	bls.n	80096ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80096c6:	2303      	movs	r3, #3
 80096c8:	e01b      	b.n	8009702 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	daf2      	bge.n	80096b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	f043 0201 	orr.w	r2, r3, #1
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	3301      	adds	r3, #1
 80096e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	4a09      	ldr	r2, [pc, #36]	; (8009710 <USB_CoreReset+0x64>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d901      	bls.n	80096f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80096f0:	2303      	movs	r3, #3
 80096f2:	e006      	b.n	8009702 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	f003 0301 	and.w	r3, r3, #1
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d0f0      	beq.n	80096e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	00030d40 	.word	0x00030d40

08009714 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009714:	b084      	sub	sp, #16
 8009716:	b580      	push	{r7, lr}
 8009718:	b086      	sub	sp, #24
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
 800971e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009722:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009734:	461a      	mov	r2, r3
 8009736:	2300      	movs	r3, #0
 8009738:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009756:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009766:	2b00      	cmp	r3, #0
 8009768:	d018      	beq.n	800979c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800976a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976c:	2b01      	cmp	r3, #1
 800976e:	d10a      	bne.n	8009786 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800977e:	f043 0304 	orr.w	r3, r3, #4
 8009782:	6013      	str	r3, [r2, #0]
 8009784:	e014      	b.n	80097b0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009794:	f023 0304 	bic.w	r3, r3, #4
 8009798:	6013      	str	r3, [r2, #0]
 800979a:	e009      	b.n	80097b0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097aa:	f023 0304 	bic.w	r3, r3, #4
 80097ae:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80097b0:	2110      	movs	r1, #16
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7ff fe5e 	bl	8009474 <USB_FlushTxFifo>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d001      	beq.n	80097c2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7ff fe8a 	bl	80094dc <USB_FlushRxFifo>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80097d2:	2300      	movs	r3, #0
 80097d4:	613b      	str	r3, [r7, #16]
 80097d6:	e015      	b.n	8009804 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	015a      	lsls	r2, r3, #5
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	4413      	add	r3, r2
 80097e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097e4:	461a      	mov	r2, r3
 80097e6:	f04f 33ff 	mov.w	r3, #4294967295
 80097ea:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	015a      	lsls	r2, r3, #5
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	4413      	add	r3, r2
 80097f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097f8:	461a      	mov	r2, r3
 80097fa:	2300      	movs	r3, #0
 80097fc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	3301      	adds	r3, #1
 8009802:	613b      	str	r3, [r7, #16]
 8009804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	429a      	cmp	r2, r3
 800980a:	d3e5      	bcc.n	80097d8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f04f 32ff 	mov.w	r2, #4294967295
 8009818:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800981e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00b      	beq.n	800983e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800982c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a13      	ldr	r2, [pc, #76]	; (8009880 <USB_HostInit+0x16c>)
 8009832:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4a13      	ldr	r2, [pc, #76]	; (8009884 <USB_HostInit+0x170>)
 8009838:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800983c:	e009      	b.n	8009852 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2280      	movs	r2, #128	; 0x80
 8009842:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4a10      	ldr	r2, [pc, #64]	; (8009888 <USB_HostInit+0x174>)
 8009848:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a0f      	ldr	r2, [pc, #60]	; (800988c <USB_HostInit+0x178>)
 800984e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009854:	2b00      	cmp	r3, #0
 8009856:	d105      	bne.n	8009864 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	699b      	ldr	r3, [r3, #24]
 800985c:	f043 0210 	orr.w	r2, r3, #16
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	699a      	ldr	r2, [r3, #24]
 8009868:	4b09      	ldr	r3, [pc, #36]	; (8009890 <USB_HostInit+0x17c>)
 800986a:	4313      	orrs	r3, r2
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009870:	7dfb      	ldrb	r3, [r7, #23]
}
 8009872:	4618      	mov	r0, r3
 8009874:	3718      	adds	r7, #24
 8009876:	46bd      	mov	sp, r7
 8009878:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800987c:	b004      	add	sp, #16
 800987e:	4770      	bx	lr
 8009880:	01000200 	.word	0x01000200
 8009884:	00e00300 	.word	0x00e00300
 8009888:	00600080 	.word	0x00600080
 800988c:	004000e0 	.word	0x004000e0
 8009890:	a3200008 	.word	0xa3200008

08009894 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	460b      	mov	r3, r1
 800989e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80098b2:	f023 0303 	bic.w	r3, r3, #3
 80098b6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	78fb      	ldrb	r3, [r7, #3]
 80098c2:	f003 0303 	and.w	r3, r3, #3
 80098c6:	68f9      	ldr	r1, [r7, #12]
 80098c8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80098cc:	4313      	orrs	r3, r2
 80098ce:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80098d0:	78fb      	ldrb	r3, [r7, #3]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d107      	bne.n	80098e6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098dc:	461a      	mov	r2, r3
 80098de:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80098e2:	6053      	str	r3, [r2, #4]
 80098e4:	e009      	b.n	80098fa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80098e6:	78fb      	ldrb	r3, [r7, #3]
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	d106      	bne.n	80098fa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098f2:	461a      	mov	r2, r3
 80098f4:	f241 7370 	movw	r3, #6000	; 0x1770
 80098f8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80098fa:	2300      	movs	r3, #0
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3714      	adds	r7, #20
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009914:	2300      	movs	r3, #0
 8009916:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009928:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009936:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009938:	2064      	movs	r0, #100	; 0x64
 800993a:	f7f9 fdff 	bl	800353c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009946:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800994a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800994c:	200a      	movs	r0, #10
 800994e:	f7f9 fdf5 	bl	800353c <HAL_Delay>

  return HAL_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3710      	adds	r7, #16
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800995c:	b480      	push	{r7}
 800995e:	b085      	sub	sp, #20
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	460b      	mov	r3, r1
 8009966:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800996c:	2300      	movs	r3, #0
 800996e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009980:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009988:	2b00      	cmp	r3, #0
 800998a:	d109      	bne.n	80099a0 <USB_DriveVbus+0x44>
 800998c:	78fb      	ldrb	r3, [r7, #3]
 800998e:	2b01      	cmp	r3, #1
 8009990:	d106      	bne.n	80099a0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800999a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800999e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099aa:	d109      	bne.n	80099c0 <USB_DriveVbus+0x64>
 80099ac:	78fb      	ldrb	r3, [r7, #3]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d106      	bne.n	80099c0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80099ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099be:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80099c0:	2300      	movs	r3, #0
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3714      	adds	r7, #20
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr

080099ce <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80099ce:	b480      	push	{r7}
 80099d0:	b085      	sub	sp, #20
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80099da:	2300      	movs	r3, #0
 80099dc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	0c5b      	lsrs	r3, r3, #17
 80099ec:	f003 0303 	and.w	r3, r3, #3
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3714      	adds	r7, #20
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	b29b      	uxth	r3, r3
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3714      	adds	r7, #20
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
	...

08009a20 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b088      	sub	sp, #32
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	4608      	mov	r0, r1
 8009a2a:	4611      	mov	r1, r2
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	4603      	mov	r3, r0
 8009a30:	70fb      	strb	r3, [r7, #3]
 8009a32:	460b      	mov	r3, r1
 8009a34:	70bb      	strb	r3, [r7, #2]
 8009a36:	4613      	mov	r3, r2
 8009a38:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009a42:	78fb      	ldrb	r3, [r7, #3]
 8009a44:	015a      	lsls	r2, r3, #5
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	4413      	add	r3, r2
 8009a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a4e:	461a      	mov	r2, r3
 8009a50:	f04f 33ff 	mov.w	r3, #4294967295
 8009a54:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009a56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009a5a:	2b03      	cmp	r3, #3
 8009a5c:	d87e      	bhi.n	8009b5c <USB_HC_Init+0x13c>
 8009a5e:	a201      	add	r2, pc, #4	; (adr r2, 8009a64 <USB_HC_Init+0x44>)
 8009a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a64:	08009a75 	.word	0x08009a75
 8009a68:	08009b1f 	.word	0x08009b1f
 8009a6c:	08009a75 	.word	0x08009a75
 8009a70:	08009ae1 	.word	0x08009ae1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009a74:	78fb      	ldrb	r3, [r7, #3]
 8009a76:	015a      	lsls	r2, r3, #5
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a80:	461a      	mov	r2, r3
 8009a82:	f240 439d 	movw	r3, #1181	; 0x49d
 8009a86:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009a88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	da10      	bge.n	8009ab2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009a90:	78fb      	ldrb	r3, [r7, #3]
 8009a92:	015a      	lsls	r2, r3, #5
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	4413      	add	r3, r2
 8009a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	78fa      	ldrb	r2, [r7, #3]
 8009aa0:	0151      	lsls	r1, r2, #5
 8009aa2:	693a      	ldr	r2, [r7, #16]
 8009aa4:	440a      	add	r2, r1
 8009aa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009aae:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009ab0:	e057      	b.n	8009b62 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d051      	beq.n	8009b62 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009abe:	78fb      	ldrb	r3, [r7, #3]
 8009ac0:	015a      	lsls	r2, r3, #5
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	78fa      	ldrb	r2, [r7, #3]
 8009ace:	0151      	lsls	r1, r2, #5
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	440a      	add	r2, r1
 8009ad4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ad8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009adc:	60d3      	str	r3, [r2, #12]
      break;
 8009ade:	e040      	b.n	8009b62 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009ae0:	78fb      	ldrb	r3, [r7, #3]
 8009ae2:	015a      	lsls	r2, r3, #5
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aec:	461a      	mov	r2, r3
 8009aee:	f240 639d 	movw	r3, #1693	; 0x69d
 8009af2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009af4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	da34      	bge.n	8009b66 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009afc:	78fb      	ldrb	r3, [r7, #3]
 8009afe:	015a      	lsls	r2, r3, #5
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	4413      	add	r3, r2
 8009b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	78fa      	ldrb	r2, [r7, #3]
 8009b0c:	0151      	lsls	r1, r2, #5
 8009b0e:	693a      	ldr	r2, [r7, #16]
 8009b10:	440a      	add	r2, r1
 8009b12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b1a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009b1c:	e023      	b.n	8009b66 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009b1e:	78fb      	ldrb	r3, [r7, #3]
 8009b20:	015a      	lsls	r2, r3, #5
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	4413      	add	r3, r2
 8009b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	f240 2325 	movw	r3, #549	; 0x225
 8009b30:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009b32:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	da17      	bge.n	8009b6a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009b3a:	78fb      	ldrb	r3, [r7, #3]
 8009b3c:	015a      	lsls	r2, r3, #5
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	4413      	add	r3, r2
 8009b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	78fa      	ldrb	r2, [r7, #3]
 8009b4a:	0151      	lsls	r1, r2, #5
 8009b4c:	693a      	ldr	r2, [r7, #16]
 8009b4e:	440a      	add	r2, r1
 8009b50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b54:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009b58:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009b5a:	e006      	b.n	8009b6a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	77fb      	strb	r3, [r7, #31]
      break;
 8009b60:	e004      	b.n	8009b6c <USB_HC_Init+0x14c>
      break;
 8009b62:	bf00      	nop
 8009b64:	e002      	b.n	8009b6c <USB_HC_Init+0x14c>
      break;
 8009b66:	bf00      	nop
 8009b68:	e000      	b.n	8009b6c <USB_HC_Init+0x14c>
      break;
 8009b6a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009b6c:	78fb      	ldrb	r3, [r7, #3]
 8009b6e:	015a      	lsls	r2, r3, #5
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	4413      	add	r3, r2
 8009b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	78fa      	ldrb	r2, [r7, #3]
 8009b7c:	0151      	lsls	r1, r2, #5
 8009b7e:	693a      	ldr	r2, [r7, #16]
 8009b80:	440a      	add	r2, r1
 8009b82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b86:	f043 0302 	orr.w	r3, r3, #2
 8009b8a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b92:	699a      	ldr	r2, [r3, #24]
 8009b94:	78fb      	ldrb	r3, [r7, #3]
 8009b96:	f003 030f 	and.w	r3, r3, #15
 8009b9a:	2101      	movs	r1, #1
 8009b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8009ba0:	6939      	ldr	r1, [r7, #16]
 8009ba2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	699b      	ldr	r3, [r3, #24]
 8009bae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009bb6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	da03      	bge.n	8009bc6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bc2:	61bb      	str	r3, [r7, #24]
 8009bc4:	e001      	b.n	8009bca <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f7ff feff 	bl	80099ce <USB_GetHostSpeed>
 8009bd0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009bd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	d106      	bne.n	8009be8 <USB_HC_Init+0x1c8>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d003      	beq.n	8009be8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009be0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009be4:	617b      	str	r3, [r7, #20]
 8009be6:	e001      	b.n	8009bec <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009be8:	2300      	movs	r3, #0
 8009bea:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009bec:	787b      	ldrb	r3, [r7, #1]
 8009bee:	059b      	lsls	r3, r3, #22
 8009bf0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009bf4:	78bb      	ldrb	r3, [r7, #2]
 8009bf6:	02db      	lsls	r3, r3, #11
 8009bf8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009bfc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009bfe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009c02:	049b      	lsls	r3, r3, #18
 8009c04:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009c08:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009c0a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009c0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009c10:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c16:	78fb      	ldrb	r3, [r7, #3]
 8009c18:	0159      	lsls	r1, r3, #5
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	440b      	add	r3, r1
 8009c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c22:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c28:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009c2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009c2e:	2b03      	cmp	r3, #3
 8009c30:	d003      	beq.n	8009c3a <USB_HC_Init+0x21a>
 8009c32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d10f      	bne.n	8009c5a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009c3a:	78fb      	ldrb	r3, [r7, #3]
 8009c3c:	015a      	lsls	r2, r3, #5
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	4413      	add	r3, r2
 8009c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	78fa      	ldrb	r2, [r7, #3]
 8009c4a:	0151      	lsls	r1, r2, #5
 8009c4c:	693a      	ldr	r2, [r7, #16]
 8009c4e:	440a      	add	r2, r1
 8009c50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c58:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009c5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3720      	adds	r7, #32
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b08c      	sub	sp, #48	; 0x30
 8009c68:	af02      	add	r7, sp, #8
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	785b      	ldrb	r3, [r3, #1]
 8009c7a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c80:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d02d      	beq.n	8009cea <USB_HC_StartXfer+0x86>
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	791b      	ldrb	r3, [r3, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d129      	bne.n	8009cea <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009c96:	79fb      	ldrb	r3, [r7, #7]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d117      	bne.n	8009ccc <USB_HC_StartXfer+0x68>
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	79db      	ldrb	r3, [r3, #7]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d003      	beq.n	8009cac <USB_HC_StartXfer+0x48>
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	79db      	ldrb	r3, [r3, #7]
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	d10f      	bne.n	8009ccc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	015a      	lsls	r2, r3, #5
 8009cb0:	6a3b      	ldr	r3, [r7, #32]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	69fa      	ldr	r2, [r7, #28]
 8009cbc:	0151      	lsls	r1, r2, #5
 8009cbe:	6a3a      	ldr	r2, [r7, #32]
 8009cc0:	440a      	add	r2, r1
 8009cc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cca:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009ccc:	79fb      	ldrb	r3, [r7, #7]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d10b      	bne.n	8009cea <USB_HC_StartXfer+0x86>
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	795b      	ldrb	r3, [r3, #5]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d107      	bne.n	8009cea <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	785b      	ldrb	r3, [r3, #1]
 8009cde:	4619      	mov	r1, r3
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 fa0f 	bl	800a104 <USB_DoPing>
      return HAL_OK;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	e0f8      	b.n	8009edc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	695b      	ldr	r3, [r3, #20]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d018      	beq.n	8009d24 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	695b      	ldr	r3, [r3, #20]
 8009cf6:	68ba      	ldr	r2, [r7, #8]
 8009cf8:	8912      	ldrh	r2, [r2, #8]
 8009cfa:	4413      	add	r3, r2
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	8912      	ldrh	r2, [r2, #8]
 8009d02:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d06:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009d08:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009d0a:	8b7b      	ldrh	r3, [r7, #26]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d90b      	bls.n	8009d28 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009d10:	8b7b      	ldrh	r3, [r7, #26]
 8009d12:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009d14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	8912      	ldrh	r2, [r2, #8]
 8009d1a:	fb03 f202 	mul.w	r2, r3, r2
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	611a      	str	r2, [r3, #16]
 8009d22:	e001      	b.n	8009d28 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009d24:	2301      	movs	r3, #1
 8009d26:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	78db      	ldrb	r3, [r3, #3]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d007      	beq.n	8009d40 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009d30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	8912      	ldrh	r2, [r2, #8]
 8009d36:	fb03 f202 	mul.w	r2, r3, r2
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	611a      	str	r2, [r3, #16]
 8009d3e:	e003      	b.n	8009d48 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	695a      	ldr	r2, [r3, #20]
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	691b      	ldr	r3, [r3, #16]
 8009d4c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009d50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d52:	04d9      	lsls	r1, r3, #19
 8009d54:	4b63      	ldr	r3, [pc, #396]	; (8009ee4 <USB_HC_StartXfer+0x280>)
 8009d56:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009d58:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	7a9b      	ldrb	r3, [r3, #10]
 8009d5e:	075b      	lsls	r3, r3, #29
 8009d60:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009d64:	69f9      	ldr	r1, [r7, #28]
 8009d66:	0148      	lsls	r0, r1, #5
 8009d68:	6a39      	ldr	r1, [r7, #32]
 8009d6a:	4401      	add	r1, r0
 8009d6c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009d70:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009d72:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009d74:	79fb      	ldrb	r3, [r7, #7]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d009      	beq.n	8009d8e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	68d9      	ldr	r1, [r3, #12]
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	015a      	lsls	r2, r3, #5
 8009d82:	6a3b      	ldr	r3, [r7, #32]
 8009d84:	4413      	add	r3, r2
 8009d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d8a:	460a      	mov	r2, r1
 8009d8c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009d8e:	6a3b      	ldr	r3, [r7, #32]
 8009d90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	f003 0301 	and.w	r3, r3, #1
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	bf0c      	ite	eq
 8009d9e:	2301      	moveq	r3, #1
 8009da0:	2300      	movne	r3, #0
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	015a      	lsls	r2, r3, #5
 8009daa:	6a3b      	ldr	r3, [r7, #32]
 8009dac:	4413      	add	r3, r2
 8009dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	69fa      	ldr	r2, [r7, #28]
 8009db6:	0151      	lsls	r1, r2, #5
 8009db8:	6a3a      	ldr	r2, [r7, #32]
 8009dba:	440a      	add	r2, r1
 8009dbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009dc0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009dc4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	015a      	lsls	r2, r3, #5
 8009dca:	6a3b      	ldr	r3, [r7, #32]
 8009dcc:	4413      	add	r3, r2
 8009dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	7e7b      	ldrb	r3, [r7, #25]
 8009dd6:	075b      	lsls	r3, r3, #29
 8009dd8:	69f9      	ldr	r1, [r7, #28]
 8009dda:	0148      	lsls	r0, r1, #5
 8009ddc:	6a39      	ldr	r1, [r7, #32]
 8009dde:	4401      	add	r1, r0
 8009de0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009de4:	4313      	orrs	r3, r2
 8009de6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	015a      	lsls	r2, r3, #5
 8009dec:	6a3b      	ldr	r3, [r7, #32]
 8009dee:	4413      	add	r3, r2
 8009df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009dfe:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	78db      	ldrb	r3, [r3, #3]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d004      	beq.n	8009e12 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e0e:	613b      	str	r3, [r7, #16]
 8009e10:	e003      	b.n	8009e1a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e18:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e20:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	015a      	lsls	r2, r3, #5
 8009e26:	6a3b      	ldr	r3, [r7, #32]
 8009e28:	4413      	add	r3, r2
 8009e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e2e:	461a      	mov	r2, r3
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009e34:	79fb      	ldrb	r3, [r7, #7]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d001      	beq.n	8009e3e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	e04e      	b.n	8009edc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	78db      	ldrb	r3, [r3, #3]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d149      	bne.n	8009eda <USB_HC_StartXfer+0x276>
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	695b      	ldr	r3, [r3, #20]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d045      	beq.n	8009eda <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	79db      	ldrb	r3, [r3, #7]
 8009e52:	2b03      	cmp	r3, #3
 8009e54:	d830      	bhi.n	8009eb8 <USB_HC_StartXfer+0x254>
 8009e56:	a201      	add	r2, pc, #4	; (adr r2, 8009e5c <USB_HC_StartXfer+0x1f8>)
 8009e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5c:	08009e6d 	.word	0x08009e6d
 8009e60:	08009e91 	.word	0x08009e91
 8009e64:	08009e6d 	.word	0x08009e6d
 8009e68:	08009e91 	.word	0x08009e91
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	695b      	ldr	r3, [r3, #20]
 8009e70:	3303      	adds	r3, #3
 8009e72:	089b      	lsrs	r3, r3, #2
 8009e74:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009e76:	8afa      	ldrh	r2, [r7, #22]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d91c      	bls.n	8009ebc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	f043 0220 	orr.w	r2, r3, #32
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	619a      	str	r2, [r3, #24]
        }
        break;
 8009e8e:	e015      	b.n	8009ebc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	695b      	ldr	r3, [r3, #20]
 8009e94:	3303      	adds	r3, #3
 8009e96:	089b      	lsrs	r3, r3, #2
 8009e98:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009e9a:	8afa      	ldrh	r2, [r7, #22]
 8009e9c:	6a3b      	ldr	r3, [r7, #32]
 8009e9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d90a      	bls.n	8009ec0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	699b      	ldr	r3, [r3, #24]
 8009eae:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	619a      	str	r2, [r3, #24]
        }
        break;
 8009eb6:	e003      	b.n	8009ec0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009eb8:	bf00      	nop
 8009eba:	e002      	b.n	8009ec2 <USB_HC_StartXfer+0x25e>
        break;
 8009ebc:	bf00      	nop
 8009ebe:	e000      	b.n	8009ec2 <USB_HC_StartXfer+0x25e>
        break;
 8009ec0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	68d9      	ldr	r1, [r3, #12]
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	785a      	ldrb	r2, [r3, #1]
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	695b      	ldr	r3, [r3, #20]
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	9000      	str	r0, [sp, #0]
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f7ff fb31 	bl	800953c <USB_WritePacket>
  }

  return HAL_OK;
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3728      	adds	r7, #40	; 0x28
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	1ff80000 	.word	0x1ff80000

08009ee8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009efa:	695b      	ldr	r3, [r3, #20]
 8009efc:	b29b      	uxth	r3, r3
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3714      	adds	r7, #20
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009f0a:	b480      	push	{r7}
 8009f0c:	b089      	sub	sp, #36	; 0x24
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
 8009f12:	460b      	mov	r3, r1
 8009f14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009f1a:	78fb      	ldrb	r3, [r7, #3]
 8009f1c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	015a      	lsls	r2, r3, #5
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	4413      	add	r3, r2
 8009f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	0c9b      	lsrs	r3, r3, #18
 8009f32:	f003 0303 	and.w	r3, r3, #3
 8009f36:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	015a      	lsls	r2, r3, #5
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	4413      	add	r3, r2
 8009f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	0fdb      	lsrs	r3, r3, #31
 8009f48:	f003 0301 	and.w	r3, r3, #1
 8009f4c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	f003 0320 	and.w	r3, r3, #32
 8009f56:	2b20      	cmp	r3, #32
 8009f58:	d104      	bne.n	8009f64 <USB_HC_Halt+0x5a>
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d101      	bne.n	8009f64 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	e0c8      	b.n	800a0f6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d002      	beq.n	8009f70 <USB_HC_Halt+0x66>
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	d163      	bne.n	800a038 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	015a      	lsls	r2, r3, #5
 8009f74:	69fb      	ldr	r3, [r7, #28]
 8009f76:	4413      	add	r3, r2
 8009f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	69ba      	ldr	r2, [r7, #24]
 8009f80:	0151      	lsls	r1, r2, #5
 8009f82:	69fa      	ldr	r2, [r7, #28]
 8009f84:	440a      	add	r2, r1
 8009f86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f8e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	f003 0320 	and.w	r3, r3, #32
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f040 80ab 	bne.w	800a0f4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d133      	bne.n	800a012 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	015a      	lsls	r2, r3, #5
 8009fae:	69fb      	ldr	r3, [r7, #28]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	69ba      	ldr	r2, [r7, #24]
 8009fba:	0151      	lsls	r1, r2, #5
 8009fbc:	69fa      	ldr	r2, [r7, #28]
 8009fbe:	440a      	add	r2, r1
 8009fc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fc8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	015a      	lsls	r2, r3, #5
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	69ba      	ldr	r2, [r7, #24]
 8009fda:	0151      	lsls	r1, r2, #5
 8009fdc:	69fa      	ldr	r2, [r7, #28]
 8009fde:	440a      	add	r2, r1
 8009fe0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fe4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009fe8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	3301      	adds	r3, #1
 8009fee:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ff6:	d81d      	bhi.n	800a034 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	015a      	lsls	r2, r3, #5
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	4413      	add	r3, r2
 800a000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a00a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a00e:	d0ec      	beq.n	8009fea <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a010:	e070      	b.n	800a0f4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	015a      	lsls	r2, r3, #5
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	4413      	add	r3, r2
 800a01a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	69ba      	ldr	r2, [r7, #24]
 800a022:	0151      	lsls	r1, r2, #5
 800a024:	69fa      	ldr	r2, [r7, #28]
 800a026:	440a      	add	r2, r1
 800a028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a02c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a030:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a032:	e05f      	b.n	800a0f4 <USB_HC_Halt+0x1ea>
            break;
 800a034:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a036:	e05d      	b.n	800a0f4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	015a      	lsls	r2, r3, #5
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	4413      	add	r3, r2
 800a040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	69ba      	ldr	r2, [r7, #24]
 800a048:	0151      	lsls	r1, r2, #5
 800a04a:	69fa      	ldr	r2, [r7, #28]
 800a04c:	440a      	add	r2, r1
 800a04e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a052:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a056:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a064:	2b00      	cmp	r3, #0
 800a066:	d133      	bne.n	800a0d0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	015a      	lsls	r2, r3, #5
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	4413      	add	r3, r2
 800a070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	69ba      	ldr	r2, [r7, #24]
 800a078:	0151      	lsls	r1, r2, #5
 800a07a:	69fa      	ldr	r2, [r7, #28]
 800a07c:	440a      	add	r2, r1
 800a07e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a082:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a086:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a088:	69bb      	ldr	r3, [r7, #24]
 800a08a:	015a      	lsls	r2, r3, #5
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	4413      	add	r3, r2
 800a090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	69ba      	ldr	r2, [r7, #24]
 800a098:	0151      	lsls	r1, r2, #5
 800a09a:	69fa      	ldr	r2, [r7, #28]
 800a09c:	440a      	add	r2, r1
 800a09e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0a6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0b4:	d81d      	bhi.n	800a0f2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	015a      	lsls	r2, r3, #5
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	4413      	add	r3, r2
 800a0be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0cc:	d0ec      	beq.n	800a0a8 <USB_HC_Halt+0x19e>
 800a0ce:	e011      	b.n	800a0f4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	015a      	lsls	r2, r3, #5
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	69ba      	ldr	r2, [r7, #24]
 800a0e0:	0151      	lsls	r1, r2, #5
 800a0e2:	69fa      	ldr	r2, [r7, #28]
 800a0e4:	440a      	add	r2, r1
 800a0e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0ee:	6013      	str	r3, [r2, #0]
 800a0f0:	e000      	b.n	800a0f4 <USB_HC_Halt+0x1ea>
          break;
 800a0f2:	bf00      	nop
    }
  }

  return HAL_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3724      	adds	r7, #36	; 0x24
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
	...

0800a104 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a104:	b480      	push	{r7}
 800a106:	b087      	sub	sp, #28
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	460b      	mov	r3, r1
 800a10e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a114:	78fb      	ldrb	r3, [r7, #3]
 800a116:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a118:	2301      	movs	r3, #1
 800a11a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	04da      	lsls	r2, r3, #19
 800a120:	4b15      	ldr	r3, [pc, #84]	; (800a178 <USB_DoPing+0x74>)
 800a122:	4013      	ands	r3, r2
 800a124:	693a      	ldr	r2, [r7, #16]
 800a126:	0151      	lsls	r1, r2, #5
 800a128:	697a      	ldr	r2, [r7, #20]
 800a12a:	440a      	add	r2, r1
 800a12c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a130:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a134:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	015a      	lsls	r2, r3, #5
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	4413      	add	r3, r2
 800a13e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a14c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a154:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	015a      	lsls	r2, r3, #5
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	4413      	add	r3, r2
 800a15e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a162:	461a      	mov	r2, r3
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	371c      	adds	r7, #28
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	1ff80000 	.word	0x1ff80000

0800a17c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b088      	sub	sp, #32
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a184:	2300      	movs	r3, #0
 800a186:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a18c:	2300      	movs	r3, #0
 800a18e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7ff f911 	bl	80093b8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a196:	2110      	movs	r1, #16
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f7ff f96b 	bl	8009474 <USB_FlushTxFifo>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d001      	beq.n	800a1a8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f7ff f997 	bl	80094dc <USB_FlushRxFifo>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d001      	beq.n	800a1b8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	61bb      	str	r3, [r7, #24]
 800a1bc:	e01f      	b.n	800a1fe <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	015a      	lsls	r2, r3, #5
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	4413      	add	r3, r2
 800a1c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a1d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a1e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	015a      	lsls	r2, r3, #5
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a1f8:	69bb      	ldr	r3, [r7, #24]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	61bb      	str	r3, [r7, #24]
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	2b0f      	cmp	r3, #15
 800a202:	d9dc      	bls.n	800a1be <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a204:	2300      	movs	r3, #0
 800a206:	61bb      	str	r3, [r7, #24]
 800a208:	e034      	b.n	800a274 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	015a      	lsls	r2, r3, #5
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	4413      	add	r3, r2
 800a212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a220:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a228:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a230:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	015a      	lsls	r2, r3, #5
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	4413      	add	r3, r2
 800a23a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a23e:	461a      	mov	r2, r3
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	3301      	adds	r3, #1
 800a248:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a250:	d80c      	bhi.n	800a26c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	015a      	lsls	r2, r3, #5
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	4413      	add	r3, r2
 800a25a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a264:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a268:	d0ec      	beq.n	800a244 <USB_StopHost+0xc8>
 800a26a:	e000      	b.n	800a26e <USB_StopHost+0xf2>
        break;
 800a26c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a26e:	69bb      	ldr	r3, [r7, #24]
 800a270:	3301      	adds	r3, #1
 800a272:	61bb      	str	r3, [r7, #24]
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	2b0f      	cmp	r3, #15
 800a278:	d9c7      	bls.n	800a20a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a280:	461a      	mov	r2, r3
 800a282:	f04f 33ff 	mov.w	r3, #4294967295
 800a286:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f04f 32ff 	mov.w	r2, #4294967295
 800a28e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f7ff f880 	bl	8009396 <USB_EnableGlobalInt>

  return ret;
 800a296:	7ffb      	ldrb	r3, [r7, #31]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3720      	adds	r7, #32
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  //retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
	FATFS_LinkDriver(&SD0_Driver, SD0Path);
 800a2a4:	4908      	ldr	r1, [pc, #32]	; (800a2c8 <MX_FATFS_Init+0x28>)
 800a2a6:	4809      	ldr	r0, [pc, #36]	; (800a2cc <MX_FATFS_Init+0x2c>)
 800a2a8:	f007 fc22 	bl	8011af0 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD1_Driver, SD1Path);
 800a2ac:	4908      	ldr	r1, [pc, #32]	; (800a2d0 <MX_FATFS_Init+0x30>)
 800a2ae:	4809      	ldr	r0, [pc, #36]	; (800a2d4 <MX_FATFS_Init+0x34>)
 800a2b0:	f007 fc1e 	bl	8011af0 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD2_Driver, SD2Path);
 800a2b4:	4908      	ldr	r1, [pc, #32]	; (800a2d8 <MX_FATFS_Init+0x38>)
 800a2b6:	4809      	ldr	r0, [pc, #36]	; (800a2dc <MX_FATFS_Init+0x3c>)
 800a2b8:	f007 fc1a 	bl	8011af0 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD3_Driver, SD3Path);
 800a2bc:	4908      	ldr	r1, [pc, #32]	; (800a2e0 <MX_FATFS_Init+0x40>)
 800a2be:	4809      	ldr	r0, [pc, #36]	; (800a2e4 <MX_FATFS_Init+0x44>)
 800a2c0:	f007 fc16 	bl	8011af0 <FATFS_LinkDriver>


  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a2c4:	bf00      	nop
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	20001e44 	.word	0x20001e44
 800a2cc:	20000240 	.word	0x20000240
 800a2d0:	20001e48 	.word	0x20001e48
 800a2d4:	20000254 	.word	0x20000254
 800a2d8:	20001e4c 	.word	0x20001e4c
 800a2dc:	20000268 	.word	0x20000268
 800a2e0:	20001e50 	.word	0x20001e50
 800a2e4:	2000027c 	.word	0x2000027c

0800a2e8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a2ec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <SD0_initialize>:
  * @brief  Initializes a Drive
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_initialize (BYTE pdrv)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	4603      	mov	r3, r0
 800a300:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 800a302:	2000      	movs	r0, #0
 800a304:	f7f8 fa64 	bl	80027d0 <sd_ss_set_active>
	return USER_initialize(pdrv);
 800a308:	79fb      	ldrb	r3, [r7, #7]
 800a30a:	4618      	mov	r0, r3
 800a30c:	f000 f838 	bl	800a380 <USER_initialize>
 800a310:	4603      	mov	r3, r0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <SD1_initialize>:
DSTATUS SD1_initialize (BYTE pdrv)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b082      	sub	sp, #8
 800a31e:	af00      	add	r7, sp, #0
 800a320:	4603      	mov	r3, r0
 800a322:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 800a324:	2001      	movs	r0, #1
 800a326:	f7f8 fa53 	bl	80027d0 <sd_ss_set_active>
	return USER_initialize(pdrv);
 800a32a:	79fb      	ldrb	r3, [r7, #7]
 800a32c:	4618      	mov	r0, r3
 800a32e:	f000 f827 	bl	800a380 <USER_initialize>
 800a332:	4603      	mov	r3, r0
}
 800a334:	4618      	mov	r0, r3
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <SD2_initialize>:
DSTATUS SD2_initialize (BYTE pdrv)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	4603      	mov	r3, r0
 800a344:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 800a346:	2002      	movs	r0, #2
 800a348:	f7f8 fa42 	bl	80027d0 <sd_ss_set_active>
	return USER_initialize(pdrv);
 800a34c:	79fb      	ldrb	r3, [r7, #7]
 800a34e:	4618      	mov	r0, r3
 800a350:	f000 f816 	bl	800a380 <USER_initialize>
 800a354:	4603      	mov	r3, r0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3708      	adds	r7, #8
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <SD3_initialize>:
DSTATUS SD3_initialize (BYTE pdrv)
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b082      	sub	sp, #8
 800a362:	af00      	add	r7, sp, #0
 800a364:	4603      	mov	r3, r0
 800a366:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 800a368:	2003      	movs	r0, #3
 800a36a:	f7f8 fa31 	bl	80027d0 <sd_ss_set_active>
	return USER_initialize(pdrv);
 800a36e:	79fb      	ldrb	r3, [r7, #7]
 800a370:	4618      	mov	r0, r3
 800a372:	f000 f805 	bl	800a380 <USER_initialize>
 800a376:	4603      	mov	r3, r0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <USER_initialize>:

DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	4603      	mov	r3, r0
 800a388:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//SD_PowerOn();
	SS_SD_SELECT();
 800a38a:	f7f8 fa3f 	bl	800280c <sd_ss_active_pin_down>
	if(sd_ini()==0) {Stat &= ~STA_NOINIT;} // STA_NOINIT
 800a38e:	f7f8 fabf 	bl	8002910 <sd_ini>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d107      	bne.n	800a3a8 <USER_initialize+0x28>
 800a398:	4b08      	ldr	r3, [pc, #32]	; (800a3bc <USER_initialize+0x3c>)
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	f023 0301 	bic.w	r3, r3, #1
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	4b05      	ldr	r3, [pc, #20]	; (800a3bc <USER_initialize+0x3c>)
 800a3a6:	701a      	strb	r2, [r3, #0]
	SS_SD_DESELECT();
 800a3a8:	f7f8 fa40 	bl	800282c <sd_ss_active_pin_up>
    return Stat;
 800a3ac:	4b03      	ldr	r3, [pc, #12]	; (800a3bc <USER_initialize+0x3c>)
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	2000023d 	.word	0x2000023d

0800a3c0 <SD0_status>:
  * @brief  Gets Disk Status
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_status (BYTE pdrv)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 800a3ca:	2000      	movs	r0, #0
 800a3cc:	f7f8 fa00 	bl	80027d0 <sd_ss_set_active>
	return USER_status(pdrv);
 800a3d0:	79fb      	ldrb	r3, [r7, #7]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f000 f838 	bl	800a448 <USER_status>
 800a3d8:	4603      	mov	r3, r0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3708      	adds	r7, #8
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <SD1_status>:
DSTATUS SD1_status (BYTE pdrv)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b082      	sub	sp, #8
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 800a3ec:	2001      	movs	r0, #1
 800a3ee:	f7f8 f9ef 	bl	80027d0 <sd_ss_set_active>
	return USER_status(pdrv);
 800a3f2:	79fb      	ldrb	r3, [r7, #7]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f000 f827 	bl	800a448 <USER_status>
 800a3fa:	4603      	mov	r3, r0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <SD2_status>:
DSTATUS SD2_status (BYTE pdrv)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	4603      	mov	r3, r0
 800a40c:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 800a40e:	2002      	movs	r0, #2
 800a410:	f7f8 f9de 	bl	80027d0 <sd_ss_set_active>
	return USER_status(pdrv);
 800a414:	79fb      	ldrb	r3, [r7, #7]
 800a416:	4618      	mov	r0, r3
 800a418:	f000 f816 	bl	800a448 <USER_status>
 800a41c:	4603      	mov	r3, r0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <SD3_status>:
DSTATUS SD3_status (BYTE pdrv)
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b082      	sub	sp, #8
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	4603      	mov	r3, r0
 800a42e:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 800a430:	2003      	movs	r0, #3
 800a432:	f7f8 f9cd 	bl	80027d0 <sd_ss_set_active>
	return USER_status(pdrv);
 800a436:	79fb      	ldrb	r3, [r7, #7]
 800a438:	4618      	mov	r0, r3
 800a43a:	f000 f805 	bl	800a448 <USER_status>
 800a43e:	4603      	mov	r3, r0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3708      	adds	r7, #8
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <USER_status>:

DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	4603      	mov	r3, r0
 800a450:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	SS_SD_SELECT();
 800a452:	f7f8 f9db 	bl	800280c <sd_ss_active_pin_down>
	if (pdrv) return STA_NOINIT;
 800a456:	79fb      	ldrb	r3, [r7, #7]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d001      	beq.n	800a460 <USER_status+0x18>
 800a45c:	2301      	movs	r3, #1
 800a45e:	e004      	b.n	800a46a <USER_status+0x22>
	SS_SD_DESELECT();
 800a460:	f7f8 f9e4 	bl	800282c <sd_ss_active_pin_up>
    return Stat;
 800a464:	4b03      	ldr	r3, [pc, #12]	; (800a474 <USER_status+0x2c>)
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3708      	adds	r7, #8
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	2000023d 	.word	0x2000023d

0800a478 <SD0_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DSTATUS SD0_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60b9      	str	r1, [r7, #8]
 800a480:	607a      	str	r2, [r7, #4]
 800a482:	603b      	str	r3, [r7, #0]
 800a484:	4603      	mov	r3, r0
 800a486:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 800a488:	2000      	movs	r0, #0
 800a48a:	f7f8 f9a1 	bl	80027d0 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800a48e:	7bf8      	ldrb	r0, [r7, #15]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	68b9      	ldr	r1, [r7, #8]
 800a496:	f000 f847 	bl	800a528 <USER_read>
 800a49a:	4603      	mov	r3, r0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <SD1_read>:
DSTATUS SD1_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60b9      	str	r1, [r7, #8]
 800a4ac:	607a      	str	r2, [r7, #4]
 800a4ae:	603b      	str	r3, [r7, #0]
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 800a4b4:	2001      	movs	r0, #1
 800a4b6:	f7f8 f98b 	bl	80027d0 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800a4ba:	7bf8      	ldrb	r0, [r7, #15]
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	68b9      	ldr	r1, [r7, #8]
 800a4c2:	f000 f831 	bl	800a528 <USER_read>
 800a4c6:	4603      	mov	r3, r0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3710      	adds	r7, #16
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <SD2_read>:
DSTATUS SD2_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60b9      	str	r1, [r7, #8]
 800a4d8:	607a      	str	r2, [r7, #4]
 800a4da:	603b      	str	r3, [r7, #0]
 800a4dc:	4603      	mov	r3, r0
 800a4de:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 800a4e0:	2002      	movs	r0, #2
 800a4e2:	f7f8 f975 	bl	80027d0 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800a4e6:	7bf8      	ldrb	r0, [r7, #15]
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	68b9      	ldr	r1, [r7, #8]
 800a4ee:	f000 f81b 	bl	800a528 <USER_read>
 800a4f2:	4603      	mov	r3, r0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <SD3_read>:
DSTATUS SD3_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	60b9      	str	r1, [r7, #8]
 800a504:	607a      	str	r2, [r7, #4]
 800a506:	603b      	str	r3, [r7, #0]
 800a508:	4603      	mov	r3, r0
 800a50a:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 800a50c:	2003      	movs	r0, #3
 800a50e:	f7f8 f95f 	bl	80027d0 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800a512:	7bf8      	ldrb	r0, [r7, #15]
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	68b9      	ldr	r1, [r7, #8]
 800a51a:	f000 f805 	bl	800a528 <USER_read>
 800a51e:	4603      	mov	r3, r0
}
 800a520:	4618      	mov	r0, r3
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60b9      	str	r1, [r7, #8]
 800a530:	607a      	str	r2, [r7, #4]
 800a532:	603b      	str	r3, [r7, #0]
 800a534:	4603      	mov	r3, r0
 800a536:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	SS_SD_SELECT();
 800a538:	f7f8 f968 	bl	800280c <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 800a53c:	7bfb      	ldrb	r3, [r7, #15]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d102      	bne.n	800a548 <USER_read+0x20>
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d101      	bne.n	800a54c <USER_read+0x24>
 800a548:	2304      	movs	r3, #4
 800a54a:	e043      	b.n	800a5d4 <USER_read+0xac>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a54c:	4b23      	ldr	r3, [pc, #140]	; (800a5dc <USER_read+0xb4>)
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	b2db      	uxtb	r3, r3
 800a552:	f003 0301 	and.w	r3, r3, #1
 800a556:	2b00      	cmp	r3, #0
 800a558:	d001      	beq.n	800a55e <USER_read+0x36>
 800a55a:	2303      	movs	r3, #3
 800a55c:	e03a      	b.n	800a5d4 <USER_read+0xac>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800a55e:	4b20      	ldr	r3, [pc, #128]	; (800a5e0 <USER_read+0xb8>)
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	b2db      	uxtb	r3, r3
 800a564:	f003 0304 	and.w	r3, r3, #4
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d102      	bne.n	800a572 <USER_read+0x4a>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	025b      	lsls	r3, r3, #9
 800a570:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	2b01      	cmp	r3, #1
 800a576:	d106      	bne.n	800a586 <USER_read+0x5e>
	{
	  SD_Read_Block(buff,sector); //Ð¡Ñ‡Ð¸Ñ‚Ð°ÐµÐ¼ Ð±Ð»Ð¾Ðº Ð² Ð±ÑƒÑ„ÐµÑ€
 800a578:	6879      	ldr	r1, [r7, #4]
 800a57a:	68b8      	ldr	r0, [r7, #8]
 800a57c:	f7f8 fb01 	bl	8002b82 <SD_Read_Block>
	  count = 0;
 800a580:	2300      	movs	r3, #0
 800a582:	603b      	str	r3, [r7, #0]
 800a584:	e01c      	b.n	800a5c0 <USER_read+0x98>
	}
	else /* Multiple block read */
	{
		do{
			SD_Read_Block((BYTE*)buff,sector);
 800a586:	6879      	ldr	r1, [r7, #4]
 800a588:	68b8      	ldr	r0, [r7, #8]
 800a58a:	f7f8 fafa 	bl	8002b82 <SD_Read_Block>
			if (!(sdinfo.type & 4)){
 800a58e:	4b14      	ldr	r3, [pc, #80]	; (800a5e0 <USER_read+0xb8>)
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	b2db      	uxtb	r3, r3
 800a594:	f003 0304 	and.w	r3, r3, #4
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d104      	bne.n	800a5a6 <USER_read+0x7e>
				sector+=512;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a5a2:	607b      	str	r3, [r7, #4]
 800a5a4:	e002      	b.n	800a5ac <USER_read+0x84>
			}
			else sector++;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	607b      	str	r3, [r7, #4]
			buff+=512;
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a5b2:	60bb      	str	r3, [r7, #8]
			count--;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	603b      	str	r3, [r7, #0]
		}while(count>0);
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d1e2      	bne.n	800a586 <USER_read+0x5e>
	}
	SPI_Release();
 800a5c0:	f7f8 fad8 	bl	8002b74 <SPI_Release>
	SS_SD_DESELECT();
 800a5c4:	f7f8 f932 	bl	800282c <sd_ss_active_pin_up>
	return count ? RES_ERROR : RES_OK;
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	bf14      	ite	ne
 800a5ce:	2301      	movne	r3, #1
 800a5d0:	2300      	moveq	r3, #0
 800a5d2:	b2db      	uxtb	r3, r3
    return RES_OK;
  /* USER CODE END READ */
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3710      	adds	r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	2000023d 	.word	0x2000023d
 800a5e0:	20001ba8 	.word	0x20001ba8

0800a5e4 <SD0_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DSTATUS SD0_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60b9      	str	r1, [r7, #8]
 800a5ec:	607a      	str	r2, [r7, #4]
 800a5ee:	603b      	str	r3, [r7, #0]
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	f7f8 f8eb 	bl	80027d0 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 800a5fa:	7bf8      	ldrb	r0, [r7, #15]
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	68b9      	ldr	r1, [r7, #8]
 800a602:	f000 f847 	bl	800a694 <USER_write>
 800a606:	4603      	mov	r3, r0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <SD1_write>:
DSTATUS SD1_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	60b9      	str	r1, [r7, #8]
 800a618:	607a      	str	r2, [r7, #4]
 800a61a:	603b      	str	r3, [r7, #0]
 800a61c:	4603      	mov	r3, r0
 800a61e:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 800a620:	2001      	movs	r0, #1
 800a622:	f7f8 f8d5 	bl	80027d0 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 800a626:	7bf8      	ldrb	r0, [r7, #15]
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	68b9      	ldr	r1, [r7, #8]
 800a62e:	f000 f831 	bl	800a694 <USER_write>
 800a632:	4603      	mov	r3, r0
}
 800a634:	4618      	mov	r0, r3
 800a636:	3710      	adds	r7, #16
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <SD2_write>:
DSTATUS SD2_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	60b9      	str	r1, [r7, #8]
 800a644:	607a      	str	r2, [r7, #4]
 800a646:	603b      	str	r3, [r7, #0]
 800a648:	4603      	mov	r3, r0
 800a64a:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 800a64c:	2002      	movs	r0, #2
 800a64e:	f7f8 f8bf 	bl	80027d0 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 800a652:	7bf8      	ldrb	r0, [r7, #15]
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	68b9      	ldr	r1, [r7, #8]
 800a65a:	f000 f81b 	bl	800a694 <USER_write>
 800a65e:	4603      	mov	r3, r0
}
 800a660:	4618      	mov	r0, r3
 800a662:	3710      	adds	r7, #16
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <SD3_write>:
DSTATUS SD3_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60b9      	str	r1, [r7, #8]
 800a670:	607a      	str	r2, [r7, #4]
 800a672:	603b      	str	r3, [r7, #0]
 800a674:	4603      	mov	r3, r0
 800a676:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 800a678:	2003      	movs	r0, #3
 800a67a:	f7f8 f8a9 	bl	80027d0 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 800a67e:	7bf8      	ldrb	r0, [r7, #15]
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	68b9      	ldr	r1, [r7, #8]
 800a686:	f000 f805 	bl	800a694 <USER_write>
 800a68a:	4603      	mov	r3, r0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b086      	sub	sp, #24
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60b9      	str	r1, [r7, #8]
 800a69c:	607a      	str	r2, [r7, #4]
 800a69e:	603b      	str	r3, [r7, #0]
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	uint8_t res;
	SS_SD_SELECT();
 800a6a4:	f7f8 f8b2 	bl	800280c <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 800a6a8:	7bfb      	ldrb	r3, [r7, #15]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d102      	bne.n	800a6b4 <USER_write+0x20>
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d101      	bne.n	800a6b8 <USER_write+0x24>
 800a6b4:	2304      	movs	r3, #4
 800a6b6:	e02c      	b.n	800a712 <USER_write+0x7e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a6b8:	4b18      	ldr	r3, [pc, #96]	; (800a71c <USER_write+0x88>)
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	f003 0301 	and.w	r3, r3, #1
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d001      	beq.n	800a6ca <USER_write+0x36>
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	e023      	b.n	800a712 <USER_write+0x7e>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800a6ca:	4b14      	ldr	r3, [pc, #80]	; (800a71c <USER_write+0x88>)
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	f003 0304 	and.w	r3, r3, #4
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d001      	beq.n	800a6dc <USER_write+0x48>
 800a6d8:	2302      	movs	r3, #2
 800a6da:	e01a      	b.n	800a712 <USER_write+0x7e>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800a6dc:	4b10      	ldr	r3, [pc, #64]	; (800a720 <USER_write+0x8c>)
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	f003 0304 	and.w	r3, r3, #4
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d102      	bne.n	800a6f0 <USER_write+0x5c>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	025b      	lsls	r3, r3, #9
 800a6ee:	607b      	str	r3, [r7, #4]
  	res=SD_Write_Blocks((BYTE*)buff,sector,count);
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	6879      	ldr	r1, [r7, #4]
 800a6f8:	68b8      	ldr	r0, [r7, #8]
 800a6fa:	f7f8 fa87 	bl	8002c0c <SD_Write_Blocks>
 800a6fe:	4603      	mov	r3, r0
 800a700:	75fb      	strb	r3, [r7, #23]
	SS_SD_DESELECT();
 800a702:	f7f8 f893 	bl	800282c <sd_ss_active_pin_up>

	return res ? RES_ERROR : RES_OK;
 800a706:	7dfb      	ldrb	r3, [r7, #23]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	bf14      	ite	ne
 800a70c:	2301      	movne	r3, #1
 800a70e:	2300      	moveq	r3, #0
 800a710:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800a712:	4618      	mov	r0, r3
 800a714:	3718      	adds	r7, #24
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	2000023d 	.word	0x2000023d
 800a720:	20001ba8 	.word	0x20001ba8

0800a724 <SD0_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DSTATUS SD0_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	4603      	mov	r3, r0
 800a72c:	603a      	str	r2, [r7, #0]
 800a72e:	71fb      	strb	r3, [r7, #7]
 800a730:	460b      	mov	r3, r1
 800a732:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(0);
 800a734:	2000      	movs	r0, #0
 800a736:	f7f8 f84b 	bl	80027d0 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800a73a:	79b9      	ldrb	r1, [r7, #6]
 800a73c:	79fb      	ldrb	r3, [r7, #7]
 800a73e:	683a      	ldr	r2, [r7, #0]
 800a740:	4618      	mov	r0, r3
 800a742:	f000 f847 	bl	800a7d4 <USER_ioctl>
 800a746:	4603      	mov	r3, r0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <SD1_ioctl>:
DSTATUS SD1_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	4603      	mov	r3, r0
 800a758:	603a      	str	r2, [r7, #0]
 800a75a:	71fb      	strb	r3, [r7, #7]
 800a75c:	460b      	mov	r3, r1
 800a75e:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(1);
 800a760:	2001      	movs	r0, #1
 800a762:	f7f8 f835 	bl	80027d0 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800a766:	79b9      	ldrb	r1, [r7, #6]
 800a768:	79fb      	ldrb	r3, [r7, #7]
 800a76a:	683a      	ldr	r2, [r7, #0]
 800a76c:	4618      	mov	r0, r3
 800a76e:	f000 f831 	bl	800a7d4 <USER_ioctl>
 800a772:	4603      	mov	r3, r0
}
 800a774:	4618      	mov	r0, r3
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <SD2_ioctl>:
DSTATUS SD2_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	4603      	mov	r3, r0
 800a784:	603a      	str	r2, [r7, #0]
 800a786:	71fb      	strb	r3, [r7, #7]
 800a788:	460b      	mov	r3, r1
 800a78a:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(2);
 800a78c:	2002      	movs	r0, #2
 800a78e:	f7f8 f81f 	bl	80027d0 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800a792:	79b9      	ldrb	r1, [r7, #6]
 800a794:	79fb      	ldrb	r3, [r7, #7]
 800a796:	683a      	ldr	r2, [r7, #0]
 800a798:	4618      	mov	r0, r3
 800a79a:	f000 f81b 	bl	800a7d4 <USER_ioctl>
 800a79e:	4603      	mov	r3, r0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3708      	adds	r7, #8
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <SD3_ioctl>:
DSTATUS SD3_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	603a      	str	r2, [r7, #0]
 800a7b2:	71fb      	strb	r3, [r7, #7]
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(3);
 800a7b8:	2003      	movs	r0, #3
 800a7ba:	f7f8 f809 	bl	80027d0 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800a7be:	79b9      	ldrb	r1, [r7, #6]
 800a7c0:	79fb      	ldrb	r3, [r7, #7]
 800a7c2:	683a      	ldr	r2, [r7, #0]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f000 f805 	bl	800a7d4 <USER_ioctl>
 800a7ca:	4603      	mov	r3, r0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3708      	adds	r7, #8
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	4603      	mov	r3, r0
 800a7dc:	603a      	str	r2, [r7, #0]
 800a7de:	71fb      	strb	r3, [r7, #7]
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res;
	sd_ss_set_active(pdrv);
 800a7e4:	79fb      	ldrb	r3, [r7, #7]
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7f7 fff2 	bl	80027d0 <sd_ss_set_active>
	SS_SD_SELECT();
 800a7ec:	f7f8 f80e 	bl	800280c <sd_ss_active_pin_down>
	if (pdrv) return RES_PARERR;
 800a7f0:	79fb      	ldrb	r3, [r7, #7]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d001      	beq.n	800a7fa <USER_ioctl+0x26>
 800a7f6:	2304      	movs	r3, #4
 800a7f8:	e02a      	b.n	800a850 <USER_ioctl+0x7c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a7fa:	4b17      	ldr	r3, [pc, #92]	; (800a858 <USER_ioctl+0x84>)
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	f003 0301 	and.w	r3, r3, #1
 800a804:	2b00      	cmp	r3, #0
 800a806:	d001      	beq.n	800a80c <USER_ioctl+0x38>
 800a808:	2303      	movs	r3, #3
 800a80a:	e021      	b.n	800a850 <USER_ioctl+0x7c>
	res = RES_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	73fb      	strb	r3, [r7, #15]
	switch (cmd)
 800a810:	79bb      	ldrb	r3, [r7, #6]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d002      	beq.n	800a81c <USER_ioctl+0x48>
 800a816:	2b02      	cmp	r3, #2
 800a818:	d00a      	beq.n	800a830 <USER_ioctl+0x5c>
 800a81a:	e010      	b.n	800a83e <USER_ioctl+0x6a>
	{
	  case CTRL_SYNC : /* Flush dirty buffer if present */
	    SS_SD_SELECT();
 800a81c:	f7f7 fff6 	bl	800280c <sd_ss_active_pin_down>
	    if (SPI_wait_ready() == 0xFF)
 800a820:	f7f8 f931 	bl	8002a86 <SPI_wait_ready>
 800a824:	4603      	mov	r3, r0
 800a826:	2bff      	cmp	r3, #255	; 0xff
 800a828:	d10c      	bne.n	800a844 <USER_ioctl+0x70>
	    res = RES_OK;
 800a82a:	2300      	movs	r3, #0
 800a82c:	73fb      	strb	r3, [r7, #15]
	    break;
 800a82e:	e009      	b.n	800a844 <USER_ioctl+0x70>
	  case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
	    *(WORD*)buff = 512;
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a836:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 800a838:	2300      	movs	r3, #0
 800a83a:	73fb      	strb	r3, [r7, #15]
	    break;
 800a83c:	e003      	b.n	800a846 <USER_ioctl+0x72>
	  default:
	    res = RES_PARERR;
 800a83e:	2304      	movs	r3, #4
 800a840:	73fb      	strb	r3, [r7, #15]
 800a842:	e000      	b.n	800a846 <USER_ioctl+0x72>
	    break;
 800a844:	bf00      	nop
	}
	SPI_Release();
 800a846:	f7f8 f995 	bl	8002b74 <SPI_Release>
	SS_SD_DESELECT();
 800a84a:	f7f7 ffef 	bl	800282c <sd_ss_active_pin_up>
    return res;
 800a84e:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800a850:	4618      	mov	r0, r3
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	2000023d 	.word	0x2000023d

0800a85c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a85c:	b590      	push	{r4, r7, lr}
 800a85e:	b089      	sub	sp, #36	; 0x24
 800a860:	af04      	add	r7, sp, #16
 800a862:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a864:	2301      	movs	r3, #1
 800a866:	2202      	movs	r2, #2
 800a868:	2102      	movs	r1, #2
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 fdb2 	bl	800b3d4 <USBH_FindInterface>
 800a870:	4603      	mov	r3, r0
 800a872:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a874:	7bfb      	ldrb	r3, [r7, #15]
 800a876:	2bff      	cmp	r3, #255	; 0xff
 800a878:	d002      	beq.n	800a880 <USBH_CDC_InterfaceInit+0x24>
 800a87a:	7bfb      	ldrb	r3, [r7, #15]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d901      	bls.n	800a884 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a880:	2302      	movs	r3, #2
 800a882:	e13d      	b.n	800ab00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a884:	7bfb      	ldrb	r3, [r7, #15]
 800a886:	4619      	mov	r1, r3
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 fd87 	bl	800b39c <USBH_SelectInterface>
 800a88e:	4603      	mov	r3, r0
 800a890:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a892:	7bbb      	ldrb	r3, [r7, #14]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d001      	beq.n	800a89c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a898:	2302      	movs	r3, #2
 800a89a:	e131      	b.n	800ab00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a8a2:	2050      	movs	r0, #80	; 0x50
 800a8a4:	f00a f932 	bl	8014b0c <malloc>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8b2:	69db      	ldr	r3, [r3, #28]
 800a8b4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d101      	bne.n	800a8c0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a8bc:	2302      	movs	r3, #2
 800a8be:	e11f      	b.n	800ab00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a8c0:	2250      	movs	r2, #80	; 0x50
 800a8c2:	2100      	movs	r1, #0
 800a8c4:	68b8      	ldr	r0, [r7, #8]
 800a8c6:	f00a f93f 	bl	8014b48 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a8ca:	7bfb      	ldrb	r3, [r7, #15]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	211a      	movs	r1, #26
 800a8d0:	fb01 f303 	mul.w	r3, r1, r3
 800a8d4:	4413      	add	r3, r2
 800a8d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	b25b      	sxtb	r3, r3
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	da15      	bge.n	800a90e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a8e2:	7bfb      	ldrb	r3, [r7, #15]
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	211a      	movs	r1, #26
 800a8e8:	fb01 f303 	mul.w	r3, r1, r3
 800a8ec:	4413      	add	r3, r2
 800a8ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a8f2:	781a      	ldrb	r2, [r3, #0]
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a8f8:	7bfb      	ldrb	r3, [r7, #15]
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	211a      	movs	r1, #26
 800a8fe:	fb01 f303 	mul.w	r3, r1, r3
 800a902:	4413      	add	r3, r2
 800a904:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a908:	881a      	ldrh	r2, [r3, #0]
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	785b      	ldrb	r3, [r3, #1]
 800a912:	4619      	mov	r1, r3
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f002 fa82 	bl	800ce1e <USBH_AllocPipe>
 800a91a:	4603      	mov	r3, r0
 800a91c:	461a      	mov	r2, r3
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	7819      	ldrb	r1, [r3, #0]
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	7858      	ldrb	r0, [r3, #1]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a936:	68ba      	ldr	r2, [r7, #8]
 800a938:	8952      	ldrh	r2, [r2, #10]
 800a93a:	9202      	str	r2, [sp, #8]
 800a93c:	2203      	movs	r2, #3
 800a93e:	9201      	str	r2, [sp, #4]
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	4623      	mov	r3, r4
 800a944:	4602      	mov	r2, r0
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f002 fa3a 	bl	800cdc0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	2200      	movs	r2, #0
 800a952:	4619      	mov	r1, r3
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f009 ff2b 	bl	80147b0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a95a:	2300      	movs	r3, #0
 800a95c:	2200      	movs	r2, #0
 800a95e:	210a      	movs	r1, #10
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 fd37 	bl	800b3d4 <USBH_FindInterface>
 800a966:	4603      	mov	r3, r0
 800a968:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a96a:	7bfb      	ldrb	r3, [r7, #15]
 800a96c:	2bff      	cmp	r3, #255	; 0xff
 800a96e:	d002      	beq.n	800a976 <USBH_CDC_InterfaceInit+0x11a>
 800a970:	7bfb      	ldrb	r3, [r7, #15]
 800a972:	2b01      	cmp	r3, #1
 800a974:	d901      	bls.n	800a97a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a976:	2302      	movs	r3, #2
 800a978:	e0c2      	b.n	800ab00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a97a:	7bfb      	ldrb	r3, [r7, #15]
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	211a      	movs	r1, #26
 800a980:	fb01 f303 	mul.w	r3, r1, r3
 800a984:	4413      	add	r3, r2
 800a986:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	b25b      	sxtb	r3, r3
 800a98e:	2b00      	cmp	r3, #0
 800a990:	da16      	bge.n	800a9c0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a992:	7bfb      	ldrb	r3, [r7, #15]
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	211a      	movs	r1, #26
 800a998:	fb01 f303 	mul.w	r3, r1, r3
 800a99c:	4413      	add	r3, r2
 800a99e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a9a2:	781a      	ldrb	r2, [r3, #0]
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a9a8:	7bfb      	ldrb	r3, [r7, #15]
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	211a      	movs	r1, #26
 800a9ae:	fb01 f303 	mul.w	r3, r1, r3
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a9b8:	881a      	ldrh	r2, [r3, #0]
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	835a      	strh	r2, [r3, #26]
 800a9be:	e015      	b.n	800a9ec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a9c0:	7bfb      	ldrb	r3, [r7, #15]
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	211a      	movs	r1, #26
 800a9c6:	fb01 f303 	mul.w	r3, r1, r3
 800a9ca:	4413      	add	r3, r2
 800a9cc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a9d0:	781a      	ldrb	r2, [r3, #0]
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a9d6:	7bfb      	ldrb	r3, [r7, #15]
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	211a      	movs	r1, #26
 800a9dc:	fb01 f303 	mul.w	r3, r1, r3
 800a9e0:	4413      	add	r3, r2
 800a9e2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a9e6:	881a      	ldrh	r2, [r3, #0]
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a9ec:	7bfb      	ldrb	r3, [r7, #15]
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	211a      	movs	r1, #26
 800a9f2:	fb01 f303 	mul.w	r3, r1, r3
 800a9f6:	4413      	add	r3, r2
 800a9f8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	b25b      	sxtb	r3, r3
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	da16      	bge.n	800aa32 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800aa04:	7bfb      	ldrb	r3, [r7, #15]
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	211a      	movs	r1, #26
 800aa0a:	fb01 f303 	mul.w	r3, r1, r3
 800aa0e:	4413      	add	r3, r2
 800aa10:	f203 3356 	addw	r3, r3, #854	; 0x356
 800aa14:	781a      	ldrb	r2, [r3, #0]
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800aa1a:	7bfb      	ldrb	r3, [r7, #15]
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	211a      	movs	r1, #26
 800aa20:	fb01 f303 	mul.w	r3, r1, r3
 800aa24:	4413      	add	r3, r2
 800aa26:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800aa2a:	881a      	ldrh	r2, [r3, #0]
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	835a      	strh	r2, [r3, #26]
 800aa30:	e015      	b.n	800aa5e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800aa32:	7bfb      	ldrb	r3, [r7, #15]
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	211a      	movs	r1, #26
 800aa38:	fb01 f303 	mul.w	r3, r1, r3
 800aa3c:	4413      	add	r3, r2
 800aa3e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800aa42:	781a      	ldrb	r2, [r3, #0]
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800aa48:	7bfb      	ldrb	r3, [r7, #15]
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	211a      	movs	r1, #26
 800aa4e:	fb01 f303 	mul.w	r3, r1, r3
 800aa52:	4413      	add	r3, r2
 800aa54:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800aa58:	881a      	ldrh	r2, [r3, #0]
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	7b9b      	ldrb	r3, [r3, #14]
 800aa62:	4619      	mov	r1, r3
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f002 f9da 	bl	800ce1e <USBH_AllocPipe>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	7bdb      	ldrb	r3, [r3, #15]
 800aa76:	4619      	mov	r1, r3
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f002 f9d0 	bl	800ce1e <USBH_AllocPipe>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	461a      	mov	r2, r3
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	7b59      	ldrb	r1, [r3, #13]
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	7b98      	ldrb	r0, [r3, #14]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aa9a:	68ba      	ldr	r2, [r7, #8]
 800aa9c:	8b12      	ldrh	r2, [r2, #24]
 800aa9e:	9202      	str	r2, [sp, #8]
 800aaa0:	2202      	movs	r2, #2
 800aaa2:	9201      	str	r2, [sp, #4]
 800aaa4:	9300      	str	r3, [sp, #0]
 800aaa6:	4623      	mov	r3, r4
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f002 f988 	bl	800cdc0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	7b19      	ldrb	r1, [r3, #12]
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	7bd8      	ldrb	r0, [r3, #15]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aac4:	68ba      	ldr	r2, [r7, #8]
 800aac6:	8b52      	ldrh	r2, [r2, #26]
 800aac8:	9202      	str	r2, [sp, #8]
 800aaca:	2202      	movs	r2, #2
 800aacc:	9201      	str	r2, [sp, #4]
 800aace:	9300      	str	r3, [sp, #0]
 800aad0:	4623      	mov	r3, r4
 800aad2:	4602      	mov	r2, r0
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f002 f973 	bl	800cdc0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	7b5b      	ldrb	r3, [r3, #13]
 800aae6:	2200      	movs	r2, #0
 800aae8:	4619      	mov	r1, r3
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f009 fe60 	bl	80147b0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	7b1b      	ldrb	r3, [r3, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f009 fe59 	bl	80147b0 <USBH_LL_SetToggle>

  return USBH_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3714      	adds	r7, #20
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd90      	pop	{r4, r7, pc}

0800ab08 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab16:	69db      	ldr	r3, [r3, #28]
 800ab18:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00e      	beq.n	800ab40 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	4619      	mov	r1, r3
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f002 f968 	bl	800cdfe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	4619      	mov	r1, r3
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f002 f993 	bl	800ce60 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	7b1b      	ldrb	r3, [r3, #12]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00e      	beq.n	800ab66 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	7b1b      	ldrb	r3, [r3, #12]
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f002 f955 	bl	800cdfe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	7b1b      	ldrb	r3, [r3, #12]
 800ab58:	4619      	mov	r1, r3
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f002 f980 	bl	800ce60 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2200      	movs	r2, #0
 800ab64:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	7b5b      	ldrb	r3, [r3, #13]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00e      	beq.n	800ab8c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	7b5b      	ldrb	r3, [r3, #13]
 800ab72:	4619      	mov	r1, r3
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f002 f942 	bl	800cdfe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	7b5b      	ldrb	r3, [r3, #13]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f002 f96d 	bl	800ce60 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab92:	69db      	ldr	r3, [r3, #28]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d00b      	beq.n	800abb0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab9e:	69db      	ldr	r3, [r3, #28]
 800aba0:	4618      	mov	r0, r3
 800aba2:	f009 ffbb 	bl	8014b1c <free>
    phost->pActiveClass->pData = 0U;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abac:	2200      	movs	r2, #0
 800abae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b084      	sub	sp, #16
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abc8:	69db      	ldr	r3, [r3, #28]
 800abca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	3340      	adds	r3, #64	; 0x40
 800abd0:	4619      	mov	r1, r3
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 f8da 	bl	800ad8c <GetLineCoding>
 800abd8:	4603      	mov	r3, r0
 800abda:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800abdc:	7afb      	ldrb	r3, [r7, #11]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d105      	bne.n	800abee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800abe8:	2102      	movs	r1, #2
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800abee:	7afb      	ldrb	r3, [r7, #11]
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3710      	adds	r7, #16
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ac00:	2301      	movs	r3, #1
 800ac02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800ac04:	2300      	movs	r3, #0
 800ac06:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac0e:	69db      	ldr	r3, [r3, #28]
 800ac10:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ac18:	2b04      	cmp	r3, #4
 800ac1a:	d877      	bhi.n	800ad0c <USBH_CDC_Process+0x114>
 800ac1c:	a201      	add	r2, pc, #4	; (adr r2, 800ac24 <USBH_CDC_Process+0x2c>)
 800ac1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac22:	bf00      	nop
 800ac24:	0800ac39 	.word	0x0800ac39
 800ac28:	0800ac3f 	.word	0x0800ac3f
 800ac2c:	0800ac6f 	.word	0x0800ac6f
 800ac30:	0800ace3 	.word	0x0800ace3
 800ac34:	0800acf1 	.word	0x0800acf1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	73fb      	strb	r3, [r7, #15]
      break;
 800ac3c:	e06d      	b.n	800ad1a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac42:	4619      	mov	r1, r3
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 f8c0 	bl	800adca <SetLineCoding>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ac4e:	7bbb      	ldrb	r3, [r7, #14]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d104      	bne.n	800ac5e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	2202      	movs	r2, #2
 800ac58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ac5c:	e058      	b.n	800ad10 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ac5e:	7bbb      	ldrb	r3, [r7, #14]
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d055      	beq.n	800ad10 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	2204      	movs	r2, #4
 800ac68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ac6c:	e050      	b.n	800ad10 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	3340      	adds	r3, #64	; 0x40
 800ac72:	4619      	mov	r1, r3
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 f889 	bl	800ad8c <GetLineCoding>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ac7e:	7bbb      	ldrb	r3, [r7, #14]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d126      	bne.n	800acd2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac96:	791b      	ldrb	r3, [r3, #4]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d13b      	bne.n	800ad14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aca6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d133      	bne.n	800ad14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acb6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800acb8:	429a      	cmp	r2, r3
 800acba:	d12b      	bne.n	800ad14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acc4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d124      	bne.n	800ad14 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 fa7c 	bl	800b1c8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800acd0:	e020      	b.n	800ad14 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800acd2:	7bbb      	ldrb	r3, [r7, #14]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d01d      	beq.n	800ad14 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	2204      	movs	r2, #4
 800acdc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ace0:	e018      	b.n	800ad14 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 f934 	bl	800af50 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 f9c3 	bl	800b074 <CDC_ProcessReception>
      break;
 800acee:	e014      	b.n	800ad1a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800acf0:	2100      	movs	r1, #0
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f001 fa55 	bl	800c1a2 <USBH_ClrFeature>
 800acf8:	4603      	mov	r3, r0
 800acfa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800acfc:	7bbb      	ldrb	r3, [r7, #14]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d10a      	bne.n	800ad18 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	2200      	movs	r2, #0
 800ad06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800ad0a:	e005      	b.n	800ad18 <USBH_CDC_Process+0x120>

    default:
      break;
 800ad0c:	bf00      	nop
 800ad0e:	e004      	b.n	800ad1a <USBH_CDC_Process+0x122>
      break;
 800ad10:	bf00      	nop
 800ad12:	e002      	b.n	800ad1a <USBH_CDC_Process+0x122>
      break;
 800ad14:	bf00      	nop
 800ad16:	e000      	b.n	800ad1a <USBH_CDC_Process+0x122>
      break;
 800ad18:	bf00      	nop

  }

  return status;
 800ad1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3710      	adds	r7, #16
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ad2c:	2300      	movs	r3, #0
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr

0800ad3a <USBH_CDC_Stop>:
  *         Stop current CDC Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_CDC_Stop(USBH_HandleTypeDef *phost)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b084      	sub	sp, #16
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad48:	69db      	ldr	r3, [r3, #28]
 800ad4a:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	2b0b      	cmp	r3, #11
 800ad54:	d115      	bne.n	800ad82 <USBH_CDC_Stop+0x48>
  {
    CDC_Handle->state = CDC_IDLE_STATE;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	4619      	mov	r1, r3
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f002 f84a 	bl	800cdfe <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	7b1b      	ldrb	r3, [r3, #12]
 800ad6e:	4619      	mov	r1, r3
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f002 f844 	bl	800cdfe <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	7b5b      	ldrb	r3, [r3, #13]
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f002 f83e 	bl	800cdfe <USBH_ClosePipe>
  }
  return USBH_OK;
 800ad82:	2300      	movs	r3, #0
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3710      	adds	r7, #16
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	22a1      	movs	r2, #161	; 0xa1
 800ad9a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2221      	movs	r2, #33	; 0x21
 800ada0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2207      	movs	r2, #7
 800adb2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	2207      	movs	r2, #7
 800adb8:	4619      	mov	r1, r3
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f001 fcbe 	bl	800c73c <USBH_CtlReq>
 800adc0:	4603      	mov	r3, r0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3708      	adds	r7, #8
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b082      	sub	sp, #8
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
 800add2:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2221      	movs	r2, #33	; 0x21
 800add8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2220      	movs	r2, #32
 800adde:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2207      	movs	r2, #7
 800adf0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	2207      	movs	r2, #7
 800adf6:	4619      	mov	r1, r3
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f001 fc9f 	bl	800c73c <USBH_CtlReq>
 800adfe:	4603      	mov	r3, r0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3708      	adds	r7, #8
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <USBH_CDC_SetLineCoding>:
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef USBH_CDC_SetLineCoding(USBH_HandleTypeDef *phost,
                                          CDC_LineCodingTypeDef *linecoding)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae18:	69db      	ldr	r3, [r3, #28]
 800ae1a:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	2b0b      	cmp	r3, #11
 800ae24:	d114      	bne.n	800ae50 <USBH_CDC_SetLineCoding+0x48>
  {
    CDC_Handle->state = CDC_SET_LINE_CODING_STATE;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2201      	movs	r2, #1
 800ae2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->pUserLineCoding = linecoding;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	683a      	ldr	r2, [r7, #0]
 800ae32:	649a      	str	r2, [r3, #72]	; 0x48

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2204      	movs	r2, #4
 800ae38:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae48:	2200      	movs	r2, #0
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	f006 ffe0 	bl	8011e10 <osMessagePut>
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }

  return USBH_OK;
 800ae50:	2300      	movs	r3, #0
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b086      	sub	sp, #24
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	60f8      	str	r0, [r7, #12]
 800ae62:	60b9      	str	r1, [r7, #8]
 800ae64:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ae66:	2301      	movs	r3, #1
 800ae68:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae70:	69db      	ldr	r3, [r3, #28]
 800ae72:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d004      	beq.n	800ae88 <USBH_CDC_Transmit+0x2e>
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ae84:	2b03      	cmp	r3, #3
 800ae86:	d11d      	bne.n	800aec4 <USBH_CDC_Transmit+0x6a>
  {
    CDC_Handle->pTxData = pbuff;
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	68ba      	ldr	r2, [r7, #8]
 800ae8c:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	2203      	movs	r2, #3
 800ae98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	2201      	movs	r2, #1
 800aea0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 800aea4:	2300      	movs	r3, #0
 800aea6:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2204      	movs	r2, #4
 800aeac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aebc:	2200      	movs	r2, #0
 800aebe:	4619      	mov	r1, r3
 800aec0:	f006 ffa6 	bl	8011e10 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 800aec4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3718      	adds	r7, #24
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
	...

0800aed0 <USBH_CDC_Receive>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b086      	sub	sp, #24
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800aedc:	2301      	movs	r3, #1
 800aede:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aee6:	69db      	ldr	r3, [r3, #28]
 800aee8:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d004      	beq.n	800aefe <USBH_CDC_Receive+0x2e>
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800aefa:	2b03      	cmp	r3, #3
 800aefc:	d120      	bne.n	800af40 <USBH_CDC_Receive+0x70>
  {
	icListen_rx_msg_basic_header=(icListen_wav_full_header*)pbuff;
 800aefe:	4a13      	ldr	r2, [pc, #76]	; (800af4c <USBH_CDC_Receive+0x7c>)
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	6013      	str	r3, [r2, #0]
    CDC_Handle->pRxData = pbuff;
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	68ba      	ldr	r2, [r7, #8]
 800af08:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	2203      	movs	r2, #3
 800af14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	2203      	movs	r2, #3
 800af1c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 800af20:	2300      	movs	r3, #0
 800af22:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2204      	movs	r2, #4
 800af28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af38:	2200      	movs	r2, #0
 800af3a:	4619      	mov	r1, r3
 800af3c:	f006 ff68 	bl	8011e10 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 800af40:	7dfb      	ldrb	r3, [r7, #23]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3718      	adds	r7, #24
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	20001e54 	.word	0x20001e54

0800af50 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b086      	sub	sp, #24
 800af54:	af02      	add	r7, sp, #8
 800af56:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af5e:	69db      	ldr	r3, [r3, #28]
 800af60:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800af62:	2300      	movs	r3, #0
 800af64:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d002      	beq.n	800af76 <CDC_ProcessTransmission+0x26>
 800af70:	2b02      	cmp	r3, #2
 800af72:	d023      	beq.n	800afbc <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800af74:	e07a      	b.n	800b06c <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af7a:	68fa      	ldr	r2, [r7, #12]
 800af7c:	8b12      	ldrh	r2, [r2, #24]
 800af7e:	4293      	cmp	r3, r2
 800af80:	d90b      	bls.n	800af9a <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	69d9      	ldr	r1, [r3, #28]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	8b1a      	ldrh	r2, [r3, #24]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	7b5b      	ldrb	r3, [r3, #13]
 800af8e:	2001      	movs	r0, #1
 800af90:	9000      	str	r0, [sp, #0]
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f001 fed1 	bl	800cd3a <USBH_BulkSendData>
 800af98:	e00b      	b.n	800afb2 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	7b5b      	ldrb	r3, [r3, #13]
 800afa8:	2001      	movs	r0, #1
 800afaa:	9000      	str	r0, [sp, #0]
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f001 fec4 	bl	800cd3a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2202      	movs	r2, #2
 800afb6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800afba:	e057      	b.n	800b06c <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	7b5b      	ldrb	r3, [r3, #13]
 800afc0:	4619      	mov	r1, r3
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f009 fbca 	bl	801475c <USBH_LL_GetURBState>
 800afc8:	4603      	mov	r3, r0
 800afca:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800afcc:	7afb      	ldrb	r3, [r7, #11]
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d136      	bne.n	800b040 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd6:	68fa      	ldr	r2, [r7, #12]
 800afd8:	8b12      	ldrh	r2, [r2, #24]
 800afda:	4293      	cmp	r3, r2
 800afdc:	d90e      	bls.n	800affc <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe2:	68fa      	ldr	r2, [r7, #12]
 800afe4:	8b12      	ldrh	r2, [r2, #24]
 800afe6:	1a9a      	subs	r2, r3, r2
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	69db      	ldr	r3, [r3, #28]
 800aff0:	68fa      	ldr	r2, [r7, #12]
 800aff2:	8b12      	ldrh	r2, [r2, #24]
 800aff4:	441a      	add	r2, r3
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	61da      	str	r2, [r3, #28]
 800affa:	e002      	b.n	800b002 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2200      	movs	r2, #0
 800b000:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b006:	2b00      	cmp	r3, #0
 800b008:	d004      	beq.n	800b014 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2201      	movs	r2, #1
 800b00e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800b012:	e006      	b.n	800b022 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f009 f92f 	bl	8014280 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2204      	movs	r2, #4
 800b026:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b036:	2200      	movs	r2, #0
 800b038:	4619      	mov	r1, r3
 800b03a:	f006 fee9 	bl	8011e10 <osMessagePut>
      break;
 800b03e:	e014      	b.n	800b06a <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800b040:	7afb      	ldrb	r3, [r7, #11]
 800b042:	2b02      	cmp	r3, #2
 800b044:	d111      	bne.n	800b06a <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2201      	movs	r2, #1
 800b04a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2204      	movs	r2, #4
 800b052:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b062:	2200      	movs	r2, #0
 800b064:	4619      	mov	r1, r3
 800b066:	f006 fed3 	bl	8011e10 <osMessagePut>
      break;
 800b06a:	bf00      	nop
  }
}
 800b06c:	bf00      	nop
 800b06e:	3710      	adds	r7, #16
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b086      	sub	sp, #24
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b082:	69db      	ldr	r3, [r3, #28]
 800b084:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b086:	2300      	movs	r3, #0
 800b088:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800b090:	2b03      	cmp	r3, #3
 800b092:	d002      	beq.n	800b09a <CDC_ProcessReception+0x26>
 800b094:	2b04      	cmp	r3, #4
 800b096:	d00e      	beq.n	800b0b6 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800b098:	e088      	b.n	800b1ac <CDC_ProcessReception+0x138>
      (void)USBH_BulkReceiveData(phost,
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	6a19      	ldr	r1, [r3, #32]
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	8b5a      	ldrh	r2, [r3, #26]
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	7b1b      	ldrb	r3, [r3, #12]
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f001 fe6c 	bl	800cd84 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	2204      	movs	r2, #4
 800b0b0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b0b4:	e07a      	b.n	800b1ac <CDC_ProcessReception+0x138>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	7b1b      	ldrb	r3, [r3, #12]
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f009 fb4d 	bl	801475c <USBH_LL_GetURBState>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800b0c6:	7cfb      	ldrb	r3, [r7, #19]
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d16e      	bne.n	800b1aa <CDC_ProcessReception+0x136>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	7b1b      	ldrb	r3, [r3, #12]
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f009 fab0 	bl	8014638 <USBH_LL_GetLastXferSize>
 800b0d8:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (CDC_Handle->RxDataLength > CDC_Handle->DataItf.InEpSize))
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d04d      	beq.n	800b180 <CDC_ProcessReception+0x10c>
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e8:	697a      	ldr	r2, [r7, #20]
 800b0ea:	8b52      	ldrh	r2, [r2, #26]
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d947      	bls.n	800b180 <CDC_ProcessReception+0x10c>
           CDC_Handle->RxDataLength -= length ;
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	1ad2      	subs	r2, r2, r3
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	629a      	str	r2, [r3, #40]	; 0x28
           CDC_Handle->pRxData += length;
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	6a1a      	ldr	r2, [r3, #32]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	441a      	add	r2, r3
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	621a      	str	r2, [r3, #32]
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 800b108:	4b2a      	ldr	r3, [pc, #168]	; (800b1b4 <CDC_ProcessReception+0x140>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	885b      	ldrh	r3, [r3, #2]
 800b10e:	b29b      	uxth	r3, r3
 800b110:	3306      	adds	r3, #6
 800b112:	461a      	mov	r2, r3
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b118:	f5c3 635a 	rsb	r3, r3, #3488	; 0xda0
 800b11c:	330c      	adds	r3, #12
 800b11e:	429a      	cmp	r2, r3
 800b120:	d129      	bne.n	800b176 <CDC_ProcessReception+0x102>
               CDC_Handle->data_rx_state = CDC_IDLE;
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	2200      	movs	r2, #0
 800b126:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
               osMessagePut(USB_rxHandle, (uint8_t*)usb_rx_buff[usb_rx_buff_active], 0U);
 800b12a:	4b23      	ldr	r3, [pc, #140]	; (800b1b8 <CDC_ProcessReception+0x144>)
 800b12c:	6818      	ldr	r0, [r3, #0]
 800b12e:	4b23      	ldr	r3, [pc, #140]	; (800b1bc <CDC_ProcessReception+0x148>)
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	461a      	mov	r2, r3
 800b134:	f640 53ac 	movw	r3, #3500	; 0xdac
 800b138:	fb02 f303 	mul.w	r3, r2, r3
 800b13c:	4a20      	ldr	r2, [pc, #128]	; (800b1c0 <CDC_ProcessReception+0x14c>)
 800b13e:	4413      	add	r3, r2
 800b140:	2200      	movs	r2, #0
 800b142:	4619      	mov	r1, r3
 800b144:	f006 fe64 	bl	8011e10 <osMessagePut>
               usb_rx_buff_active++;
 800b148:	4b1c      	ldr	r3, [pc, #112]	; (800b1bc <CDC_ProcessReception+0x148>)
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	3301      	adds	r3, #1
 800b14e:	b2da      	uxtb	r2, r3
 800b150:	4b1a      	ldr	r3, [pc, #104]	; (800b1bc <CDC_ProcessReception+0x148>)
 800b152:	701a      	strb	r2, [r3, #0]
               usb_rx_buff_active%=USB_RX_NUM_OF_BUFFERS;
 800b154:	4b19      	ldr	r3, [pc, #100]	; (800b1bc <CDC_ProcessReception+0x148>)
 800b156:	781a      	ldrb	r2, [r3, #0]
 800b158:	4b1a      	ldr	r3, [pc, #104]	; (800b1c4 <CDC_ProcessReception+0x150>)
 800b15a:	fba3 1302 	umull	r1, r3, r3, r2
 800b15e:	1ad1      	subs	r1, r2, r3
 800b160:	0849      	lsrs	r1, r1, #1
 800b162:	440b      	add	r3, r1
 800b164:	0899      	lsrs	r1, r3, #2
 800b166:	460b      	mov	r3, r1
 800b168:	00db      	lsls	r3, r3, #3
 800b16a:	1a5b      	subs	r3, r3, r1
 800b16c:	1ad3      	subs	r3, r2, r3
 800b16e:	b2da      	uxtb	r2, r3
 800b170:	4b12      	ldr	r3, [pc, #72]	; (800b1bc <CDC_ProcessReception+0x148>)
 800b172:	701a      	strb	r2, [r3, #0]
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 800b174:	e00b      	b.n	800b18e <CDC_ProcessReception+0x11a>
         	CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	2203      	movs	r2, #3
 800b17a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 800b17e:	e006      	b.n	800b18e <CDC_ProcessReception+0x11a>
           CDC_Handle->data_rx_state = CDC_IDLE;
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	2200      	movs	r2, #0
 800b184:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
           USBH_CDC_ReceiveCallback(phost);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f009 f883 	bl	8014294 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2204      	movs	r2, #4
 800b192:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	f006 fe33 	bl	8011e10 <osMessagePut>
      break;
 800b1aa:	bf00      	nop
  }
}
 800b1ac:	bf00      	nop
 800b1ae:	3718      	adds	r7, #24
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}
 800b1b4:	20001e54 	.word	0x20001e54
 800b1b8:	200009ac 	.word	0x200009ac
 800b1bc:	2000e1d8 	.word	0x2000e1d8
 800b1c0:	20008224 	.word	0x20008224
 800b1c4:	24924925 	.word	0x24924925

0800b1c8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b1d0:	bf00      	nop
 800b1d2:	370c      	adds	r7, #12
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800b1dc:	b5b0      	push	{r4, r5, r7, lr}
 800b1de:	b090      	sub	sp, #64	; 0x40
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d101      	bne.n	800b1f4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b1f0:	2302      	movs	r3, #2
 800b1f2:	e04d      	b.n	800b290 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	79fa      	ldrb	r2, [r7, #7]
 800b1f8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2200      	movs	r2, #0
 800b208:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b20c:	68f8      	ldr	r0, [r7, #12]
 800b20e:	f000 f847 	bl	800b2a0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2200      	movs	r2, #0
 800b216:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2200      	movs	r2, #0
 800b21e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2200      	movs	r2, #0
 800b226:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2200      	movs	r2, #0
 800b22e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d003      	beq.n	800b240 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	68ba      	ldr	r2, [r7, #8]
 800b23c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800b240:	4b15      	ldr	r3, [pc, #84]	; (800b298 <USBH_Init+0xbc>)
 800b242:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800b246:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b248:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800b24c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b250:	2100      	movs	r1, #0
 800b252:	4618      	mov	r0, r3
 800b254:	f006 fdb3 	bl	8011dbe <osMessageCreate>
 800b258:	4602      	mov	r2, r0
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800b260:	4b0e      	ldr	r3, [pc, #56]	; (800b29c <USBH_Init+0xc0>)
 800b262:	f107 0414 	add.w	r4, r7, #20
 800b266:	461d      	mov	r5, r3
 800b268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b26a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b26c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b270:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800b274:	f107 0314 	add.w	r3, r7, #20
 800b278:	68f9      	ldr	r1, [r7, #12]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f006 fd3f 	bl	8011cfe <osThreadCreate>
 800b280:	4602      	mov	r2, r0
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f009 f921 	bl	80144d0 <USBH_LL_Init>

  return USBH_OK;
 800b28e:	2300      	movs	r3, #0
}
 800b290:	4618      	mov	r0, r3
 800b292:	3740      	adds	r7, #64	; 0x40
 800b294:	46bd      	mov	sp, r7
 800b296:	bdb0      	pop	{r4, r5, r7, pc}
 800b298:	08017678 	.word	0x08017678
 800b29c:	08017688 	.word	0x08017688

0800b2a0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b085      	sub	sp, #20
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	60fb      	str	r3, [r7, #12]
 800b2b0:	e009      	b.n	800b2c6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	33e0      	adds	r3, #224	; 0xe0
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	4413      	add	r3, r2
 800b2bc:	2200      	movs	r2, #0
 800b2be:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	60fb      	str	r3, [r7, #12]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2b0f      	cmp	r3, #15
 800b2ca:	d9f2      	bls.n	800b2b2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	60fb      	str	r3, [r7, #12]
 800b2d0:	e009      	b.n	800b2e6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	4413      	add	r3, r2
 800b2d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b2dc:	2200      	movs	r2, #0
 800b2de:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	60fb      	str	r3, [r7, #12]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2ec:	d3f1      	bcc.n	800b2d2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2201      	movs	r2, #1
 800b30c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2240      	movs	r2, #64	; 0x40
 800b312:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2200      	movs	r2, #0
 800b318:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2201      	movs	r2, #1
 800b326:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2200      	movs	r2, #0
 800b336:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b33a:	2300      	movs	r3, #0
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3714      	adds	r7, #20
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b352:	2300      	movs	r3, #0
 800b354:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d016      	beq.n	800b38a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b362:	2b00      	cmp	r3, #0
 800b364:	d10e      	bne.n	800b384 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b36c:	1c59      	adds	r1, r3, #1
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	33de      	adds	r3, #222	; 0xde
 800b378:	6839      	ldr	r1, [r7, #0]
 800b37a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b37e:	2300      	movs	r3, #0
 800b380:	73fb      	strb	r3, [r7, #15]
 800b382:	e004      	b.n	800b38e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b384:	2302      	movs	r3, #2
 800b386:	73fb      	strb	r3, [r7, #15]
 800b388:	e001      	b.n	800b38e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b38a:	2302      	movs	r3, #2
 800b38c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b38e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b390:	4618      	mov	r0, r3
 800b392:	3714      	adds	r7, #20
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b085      	sub	sp, #20
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b3b2:	78fa      	ldrb	r2, [r7, #3]
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d204      	bcs.n	800b3c2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	78fa      	ldrb	r2, [r7, #3]
 800b3bc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b3c0:	e001      	b.n	800b3c6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b3c2:	2302      	movs	r3, #2
 800b3c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b3c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3714      	adds	r7, #20
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b087      	sub	sp, #28
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	4608      	mov	r0, r1
 800b3de:	4611      	mov	r1, r2
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	70fb      	strb	r3, [r7, #3]
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	70bb      	strb	r3, [r7, #2]
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b3fc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b3fe:	e025      	b.n	800b44c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b400:	7dfb      	ldrb	r3, [r7, #23]
 800b402:	221a      	movs	r2, #26
 800b404:	fb02 f303 	mul.w	r3, r2, r3
 800b408:	3308      	adds	r3, #8
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	4413      	add	r3, r2
 800b40e:	3302      	adds	r3, #2
 800b410:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	795b      	ldrb	r3, [r3, #5]
 800b416:	78fa      	ldrb	r2, [r7, #3]
 800b418:	429a      	cmp	r2, r3
 800b41a:	d002      	beq.n	800b422 <USBH_FindInterface+0x4e>
 800b41c:	78fb      	ldrb	r3, [r7, #3]
 800b41e:	2bff      	cmp	r3, #255	; 0xff
 800b420:	d111      	bne.n	800b446 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b426:	78ba      	ldrb	r2, [r7, #2]
 800b428:	429a      	cmp	r2, r3
 800b42a:	d002      	beq.n	800b432 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b42c:	78bb      	ldrb	r3, [r7, #2]
 800b42e:	2bff      	cmp	r3, #255	; 0xff
 800b430:	d109      	bne.n	800b446 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b436:	787a      	ldrb	r2, [r7, #1]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d002      	beq.n	800b442 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b43c:	787b      	ldrb	r3, [r7, #1]
 800b43e:	2bff      	cmp	r3, #255	; 0xff
 800b440:	d101      	bne.n	800b446 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b442:	7dfb      	ldrb	r3, [r7, #23]
 800b444:	e006      	b.n	800b454 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b446:	7dfb      	ldrb	r3, [r7, #23]
 800b448:	3301      	adds	r3, #1
 800b44a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b44c:	7dfb      	ldrb	r3, [r7, #23]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d9d6      	bls.n	800b400 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b452:	23ff      	movs	r3, #255	; 0xff
}
 800b454:	4618      	mov	r0, r3
 800b456:	371c      	adds	r7, #28
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr

0800b460 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f009 f86d 	bl	8014548 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b46e:	2101      	movs	r1, #1
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f009 f986 	bl	8014782 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b476:	2300      	movs	r3, #0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3708      	adds	r7, #8
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b088      	sub	sp, #32
 800b484:	af04      	add	r7, sp, #16
 800b486:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b488:	2302      	movs	r3, #2
 800b48a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b48c:	2300      	movs	r3, #0
 800b48e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b496:	b2db      	uxtb	r3, r3
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d102      	bne.n	800b4a2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2203      	movs	r2, #3
 800b4a0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	2b0b      	cmp	r3, #11
 800b4aa:	f200 8247 	bhi.w	800b93c <USBH_Process+0x4bc>
 800b4ae:	a201      	add	r2, pc, #4	; (adr r2, 800b4b4 <USBH_Process+0x34>)
 800b4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b4:	0800b4e5 	.word	0x0800b4e5
 800b4b8:	0800b533 	.word	0x0800b533
 800b4bc:	0800b5b7 	.word	0x0800b5b7
 800b4c0:	0800b8bb 	.word	0x0800b8bb
 800b4c4:	0800b93d 	.word	0x0800b93d
 800b4c8:	0800b677 	.word	0x0800b677
 800b4cc:	0800b845 	.word	0x0800b845
 800b4d0:	0800b6c9 	.word	0x0800b6c9
 800b4d4:	0800b705 	.word	0x0800b705
 800b4d8:	0800b73f 	.word	0x0800b73f
 800b4dc:	0800b79d 	.word	0x0800b79d
 800b4e0:	0800b8a3 	.word	0x0800b8a3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f000 8227 	beq.w	800b940 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b4f8:	20c8      	movs	r0, #200	; 0xc8
 800b4fa:	f009 f989 	bl	8014810 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f009 f87f 	bl	8014602 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2200      	movs	r2, #0
 800b508:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2200      	movs	r2, #0
 800b510:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2201      	movs	r2, #1
 800b518:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b528:	2200      	movs	r2, #0
 800b52a:	4619      	mov	r1, r3
 800b52c:	f006 fc70 	bl	8011e10 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b530:	e206      	b.n	800b940 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d107      	bne.n	800b54c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2200      	movs	r2, #0
 800b540:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2202      	movs	r2, #2
 800b548:	701a      	strb	r2, [r3, #0]
 800b54a:	e025      	b.n	800b598 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b552:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b556:	d914      	bls.n	800b582 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b55e:	3301      	adds	r3, #1
 800b560:	b2da      	uxtb	r2, r3
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b56e:	2b03      	cmp	r3, #3
 800b570:	d903      	bls.n	800b57a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	220d      	movs	r2, #13
 800b576:	701a      	strb	r2, [r3, #0]
 800b578:	e00e      	b.n	800b598 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	701a      	strb	r2, [r3, #0]
 800b580:	e00a      	b.n	800b598 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b588:	f103 020a 	add.w	r2, r3, #10
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b592:	200a      	movs	r0, #10
 800b594:	f009 f93c 	bl	8014810 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	f006 fc2e 	bl	8011e10 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b5b4:	e1cb      	b.n	800b94e <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d005      	beq.n	800b5cc <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b5c6:	2104      	movs	r1, #4
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b5cc:	2064      	movs	r0, #100	; 0x64
 800b5ce:	f009 f91f 	bl	8014810 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f008 ffee 	bl	80145b4 <USBH_LL_GetSpeed>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	461a      	mov	r2, r3
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2205      	movs	r2, #5
 800b5e6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f001 fc17 	bl	800ce1e <USBH_AllocPipe>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b5f8:	2180      	movs	r1, #128	; 0x80
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f001 fc0f 	bl	800ce1e <USBH_AllocPipe>
 800b600:	4603      	mov	r3, r0
 800b602:	461a      	mov	r2, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	7919      	ldrb	r1, [r3, #4]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b61c:	b292      	uxth	r2, r2
 800b61e:	9202      	str	r2, [sp, #8]
 800b620:	2200      	movs	r2, #0
 800b622:	9201      	str	r2, [sp, #4]
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	4603      	mov	r3, r0
 800b628:	2280      	movs	r2, #128	; 0x80
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f001 fbc8 	bl	800cdc0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	7959      	ldrb	r1, [r3, #5]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b644:	b292      	uxth	r2, r2
 800b646:	9202      	str	r2, [sp, #8]
 800b648:	2200      	movs	r2, #0
 800b64a:	9201      	str	r2, [sp, #4]
 800b64c:	9300      	str	r3, [sp, #0]
 800b64e:	4603      	mov	r3, r0
 800b650:	2200      	movs	r2, #0
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f001 fbb4 	bl	800cdc0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2201      	movs	r2, #1
 800b65c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b66c:	2200      	movs	r2, #0
 800b66e:	4619      	mov	r1, r3
 800b670:	f006 fbce 	bl	8011e10 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b674:	e16b      	b.n	800b94e <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 f96e 	bl	800b958 <USBH_HandleEnum>
 800b67c:	4603      	mov	r3, r0
 800b67e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b680:	7bbb      	ldrb	r3, [r7, #14]
 800b682:	b2db      	uxtb	r3, r3
 800b684:	2b00      	cmp	r3, #0
 800b686:	f040 815d 	bne.w	800b944 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d103      	bne.n	800b6a4 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2208      	movs	r2, #8
 800b6a0:	701a      	strb	r2, [r3, #0]
 800b6a2:	e002      	b.n	800b6aa <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2207      	movs	r2, #7
 800b6a8:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2205      	movs	r2, #5
 800b6ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b6be:	2200      	movs	r2, #0
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	f006 fba5 	bl	8011e10 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b6c6:	e13d      	b.n	800b944 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	f000 813a 	beq.w	800b948 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b6da:	2101      	movs	r1, #1
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2208      	movs	r2, #8
 800b6e4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2205      	movs	r2, #5
 800b6ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	f006 fb87 	bl	8011e10 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b702:	e121      	b.n	800b948 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b70a:	b29b      	uxth	r3, r3
 800b70c:	4619      	mov	r1, r3
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 fd00 	bl	800c114 <USBH_SetCfg>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d102      	bne.n	800b720 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2209      	movs	r2, #9
 800b71e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2201      	movs	r2, #1
 800b724:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b734:	2200      	movs	r2, #0
 800b736:	4619      	mov	r1, r3
 800b738:	f006 fb6a 	bl	8011e10 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b73c:	e107      	b.n	800b94e <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b744:	f003 0320 	and.w	r3, r3, #32
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d015      	beq.n	800b778 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b74c:	2101      	movs	r1, #1
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 fd03 	bl	800c15a <USBH_SetFeature>
 800b754:	4603      	mov	r3, r0
 800b756:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b758:	7bbb      	ldrb	r3, [r7, #14]
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d103      	bne.n	800b768 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	220a      	movs	r2, #10
 800b764:	701a      	strb	r2, [r3, #0]
 800b766:	e00a      	b.n	800b77e <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800b768:	7bbb      	ldrb	r3, [r7, #14]
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	2b03      	cmp	r3, #3
 800b76e:	d106      	bne.n	800b77e <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	220a      	movs	r2, #10
 800b774:	701a      	strb	r2, [r3, #0]
 800b776:	e002      	b.n	800b77e <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	220a      	movs	r2, #10
 800b77c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2201      	movs	r2, #1
 800b782:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b792:	2200      	movs	r2, #0
 800b794:	4619      	mov	r1, r3
 800b796:	f006 fb3b 	bl	8011e10 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b79a:	e0d8      	b.n	800b94e <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d03f      	beq.n	800b826 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	73fb      	strb	r3, [r7, #15]
 800b7b2:	e016      	b.n	800b7e2 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b7b4:	7bfa      	ldrb	r2, [r7, #15]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	32de      	adds	r2, #222	; 0xde
 800b7ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7be:	791a      	ldrb	r2, [r3, #4]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d108      	bne.n	800b7dc <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b7ca:	7bfa      	ldrb	r2, [r7, #15]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	32de      	adds	r2, #222	; 0xde
 800b7d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b7da:	e005      	b.n	800b7e8 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b7dc:	7bfb      	ldrb	r3, [r7, #15]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	73fb      	strb	r3, [r7, #15]
 800b7e2:	7bfb      	ldrb	r3, [r7, #15]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d0e5      	beq.n	800b7b4 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d016      	beq.n	800b820 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7f8:	689b      	ldr	r3, [r3, #8]
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	4798      	blx	r3
 800b7fe:	4603      	mov	r3, r0
 800b800:	2b00      	cmp	r3, #0
 800b802:	d109      	bne.n	800b818 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2206      	movs	r2, #6
 800b808:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b810:	2103      	movs	r1, #3
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	4798      	blx	r3
 800b816:	e006      	b.n	800b826 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	220d      	movs	r2, #13
 800b81c:	701a      	strb	r2, [r3, #0]
 800b81e:	e002      	b.n	800b826 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	220d      	movs	r2, #13
 800b824:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2205      	movs	r2, #5
 800b82a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b83a:	2200      	movs	r2, #0
 800b83c:	4619      	mov	r1, r3
 800b83e:	f006 fae7 	bl	8011e10 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b842:	e084      	b.n	800b94e <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d017      	beq.n	800b87e <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b854:	691b      	ldr	r3, [r3, #16]
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	4798      	blx	r3
 800b85a:	4603      	mov	r3, r0
 800b85c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b85e:	7bbb      	ldrb	r3, [r7, #14]
 800b860:	b2db      	uxtb	r3, r3
 800b862:	2b00      	cmp	r3, #0
 800b864:	d103      	bne.n	800b86e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	220b      	movs	r2, #11
 800b86a:	701a      	strb	r2, [r3, #0]
 800b86c:	e00a      	b.n	800b884 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800b86e:	7bbb      	ldrb	r3, [r7, #14]
 800b870:	b2db      	uxtb	r3, r3
 800b872:	2b02      	cmp	r3, #2
 800b874:	d106      	bne.n	800b884 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	220d      	movs	r2, #13
 800b87a:	701a      	strb	r2, [r3, #0]
 800b87c:	e002      	b.n	800b884 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	220d      	movs	r2, #13
 800b882:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2205      	movs	r2, #5
 800b888:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b898:	2200      	movs	r2, #0
 800b89a:	4619      	mov	r1, r3
 800b89c:	f006 fab8 	bl	8011e10 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b8a0:	e055      	b.n	800b94e <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d04f      	beq.n	800b94c <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8b2:	695b      	ldr	r3, [r3, #20]
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	4798      	blx	r3
      }
      break;
 800b8b8:	e048      	b.n	800b94c <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f7ff fcec 	bl	800b2a0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d009      	beq.n	800b8e6 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d005      	beq.n	800b8fc <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b8f6:	2105      	movs	r1, #5
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b902:	b2db      	uxtb	r3, r3
 800b904:	2b01      	cmp	r3, #1
 800b906:	d107      	bne.n	800b918 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f7ff fda5 	bl	800b460 <USBH_Start>
 800b916:	e002      	b.n	800b91e <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f008 fe15 	bl	8014548 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2201      	movs	r2, #1
 800b922:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b932:	2200      	movs	r2, #0
 800b934:	4619      	mov	r1, r3
 800b936:	f006 fa6b 	bl	8011e10 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b93a:	e008      	b.n	800b94e <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800b93c:	bf00      	nop
 800b93e:	e006      	b.n	800b94e <USBH_Process+0x4ce>
      break;
 800b940:	bf00      	nop
 800b942:	e004      	b.n	800b94e <USBH_Process+0x4ce>
      break;
 800b944:	bf00      	nop
 800b946:	e002      	b.n	800b94e <USBH_Process+0x4ce>
    break;
 800b948:	bf00      	nop
 800b94a:	e000      	b.n	800b94e <USBH_Process+0x4ce>
      break;
 800b94c:	bf00      	nop
  }
  return USBH_OK;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3710      	adds	r7, #16
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b088      	sub	sp, #32
 800b95c:	af04      	add	r7, sp, #16
 800b95e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b960:	2301      	movs	r3, #1
 800b962:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b964:	2301      	movs	r3, #1
 800b966:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	785b      	ldrb	r3, [r3, #1]
 800b96c:	2b07      	cmp	r3, #7
 800b96e:	f200 8208 	bhi.w	800bd82 <USBH_HandleEnum+0x42a>
 800b972:	a201      	add	r2, pc, #4	; (adr r2, 800b978 <USBH_HandleEnum+0x20>)
 800b974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b978:	0800b999 	.word	0x0800b999
 800b97c:	0800ba57 	.word	0x0800ba57
 800b980:	0800bac1 	.word	0x0800bac1
 800b984:	0800bb4f 	.word	0x0800bb4f
 800b988:	0800bbb9 	.word	0x0800bbb9
 800b98c:	0800bc29 	.word	0x0800bc29
 800b990:	0800bcc5 	.word	0x0800bcc5
 800b994:	0800bd43 	.word	0x0800bd43
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b998:	2108      	movs	r1, #8
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 faea 	bl	800bf74 <USBH_Get_DevDesc>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b9a4:	7bbb      	ldrb	r3, [r7, #14]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d130      	bne.n	800ba0c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	7919      	ldrb	r1, [r3, #4]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b9ce:	b292      	uxth	r2, r2
 800b9d0:	9202      	str	r2, [sp, #8]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	9201      	str	r2, [sp, #4]
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	4603      	mov	r3, r0
 800b9da:	2280      	movs	r2, #128	; 0x80
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f001 f9ef 	bl	800cdc0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	7959      	ldrb	r1, [r3, #5]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b9f6:	b292      	uxth	r2, r2
 800b9f8:	9202      	str	r2, [sp, #8]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	9201      	str	r2, [sp, #4]
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	4603      	mov	r3, r0
 800ba02:	2200      	movs	r2, #0
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f001 f9db 	bl	800cdc0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ba0a:	e1bc      	b.n	800bd86 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba0c:	7bbb      	ldrb	r3, [r7, #14]
 800ba0e:	2b03      	cmp	r3, #3
 800ba10:	f040 81b9 	bne.w	800bd86 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	b2da      	uxtb	r2, r3
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ba2a:	2b03      	cmp	r3, #3
 800ba2c:	d903      	bls.n	800ba36 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	220d      	movs	r2, #13
 800ba32:	701a      	strb	r2, [r3, #0]
      break;
 800ba34:	e1a7      	b.n	800bd86 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	795b      	ldrb	r3, [r3, #5]
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f001 fa0f 	bl	800ce60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	791b      	ldrb	r3, [r3, #4]
 800ba46:	4619      	mov	r1, r3
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f001 fa09 	bl	800ce60 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	701a      	strb	r2, [r3, #0]
      break;
 800ba54:	e197      	b.n	800bd86 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ba56:	2112      	movs	r1, #18
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f000 fa8b 	bl	800bf74 <USBH_Get_DevDesc>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ba62:	7bbb      	ldrb	r3, [r7, #14]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d103      	bne.n	800ba70 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2202      	movs	r2, #2
 800ba6c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ba6e:	e18c      	b.n	800bd8a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba70:	7bbb      	ldrb	r3, [r7, #14]
 800ba72:	2b03      	cmp	r3, #3
 800ba74:	f040 8189 	bne.w	800bd8a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ba7e:	3301      	adds	r3, #1
 800ba80:	b2da      	uxtb	r2, r3
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ba8e:	2b03      	cmp	r3, #3
 800ba90:	d903      	bls.n	800ba9a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	220d      	movs	r2, #13
 800ba96:	701a      	strb	r2, [r3, #0]
      break;
 800ba98:	e177      	b.n	800bd8a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	795b      	ldrb	r3, [r3, #5]
 800ba9e:	4619      	mov	r1, r3
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f001 f9dd 	bl	800ce60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	791b      	ldrb	r3, [r3, #4]
 800baaa:	4619      	mov	r1, r3
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f001 f9d7 	bl	800ce60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2200      	movs	r2, #0
 800babc:	701a      	strb	r2, [r3, #0]
      break;
 800babe:	e164      	b.n	800bd8a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800bac0:	2101      	movs	r1, #1
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 fb02 	bl	800c0cc <USBH_SetAddress>
 800bac8:	4603      	mov	r3, r0
 800baca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bacc:	7bbb      	ldrb	r3, [r7, #14]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d132      	bne.n	800bb38 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800bad2:	2002      	movs	r0, #2
 800bad4:	f008 fe9c 	bl	8014810 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2201      	movs	r2, #1
 800badc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2203      	movs	r2, #3
 800bae4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	7919      	ldrb	r1, [r3, #4]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bafa:	b292      	uxth	r2, r2
 800bafc:	9202      	str	r2, [sp, #8]
 800bafe:	2200      	movs	r2, #0
 800bb00:	9201      	str	r2, [sp, #4]
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	4603      	mov	r3, r0
 800bb06:	2280      	movs	r2, #128	; 0x80
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f001 f959 	bl	800cdc0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	7959      	ldrb	r1, [r3, #5]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bb22:	b292      	uxth	r2, r2
 800bb24:	9202      	str	r2, [sp, #8]
 800bb26:	2200      	movs	r2, #0
 800bb28:	9201      	str	r2, [sp, #4]
 800bb2a:	9300      	str	r3, [sp, #0]
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2200      	movs	r2, #0
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f001 f945 	bl	800cdc0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bb36:	e12a      	b.n	800bd8e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bb38:	7bbb      	ldrb	r3, [r7, #14]
 800bb3a:	2b03      	cmp	r3, #3
 800bb3c:	f040 8127 	bne.w	800bd8e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	220d      	movs	r2, #13
 800bb44:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	705a      	strb	r2, [r3, #1]
      break;
 800bb4c:	e11f      	b.n	800bd8e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800bb4e:	2109      	movs	r1, #9
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 fa37 	bl	800bfc4 <USBH_Get_CfgDesc>
 800bb56:	4603      	mov	r3, r0
 800bb58:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bb5a:	7bbb      	ldrb	r3, [r7, #14]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d103      	bne.n	800bb68 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2204      	movs	r2, #4
 800bb64:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bb66:	e114      	b.n	800bd92 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bb68:	7bbb      	ldrb	r3, [r7, #14]
 800bb6a:	2b03      	cmp	r3, #3
 800bb6c:	f040 8111 	bne.w	800bd92 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bb76:	3301      	adds	r3, #1
 800bb78:	b2da      	uxtb	r2, r3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bb86:	2b03      	cmp	r3, #3
 800bb88:	d903      	bls.n	800bb92 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	220d      	movs	r2, #13
 800bb8e:	701a      	strb	r2, [r3, #0]
      break;
 800bb90:	e0ff      	b.n	800bd92 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	795b      	ldrb	r3, [r3, #5]
 800bb96:	4619      	mov	r1, r3
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f001 f961 	bl	800ce60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	791b      	ldrb	r3, [r3, #4]
 800bba2:	4619      	mov	r1, r3
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f001 f95b 	bl	800ce60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2200      	movs	r2, #0
 800bbae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	701a      	strb	r2, [r3, #0]
      break;
 800bbb6:	e0ec      	b.n	800bd92 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 f9ff 	bl	800bfc4 <USBH_Get_CfgDesc>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bbca:	7bbb      	ldrb	r3, [r7, #14]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d103      	bne.n	800bbd8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2205      	movs	r2, #5
 800bbd4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bbd6:	e0de      	b.n	800bd96 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bbd8:	7bbb      	ldrb	r3, [r7, #14]
 800bbda:	2b03      	cmp	r3, #3
 800bbdc:	f040 80db 	bne.w	800bd96 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	b2da      	uxtb	r2, r3
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbf6:	2b03      	cmp	r3, #3
 800bbf8:	d903      	bls.n	800bc02 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	220d      	movs	r2, #13
 800bbfe:	701a      	strb	r2, [r3, #0]
      break;
 800bc00:	e0c9      	b.n	800bd96 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	795b      	ldrb	r3, [r3, #5]
 800bc06:	4619      	mov	r1, r3
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f001 f929 	bl	800ce60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	791b      	ldrb	r3, [r3, #4]
 800bc12:	4619      	mov	r1, r3
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f001 f923 	bl	800ce60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2200      	movs	r2, #0
 800bc24:	701a      	strb	r2, [r3, #0]
      break;
 800bc26:	e0b6      	b.n	800bd96 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d036      	beq.n	800bca0 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bc3e:	23ff      	movs	r3, #255	; 0xff
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 f9e3 	bl	800c00c <USBH_Get_StringDesc>
 800bc46:	4603      	mov	r3, r0
 800bc48:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bc4a:	7bbb      	ldrb	r3, [r7, #14]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d111      	bne.n	800bc74 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2206      	movs	r2, #6
 800bc54:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2205      	movs	r2, #5
 800bc5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	f006 f8cf 	bl	8011e10 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bc72:	e092      	b.n	800bd9a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc74:	7bbb      	ldrb	r3, [r7, #14]
 800bc76:	2b03      	cmp	r3, #3
 800bc78:	f040 808f 	bne.w	800bd9a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2206      	movs	r2, #6
 800bc80:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2205      	movs	r2, #5
 800bc86:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bc96:	2200      	movs	r2, #0
 800bc98:	4619      	mov	r1, r3
 800bc9a:	f006 f8b9 	bl	8011e10 <osMessagePut>
      break;
 800bc9e:	e07c      	b.n	800bd9a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2206      	movs	r2, #6
 800bca4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2205      	movs	r2, #5
 800bcaa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bcba:	2200      	movs	r2, #0
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	f006 f8a7 	bl	8011e10 <osMessagePut>
      break;
 800bcc2:	e06a      	b.n	800bd9a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d027      	beq.n	800bd1e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bcda:	23ff      	movs	r3, #255	; 0xff
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 f995 	bl	800c00c <USBH_Get_StringDesc>
 800bce2:	4603      	mov	r3, r0
 800bce4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bce6:	7bbb      	ldrb	r3, [r7, #14]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d103      	bne.n	800bcf4 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2207      	movs	r2, #7
 800bcf0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bcf2:	e054      	b.n	800bd9e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bcf4:	7bbb      	ldrb	r3, [r7, #14]
 800bcf6:	2b03      	cmp	r3, #3
 800bcf8:	d151      	bne.n	800bd9e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2207      	movs	r2, #7
 800bcfe:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2205      	movs	r2, #5
 800bd04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bd14:	2200      	movs	r2, #0
 800bd16:	4619      	mov	r1, r3
 800bd18:	f006 f87a 	bl	8011e10 <osMessagePut>
      break;
 800bd1c:	e03f      	b.n	800bd9e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2207      	movs	r2, #7
 800bd22:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2205      	movs	r2, #5
 800bd28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bd38:	2200      	movs	r2, #0
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	f006 f868 	bl	8011e10 <osMessagePut>
      break;
 800bd40:	e02d      	b.n	800bd9e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d017      	beq.n	800bd7c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bd58:	23ff      	movs	r3, #255	; 0xff
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 f956 	bl	800c00c <USBH_Get_StringDesc>
 800bd60:	4603      	mov	r3, r0
 800bd62:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bd64:	7bbb      	ldrb	r3, [r7, #14]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d102      	bne.n	800bd70 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800bd6e:	e018      	b.n	800bda2 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd70:	7bbb      	ldrb	r3, [r7, #14]
 800bd72:	2b03      	cmp	r3, #3
 800bd74:	d115      	bne.n	800bda2 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800bd76:	2300      	movs	r3, #0
 800bd78:	73fb      	strb	r3, [r7, #15]
      break;
 800bd7a:	e012      	b.n	800bda2 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	73fb      	strb	r3, [r7, #15]
      break;
 800bd80:	e00f      	b.n	800bda2 <USBH_HandleEnum+0x44a>

    default:
      break;
 800bd82:	bf00      	nop
 800bd84:	e00e      	b.n	800bda4 <USBH_HandleEnum+0x44c>
      break;
 800bd86:	bf00      	nop
 800bd88:	e00c      	b.n	800bda4 <USBH_HandleEnum+0x44c>
      break;
 800bd8a:	bf00      	nop
 800bd8c:	e00a      	b.n	800bda4 <USBH_HandleEnum+0x44c>
      break;
 800bd8e:	bf00      	nop
 800bd90:	e008      	b.n	800bda4 <USBH_HandleEnum+0x44c>
      break;
 800bd92:	bf00      	nop
 800bd94:	e006      	b.n	800bda4 <USBH_HandleEnum+0x44c>
      break;
 800bd96:	bf00      	nop
 800bd98:	e004      	b.n	800bda4 <USBH_HandleEnum+0x44c>
      break;
 800bd9a:	bf00      	nop
 800bd9c:	e002      	b.n	800bda4 <USBH_HandleEnum+0x44c>
      break;
 800bd9e:	bf00      	nop
 800bda0:	e000      	b.n	800bda4 <USBH_HandleEnum+0x44c>
      break;
 800bda2:	bf00      	nop
  }
  return Status;
 800bda4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3710      	adds	r7, #16
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop

0800bdb0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b083      	sub	sp, #12
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	683a      	ldr	r2, [r7, #0]
 800bdbe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800bdc2:	bf00      	nop
 800bdc4:	370c      	adds	r7, #12
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr

0800bdce <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b082      	sub	sp, #8
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bddc:	1c5a      	adds	r2, r3, #1
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 f804 	bl	800bdf2 <USBH_HandleSof>
}
 800bdea:	bf00      	nop
 800bdec:	3708      	adds	r7, #8
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}

0800bdf2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bdf2:	b580      	push	{r7, lr}
 800bdf4:	b082      	sub	sp, #8
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	2b0b      	cmp	r3, #11
 800be02:	d10a      	bne.n	800be1a <USBH_HandleSof+0x28>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d005      	beq.n	800be1a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be14:	699b      	ldr	r3, [r3, #24]
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	4798      	blx	r3
  }
}
 800be1a:	bf00      	nop
 800be1c:	3708      	adds	r7, #8
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}

0800be22 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800be22:	b580      	push	{r7, lr}
 800be24:	b082      	sub	sp, #8
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2201      	movs	r2, #1
 800be2e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2201      	movs	r2, #1
 800be36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800be46:	2200      	movs	r2, #0
 800be48:	4619      	mov	r1, r3
 800be4a:	f005 ffe1 	bl	8011e10 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800be4e:	bf00      	nop
}
 800be50:	3708      	adds	r7, #8
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}

0800be56 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800be56:	b480      	push	{r7}
 800be58:	b083      	sub	sp, #12
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800be66:	bf00      	nop
}
 800be68:	370c      	adds	r7, #12
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr

0800be72 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800be72:	b580      	push	{r7, lr}
 800be74:	b082      	sub	sp, #8
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2201      	movs	r2, #1
 800be7e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2200      	movs	r2, #0
 800be86:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2200      	movs	r2, #0
 800be8e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2201      	movs	r2, #1
 800be96:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bea6:	2200      	movs	r2, #0
 800bea8:	4619      	mov	r1, r3
 800beaa:	f005 ffb1 	bl	8011e10 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800beae:	2300      	movs	r3, #0
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3708      	adds	r7, #8
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2201      	movs	r2, #1
 800bec4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f008 fb50 	bl	801457e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	791b      	ldrb	r3, [r3, #4]
 800bee2:	4619      	mov	r1, r3
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 ffbb 	bl	800ce60 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	795b      	ldrb	r3, [r3, #5]
 800beee:	4619      	mov	r1, r3
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f000 ffb5 	bl	800ce60 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2201      	movs	r2, #1
 800befa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	f005 ff7f 	bl	8011e10 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bf12:	2300      	movs	r3, #0
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3708      	adds	r7, #8
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b086      	sub	sp, #24
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800bf2a:	f107 030c 	add.w	r3, r7, #12
 800bf2e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf32:	4618      	mov	r0, r3
 800bf34:	f005 ffac 	bl	8011e90 <osMessageGet>
    if (event.status == osEventMessage)
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2b10      	cmp	r3, #16
 800bf3c:	d1f2      	bne.n	800bf24 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f7ff fa9e 	bl	800b480 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800bf44:	e7ee      	b.n	800bf24 <USBH_Process_OS+0x8>

0800bf46 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800bf46:	b580      	push	{r7, lr}
 800bf48:	b082      	sub	sp, #8
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2201      	movs	r2, #1
 800bf52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bf62:	2200      	movs	r2, #0
 800bf64:	4619      	mov	r1, r3
 800bf66:	f005 ff53 	bl	8011e10 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800bf6a:	2300      	movs	r3, #0
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3708      	adds	r7, #8
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b086      	sub	sp, #24
 800bf78:	af02      	add	r7, sp, #8
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800bf86:	78fb      	ldrb	r3, [r7, #3]
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	9300      	str	r3, [sp, #0]
 800bf8c:	4613      	mov	r3, r2
 800bf8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bf92:	2100      	movs	r1, #0
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 f864 	bl	800c062 <USBH_GetDescriptor>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800bf9e:	7bfb      	ldrb	r3, [r7, #15]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d10a      	bne.n	800bfba <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f203 3026 	addw	r0, r3, #806	; 0x326
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bfb0:	78fa      	ldrb	r2, [r7, #3]
 800bfb2:	b292      	uxth	r2, r2
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	f000 f918 	bl	800c1ea <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800bfba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b086      	sub	sp, #24
 800bfc8:	af02      	add	r7, sp, #8
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	460b      	mov	r3, r1
 800bfce:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	331c      	adds	r3, #28
 800bfd4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800bfd6:	887b      	ldrh	r3, [r7, #2]
 800bfd8:	9300      	str	r3, [sp, #0]
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfe0:	2100      	movs	r1, #0
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 f83d 	bl	800c062 <USBH_GetDescriptor>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800bfec:	7bfb      	ldrb	r3, [r7, #15]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d107      	bne.n	800c002 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800bff2:	887b      	ldrh	r3, [r7, #2]
 800bff4:	461a      	mov	r2, r3
 800bff6:	68b9      	ldr	r1, [r7, #8]
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 f987 	bl	800c30c <USBH_ParseCfgDesc>
 800bffe:	4603      	mov	r3, r0
 800c000:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c002:	7bfb      	ldrb	r3, [r7, #15]
}
 800c004:	4618      	mov	r0, r3
 800c006:	3710      	adds	r7, #16
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b088      	sub	sp, #32
 800c010:	af02      	add	r7, sp, #8
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	607a      	str	r2, [r7, #4]
 800c016:	461a      	mov	r2, r3
 800c018:	460b      	mov	r3, r1
 800c01a:	72fb      	strb	r3, [r7, #11]
 800c01c:	4613      	mov	r3, r2
 800c01e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800c020:	7afb      	ldrb	r3, [r7, #11]
 800c022:	b29b      	uxth	r3, r3
 800c024:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c028:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c030:	893b      	ldrh	r3, [r7, #8]
 800c032:	9300      	str	r3, [sp, #0]
 800c034:	460b      	mov	r3, r1
 800c036:	2100      	movs	r1, #0
 800c038:	68f8      	ldr	r0, [r7, #12]
 800c03a:	f000 f812 	bl	800c062 <USBH_GetDescriptor>
 800c03e:	4603      	mov	r3, r0
 800c040:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c042:	7dfb      	ldrb	r3, [r7, #23]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d107      	bne.n	800c058 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c04e:	893a      	ldrh	r2, [r7, #8]
 800c050:	6879      	ldr	r1, [r7, #4]
 800c052:	4618      	mov	r0, r3
 800c054:	f000 fb24 	bl	800c6a0 <USBH_ParseStringDesc>
  }

  return status;
 800c058:	7dfb      	ldrb	r3, [r7, #23]
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3718      	adds	r7, #24
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c062:	b580      	push	{r7, lr}
 800c064:	b084      	sub	sp, #16
 800c066:	af00      	add	r7, sp, #0
 800c068:	60f8      	str	r0, [r7, #12]
 800c06a:	607b      	str	r3, [r7, #4]
 800c06c:	460b      	mov	r3, r1
 800c06e:	72fb      	strb	r3, [r7, #11]
 800c070:	4613      	mov	r3, r2
 800c072:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	789b      	ldrb	r3, [r3, #2]
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d11c      	bne.n	800c0b6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c07c:	7afb      	ldrb	r3, [r7, #11]
 800c07e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c082:	b2da      	uxtb	r2, r3
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2206      	movs	r2, #6
 800c08c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	893a      	ldrh	r2, [r7, #8]
 800c092:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c094:	893b      	ldrh	r3, [r7, #8]
 800c096:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c09a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c09e:	d104      	bne.n	800c0aa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f240 4209 	movw	r2, #1033	; 0x409
 800c0a6:	829a      	strh	r2, [r3, #20]
 800c0a8:	e002      	b.n	800c0b0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	8b3a      	ldrh	r2, [r7, #24]
 800c0b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c0b6:	8b3b      	ldrh	r3, [r7, #24]
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	6879      	ldr	r1, [r7, #4]
 800c0bc:	68f8      	ldr	r0, [r7, #12]
 800c0be:	f000 fb3d 	bl	800c73c <USBH_CtlReq>
 800c0c2:	4603      	mov	r3, r0
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3710      	adds	r7, #16
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	789b      	ldrb	r3, [r3, #2]
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	d10f      	bne.n	800c100 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2205      	movs	r2, #5
 800c0ea:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c0ec:	78fb      	ldrb	r3, [r7, #3]
 800c0ee:	b29a      	uxth	r2, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c100:	2200      	movs	r2, #0
 800c102:	2100      	movs	r1, #0
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 fb19 	bl	800c73c <USBH_CtlReq>
 800c10a:	4603      	mov	r3, r0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3708      	adds	r7, #8
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b082      	sub	sp, #8
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	460b      	mov	r3, r1
 800c11e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	789b      	ldrb	r3, [r3, #2]
 800c124:	2b01      	cmp	r3, #1
 800c126:	d10e      	bne.n	800c146 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2209      	movs	r2, #9
 800c132:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	887a      	ldrh	r2, [r7, #2]
 800c138:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2200      	movs	r2, #0
 800c13e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2200      	movs	r2, #0
 800c144:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c146:	2200      	movs	r2, #0
 800c148:	2100      	movs	r1, #0
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 faf6 	bl	800c73c <USBH_CtlReq>
 800c150:	4603      	mov	r3, r0
}
 800c152:	4618      	mov	r0, r3
 800c154:	3708      	adds	r7, #8
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b082      	sub	sp, #8
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
 800c162:	460b      	mov	r3, r1
 800c164:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	789b      	ldrb	r3, [r3, #2]
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d10f      	bne.n	800c18e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2200      	movs	r2, #0
 800c172:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2203      	movs	r2, #3
 800c178:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c17a:	78fb      	ldrb	r3, [r7, #3]
 800c17c:	b29a      	uxth	r2, r3
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2200      	movs	r2, #0
 800c18c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c18e:	2200      	movs	r2, #0
 800c190:	2100      	movs	r1, #0
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fad2 	bl	800c73c <USBH_CtlReq>
 800c198:	4603      	mov	r3, r0
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3708      	adds	r7, #8
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}

0800c1a2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c1a2:	b580      	push	{r7, lr}
 800c1a4:	b082      	sub	sp, #8
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	6078      	str	r0, [r7, #4]
 800c1aa:	460b      	mov	r3, r1
 800c1ac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	789b      	ldrb	r3, [r3, #2]
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d10f      	bne.n	800c1d6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2202      	movs	r2, #2
 800c1ba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c1c8:	78fb      	ldrb	r3, [r7, #3]
 800c1ca:	b29a      	uxth	r2, r3
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	2100      	movs	r1, #0
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 faae 	bl	800c73c <USBH_CtlReq>
 800c1e0:	4603      	mov	r3, r0
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3708      	adds	r7, #8
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c1ea:	b480      	push	{r7}
 800c1ec:	b085      	sub	sp, #20
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	60f8      	str	r0, [r7, #12]
 800c1f2:	60b9      	str	r1, [r7, #8]
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	781a      	ldrb	r2, [r3, #0]
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	785a      	ldrb	r2, [r3, #1]
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	3302      	adds	r3, #2
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	b29a      	uxth	r2, r3
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	3303      	adds	r3, #3
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	b29b      	uxth	r3, r3
 800c218:	021b      	lsls	r3, r3, #8
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	4313      	orrs	r3, r2
 800c21e:	b29a      	uxth	r2, r3
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	791a      	ldrb	r2, [r3, #4]
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	795a      	ldrb	r2, [r3, #5]
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	799a      	ldrb	r2, [r3, #6]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	79da      	ldrb	r2, [r3, #7]
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	79db      	ldrb	r3, [r3, #7]
 800c248:	2b20      	cmp	r3, #32
 800c24a:	dc11      	bgt.n	800c270 <USBH_ParseDevDesc+0x86>
 800c24c:	2b08      	cmp	r3, #8
 800c24e:	db16      	blt.n	800c27e <USBH_ParseDevDesc+0x94>
 800c250:	3b08      	subs	r3, #8
 800c252:	2201      	movs	r2, #1
 800c254:	fa02 f303 	lsl.w	r3, r2, r3
 800c258:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c25c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c260:	2b00      	cmp	r3, #0
 800c262:	bf14      	ite	ne
 800c264:	2301      	movne	r3, #1
 800c266:	2300      	moveq	r3, #0
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d102      	bne.n	800c274 <USBH_ParseDevDesc+0x8a>
 800c26e:	e006      	b.n	800c27e <USBH_ParseDevDesc+0x94>
 800c270:	2b40      	cmp	r3, #64	; 0x40
 800c272:	d104      	bne.n	800c27e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	79da      	ldrb	r2, [r3, #7]
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	71da      	strb	r2, [r3, #7]
      break;
 800c27c:	e003      	b.n	800c286 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2240      	movs	r2, #64	; 0x40
 800c282:	71da      	strb	r2, [r3, #7]
      break;
 800c284:	bf00      	nop
  }

  if (length > 8U)
 800c286:	88fb      	ldrh	r3, [r7, #6]
 800c288:	2b08      	cmp	r3, #8
 800c28a:	d939      	bls.n	800c300 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	3308      	adds	r3, #8
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	b29a      	uxth	r2, r3
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	3309      	adds	r3, #9
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	021b      	lsls	r3, r3, #8
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	b29a      	uxth	r2, r3
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	330a      	adds	r3, #10
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	b29a      	uxth	r2, r3
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	330b      	adds	r3, #11
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	021b      	lsls	r3, r3, #8
 800c2ba:	b29b      	uxth	r3, r3
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	b29a      	uxth	r2, r3
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	330c      	adds	r3, #12
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	b29a      	uxth	r2, r3
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	330d      	adds	r3, #13
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	021b      	lsls	r3, r3, #8
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	b29a      	uxth	r2, r3
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	7b9a      	ldrb	r2, [r3, #14]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	7bda      	ldrb	r2, [r3, #15]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	7c1a      	ldrb	r2, [r3, #16]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	7c5a      	ldrb	r2, [r3, #17]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	745a      	strb	r2, [r3, #17]
  }
}
 800c300:	bf00      	nop
 800c302:	3714      	adds	r7, #20
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr

0800c30c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b08c      	sub	sp, #48	; 0x30
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	4613      	mov	r3, r2
 800c318:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c320:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c322:	2300      	movs	r3, #0
 800c324:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c32c:	2300      	movs	r3, #0
 800c32e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c332:	2300      	movs	r3, #0
 800c334:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	781a      	ldrb	r2, [r3, #0]
 800c340:	6a3b      	ldr	r3, [r7, #32]
 800c342:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	785a      	ldrb	r2, [r3, #1]
 800c348:	6a3b      	ldr	r3, [r7, #32]
 800c34a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	3302      	adds	r3, #2
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	b29a      	uxth	r2, r3
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	3303      	adds	r3, #3
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	021b      	lsls	r3, r3, #8
 800c35e:	b29b      	uxth	r3, r3
 800c360:	4313      	orrs	r3, r2
 800c362:	b29b      	uxth	r3, r3
 800c364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c368:	bf28      	it	cs
 800c36a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c36e:	b29a      	uxth	r2, r3
 800c370:	6a3b      	ldr	r3, [r7, #32]
 800c372:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	791a      	ldrb	r2, [r3, #4]
 800c378:	6a3b      	ldr	r3, [r7, #32]
 800c37a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	795a      	ldrb	r2, [r3, #5]
 800c380:	6a3b      	ldr	r3, [r7, #32]
 800c382:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	799a      	ldrb	r2, [r3, #6]
 800c388:	6a3b      	ldr	r3, [r7, #32]
 800c38a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	79da      	ldrb	r2, [r3, #7]
 800c390:	6a3b      	ldr	r3, [r7, #32]
 800c392:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	7a1a      	ldrb	r2, [r3, #8]
 800c398:	6a3b      	ldr	r3, [r7, #32]
 800c39a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800c39c:	6a3b      	ldr	r3, [r7, #32]
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	2b09      	cmp	r3, #9
 800c3a2:	d002      	beq.n	800c3aa <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c3a4:	6a3b      	ldr	r3, [r7, #32]
 800c3a6:	2209      	movs	r2, #9
 800c3a8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c3aa:	88fb      	ldrh	r3, [r7, #6]
 800c3ac:	2b09      	cmp	r3, #9
 800c3ae:	f240 809d 	bls.w	800c4ec <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800c3b2:	2309      	movs	r3, #9
 800c3b4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c3ba:	e081      	b.n	800c4c0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c3bc:	f107 0316 	add.w	r3, r7, #22
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3c4:	f000 f99f 	bl	800c706 <USBH_GetNextDesc>
 800c3c8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3cc:	785b      	ldrb	r3, [r3, #1]
 800c3ce:	2b04      	cmp	r3, #4
 800c3d0:	d176      	bne.n	800c4c0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	2b09      	cmp	r3, #9
 800c3d8:	d002      	beq.n	800c3e0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3dc:	2209      	movs	r2, #9
 800c3de:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c3e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3e4:	221a      	movs	r2, #26
 800c3e6:	fb02 f303 	mul.w	r3, r2, r3
 800c3ea:	3308      	adds	r3, #8
 800c3ec:	6a3a      	ldr	r2, [r7, #32]
 800c3ee:	4413      	add	r3, r2
 800c3f0:	3302      	adds	r3, #2
 800c3f2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c3f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3f6:	69f8      	ldr	r0, [r7, #28]
 800c3f8:	f000 f87e 	bl	800c4f8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c402:	2300      	movs	r3, #0
 800c404:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c406:	e043      	b.n	800c490 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c408:	f107 0316 	add.w	r3, r7, #22
 800c40c:	4619      	mov	r1, r3
 800c40e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c410:	f000 f979 	bl	800c706 <USBH_GetNextDesc>
 800c414:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c418:	785b      	ldrb	r3, [r3, #1]
 800c41a:	2b05      	cmp	r3, #5
 800c41c:	d138      	bne.n	800c490 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800c41e:	69fb      	ldr	r3, [r7, #28]
 800c420:	795b      	ldrb	r3, [r3, #5]
 800c422:	2b01      	cmp	r3, #1
 800c424:	d10f      	bne.n	800c446 <USBH_ParseCfgDesc+0x13a>
 800c426:	69fb      	ldr	r3, [r7, #28]
 800c428:	799b      	ldrb	r3, [r3, #6]
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d10b      	bne.n	800c446 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	79db      	ldrb	r3, [r3, #7]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d10f      	bne.n	800c456 <USBH_ParseCfgDesc+0x14a>
 800c436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	2b09      	cmp	r3, #9
 800c43c:	d00b      	beq.n	800c456 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800c43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c440:	2209      	movs	r2, #9
 800c442:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c444:	e007      	b.n	800c456 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800c446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	2b07      	cmp	r3, #7
 800c44c:	d004      	beq.n	800c458 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c450:	2207      	movs	r2, #7
 800c452:	701a      	strb	r2, [r3, #0]
 800c454:	e000      	b.n	800c458 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c456:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c45c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c460:	3201      	adds	r2, #1
 800c462:	00d2      	lsls	r2, r2, #3
 800c464:	211a      	movs	r1, #26
 800c466:	fb01 f303 	mul.w	r3, r1, r3
 800c46a:	4413      	add	r3, r2
 800c46c:	3308      	adds	r3, #8
 800c46e:	6a3a      	ldr	r2, [r7, #32]
 800c470:	4413      	add	r3, r2
 800c472:	3304      	adds	r3, #4
 800c474:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c478:	69b9      	ldr	r1, [r7, #24]
 800c47a:	68f8      	ldr	r0, [r7, #12]
 800c47c:	f000 f86b 	bl	800c556 <USBH_ParseEPDesc>
 800c480:	4603      	mov	r3, r0
 800c482:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c486:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c48a:	3301      	adds	r3, #1
 800c48c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c490:	69fb      	ldr	r3, [r7, #28]
 800c492:	791b      	ldrb	r3, [r3, #4]
 800c494:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c498:	429a      	cmp	r2, r3
 800c49a:	d204      	bcs.n	800c4a6 <USBH_ParseCfgDesc+0x19a>
 800c49c:	6a3b      	ldr	r3, [r7, #32]
 800c49e:	885a      	ldrh	r2, [r3, #2]
 800c4a0:	8afb      	ldrh	r3, [r7, #22]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d8b0      	bhi.n	800c408 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	791b      	ldrb	r3, [r3, #4]
 800c4aa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d201      	bcs.n	800c4b6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800c4b2:	2303      	movs	r3, #3
 800c4b4:	e01c      	b.n	800c4f0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800c4b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c4c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d805      	bhi.n	800c4d4 <USBH_ParseCfgDesc+0x1c8>
 800c4c8:	6a3b      	ldr	r3, [r7, #32]
 800c4ca:	885a      	ldrh	r2, [r3, #2]
 800c4cc:	8afb      	ldrh	r3, [r7, #22]
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	f63f af74 	bhi.w	800c3bc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c4d4:	6a3b      	ldr	r3, [r7, #32]
 800c4d6:	791b      	ldrb	r3, [r3, #4]
 800c4d8:	2b02      	cmp	r3, #2
 800c4da:	bf28      	it	cs
 800c4dc:	2302      	movcs	r3, #2
 800c4de:	b2db      	uxtb	r3, r3
 800c4e0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d201      	bcs.n	800c4ec <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800c4e8:	2303      	movs	r3, #3
 800c4ea:	e001      	b.n	800c4f0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800c4ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3730      	adds	r7, #48	; 0x30
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	781a      	ldrb	r2, [r3, #0]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	785a      	ldrb	r2, [r3, #1]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	789a      	ldrb	r2, [r3, #2]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	78da      	ldrb	r2, [r3, #3]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	791a      	ldrb	r2, [r3, #4]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	795a      	ldrb	r2, [r3, #5]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	799a      	ldrb	r2, [r3, #6]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	79da      	ldrb	r2, [r3, #7]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	7a1a      	ldrb	r2, [r3, #8]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	721a      	strb	r2, [r3, #8]
}
 800c54a:	bf00      	nop
 800c54c:	370c      	adds	r7, #12
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr

0800c556 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800c556:	b480      	push	{r7}
 800c558:	b087      	sub	sp, #28
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	60f8      	str	r0, [r7, #12]
 800c55e:	60b9      	str	r1, [r7, #8]
 800c560:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c562:	2300      	movs	r3, #0
 800c564:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	781a      	ldrb	r2, [r3, #0]
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	785a      	ldrb	r2, [r3, #1]
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	789a      	ldrb	r2, [r3, #2]
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	78da      	ldrb	r2, [r3, #3]
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	3304      	adds	r3, #4
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	b29a      	uxth	r2, r3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	3305      	adds	r3, #5
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	b29b      	uxth	r3, r3
 800c596:	021b      	lsls	r3, r3, #8
 800c598:	b29b      	uxth	r3, r3
 800c59a:	4313      	orrs	r3, r2
 800c59c:	b29a      	uxth	r2, r3
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	799a      	ldrb	r2, [r3, #6]
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	889b      	ldrh	r3, [r3, #4]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d102      	bne.n	800c5b8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	75fb      	strb	r3, [r7, #23]
 800c5b6:	e033      	b.n	800c620 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	889b      	ldrh	r3, [r3, #4]
 800c5bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c5c0:	f023 0307 	bic.w	r3, r3, #7
 800c5c4:	b29a      	uxth	r2, r3
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	889b      	ldrh	r3, [r3, #4]
 800c5ce:	b21a      	sxth	r2, r3
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	3304      	adds	r3, #4
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	b299      	uxth	r1, r3
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	3305      	adds	r3, #5
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	021b      	lsls	r3, r3, #8
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	430b      	orrs	r3, r1
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d110      	bne.n	800c612 <USBH_ParseEPDesc+0xbc>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	3304      	adds	r3, #4
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	b299      	uxth	r1, r3
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	3305      	adds	r3, #5
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	021b      	lsls	r3, r3, #8
 800c602:	b29b      	uxth	r3, r3
 800c604:	430b      	orrs	r3, r1
 800c606:	b29b      	uxth	r3, r3
 800c608:	b21b      	sxth	r3, r3
 800c60a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c60e:	b21b      	sxth	r3, r3
 800c610:	e001      	b.n	800c616 <USBH_ParseEPDesc+0xc0>
 800c612:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c616:	4313      	orrs	r3, r2
 800c618:	b21b      	sxth	r3, r3
 800c61a:	b29a      	uxth	r2, r3
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c626:	2b00      	cmp	r3, #0
 800c628:	d116      	bne.n	800c658 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	78db      	ldrb	r3, [r3, #3]
 800c62e:	f003 0303 	and.w	r3, r3, #3
 800c632:	2b01      	cmp	r3, #1
 800c634:	d005      	beq.n	800c642 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	78db      	ldrb	r3, [r3, #3]
 800c63a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c63e:	2b03      	cmp	r3, #3
 800c640:	d127      	bne.n	800c692 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	799b      	ldrb	r3, [r3, #6]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d003      	beq.n	800c652 <USBH_ParseEPDesc+0xfc>
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	799b      	ldrb	r3, [r3, #6]
 800c64e:	2b10      	cmp	r3, #16
 800c650:	d91f      	bls.n	800c692 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c652:	2303      	movs	r3, #3
 800c654:	75fb      	strb	r3, [r7, #23]
 800c656:	e01c      	b.n	800c692 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	78db      	ldrb	r3, [r3, #3]
 800c65c:	f003 0303 	and.w	r3, r3, #3
 800c660:	2b01      	cmp	r3, #1
 800c662:	d10a      	bne.n	800c67a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	799b      	ldrb	r3, [r3, #6]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d003      	beq.n	800c674 <USBH_ParseEPDesc+0x11e>
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	799b      	ldrb	r3, [r3, #6]
 800c670:	2b10      	cmp	r3, #16
 800c672:	d90e      	bls.n	800c692 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c674:	2303      	movs	r3, #3
 800c676:	75fb      	strb	r3, [r7, #23]
 800c678:	e00b      	b.n	800c692 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	78db      	ldrb	r3, [r3, #3]
 800c67e:	f003 0303 	and.w	r3, r3, #3
 800c682:	2b03      	cmp	r3, #3
 800c684:	d105      	bne.n	800c692 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	799b      	ldrb	r3, [r3, #6]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d101      	bne.n	800c692 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c68e:	2303      	movs	r3, #3
 800c690:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800c692:	7dfb      	ldrb	r3, [r7, #23]
}
 800c694:	4618      	mov	r0, r3
 800c696:	371c      	adds	r7, #28
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b087      	sub	sp, #28
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	60f8      	str	r0, [r7, #12]
 800c6a8:	60b9      	str	r1, [r7, #8]
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	2b03      	cmp	r3, #3
 800c6b6:	d120      	bne.n	800c6fa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	1e9a      	subs	r2, r3, #2
 800c6be:	88fb      	ldrh	r3, [r7, #6]
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	bf28      	it	cs
 800c6c4:	4613      	movcs	r3, r2
 800c6c6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	3302      	adds	r3, #2
 800c6cc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	82fb      	strh	r3, [r7, #22]
 800c6d2:	e00b      	b.n	800c6ec <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c6d4:	8afb      	ldrh	r3, [r7, #22]
 800c6d6:	68fa      	ldr	r2, [r7, #12]
 800c6d8:	4413      	add	r3, r2
 800c6da:	781a      	ldrb	r2, [r3, #0]
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c6e6:	8afb      	ldrh	r3, [r7, #22]
 800c6e8:	3302      	adds	r3, #2
 800c6ea:	82fb      	strh	r3, [r7, #22]
 800c6ec:	8afa      	ldrh	r2, [r7, #22]
 800c6ee:	8abb      	ldrh	r3, [r7, #20]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d3ef      	bcc.n	800c6d4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	701a      	strb	r2, [r3, #0]
  }
}
 800c6fa:	bf00      	nop
 800c6fc:	371c      	adds	r7, #28
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr

0800c706 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c706:	b480      	push	{r7}
 800c708:	b085      	sub	sp, #20
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
 800c70e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	881a      	ldrh	r2, [r3, #0]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	b29b      	uxth	r3, r3
 800c71a:	4413      	add	r3, r2
 800c71c:	b29a      	uxth	r2, r3
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	4413      	add	r3, r2
 800c72c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c72e:	68fb      	ldr	r3, [r7, #12]
}
 800c730:	4618      	mov	r0, r3
 800c732:	3714      	adds	r7, #20
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr

0800c73c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b086      	sub	sp, #24
 800c740:	af00      	add	r7, sp, #0
 800c742:	60f8      	str	r0, [r7, #12]
 800c744:	60b9      	str	r1, [r7, #8]
 800c746:	4613      	mov	r3, r2
 800c748:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c74a:	2301      	movs	r3, #1
 800c74c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	789b      	ldrb	r3, [r3, #2]
 800c752:	2b01      	cmp	r3, #1
 800c754:	d002      	beq.n	800c75c <USBH_CtlReq+0x20>
 800c756:	2b02      	cmp	r3, #2
 800c758:	d01d      	beq.n	800c796 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800c75a:	e043      	b.n	800c7e4 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	68ba      	ldr	r2, [r7, #8]
 800c760:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	88fa      	ldrh	r2, [r7, #6]
 800c766:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2201      	movs	r2, #1
 800c76c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	2202      	movs	r2, #2
 800c772:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c774:	2301      	movs	r3, #1
 800c776:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	2203      	movs	r2, #3
 800c77c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c78c:	2200      	movs	r2, #0
 800c78e:	4619      	mov	r1, r3
 800c790:	f005 fb3e 	bl	8011e10 <osMessagePut>
      break;
 800c794:	e026      	b.n	800c7e4 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800c796:	68f8      	ldr	r0, [r7, #12]
 800c798:	f000 f82a 	bl	800c7f0 <USBH_HandleControl>
 800c79c:	4603      	mov	r3, r0
 800c79e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c7a0:	7dfb      	ldrb	r3, [r7, #23]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d002      	beq.n	800c7ac <USBH_CtlReq+0x70>
 800c7a6:	7dfb      	ldrb	r3, [r7, #23]
 800c7a8:	2b03      	cmp	r3, #3
 800c7aa:	d106      	bne.n	800c7ba <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	761a      	strb	r2, [r3, #24]
 800c7b8:	e005      	b.n	800c7c6 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800c7ba:	7dfb      	ldrb	r3, [r7, #23]
 800c7bc:	2b02      	cmp	r3, #2
 800c7be:	d102      	bne.n	800c7c6 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2203      	movs	r2, #3
 800c7ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c7da:	2200      	movs	r2, #0
 800c7dc:	4619      	mov	r1, r3
 800c7de:	f005 fb17 	bl	8011e10 <osMessagePut>
      break;
 800c7e2:	bf00      	nop
  }
  return status;
 800c7e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3718      	adds	r7, #24
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
	...

0800c7f0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b086      	sub	sp, #24
 800c7f4:	af02      	add	r7, sp, #8
 800c7f6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	7e1b      	ldrb	r3, [r3, #24]
 800c804:	3b01      	subs	r3, #1
 800c806:	2b0a      	cmp	r3, #10
 800c808:	f200 8229 	bhi.w	800cc5e <USBH_HandleControl+0x46e>
 800c80c:	a201      	add	r2, pc, #4	; (adr r2, 800c814 <USBH_HandleControl+0x24>)
 800c80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c812:	bf00      	nop
 800c814:	0800c841 	.word	0x0800c841
 800c818:	0800c85b 	.word	0x0800c85b
 800c81c:	0800c8fd 	.word	0x0800c8fd
 800c820:	0800c923 	.word	0x0800c923
 800c824:	0800c9af 	.word	0x0800c9af
 800c828:	0800c9d9 	.word	0x0800c9d9
 800c82c:	0800ca9b 	.word	0x0800ca9b
 800c830:	0800cabd 	.word	0x0800cabd
 800c834:	0800cb4f 	.word	0x0800cb4f
 800c838:	0800cb75 	.word	0x0800cb75
 800c83c:	0800cc07 	.word	0x0800cc07
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f103 0110 	add.w	r1, r3, #16
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	795b      	ldrb	r3, [r3, #5]
 800c84a:	461a      	mov	r2, r3
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 fa17 	bl	800cc80 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2202      	movs	r2, #2
 800c856:	761a      	strb	r2, [r3, #24]
      break;
 800c858:	e20c      	b.n	800cc74 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	795b      	ldrb	r3, [r3, #5]
 800c85e:	4619      	mov	r1, r3
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f007 ff7b 	bl	801475c <USBH_LL_GetURBState>
 800c866:	4603      	mov	r3, r0
 800c868:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c86a:	7bbb      	ldrb	r3, [r7, #14]
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d12c      	bne.n	800c8ca <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	7c1b      	ldrb	r3, [r3, #16]
 800c874:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c878:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	8adb      	ldrh	r3, [r3, #22]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d00a      	beq.n	800c898 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c882:	7b7b      	ldrb	r3, [r7, #13]
 800c884:	2b80      	cmp	r3, #128	; 0x80
 800c886:	d103      	bne.n	800c890 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2203      	movs	r2, #3
 800c88c:	761a      	strb	r2, [r3, #24]
 800c88e:	e00d      	b.n	800c8ac <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2205      	movs	r2, #5
 800c894:	761a      	strb	r2, [r3, #24]
 800c896:	e009      	b.n	800c8ac <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800c898:	7b7b      	ldrb	r3, [r7, #13]
 800c89a:	2b80      	cmp	r3, #128	; 0x80
 800c89c:	d103      	bne.n	800c8a6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2209      	movs	r2, #9
 800c8a2:	761a      	strb	r2, [r3, #24]
 800c8a4:	e002      	b.n	800c8ac <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2207      	movs	r2, #7
 800c8aa:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2203      	movs	r2, #3
 800c8b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	f005 faa4 	bl	8011e10 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c8c8:	e1cb      	b.n	800cc62 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c8ca:	7bbb      	ldrb	r3, [r7, #14]
 800c8cc:	2b04      	cmp	r3, #4
 800c8ce:	d003      	beq.n	800c8d8 <USBH_HandleControl+0xe8>
 800c8d0:	7bbb      	ldrb	r3, [r7, #14]
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	f040 81c5 	bne.w	800cc62 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	220b      	movs	r2, #11
 800c8dc:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2203      	movs	r2, #3
 800c8e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	f005 fa8b 	bl	8011e10 <osMessagePut>
      break;
 800c8fa:	e1b2      	b.n	800cc62 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c902:	b29a      	uxth	r2, r3
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6899      	ldr	r1, [r3, #8]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	899a      	ldrh	r2, [r3, #12]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	791b      	ldrb	r3, [r3, #4]
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f000 f9f2 	bl	800ccfe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2204      	movs	r2, #4
 800c91e:	761a      	strb	r2, [r3, #24]
      break;
 800c920:	e1a8      	b.n	800cc74 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	791b      	ldrb	r3, [r3, #4]
 800c926:	4619      	mov	r1, r3
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f007 ff17 	bl	801475c <USBH_LL_GetURBState>
 800c92e:	4603      	mov	r3, r0
 800c930:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c932:	7bbb      	ldrb	r3, [r7, #14]
 800c934:	2b01      	cmp	r3, #1
 800c936:	d110      	bne.n	800c95a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2209      	movs	r2, #9
 800c93c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2203      	movs	r2, #3
 800c942:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c952:	2200      	movs	r2, #0
 800c954:	4619      	mov	r1, r3
 800c956:	f005 fa5b 	bl	8011e10 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c95a:	7bbb      	ldrb	r3, [r7, #14]
 800c95c:	2b05      	cmp	r3, #5
 800c95e:	d110      	bne.n	800c982 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c960:	2303      	movs	r3, #3
 800c962:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2203      	movs	r2, #3
 800c968:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c978:	2200      	movs	r2, #0
 800c97a:	4619      	mov	r1, r3
 800c97c:	f005 fa48 	bl	8011e10 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c980:	e171      	b.n	800cc66 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800c982:	7bbb      	ldrb	r3, [r7, #14]
 800c984:	2b04      	cmp	r3, #4
 800c986:	f040 816e 	bne.w	800cc66 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	220b      	movs	r2, #11
 800c98e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2203      	movs	r2, #3
 800c994:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	4619      	mov	r1, r3
 800c9a8:	f005 fa32 	bl	8011e10 <osMessagePut>
      break;
 800c9ac:	e15b      	b.n	800cc66 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6899      	ldr	r1, [r3, #8]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	899a      	ldrh	r2, [r3, #12]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	795b      	ldrb	r3, [r3, #5]
 800c9ba:	2001      	movs	r0, #1
 800c9bc:	9000      	str	r0, [sp, #0]
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f000 f978 	bl	800ccb4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2206      	movs	r2, #6
 800c9d4:	761a      	strb	r2, [r3, #24]
      break;
 800c9d6:	e14d      	b.n	800cc74 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	795b      	ldrb	r3, [r3, #5]
 800c9dc:	4619      	mov	r1, r3
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f007 febc 	bl	801475c <USBH_LL_GetURBState>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c9e8:	7bbb      	ldrb	r3, [r7, #14]
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	d111      	bne.n	800ca12 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2207      	movs	r2, #7
 800c9f2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2203      	movs	r2, #3
 800c9f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ca08:	2200      	movs	r2, #0
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	f005 fa00 	bl	8011e10 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ca10:	e12b      	b.n	800cc6a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800ca12:	7bbb      	ldrb	r3, [r7, #14]
 800ca14:	2b05      	cmp	r3, #5
 800ca16:	d113      	bne.n	800ca40 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	220c      	movs	r2, #12
 800ca1c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ca1e:	2303      	movs	r3, #3
 800ca20:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2203      	movs	r2, #3
 800ca26:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ca36:	2200      	movs	r2, #0
 800ca38:	4619      	mov	r1, r3
 800ca3a:	f005 f9e9 	bl	8011e10 <osMessagePut>
      break;
 800ca3e:	e114      	b.n	800cc6a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ca40:	7bbb      	ldrb	r3, [r7, #14]
 800ca42:	2b02      	cmp	r3, #2
 800ca44:	d111      	bne.n	800ca6a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2205      	movs	r2, #5
 800ca4a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2203      	movs	r2, #3
 800ca50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ca60:	2200      	movs	r2, #0
 800ca62:	4619      	mov	r1, r3
 800ca64:	f005 f9d4 	bl	8011e10 <osMessagePut>
      break;
 800ca68:	e0ff      	b.n	800cc6a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800ca6a:	7bbb      	ldrb	r3, [r7, #14]
 800ca6c:	2b04      	cmp	r3, #4
 800ca6e:	f040 80fc 	bne.w	800cc6a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	220b      	movs	r2, #11
 800ca76:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ca78:	2302      	movs	r3, #2
 800ca7a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2203      	movs	r2, #3
 800ca80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ca90:	2200      	movs	r2, #0
 800ca92:	4619      	mov	r1, r3
 800ca94:	f005 f9bc 	bl	8011e10 <osMessagePut>
      break;
 800ca98:	e0e7      	b.n	800cc6a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	791b      	ldrb	r3, [r3, #4]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	2100      	movs	r1, #0
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f000 f92b 	bl	800ccfe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800caae:	b29a      	uxth	r2, r3
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2208      	movs	r2, #8
 800cab8:	761a      	strb	r2, [r3, #24]

      break;
 800caba:	e0db      	b.n	800cc74 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	791b      	ldrb	r3, [r3, #4]
 800cac0:	4619      	mov	r1, r3
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f007 fe4a 	bl	801475c <USBH_LL_GetURBState>
 800cac8:	4603      	mov	r3, r0
 800caca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cacc:	7bbb      	ldrb	r3, [r7, #14]
 800cace:	2b01      	cmp	r3, #1
 800cad0:	d113      	bne.n	800cafa <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	220d      	movs	r2, #13
 800cad6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cad8:	2300      	movs	r3, #0
 800cada:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2203      	movs	r2, #3
 800cae0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800caf0:	2200      	movs	r2, #0
 800caf2:	4619      	mov	r1, r3
 800caf4:	f005 f98c 	bl	8011e10 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800caf8:	e0b9      	b.n	800cc6e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800cafa:	7bbb      	ldrb	r3, [r7, #14]
 800cafc:	2b04      	cmp	r3, #4
 800cafe:	d111      	bne.n	800cb24 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	220b      	movs	r2, #11
 800cb04:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2203      	movs	r2, #3
 800cb0a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	f005 f977 	bl	8011e10 <osMessagePut>
      break;
 800cb22:	e0a4      	b.n	800cc6e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800cb24:	7bbb      	ldrb	r3, [r7, #14]
 800cb26:	2b05      	cmp	r3, #5
 800cb28:	f040 80a1 	bne.w	800cc6e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800cb2c:	2303      	movs	r3, #3
 800cb2e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2203      	movs	r2, #3
 800cb34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cb44:	2200      	movs	r2, #0
 800cb46:	4619      	mov	r1, r3
 800cb48:	f005 f962 	bl	8011e10 <osMessagePut>
      break;
 800cb4c:	e08f      	b.n	800cc6e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	795b      	ldrb	r3, [r3, #5]
 800cb52:	2201      	movs	r2, #1
 800cb54:	9200      	str	r2, [sp, #0]
 800cb56:	2200      	movs	r2, #0
 800cb58:	2100      	movs	r1, #0
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f000 f8aa 	bl	800ccb4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cb66:	b29a      	uxth	r2, r3
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	220a      	movs	r2, #10
 800cb70:	761a      	strb	r2, [r3, #24]
      break;
 800cb72:	e07f      	b.n	800cc74 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	795b      	ldrb	r3, [r3, #5]
 800cb78:	4619      	mov	r1, r3
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f007 fdee 	bl	801475c <USBH_LL_GetURBState>
 800cb80:	4603      	mov	r3, r0
 800cb82:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cb84:	7bbb      	ldrb	r3, [r7, #14]
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	d113      	bne.n	800cbb2 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	220d      	movs	r2, #13
 800cb92:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2203      	movs	r2, #3
 800cb98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cba8:	2200      	movs	r2, #0
 800cbaa:	4619      	mov	r1, r3
 800cbac:	f005 f930 	bl	8011e10 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cbb0:	e05f      	b.n	800cc72 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cbb2:	7bbb      	ldrb	r3, [r7, #14]
 800cbb4:	2b02      	cmp	r3, #2
 800cbb6:	d111      	bne.n	800cbdc <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2209      	movs	r2, #9
 800cbbc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2203      	movs	r2, #3
 800cbc2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	f005 f91b 	bl	8011e10 <osMessagePut>
      break;
 800cbda:	e04a      	b.n	800cc72 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800cbdc:	7bbb      	ldrb	r3, [r7, #14]
 800cbde:	2b04      	cmp	r3, #4
 800cbe0:	d147      	bne.n	800cc72 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	220b      	movs	r2, #11
 800cbe6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2203      	movs	r2, #3
 800cbec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	4619      	mov	r1, r3
 800cc00:	f005 f906 	bl	8011e10 <osMessagePut>
      break;
 800cc04:	e035      	b.n	800cc72 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	7e5b      	ldrb	r3, [r3, #25]
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	b2da      	uxtb	r2, r3
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	765a      	strb	r2, [r3, #25]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	7e5b      	ldrb	r3, [r3, #25]
 800cc16:	2b02      	cmp	r3, #2
 800cc18:	d806      	bhi.n	800cc28 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2201      	movs	r2, #1
 800cc1e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2201      	movs	r2, #1
 800cc24:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cc26:	e025      	b.n	800cc74 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc2e:	2106      	movs	r1, #6
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2200      	movs	r2, #0
 800cc38:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	795b      	ldrb	r3, [r3, #5]
 800cc3e:	4619      	mov	r1, r3
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f000 f90d 	bl	800ce60 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	791b      	ldrb	r3, [r3, #4]
 800cc4a:	4619      	mov	r1, r3
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 f907 	bl	800ce60 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2200      	movs	r2, #0
 800cc56:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cc58:	2302      	movs	r3, #2
 800cc5a:	73fb      	strb	r3, [r7, #15]
      break;
 800cc5c:	e00a      	b.n	800cc74 <USBH_HandleControl+0x484>

    default:
      break;
 800cc5e:	bf00      	nop
 800cc60:	e008      	b.n	800cc74 <USBH_HandleControl+0x484>
      break;
 800cc62:	bf00      	nop
 800cc64:	e006      	b.n	800cc74 <USBH_HandleControl+0x484>
      break;
 800cc66:	bf00      	nop
 800cc68:	e004      	b.n	800cc74 <USBH_HandleControl+0x484>
      break;
 800cc6a:	bf00      	nop
 800cc6c:	e002      	b.n	800cc74 <USBH_HandleControl+0x484>
      break;
 800cc6e:	bf00      	nop
 800cc70:	e000      	b.n	800cc74 <USBH_HandleControl+0x484>
      break;
 800cc72:	bf00      	nop
  }

  return status;
 800cc74:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3710      	adds	r7, #16
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop

0800cc80 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b088      	sub	sp, #32
 800cc84:	af04      	add	r7, sp, #16
 800cc86:	60f8      	str	r0, [r7, #12]
 800cc88:	60b9      	str	r1, [r7, #8]
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cc8e:	79f9      	ldrb	r1, [r7, #7]
 800cc90:	2300      	movs	r3, #0
 800cc92:	9303      	str	r3, [sp, #12]
 800cc94:	2308      	movs	r3, #8
 800cc96:	9302      	str	r3, [sp, #8]
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	9301      	str	r3, [sp, #4]
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	9300      	str	r3, [sp, #0]
 800cca0:	2300      	movs	r3, #0
 800cca2:	2200      	movs	r2, #0
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	f007 fd28 	bl	80146fa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ccaa:	2300      	movs	r3, #0
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3710      	adds	r7, #16
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b088      	sub	sp, #32
 800ccb8:	af04      	add	r7, sp, #16
 800ccba:	60f8      	str	r0, [r7, #12]
 800ccbc:	60b9      	str	r1, [r7, #8]
 800ccbe:	4611      	mov	r1, r2
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	80fb      	strh	r3, [r7, #6]
 800ccc6:	4613      	mov	r3, r2
 800ccc8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d001      	beq.n	800ccd8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ccd8:	7979      	ldrb	r1, [r7, #5]
 800ccda:	7e3b      	ldrb	r3, [r7, #24]
 800ccdc:	9303      	str	r3, [sp, #12]
 800ccde:	88fb      	ldrh	r3, [r7, #6]
 800cce0:	9302      	str	r3, [sp, #8]
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	9301      	str	r3, [sp, #4]
 800cce6:	2301      	movs	r3, #1
 800cce8:	9300      	str	r3, [sp, #0]
 800ccea:	2300      	movs	r3, #0
 800ccec:	2200      	movs	r2, #0
 800ccee:	68f8      	ldr	r0, [r7, #12]
 800ccf0:	f007 fd03 	bl	80146fa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ccf4:	2300      	movs	r3, #0
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3710      	adds	r7, #16
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}

0800ccfe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b088      	sub	sp, #32
 800cd02:	af04      	add	r7, sp, #16
 800cd04:	60f8      	str	r0, [r7, #12]
 800cd06:	60b9      	str	r1, [r7, #8]
 800cd08:	4611      	mov	r1, r2
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	80fb      	strh	r3, [r7, #6]
 800cd10:	4613      	mov	r3, r2
 800cd12:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cd14:	7979      	ldrb	r1, [r7, #5]
 800cd16:	2300      	movs	r3, #0
 800cd18:	9303      	str	r3, [sp, #12]
 800cd1a:	88fb      	ldrh	r3, [r7, #6]
 800cd1c:	9302      	str	r3, [sp, #8]
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	9301      	str	r3, [sp, #4]
 800cd22:	2301      	movs	r3, #1
 800cd24:	9300      	str	r3, [sp, #0]
 800cd26:	2300      	movs	r3, #0
 800cd28:	2201      	movs	r2, #1
 800cd2a:	68f8      	ldr	r0, [r7, #12]
 800cd2c:	f007 fce5 	bl	80146fa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cd30:	2300      	movs	r3, #0

}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3710      	adds	r7, #16
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}

0800cd3a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b088      	sub	sp, #32
 800cd3e:	af04      	add	r7, sp, #16
 800cd40:	60f8      	str	r0, [r7, #12]
 800cd42:	60b9      	str	r1, [r7, #8]
 800cd44:	4611      	mov	r1, r2
 800cd46:	461a      	mov	r2, r3
 800cd48:	460b      	mov	r3, r1
 800cd4a:	80fb      	strh	r3, [r7, #6]
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d001      	beq.n	800cd5e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cd5e:	7979      	ldrb	r1, [r7, #5]
 800cd60:	7e3b      	ldrb	r3, [r7, #24]
 800cd62:	9303      	str	r3, [sp, #12]
 800cd64:	88fb      	ldrh	r3, [r7, #6]
 800cd66:	9302      	str	r3, [sp, #8]
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	9301      	str	r3, [sp, #4]
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	9300      	str	r3, [sp, #0]
 800cd70:	2302      	movs	r3, #2
 800cd72:	2200      	movs	r2, #0
 800cd74:	68f8      	ldr	r0, [r7, #12]
 800cd76:	f007 fcc0 	bl	80146fa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800cd7a:	2300      	movs	r3, #0
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3710      	adds	r7, #16
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b088      	sub	sp, #32
 800cd88:	af04      	add	r7, sp, #16
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	4611      	mov	r1, r2
 800cd90:	461a      	mov	r2, r3
 800cd92:	460b      	mov	r3, r1
 800cd94:	80fb      	strh	r3, [r7, #6]
 800cd96:	4613      	mov	r3, r2
 800cd98:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cd9a:	7979      	ldrb	r1, [r7, #5]
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	9303      	str	r3, [sp, #12]
 800cda0:	88fb      	ldrh	r3, [r7, #6]
 800cda2:	9302      	str	r3, [sp, #8]
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	9301      	str	r3, [sp, #4]
 800cda8:	2301      	movs	r3, #1
 800cdaa:	9300      	str	r3, [sp, #0]
 800cdac:	2302      	movs	r3, #2
 800cdae:	2201      	movs	r2, #1
 800cdb0:	68f8      	ldr	r0, [r7, #12]
 800cdb2:	f007 fca2 	bl	80146fa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cdb6:	2300      	movs	r3, #0
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3710      	adds	r7, #16
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b086      	sub	sp, #24
 800cdc4:	af04      	add	r7, sp, #16
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	4608      	mov	r0, r1
 800cdca:	4611      	mov	r1, r2
 800cdcc:	461a      	mov	r2, r3
 800cdce:	4603      	mov	r3, r0
 800cdd0:	70fb      	strb	r3, [r7, #3]
 800cdd2:	460b      	mov	r3, r1
 800cdd4:	70bb      	strb	r3, [r7, #2]
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800cdda:	7878      	ldrb	r0, [r7, #1]
 800cddc:	78ba      	ldrb	r2, [r7, #2]
 800cdde:	78f9      	ldrb	r1, [r7, #3]
 800cde0:	8b3b      	ldrh	r3, [r7, #24]
 800cde2:	9302      	str	r3, [sp, #8]
 800cde4:	7d3b      	ldrb	r3, [r7, #20]
 800cde6:	9301      	str	r3, [sp, #4]
 800cde8:	7c3b      	ldrb	r3, [r7, #16]
 800cdea:	9300      	str	r3, [sp, #0]
 800cdec:	4603      	mov	r3, r0
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f007 fc35 	bl	801465e <USBH_LL_OpenPipe>

  return USBH_OK;
 800cdf4:	2300      	movs	r3, #0
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3708      	adds	r7, #8
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}

0800cdfe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800cdfe:	b580      	push	{r7, lr}
 800ce00:	b082      	sub	sp, #8
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
 800ce06:	460b      	mov	r3, r1
 800ce08:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ce0a:	78fb      	ldrb	r3, [r7, #3]
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f007 fc54 	bl	80146bc <USBH_LL_ClosePipe>

  return USBH_OK;
 800ce14:	2300      	movs	r3, #0
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3708      	adds	r7, #8
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}

0800ce1e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b084      	sub	sp, #16
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
 800ce26:	460b      	mov	r3, r1
 800ce28:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 f836 	bl	800ce9c <USBH_GetFreePipe>
 800ce30:	4603      	mov	r3, r0
 800ce32:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ce34:	89fb      	ldrh	r3, [r7, #14]
 800ce36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d00a      	beq.n	800ce54 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ce3e:	78fa      	ldrb	r2, [r7, #3]
 800ce40:	89fb      	ldrh	r3, [r7, #14]
 800ce42:	f003 030f 	and.w	r3, r3, #15
 800ce46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ce4a:	6879      	ldr	r1, [r7, #4]
 800ce4c:	33e0      	adds	r3, #224	; 0xe0
 800ce4e:	009b      	lsls	r3, r3, #2
 800ce50:	440b      	add	r3, r1
 800ce52:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ce54:	89fb      	ldrh	r3, [r7, #14]
 800ce56:	b2db      	uxtb	r3, r3
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3710      	adds	r7, #16
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}

0800ce60 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b083      	sub	sp, #12
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	460b      	mov	r3, r1
 800ce6a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ce6c:	78fb      	ldrb	r3, [r7, #3]
 800ce6e:	2b0f      	cmp	r3, #15
 800ce70:	d80d      	bhi.n	800ce8e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ce72:	78fb      	ldrb	r3, [r7, #3]
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	33e0      	adds	r3, #224	; 0xe0
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	4413      	add	r3, r2
 800ce7c:	685a      	ldr	r2, [r3, #4]
 800ce7e:	78fb      	ldrb	r3, [r7, #3]
 800ce80:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ce84:	6879      	ldr	r1, [r7, #4]
 800ce86:	33e0      	adds	r3, #224	; 0xe0
 800ce88:	009b      	lsls	r3, r3, #2
 800ce8a:	440b      	add	r3, r1
 800ce8c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ce8e:	2300      	movs	r3, #0
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	370c      	adds	r7, #12
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr

0800ce9c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b085      	sub	sp, #20
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800cea4:	2300      	movs	r3, #0
 800cea6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800cea8:	2300      	movs	r3, #0
 800ceaa:	73fb      	strb	r3, [r7, #15]
 800ceac:	e00f      	b.n	800cece <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ceae:	7bfb      	ldrb	r3, [r7, #15]
 800ceb0:	687a      	ldr	r2, [r7, #4]
 800ceb2:	33e0      	adds	r3, #224	; 0xe0
 800ceb4:	009b      	lsls	r3, r3, #2
 800ceb6:	4413      	add	r3, r2
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d102      	bne.n	800cec8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800cec2:	7bfb      	ldrb	r3, [r7, #15]
 800cec4:	b29b      	uxth	r3, r3
 800cec6:	e007      	b.n	800ced8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800cec8:	7bfb      	ldrb	r3, [r7, #15]
 800ceca:	3301      	adds	r3, #1
 800cecc:	73fb      	strb	r3, [r7, #15]
 800cece:	7bfb      	ldrb	r3, [r7, #15]
 800ced0:	2b0f      	cmp	r3, #15
 800ced2:	d9ec      	bls.n	800ceae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ced4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3714      	adds	r7, #20
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	4770      	bx	lr

0800cee4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	4603      	mov	r3, r0
 800ceec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ceee:	79fb      	ldrb	r3, [r7, #7]
 800cef0:	4a08      	ldr	r2, [pc, #32]	; (800cf14 <disk_status+0x30>)
 800cef2:	009b      	lsls	r3, r3, #2
 800cef4:	4413      	add	r3, r2
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	685b      	ldr	r3, [r3, #4]
 800cefa:	79fa      	ldrb	r2, [r7, #7]
 800cefc:	4905      	ldr	r1, [pc, #20]	; (800cf14 <disk_status+0x30>)
 800cefe:	440a      	add	r2, r1
 800cf00:	7d12      	ldrb	r2, [r2, #20]
 800cf02:	4610      	mov	r0, r2
 800cf04:	4798      	blx	r3
 800cf06:	4603      	mov	r3, r0
 800cf08:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cf0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3710      	adds	r7, #16
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}
 800cf14:	200022ec 	.word	0x200022ec

0800cf18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b084      	sub	sp, #16
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	4603      	mov	r3, r0
 800cf20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cf22:	2300      	movs	r3, #0
 800cf24:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cf26:	79fb      	ldrb	r3, [r7, #7]
 800cf28:	4a0d      	ldr	r2, [pc, #52]	; (800cf60 <disk_initialize+0x48>)
 800cf2a:	5cd3      	ldrb	r3, [r2, r3]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d111      	bne.n	800cf54 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cf30:	79fb      	ldrb	r3, [r7, #7]
 800cf32:	4a0b      	ldr	r2, [pc, #44]	; (800cf60 <disk_initialize+0x48>)
 800cf34:	2101      	movs	r1, #1
 800cf36:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cf38:	79fb      	ldrb	r3, [r7, #7]
 800cf3a:	4a09      	ldr	r2, [pc, #36]	; (800cf60 <disk_initialize+0x48>)
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	4413      	add	r3, r2
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	79fa      	ldrb	r2, [r7, #7]
 800cf46:	4906      	ldr	r1, [pc, #24]	; (800cf60 <disk_initialize+0x48>)
 800cf48:	440a      	add	r2, r1
 800cf4a:	7d12      	ldrb	r2, [r2, #20]
 800cf4c:	4610      	mov	r0, r2
 800cf4e:	4798      	blx	r3
 800cf50:	4603      	mov	r3, r0
 800cf52:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cf54:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3710      	adds	r7, #16
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}
 800cf5e:	bf00      	nop
 800cf60:	200022ec 	.word	0x200022ec

0800cf64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cf64:	b590      	push	{r4, r7, lr}
 800cf66:	b087      	sub	sp, #28
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	60b9      	str	r1, [r7, #8]
 800cf6c:	607a      	str	r2, [r7, #4]
 800cf6e:	603b      	str	r3, [r7, #0]
 800cf70:	4603      	mov	r3, r0
 800cf72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cf74:	7bfb      	ldrb	r3, [r7, #15]
 800cf76:	4a0a      	ldr	r2, [pc, #40]	; (800cfa0 <disk_read+0x3c>)
 800cf78:	009b      	lsls	r3, r3, #2
 800cf7a:	4413      	add	r3, r2
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	689c      	ldr	r4, [r3, #8]
 800cf80:	7bfb      	ldrb	r3, [r7, #15]
 800cf82:	4a07      	ldr	r2, [pc, #28]	; (800cfa0 <disk_read+0x3c>)
 800cf84:	4413      	add	r3, r2
 800cf86:	7d18      	ldrb	r0, [r3, #20]
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	68b9      	ldr	r1, [r7, #8]
 800cf8e:	47a0      	blx	r4
 800cf90:	4603      	mov	r3, r0
 800cf92:	75fb      	strb	r3, [r7, #23]
  return res;
 800cf94:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	371c      	adds	r7, #28
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd90      	pop	{r4, r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	200022ec 	.word	0x200022ec

0800cfa4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cfa4:	b590      	push	{r4, r7, lr}
 800cfa6:	b087      	sub	sp, #28
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	60b9      	str	r1, [r7, #8]
 800cfac:	607a      	str	r2, [r7, #4]
 800cfae:	603b      	str	r3, [r7, #0]
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cfb4:	7bfb      	ldrb	r3, [r7, #15]
 800cfb6:	4a0a      	ldr	r2, [pc, #40]	; (800cfe0 <disk_write+0x3c>)
 800cfb8:	009b      	lsls	r3, r3, #2
 800cfba:	4413      	add	r3, r2
 800cfbc:	685b      	ldr	r3, [r3, #4]
 800cfbe:	68dc      	ldr	r4, [r3, #12]
 800cfc0:	7bfb      	ldrb	r3, [r7, #15]
 800cfc2:	4a07      	ldr	r2, [pc, #28]	; (800cfe0 <disk_write+0x3c>)
 800cfc4:	4413      	add	r3, r2
 800cfc6:	7d18      	ldrb	r0, [r3, #20]
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	68b9      	ldr	r1, [r7, #8]
 800cfce:	47a0      	blx	r4
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	75fb      	strb	r3, [r7, #23]
  return res;
 800cfd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	371c      	adds	r7, #28
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd90      	pop	{r4, r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	200022ec 	.word	0x200022ec

0800cfe4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b084      	sub	sp, #16
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	4603      	mov	r3, r0
 800cfec:	603a      	str	r2, [r7, #0]
 800cfee:	71fb      	strb	r3, [r7, #7]
 800cff0:	460b      	mov	r3, r1
 800cff2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cff4:	79fb      	ldrb	r3, [r7, #7]
 800cff6:	4a09      	ldr	r2, [pc, #36]	; (800d01c <disk_ioctl+0x38>)
 800cff8:	009b      	lsls	r3, r3, #2
 800cffa:	4413      	add	r3, r2
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	691b      	ldr	r3, [r3, #16]
 800d000:	79fa      	ldrb	r2, [r7, #7]
 800d002:	4906      	ldr	r1, [pc, #24]	; (800d01c <disk_ioctl+0x38>)
 800d004:	440a      	add	r2, r1
 800d006:	7d10      	ldrb	r0, [r2, #20]
 800d008:	79b9      	ldrb	r1, [r7, #6]
 800d00a:	683a      	ldr	r2, [r7, #0]
 800d00c:	4798      	blx	r3
 800d00e:	4603      	mov	r3, r0
 800d010:	73fb      	strb	r3, [r7, #15]
  return res;
 800d012:	7bfb      	ldrb	r3, [r7, #15]
}
 800d014:	4618      	mov	r0, r3
 800d016:	3710      	adds	r7, #16
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}
 800d01c:	200022ec 	.word	0x200022ec

0800d020 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d020:	b480      	push	{r7}
 800d022:	b085      	sub	sp, #20
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	3301      	adds	r3, #1
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d030:	89fb      	ldrh	r3, [r7, #14]
 800d032:	021b      	lsls	r3, r3, #8
 800d034:	b21a      	sxth	r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	b21b      	sxth	r3, r3
 800d03c:	4313      	orrs	r3, r2
 800d03e:	b21b      	sxth	r3, r3
 800d040:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d042:	89fb      	ldrh	r3, [r7, #14]
}
 800d044:	4618      	mov	r0, r3
 800d046:	3714      	adds	r7, #20
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr

0800d050 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d050:	b480      	push	{r7}
 800d052:	b085      	sub	sp, #20
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	3303      	adds	r3, #3
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	021b      	lsls	r3, r3, #8
 800d064:	687a      	ldr	r2, [r7, #4]
 800d066:	3202      	adds	r2, #2
 800d068:	7812      	ldrb	r2, [r2, #0]
 800d06a:	4313      	orrs	r3, r2
 800d06c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	021b      	lsls	r3, r3, #8
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	3201      	adds	r2, #1
 800d076:	7812      	ldrb	r2, [r2, #0]
 800d078:	4313      	orrs	r3, r2
 800d07a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	021b      	lsls	r3, r3, #8
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	7812      	ldrb	r2, [r2, #0]
 800d084:	4313      	orrs	r3, r2
 800d086:	60fb      	str	r3, [r7, #12]
	return rv;
 800d088:	68fb      	ldr	r3, [r7, #12]
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3714      	adds	r7, #20
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr

0800d096 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800d096:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d09a:	b09d      	sub	sp, #116	; 0x74
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 800d0a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0a2:	3307      	adds	r3, #7
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	b2db      	uxtb	r3, r3
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	469a      	mov	sl, r3
 800d0ac:	4693      	mov	fp, r2
 800d0ae:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 800d0b2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d0b6:	f04f 0000 	mov.w	r0, #0
 800d0ba:	f04f 0100 	mov.w	r1, #0
 800d0be:	0219      	lsls	r1, r3, #8
 800d0c0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d0c4:	0210      	lsls	r0, r2, #8
 800d0c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0c8:	3306      	adds	r3, #6
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	b2db      	uxtb	r3, r3
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	461c      	mov	r4, r3
 800d0d2:	4615      	mov	r5, r2
 800d0d4:	ea40 0804 	orr.w	r8, r0, r4
 800d0d8:	ea41 0905 	orr.w	r9, r1, r5
 800d0dc:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 800d0e0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d0e4:	f04f 0000 	mov.w	r0, #0
 800d0e8:	f04f 0100 	mov.w	r1, #0
 800d0ec:	0219      	lsls	r1, r3, #8
 800d0ee:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d0f2:	0210      	lsls	r0, r2, #8
 800d0f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0f6:	3305      	adds	r3, #5
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	b2db      	uxtb	r3, r3
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	65bb      	str	r3, [r7, #88]	; 0x58
 800d100:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d102:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800d106:	4623      	mov	r3, r4
 800d108:	4303      	orrs	r3, r0
 800d10a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d10c:	462b      	mov	r3, r5
 800d10e:	430b      	orrs	r3, r1
 800d110:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d112:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800d116:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 800d11a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d11e:	f04f 0000 	mov.w	r0, #0
 800d122:	f04f 0100 	mov.w	r1, #0
 800d126:	0219      	lsls	r1, r3, #8
 800d128:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d12c:	0210      	lsls	r0, r2, #8
 800d12e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d130:	3304      	adds	r3, #4
 800d132:	781b      	ldrb	r3, [r3, #0]
 800d134:	b2db      	uxtb	r3, r3
 800d136:	2200      	movs	r2, #0
 800d138:	653b      	str	r3, [r7, #80]	; 0x50
 800d13a:	657a      	str	r2, [r7, #84]	; 0x54
 800d13c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800d140:	4623      	mov	r3, r4
 800d142:	4303      	orrs	r3, r0
 800d144:	623b      	str	r3, [r7, #32]
 800d146:	462b      	mov	r3, r5
 800d148:	430b      	orrs	r3, r1
 800d14a:	627b      	str	r3, [r7, #36]	; 0x24
 800d14c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d150:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 800d154:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d158:	f04f 0000 	mov.w	r0, #0
 800d15c:	f04f 0100 	mov.w	r1, #0
 800d160:	0219      	lsls	r1, r3, #8
 800d162:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d166:	0210      	lsls	r0, r2, #8
 800d168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d16a:	3303      	adds	r3, #3
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	b2db      	uxtb	r3, r3
 800d170:	2200      	movs	r2, #0
 800d172:	64bb      	str	r3, [r7, #72]	; 0x48
 800d174:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d176:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800d17a:	4623      	mov	r3, r4
 800d17c:	4303      	orrs	r3, r0
 800d17e:	61bb      	str	r3, [r7, #24]
 800d180:	462b      	mov	r3, r5
 800d182:	430b      	orrs	r3, r1
 800d184:	61fb      	str	r3, [r7, #28]
 800d186:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d18a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 800d18e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d192:	f04f 0000 	mov.w	r0, #0
 800d196:	f04f 0100 	mov.w	r1, #0
 800d19a:	0219      	lsls	r1, r3, #8
 800d19c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d1a0:	0210      	lsls	r0, r2, #8
 800d1a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1a4:	3302      	adds	r3, #2
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	643b      	str	r3, [r7, #64]	; 0x40
 800d1ae:	647a      	str	r2, [r7, #68]	; 0x44
 800d1b0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800d1b4:	4623      	mov	r3, r4
 800d1b6:	4303      	orrs	r3, r0
 800d1b8:	613b      	str	r3, [r7, #16]
 800d1ba:	462b      	mov	r3, r5
 800d1bc:	430b      	orrs	r3, r1
 800d1be:	617b      	str	r3, [r7, #20]
 800d1c0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d1c4:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 800d1c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d1cc:	f04f 0200 	mov.w	r2, #0
 800d1d0:	f04f 0300 	mov.w	r3, #0
 800d1d4:	020b      	lsls	r3, r1, #8
 800d1d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d1da:	0202      	lsls	r2, r0, #8
 800d1dc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d1de:	3101      	adds	r1, #1
 800d1e0:	7809      	ldrb	r1, [r1, #0]
 800d1e2:	b2c9      	uxtb	r1, r1
 800d1e4:	2000      	movs	r0, #0
 800d1e6:	63b9      	str	r1, [r7, #56]	; 0x38
 800d1e8:	63f8      	str	r0, [r7, #60]	; 0x3c
 800d1ea:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800d1ee:	4621      	mov	r1, r4
 800d1f0:	4311      	orrs	r1, r2
 800d1f2:	60b9      	str	r1, [r7, #8]
 800d1f4:	4629      	mov	r1, r5
 800d1f6:	4319      	orrs	r1, r3
 800d1f8:	60f9      	str	r1, [r7, #12]
 800d1fa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d1fe:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800d202:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d206:	f04f 0200 	mov.w	r2, #0
 800d20a:	f04f 0300 	mov.w	r3, #0
 800d20e:	020b      	lsls	r3, r1, #8
 800d210:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d214:	0202      	lsls	r2, r0, #8
 800d216:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d218:	7809      	ldrb	r1, [r1, #0]
 800d21a:	b2c9      	uxtb	r1, r1
 800d21c:	2000      	movs	r0, #0
 800d21e:	6339      	str	r1, [r7, #48]	; 0x30
 800d220:	6378      	str	r0, [r7, #52]	; 0x34
 800d222:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800d226:	4621      	mov	r1, r4
 800d228:	4311      	orrs	r1, r2
 800d22a:	6039      	str	r1, [r7, #0]
 800d22c:	4629      	mov	r1, r5
 800d22e:	4319      	orrs	r1, r3
 800d230:	6079      	str	r1, [r7, #4]
 800d232:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d236:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 800d23a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 800d23e:	4610      	mov	r0, r2
 800d240:	4619      	mov	r1, r3
 800d242:	3774      	adds	r7, #116	; 0x74
 800d244:	46bd      	mov	sp, r7
 800d246:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d24a:	4770      	bx	lr

0800d24c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	460b      	mov	r3, r1
 800d256:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	1c5a      	adds	r2, r3, #1
 800d25c:	607a      	str	r2, [r7, #4]
 800d25e:	887a      	ldrh	r2, [r7, #2]
 800d260:	b2d2      	uxtb	r2, r2
 800d262:	701a      	strb	r2, [r3, #0]
 800d264:	887b      	ldrh	r3, [r7, #2]
 800d266:	0a1b      	lsrs	r3, r3, #8
 800d268:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	1c5a      	adds	r2, r3, #1
 800d26e:	607a      	str	r2, [r7, #4]
 800d270:	887a      	ldrh	r2, [r7, #2]
 800d272:	b2d2      	uxtb	r2, r2
 800d274:	701a      	strb	r2, [r3, #0]
}
 800d276:	bf00      	nop
 800d278:	370c      	adds	r7, #12
 800d27a:	46bd      	mov	sp, r7
 800d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d280:	4770      	bx	lr

0800d282 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d282:	b480      	push	{r7}
 800d284:	b083      	sub	sp, #12
 800d286:	af00      	add	r7, sp, #0
 800d288:	6078      	str	r0, [r7, #4]
 800d28a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	1c5a      	adds	r2, r3, #1
 800d290:	607a      	str	r2, [r7, #4]
 800d292:	683a      	ldr	r2, [r7, #0]
 800d294:	b2d2      	uxtb	r2, r2
 800d296:	701a      	strb	r2, [r3, #0]
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	0a1b      	lsrs	r3, r3, #8
 800d29c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	1c5a      	adds	r2, r3, #1
 800d2a2:	607a      	str	r2, [r7, #4]
 800d2a4:	683a      	ldr	r2, [r7, #0]
 800d2a6:	b2d2      	uxtb	r2, r2
 800d2a8:	701a      	strb	r2, [r3, #0]
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	0a1b      	lsrs	r3, r3, #8
 800d2ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	1c5a      	adds	r2, r3, #1
 800d2b4:	607a      	str	r2, [r7, #4]
 800d2b6:	683a      	ldr	r2, [r7, #0]
 800d2b8:	b2d2      	uxtb	r2, r2
 800d2ba:	701a      	strb	r2, [r3, #0]
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	0a1b      	lsrs	r3, r3, #8
 800d2c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	1c5a      	adds	r2, r3, #1
 800d2c6:	607a      	str	r2, [r7, #4]
 800d2c8:	683a      	ldr	r2, [r7, #0]
 800d2ca:	b2d2      	uxtb	r2, r2
 800d2cc:	701a      	strb	r2, [r3, #0]
}
 800d2ce:	bf00      	nop
 800d2d0:	370c      	adds	r7, #12
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d8:	4770      	bx	lr

0800d2da <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800d2da:	b480      	push	{r7}
 800d2dc:	b085      	sub	sp, #20
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	60f8      	str	r0, [r7, #12]
 800d2e2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	1c5a      	adds	r2, r3, #1
 800d2ea:	60fa      	str	r2, [r7, #12]
 800d2ec:	783a      	ldrb	r2, [r7, #0]
 800d2ee:	701a      	strb	r2, [r3, #0]
 800d2f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d2f4:	f04f 0200 	mov.w	r2, #0
 800d2f8:	f04f 0300 	mov.w	r3, #0
 800d2fc:	0a02      	lsrs	r2, r0, #8
 800d2fe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d302:	0a0b      	lsrs	r3, r1, #8
 800d304:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	1c5a      	adds	r2, r3, #1
 800d30c:	60fa      	str	r2, [r7, #12]
 800d30e:	783a      	ldrb	r2, [r7, #0]
 800d310:	701a      	strb	r2, [r3, #0]
 800d312:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d316:	f04f 0200 	mov.w	r2, #0
 800d31a:	f04f 0300 	mov.w	r3, #0
 800d31e:	0a02      	lsrs	r2, r0, #8
 800d320:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d324:	0a0b      	lsrs	r3, r1, #8
 800d326:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	1c5a      	adds	r2, r3, #1
 800d32e:	60fa      	str	r2, [r7, #12]
 800d330:	783a      	ldrb	r2, [r7, #0]
 800d332:	701a      	strb	r2, [r3, #0]
 800d334:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d338:	f04f 0200 	mov.w	r2, #0
 800d33c:	f04f 0300 	mov.w	r3, #0
 800d340:	0a02      	lsrs	r2, r0, #8
 800d342:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d346:	0a0b      	lsrs	r3, r1, #8
 800d348:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	1c5a      	adds	r2, r3, #1
 800d350:	60fa      	str	r2, [r7, #12]
 800d352:	783a      	ldrb	r2, [r7, #0]
 800d354:	701a      	strb	r2, [r3, #0]
 800d356:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d35a:	f04f 0200 	mov.w	r2, #0
 800d35e:	f04f 0300 	mov.w	r3, #0
 800d362:	0a02      	lsrs	r2, r0, #8
 800d364:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d368:	0a0b      	lsrs	r3, r1, #8
 800d36a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	1c5a      	adds	r2, r3, #1
 800d372:	60fa      	str	r2, [r7, #12]
 800d374:	783a      	ldrb	r2, [r7, #0]
 800d376:	701a      	strb	r2, [r3, #0]
 800d378:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d37c:	f04f 0200 	mov.w	r2, #0
 800d380:	f04f 0300 	mov.w	r3, #0
 800d384:	0a02      	lsrs	r2, r0, #8
 800d386:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d38a:	0a0b      	lsrs	r3, r1, #8
 800d38c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	1c5a      	adds	r2, r3, #1
 800d394:	60fa      	str	r2, [r7, #12]
 800d396:	783a      	ldrb	r2, [r7, #0]
 800d398:	701a      	strb	r2, [r3, #0]
 800d39a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d39e:	f04f 0200 	mov.w	r2, #0
 800d3a2:	f04f 0300 	mov.w	r3, #0
 800d3a6:	0a02      	lsrs	r2, r0, #8
 800d3a8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d3ac:	0a0b      	lsrs	r3, r1, #8
 800d3ae:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	1c5a      	adds	r2, r3, #1
 800d3b6:	60fa      	str	r2, [r7, #12]
 800d3b8:	783a      	ldrb	r2, [r7, #0]
 800d3ba:	701a      	strb	r2, [r3, #0]
 800d3bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d3c0:	f04f 0200 	mov.w	r2, #0
 800d3c4:	f04f 0300 	mov.w	r3, #0
 800d3c8:	0a02      	lsrs	r2, r0, #8
 800d3ca:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d3ce:	0a0b      	lsrs	r3, r1, #8
 800d3d0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	1c5a      	adds	r2, r3, #1
 800d3d8:	60fa      	str	r2, [r7, #12]
 800d3da:	783a      	ldrb	r2, [r7, #0]
 800d3dc:	701a      	strb	r2, [r3, #0]
}
 800d3de:	bf00      	nop
 800d3e0:	3714      	adds	r7, #20
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e8:	4770      	bx	lr

0800d3ea <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d3ea:	b480      	push	{r7}
 800d3ec:	b087      	sub	sp, #28
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	60f8      	str	r0, [r7, #12]
 800d3f2:	60b9      	str	r1, [r7, #8]
 800d3f4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d00d      	beq.n	800d420 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d404:	693a      	ldr	r2, [r7, #16]
 800d406:	1c53      	adds	r3, r2, #1
 800d408:	613b      	str	r3, [r7, #16]
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	1c59      	adds	r1, r3, #1
 800d40e:	6179      	str	r1, [r7, #20]
 800d410:	7812      	ldrb	r2, [r2, #0]
 800d412:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	3b01      	subs	r3, #1
 800d418:	607b      	str	r3, [r7, #4]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d1f1      	bne.n	800d404 <mem_cpy+0x1a>
	}
}
 800d420:	bf00      	nop
 800d422:	371c      	adds	r7, #28
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr

0800d42c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d42c:	b480      	push	{r7}
 800d42e:	b087      	sub	sp, #28
 800d430:	af00      	add	r7, sp, #0
 800d432:	60f8      	str	r0, [r7, #12]
 800d434:	60b9      	str	r1, [r7, #8]
 800d436:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	1c5a      	adds	r2, r3, #1
 800d440:	617a      	str	r2, [r7, #20]
 800d442:	68ba      	ldr	r2, [r7, #8]
 800d444:	b2d2      	uxtb	r2, r2
 800d446:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	3b01      	subs	r3, #1
 800d44c:	607b      	str	r3, [r7, #4]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d1f3      	bne.n	800d43c <mem_set+0x10>
}
 800d454:	bf00      	nop
 800d456:	bf00      	nop
 800d458:	371c      	adds	r7, #28
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr

0800d462 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d462:	b480      	push	{r7}
 800d464:	b089      	sub	sp, #36	; 0x24
 800d466:	af00      	add	r7, sp, #0
 800d468:	60f8      	str	r0, [r7, #12]
 800d46a:	60b9      	str	r1, [r7, #8]
 800d46c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	61fb      	str	r3, [r7, #28]
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d476:	2300      	movs	r3, #0
 800d478:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d47a:	69fb      	ldr	r3, [r7, #28]
 800d47c:	1c5a      	adds	r2, r3, #1
 800d47e:	61fa      	str	r2, [r7, #28]
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	4619      	mov	r1, r3
 800d484:	69bb      	ldr	r3, [r7, #24]
 800d486:	1c5a      	adds	r2, r3, #1
 800d488:	61ba      	str	r2, [r7, #24]
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	1acb      	subs	r3, r1, r3
 800d48e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	3b01      	subs	r3, #1
 800d494:	607b      	str	r3, [r7, #4]
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d002      	beq.n	800d4a2 <mem_cmp+0x40>
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d0eb      	beq.n	800d47a <mem_cmp+0x18>

	return r;
 800d4a2:	697b      	ldr	r3, [r7, #20]
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3724      	adds	r7, #36	; 0x24
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr

0800d4b0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d4ba:	e002      	b.n	800d4c2 <chk_chr+0x12>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	3301      	adds	r3, #1
 800d4c0:	607b      	str	r3, [r7, #4]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d005      	beq.n	800d4d6 <chk_chr+0x26>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	d1f2      	bne.n	800d4bc <chk_chr+0xc>
	return *str;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	781b      	ldrb	r3, [r3, #0]
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	370c      	adds	r7, #12
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr
	...

0800d4e8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b085      	sub	sp, #20
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	60bb      	str	r3, [r7, #8]
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	60fb      	str	r3, [r7, #12]
 800d4fa:	e029      	b.n	800d550 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d4fc:	4a27      	ldr	r2, [pc, #156]	; (800d59c <chk_lock+0xb4>)
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	011b      	lsls	r3, r3, #4
 800d502:	4413      	add	r3, r2
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d01d      	beq.n	800d546 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d50a:	4a24      	ldr	r2, [pc, #144]	; (800d59c <chk_lock+0xb4>)
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	011b      	lsls	r3, r3, #4
 800d510:	4413      	add	r3, r2
 800d512:	681a      	ldr	r2, [r3, #0]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	429a      	cmp	r2, r3
 800d51a:	d116      	bne.n	800d54a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d51c:	4a1f      	ldr	r2, [pc, #124]	; (800d59c <chk_lock+0xb4>)
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	011b      	lsls	r3, r3, #4
 800d522:	4413      	add	r3, r2
 800d524:	3304      	adds	r3, #4
 800d526:	681a      	ldr	r2, [r3, #0]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d10c      	bne.n	800d54a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d530:	4a1a      	ldr	r2, [pc, #104]	; (800d59c <chk_lock+0xb4>)
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	011b      	lsls	r3, r3, #4
 800d536:	4413      	add	r3, r2
 800d538:	3308      	adds	r3, #8
 800d53a:	681a      	ldr	r2, [r3, #0]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800d540:	429a      	cmp	r2, r3
 800d542:	d102      	bne.n	800d54a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d544:	e007      	b.n	800d556 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d546:	2301      	movs	r3, #1
 800d548:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	3301      	adds	r3, #1
 800d54e:	60fb      	str	r3, [r7, #12]
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	2b01      	cmp	r3, #1
 800d554:	d9d2      	bls.n	800d4fc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2b02      	cmp	r3, #2
 800d55a:	d109      	bne.n	800d570 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d102      	bne.n	800d568 <chk_lock+0x80>
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	2b02      	cmp	r3, #2
 800d566:	d101      	bne.n	800d56c <chk_lock+0x84>
 800d568:	2300      	movs	r3, #0
 800d56a:	e010      	b.n	800d58e <chk_lock+0xa6>
 800d56c:	2312      	movs	r3, #18
 800d56e:	e00e      	b.n	800d58e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d108      	bne.n	800d588 <chk_lock+0xa0>
 800d576:	4a09      	ldr	r2, [pc, #36]	; (800d59c <chk_lock+0xb4>)
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	011b      	lsls	r3, r3, #4
 800d57c:	4413      	add	r3, r2
 800d57e:	330c      	adds	r3, #12
 800d580:	881b      	ldrh	r3, [r3, #0]
 800d582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d586:	d101      	bne.n	800d58c <chk_lock+0xa4>
 800d588:	2310      	movs	r3, #16
 800d58a:	e000      	b.n	800d58e <chk_lock+0xa6>
 800d58c:	2300      	movs	r3, #0
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3714      	adds	r7, #20
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	20001e6c 	.word	0x20001e6c

0800d5a0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b083      	sub	sp, #12
 800d5a4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	607b      	str	r3, [r7, #4]
 800d5aa:	e002      	b.n	800d5b2 <enq_lock+0x12>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	607b      	str	r3, [r7, #4]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d806      	bhi.n	800d5c6 <enq_lock+0x26>
 800d5b8:	4a09      	ldr	r2, [pc, #36]	; (800d5e0 <enq_lock+0x40>)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	011b      	lsls	r3, r3, #4
 800d5be:	4413      	add	r3, r2
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d1f2      	bne.n	800d5ac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2b02      	cmp	r3, #2
 800d5ca:	bf14      	ite	ne
 800d5cc:	2301      	movne	r3, #1
 800d5ce:	2300      	moveq	r3, #0
 800d5d0:	b2db      	uxtb	r3, r3
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	370c      	adds	r7, #12
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr
 800d5de:	bf00      	nop
 800d5e0:	20001e6c 	.word	0x20001e6c

0800d5e4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b085      	sub	sp, #20
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	60fb      	str	r3, [r7, #12]
 800d5f2:	e01f      	b.n	800d634 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d5f4:	4a41      	ldr	r2, [pc, #260]	; (800d6fc <inc_lock+0x118>)
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	011b      	lsls	r3, r3, #4
 800d5fa:	4413      	add	r3, r2
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	429a      	cmp	r2, r3
 800d604:	d113      	bne.n	800d62e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d606:	4a3d      	ldr	r2, [pc, #244]	; (800d6fc <inc_lock+0x118>)
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	011b      	lsls	r3, r3, #4
 800d60c:	4413      	add	r3, r2
 800d60e:	3304      	adds	r3, #4
 800d610:	681a      	ldr	r2, [r3, #0]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d616:	429a      	cmp	r2, r3
 800d618:	d109      	bne.n	800d62e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d61a:	4a38      	ldr	r2, [pc, #224]	; (800d6fc <inc_lock+0x118>)
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	011b      	lsls	r3, r3, #4
 800d620:	4413      	add	r3, r2
 800d622:	3308      	adds	r3, #8
 800d624:	681a      	ldr	r2, [r3, #0]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d006      	beq.n	800d63c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	3301      	adds	r3, #1
 800d632:	60fb      	str	r3, [r7, #12]
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2b01      	cmp	r3, #1
 800d638:	d9dc      	bls.n	800d5f4 <inc_lock+0x10>
 800d63a:	e000      	b.n	800d63e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d63c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	2b02      	cmp	r3, #2
 800d642:	d132      	bne.n	800d6aa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d644:	2300      	movs	r3, #0
 800d646:	60fb      	str	r3, [r7, #12]
 800d648:	e002      	b.n	800d650 <inc_lock+0x6c>
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	3301      	adds	r3, #1
 800d64e:	60fb      	str	r3, [r7, #12]
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	2b01      	cmp	r3, #1
 800d654:	d806      	bhi.n	800d664 <inc_lock+0x80>
 800d656:	4a29      	ldr	r2, [pc, #164]	; (800d6fc <inc_lock+0x118>)
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	011b      	lsls	r3, r3, #4
 800d65c:	4413      	add	r3, r2
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d1f2      	bne.n	800d64a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2b02      	cmp	r3, #2
 800d668:	d101      	bne.n	800d66e <inc_lock+0x8a>
 800d66a:	2300      	movs	r3, #0
 800d66c:	e040      	b.n	800d6f0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681a      	ldr	r2, [r3, #0]
 800d672:	4922      	ldr	r1, [pc, #136]	; (800d6fc <inc_lock+0x118>)
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	011b      	lsls	r3, r3, #4
 800d678:	440b      	add	r3, r1
 800d67a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	689a      	ldr	r2, [r3, #8]
 800d680:	491e      	ldr	r1, [pc, #120]	; (800d6fc <inc_lock+0x118>)
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	011b      	lsls	r3, r3, #4
 800d686:	440b      	add	r3, r1
 800d688:	3304      	adds	r3, #4
 800d68a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d690:	491a      	ldr	r1, [pc, #104]	; (800d6fc <inc_lock+0x118>)
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	011b      	lsls	r3, r3, #4
 800d696:	440b      	add	r3, r1
 800d698:	3308      	adds	r3, #8
 800d69a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d69c:	4a17      	ldr	r2, [pc, #92]	; (800d6fc <inc_lock+0x118>)
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	011b      	lsls	r3, r3, #4
 800d6a2:	4413      	add	r3, r2
 800d6a4:	330c      	adds	r3, #12
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d009      	beq.n	800d6c4 <inc_lock+0xe0>
 800d6b0:	4a12      	ldr	r2, [pc, #72]	; (800d6fc <inc_lock+0x118>)
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	011b      	lsls	r3, r3, #4
 800d6b6:	4413      	add	r3, r2
 800d6b8:	330c      	adds	r3, #12
 800d6ba:	881b      	ldrh	r3, [r3, #0]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d001      	beq.n	800d6c4 <inc_lock+0xe0>
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	e015      	b.n	800d6f0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d108      	bne.n	800d6dc <inc_lock+0xf8>
 800d6ca:	4a0c      	ldr	r2, [pc, #48]	; (800d6fc <inc_lock+0x118>)
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	011b      	lsls	r3, r3, #4
 800d6d0:	4413      	add	r3, r2
 800d6d2:	330c      	adds	r3, #12
 800d6d4:	881b      	ldrh	r3, [r3, #0]
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	b29a      	uxth	r2, r3
 800d6da:	e001      	b.n	800d6e0 <inc_lock+0xfc>
 800d6dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d6e0:	4906      	ldr	r1, [pc, #24]	; (800d6fc <inc_lock+0x118>)
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	011b      	lsls	r3, r3, #4
 800d6e6:	440b      	add	r3, r1
 800d6e8:	330c      	adds	r3, #12
 800d6ea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	3301      	adds	r3, #1
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3714      	adds	r7, #20
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr
 800d6fc:	20001e6c 	.word	0x20001e6c

0800d700 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d700:	b480      	push	{r7}
 800d702:	b085      	sub	sp, #20
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	3b01      	subs	r3, #1
 800d70c:	607b      	str	r3, [r7, #4]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2b01      	cmp	r3, #1
 800d712:	d825      	bhi.n	800d760 <dec_lock+0x60>
		n = Files[i].ctr;
 800d714:	4a17      	ldr	r2, [pc, #92]	; (800d774 <dec_lock+0x74>)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	011b      	lsls	r3, r3, #4
 800d71a:	4413      	add	r3, r2
 800d71c:	330c      	adds	r3, #12
 800d71e:	881b      	ldrh	r3, [r3, #0]
 800d720:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d722:	89fb      	ldrh	r3, [r7, #14]
 800d724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d728:	d101      	bne.n	800d72e <dec_lock+0x2e>
 800d72a:	2300      	movs	r3, #0
 800d72c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d72e:	89fb      	ldrh	r3, [r7, #14]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d002      	beq.n	800d73a <dec_lock+0x3a>
 800d734:	89fb      	ldrh	r3, [r7, #14]
 800d736:	3b01      	subs	r3, #1
 800d738:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d73a:	4a0e      	ldr	r2, [pc, #56]	; (800d774 <dec_lock+0x74>)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	011b      	lsls	r3, r3, #4
 800d740:	4413      	add	r3, r2
 800d742:	330c      	adds	r3, #12
 800d744:	89fa      	ldrh	r2, [r7, #14]
 800d746:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d748:	89fb      	ldrh	r3, [r7, #14]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d105      	bne.n	800d75a <dec_lock+0x5a>
 800d74e:	4a09      	ldr	r2, [pc, #36]	; (800d774 <dec_lock+0x74>)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	011b      	lsls	r3, r3, #4
 800d754:	4413      	add	r3, r2
 800d756:	2200      	movs	r2, #0
 800d758:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d75a:	2300      	movs	r3, #0
 800d75c:	737b      	strb	r3, [r7, #13]
 800d75e:	e001      	b.n	800d764 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d760:	2302      	movs	r3, #2
 800d762:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d764:	7b7b      	ldrb	r3, [r7, #13]
}
 800d766:	4618      	mov	r0, r3
 800d768:	3714      	adds	r7, #20
 800d76a:	46bd      	mov	sp, r7
 800d76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d770:	4770      	bx	lr
 800d772:	bf00      	nop
 800d774:	20001e6c 	.word	0x20001e6c

0800d778 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d778:	b480      	push	{r7}
 800d77a:	b085      	sub	sp, #20
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d780:	2300      	movs	r3, #0
 800d782:	60fb      	str	r3, [r7, #12]
 800d784:	e010      	b.n	800d7a8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d786:	4a0d      	ldr	r2, [pc, #52]	; (800d7bc <clear_lock+0x44>)
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	011b      	lsls	r3, r3, #4
 800d78c:	4413      	add	r3, r2
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	687a      	ldr	r2, [r7, #4]
 800d792:	429a      	cmp	r2, r3
 800d794:	d105      	bne.n	800d7a2 <clear_lock+0x2a>
 800d796:	4a09      	ldr	r2, [pc, #36]	; (800d7bc <clear_lock+0x44>)
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	011b      	lsls	r3, r3, #4
 800d79c:	4413      	add	r3, r2
 800d79e:	2200      	movs	r2, #0
 800d7a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	3301      	adds	r3, #1
 800d7a6:	60fb      	str	r3, [r7, #12]
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	2b01      	cmp	r3, #1
 800d7ac:	d9eb      	bls.n	800d786 <clear_lock+0xe>
	}
}
 800d7ae:	bf00      	nop
 800d7b0:	bf00      	nop
 800d7b2:	3714      	adds	r7, #20
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr
 800d7bc:	20001e6c 	.word	0x20001e6c

0800d7c0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b086      	sub	sp, #24
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	78db      	ldrb	r3, [r3, #3]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d034      	beq.n	800d83e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7d8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	7858      	ldrb	r0, [r3, #1]
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	697a      	ldr	r2, [r7, #20]
 800d7e8:	f7ff fbdc 	bl	800cfa4 <disk_write>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d002      	beq.n	800d7f8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	73fb      	strb	r3, [r7, #15]
 800d7f6:	e022      	b.n	800d83e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d802:	697a      	ldr	r2, [r7, #20]
 800d804:	1ad2      	subs	r2, r2, r3
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6a1b      	ldr	r3, [r3, #32]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d217      	bcs.n	800d83e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	789b      	ldrb	r3, [r3, #2]
 800d812:	613b      	str	r3, [r7, #16]
 800d814:	e010      	b.n	800d838 <sync_window+0x78>
					wsect += fs->fsize;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6a1b      	ldr	r3, [r3, #32]
 800d81a:	697a      	ldr	r2, [r7, #20]
 800d81c:	4413      	add	r3, r2
 800d81e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	7858      	ldrb	r0, [r3, #1]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d82a:	2301      	movs	r3, #1
 800d82c:	697a      	ldr	r2, [r7, #20]
 800d82e:	f7ff fbb9 	bl	800cfa4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	3b01      	subs	r3, #1
 800d836:	613b      	str	r3, [r7, #16]
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d8eb      	bhi.n	800d816 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d840:	4618      	mov	r0, r3
 800d842:	3718      	adds	r7, #24
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d852:	2300      	movs	r3, #0
 800d854:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d85a:	683a      	ldr	r2, [r7, #0]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d01b      	beq.n	800d898 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f7ff ffad 	bl	800d7c0 <sync_window>
 800d866:	4603      	mov	r3, r0
 800d868:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d86a:	7bfb      	ldrb	r3, [r7, #15]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d113      	bne.n	800d898 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	7858      	ldrb	r0, [r3, #1]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d87a:	2301      	movs	r3, #1
 800d87c:	683a      	ldr	r2, [r7, #0]
 800d87e:	f7ff fb71 	bl	800cf64 <disk_read>
 800d882:	4603      	mov	r3, r0
 800d884:	2b00      	cmp	r3, #0
 800d886:	d004      	beq.n	800d892 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d888:	f04f 33ff 	mov.w	r3, #4294967295
 800d88c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d88e:	2301      	movs	r3, #1
 800d890:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	683a      	ldr	r2, [r7, #0]
 800d896:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800d898:	7bfb      	ldrb	r3, [r7, #15]
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
	...

0800d8a4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b084      	sub	sp, #16
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f7ff ff87 	bl	800d7c0 <sync_window>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d8b6:	7bfb      	ldrb	r3, [r7, #15]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d158      	bne.n	800d96e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	2b03      	cmp	r3, #3
 800d8c2:	d148      	bne.n	800d956 <sync_fs+0xb2>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	791b      	ldrb	r3, [r3, #4]
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d144      	bne.n	800d956 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	3338      	adds	r3, #56	; 0x38
 800d8d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8d4:	2100      	movs	r1, #0
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7ff fda8 	bl	800d42c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	3338      	adds	r3, #56	; 0x38
 800d8e0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d8e4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f7ff fcaf 	bl	800d24c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	3338      	adds	r3, #56	; 0x38
 800d8f2:	4921      	ldr	r1, [pc, #132]	; (800d978 <sync_fs+0xd4>)
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f7ff fcc4 	bl	800d282 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	3338      	adds	r3, #56	; 0x38
 800d8fe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d902:	491e      	ldr	r1, [pc, #120]	; (800d97c <sync_fs+0xd8>)
 800d904:	4618      	mov	r0, r3
 800d906:	f7ff fcbc 	bl	800d282 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	3338      	adds	r3, #56	; 0x38
 800d90e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	699b      	ldr	r3, [r3, #24]
 800d916:	4619      	mov	r1, r3
 800d918:	4610      	mov	r0, r2
 800d91a:	f7ff fcb2 	bl	800d282 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	3338      	adds	r3, #56	; 0x38
 800d922:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	695b      	ldr	r3, [r3, #20]
 800d92a:	4619      	mov	r1, r3
 800d92c:	4610      	mov	r0, r2
 800d92e:	f7ff fca8 	bl	800d282 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d936:	1c5a      	adds	r2, r3, #1
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	7858      	ldrb	r0, [r3, #1]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d94a:	2301      	movs	r3, #1
 800d94c:	f7ff fb2a 	bl	800cfa4 <disk_write>
			fs->fsi_flag = 0;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2200      	movs	r2, #0
 800d954:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	785b      	ldrb	r3, [r3, #1]
 800d95a:	2200      	movs	r2, #0
 800d95c:	2100      	movs	r1, #0
 800d95e:	4618      	mov	r0, r3
 800d960:	f7ff fb40 	bl	800cfe4 <disk_ioctl>
 800d964:	4603      	mov	r3, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	d001      	beq.n	800d96e <sync_fs+0xca>
 800d96a:	2301      	movs	r3, #1
 800d96c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d96e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d970:	4618      	mov	r0, r3
 800d972:	3710      	adds	r7, #16
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}
 800d978:	41615252 	.word	0x41615252
 800d97c:	61417272 	.word	0x61417272

0800d980 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d980:	b480      	push	{r7}
 800d982:	b083      	sub	sp, #12
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	3b02      	subs	r3, #2
 800d98e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	69db      	ldr	r3, [r3, #28]
 800d994:	3b02      	subs	r3, #2
 800d996:	683a      	ldr	r2, [r7, #0]
 800d998:	429a      	cmp	r2, r3
 800d99a:	d301      	bcc.n	800d9a0 <clust2sect+0x20>
 800d99c:	2300      	movs	r3, #0
 800d99e:	e008      	b.n	800d9b2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	895b      	ldrh	r3, [r3, #10]
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	fb03 f202 	mul.w	r2, r3, r2
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9b0:	4413      	add	r3, r2
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	370c      	adds	r7, #12
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr
	...

0800d9c0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b088      	sub	sp, #32
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d9ca:	6879      	ldr	r1, [r7, #4]
 800d9cc:	6809      	ldr	r1, [r1, #0]
 800d9ce:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d9d0:	6839      	ldr	r1, [r7, #0]
 800d9d2:	2901      	cmp	r1, #1
 800d9d4:	d904      	bls.n	800d9e0 <get_fat+0x20>
 800d9d6:	69b9      	ldr	r1, [r7, #24]
 800d9d8:	69c9      	ldr	r1, [r1, #28]
 800d9da:	6838      	ldr	r0, [r7, #0]
 800d9dc:	4288      	cmp	r0, r1
 800d9de:	d302      	bcc.n	800d9e6 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	61fb      	str	r3, [r7, #28]
 800d9e4:	e101      	b.n	800dbea <get_fat+0x22a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d9e6:	f04f 31ff 	mov.w	r1, #4294967295
 800d9ea:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800d9ec:	69b9      	ldr	r1, [r7, #24]
 800d9ee:	7809      	ldrb	r1, [r1, #0]
 800d9f0:	3901      	subs	r1, #1
 800d9f2:	2903      	cmp	r1, #3
 800d9f4:	f200 80ed 	bhi.w	800dbd2 <get_fat+0x212>
 800d9f8:	a001      	add	r0, pc, #4	; (adr r0, 800da00 <get_fat+0x40>)
 800d9fa:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d9fe:	bf00      	nop
 800da00:	0800da11 	.word	0x0800da11
 800da04:	0800da99 	.word	0x0800da99
 800da08:	0800dacf 	.word	0x0800dacf
 800da0c:	0800db07 	.word	0x0800db07
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	60fb      	str	r3, [r7, #12]
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	085b      	lsrs	r3, r3, #1
 800da18:	68fa      	ldr	r2, [r7, #12]
 800da1a:	4413      	add	r3, r2
 800da1c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	0a5b      	lsrs	r3, r3, #9
 800da26:	4413      	add	r3, r2
 800da28:	4619      	mov	r1, r3
 800da2a:	69b8      	ldr	r0, [r7, #24]
 800da2c:	f7ff ff0c 	bl	800d848 <move_window>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	f040 80d0 	bne.w	800dbd8 <get_fat+0x218>
			wc = fs->win[bc++ % SS(fs)];
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	1c5a      	adds	r2, r3, #1
 800da3c:	60fa      	str	r2, [r7, #12]
 800da3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da42:	69ba      	ldr	r2, [r7, #24]
 800da44:	4413      	add	r3, r2
 800da46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800da4a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800da4c:	69bb      	ldr	r3, [r7, #24]
 800da4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	0a5b      	lsrs	r3, r3, #9
 800da54:	4413      	add	r3, r2
 800da56:	4619      	mov	r1, r3
 800da58:	69b8      	ldr	r0, [r7, #24]
 800da5a:	f7ff fef5 	bl	800d848 <move_window>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	f040 80bb 	bne.w	800dbdc <get_fat+0x21c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da6c:	69ba      	ldr	r2, [r7, #24]
 800da6e:	4413      	add	r3, r2
 800da70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800da74:	021b      	lsls	r3, r3, #8
 800da76:	461a      	mov	r2, r3
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	4313      	orrs	r3, r2
 800da7c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	f003 0301 	and.w	r3, r3, #1
 800da84:	2b00      	cmp	r3, #0
 800da86:	d002      	beq.n	800da8e <get_fat+0xce>
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	091b      	lsrs	r3, r3, #4
 800da8c:	e002      	b.n	800da94 <get_fat+0xd4>
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800da94:	61fb      	str	r3, [r7, #28]
			break;
 800da96:	e0a8      	b.n	800dbea <get_fat+0x22a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800da98:	69bb      	ldr	r3, [r7, #24]
 800da9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	0a1b      	lsrs	r3, r3, #8
 800daa0:	4413      	add	r3, r2
 800daa2:	4619      	mov	r1, r3
 800daa4:	69b8      	ldr	r0, [r7, #24]
 800daa6:	f7ff fecf 	bl	800d848 <move_window>
 800daaa:	4603      	mov	r3, r0
 800daac:	2b00      	cmp	r3, #0
 800daae:	f040 8097 	bne.w	800dbe0 <get_fat+0x220>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dab2:	69bb      	ldr	r3, [r7, #24]
 800dab4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	005b      	lsls	r3, r3, #1
 800dabc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800dac0:	4413      	add	r3, r2
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7ff faac 	bl	800d020 <ld_word>
 800dac8:	4603      	mov	r3, r0
 800daca:	61fb      	str	r3, [r7, #28]
			break;
 800dacc:	e08d      	b.n	800dbea <get_fat+0x22a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dace:	69bb      	ldr	r3, [r7, #24]
 800dad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	09db      	lsrs	r3, r3, #7
 800dad6:	4413      	add	r3, r2
 800dad8:	4619      	mov	r1, r3
 800dada:	69b8      	ldr	r0, [r7, #24]
 800dadc:	f7ff feb4 	bl	800d848 <move_window>
 800dae0:	4603      	mov	r3, r0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d17e      	bne.n	800dbe4 <get_fat+0x224>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dae6:	69bb      	ldr	r3, [r7, #24]
 800dae8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	009b      	lsls	r3, r3, #2
 800daf0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800daf4:	4413      	add	r3, r2
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7ff faaa 	bl	800d050 <ld_dword>
 800dafc:	4603      	mov	r3, r0
 800dafe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800db02:	61fb      	str	r3, [r7, #28]
			break;
 800db04:	e071      	b.n	800dbea <get_fat+0x22a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800db06:	6879      	ldr	r1, [r7, #4]
 800db08:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800db0c:	4301      	orrs	r1, r0
 800db0e:	d060      	beq.n	800dbd2 <get_fat+0x212>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800db10:	6879      	ldr	r1, [r7, #4]
 800db12:	6889      	ldr	r1, [r1, #8]
 800db14:	6838      	ldr	r0, [r7, #0]
 800db16:	1a41      	subs	r1, r0, r1
 800db18:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800db1a:	6879      	ldr	r1, [r7, #4]
 800db1c:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800db20:	1e42      	subs	r2, r0, #1
 800db22:	f141 33ff 	adc.w	r3, r1, #4294967295
 800db26:	f04f 0000 	mov.w	r0, #0
 800db2a:	f04f 0100 	mov.w	r1, #0
 800db2e:	0a50      	lsrs	r0, r2, #9
 800db30:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800db34:	0a59      	lsrs	r1, r3, #9
 800db36:	4602      	mov	r2, r0
 800db38:	69bb      	ldr	r3, [r7, #24]
 800db3a:	895b      	ldrh	r3, [r3, #10]
 800db3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800db40:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	79db      	ldrb	r3, [r3, #7]
 800db46:	2b02      	cmp	r3, #2
 800db48:	d10e      	bne.n	800db68 <get_fat+0x1a8>
					if (cofs <= clen) {
 800db4a:	697a      	ldr	r2, [r7, #20]
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	429a      	cmp	r2, r3
 800db50:	d80a      	bhi.n	800db68 <get_fat+0x1a8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800db52:	697a      	ldr	r2, [r7, #20]
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	429a      	cmp	r2, r3
 800db58:	d002      	beq.n	800db60 <get_fat+0x1a0>
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	3301      	adds	r3, #1
 800db5e:	e001      	b.n	800db64 <get_fat+0x1a4>
 800db60:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800db64:	61fb      	str	r3, [r7, #28]
						break;
 800db66:	e040      	b.n	800dbea <get_fat+0x22a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	79db      	ldrb	r3, [r3, #7]
 800db6c:	2b03      	cmp	r3, #3
 800db6e:	d108      	bne.n	800db82 <get_fat+0x1c2>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	699b      	ldr	r3, [r3, #24]
 800db74:	697a      	ldr	r2, [r7, #20]
 800db76:	429a      	cmp	r2, r3
 800db78:	d203      	bcs.n	800db82 <get_fat+0x1c2>
					val = clst + 1; 	/* Generate the value */
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	3301      	adds	r3, #1
 800db7e:	61fb      	str	r3, [r7, #28]
					break;
 800db80:	e033      	b.n	800dbea <get_fat+0x22a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	79db      	ldrb	r3, [r3, #7]
 800db86:	2b02      	cmp	r3, #2
 800db88:	d023      	beq.n	800dbd2 <get_fat+0x212>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	69db      	ldr	r3, [r3, #28]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d003      	beq.n	800db9a <get_fat+0x1da>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800db92:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800db96:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800db98:	e027      	b.n	800dbea <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	09db      	lsrs	r3, r3, #7
 800dba2:	4413      	add	r3, r2
 800dba4:	4619      	mov	r1, r3
 800dba6:	69b8      	ldr	r0, [r7, #24]
 800dba8:	f7ff fe4e 	bl	800d848 <move_window>
 800dbac:	4603      	mov	r3, r0
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d11a      	bne.n	800dbe8 <get_fat+0x228>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800dbb2:	69bb      	ldr	r3, [r7, #24]
 800dbb4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	009b      	lsls	r3, r3, #2
 800dbbc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dbc0:	4413      	add	r3, r2
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7ff fa44 	bl	800d050 <ld_dword>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dbce:	61fb      	str	r3, [r7, #28]
					break;
 800dbd0:	e00b      	b.n	800dbea <get_fat+0x22a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	61fb      	str	r3, [r7, #28]
 800dbd6:	e008      	b.n	800dbea <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbd8:	bf00      	nop
 800dbda:	e006      	b.n	800dbea <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbdc:	bf00      	nop
 800dbde:	e004      	b.n	800dbea <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dbe0:	bf00      	nop
 800dbe2:	e002      	b.n	800dbea <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dbe4:	bf00      	nop
 800dbe6:	e000      	b.n	800dbea <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dbe8:	bf00      	nop
		}
	}

	return val;
 800dbea:	69fb      	ldr	r3, [r7, #28]
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3720      	adds	r7, #32
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dbf4:	b590      	push	{r4, r7, lr}
 800dbf6:	b089      	sub	sp, #36	; 0x24
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	60b9      	str	r1, [r7, #8]
 800dbfe:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dc00:	2302      	movs	r3, #2
 800dc02:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	2b01      	cmp	r3, #1
 800dc08:	f240 80d6 	bls.w	800ddb8 <put_fat+0x1c4>
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	69db      	ldr	r3, [r3, #28]
 800dc10:	68ba      	ldr	r2, [r7, #8]
 800dc12:	429a      	cmp	r2, r3
 800dc14:	f080 80d0 	bcs.w	800ddb8 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	2b04      	cmp	r3, #4
 800dc1e:	f300 80d4 	bgt.w	800ddca <put_fat+0x1d6>
 800dc22:	2b03      	cmp	r3, #3
 800dc24:	f280 8093 	bge.w	800dd4e <put_fat+0x15a>
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	d002      	beq.n	800dc32 <put_fat+0x3e>
 800dc2c:	2b02      	cmp	r3, #2
 800dc2e:	d06e      	beq.n	800dd0e <put_fat+0x11a>
 800dc30:	e0cb      	b.n	800ddca <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	61bb      	str	r3, [r7, #24]
 800dc36:	69bb      	ldr	r3, [r7, #24]
 800dc38:	085b      	lsrs	r3, r3, #1
 800dc3a:	69ba      	ldr	r2, [r7, #24]
 800dc3c:	4413      	add	r3, r2
 800dc3e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc44:	69bb      	ldr	r3, [r7, #24]
 800dc46:	0a5b      	lsrs	r3, r3, #9
 800dc48:	4413      	add	r3, r2
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	68f8      	ldr	r0, [r7, #12]
 800dc4e:	f7ff fdfb 	bl	800d848 <move_window>
 800dc52:	4603      	mov	r3, r0
 800dc54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dc56:	7ffb      	ldrb	r3, [r7, #31]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	f040 80af 	bne.w	800ddbc <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dc64:	69bb      	ldr	r3, [r7, #24]
 800dc66:	1c59      	adds	r1, r3, #1
 800dc68:	61b9      	str	r1, [r7, #24]
 800dc6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc6e:	4413      	add	r3, r2
 800dc70:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	f003 0301 	and.w	r3, r3, #1
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00d      	beq.n	800dc98 <put_fat+0xa4>
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	b25b      	sxtb	r3, r3
 800dc82:	f003 030f 	and.w	r3, r3, #15
 800dc86:	b25a      	sxtb	r2, r3
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	b2db      	uxtb	r3, r3
 800dc8c:	011b      	lsls	r3, r3, #4
 800dc8e:	b25b      	sxtb	r3, r3
 800dc90:	4313      	orrs	r3, r2
 800dc92:	b25b      	sxtb	r3, r3
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	e001      	b.n	800dc9c <put_fat+0xa8>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	697a      	ldr	r2, [r7, #20]
 800dc9e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2201      	movs	r2, #1
 800dca4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dcaa:	69bb      	ldr	r3, [r7, #24]
 800dcac:	0a5b      	lsrs	r3, r3, #9
 800dcae:	4413      	add	r3, r2
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	68f8      	ldr	r0, [r7, #12]
 800dcb4:	f7ff fdc8 	bl	800d848 <move_window>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dcbc:	7ffb      	ldrb	r3, [r7, #31]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d17e      	bne.n	800ddc0 <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dcc8:	69bb      	ldr	r3, [r7, #24]
 800dcca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcce:	4413      	add	r3, r2
 800dcd0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	f003 0301 	and.w	r3, r3, #1
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d003      	beq.n	800dce4 <put_fat+0xf0>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	091b      	lsrs	r3, r3, #4
 800dce0:	b2db      	uxtb	r3, r3
 800dce2:	e00e      	b.n	800dd02 <put_fat+0x10e>
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	781b      	ldrb	r3, [r3, #0]
 800dce8:	b25b      	sxtb	r3, r3
 800dcea:	f023 030f 	bic.w	r3, r3, #15
 800dcee:	b25a      	sxtb	r2, r3
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	0a1b      	lsrs	r3, r3, #8
 800dcf4:	b25b      	sxtb	r3, r3
 800dcf6:	f003 030f 	and.w	r3, r3, #15
 800dcfa:	b25b      	sxtb	r3, r3
 800dcfc:	4313      	orrs	r3, r2
 800dcfe:	b25b      	sxtb	r3, r3
 800dd00:	b2db      	uxtb	r3, r3
 800dd02:	697a      	ldr	r2, [r7, #20]
 800dd04:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	2201      	movs	r2, #1
 800dd0a:	70da      	strb	r2, [r3, #3]
			break;
 800dd0c:	e05d      	b.n	800ddca <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	0a1b      	lsrs	r3, r3, #8
 800dd16:	4413      	add	r3, r2
 800dd18:	4619      	mov	r1, r3
 800dd1a:	68f8      	ldr	r0, [r7, #12]
 800dd1c:	f7ff fd94 	bl	800d848 <move_window>
 800dd20:	4603      	mov	r3, r0
 800dd22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd24:	7ffb      	ldrb	r3, [r7, #31]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d14c      	bne.n	800ddc4 <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	005b      	lsls	r3, r3, #1
 800dd34:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800dd38:	4413      	add	r3, r2
 800dd3a:	687a      	ldr	r2, [r7, #4]
 800dd3c:	b292      	uxth	r2, r2
 800dd3e:	4611      	mov	r1, r2
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7ff fa83 	bl	800d24c <st_word>
			fs->wflag = 1;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	2201      	movs	r2, #1
 800dd4a:	70da      	strb	r2, [r3, #3]
			break;
 800dd4c:	e03d      	b.n	800ddca <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	09db      	lsrs	r3, r3, #7
 800dd56:	4413      	add	r3, r2
 800dd58:	4619      	mov	r1, r3
 800dd5a:	68f8      	ldr	r0, [r7, #12]
 800dd5c:	f7ff fd74 	bl	800d848 <move_window>
 800dd60:	4603      	mov	r3, r0
 800dd62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd64:	7ffb      	ldrb	r3, [r7, #31]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d12e      	bne.n	800ddc8 <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	781b      	ldrb	r3, [r3, #0]
 800dd6e:	2b04      	cmp	r3, #4
 800dd70:	d012      	beq.n	800dd98 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	009b      	lsls	r3, r3, #2
 800dd82:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dd86:	4413      	add	r3, r2
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7ff f961 	bl	800d050 <ld_dword>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800dd94:	4323      	orrs	r3, r4
 800dd96:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	009b      	lsls	r3, r3, #2
 800dda2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dda6:	4413      	add	r3, r2
 800dda8:	6879      	ldr	r1, [r7, #4]
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7ff fa69 	bl	800d282 <st_dword>
			fs->wflag = 1;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	70da      	strb	r2, [r3, #3]
			break;
 800ddb6:	e008      	b.n	800ddca <put_fat+0x1d6>
		}
	}
 800ddb8:	bf00      	nop
 800ddba:	e006      	b.n	800ddca <put_fat+0x1d6>
			if (res != FR_OK) break;
 800ddbc:	bf00      	nop
 800ddbe:	e004      	b.n	800ddca <put_fat+0x1d6>
			if (res != FR_OK) break;
 800ddc0:	bf00      	nop
 800ddc2:	e002      	b.n	800ddca <put_fat+0x1d6>
			if (res != FR_OK) break;
 800ddc4:	bf00      	nop
 800ddc6:	e000      	b.n	800ddca <put_fat+0x1d6>
			if (res != FR_OK) break;
 800ddc8:	bf00      	nop
	return res;
 800ddca:	7ffb      	ldrb	r3, [r7, #31]
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3724      	adds	r7, #36	; 0x24
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd90      	pop	{r4, r7, pc}

0800ddd4 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b08a      	sub	sp, #40	; 0x28
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	60f8      	str	r0, [r7, #12]
 800dddc:	60b9      	str	r1, [r7, #8]
 800ddde:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	3b02      	subs	r3, #2
 800dde4:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	69db      	ldr	r3, [r3, #28]
 800ddea:	3b02      	subs	r3, #2
 800ddec:	68ba      	ldr	r2, [r7, #8]
 800ddee:	429a      	cmp	r2, r3
 800ddf0:	d301      	bcc.n	800ddf6 <find_bitmap+0x22>
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	61fb      	str	r3, [r7, #28]
 800ddfa:	69fb      	ldr	r3, [r7, #28]
 800ddfc:	61bb      	str	r3, [r7, #24]
 800ddfe:	2300      	movs	r3, #0
 800de00:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	0b1b      	lsrs	r3, r3, #12
 800de0a:	4413      	add	r3, r2
 800de0c:	4619      	mov	r1, r3
 800de0e:	68f8      	ldr	r0, [r7, #12]
 800de10:	f7ff fd1a 	bl	800d848 <move_window>
 800de14:	4603      	mov	r3, r0
 800de16:	2b00      	cmp	r3, #0
 800de18:	d002      	beq.n	800de20 <find_bitmap+0x4c>
 800de1a:	f04f 33ff 	mov.w	r3, #4294967295
 800de1e:	e051      	b.n	800dec4 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800de20:	69fb      	ldr	r3, [r7, #28]
 800de22:	08db      	lsrs	r3, r3, #3
 800de24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de28:	623b      	str	r3, [r7, #32]
 800de2a:	69fb      	ldr	r3, [r7, #28]
 800de2c:	f003 0307 	and.w	r3, r3, #7
 800de30:	2201      	movs	r2, #1
 800de32:	fa02 f303 	lsl.w	r3, r2, r3
 800de36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800de3a:	68fa      	ldr	r2, [r7, #12]
 800de3c:	6a3b      	ldr	r3, [r7, #32]
 800de3e:	4413      	add	r3, r2
 800de40:	3338      	adds	r3, #56	; 0x38
 800de42:	781a      	ldrb	r2, [r3, #0]
 800de44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de48:	4013      	ands	r3, r2
 800de4a:	74fb      	strb	r3, [r7, #19]
 800de4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de50:	005b      	lsls	r3, r3, #1
 800de52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800de56:	69fb      	ldr	r3, [r7, #28]
 800de58:	3301      	adds	r3, #1
 800de5a:	61fb      	str	r3, [r7, #28]
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	69db      	ldr	r3, [r3, #28]
 800de60:	3b02      	subs	r3, #2
 800de62:	69fa      	ldr	r2, [r7, #28]
 800de64:	429a      	cmp	r2, r3
 800de66:	d307      	bcc.n	800de78 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800de68:	2300      	movs	r3, #0
 800de6a:	61fb      	str	r3, [r7, #28]
 800de6c:	2300      	movs	r3, #0
 800de6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de72:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de76:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800de78:	7cfb      	ldrb	r3, [r7, #19]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d109      	bne.n	800de92 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	3301      	adds	r3, #1
 800de82:	617b      	str	r3, [r7, #20]
 800de84:	697a      	ldr	r2, [r7, #20]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	429a      	cmp	r2, r3
 800de8a:	d106      	bne.n	800de9a <find_bitmap+0xc6>
 800de8c:	69bb      	ldr	r3, [r7, #24]
 800de8e:	3302      	adds	r3, #2
 800de90:	e018      	b.n	800dec4 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	61bb      	str	r3, [r7, #24]
 800de96:	2300      	movs	r3, #0
 800de98:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800de9a:	69fa      	ldr	r2, [r7, #28]
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	429a      	cmp	r2, r3
 800dea0:	d101      	bne.n	800dea6 <find_bitmap+0xd2>
 800dea2:	2300      	movs	r3, #0
 800dea4:	e00e      	b.n	800dec4 <find_bitmap+0xf0>
			} while (bm);
 800dea6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d1c5      	bne.n	800de3a <find_bitmap+0x66>
			bm = 1;
 800deae:	2301      	movs	r3, #1
 800deb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800deb4:	6a3b      	ldr	r3, [r7, #32]
 800deb6:	3301      	adds	r3, #1
 800deb8:	623b      	str	r3, [r7, #32]
 800deba:	6a3b      	ldr	r3, [r7, #32]
 800debc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dec0:	d3bb      	bcc.n	800de3a <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800dec2:	e79e      	b.n	800de02 <find_bitmap+0x2e>
	}
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	3728      	adds	r7, #40	; 0x28
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b088      	sub	sp, #32
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	60f8      	str	r0, [r7, #12]
 800ded4:	60b9      	str	r1, [r7, #8]
 800ded6:	607a      	str	r2, [r7, #4]
 800ded8:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	3b02      	subs	r3, #2
 800dede:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	0b1b      	lsrs	r3, r3, #12
 800dee8:	4413      	add	r3, r2
 800deea:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	08db      	lsrs	r3, r3, #3
 800def0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800def4:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	f003 0307 	and.w	r3, r3, #7
 800defc:	2201      	movs	r2, #1
 800defe:	fa02 f303 	lsl.w	r3, r2, r3
 800df02:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	1c5a      	adds	r2, r3, #1
 800df08:	617a      	str	r2, [r7, #20]
 800df0a:	4619      	mov	r1, r3
 800df0c:	68f8      	ldr	r0, [r7, #12]
 800df0e:	f7ff fc9b 	bl	800d848 <move_window>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	d001      	beq.n	800df1c <change_bitmap+0x50>
 800df18:	2301      	movs	r3, #1
 800df1a:	e03d      	b.n	800df98 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800df1c:	68fa      	ldr	r2, [r7, #12]
 800df1e:	69bb      	ldr	r3, [r7, #24]
 800df20:	4413      	add	r3, r2
 800df22:	3338      	adds	r3, #56	; 0x38
 800df24:	781a      	ldrb	r2, [r3, #0]
 800df26:	7ffb      	ldrb	r3, [r7, #31]
 800df28:	4013      	ands	r3, r2
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	bf14      	ite	ne
 800df30:	2301      	movne	r3, #1
 800df32:	2300      	moveq	r3, #0
 800df34:	b2db      	uxtb	r3, r3
 800df36:	461a      	mov	r2, r3
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d101      	bne.n	800df42 <change_bitmap+0x76>
 800df3e:	2302      	movs	r3, #2
 800df40:	e02a      	b.n	800df98 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800df42:	68fa      	ldr	r2, [r7, #12]
 800df44:	69bb      	ldr	r3, [r7, #24]
 800df46:	4413      	add	r3, r2
 800df48:	3338      	adds	r3, #56	; 0x38
 800df4a:	781a      	ldrb	r2, [r3, #0]
 800df4c:	7ffb      	ldrb	r3, [r7, #31]
 800df4e:	4053      	eors	r3, r2
 800df50:	b2d9      	uxtb	r1, r3
 800df52:	68fa      	ldr	r2, [r7, #12]
 800df54:	69bb      	ldr	r3, [r7, #24]
 800df56:	4413      	add	r3, r2
 800df58:	3338      	adds	r3, #56	; 0x38
 800df5a:	460a      	mov	r2, r1
 800df5c:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2201      	movs	r2, #1
 800df62:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	3b01      	subs	r3, #1
 800df68:	607b      	str	r3, [r7, #4]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d101      	bne.n	800df74 <change_bitmap+0xa8>
 800df70:	2300      	movs	r3, #0
 800df72:	e011      	b.n	800df98 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800df74:	7ffb      	ldrb	r3, [r7, #31]
 800df76:	005b      	lsls	r3, r3, #1
 800df78:	77fb      	strb	r3, [r7, #31]
 800df7a:	7ffb      	ldrb	r3, [r7, #31]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d1cd      	bne.n	800df1c <change_bitmap+0x50>
			bm = 1;
 800df80:	2301      	movs	r3, #1
 800df82:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800df84:	69bb      	ldr	r3, [r7, #24]
 800df86:	3301      	adds	r3, #1
 800df88:	61bb      	str	r3, [r7, #24]
 800df8a:	69bb      	ldr	r3, [r7, #24]
 800df8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df90:	d3c4      	bcc.n	800df1c <change_bitmap+0x50>
		i = 0;
 800df92:	2300      	movs	r3, #0
 800df94:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800df96:	e7b5      	b.n	800df04 <change_bitmap+0x38>
	}
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3720      	adds	r7, #32
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b086      	sub	sp, #24
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	79db      	ldrb	r3, [r3, #7]
 800dfac:	2b03      	cmp	r3, #3
 800dfae:	d121      	bne.n	800dff4 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	689b      	ldr	r3, [r3, #8]
 800dfb4:	617b      	str	r3, [r7, #20]
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	699b      	ldr	r3, [r3, #24]
 800dfba:	613b      	str	r3, [r7, #16]
 800dfbc:	e014      	b.n	800dfe8 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6818      	ldr	r0, [r3, #0]
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	6979      	ldr	r1, [r7, #20]
 800dfca:	f7ff fe13 	bl	800dbf4 <put_fat>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800dfd2:	7bfb      	ldrb	r3, [r7, #15]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d001      	beq.n	800dfdc <fill_first_frag+0x3c>
 800dfd8:	7bfb      	ldrb	r3, [r7, #15]
 800dfda:	e00c      	b.n	800dff6 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	3301      	adds	r3, #1
 800dfe0:	617b      	str	r3, [r7, #20]
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	3b01      	subs	r3, #1
 800dfe6:	613b      	str	r3, [r7, #16]
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d1e7      	bne.n	800dfbe <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2200      	movs	r2, #0
 800dff2:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800dff4:	2300      	movs	r3, #0
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3718      	adds	r7, #24
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}

0800dffe <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800dffe:	b580      	push	{r7, lr}
 800e000:	b086      	sub	sp, #24
 800e002:	af00      	add	r7, sp, #0
 800e004:	60f8      	str	r0, [r7, #12]
 800e006:	60b9      	str	r1, [r7, #8]
 800e008:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800e00a:	e020      	b.n	800e04e <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	6818      	ldr	r0, [r3, #0]
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	69db      	ldr	r3, [r3, #28]
 800e014:	68ba      	ldr	r2, [r7, #8]
 800e016:	1ad3      	subs	r3, r2, r3
 800e018:	1c59      	adds	r1, r3, #1
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	69db      	ldr	r3, [r3, #28]
 800e01e:	2b01      	cmp	r3, #1
 800e020:	d905      	bls.n	800e02e <fill_last_frag+0x30>
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	69db      	ldr	r3, [r3, #28]
 800e026:	68ba      	ldr	r2, [r7, #8]
 800e028:	1ad3      	subs	r3, r2, r3
 800e02a:	3302      	adds	r3, #2
 800e02c:	e000      	b.n	800e030 <fill_last_frag+0x32>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	461a      	mov	r2, r3
 800e032:	f7ff fddf 	bl	800dbf4 <put_fat>
 800e036:	4603      	mov	r3, r0
 800e038:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800e03a:	7dfb      	ldrb	r3, [r7, #23]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d001      	beq.n	800e044 <fill_last_frag+0x46>
 800e040:	7dfb      	ldrb	r3, [r7, #23]
 800e042:	e009      	b.n	800e058 <fill_last_frag+0x5a>
		obj->n_frag--;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	69db      	ldr	r3, [r3, #28]
 800e048:	1e5a      	subs	r2, r3, #1
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	69db      	ldr	r3, [r3, #28]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d1da      	bne.n	800e00c <fill_last_frag+0xe>
	}
	return FR_OK;
 800e056:	2300      	movs	r3, #0
}
 800e058:	4618      	mov	r0, r3
 800e05a:	3718      	adds	r7, #24
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}

0800e060 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b08a      	sub	sp, #40	; 0x28
 800e064:	af00      	add	r7, sp, #0
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e06c:	2300      	movs	r3, #0
 800e06e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	627b      	str	r3, [r7, #36]	; 0x24
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	2b01      	cmp	r3, #1
 800e082:	d904      	bls.n	800e08e <remove_chain+0x2e>
 800e084:	69bb      	ldr	r3, [r7, #24]
 800e086:	69db      	ldr	r3, [r3, #28]
 800e088:	68ba      	ldr	r2, [r7, #8]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d301      	bcc.n	800e092 <remove_chain+0x32>
 800e08e:	2302      	movs	r3, #2
 800e090:	e096      	b.n	800e1c0 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d014      	beq.n	800e0c2 <remove_chain+0x62>
 800e098:	69bb      	ldr	r3, [r7, #24]
 800e09a:	781b      	ldrb	r3, [r3, #0]
 800e09c:	2b04      	cmp	r3, #4
 800e09e:	d103      	bne.n	800e0a8 <remove_chain+0x48>
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	79db      	ldrb	r3, [r3, #7]
 800e0a4:	2b02      	cmp	r3, #2
 800e0a6:	d00c      	beq.n	800e0c2 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e0ac:	6879      	ldr	r1, [r7, #4]
 800e0ae:	69b8      	ldr	r0, [r7, #24]
 800e0b0:	f7ff fda0 	bl	800dbf4 <put_fat>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e0b8:	7ffb      	ldrb	r3, [r7, #31]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d001      	beq.n	800e0c2 <remove_chain+0x62>
 800e0be:	7ffb      	ldrb	r3, [r7, #31]
 800e0c0:	e07e      	b.n	800e1c0 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e0c2:	68b9      	ldr	r1, [r7, #8]
 800e0c4:	68f8      	ldr	r0, [r7, #12]
 800e0c6:	f7ff fc7b 	bl	800d9c0 <get_fat>
 800e0ca:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d055      	beq.n	800e17e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	2b01      	cmp	r3, #1
 800e0d6:	d101      	bne.n	800e0dc <remove_chain+0x7c>
 800e0d8:	2302      	movs	r3, #2
 800e0da:	e071      	b.n	800e1c0 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0e2:	d101      	bne.n	800e0e8 <remove_chain+0x88>
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	e06b      	b.n	800e1c0 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800e0e8:	69bb      	ldr	r3, [r7, #24]
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	2b04      	cmp	r3, #4
 800e0ee:	d00b      	beq.n	800e108 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	68b9      	ldr	r1, [r7, #8]
 800e0f4:	69b8      	ldr	r0, [r7, #24]
 800e0f6:	f7ff fd7d 	bl	800dbf4 <put_fat>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e0fe:	7ffb      	ldrb	r3, [r7, #31]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d001      	beq.n	800e108 <remove_chain+0xa8>
 800e104:	7ffb      	ldrb	r3, [r7, #31]
 800e106:	e05b      	b.n	800e1c0 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e108:	69bb      	ldr	r3, [r7, #24]
 800e10a:	699a      	ldr	r2, [r3, #24]
 800e10c:	69bb      	ldr	r3, [r7, #24]
 800e10e:	69db      	ldr	r3, [r3, #28]
 800e110:	3b02      	subs	r3, #2
 800e112:	429a      	cmp	r2, r3
 800e114:	d20b      	bcs.n	800e12e <remove_chain+0xce>
			fs->free_clst++;
 800e116:	69bb      	ldr	r3, [r7, #24]
 800e118:	699b      	ldr	r3, [r3, #24]
 800e11a:	1c5a      	adds	r2, r3, #1
 800e11c:	69bb      	ldr	r3, [r7, #24]
 800e11e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800e120:	69bb      	ldr	r3, [r7, #24]
 800e122:	791b      	ldrb	r3, [r3, #4]
 800e124:	f043 0301 	orr.w	r3, r3, #1
 800e128:	b2da      	uxtb	r2, r3
 800e12a:	69bb      	ldr	r3, [r7, #24]
 800e12c:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800e12e:	6a3b      	ldr	r3, [r7, #32]
 800e130:	3301      	adds	r3, #1
 800e132:	697a      	ldr	r2, [r7, #20]
 800e134:	429a      	cmp	r2, r3
 800e136:	d102      	bne.n	800e13e <remove_chain+0xde>
			ecl = nxt;
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	623b      	str	r3, [r7, #32]
 800e13c:	e017      	b.n	800e16e <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e13e:	69bb      	ldr	r3, [r7, #24]
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	2b04      	cmp	r3, #4
 800e144:	d10f      	bne.n	800e166 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800e146:	6a3a      	ldr	r2, [r7, #32]
 800e148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14a:	1ad3      	subs	r3, r2, r3
 800e14c:	1c5a      	adds	r2, r3, #1
 800e14e:	2300      	movs	r3, #0
 800e150:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e152:	69b8      	ldr	r0, [r7, #24]
 800e154:	f7ff feba 	bl	800decc <change_bitmap>
 800e158:	4603      	mov	r3, r0
 800e15a:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800e15c:	7ffb      	ldrb	r3, [r7, #31]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d001      	beq.n	800e166 <remove_chain+0x106>
 800e162:	7ffb      	ldrb	r3, [r7, #31]
 800e164:	e02c      	b.n	800e1c0 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	623b      	str	r3, [r7, #32]
 800e16a:	6a3b      	ldr	r3, [r7, #32]
 800e16c:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e172:	69bb      	ldr	r3, [r7, #24]
 800e174:	69db      	ldr	r3, [r3, #28]
 800e176:	68ba      	ldr	r2, [r7, #8]
 800e178:	429a      	cmp	r2, r3
 800e17a:	d3a2      	bcc.n	800e0c2 <remove_chain+0x62>
 800e17c:	e000      	b.n	800e180 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800e17e:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800e180:	69bb      	ldr	r3, [r7, #24]
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	2b04      	cmp	r3, #4
 800e186:	d11a      	bne.n	800e1be <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d103      	bne.n	800e196 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	2200      	movs	r2, #0
 800e192:	71da      	strb	r2, [r3, #7]
 800e194:	e013      	b.n	800e1be <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	79db      	ldrb	r3, [r3, #7]
 800e19a:	2b03      	cmp	r3, #3
 800e19c:	d10f      	bne.n	800e1be <remove_chain+0x15e>
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	689b      	ldr	r3, [r3, #8]
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d30a      	bcc.n	800e1be <remove_chain+0x15e>
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	689a      	ldr	r2, [r3, #8]
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	699b      	ldr	r3, [r3, #24]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d802      	bhi.n	800e1be <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2202      	movs	r2, #2
 800e1bc:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800e1be:	2300      	movs	r3, #0
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3728      	adds	r7, #40	; 0x28
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b088      	sub	sp, #32
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d10d      	bne.n	800e1fa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	695b      	ldr	r3, [r3, #20]
 800e1e2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e1e4:	69bb      	ldr	r3, [r7, #24]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d004      	beq.n	800e1f4 <create_chain+0x2c>
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	69db      	ldr	r3, [r3, #28]
 800e1ee:	69ba      	ldr	r2, [r7, #24]
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d31b      	bcc.n	800e22c <create_chain+0x64>
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	61bb      	str	r3, [r7, #24]
 800e1f8:	e018      	b.n	800e22c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e1fa:	6839      	ldr	r1, [r7, #0]
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f7ff fbdf 	bl	800d9c0 <get_fat>
 800e202:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2b01      	cmp	r3, #1
 800e208:	d801      	bhi.n	800e20e <create_chain+0x46>
 800e20a:	2301      	movs	r3, #1
 800e20c:	e0d9      	b.n	800e3c2 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e214:	d101      	bne.n	800e21a <create_chain+0x52>
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	e0d3      	b.n	800e3c2 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	69db      	ldr	r3, [r3, #28]
 800e21e:	68fa      	ldr	r2, [r7, #12]
 800e220:	429a      	cmp	r2, r3
 800e222:	d201      	bcs.n	800e228 <create_chain+0x60>
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	e0cc      	b.n	800e3c2 <create_chain+0x1fa>
		scl = clst;
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	2b04      	cmp	r3, #4
 800e232:	d164      	bne.n	800e2fe <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800e234:	2201      	movs	r2, #1
 800e236:	69b9      	ldr	r1, [r7, #24]
 800e238:	6938      	ldr	r0, [r7, #16]
 800e23a:	f7ff fdcb 	bl	800ddd4 <find_bitmap>
 800e23e:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800e240:	69fb      	ldr	r3, [r7, #28]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d003      	beq.n	800e24e <create_chain+0x86>
 800e246:	69fb      	ldr	r3, [r7, #28]
 800e248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e24c:	d101      	bne.n	800e252 <create_chain+0x8a>
 800e24e:	69fb      	ldr	r3, [r7, #28]
 800e250:	e0b7      	b.n	800e3c2 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800e252:	2301      	movs	r3, #1
 800e254:	2201      	movs	r2, #1
 800e256:	69f9      	ldr	r1, [r7, #28]
 800e258:	6938      	ldr	r0, [r7, #16]
 800e25a:	f7ff fe37 	bl	800decc <change_bitmap>
 800e25e:	4603      	mov	r3, r0
 800e260:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800e262:	7dfb      	ldrb	r3, [r7, #23]
 800e264:	2b02      	cmp	r3, #2
 800e266:	d101      	bne.n	800e26c <create_chain+0xa4>
 800e268:	2301      	movs	r3, #1
 800e26a:	e0aa      	b.n	800e3c2 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800e26c:	7dfb      	ldrb	r3, [r7, #23]
 800e26e:	2b01      	cmp	r3, #1
 800e270:	d102      	bne.n	800e278 <create_chain+0xb0>
 800e272:	f04f 33ff 	mov.w	r3, #4294967295
 800e276:	e0a4      	b.n	800e3c2 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d103      	bne.n	800e286 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2202      	movs	r2, #2
 800e282:	71da      	strb	r2, [r3, #7]
 800e284:	e011      	b.n	800e2aa <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	79db      	ldrb	r3, [r3, #7]
 800e28a:	2b02      	cmp	r3, #2
 800e28c:	d10d      	bne.n	800e2aa <create_chain+0xe2>
 800e28e:	69bb      	ldr	r3, [r7, #24]
 800e290:	3301      	adds	r3, #1
 800e292:	69fa      	ldr	r2, [r7, #28]
 800e294:	429a      	cmp	r2, r3
 800e296:	d008      	beq.n	800e2aa <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	689b      	ldr	r3, [r3, #8]
 800e29c:	69ba      	ldr	r2, [r7, #24]
 800e29e:	1ad2      	subs	r2, r2, r3
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2203      	movs	r2, #3
 800e2a8:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	79db      	ldrb	r3, [r3, #7]
 800e2ae:	2b02      	cmp	r3, #2
 800e2b0:	d064      	beq.n	800e37c <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	69fa      	ldr	r2, [r7, #28]
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	d10b      	bne.n	800e2d4 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	69db      	ldr	r3, [r3, #28]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d003      	beq.n	800e2cc <create_chain+0x104>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	69db      	ldr	r3, [r3, #28]
 800e2c8:	3301      	adds	r3, #1
 800e2ca:	e000      	b.n	800e2ce <create_chain+0x106>
 800e2cc:	2302      	movs	r3, #2
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	61d3      	str	r3, [r2, #28]
 800e2d2:	e053      	b.n	800e37c <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	69db      	ldr	r3, [r3, #28]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d102      	bne.n	800e2e2 <create_chain+0x11a>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2201      	movs	r2, #1
 800e2e0:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800e2e2:	69fa      	ldr	r2, [r7, #28]
 800e2e4:	6839      	ldr	r1, [r7, #0]
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f7ff fe89 	bl	800dffe <fill_last_frag>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800e2f0:	7dfb      	ldrb	r3, [r7, #23]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d142      	bne.n	800e37c <create_chain+0x1b4>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2201      	movs	r2, #1
 800e2fa:	61da      	str	r2, [r3, #28]
 800e2fc:	e03e      	b.n	800e37c <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e2fe:	69bb      	ldr	r3, [r7, #24]
 800e300:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e302:	69fb      	ldr	r3, [r7, #28]
 800e304:	3301      	adds	r3, #1
 800e306:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e308:	693b      	ldr	r3, [r7, #16]
 800e30a:	69db      	ldr	r3, [r3, #28]
 800e30c:	69fa      	ldr	r2, [r7, #28]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d307      	bcc.n	800e322 <create_chain+0x15a>
				ncl = 2;
 800e312:	2302      	movs	r3, #2
 800e314:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e316:	69fa      	ldr	r2, [r7, #28]
 800e318:	69bb      	ldr	r3, [r7, #24]
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d901      	bls.n	800e322 <create_chain+0x15a>
 800e31e:	2300      	movs	r3, #0
 800e320:	e04f      	b.n	800e3c2 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e322:	69f9      	ldr	r1, [r7, #28]
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f7ff fb4b 	bl	800d9c0 <get_fat>
 800e32a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d00e      	beq.n	800e350 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2b01      	cmp	r3, #1
 800e336:	d003      	beq.n	800e340 <create_chain+0x178>
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e33e:	d101      	bne.n	800e344 <create_chain+0x17c>
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	e03e      	b.n	800e3c2 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800e344:	69fa      	ldr	r2, [r7, #28]
 800e346:	69bb      	ldr	r3, [r7, #24]
 800e348:	429a      	cmp	r2, r3
 800e34a:	d1da      	bne.n	800e302 <create_chain+0x13a>
 800e34c:	2300      	movs	r3, #0
 800e34e:	e038      	b.n	800e3c2 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800e350:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e352:	f04f 32ff 	mov.w	r2, #4294967295
 800e356:	69f9      	ldr	r1, [r7, #28]
 800e358:	6938      	ldr	r0, [r7, #16]
 800e35a:	f7ff fc4b 	bl	800dbf4 <put_fat>
 800e35e:	4603      	mov	r3, r0
 800e360:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e362:	7dfb      	ldrb	r3, [r7, #23]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d109      	bne.n	800e37c <create_chain+0x1b4>
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d006      	beq.n	800e37c <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e36e:	69fa      	ldr	r2, [r7, #28]
 800e370:	6839      	ldr	r1, [r7, #0]
 800e372:	6938      	ldr	r0, [r7, #16]
 800e374:	f7ff fc3e 	bl	800dbf4 <put_fat>
 800e378:	4603      	mov	r3, r0
 800e37a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e37c:	7dfb      	ldrb	r3, [r7, #23]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d116      	bne.n	800e3b0 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	69fa      	ldr	r2, [r7, #28]
 800e386:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	699a      	ldr	r2, [r3, #24]
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	69db      	ldr	r3, [r3, #28]
 800e390:	3b02      	subs	r3, #2
 800e392:	429a      	cmp	r2, r3
 800e394:	d804      	bhi.n	800e3a0 <create_chain+0x1d8>
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	699b      	ldr	r3, [r3, #24]
 800e39a:	1e5a      	subs	r2, r3, #1
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800e3a0:	693b      	ldr	r3, [r7, #16]
 800e3a2:	791b      	ldrb	r3, [r3, #4]
 800e3a4:	f043 0301 	orr.w	r3, r3, #1
 800e3a8:	b2da      	uxtb	r2, r3
 800e3aa:	693b      	ldr	r3, [r7, #16]
 800e3ac:	711a      	strb	r2, [r3, #4]
 800e3ae:	e007      	b.n	800e3c0 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e3b0:	7dfb      	ldrb	r3, [r7, #23]
 800e3b2:	2b01      	cmp	r3, #1
 800e3b4:	d102      	bne.n	800e3bc <create_chain+0x1f4>
 800e3b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e3ba:	e000      	b.n	800e3be <create_chain+0x1f6>
 800e3bc:	2301      	movs	r3, #1
 800e3be:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e3c0:	69fb      	ldr	r3, [r7, #28]
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3720      	adds	r7, #32
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}

0800e3ca <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e3ca:	b5b0      	push	{r4, r5, r7, lr}
 800e3cc:	b088      	sub	sp, #32
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	60f8      	str	r0, [r7, #12]
 800e3d2:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3e0:	3304      	adds	r3, #4
 800e3e2:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e3e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e3e8:	f04f 0000 	mov.w	r0, #0
 800e3ec:	f04f 0100 	mov.w	r1, #0
 800e3f0:	0a50      	lsrs	r0, r2, #9
 800e3f2:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800e3f6:	0a59      	lsrs	r1, r3, #9
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	895b      	ldrh	r3, [r3, #10]
 800e3fc:	b29b      	uxth	r3, r3
 800e3fe:	2200      	movs	r2, #0
 800e400:	461c      	mov	r4, r3
 800e402:	4615      	mov	r5, r2
 800e404:	4622      	mov	r2, r4
 800e406:	462b      	mov	r3, r5
 800e408:	f7f1 ff4a 	bl	80002a0 <__aeabi_uldivmod>
 800e40c:	4602      	mov	r2, r0
 800e40e:	460b      	mov	r3, r1
 800e410:	4613      	mov	r3, r2
 800e412:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e414:	69bb      	ldr	r3, [r7, #24]
 800e416:	1d1a      	adds	r2, r3, #4
 800e418:	61ba      	str	r2, [r7, #24]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d101      	bne.n	800e428 <clmt_clust+0x5e>
 800e424:	2300      	movs	r3, #0
 800e426:	e010      	b.n	800e44a <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800e428:	69fa      	ldr	r2, [r7, #28]
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d307      	bcc.n	800e440 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800e430:	69fa      	ldr	r2, [r7, #28]
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	1ad3      	subs	r3, r2, r3
 800e436:	61fb      	str	r3, [r7, #28]
 800e438:	69bb      	ldr	r3, [r7, #24]
 800e43a:	3304      	adds	r3, #4
 800e43c:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e43e:	e7e9      	b.n	800e414 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800e440:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e442:	69bb      	ldr	r3, [r7, #24]
 800e444:	681a      	ldr	r2, [r3, #0]
 800e446:	69fb      	ldr	r3, [r7, #28]
 800e448:	4413      	add	r3, r2
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3720      	adds	r7, #32
 800e44e:	46bd      	mov	sp, r7
 800e450:	bdb0      	pop	{r4, r5, r7, pc}

0800e452 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e452:	b580      	push	{r7, lr}
 800e454:	b086      	sub	sp, #24
 800e456:	af00      	add	r7, sp, #0
 800e458:	6078      	str	r0, [r7, #4]
 800e45a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	2b04      	cmp	r3, #4
 800e468:	d102      	bne.n	800e470 <dir_sdi+0x1e>
 800e46a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e46e:	e001      	b.n	800e474 <dir_sdi+0x22>
 800e470:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	429a      	cmp	r2, r3
 800e478:	d904      	bls.n	800e484 <dir_sdi+0x32>
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	f003 031f 	and.w	r3, r3, #31
 800e480:	2b00      	cmp	r3, #0
 800e482:	d001      	beq.n	800e488 <dir_sdi+0x36>
		return FR_INT_ERR;
 800e484:	2302      	movs	r3, #2
 800e486:	e066      	b.n	800e556 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	683a      	ldr	r2, [r7, #0]
 800e48c:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	689b      	ldr	r3, [r3, #8]
 800e492:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e494:	697b      	ldr	r3, [r7, #20]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d109      	bne.n	800e4ae <dir_sdi+0x5c>
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	2b02      	cmp	r3, #2
 800e4a0:	d905      	bls.n	800e4ae <dir_sdi+0x5c>
		clst = fs->dirbase;
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4a6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d10c      	bne.n	800e4ce <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	095b      	lsrs	r3, r3, #5
 800e4b8:	693a      	ldr	r2, [r7, #16]
 800e4ba:	8912      	ldrh	r2, [r2, #8]
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d301      	bcc.n	800e4c4 <dir_sdi+0x72>
 800e4c0:	2302      	movs	r3, #2
 800e4c2:	e048      	b.n	800e556 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	639a      	str	r2, [r3, #56]	; 0x38
 800e4cc:	e029      	b.n	800e522 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	895b      	ldrh	r3, [r3, #10]
 800e4d2:	025b      	lsls	r3, r3, #9
 800e4d4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e4d6:	e019      	b.n	800e50c <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6979      	ldr	r1, [r7, #20]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7ff fa6f 	bl	800d9c0 <get_fat>
 800e4e2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4ea:	d101      	bne.n	800e4f0 <dir_sdi+0x9e>
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	e032      	b.n	800e556 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	2b01      	cmp	r3, #1
 800e4f4:	d904      	bls.n	800e500 <dir_sdi+0xae>
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	69db      	ldr	r3, [r3, #28]
 800e4fa:	697a      	ldr	r2, [r7, #20]
 800e4fc:	429a      	cmp	r2, r3
 800e4fe:	d301      	bcc.n	800e504 <dir_sdi+0xb2>
 800e500:	2302      	movs	r3, #2
 800e502:	e028      	b.n	800e556 <dir_sdi+0x104>
			ofs -= csz;
 800e504:	683a      	ldr	r2, [r7, #0]
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	1ad3      	subs	r3, r2, r3
 800e50a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e50c:	683a      	ldr	r2, [r7, #0]
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	429a      	cmp	r2, r3
 800e512:	d2e1      	bcs.n	800e4d8 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800e514:	6979      	ldr	r1, [r7, #20]
 800e516:	6938      	ldr	r0, [r7, #16]
 800e518:	f7ff fa32 	bl	800d980 <clust2sect>
 800e51c:	4602      	mov	r2, r0
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	697a      	ldr	r2, [r7, #20]
 800e526:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d101      	bne.n	800e534 <dir_sdi+0xe2>
 800e530:	2302      	movs	r3, #2
 800e532:	e010      	b.n	800e556 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	0a5b      	lsrs	r3, r3, #9
 800e53c:	441a      	add	r2, r3
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e54e:	441a      	add	r2, r3
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800e554:	2300      	movs	r3, #0
}
 800e556:	4618      	mov	r0, r3
 800e558:	3718      	adds	r7, #24
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}

0800e55e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e55e:	b580      	push	{r7, lr}
 800e560:	b086      	sub	sp, #24
 800e562:	af00      	add	r7, sp, #0
 800e564:	6078      	str	r0, [r7, #4]
 800e566:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e572:	3320      	adds	r3, #32
 800e574:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d00b      	beq.n	800e596 <dir_next+0x38>
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	2b04      	cmp	r3, #4
 800e584:	d102      	bne.n	800e58c <dir_next+0x2e>
 800e586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e58a:	e001      	b.n	800e590 <dir_next+0x32>
 800e58c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	429a      	cmp	r2, r3
 800e594:	d801      	bhi.n	800e59a <dir_next+0x3c>
 800e596:	2304      	movs	r3, #4
 800e598:	e0b2      	b.n	800e700 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	f040 80a0 	bne.w	800e6e6 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5aa:	1c5a      	adds	r2, r3, #1
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d10b      	bne.n	800e5d0 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	095b      	lsrs	r3, r3, #5
 800e5bc:	68fa      	ldr	r2, [r7, #12]
 800e5be:	8912      	ldrh	r2, [r2, #8]
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	f0c0 8090 	bcc.w	800e6e6 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	639a      	str	r2, [r3, #56]	; 0x38
 800e5cc:	2304      	movs	r3, #4
 800e5ce:	e097      	b.n	800e700 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	0a5b      	lsrs	r3, r3, #9
 800e5d4:	68fa      	ldr	r2, [r7, #12]
 800e5d6:	8952      	ldrh	r2, [r2, #10]
 800e5d8:	3a01      	subs	r2, #1
 800e5da:	4013      	ands	r3, r2
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	f040 8082 	bne.w	800e6e6 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e5e2:	687a      	ldr	r2, [r7, #4]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	4610      	mov	r0, r2
 800e5ec:	f7ff f9e8 	bl	800d9c0 <get_fat>
 800e5f0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e5f2:	697b      	ldr	r3, [r7, #20]
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	d801      	bhi.n	800e5fc <dir_next+0x9e>
 800e5f8:	2302      	movs	r3, #2
 800e5fa:	e081      	b.n	800e700 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e602:	d101      	bne.n	800e608 <dir_next+0xaa>
 800e604:	2301      	movs	r3, #1
 800e606:	e07b      	b.n	800e700 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	69db      	ldr	r3, [r3, #28]
 800e60c:	697a      	ldr	r2, [r7, #20]
 800e60e:	429a      	cmp	r2, r3
 800e610:	d35f      	bcc.n	800e6d2 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d104      	bne.n	800e622 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2200      	movs	r2, #0
 800e61c:	639a      	str	r2, [r3, #56]	; 0x38
 800e61e:	2304      	movs	r3, #4
 800e620:	e06e      	b.n	800e700 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e622:	687a      	ldr	r2, [r7, #4]
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e628:	4619      	mov	r1, r3
 800e62a:	4610      	mov	r0, r2
 800e62c:	f7ff fdcc 	bl	800e1c8 <create_chain>
 800e630:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d101      	bne.n	800e63c <dir_next+0xde>
 800e638:	2307      	movs	r3, #7
 800e63a:	e061      	b.n	800e700 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	2b01      	cmp	r3, #1
 800e640:	d101      	bne.n	800e646 <dir_next+0xe8>
 800e642:	2302      	movs	r3, #2
 800e644:	e05c      	b.n	800e700 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e64c:	d101      	bne.n	800e652 <dir_next+0xf4>
 800e64e:	2301      	movs	r3, #1
 800e650:	e056      	b.n	800e700 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	79db      	ldrb	r3, [r3, #7]
 800e656:	f043 0304 	orr.w	r3, r3, #4
 800e65a:	b2da      	uxtb	r2, r3
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e660:	68f8      	ldr	r0, [r7, #12]
 800e662:	f7ff f8ad 	bl	800d7c0 <sync_window>
 800e666:	4603      	mov	r3, r0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d001      	beq.n	800e670 <dir_next+0x112>
 800e66c:	2301      	movs	r3, #1
 800e66e:	e047      	b.n	800e700 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	3338      	adds	r3, #56	; 0x38
 800e674:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e678:	2100      	movs	r1, #0
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7fe fed6 	bl	800d42c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e680:	2300      	movs	r3, #0
 800e682:	613b      	str	r3, [r7, #16]
 800e684:	6979      	ldr	r1, [r7, #20]
 800e686:	68f8      	ldr	r0, [r7, #12]
 800e688:	f7ff f97a 	bl	800d980 <clust2sect>
 800e68c:	4602      	mov	r2, r0
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	635a      	str	r2, [r3, #52]	; 0x34
 800e692:	e012      	b.n	800e6ba <dir_next+0x15c>
						fs->wflag = 1;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2201      	movs	r2, #1
 800e698:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e69a:	68f8      	ldr	r0, [r7, #12]
 800e69c:	f7ff f890 	bl	800d7c0 <sync_window>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d001      	beq.n	800e6aa <dir_next+0x14c>
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	e02a      	b.n	800e700 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	3301      	adds	r3, #1
 800e6ae:	613b      	str	r3, [r7, #16]
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6b4:	1c5a      	adds	r2, r3, #1
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	635a      	str	r2, [r3, #52]	; 0x34
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	895b      	ldrh	r3, [r3, #10]
 800e6be:	461a      	mov	r2, r3
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	4293      	cmp	r3, r2
 800e6c4:	d3e6      	bcc.n	800e694 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	1ad2      	subs	r2, r2, r3
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	697a      	ldr	r2, [r7, #20]
 800e6d6:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800e6d8:	6979      	ldr	r1, [r7, #20]
 800e6da:	68f8      	ldr	r0, [r7, #12]
 800e6dc:	f7ff f950 	bl	800d980 <clust2sect>
 800e6e0:	4602      	mov	r2, r0
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	68ba      	ldr	r2, [r7, #8]
 800e6ea:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6f8:	441a      	add	r2, r3
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800e6fe:	2300      	movs	r3, #0
}
 800e700:	4618      	mov	r0, r3
 800e702:	3718      	adds	r7, #24
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}

0800e708 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b086      	sub	sp, #24
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e718:	2100      	movs	r1, #0
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f7ff fe99 	bl	800e452 <dir_sdi>
 800e720:	4603      	mov	r3, r0
 800e722:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e724:	7dfb      	ldrb	r3, [r7, #23]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d140      	bne.n	800e7ac <dir_alloc+0xa4>
		n = 0;
 800e72a:	2300      	movs	r3, #0
 800e72c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e732:	4619      	mov	r1, r3
 800e734:	68f8      	ldr	r0, [r7, #12]
 800e736:	f7ff f887 	bl	800d848 <move_window>
 800e73a:	4603      	mov	r3, r0
 800e73c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e73e:	7dfb      	ldrb	r3, [r7, #23]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d132      	bne.n	800e7aa <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	2b04      	cmp	r3, #4
 800e74a:	d108      	bne.n	800e75e <dir_alloc+0x56>
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e750:	781b      	ldrb	r3, [r3, #0]
 800e752:	b25b      	sxtb	r3, r3
 800e754:	43db      	mvns	r3, r3
 800e756:	b2db      	uxtb	r3, r3
 800e758:	09db      	lsrs	r3, r3, #7
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	e00f      	b.n	800e77e <dir_alloc+0x76>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	2be5      	cmp	r3, #229	; 0xe5
 800e766:	d004      	beq.n	800e772 <dir_alloc+0x6a>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d101      	bne.n	800e776 <dir_alloc+0x6e>
 800e772:	2301      	movs	r3, #1
 800e774:	e000      	b.n	800e778 <dir_alloc+0x70>
 800e776:	2300      	movs	r3, #0
 800e778:	f003 0301 	and.w	r3, r3, #1
 800e77c:	b2db      	uxtb	r3, r3
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d007      	beq.n	800e792 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e782:	693b      	ldr	r3, [r7, #16]
 800e784:	3301      	adds	r3, #1
 800e786:	613b      	str	r3, [r7, #16]
 800e788:	693a      	ldr	r2, [r7, #16]
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d102      	bne.n	800e796 <dir_alloc+0x8e>
 800e790:	e00c      	b.n	800e7ac <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e792:	2300      	movs	r3, #0
 800e794:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e796:	2101      	movs	r1, #1
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f7ff fee0 	bl	800e55e <dir_next>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e7a2:	7dfb      	ldrb	r3, [r7, #23]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d0c2      	beq.n	800e72e <dir_alloc+0x26>
 800e7a8:	e000      	b.n	800e7ac <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800e7aa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e7ac:	7dfb      	ldrb	r3, [r7, #23]
 800e7ae:	2b04      	cmp	r3, #4
 800e7b0:	d101      	bne.n	800e7b6 <dir_alloc+0xae>
 800e7b2:	2307      	movs	r3, #7
 800e7b4:	75fb      	strb	r3, [r7, #23]
	return res;
 800e7b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3718      	adds	r7, #24
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}

0800e7c0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b084      	sub	sp, #16
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	331a      	adds	r3, #26
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f7fe fc26 	bl	800d020 <ld_word>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	781b      	ldrb	r3, [r3, #0]
 800e7dc:	2b03      	cmp	r3, #3
 800e7de:	d109      	bne.n	800e7f4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	3314      	adds	r3, #20
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7fe fc1b 	bl	800d020 <ld_word>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	041b      	lsls	r3, r3, #16
 800e7ee:	68fa      	ldr	r2, [r7, #12]
 800e7f0:	4313      	orrs	r3, r2
 800e7f2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3710      	adds	r7, #16
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}

0800e7fe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e7fe:	b580      	push	{r7, lr}
 800e800:	b084      	sub	sp, #16
 800e802:	af00      	add	r7, sp, #0
 800e804:	60f8      	str	r0, [r7, #12]
 800e806:	60b9      	str	r1, [r7, #8]
 800e808:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	331a      	adds	r3, #26
 800e80e:	687a      	ldr	r2, [r7, #4]
 800e810:	b292      	uxth	r2, r2
 800e812:	4611      	mov	r1, r2
 800e814:	4618      	mov	r0, r3
 800e816:	f7fe fd19 	bl	800d24c <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	2b03      	cmp	r3, #3
 800e820:	d109      	bne.n	800e836 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	f103 0214 	add.w	r2, r3, #20
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	0c1b      	lsrs	r3, r3, #16
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	4619      	mov	r1, r3
 800e830:	4610      	mov	r0, r2
 800e832:	f7fe fd0b 	bl	800d24c <st_word>
	}
}
 800e836:	bf00      	nop
 800e838:	3710      	adds	r7, #16
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}
	...

0800e840 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e840:	b590      	push	{r4, r7, lr}
 800e842:	b087      	sub	sp, #28
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	331a      	adds	r3, #26
 800e84e:	4618      	mov	r0, r3
 800e850:	f7fe fbe6 	bl	800d020 <ld_word>
 800e854:	4603      	mov	r3, r0
 800e856:	2b00      	cmp	r3, #0
 800e858:	d001      	beq.n	800e85e <cmp_lfn+0x1e>
 800e85a:	2300      	movs	r3, #0
 800e85c:	e059      	b.n	800e912 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e866:	1e5a      	subs	r2, r3, #1
 800e868:	4613      	mov	r3, r2
 800e86a:	005b      	lsls	r3, r3, #1
 800e86c:	4413      	add	r3, r2
 800e86e:	009b      	lsls	r3, r3, #2
 800e870:	4413      	add	r3, r2
 800e872:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e874:	2301      	movs	r3, #1
 800e876:	81fb      	strh	r3, [r7, #14]
 800e878:	2300      	movs	r3, #0
 800e87a:	613b      	str	r3, [r7, #16]
 800e87c:	e033      	b.n	800e8e6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e87e:	4a27      	ldr	r2, [pc, #156]	; (800e91c <cmp_lfn+0xdc>)
 800e880:	693b      	ldr	r3, [r7, #16]
 800e882:	4413      	add	r3, r2
 800e884:	781b      	ldrb	r3, [r3, #0]
 800e886:	461a      	mov	r2, r3
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	4413      	add	r3, r2
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7fe fbc7 	bl	800d020 <ld_word>
 800e892:	4603      	mov	r3, r0
 800e894:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e896:	89fb      	ldrh	r3, [r7, #14]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d01a      	beq.n	800e8d2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	2bfe      	cmp	r3, #254	; 0xfe
 800e8a0:	d812      	bhi.n	800e8c8 <cmp_lfn+0x88>
 800e8a2:	89bb      	ldrh	r3, [r7, #12]
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f003 f96f 	bl	8011b88 <ff_wtoupper>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	461c      	mov	r4, r3
 800e8ae:	697b      	ldr	r3, [r7, #20]
 800e8b0:	1c5a      	adds	r2, r3, #1
 800e8b2:	617a      	str	r2, [r7, #20]
 800e8b4:	005b      	lsls	r3, r3, #1
 800e8b6:	687a      	ldr	r2, [r7, #4]
 800e8b8:	4413      	add	r3, r2
 800e8ba:	881b      	ldrh	r3, [r3, #0]
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f003 f963 	bl	8011b88 <ff_wtoupper>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	429c      	cmp	r4, r3
 800e8c6:	d001      	beq.n	800e8cc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	e022      	b.n	800e912 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e8cc:	89bb      	ldrh	r3, [r7, #12]
 800e8ce:	81fb      	strh	r3, [r7, #14]
 800e8d0:	e006      	b.n	800e8e0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e8d2:	89bb      	ldrh	r3, [r7, #12]
 800e8d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	d001      	beq.n	800e8e0 <cmp_lfn+0xa0>
 800e8dc:	2300      	movs	r3, #0
 800e8de:	e018      	b.n	800e912 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	613b      	str	r3, [r7, #16]
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	2b0c      	cmp	r3, #12
 800e8ea:	d9c8      	bls.n	800e87e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d00b      	beq.n	800e910 <cmp_lfn+0xd0>
 800e8f8:	89fb      	ldrh	r3, [r7, #14]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d008      	beq.n	800e910 <cmp_lfn+0xd0>
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	005b      	lsls	r3, r3, #1
 800e902:	687a      	ldr	r2, [r7, #4]
 800e904:	4413      	add	r3, r2
 800e906:	881b      	ldrh	r3, [r3, #0]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d001      	beq.n	800e910 <cmp_lfn+0xd0>
 800e90c:	2300      	movs	r3, #0
 800e90e:	e000      	b.n	800e912 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e910:	2301      	movs	r3, #1
}
 800e912:	4618      	mov	r0, r3
 800e914:	371c      	adds	r7, #28
 800e916:	46bd      	mov	sp, r7
 800e918:	bd90      	pop	{r4, r7, pc}
 800e91a:	bf00      	nop
 800e91c:	080177ac 	.word	0x080177ac

0800e920 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b086      	sub	sp, #24
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	331a      	adds	r3, #26
 800e92e:	4618      	mov	r0, r3
 800e930:	f7fe fb76 	bl	800d020 <ld_word>
 800e934:	4603      	mov	r3, r0
 800e936:	2b00      	cmp	r3, #0
 800e938:	d001      	beq.n	800e93e <pick_lfn+0x1e>
 800e93a:	2300      	movs	r3, #0
 800e93c:	e04d      	b.n	800e9da <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e946:	1e5a      	subs	r2, r3, #1
 800e948:	4613      	mov	r3, r2
 800e94a:	005b      	lsls	r3, r3, #1
 800e94c:	4413      	add	r3, r2
 800e94e:	009b      	lsls	r3, r3, #2
 800e950:	4413      	add	r3, r2
 800e952:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e954:	2301      	movs	r3, #1
 800e956:	81fb      	strh	r3, [r7, #14]
 800e958:	2300      	movs	r3, #0
 800e95a:	613b      	str	r3, [r7, #16]
 800e95c:	e028      	b.n	800e9b0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e95e:	4a21      	ldr	r2, [pc, #132]	; (800e9e4 <pick_lfn+0xc4>)
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	4413      	add	r3, r2
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	461a      	mov	r2, r3
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	4413      	add	r3, r2
 800e96c:	4618      	mov	r0, r3
 800e96e:	f7fe fb57 	bl	800d020 <ld_word>
 800e972:	4603      	mov	r3, r0
 800e974:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e976:	89fb      	ldrh	r3, [r7, #14]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d00f      	beq.n	800e99c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	2bfe      	cmp	r3, #254	; 0xfe
 800e980:	d901      	bls.n	800e986 <pick_lfn+0x66>
 800e982:	2300      	movs	r3, #0
 800e984:	e029      	b.n	800e9da <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e986:	89bb      	ldrh	r3, [r7, #12]
 800e988:	81fb      	strh	r3, [r7, #14]
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	1c5a      	adds	r2, r3, #1
 800e98e:	617a      	str	r2, [r7, #20]
 800e990:	005b      	lsls	r3, r3, #1
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	4413      	add	r3, r2
 800e996:	89fa      	ldrh	r2, [r7, #14]
 800e998:	801a      	strh	r2, [r3, #0]
 800e99a:	e006      	b.n	800e9aa <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e99c:	89bb      	ldrh	r3, [r7, #12]
 800e99e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	d001      	beq.n	800e9aa <pick_lfn+0x8a>
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	e017      	b.n	800e9da <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	3301      	adds	r3, #1
 800e9ae:	613b      	str	r3, [r7, #16]
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	2b0c      	cmp	r3, #12
 800e9b4:	d9d3      	bls.n	800e95e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d00a      	beq.n	800e9d8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	2bfe      	cmp	r3, #254	; 0xfe
 800e9c6:	d901      	bls.n	800e9cc <pick_lfn+0xac>
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	e006      	b.n	800e9da <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	005b      	lsls	r3, r3, #1
 800e9d0:	687a      	ldr	r2, [r7, #4]
 800e9d2:	4413      	add	r3, r2
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800e9d8:	2301      	movs	r3, #1
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3718      	adds	r7, #24
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	080177ac 	.word	0x080177ac

0800e9e8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b088      	sub	sp, #32
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	60f8      	str	r0, [r7, #12]
 800e9f0:	60b9      	str	r1, [r7, #8]
 800e9f2:	4611      	mov	r1, r2
 800e9f4:	461a      	mov	r2, r3
 800e9f6:	460b      	mov	r3, r1
 800e9f8:	71fb      	strb	r3, [r7, #7]
 800e9fa:	4613      	mov	r3, r2
 800e9fc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	330d      	adds	r3, #13
 800ea02:	79ba      	ldrb	r2, [r7, #6]
 800ea04:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	330b      	adds	r3, #11
 800ea0a:	220f      	movs	r2, #15
 800ea0c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	330c      	adds	r3, #12
 800ea12:	2200      	movs	r2, #0
 800ea14:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	331a      	adds	r3, #26
 800ea1a:	2100      	movs	r1, #0
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f7fe fc15 	bl	800d24c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ea22:	79fb      	ldrb	r3, [r7, #7]
 800ea24:	1e5a      	subs	r2, r3, #1
 800ea26:	4613      	mov	r3, r2
 800ea28:	005b      	lsls	r3, r3, #1
 800ea2a:	4413      	add	r3, r2
 800ea2c:	009b      	lsls	r3, r3, #2
 800ea2e:	4413      	add	r3, r2
 800ea30:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ea32:	2300      	movs	r3, #0
 800ea34:	82fb      	strh	r3, [r7, #22]
 800ea36:	2300      	movs	r3, #0
 800ea38:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ea3a:	8afb      	ldrh	r3, [r7, #22]
 800ea3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d007      	beq.n	800ea54 <put_lfn+0x6c>
 800ea44:	69fb      	ldr	r3, [r7, #28]
 800ea46:	1c5a      	adds	r2, r3, #1
 800ea48:	61fa      	str	r2, [r7, #28]
 800ea4a:	005b      	lsls	r3, r3, #1
 800ea4c:	68fa      	ldr	r2, [r7, #12]
 800ea4e:	4413      	add	r3, r2
 800ea50:	881b      	ldrh	r3, [r3, #0]
 800ea52:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ea54:	4a17      	ldr	r2, [pc, #92]	; (800eab4 <put_lfn+0xcc>)
 800ea56:	69bb      	ldr	r3, [r7, #24]
 800ea58:	4413      	add	r3, r2
 800ea5a:	781b      	ldrb	r3, [r3, #0]
 800ea5c:	461a      	mov	r2, r3
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	4413      	add	r3, r2
 800ea62:	8afa      	ldrh	r2, [r7, #22]
 800ea64:	4611      	mov	r1, r2
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7fe fbf0 	bl	800d24c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ea6c:	8afb      	ldrh	r3, [r7, #22]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d102      	bne.n	800ea78 <put_lfn+0x90>
 800ea72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea76:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ea78:	69bb      	ldr	r3, [r7, #24]
 800ea7a:	3301      	adds	r3, #1
 800ea7c:	61bb      	str	r3, [r7, #24]
 800ea7e:	69bb      	ldr	r3, [r7, #24]
 800ea80:	2b0c      	cmp	r3, #12
 800ea82:	d9da      	bls.n	800ea3a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ea84:	8afb      	ldrh	r3, [r7, #22]
 800ea86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea8a:	4293      	cmp	r3, r2
 800ea8c:	d006      	beq.n	800ea9c <put_lfn+0xb4>
 800ea8e:	69fb      	ldr	r3, [r7, #28]
 800ea90:	005b      	lsls	r3, r3, #1
 800ea92:	68fa      	ldr	r2, [r7, #12]
 800ea94:	4413      	add	r3, r2
 800ea96:	881b      	ldrh	r3, [r3, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d103      	bne.n	800eaa4 <put_lfn+0xbc>
 800ea9c:	79fb      	ldrb	r3, [r7, #7]
 800ea9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eaa2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	79fa      	ldrb	r2, [r7, #7]
 800eaa8:	701a      	strb	r2, [r3, #0]
}
 800eaaa:	bf00      	nop
 800eaac:	3720      	adds	r7, #32
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
 800eab2:	bf00      	nop
 800eab4:	080177ac 	.word	0x080177ac

0800eab8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b08c      	sub	sp, #48	; 0x30
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	60f8      	str	r0, [r7, #12]
 800eac0:	60b9      	str	r1, [r7, #8]
 800eac2:	607a      	str	r2, [r7, #4]
 800eac4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800eac6:	220b      	movs	r2, #11
 800eac8:	68b9      	ldr	r1, [r7, #8]
 800eaca:	68f8      	ldr	r0, [r7, #12]
 800eacc:	f7fe fc8d 	bl	800d3ea <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	2b05      	cmp	r3, #5
 800ead4:	d92b      	bls.n	800eb2e <gen_numname+0x76>
		sr = seq;
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800eada:	e022      	b.n	800eb22 <gen_numname+0x6a>
			wc = *lfn++;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	1c9a      	adds	r2, r3, #2
 800eae0:	607a      	str	r2, [r7, #4]
 800eae2:	881b      	ldrh	r3, [r3, #0]
 800eae4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800eae6:	2300      	movs	r3, #0
 800eae8:	62bb      	str	r3, [r7, #40]	; 0x28
 800eaea:	e017      	b.n	800eb1c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800eaec:	69fb      	ldr	r3, [r7, #28]
 800eaee:	005a      	lsls	r2, r3, #1
 800eaf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eaf2:	f003 0301 	and.w	r3, r3, #1
 800eaf6:	4413      	add	r3, r2
 800eaf8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800eafa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eafc:	085b      	lsrs	r3, r3, #1
 800eafe:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800eb00:	69fb      	ldr	r3, [r7, #28]
 800eb02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d005      	beq.n	800eb16 <gen_numname+0x5e>
 800eb0a:	69fb      	ldr	r3, [r7, #28]
 800eb0c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800eb10:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800eb14:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800eb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb18:	3301      	adds	r3, #1
 800eb1a:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb1e:	2b0f      	cmp	r3, #15
 800eb20:	d9e4      	bls.n	800eaec <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	881b      	ldrh	r3, [r3, #0]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d1d8      	bne.n	800eadc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800eb2a:	69fb      	ldr	r3, [r7, #28]
 800eb2c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800eb2e:	2307      	movs	r3, #7
 800eb30:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	b2db      	uxtb	r3, r3
 800eb36:	f003 030f 	and.w	r3, r3, #15
 800eb3a:	b2db      	uxtb	r3, r3
 800eb3c:	3330      	adds	r3, #48	; 0x30
 800eb3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800eb42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb46:	2b39      	cmp	r3, #57	; 0x39
 800eb48:	d904      	bls.n	800eb54 <gen_numname+0x9c>
 800eb4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb4e:	3307      	adds	r3, #7
 800eb50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800eb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb56:	1e5a      	subs	r2, r3, #1
 800eb58:	62ba      	str	r2, [r7, #40]	; 0x28
 800eb5a:	3330      	adds	r3, #48	; 0x30
 800eb5c:	443b      	add	r3, r7
 800eb5e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800eb62:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	091b      	lsrs	r3, r3, #4
 800eb6a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d1df      	bne.n	800eb32 <gen_numname+0x7a>
	ns[i] = '~';
 800eb72:	f107 0214 	add.w	r2, r7, #20
 800eb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb78:	4413      	add	r3, r2
 800eb7a:	227e      	movs	r2, #126	; 0x7e
 800eb7c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800eb7e:	2300      	movs	r3, #0
 800eb80:	627b      	str	r3, [r7, #36]	; 0x24
 800eb82:	e002      	b.n	800eb8a <gen_numname+0xd2>
 800eb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb86:	3301      	adds	r3, #1
 800eb88:	627b      	str	r3, [r7, #36]	; 0x24
 800eb8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	d205      	bcs.n	800eb9e <gen_numname+0xe6>
 800eb92:	68fa      	ldr	r2, [r7, #12]
 800eb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb96:	4413      	add	r3, r2
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	2b20      	cmp	r3, #32
 800eb9c:	d1f2      	bne.n	800eb84 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba0:	2b07      	cmp	r3, #7
 800eba2:	d807      	bhi.n	800ebb4 <gen_numname+0xfc>
 800eba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba6:	1c5a      	adds	r2, r3, #1
 800eba8:	62ba      	str	r2, [r7, #40]	; 0x28
 800ebaa:	3330      	adds	r3, #48	; 0x30
 800ebac:	443b      	add	r3, r7
 800ebae:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ebb2:	e000      	b.n	800ebb6 <gen_numname+0xfe>
 800ebb4:	2120      	movs	r1, #32
 800ebb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb8:	1c5a      	adds	r2, r3, #1
 800ebba:	627a      	str	r2, [r7, #36]	; 0x24
 800ebbc:	68fa      	ldr	r2, [r7, #12]
 800ebbe:	4413      	add	r3, r2
 800ebc0:	460a      	mov	r2, r1
 800ebc2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ebc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc6:	2b07      	cmp	r3, #7
 800ebc8:	d9e9      	bls.n	800eb9e <gen_numname+0xe6>
}
 800ebca:	bf00      	nop
 800ebcc:	bf00      	nop
 800ebce:	3730      	adds	r7, #48	; 0x30
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b085      	sub	sp, #20
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ebe0:	230b      	movs	r3, #11
 800ebe2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ebe4:	7bfb      	ldrb	r3, [r7, #15]
 800ebe6:	b2da      	uxtb	r2, r3
 800ebe8:	0852      	lsrs	r2, r2, #1
 800ebea:	01db      	lsls	r3, r3, #7
 800ebec:	4313      	orrs	r3, r2
 800ebee:	b2da      	uxtb	r2, r3
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	1c59      	adds	r1, r3, #1
 800ebf4:	6079      	str	r1, [r7, #4]
 800ebf6:	781b      	ldrb	r3, [r3, #0]
 800ebf8:	4413      	add	r3, r2
 800ebfa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	3b01      	subs	r3, #1
 800ec00:	60bb      	str	r3, [r7, #8]
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d1ed      	bne.n	800ebe4 <sum_sfn+0x10>
	return sum;
 800ec08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3714      	adds	r7, #20
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec14:	4770      	bx	lr

0800ec16 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800ec16:	b480      	push	{r7}
 800ec18:	b087      	sub	sp, #28
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	3301      	adds	r3, #1
 800ec22:	781b      	ldrb	r3, [r3, #0]
 800ec24:	3301      	adds	r3, #1
 800ec26:	015b      	lsls	r3, r3, #5
 800ec28:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	827b      	strh	r3, [r7, #18]
 800ec2e:	2300      	movs	r3, #0
 800ec30:	617b      	str	r3, [r7, #20]
 800ec32:	e018      	b.n	800ec66 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	2b02      	cmp	r3, #2
 800ec38:	d103      	bne.n	800ec42 <xdir_sum+0x2c>
			i++;
 800ec3a:	697b      	ldr	r3, [r7, #20]
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	617b      	str	r3, [r7, #20]
 800ec40:	e00e      	b.n	800ec60 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800ec42:	8a7b      	ldrh	r3, [r7, #18]
 800ec44:	03db      	lsls	r3, r3, #15
 800ec46:	b29a      	uxth	r2, r3
 800ec48:	8a7b      	ldrh	r3, [r7, #18]
 800ec4a:	085b      	lsrs	r3, r3, #1
 800ec4c:	b29b      	uxth	r3, r3
 800ec4e:	4413      	add	r3, r2
 800ec50:	b29a      	uxth	r2, r3
 800ec52:	6879      	ldr	r1, [r7, #4]
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	440b      	add	r3, r1
 800ec58:	781b      	ldrb	r3, [r3, #0]
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	4413      	add	r3, r2
 800ec5e:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	3301      	adds	r3, #1
 800ec64:	617b      	str	r3, [r7, #20]
 800ec66:	697a      	ldr	r2, [r7, #20]
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d3e2      	bcc.n	800ec34 <xdir_sum+0x1e>
		}
	}
	return sum;
 800ec6e:	8a7b      	ldrh	r3, [r7, #18]
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	371c      	adds	r7, #28
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr

0800ec7c <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b084      	sub	sp, #16
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800ec84:	2300      	movs	r3, #0
 800ec86:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800ec88:	e01f      	b.n	800ecca <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800ec8a:	89bb      	ldrh	r3, [r7, #12]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f002 ff7b 	bl	8011b88 <ff_wtoupper>
 800ec92:	4603      	mov	r3, r0
 800ec94:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800ec96:	89fb      	ldrh	r3, [r7, #14]
 800ec98:	03db      	lsls	r3, r3, #15
 800ec9a:	b29a      	uxth	r2, r3
 800ec9c:	89fb      	ldrh	r3, [r7, #14]
 800ec9e:	085b      	lsrs	r3, r3, #1
 800eca0:	b29b      	uxth	r3, r3
 800eca2:	4413      	add	r3, r2
 800eca4:	b29a      	uxth	r2, r3
 800eca6:	89bb      	ldrh	r3, [r7, #12]
 800eca8:	b2db      	uxtb	r3, r3
 800ecaa:	b29b      	uxth	r3, r3
 800ecac:	4413      	add	r3, r2
 800ecae:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800ecb0:	89fb      	ldrh	r3, [r7, #14]
 800ecb2:	03db      	lsls	r3, r3, #15
 800ecb4:	b29a      	uxth	r2, r3
 800ecb6:	89fb      	ldrh	r3, [r7, #14]
 800ecb8:	085b      	lsrs	r3, r3, #1
 800ecba:	b29b      	uxth	r3, r3
 800ecbc:	4413      	add	r3, r2
 800ecbe:	b29a      	uxth	r2, r3
 800ecc0:	89bb      	ldrh	r3, [r7, #12]
 800ecc2:	0a1b      	lsrs	r3, r3, #8
 800ecc4:	b29b      	uxth	r3, r3
 800ecc6:	4413      	add	r3, r2
 800ecc8:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	1c9a      	adds	r2, r3, #2
 800ecce:	607a      	str	r2, [r7, #4]
 800ecd0:	881b      	ldrh	r3, [r3, #0]
 800ecd2:	81bb      	strh	r3, [r7, #12]
 800ecd4:	89bb      	ldrh	r3, [r7, #12]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d1d7      	bne.n	800ec8a <xname_sum+0xe>
	}
	return sum;
 800ecda:	89fb      	ldrh	r3, [r7, #14]
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3710      	adds	r7, #16
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800ece4:	b590      	push	{r4, r7, lr}
 800ece6:	b087      	sub	sp, #28
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	691b      	ldr	r3, [r3, #16]
 800ecf2:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681a      	ldr	r2, [r3, #0]
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	4610      	mov	r0, r2
 800ed00:	f7fe fda2 	bl	800d848 <move_window>
 800ed04:	4603      	mov	r3, r0
 800ed06:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800ed08:	7bfb      	ldrb	r3, [r7, #15]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d001      	beq.n	800ed12 <load_xdir+0x2e>
 800ed0e:	7bfb      	ldrb	r3, [r7, #15]
 800ed10:	e09f      	b.n	800ee52 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	2b85      	cmp	r3, #133	; 0x85
 800ed1a:	d001      	beq.n	800ed20 <load_xdir+0x3c>
 800ed1c:	2302      	movs	r3, #2
 800ed1e:	e098      	b.n	800ee52 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed24:	2220      	movs	r2, #32
 800ed26:	4619      	mov	r1, r3
 800ed28:	6938      	ldr	r0, [r7, #16]
 800ed2a:	f7fe fb5e 	bl	800d3ea <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	3301      	adds	r3, #1
 800ed32:	781b      	ldrb	r3, [r3, #0]
 800ed34:	3301      	adds	r3, #1
 800ed36:	015b      	lsls	r3, r3, #5
 800ed38:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	2b5f      	cmp	r3, #95	; 0x5f
 800ed3e:	d903      	bls.n	800ed48 <load_xdir+0x64>
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800ed46:	d901      	bls.n	800ed4c <load_xdir+0x68>
 800ed48:	2302      	movs	r3, #2
 800ed4a:	e082      	b.n	800ee52 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800ed4c:	2100      	movs	r1, #0
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f7ff fc05 	bl	800e55e <dir_next>
 800ed54:	4603      	mov	r3, r0
 800ed56:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800ed58:	7bfb      	ldrb	r3, [r7, #15]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d001      	beq.n	800ed62 <load_xdir+0x7e>
 800ed5e:	7bfb      	ldrb	r3, [r7, #15]
 800ed60:	e077      	b.n	800ee52 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681a      	ldr	r2, [r3, #0]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed6a:	4619      	mov	r1, r3
 800ed6c:	4610      	mov	r0, r2
 800ed6e:	f7fe fd6b 	bl	800d848 <move_window>
 800ed72:	4603      	mov	r3, r0
 800ed74:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800ed76:	7bfb      	ldrb	r3, [r7, #15]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d001      	beq.n	800ed80 <load_xdir+0x9c>
 800ed7c:	7bfb      	ldrb	r3, [r7, #15]
 800ed7e:	e068      	b.n	800ee52 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	2bc0      	cmp	r3, #192	; 0xc0
 800ed88:	d001      	beq.n	800ed8e <load_xdir+0xaa>
 800ed8a:	2302      	movs	r3, #2
 800ed8c:	e061      	b.n	800ee52 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	f103 0020 	add.w	r0, r3, #32
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed98:	2220      	movs	r2, #32
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	f7fe fb25 	bl	800d3ea <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	3323      	adds	r3, #35	; 0x23
 800eda4:	781b      	ldrb	r3, [r3, #0]
 800eda6:	332c      	adds	r3, #44	; 0x2c
 800eda8:	4a2c      	ldr	r2, [pc, #176]	; (800ee5c <load_xdir+0x178>)
 800edaa:	fba2 2303 	umull	r2, r3, r2, r3
 800edae:	08db      	lsrs	r3, r3, #3
 800edb0:	015b      	lsls	r3, r3, #5
 800edb2:	68ba      	ldr	r2, [r7, #8]
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d201      	bcs.n	800edbc <load_xdir+0xd8>
 800edb8:	2302      	movs	r3, #2
 800edba:	e04a      	b.n	800ee52 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800edbc:	2340      	movs	r3, #64	; 0x40
 800edbe:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800edc0:	2100      	movs	r1, #0
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f7ff fbcb 	bl	800e55e <dir_next>
 800edc8:	4603      	mov	r3, r0
 800edca:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800edcc:	7bfb      	ldrb	r3, [r7, #15]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d001      	beq.n	800edd6 <load_xdir+0xf2>
 800edd2:	7bfb      	ldrb	r3, [r7, #15]
 800edd4:	e03d      	b.n	800ee52 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681a      	ldr	r2, [r3, #0]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edde:	4619      	mov	r1, r3
 800ede0:	4610      	mov	r0, r2
 800ede2:	f7fe fd31 	bl	800d848 <move_window>
 800ede6:	4603      	mov	r3, r0
 800ede8:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800edea:	7bfb      	ldrb	r3, [r7, #15]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d001      	beq.n	800edf4 <load_xdir+0x110>
 800edf0:	7bfb      	ldrb	r3, [r7, #15]
 800edf2:	e02e      	b.n	800ee52 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	2bc1      	cmp	r3, #193	; 0xc1
 800edfc:	d001      	beq.n	800ee02 <load_xdir+0x11e>
 800edfe:	2302      	movs	r3, #2
 800ee00:	e027      	b.n	800ee52 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800ee08:	d208      	bcs.n	800ee1c <load_xdir+0x138>
 800ee0a:	693a      	ldr	r2, [r7, #16]
 800ee0c:	697b      	ldr	r3, [r7, #20]
 800ee0e:	18d0      	adds	r0, r2, r3
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee14:	2220      	movs	r2, #32
 800ee16:	4619      	mov	r1, r3
 800ee18:	f7fe fae7 	bl	800d3ea <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	3320      	adds	r3, #32
 800ee20:	617b      	str	r3, [r7, #20]
 800ee22:	697a      	ldr	r2, [r7, #20]
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	429a      	cmp	r2, r3
 800ee28:	d3ca      	bcc.n	800edc0 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800ee30:	d80e      	bhi.n	800ee50 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800ee32:	6938      	ldr	r0, [r7, #16]
 800ee34:	f7ff feef 	bl	800ec16 <xdir_sum>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	461c      	mov	r4, r3
 800ee3c:	693b      	ldr	r3, [r7, #16]
 800ee3e:	3302      	adds	r3, #2
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7fe f8ed 	bl	800d020 <ld_word>
 800ee46:	4603      	mov	r3, r0
 800ee48:	429c      	cmp	r4, r3
 800ee4a:	d001      	beq.n	800ee50 <load_xdir+0x16c>
 800ee4c:	2302      	movs	r3, #2
 800ee4e:	e000      	b.n	800ee52 <load_xdir+0x16e>
	}
	return FR_OK;
 800ee50:	2300      	movs	r3, #0
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	371c      	adds	r7, #28
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd90      	pop	{r4, r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	88888889 	.word	0x88888889

0800ee60 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800ee60:	b5b0      	push	{r4, r5, r7, lr}
 800ee62:	b084      	sub	sp, #16
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800ee6a:	6839      	ldr	r1, [r7, #0]
 800ee6c:	6808      	ldr	r0, [r1, #0]
 800ee6e:	6879      	ldr	r1, [r7, #4]
 800ee70:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800ee72:	6839      	ldr	r1, [r7, #0]
 800ee74:	6a08      	ldr	r0, [r1, #32]
 800ee76:	6879      	ldr	r1, [r7, #4]
 800ee78:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800ee7a:	6839      	ldr	r1, [r7, #0]
 800ee7c:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800ee7e:	b2c8      	uxtb	r0, r1
 800ee80:	6879      	ldr	r1, [r7, #4]
 800ee82:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800ee84:	6839      	ldr	r1, [r7, #0]
 800ee86:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800ee88:	2000      	movs	r0, #0
 800ee8a:	460c      	mov	r4, r1
 800ee8c:	4605      	mov	r5, r0
 800ee8e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800ee92:	2300      	movs	r3, #0
 800ee94:	6879      	ldr	r1, [r7, #4]
 800ee96:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eea6:	4619      	mov	r1, r3
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f7ff fad2 	bl	800e452 <dir_sdi>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eeb2:	7bfb      	ldrb	r3, [r7, #15]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d104      	bne.n	800eec2 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f7ff ff13 	bl	800ece4 <load_xdir>
 800eebe:	4603      	mov	r3, r0
 800eec0:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800eec2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3710      	adds	r7, #16
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bdb0      	pop	{r4, r5, r7, pc}

0800eecc <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800eecc:	b590      	push	{r4, r7, lr}
 800eece:	b087      	sub	sp, #28
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	691b      	ldr	r3, [r3, #16]
 800eeda:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	1c9c      	adds	r4, r3, #2
 800eee0:	68f8      	ldr	r0, [r7, #12]
 800eee2:	f7ff fe98 	bl	800ec16 <xdir_sum>
 800eee6:	4603      	mov	r3, r0
 800eee8:	4619      	mov	r1, r3
 800eeea:	4620      	mov	r0, r4
 800eeec:	f7fe f9ae 	bl	800d24c <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	3301      	adds	r3, #1
 800eef4:	781b      	ldrb	r3, [r3, #0]
 800eef6:	3301      	adds	r3, #1
 800eef8:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eefe:	4619      	mov	r1, r3
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f7ff faa6 	bl	800e452 <dir_sdi>
 800ef06:	4603      	mov	r3, r0
 800ef08:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800ef0a:	e026      	b.n	800ef5a <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681a      	ldr	r2, [r3, #0]
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef14:	4619      	mov	r1, r3
 800ef16:	4610      	mov	r0, r2
 800ef18:	f7fe fc96 	bl	800d848 <move_window>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ef20:	7dfb      	ldrb	r3, [r7, #23]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d11d      	bne.n	800ef62 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef2a:	2220      	movs	r2, #32
 800ef2c:	68f9      	ldr	r1, [r7, #12]
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7fe fa5b 	bl	800d3ea <mem_cpy>
		dp->obj.fs->wflag = 1;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	2201      	movs	r2, #1
 800ef3a:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800ef3c:	693b      	ldr	r3, [r7, #16]
 800ef3e:	3b01      	subs	r3, #1
 800ef40:	613b      	str	r3, [r7, #16]
 800ef42:	693b      	ldr	r3, [r7, #16]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d00e      	beq.n	800ef66 <store_xdir+0x9a>
		dirb += SZDIRE;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	3320      	adds	r3, #32
 800ef4c:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800ef4e:	2100      	movs	r1, #0
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f7ff fb04 	bl	800e55e <dir_next>
 800ef56:	4603      	mov	r3, r0
 800ef58:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800ef5a:	7dfb      	ldrb	r3, [r7, #23]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d0d5      	beq.n	800ef0c <store_xdir+0x40>
 800ef60:	e002      	b.n	800ef68 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800ef62:	bf00      	nop
 800ef64:	e000      	b.n	800ef68 <store_xdir+0x9c>
		if (--nent == 0) break;
 800ef66:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800ef68:	7dfb      	ldrb	r3, [r7, #23]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d002      	beq.n	800ef74 <store_xdir+0xa8>
 800ef6e:	7dfb      	ldrb	r3, [r7, #23]
 800ef70:	2b01      	cmp	r3, #1
 800ef72:	d101      	bne.n	800ef78 <store_xdir+0xac>
 800ef74:	7dfb      	ldrb	r3, [r7, #23]
 800ef76:	e000      	b.n	800ef7a <store_xdir+0xae>
 800ef78:	2302      	movs	r3, #2
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	371c      	adds	r7, #28
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd90      	pop	{r4, r7, pc}

0800ef82 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800ef82:	b590      	push	{r4, r7, lr}
 800ef84:	b085      	sub	sp, #20
 800ef86:	af00      	add	r7, sp, #0
 800ef88:	6078      	str	r0, [r7, #4]
 800ef8a:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800ef8c:	2240      	movs	r2, #64	; 0x40
 800ef8e:	2100      	movs	r1, #0
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f7fe fa4b 	bl	800d42c <mem_set>
	dirb[XDIR_Type] = 0x85;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2285      	movs	r2, #133	; 0x85
 800ef9a:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	3320      	adds	r3, #32
 800efa0:	22c0      	movs	r2, #192	; 0xc0
 800efa2:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800efa4:	2300      	movs	r3, #0
 800efa6:	72bb      	strb	r3, [r7, #10]
 800efa8:	2301      	movs	r3, #1
 800efaa:	72fb      	strb	r3, [r7, #11]
 800efac:	2301      	movs	r3, #1
 800efae:	813b      	strh	r3, [r7, #8]
 800efb0:	2340      	movs	r3, #64	; 0x40
 800efb2:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	1c5a      	adds	r2, r3, #1
 800efb8:	60fa      	str	r2, [r7, #12]
 800efba:	687a      	ldr	r2, [r7, #4]
 800efbc:	4413      	add	r3, r2
 800efbe:	22c1      	movs	r2, #193	; 0xc1
 800efc0:	701a      	strb	r2, [r3, #0]
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	1c5a      	adds	r2, r3, #1
 800efc6:	60fa      	str	r2, [r7, #12]
 800efc8:	687a      	ldr	r2, [r7, #4]
 800efca:	4413      	add	r3, r2
 800efcc:	2200      	movs	r2, #0
 800efce:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800efd0:	893b      	ldrh	r3, [r7, #8]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d00b      	beq.n	800efee <create_xdir+0x6c>
 800efd6:	7abb      	ldrb	r3, [r7, #10]
 800efd8:	005b      	lsls	r3, r3, #1
 800efda:	683a      	ldr	r2, [r7, #0]
 800efdc:	4413      	add	r3, r2
 800efde:	881b      	ldrh	r3, [r3, #0]
 800efe0:	813b      	strh	r3, [r7, #8]
 800efe2:	893b      	ldrh	r3, [r7, #8]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d002      	beq.n	800efee <create_xdir+0x6c>
 800efe8:	7abb      	ldrb	r3, [r7, #10]
 800efea:	3301      	adds	r3, #1
 800efec:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	4413      	add	r3, r2
 800eff4:	893a      	ldrh	r2, [r7, #8]
 800eff6:	4611      	mov	r1, r2
 800eff8:	4618      	mov	r0, r3
 800effa:	f7fe f927 	bl	800d24c <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	3302      	adds	r3, #2
 800f002:	60fb      	str	r3, [r7, #12]
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	f003 031f 	and.w	r3, r3, #31
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d1e0      	bne.n	800efd0 <create_xdir+0x4e>
		nb++;
 800f00e:	7afb      	ldrb	r3, [r7, #11]
 800f010:	3301      	adds	r3, #1
 800f012:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800f014:	7abb      	ldrb	r3, [r7, #10]
 800f016:	005b      	lsls	r3, r3, #1
 800f018:	683a      	ldr	r2, [r7, #0]
 800f01a:	4413      	add	r3, r2
 800f01c:	881b      	ldrh	r3, [r3, #0]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d1c8      	bne.n	800efb4 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	3323      	adds	r3, #35	; 0x23
 800f026:	7aba      	ldrb	r2, [r7, #10]
 800f028:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	3301      	adds	r3, #1
 800f02e:	7afa      	ldrb	r2, [r7, #11]
 800f030:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800f038:	6838      	ldr	r0, [r7, #0]
 800f03a:	f7ff fe1f 	bl	800ec7c <xname_sum>
 800f03e:	4603      	mov	r3, r0
 800f040:	4619      	mov	r1, r3
 800f042:	4620      	mov	r0, r4
 800f044:	f7fe f902 	bl	800d24c <st_word>
}
 800f048:	bf00      	nop
 800f04a:	3714      	adds	r7, #20
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd90      	pop	{r4, r7, pc}

0800f050 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b086      	sub	sp, #24
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f05a:	2304      	movs	r3, #4
 800f05c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800f064:	23ff      	movs	r3, #255	; 0xff
 800f066:	757b      	strb	r3, [r7, #21]
 800f068:	23ff      	movs	r3, #255	; 0xff
 800f06a:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800f06c:	e09f      	b.n	800f1ae <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f072:	4619      	mov	r1, r3
 800f074:	6938      	ldr	r0, [r7, #16]
 800f076:	f7fe fbe7 	bl	800d848 <move_window>
 800f07a:	4603      	mov	r3, r0
 800f07c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f07e:	7dfb      	ldrb	r3, [r7, #23]
 800f080:	2b00      	cmp	r3, #0
 800f082:	f040 809a 	bne.w	800f1ba <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800f08e:	7dbb      	ldrb	r3, [r7, #22]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d102      	bne.n	800f09a <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f094:	2304      	movs	r3, #4
 800f096:	75fb      	strb	r3, [r7, #23]
 800f098:	e096      	b.n	800f1c8 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	781b      	ldrb	r3, [r3, #0]
 800f09e:	2b04      	cmp	r3, #4
 800f0a0:	d118      	bne.n	800f0d4 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800f0a2:	7dbb      	ldrb	r3, [r7, #22]
 800f0a4:	2b85      	cmp	r3, #133	; 0x85
 800f0a6:	d179      	bne.n	800f19c <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f7ff fe17 	bl	800ece4 <load_xdir>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800f0ba:	7dfb      	ldrb	r3, [r7, #23]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d17e      	bne.n	800f1be <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	691b      	ldr	r3, [r3, #16]
 800f0c4:	3304      	adds	r3, #4
 800f0c6:	781b      	ldrb	r3, [r3, #0]
 800f0c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0cc:	b2da      	uxtb	r2, r3
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	719a      	strb	r2, [r3, #6]
					}
					break;
 800f0d2:	e074      	b.n	800f1be <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0d8:	330b      	adds	r3, #11
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0e0:	73fb      	strb	r3, [r7, #15]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	7bfa      	ldrb	r2, [r7, #15]
 800f0e6:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800f0e8:	7dbb      	ldrb	r3, [r7, #22]
 800f0ea:	2be5      	cmp	r3, #229	; 0xe5
 800f0ec:	d00e      	beq.n	800f10c <dir_read+0xbc>
 800f0ee:	7dbb      	ldrb	r3, [r7, #22]
 800f0f0:	2b2e      	cmp	r3, #46	; 0x2e
 800f0f2:	d00b      	beq.n	800f10c <dir_read+0xbc>
 800f0f4:	7bfb      	ldrb	r3, [r7, #15]
 800f0f6:	f023 0320 	bic.w	r3, r3, #32
 800f0fa:	2b08      	cmp	r3, #8
 800f0fc:	bf0c      	ite	eq
 800f0fe:	2301      	moveq	r3, #1
 800f100:	2300      	movne	r3, #0
 800f102:	b2db      	uxtb	r3, r3
 800f104:	461a      	mov	r2, r3
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	4293      	cmp	r3, r2
 800f10a:	d002      	beq.n	800f112 <dir_read+0xc2>
				ord = 0xFF;
 800f10c:	23ff      	movs	r3, #255	; 0xff
 800f10e:	757b      	strb	r3, [r7, #21]
 800f110:	e044      	b.n	800f19c <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800f112:	7bfb      	ldrb	r3, [r7, #15]
 800f114:	2b0f      	cmp	r3, #15
 800f116:	d12f      	bne.n	800f178 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800f118:	7dbb      	ldrb	r3, [r7, #22]
 800f11a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d00d      	beq.n	800f13e <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f126:	7b5b      	ldrb	r3, [r3, #13]
 800f128:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800f12a:	7dbb      	ldrb	r3, [r7, #22]
 800f12c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f130:	75bb      	strb	r3, [r7, #22]
 800f132:	7dbb      	ldrb	r3, [r7, #22]
 800f134:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f13e:	7dba      	ldrb	r2, [r7, #22]
 800f140:	7d7b      	ldrb	r3, [r7, #21]
 800f142:	429a      	cmp	r2, r3
 800f144:	d115      	bne.n	800f172 <dir_read+0x122>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f14a:	330d      	adds	r3, #13
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	7d3a      	ldrb	r2, [r7, #20]
 800f150:	429a      	cmp	r2, r3
 800f152:	d10e      	bne.n	800f172 <dir_read+0x122>
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	68da      	ldr	r2, [r3, #12]
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f15c:	4619      	mov	r1, r3
 800f15e:	4610      	mov	r0, r2
 800f160:	f7ff fbde 	bl	800e920 <pick_lfn>
 800f164:	4603      	mov	r3, r0
 800f166:	2b00      	cmp	r3, #0
 800f168:	d003      	beq.n	800f172 <dir_read+0x122>
 800f16a:	7d7b      	ldrb	r3, [r7, #21]
 800f16c:	3b01      	subs	r3, #1
 800f16e:	b2db      	uxtb	r3, r3
 800f170:	e000      	b.n	800f174 <dir_read+0x124>
 800f172:	23ff      	movs	r3, #255	; 0xff
 800f174:	757b      	strb	r3, [r7, #21]
 800f176:	e011      	b.n	800f19c <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800f178:	7d7b      	ldrb	r3, [r7, #21]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d109      	bne.n	800f192 <dir_read+0x142>
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f182:	4618      	mov	r0, r3
 800f184:	f7ff fd26 	bl	800ebd4 <sum_sfn>
 800f188:	4603      	mov	r3, r0
 800f18a:	461a      	mov	r2, r3
 800f18c:	7d3b      	ldrb	r3, [r7, #20]
 800f18e:	4293      	cmp	r3, r2
 800f190:	d017      	beq.n	800f1c2 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f04f 32ff 	mov.w	r2, #4294967295
 800f198:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800f19a:	e012      	b.n	800f1c2 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f19c:	2100      	movs	r1, #0
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f7ff f9dd 	bl	800e55e <dir_next>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f1a8:	7dfb      	ldrb	r3, [r7, #23]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d10b      	bne.n	800f1c6 <dir_read+0x176>
	while (dp->sect) {
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	f47f af5b 	bne.w	800f06e <dir_read+0x1e>
 800f1b8:	e006      	b.n	800f1c8 <dir_read+0x178>
		if (res != FR_OK) break;
 800f1ba:	bf00      	nop
 800f1bc:	e004      	b.n	800f1c8 <dir_read+0x178>
					break;
 800f1be:	bf00      	nop
 800f1c0:	e002      	b.n	800f1c8 <dir_read+0x178>
					break;
 800f1c2:	bf00      	nop
 800f1c4:	e000      	b.n	800f1c8 <dir_read+0x178>
		if (res != FR_OK) break;
 800f1c6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f1c8:	7dfb      	ldrb	r3, [r7, #23]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d002      	beq.n	800f1d4 <dir_read+0x184>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800f1d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3718      	adds	r7, #24
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}

0800f1de <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f1de:	b590      	push	{r4, r7, lr}
 800f1e0:	b089      	sub	sp, #36	; 0x24
 800f1e2:	af00      	add	r7, sp, #0
 800f1e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f1ec:	2100      	movs	r1, #0
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f7ff f92f 	bl	800e452 <dir_sdi>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800f1f8:	7ffb      	ldrb	r3, [r7, #31]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d001      	beq.n	800f202 <dir_find+0x24>
 800f1fe:	7ffb      	ldrb	r3, [r7, #31]
 800f200:	e112      	b.n	800f428 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	781b      	ldrb	r3, [r3, #0]
 800f206:	2b04      	cmp	r3, #4
 800f208:	d164      	bne.n	800f2d4 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	68db      	ldr	r3, [r3, #12]
 800f20e:	4618      	mov	r0, r3
 800f210:	f7ff fd34 	bl	800ec7c <xname_sum>
 800f214:	4603      	mov	r3, r0
 800f216:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800f218:	e04f      	b.n	800f2ba <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	691b      	ldr	r3, [r3, #16]
 800f21e:	3324      	adds	r3, #36	; 0x24
 800f220:	4618      	mov	r0, r3
 800f222:	f7fd fefd 	bl	800d020 <ld_word>
 800f226:	4603      	mov	r3, r0
 800f228:	461a      	mov	r2, r3
 800f22a:	893b      	ldrh	r3, [r7, #8]
 800f22c:	4293      	cmp	r3, r2
 800f22e:	d000      	beq.n	800f232 <dir_find+0x54>
 800f230:	e043      	b.n	800f2ba <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	691b      	ldr	r3, [r3, #16]
 800f236:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800f23a:	76fb      	strb	r3, [r7, #27]
 800f23c:	2340      	movs	r3, #64	; 0x40
 800f23e:	617b      	str	r3, [r7, #20]
 800f240:	2300      	movs	r3, #0
 800f242:	613b      	str	r3, [r7, #16]
 800f244:	e029      	b.n	800f29a <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	f003 031f 	and.w	r3, r3, #31
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d102      	bne.n	800f256 <dir_find+0x78>
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	3302      	adds	r3, #2
 800f254:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	691a      	ldr	r2, [r3, #16]
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	4413      	add	r3, r2
 800f25e:	4618      	mov	r0, r3
 800f260:	f7fd fede 	bl	800d020 <ld_word>
 800f264:	4603      	mov	r3, r0
 800f266:	4618      	mov	r0, r3
 800f268:	f002 fc8e 	bl	8011b88 <ff_wtoupper>
 800f26c:	4603      	mov	r3, r0
 800f26e:	461c      	mov	r4, r3
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	68da      	ldr	r2, [r3, #12]
 800f274:	693b      	ldr	r3, [r7, #16]
 800f276:	005b      	lsls	r3, r3, #1
 800f278:	4413      	add	r3, r2
 800f27a:	881b      	ldrh	r3, [r3, #0]
 800f27c:	4618      	mov	r0, r3
 800f27e:	f002 fc83 	bl	8011b88 <ff_wtoupper>
 800f282:	4603      	mov	r3, r0
 800f284:	429c      	cmp	r4, r3
 800f286:	d10c      	bne.n	800f2a2 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800f288:	7efb      	ldrb	r3, [r7, #27]
 800f28a:	3b01      	subs	r3, #1
 800f28c:	76fb      	strb	r3, [r7, #27]
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	3302      	adds	r3, #2
 800f292:	617b      	str	r3, [r7, #20]
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	3301      	adds	r3, #1
 800f298:	613b      	str	r3, [r7, #16]
 800f29a:	7efb      	ldrb	r3, [r7, #27]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d1d2      	bne.n	800f246 <dir_find+0x68>
 800f2a0:	e000      	b.n	800f2a4 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800f2a2:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800f2a4:	7efb      	ldrb	r3, [r7, #27]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d107      	bne.n	800f2ba <dir_find+0xdc>
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	68da      	ldr	r2, [r3, #12]
 800f2ae:	693b      	ldr	r3, [r7, #16]
 800f2b0:	005b      	lsls	r3, r3, #1
 800f2b2:	4413      	add	r3, r2
 800f2b4:	881b      	ldrh	r3, [r3, #0]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d009      	beq.n	800f2ce <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800f2ba:	2100      	movs	r1, #0
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f7ff fec7 	bl	800f050 <dir_read>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	77fb      	strb	r3, [r7, #31]
 800f2c6:	7ffb      	ldrb	r3, [r7, #31]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d0a6      	beq.n	800f21a <dir_find+0x3c>
 800f2cc:	e000      	b.n	800f2d0 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800f2ce:	bf00      	nop
		}
		return res;
 800f2d0:	7ffb      	ldrb	r3, [r7, #31]
 800f2d2:	e0a9      	b.n	800f428 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f2d4:	23ff      	movs	r3, #255	; 0xff
 800f2d6:	773b      	strb	r3, [r7, #28]
 800f2d8:	7f3b      	ldrb	r3, [r7, #28]
 800f2da:	777b      	strb	r3, [r7, #29]
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f04f 32ff 	mov.w	r2, #4294967295
 800f2e2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	68f8      	ldr	r0, [r7, #12]
 800f2ec:	f7fe faac 	bl	800d848 <move_window>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800f2f4:	7ffb      	ldrb	r3, [r7, #31]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	f040 8090 	bne.w	800f41c <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f304:	7fbb      	ldrb	r3, [r7, #30]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d102      	bne.n	800f310 <dir_find+0x132>
 800f30a:	2304      	movs	r3, #4
 800f30c:	77fb      	strb	r3, [r7, #31]
 800f30e:	e08a      	b.n	800f426 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f314:	330b      	adds	r3, #11
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f31c:	72fb      	strb	r3, [r7, #11]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	7afa      	ldrb	r2, [r7, #11]
 800f322:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f324:	7fbb      	ldrb	r3, [r7, #30]
 800f326:	2be5      	cmp	r3, #229	; 0xe5
 800f328:	d007      	beq.n	800f33a <dir_find+0x15c>
 800f32a:	7afb      	ldrb	r3, [r7, #11]
 800f32c:	f003 0308 	and.w	r3, r3, #8
 800f330:	2b00      	cmp	r3, #0
 800f332:	d009      	beq.n	800f348 <dir_find+0x16a>
 800f334:	7afb      	ldrb	r3, [r7, #11]
 800f336:	2b0f      	cmp	r3, #15
 800f338:	d006      	beq.n	800f348 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f33a:	23ff      	movs	r3, #255	; 0xff
 800f33c:	777b      	strb	r3, [r7, #29]
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f04f 32ff 	mov.w	r2, #4294967295
 800f344:	64da      	str	r2, [r3, #76]	; 0x4c
 800f346:	e05e      	b.n	800f406 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f348:	7afb      	ldrb	r3, [r7, #11]
 800f34a:	2b0f      	cmp	r3, #15
 800f34c:	d136      	bne.n	800f3bc <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d154      	bne.n	800f406 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f35c:	7fbb      	ldrb	r3, [r7, #30]
 800f35e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f362:	2b00      	cmp	r3, #0
 800f364:	d00d      	beq.n	800f382 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f36a:	7b5b      	ldrb	r3, [r3, #13]
 800f36c:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f36e:	7fbb      	ldrb	r3, [r7, #30]
 800f370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f374:	77bb      	strb	r3, [r7, #30]
 800f376:	7fbb      	ldrb	r3, [r7, #30]
 800f378:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f382:	7fba      	ldrb	r2, [r7, #30]
 800f384:	7f7b      	ldrb	r3, [r7, #29]
 800f386:	429a      	cmp	r2, r3
 800f388:	d115      	bne.n	800f3b6 <dir_find+0x1d8>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f38e:	330d      	adds	r3, #13
 800f390:	781b      	ldrb	r3, [r3, #0]
 800f392:	7f3a      	ldrb	r2, [r7, #28]
 800f394:	429a      	cmp	r2, r3
 800f396:	d10e      	bne.n	800f3b6 <dir_find+0x1d8>
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	68da      	ldr	r2, [r3, #12]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	4610      	mov	r0, r2
 800f3a4:	f7ff fa4c 	bl	800e840 <cmp_lfn>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d003      	beq.n	800f3b6 <dir_find+0x1d8>
 800f3ae:	7f7b      	ldrb	r3, [r7, #29]
 800f3b0:	3b01      	subs	r3, #1
 800f3b2:	b2db      	uxtb	r3, r3
 800f3b4:	e000      	b.n	800f3b8 <dir_find+0x1da>
 800f3b6:	23ff      	movs	r3, #255	; 0xff
 800f3b8:	777b      	strb	r3, [r7, #29]
 800f3ba:	e024      	b.n	800f406 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f3bc:	7f7b      	ldrb	r3, [r7, #29]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d109      	bne.n	800f3d6 <dir_find+0x1f8>
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f7ff fc04 	bl	800ebd4 <sum_sfn>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	461a      	mov	r2, r3
 800f3d0:	7f3b      	ldrb	r3, [r7, #28]
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	d024      	beq.n	800f420 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f3dc:	f003 0301 	and.w	r3, r3, #1
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d10a      	bne.n	800f3fa <dir_find+0x21c>
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	3340      	adds	r3, #64	; 0x40
 800f3ec:	220b      	movs	r2, #11
 800f3ee:	4619      	mov	r1, r3
 800f3f0:	f7fe f837 	bl	800d462 <mem_cmp>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d014      	beq.n	800f424 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f3fa:	23ff      	movs	r3, #255	; 0xff
 800f3fc:	777b      	strb	r3, [r7, #29]
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f04f 32ff 	mov.w	r2, #4294967295
 800f404:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f406:	2100      	movs	r1, #0
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f7ff f8a8 	bl	800e55e <dir_next>
 800f40e:	4603      	mov	r3, r0
 800f410:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800f412:	7ffb      	ldrb	r3, [r7, #31]
 800f414:	2b00      	cmp	r3, #0
 800f416:	f43f af65 	beq.w	800f2e4 <dir_find+0x106>
 800f41a:	e004      	b.n	800f426 <dir_find+0x248>
		if (res != FR_OK) break;
 800f41c:	bf00      	nop
 800f41e:	e002      	b.n	800f426 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f420:	bf00      	nop
 800f422:	e000      	b.n	800f426 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f424:	bf00      	nop

	return res;
 800f426:	7ffb      	ldrb	r3, [r7, #31]
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3724      	adds	r7, #36	; 0x24
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd90      	pop	{r4, r7, pc}

0800f430 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f430:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f434:	b0a0      	sub	sp, #128	; 0x80
 800f436:	af00      	add	r7, sp, #0
 800f438:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f446:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d001      	beq.n	800f452 <dir_register+0x22>
 800f44e:	2306      	movs	r3, #6
 800f450:	e18e      	b.n	800f770 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f452:	2300      	movs	r3, #0
 800f454:	677b      	str	r3, [r7, #116]	; 0x74
 800f456:	e002      	b.n	800f45e <dir_register+0x2e>
 800f458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f45a:	3301      	adds	r3, #1
 800f45c:	677b      	str	r3, [r7, #116]	; 0x74
 800f45e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f460:	68da      	ldr	r2, [r3, #12]
 800f462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f464:	005b      	lsls	r3, r3, #1
 800f466:	4413      	add	r3, r2
 800f468:	881b      	ldrh	r3, [r3, #0]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d1f4      	bne.n	800f458 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f46e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	2b04      	cmp	r3, #4
 800f474:	f040 809f 	bne.w	800f5b6 <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800f478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f47a:	330e      	adds	r3, #14
 800f47c:	4aa2      	ldr	r2, [pc, #648]	; (800f708 <dir_register+0x2d8>)
 800f47e:	fba2 2303 	umull	r2, r3, r2, r3
 800f482:	08db      	lsrs	r3, r3, #3
 800f484:	3302      	adds	r3, #2
 800f486:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800f488:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f48a:	6878      	ldr	r0, [r7, #4]
 800f48c:	f7ff f93c 	bl	800e708 <dir_alloc>
 800f490:	4603      	mov	r3, r0
 800f492:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800f496:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d002      	beq.n	800f4a4 <dir_register+0x74>
 800f49e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f4a2:	e165      	b.n	800f770 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f4a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f4aa:	3b01      	subs	r3, #1
 800f4ac:	015b      	lsls	r3, r3, #5
 800f4ae:	1ad2      	subs	r2, r2, r3
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	689b      	ldr	r3, [r3, #8]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d072      	beq.n	800f5a2 <dir_register+0x172>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	79db      	ldrb	r3, [r3, #7]
 800f4c0:	f003 0304 	and.w	r3, r3, #4
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d06c      	beq.n	800f5a2 <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f4ce:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f4d0:	8949      	ldrh	r1, [r1, #10]
 800f4d2:	0249      	lsls	r1, r1, #9
 800f4d4:	2000      	movs	r0, #0
 800f4d6:	460c      	mov	r4, r1
 800f4d8:	4605      	mov	r5, r0
 800f4da:	eb12 0804 	adds.w	r8, r2, r4
 800f4de:	eb43 0905 	adc.w	r9, r3, r5
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7fe fd58 	bl	800dfa0 <fill_first_frag>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f4f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d002      	beq.n	800f504 <dir_register+0xd4>
 800f4fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f502:	e135      	b.n	800f770 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f50a:	f04f 32ff 	mov.w	r2, #4294967295
 800f50e:	4619      	mov	r1, r3
 800f510:	f7fe fd75 	bl	800dffe <fill_last_frag>
 800f514:	4603      	mov	r3, r0
 800f516:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f51a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d002      	beq.n	800f528 <dir_register+0xf8>
 800f522:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f526:	e123      	b.n	800f770 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800f528:	687a      	ldr	r2, [r7, #4]
 800f52a:	f107 0308 	add.w	r3, r7, #8
 800f52e:	4611      	mov	r1, r2
 800f530:	4618      	mov	r0, r3
 800f532:	f7ff fc95 	bl	800ee60 <load_obj_dir>
 800f536:	4603      	mov	r3, r0
 800f538:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f53c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f540:	2b00      	cmp	r3, #0
 800f542:	d002      	beq.n	800f54a <dir_register+0x11a>
 800f544:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f548:	e112      	b.n	800f770 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800f54a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f54c:	691b      	ldr	r3, [r3, #16]
 800f54e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f558:	4608      	mov	r0, r1
 800f55a:	f7fd febe 	bl	800d2da <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800f55e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f560:	691b      	ldr	r3, [r3, #16]
 800f562:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f56c:	4608      	mov	r0, r1
 800f56e:	f7fd feb4 	bl	800d2da <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	79da      	ldrb	r2, [r3, #7]
 800f576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f578:	691b      	ldr	r3, [r3, #16]
 800f57a:	3321      	adds	r3, #33	; 0x21
 800f57c:	f042 0201 	orr.w	r2, r2, #1
 800f580:	b2d2      	uxtb	r2, r2
 800f582:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800f584:	f107 0308 	add.w	r3, r7, #8
 800f588:	4618      	mov	r0, r3
 800f58a:	f7ff fc9f 	bl	800eecc <store_xdir>
 800f58e:	4603      	mov	r3, r0
 800f590:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f594:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d002      	beq.n	800f5a2 <dir_register+0x172>
 800f59c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f5a0:	e0e6      	b.n	800f770 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800f5a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5a4:	691a      	ldr	r2, [r3, #16]
 800f5a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	4619      	mov	r1, r3
 800f5ac:	4610      	mov	r0, r2
 800f5ae:	f7ff fce8 	bl	800ef82 <create_xdir>
		return FR_OK;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	e0dc      	b.n	800f770 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800f5bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f5c0:	220c      	movs	r2, #12
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7fd ff11 	bl	800d3ea <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f5c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f5cc:	f003 0301 	and.w	r3, r3, #1
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d033      	beq.n	800f63c <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2240      	movs	r2, #64	; 0x40
 800f5d8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800f5dc:	2301      	movs	r3, #1
 800f5de:	67bb      	str	r3, [r7, #120]	; 0x78
 800f5e0:	e016      	b.n	800f610 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800f5e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5ea:	68da      	ldr	r2, [r3, #12]
 800f5ec:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800f5f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f5f2:	f7ff fa61 	bl	800eab8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f7ff fdf1 	bl	800f1de <dir_find>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800f602:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f606:	2b00      	cmp	r3, #0
 800f608:	d106      	bne.n	800f618 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800f60a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f60c:	3301      	adds	r3, #1
 800f60e:	67bb      	str	r3, [r7, #120]	; 0x78
 800f610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f612:	2b63      	cmp	r3, #99	; 0x63
 800f614:	d9e5      	bls.n	800f5e2 <dir_register+0x1b2>
 800f616:	e000      	b.n	800f61a <dir_register+0x1ea>
			if (res != FR_OK) break;
 800f618:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f61a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f61c:	2b64      	cmp	r3, #100	; 0x64
 800f61e:	d101      	bne.n	800f624 <dir_register+0x1f4>
 800f620:	2307      	movs	r3, #7
 800f622:	e0a5      	b.n	800f770 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f624:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f628:	2b04      	cmp	r3, #4
 800f62a:	d002      	beq.n	800f632 <dir_register+0x202>
 800f62c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f630:	e09e      	b.n	800f770 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f632:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f63c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f640:	f003 0302 	and.w	r3, r3, #2
 800f644:	2b00      	cmp	r3, #0
 800f646:	d007      	beq.n	800f658 <dir_register+0x228>
 800f648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f64a:	330c      	adds	r3, #12
 800f64c:	4a2f      	ldr	r2, [pc, #188]	; (800f70c <dir_register+0x2dc>)
 800f64e:	fba2 2303 	umull	r2, r3, r2, r3
 800f652:	089b      	lsrs	r3, r3, #2
 800f654:	3301      	adds	r3, #1
 800f656:	e000      	b.n	800f65a <dir_register+0x22a>
 800f658:	2301      	movs	r3, #1
 800f65a:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f65c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f7ff f852 	bl	800e708 <dir_alloc>
 800f664:	4603      	mov	r3, r0
 800f666:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f66a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d14f      	bne.n	800f712 <dir_register+0x2e2>
 800f672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f674:	3b01      	subs	r3, #1
 800f676:	673b      	str	r3, [r7, #112]	; 0x70
 800f678:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d049      	beq.n	800f712 <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f684:	015b      	lsls	r3, r3, #5
 800f686:	1ad3      	subs	r3, r2, r3
 800f688:	4619      	mov	r1, r3
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f7fe fee1 	bl	800e452 <dir_sdi>
 800f690:	4603      	mov	r3, r0
 800f692:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800f696:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d139      	bne.n	800f712 <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	3340      	adds	r3, #64	; 0x40
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7ff fa96 	bl	800ebd4 <sum_sfn>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6b2:	4619      	mov	r1, r3
 800f6b4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f6b6:	f7fe f8c7 	bl	800d848 <move_window>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800f6c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d123      	bne.n	800f710 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f6c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6ca:	68d8      	ldr	r0, [r3, #12]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800f6d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f6d2:	b2da      	uxtb	r2, r3
 800f6d4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f6d8:	f7ff f986 	bl	800e9e8 <put_lfn>
				fs->wflag = 1;
 800f6dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6de:	2201      	movs	r2, #1
 800f6e0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f6e2:	2100      	movs	r1, #0
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f7fe ff3a 	bl	800e55e <dir_next>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800f6f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d10c      	bne.n	800f712 <dir_register+0x2e2>
 800f6f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f6fa:	3b01      	subs	r3, #1
 800f6fc:	673b      	str	r3, [r7, #112]	; 0x70
 800f6fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f700:	2b00      	cmp	r3, #0
 800f702:	d1d4      	bne.n	800f6ae <dir_register+0x27e>
 800f704:	e005      	b.n	800f712 <dir_register+0x2e2>
 800f706:	bf00      	nop
 800f708:	88888889 	.word	0x88888889
 800f70c:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800f710:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f712:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f716:	2b00      	cmp	r3, #0
 800f718:	d128      	bne.n	800f76c <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f71e:	4619      	mov	r1, r3
 800f720:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f722:	f7fe f891 	bl	800d848 <move_window>
 800f726:	4603      	mov	r3, r0
 800f728:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800f72c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f730:	2b00      	cmp	r3, #0
 800f732:	d11b      	bne.n	800f76c <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f738:	2220      	movs	r2, #32
 800f73a:	2100      	movs	r1, #0
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7fd fe75 	bl	800d42c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	3340      	adds	r3, #64	; 0x40
 800f74a:	220b      	movs	r2, #11
 800f74c:	4619      	mov	r1, r3
 800f74e:	f7fd fe4c 	bl	800d3ea <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f75c:	330c      	adds	r3, #12
 800f75e:	f002 0218 	and.w	r2, r2, #24
 800f762:	b2d2      	uxtb	r2, r2
 800f764:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f768:	2201      	movs	r2, #1
 800f76a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f76c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800f770:	4618      	mov	r0, r3
 800f772:	3780      	adds	r7, #128	; 0x80
 800f774:	46bd      	mov	sp, r7
 800f776:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800f77a:	bf00      	nop

0800f77c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b08a      	sub	sp, #40	; 0x28
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	613b      	str	r3, [r7, #16]
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	68db      	ldr	r3, [r3, #12]
 800f792:	60fb      	str	r3, [r7, #12]
 800f794:	2300      	movs	r3, #0
 800f796:	617b      	str	r3, [r7, #20]
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f79c:	69bb      	ldr	r3, [r7, #24]
 800f79e:	1c5a      	adds	r2, r3, #1
 800f7a0:	61ba      	str	r2, [r7, #24]
 800f7a2:	693a      	ldr	r2, [r7, #16]
 800f7a4:	4413      	add	r3, r2
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f7aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7ac:	2b1f      	cmp	r3, #31
 800f7ae:	d940      	bls.n	800f832 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f7b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7b2:	2b2f      	cmp	r3, #47	; 0x2f
 800f7b4:	d006      	beq.n	800f7c4 <create_name+0x48>
 800f7b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7b8:	2b5c      	cmp	r3, #92	; 0x5c
 800f7ba:	d110      	bne.n	800f7de <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f7bc:	e002      	b.n	800f7c4 <create_name+0x48>
 800f7be:	69bb      	ldr	r3, [r7, #24]
 800f7c0:	3301      	adds	r3, #1
 800f7c2:	61bb      	str	r3, [r7, #24]
 800f7c4:	693a      	ldr	r2, [r7, #16]
 800f7c6:	69bb      	ldr	r3, [r7, #24]
 800f7c8:	4413      	add	r3, r2
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	2b2f      	cmp	r3, #47	; 0x2f
 800f7ce:	d0f6      	beq.n	800f7be <create_name+0x42>
 800f7d0:	693a      	ldr	r2, [r7, #16]
 800f7d2:	69bb      	ldr	r3, [r7, #24]
 800f7d4:	4413      	add	r3, r2
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	2b5c      	cmp	r3, #92	; 0x5c
 800f7da:	d0f0      	beq.n	800f7be <create_name+0x42>
			break;
 800f7dc:	e02a      	b.n	800f834 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	2bfe      	cmp	r3, #254	; 0xfe
 800f7e2:	d901      	bls.n	800f7e8 <create_name+0x6c>
 800f7e4:	2306      	movs	r3, #6
 800f7e6:	e17d      	b.n	800fae4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f7e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7ea:	b2db      	uxtb	r3, r3
 800f7ec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f7ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7f0:	2101      	movs	r1, #1
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f002 f98c 	bl	8011b10 <ff_convert>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f7fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d101      	bne.n	800f806 <create_name+0x8a>
 800f802:	2306      	movs	r3, #6
 800f804:	e16e      	b.n	800fae4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f806:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f808:	2b7f      	cmp	r3, #127	; 0x7f
 800f80a:	d809      	bhi.n	800f820 <create_name+0xa4>
 800f80c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f80e:	4619      	mov	r1, r3
 800f810:	488d      	ldr	r0, [pc, #564]	; (800fa48 <create_name+0x2cc>)
 800f812:	f7fd fe4d 	bl	800d4b0 <chk_chr>
 800f816:	4603      	mov	r3, r0
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d001      	beq.n	800f820 <create_name+0xa4>
 800f81c:	2306      	movs	r3, #6
 800f81e:	e161      	b.n	800fae4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	1c5a      	adds	r2, r3, #1
 800f824:	617a      	str	r2, [r7, #20]
 800f826:	005b      	lsls	r3, r3, #1
 800f828:	68fa      	ldr	r2, [r7, #12]
 800f82a:	4413      	add	r3, r2
 800f82c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f82e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f830:	e7b4      	b.n	800f79c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f832:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f834:	693a      	ldr	r2, [r7, #16]
 800f836:	69bb      	ldr	r3, [r7, #24]
 800f838:	441a      	add	r2, r3
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f83e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f840:	2b1f      	cmp	r3, #31
 800f842:	d801      	bhi.n	800f848 <create_name+0xcc>
 800f844:	2304      	movs	r3, #4
 800f846:	e000      	b.n	800f84a <create_name+0xce>
 800f848:	2300      	movs	r3, #0
 800f84a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f84e:	e011      	b.n	800f874 <create_name+0xf8>
		w = lfn[di - 1];
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f856:	3b01      	subs	r3, #1
 800f858:	005b      	lsls	r3, r3, #1
 800f85a:	68fa      	ldr	r2, [r7, #12]
 800f85c:	4413      	add	r3, r2
 800f85e:	881b      	ldrh	r3, [r3, #0]
 800f860:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f862:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f864:	2b20      	cmp	r3, #32
 800f866:	d002      	beq.n	800f86e <create_name+0xf2>
 800f868:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f86a:	2b2e      	cmp	r3, #46	; 0x2e
 800f86c:	d106      	bne.n	800f87c <create_name+0x100>
		di--;
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	3b01      	subs	r3, #1
 800f872:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d1ea      	bne.n	800f850 <create_name+0xd4>
 800f87a:	e000      	b.n	800f87e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800f87c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	005b      	lsls	r3, r3, #1
 800f882:	68fa      	ldr	r2, [r7, #12]
 800f884:	4413      	add	r3, r2
 800f886:	2200      	movs	r2, #0
 800f888:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f88a:	697b      	ldr	r3, [r7, #20]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d101      	bne.n	800f894 <create_name+0x118>
 800f890:	2306      	movs	r3, #6
 800f892:	e127      	b.n	800fae4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	3340      	adds	r3, #64	; 0x40
 800f898:	220b      	movs	r2, #11
 800f89a:	2120      	movs	r1, #32
 800f89c:	4618      	mov	r0, r3
 800f89e:	f7fd fdc5 	bl	800d42c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	61bb      	str	r3, [r7, #24]
 800f8a6:	e002      	b.n	800f8ae <create_name+0x132>
 800f8a8:	69bb      	ldr	r3, [r7, #24]
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	61bb      	str	r3, [r7, #24]
 800f8ae:	69bb      	ldr	r3, [r7, #24]
 800f8b0:	005b      	lsls	r3, r3, #1
 800f8b2:	68fa      	ldr	r2, [r7, #12]
 800f8b4:	4413      	add	r3, r2
 800f8b6:	881b      	ldrh	r3, [r3, #0]
 800f8b8:	2b20      	cmp	r3, #32
 800f8ba:	d0f5      	beq.n	800f8a8 <create_name+0x12c>
 800f8bc:	69bb      	ldr	r3, [r7, #24]
 800f8be:	005b      	lsls	r3, r3, #1
 800f8c0:	68fa      	ldr	r2, [r7, #12]
 800f8c2:	4413      	add	r3, r2
 800f8c4:	881b      	ldrh	r3, [r3, #0]
 800f8c6:	2b2e      	cmp	r3, #46	; 0x2e
 800f8c8:	d0ee      	beq.n	800f8a8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f8ca:	69bb      	ldr	r3, [r7, #24]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d009      	beq.n	800f8e4 <create_name+0x168>
 800f8d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8d4:	f043 0303 	orr.w	r3, r3, #3
 800f8d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f8dc:	e002      	b.n	800f8e4 <create_name+0x168>
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	3b01      	subs	r3, #1
 800f8e2:	617b      	str	r3, [r7, #20]
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d009      	beq.n	800f8fe <create_name+0x182>
 800f8ea:	697b      	ldr	r3, [r7, #20]
 800f8ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f8f0:	3b01      	subs	r3, #1
 800f8f2:	005b      	lsls	r3, r3, #1
 800f8f4:	68fa      	ldr	r2, [r7, #12]
 800f8f6:	4413      	add	r3, r2
 800f8f8:	881b      	ldrh	r3, [r3, #0]
 800f8fa:	2b2e      	cmp	r3, #46	; 0x2e
 800f8fc:	d1ef      	bne.n	800f8de <create_name+0x162>

	i = b = 0; ni = 8;
 800f8fe:	2300      	movs	r3, #0
 800f900:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f904:	2300      	movs	r3, #0
 800f906:	623b      	str	r3, [r7, #32]
 800f908:	2308      	movs	r3, #8
 800f90a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f90c:	69bb      	ldr	r3, [r7, #24]
 800f90e:	1c5a      	adds	r2, r3, #1
 800f910:	61ba      	str	r2, [r7, #24]
 800f912:	005b      	lsls	r3, r3, #1
 800f914:	68fa      	ldr	r2, [r7, #12]
 800f916:	4413      	add	r3, r2
 800f918:	881b      	ldrh	r3, [r3, #0]
 800f91a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f91c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f91e:	2b00      	cmp	r3, #0
 800f920:	f000 8090 	beq.w	800fa44 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f924:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f926:	2b20      	cmp	r3, #32
 800f928:	d006      	beq.n	800f938 <create_name+0x1bc>
 800f92a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f92c:	2b2e      	cmp	r3, #46	; 0x2e
 800f92e:	d10a      	bne.n	800f946 <create_name+0x1ca>
 800f930:	69ba      	ldr	r2, [r7, #24]
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	429a      	cmp	r2, r3
 800f936:	d006      	beq.n	800f946 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f93c:	f043 0303 	orr.w	r3, r3, #3
 800f940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f944:	e07d      	b.n	800fa42 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f946:	6a3a      	ldr	r2, [r7, #32]
 800f948:	69fb      	ldr	r3, [r7, #28]
 800f94a:	429a      	cmp	r2, r3
 800f94c:	d203      	bcs.n	800f956 <create_name+0x1da>
 800f94e:	69ba      	ldr	r2, [r7, #24]
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	429a      	cmp	r2, r3
 800f954:	d123      	bne.n	800f99e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f956:	69fb      	ldr	r3, [r7, #28]
 800f958:	2b0b      	cmp	r3, #11
 800f95a:	d106      	bne.n	800f96a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f95c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f960:	f043 0303 	orr.w	r3, r3, #3
 800f964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f968:	e075      	b.n	800fa56 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f96a:	69ba      	ldr	r2, [r7, #24]
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	429a      	cmp	r2, r3
 800f970:	d005      	beq.n	800f97e <create_name+0x202>
 800f972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f976:	f043 0303 	orr.w	r3, r3, #3
 800f97a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f97e:	69ba      	ldr	r2, [r7, #24]
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	429a      	cmp	r2, r3
 800f984:	d866      	bhi.n	800fa54 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	61bb      	str	r3, [r7, #24]
 800f98a:	2308      	movs	r3, #8
 800f98c:	623b      	str	r3, [r7, #32]
 800f98e:	230b      	movs	r3, #11
 800f990:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f992:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f996:	009b      	lsls	r3, r3, #2
 800f998:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f99c:	e051      	b.n	800fa42 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f99e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9a0:	2b7f      	cmp	r3, #127	; 0x7f
 800f9a2:	d914      	bls.n	800f9ce <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f9a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9a6:	2100      	movs	r1, #0
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f002 f8b1 	bl	8011b10 <ff_convert>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f9b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d004      	beq.n	800f9c2 <create_name+0x246>
 800f9b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9ba:	3b80      	subs	r3, #128	; 0x80
 800f9bc:	4a23      	ldr	r2, [pc, #140]	; (800fa4c <create_name+0x2d0>)
 800f9be:	5cd3      	ldrb	r3, [r2, r3]
 800f9c0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f9c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9c6:	f043 0302 	orr.w	r3, r3, #2
 800f9ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f9ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d007      	beq.n	800f9e4 <create_name+0x268>
 800f9d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9d6:	4619      	mov	r1, r3
 800f9d8:	481d      	ldr	r0, [pc, #116]	; (800fa50 <create_name+0x2d4>)
 800f9da:	f7fd fd69 	bl	800d4b0 <chk_chr>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d008      	beq.n	800f9f6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f9e4:	235f      	movs	r3, #95	; 0x5f
 800f9e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f9e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9ec:	f043 0303 	orr.w	r3, r3, #3
 800f9f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f9f4:	e01b      	b.n	800fa2e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f9f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9f8:	2b40      	cmp	r3, #64	; 0x40
 800f9fa:	d909      	bls.n	800fa10 <create_name+0x294>
 800f9fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9fe:	2b5a      	cmp	r3, #90	; 0x5a
 800fa00:	d806      	bhi.n	800fa10 <create_name+0x294>
					b |= 2;
 800fa02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa06:	f043 0302 	orr.w	r3, r3, #2
 800fa0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fa0e:	e00e      	b.n	800fa2e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800fa10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa12:	2b60      	cmp	r3, #96	; 0x60
 800fa14:	d90b      	bls.n	800fa2e <create_name+0x2b2>
 800fa16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa18:	2b7a      	cmp	r3, #122	; 0x7a
 800fa1a:	d808      	bhi.n	800fa2e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800fa1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa20:	f043 0301 	orr.w	r3, r3, #1
 800fa24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fa28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa2a:	3b20      	subs	r3, #32
 800fa2c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800fa2e:	6a3b      	ldr	r3, [r7, #32]
 800fa30:	1c5a      	adds	r2, r3, #1
 800fa32:	623a      	str	r2, [r7, #32]
 800fa34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fa36:	b2d1      	uxtb	r1, r2
 800fa38:	687a      	ldr	r2, [r7, #4]
 800fa3a:	4413      	add	r3, r2
 800fa3c:	460a      	mov	r2, r1
 800fa3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800fa42:	e763      	b.n	800f90c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800fa44:	bf00      	nop
 800fa46:	e006      	b.n	800fa56 <create_name+0x2da>
 800fa48:	080176a4 	.word	0x080176a4
 800fa4c:	0801772c 	.word	0x0801772c
 800fa50:	080176b0 	.word	0x080176b0
			if (si > di) break;			/* No extension */
 800fa54:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fa5c:	2be5      	cmp	r3, #229	; 0xe5
 800fa5e:	d103      	bne.n	800fa68 <create_name+0x2ec>
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2205      	movs	r2, #5
 800fa64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800fa68:	69fb      	ldr	r3, [r7, #28]
 800fa6a:	2b08      	cmp	r3, #8
 800fa6c:	d104      	bne.n	800fa78 <create_name+0x2fc>
 800fa6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa72:	009b      	lsls	r3, r3, #2
 800fa74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800fa78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa7c:	f003 030c 	and.w	r3, r3, #12
 800fa80:	2b0c      	cmp	r3, #12
 800fa82:	d005      	beq.n	800fa90 <create_name+0x314>
 800fa84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa88:	f003 0303 	and.w	r3, r3, #3
 800fa8c:	2b03      	cmp	r3, #3
 800fa8e:	d105      	bne.n	800fa9c <create_name+0x320>
 800fa90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa94:	f043 0302 	orr.w	r3, r3, #2
 800fa98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800fa9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800faa0:	f003 0302 	and.w	r3, r3, #2
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d117      	bne.n	800fad8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800faa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800faac:	f003 0303 	and.w	r3, r3, #3
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d105      	bne.n	800fac0 <create_name+0x344>
 800fab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fab8:	f043 0310 	orr.w	r3, r3, #16
 800fabc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800fac0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fac4:	f003 030c 	and.w	r3, r3, #12
 800fac8:	2b04      	cmp	r3, #4
 800faca:	d105      	bne.n	800fad8 <create_name+0x35c>
 800facc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fad0:	f043 0308 	orr.w	r3, r3, #8
 800fad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fade:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800fae2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800fae4:	4618      	mov	r0, r3
 800fae6:	3728      	adds	r7, #40	; 0x28
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b086      	sub	sp, #24
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
 800faf4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fb00:	e002      	b.n	800fb08 <follow_path+0x1c>
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	3301      	adds	r3, #1
 800fb06:	603b      	str	r3, [r7, #0]
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	2b2f      	cmp	r3, #47	; 0x2f
 800fb0e:	d0f8      	beq.n	800fb02 <follow_path+0x16>
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	2b5c      	cmp	r3, #92	; 0x5c
 800fb16:	d0f4      	beq.n	800fb02 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800fb1e:	693b      	ldr	r3, [r7, #16]
 800fb20:	2200      	movs	r2, #0
 800fb22:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	2b1f      	cmp	r3, #31
 800fb2a:	d80a      	bhi.n	800fb42 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2280      	movs	r2, #128	; 0x80
 800fb30:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800fb34:	2100      	movs	r1, #0
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f7fe fc8b 	bl	800e452 <dir_sdi>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	75fb      	strb	r3, [r7, #23]
 800fb40:	e078      	b.n	800fc34 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fb42:	463b      	mov	r3, r7
 800fb44:	4619      	mov	r1, r3
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f7ff fe18 	bl	800f77c <create_name>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fb50:	7dfb      	ldrb	r3, [r7, #23]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d169      	bne.n	800fc2a <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f7ff fb41 	bl	800f1de <dir_find>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800fb66:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fb68:	7dfb      	ldrb	r3, [r7, #23]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d00a      	beq.n	800fb84 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fb6e:	7dfb      	ldrb	r3, [r7, #23]
 800fb70:	2b04      	cmp	r3, #4
 800fb72:	d15c      	bne.n	800fc2e <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fb74:	7afb      	ldrb	r3, [r7, #11]
 800fb76:	f003 0304 	and.w	r3, r3, #4
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d157      	bne.n	800fc2e <follow_path+0x142>
 800fb7e:	2305      	movs	r3, #5
 800fb80:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fb82:	e054      	b.n	800fc2e <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fb84:	7afb      	ldrb	r3, [r7, #11]
 800fb86:	f003 0304 	and.w	r3, r3, #4
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d151      	bne.n	800fc32 <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fb8e:	693b      	ldr	r3, [r7, #16]
 800fb90:	799b      	ldrb	r3, [r3, #6]
 800fb92:	f003 0310 	and.w	r3, r3, #16
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d102      	bne.n	800fba0 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800fb9a:	2305      	movs	r3, #5
 800fb9c:	75fb      	strb	r3, [r7, #23]
 800fb9e:	e049      	b.n	800fc34 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	781b      	ldrb	r3, [r3, #0]
 800fba4:	2b04      	cmp	r3, #4
 800fba6:	d130      	bne.n	800fc0a <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800fba8:	693b      	ldr	r3, [r7, #16]
 800fbaa:	689a      	ldr	r2, [r3, #8]
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fbb6:	4613      	mov	r3, r2
 800fbb8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800fbbc:	693a      	ldr	r2, [r7, #16]
 800fbbe:	79d2      	ldrb	r2, [r2, #7]
 800fbc0:	431a      	orrs	r2, r3
 800fbc2:	693b      	ldr	r3, [r7, #16]
 800fbc4:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fbca:	693b      	ldr	r3, [r7, #16]
 800fbcc:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	691b      	ldr	r3, [r3, #16]
 800fbd2:	3334      	adds	r3, #52	; 0x34
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f7fd fa3b 	bl	800d050 <ld_dword>
 800fbda:	4602      	mov	r2, r0
 800fbdc:	693b      	ldr	r3, [r7, #16]
 800fbde:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	691b      	ldr	r3, [r3, #16]
 800fbe4:	3321      	adds	r3, #33	; 0x21
 800fbe6:	781b      	ldrb	r3, [r3, #0]
 800fbe8:	f003 0302 	and.w	r3, r3, #2
 800fbec:	b2da      	uxtb	r2, r3
 800fbee:	693b      	ldr	r3, [r7, #16]
 800fbf0:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	691b      	ldr	r3, [r3, #16]
 800fbf6:	3338      	adds	r3, #56	; 0x38
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f7fd fa4c 	bl	800d096 <ld_qword>
 800fbfe:	4602      	mov	r2, r0
 800fc00:	460b      	mov	r3, r1
 800fc02:	6939      	ldr	r1, [r7, #16]
 800fc04:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800fc08:	e79b      	b.n	800fb42 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc18:	4413      	add	r3, r2
 800fc1a:	4619      	mov	r1, r3
 800fc1c:	68f8      	ldr	r0, [r7, #12]
 800fc1e:	f7fe fdcf 	bl	800e7c0 <ld_clust>
 800fc22:	4602      	mov	r2, r0
 800fc24:	693b      	ldr	r3, [r7, #16]
 800fc26:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fc28:	e78b      	b.n	800fb42 <follow_path+0x56>
			if (res != FR_OK) break;
 800fc2a:	bf00      	nop
 800fc2c:	e002      	b.n	800fc34 <follow_path+0x148>
				break;
 800fc2e:	bf00      	nop
 800fc30:	e000      	b.n	800fc34 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fc32:	bf00      	nop
			}
		}
	}

	return res;
 800fc34:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3718      	adds	r7, #24
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}

0800fc3e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fc3e:	b480      	push	{r7}
 800fc40:	b087      	sub	sp, #28
 800fc42:	af00      	add	r7, sp, #0
 800fc44:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fc46:	f04f 33ff 	mov.w	r3, #4294967295
 800fc4a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d031      	beq.n	800fcb8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	617b      	str	r3, [r7, #20]
 800fc5a:	e002      	b.n	800fc62 <get_ldnumber+0x24>
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	3301      	adds	r3, #1
 800fc60:	617b      	str	r3, [r7, #20]
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	2b1f      	cmp	r3, #31
 800fc68:	d903      	bls.n	800fc72 <get_ldnumber+0x34>
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	781b      	ldrb	r3, [r3, #0]
 800fc6e:	2b3a      	cmp	r3, #58	; 0x3a
 800fc70:	d1f4      	bne.n	800fc5c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	781b      	ldrb	r3, [r3, #0]
 800fc76:	2b3a      	cmp	r3, #58	; 0x3a
 800fc78:	d11c      	bne.n	800fcb4 <get_ldnumber+0x76>
			tp = *path;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	1c5a      	adds	r2, r3, #1
 800fc84:	60fa      	str	r2, [r7, #12]
 800fc86:	781b      	ldrb	r3, [r3, #0]
 800fc88:	3b30      	subs	r3, #48	; 0x30
 800fc8a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	2b09      	cmp	r3, #9
 800fc90:	d80e      	bhi.n	800fcb0 <get_ldnumber+0x72>
 800fc92:	68fa      	ldr	r2, [r7, #12]
 800fc94:	697b      	ldr	r3, [r7, #20]
 800fc96:	429a      	cmp	r2, r3
 800fc98:	d10a      	bne.n	800fcb0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	2b03      	cmp	r3, #3
 800fc9e:	d807      	bhi.n	800fcb0 <get_ldnumber+0x72>
					vol = (int)i;
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	3301      	adds	r3, #1
 800fca8:	617b      	str	r3, [r7, #20]
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	697a      	ldr	r2, [r7, #20]
 800fcae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fcb0:	693b      	ldr	r3, [r7, #16]
 800fcb2:	e002      	b.n	800fcba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fcb8:	693b      	ldr	r3, [r7, #16]
}
 800fcba:	4618      	mov	r0, r3
 800fcbc:	371c      	adds	r7, #28
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc4:	4770      	bx	lr
	...

0800fcc8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
 800fcd0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	70da      	strb	r2, [r3, #3]
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f04f 32ff 	mov.w	r2, #4294967295
 800fcde:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fce0:	6839      	ldr	r1, [r7, #0]
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f7fd fdb0 	bl	800d848 <move_window>
 800fce8:	4603      	mov	r3, r0
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d001      	beq.n	800fcf2 <check_fs+0x2a>
 800fcee:	2304      	movs	r3, #4
 800fcf0:	e044      	b.n	800fd7c <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	3338      	adds	r3, #56	; 0x38
 800fcf6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7fd f990 	bl	800d020 <ld_word>
 800fd00:	4603      	mov	r3, r0
 800fd02:	461a      	mov	r2, r3
 800fd04:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d001      	beq.n	800fd10 <check_fs+0x48>
 800fd0c:	2303      	movs	r3, #3
 800fd0e:	e035      	b.n	800fd7c <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fd16:	2be9      	cmp	r3, #233	; 0xe9
 800fd18:	d009      	beq.n	800fd2e <check_fs+0x66>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fd20:	2beb      	cmp	r3, #235	; 0xeb
 800fd22:	d11e      	bne.n	800fd62 <check_fs+0x9a>
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fd2a:	2b90      	cmp	r3, #144	; 0x90
 800fd2c:	d119      	bne.n	800fd62 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	3338      	adds	r3, #56	; 0x38
 800fd32:	3336      	adds	r3, #54	; 0x36
 800fd34:	4618      	mov	r0, r3
 800fd36:	f7fd f98b 	bl	800d050 <ld_dword>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fd40:	4a10      	ldr	r2, [pc, #64]	; (800fd84 <check_fs+0xbc>)
 800fd42:	4293      	cmp	r3, r2
 800fd44:	d101      	bne.n	800fd4a <check_fs+0x82>
 800fd46:	2300      	movs	r3, #0
 800fd48:	e018      	b.n	800fd7c <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	3338      	adds	r3, #56	; 0x38
 800fd4e:	3352      	adds	r3, #82	; 0x52
 800fd50:	4618      	mov	r0, r3
 800fd52:	f7fd f97d 	bl	800d050 <ld_dword>
 800fd56:	4603      	mov	r3, r0
 800fd58:	4a0b      	ldr	r2, [pc, #44]	; (800fd88 <check_fs+0xc0>)
 800fd5a:	4293      	cmp	r3, r2
 800fd5c:	d101      	bne.n	800fd62 <check_fs+0x9a>
 800fd5e:	2300      	movs	r3, #0
 800fd60:	e00c      	b.n	800fd7c <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	3338      	adds	r3, #56	; 0x38
 800fd66:	220b      	movs	r2, #11
 800fd68:	4908      	ldr	r1, [pc, #32]	; (800fd8c <check_fs+0xc4>)
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7fd fb79 	bl	800d462 <mem_cmp>
 800fd70:	4603      	mov	r3, r0
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d101      	bne.n	800fd7a <check_fs+0xb2>
 800fd76:	2301      	movs	r3, #1
 800fd78:	e000      	b.n	800fd7c <check_fs+0xb4>
#endif
	return 2;
 800fd7a:	2302      	movs	r3, #2
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	3708      	adds	r7, #8
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}
 800fd84:	00544146 	.word	0x00544146
 800fd88:	33544146 	.word	0x33544146
 800fd8c:	080176b8 	.word	0x080176b8

0800fd90 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fd90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fd94:	b09c      	sub	sp, #112	; 0x70
 800fd96:	af00      	add	r7, sp, #0
 800fd98:	61f8      	str	r0, [r7, #28]
 800fd9a:	61b9      	str	r1, [r7, #24]
 800fd9c:	4613      	mov	r3, r2
 800fd9e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fda0:	69bb      	ldr	r3, [r7, #24]
 800fda2:	2200      	movs	r2, #0
 800fda4:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fda6:	69f8      	ldr	r0, [r7, #28]
 800fda8:	f7ff ff49 	bl	800fc3e <get_ldnumber>
 800fdac:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800fdae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	da01      	bge.n	800fdb8 <find_volume+0x28>
 800fdb4:	230b      	movs	r3, #11
 800fdb6:	e337      	b.n	8010428 <find_volume+0x698>


	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fdb8:	4a99      	ldr	r2, [pc, #612]	; (8010020 <find_volume+0x290>)
 800fdba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdc0:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fdc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d101      	bne.n	800fdcc <find_volume+0x3c>
 800fdc8:	230c      	movs	r3, #12
 800fdca:	e32d      	b.n	8010428 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fdcc:	69bb      	ldr	r3, [r7, #24]
 800fdce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fdd0:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fdd2:	7dfb      	ldrb	r3, [r7, #23]
 800fdd4:	f023 0301 	bic.w	r3, r3, #1
 800fdd8:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fdda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fddc:	781b      	ldrb	r3, [r3, #0]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d01a      	beq.n	800fe18 <find_volume+0x88>

		stat = disk_status(fs->drv);
 800fde2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fde4:	785b      	ldrb	r3, [r3, #1]
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7fd f87c 	bl	800cee4 <disk_status>
 800fdec:	4603      	mov	r3, r0
 800fdee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fdf2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fdf6:	f003 0301 	and.w	r3, r3, #1
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d10c      	bne.n	800fe18 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fdfe:	7dfb      	ldrb	r3, [r7, #23]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d007      	beq.n	800fe14 <find_volume+0x84>
 800fe04:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fe08:	f003 0304 	and.w	r3, r3, #4
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d001      	beq.n	800fe14 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800fe10:	230a      	movs	r3, #10
 800fe12:	e309      	b.n	8010428 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 800fe14:	2300      	movs	r3, #0
 800fe16:	e307      	b.n	8010428 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fe18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fe1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe20:	b2da      	uxtb	r2, r3
 800fe22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe24:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fe26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe28:	785b      	ldrb	r3, [r3, #1]
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f7fd f874 	bl	800cf18 <disk_initialize>
 800fe30:	4603      	mov	r3, r0
 800fe32:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fe36:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fe3a:	f003 0301 	and.w	r3, r3, #1
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d001      	beq.n	800fe46 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fe42:	2303      	movs	r3, #3
 800fe44:	e2f0      	b.n	8010428 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fe46:	7dfb      	ldrb	r3, [r7, #23]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d007      	beq.n	800fe5c <find_volume+0xcc>
 800fe4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fe50:	f003 0304 	and.w	r3, r3, #4
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d001      	beq.n	800fe5c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800fe58:	230a      	movs	r3, #10
 800fe5a:	e2e5      	b.n	8010428 <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fe60:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fe62:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fe64:	f7ff ff30 	bl	800fcc8 <check_fs>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fe6e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800fe72:	2b02      	cmp	r3, #2
 800fe74:	d14d      	bne.n	800ff12 <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fe76:	2300      	movs	r3, #0
 800fe78:	65bb      	str	r3, [r7, #88]	; 0x58
 800fe7a:	e020      	b.n	800febe <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fe7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe7e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800fe82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fe84:	011b      	lsls	r3, r3, #4
 800fe86:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fe8a:	4413      	add	r3, r2
 800fe8c:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fe8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe90:	3304      	adds	r3, #4
 800fe92:	781b      	ldrb	r3, [r3, #0]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d006      	beq.n	800fea6 <find_volume+0x116>
 800fe98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe9a:	3308      	adds	r3, #8
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f7fd f8d7 	bl	800d050 <ld_dword>
 800fea2:	4602      	mov	r2, r0
 800fea4:	e000      	b.n	800fea8 <find_volume+0x118>
 800fea6:	2200      	movs	r2, #0
 800fea8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800feaa:	009b      	lsls	r3, r3, #2
 800feac:	3360      	adds	r3, #96	; 0x60
 800feae:	f107 0110 	add.w	r1, r7, #16
 800feb2:	440b      	add	r3, r1
 800feb4:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800feb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800feba:	3301      	adds	r3, #1
 800febc:	65bb      	str	r3, [r7, #88]	; 0x58
 800febe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fec0:	2b03      	cmp	r3, #3
 800fec2:	d9db      	bls.n	800fe7c <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fec4:	2300      	movs	r3, #0
 800fec6:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800fec8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d002      	beq.n	800fed4 <find_volume+0x144>
 800fece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fed0:	3b01      	subs	r3, #1
 800fed2:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fed4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fed6:	009b      	lsls	r3, r3, #2
 800fed8:	3360      	adds	r3, #96	; 0x60
 800feda:	f107 0210 	add.w	r2, r7, #16
 800fede:	4413      	add	r3, r2
 800fee0:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800fee4:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fee6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d005      	beq.n	800fef8 <find_volume+0x168>
 800feec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800feee:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fef0:	f7ff feea 	bl	800fcc8 <check_fs>
 800fef4:	4603      	mov	r3, r0
 800fef6:	e000      	b.n	800fefa <find_volume+0x16a>
 800fef8:	2303      	movs	r3, #3
 800fefa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fefe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ff02:	2b01      	cmp	r3, #1
 800ff04:	d905      	bls.n	800ff12 <find_volume+0x182>
 800ff06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff08:	3301      	adds	r3, #1
 800ff0a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ff0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff0e:	2b03      	cmp	r3, #3
 800ff10:	d9e0      	bls.n	800fed4 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ff12:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ff16:	2b04      	cmp	r3, #4
 800ff18:	d101      	bne.n	800ff1e <find_volume+0x18e>
 800ff1a:	2301      	movs	r3, #1
 800ff1c:	e284      	b.n	8010428 <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ff1e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ff22:	2b01      	cmp	r3, #1
 800ff24:	d901      	bls.n	800ff2a <find_volume+0x19a>
 800ff26:	230d      	movs	r3, #13
 800ff28:	e27e      	b.n	8010428 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800ff2a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ff2e:	2b01      	cmp	r3, #1
 800ff30:	f040 80fa 	bne.w	8010128 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800ff34:	230b      	movs	r3, #11
 800ff36:	65bb      	str	r3, [r7, #88]	; 0x58
 800ff38:	e002      	b.n	800ff40 <find_volume+0x1b0>
 800ff3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ff40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff42:	2b3f      	cmp	r3, #63	; 0x3f
 800ff44:	d806      	bhi.n	800ff54 <find_volume+0x1c4>
 800ff46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff4a:	4413      	add	r3, r2
 800ff4c:	3338      	adds	r3, #56	; 0x38
 800ff4e:	781b      	ldrb	r3, [r3, #0]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d0f2      	beq.n	800ff3a <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800ff54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff56:	2b3f      	cmp	r3, #63	; 0x3f
 800ff58:	d801      	bhi.n	800ff5e <find_volume+0x1ce>
 800ff5a:	230d      	movs	r3, #13
 800ff5c:	e264      	b.n	8010428 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800ff5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff60:	3338      	adds	r3, #56	; 0x38
 800ff62:	3368      	adds	r3, #104	; 0x68
 800ff64:	4618      	mov	r0, r3
 800ff66:	f7fd f85b 	bl	800d020 <ld_word>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff70:	d001      	beq.n	800ff76 <find_volume+0x1e6>
 800ff72:	230d      	movs	r3, #13
 800ff74:	e258      	b.n	8010428 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800ff76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff78:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800ff7c:	2b09      	cmp	r3, #9
 800ff7e:	d001      	beq.n	800ff84 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800ff80:	230d      	movs	r3, #13
 800ff82:	e251      	b.n	8010428 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800ff84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff86:	3338      	adds	r3, #56	; 0x38
 800ff88:	3348      	adds	r3, #72	; 0x48
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f7fd f883 	bl	800d096 <ld_qword>
 800ff90:	4602      	mov	r2, r0
 800ff92:	460b      	mov	r3, r1
 800ff94:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ff96:	2000      	movs	r0, #0
 800ff98:	60b9      	str	r1, [r7, #8]
 800ff9a:	60f8      	str	r0, [r7, #12]
 800ff9c:	68b9      	ldr	r1, [r7, #8]
 800ff9e:	1851      	adds	r1, r2, r1
 800ffa0:	6039      	str	r1, [r7, #0]
 800ffa2:	68f9      	ldr	r1, [r7, #12]
 800ffa4:	eb43 0101 	adc.w	r1, r3, r1
 800ffa8:	6079      	str	r1, [r7, #4]
 800ffaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800ffb2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ffb6:	2b01      	cmp	r3, #1
 800ffb8:	d301      	bcc.n	800ffbe <find_volume+0x22e>
 800ffba:	230d      	movs	r3, #13
 800ffbc:	e234      	b.n	8010428 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800ffbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffc0:	3338      	adds	r3, #56	; 0x38
 800ffc2:	3354      	adds	r3, #84	; 0x54
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f7fd f843 	bl	800d050 <ld_dword>
 800ffca:	4602      	mov	r2, r0
 800ffcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffce:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800ffd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffd2:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 800ffd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffd8:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800ffda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffdc:	789b      	ldrb	r3, [r3, #2]
 800ffde:	2b01      	cmp	r3, #1
 800ffe0:	d001      	beq.n	800ffe6 <find_volume+0x256>
 800ffe2:	230d      	movs	r3, #13
 800ffe4:	e220      	b.n	8010428 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800ffe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffe8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ffec:	461a      	mov	r2, r3
 800ffee:	2301      	movs	r3, #1
 800fff0:	4093      	lsls	r3, r2
 800fff2:	b29a      	uxth	r2, r3
 800fff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fff6:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800fff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fffa:	895b      	ldrh	r3, [r3, #10]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d101      	bne.n	8010004 <find_volume+0x274>
 8010000:	230d      	movs	r3, #13
 8010002:	e211      	b.n	8010428 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8010004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010006:	3338      	adds	r3, #56	; 0x38
 8010008:	335c      	adds	r3, #92	; 0x5c
 801000a:	4618      	mov	r0, r3
 801000c:	f7fd f820 	bl	800d050 <ld_dword>
 8010010:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8010012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010014:	4a03      	ldr	r2, [pc, #12]	; (8010024 <find_volume+0x294>)
 8010016:	4293      	cmp	r3, r2
 8010018:	d906      	bls.n	8010028 <find_volume+0x298>
 801001a:	230d      	movs	r3, #13
 801001c:	e204      	b.n	8010428 <find_volume+0x698>
 801001e:	bf00      	nop
 8010020:	20001e58 	.word	0x20001e58
 8010024:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 8010028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801002a:	1c9a      	adds	r2, r3, #2
 801002c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801002e:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8010030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010032:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010034:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8010036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010038:	3338      	adds	r3, #56	; 0x38
 801003a:	3358      	adds	r3, #88	; 0x58
 801003c:	4618      	mov	r0, r3
 801003e:	f7fd f807 	bl	800d050 <ld_dword>
 8010042:	4602      	mov	r2, r0
 8010044:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010046:	441a      	add	r2, r3
 8010048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801004a:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 801004c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801004e:	3338      	adds	r3, #56	; 0x38
 8010050:	3350      	adds	r3, #80	; 0x50
 8010052:	4618      	mov	r0, r3
 8010054:	f7fc fffc 	bl	800d050 <ld_dword>
 8010058:	4602      	mov	r2, r0
 801005a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801005c:	441a      	add	r2, r3
 801005e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010060:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8010062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010066:	2200      	movs	r2, #0
 8010068:	469a      	mov	sl, r3
 801006a:	4693      	mov	fp, r2
 801006c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801006e:	895b      	ldrh	r3, [r3, #10]
 8010070:	461a      	mov	r2, r3
 8010072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010074:	fb02 f303 	mul.w	r3, r2, r3
 8010078:	2200      	movs	r2, #0
 801007a:	4698      	mov	r8, r3
 801007c:	4691      	mov	r9, r2
 801007e:	eb1a 0408 	adds.w	r4, sl, r8
 8010082:	eb4b 0509 	adc.w	r5, fp, r9
 8010086:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801008a:	42a2      	cmp	r2, r4
 801008c:	41ab      	sbcs	r3, r5
 801008e:	d201      	bcs.n	8010094 <find_volume+0x304>
 8010090:	230d      	movs	r3, #13
 8010092:	e1c9      	b.n	8010428 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8010094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010096:	3338      	adds	r3, #56	; 0x38
 8010098:	3360      	adds	r3, #96	; 0x60
 801009a:	4618      	mov	r0, r3
 801009c:	f7fc ffd8 	bl	800d050 <ld_dword>
 80100a0:	4602      	mov	r2, r0
 80100a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100a4:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 80100a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100aa:	4619      	mov	r1, r3
 80100ac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80100ae:	f7fd fc67 	bl	800d980 <clust2sect>
 80100b2:	4603      	mov	r3, r0
 80100b4:	4619      	mov	r1, r3
 80100b6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80100b8:	f7fd fbc6 	bl	800d848 <move_window>
 80100bc:	4603      	mov	r3, r0
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d001      	beq.n	80100c6 <find_volume+0x336>
 80100c2:	2301      	movs	r3, #1
 80100c4:	e1b0      	b.n	8010428 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80100c6:	2300      	movs	r3, #0
 80100c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80100ca:	e015      	b.n	80100f8 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80100cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80100ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100d0:	4413      	add	r3, r2
 80100d2:	3338      	adds	r3, #56	; 0x38
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	2b81      	cmp	r3, #129	; 0x81
 80100d8:	d10b      	bne.n	80100f2 <find_volume+0x362>
 80100da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100dc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80100e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100e2:	3314      	adds	r3, #20
 80100e4:	4413      	add	r3, r2
 80100e6:	4618      	mov	r0, r3
 80100e8:	f7fc ffb2 	bl	800d050 <ld_dword>
 80100ec:	4603      	mov	r3, r0
 80100ee:	2b02      	cmp	r3, #2
 80100f0:	d007      	beq.n	8010102 <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80100f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100f4:	3320      	adds	r3, #32
 80100f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80100f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100fe:	d3e5      	bcc.n	80100cc <find_volume+0x33c>
 8010100:	e000      	b.n	8010104 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8010102:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8010104:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801010a:	d101      	bne.n	8010110 <find_volume+0x380>
 801010c:	230d      	movs	r3, #13
 801010e:	e18b      	b.n	8010428 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010112:	f04f 32ff 	mov.w	r2, #4294967295
 8010116:	619a      	str	r2, [r3, #24]
 8010118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801011a:	699a      	ldr	r2, [r3, #24]
 801011c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801011e:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8010120:	2304      	movs	r3, #4
 8010122:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8010126:	e167      	b.n	80103f8 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801012a:	3338      	adds	r3, #56	; 0x38
 801012c:	330b      	adds	r3, #11
 801012e:	4618      	mov	r0, r3
 8010130:	f7fc ff76 	bl	800d020 <ld_word>
 8010134:	4603      	mov	r3, r0
 8010136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801013a:	d001      	beq.n	8010140 <find_volume+0x3b0>
 801013c:	230d      	movs	r3, #13
 801013e:	e173      	b.n	8010428 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010142:	3338      	adds	r3, #56	; 0x38
 8010144:	3316      	adds	r3, #22
 8010146:	4618      	mov	r0, r3
 8010148:	f7fc ff6a 	bl	800d020 <ld_word>
 801014c:	4603      	mov	r3, r0
 801014e:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010150:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010152:	2b00      	cmp	r3, #0
 8010154:	d106      	bne.n	8010164 <find_volume+0x3d4>
 8010156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010158:	3338      	adds	r3, #56	; 0x38
 801015a:	3324      	adds	r3, #36	; 0x24
 801015c:	4618      	mov	r0, r3
 801015e:	f7fc ff77 	bl	800d050 <ld_dword>
 8010162:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 8010164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010166:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010168:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801016a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801016c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010172:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010176:	789b      	ldrb	r3, [r3, #2]
 8010178:	2b01      	cmp	r3, #1
 801017a:	d005      	beq.n	8010188 <find_volume+0x3f8>
 801017c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801017e:	789b      	ldrb	r3, [r3, #2]
 8010180:	2b02      	cmp	r3, #2
 8010182:	d001      	beq.n	8010188 <find_volume+0x3f8>
 8010184:	230d      	movs	r3, #13
 8010186:	e14f      	b.n	8010428 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801018a:	789b      	ldrb	r3, [r3, #2]
 801018c:	461a      	mov	r2, r3
 801018e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010190:	fb02 f303 	mul.w	r3, r2, r3
 8010194:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010198:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801019c:	b29a      	uxth	r2, r3
 801019e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101a0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80101a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101a4:	895b      	ldrh	r3, [r3, #10]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d008      	beq.n	80101bc <find_volume+0x42c>
 80101aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101ac:	895b      	ldrh	r3, [r3, #10]
 80101ae:	461a      	mov	r2, r3
 80101b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101b2:	895b      	ldrh	r3, [r3, #10]
 80101b4:	3b01      	subs	r3, #1
 80101b6:	4013      	ands	r3, r2
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d001      	beq.n	80101c0 <find_volume+0x430>
 80101bc:	230d      	movs	r3, #13
 80101be:	e133      	b.n	8010428 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80101c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101c2:	3338      	adds	r3, #56	; 0x38
 80101c4:	3311      	adds	r3, #17
 80101c6:	4618      	mov	r0, r3
 80101c8:	f7fc ff2a 	bl	800d020 <ld_word>
 80101cc:	4603      	mov	r3, r0
 80101ce:	461a      	mov	r2, r3
 80101d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101d2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80101d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101d6:	891b      	ldrh	r3, [r3, #8]
 80101d8:	f003 030f 	and.w	r3, r3, #15
 80101dc:	b29b      	uxth	r3, r3
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d001      	beq.n	80101e6 <find_volume+0x456>
 80101e2:	230d      	movs	r3, #13
 80101e4:	e120      	b.n	8010428 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80101e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101e8:	3338      	adds	r3, #56	; 0x38
 80101ea:	3313      	adds	r3, #19
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7fc ff17 	bl	800d020 <ld_word>
 80101f2:	4603      	mov	r3, r0
 80101f4:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80101f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d106      	bne.n	801020a <find_volume+0x47a>
 80101fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101fe:	3338      	adds	r3, #56	; 0x38
 8010200:	3320      	adds	r3, #32
 8010202:	4618      	mov	r0, r3
 8010204:	f7fc ff24 	bl	800d050 <ld_dword>
 8010208:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801020a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801020c:	3338      	adds	r3, #56	; 0x38
 801020e:	330e      	adds	r3, #14
 8010210:	4618      	mov	r0, r3
 8010212:	f7fc ff05 	bl	800d020 <ld_word>
 8010216:	4603      	mov	r3, r0
 8010218:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801021c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010220:	2b00      	cmp	r3, #0
 8010222:	d101      	bne.n	8010228 <find_volume+0x498>
 8010224:	230d      	movs	r3, #13
 8010226:	e0ff      	b.n	8010428 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010228:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801022c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801022e:	4413      	add	r3, r2
 8010230:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010232:	8912      	ldrh	r2, [r2, #8]
 8010234:	0912      	lsrs	r2, r2, #4
 8010236:	b292      	uxth	r2, r2
 8010238:	4413      	add	r3, r2
 801023a:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801023c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801023e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010240:	429a      	cmp	r2, r3
 8010242:	d201      	bcs.n	8010248 <find_volume+0x4b8>
 8010244:	230d      	movs	r3, #13
 8010246:	e0ef      	b.n	8010428 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010248:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801024a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801024c:	1ad3      	subs	r3, r2, r3
 801024e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010250:	8952      	ldrh	r2, [r2, #10]
 8010252:	fbb3 f3f2 	udiv	r3, r3, r2
 8010256:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801025a:	2b00      	cmp	r3, #0
 801025c:	d101      	bne.n	8010262 <find_volume+0x4d2>
 801025e:	230d      	movs	r3, #13
 8010260:	e0e2      	b.n	8010428 <find_volume+0x698>
		fmt = FS_FAT32;
 8010262:	2303      	movs	r3, #3
 8010264:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801026a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801026e:	4293      	cmp	r3, r2
 8010270:	d802      	bhi.n	8010278 <find_volume+0x4e8>
 8010272:	2302      	movs	r3, #2
 8010274:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801027a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801027e:	4293      	cmp	r3, r2
 8010280:	d802      	bhi.n	8010288 <find_volume+0x4f8>
 8010282:	2301      	movs	r3, #1
 8010284:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801028a:	1c9a      	adds	r2, r3, #2
 801028c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801028e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8010290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010292:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010294:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010296:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801029a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801029c:	441a      	add	r2, r3
 801029e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102a0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80102a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80102a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102a6:	441a      	add	r2, r3
 80102a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102aa:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80102ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80102b0:	2b03      	cmp	r3, #3
 80102b2:	d11e      	bne.n	80102f2 <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80102b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102b6:	3338      	adds	r3, #56	; 0x38
 80102b8:	332a      	adds	r3, #42	; 0x2a
 80102ba:	4618      	mov	r0, r3
 80102bc:	f7fc feb0 	bl	800d020 <ld_word>
 80102c0:	4603      	mov	r3, r0
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d001      	beq.n	80102ca <find_volume+0x53a>
 80102c6:	230d      	movs	r3, #13
 80102c8:	e0ae      	b.n	8010428 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80102ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102cc:	891b      	ldrh	r3, [r3, #8]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d001      	beq.n	80102d6 <find_volume+0x546>
 80102d2:	230d      	movs	r3, #13
 80102d4:	e0a8      	b.n	8010428 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80102d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102d8:	3338      	adds	r3, #56	; 0x38
 80102da:	332c      	adds	r3, #44	; 0x2c
 80102dc:	4618      	mov	r0, r3
 80102de:	f7fc feb7 	bl	800d050 <ld_dword>
 80102e2:	4602      	mov	r2, r0
 80102e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102e6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80102e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102ea:	69db      	ldr	r3, [r3, #28]
 80102ec:	009b      	lsls	r3, r3, #2
 80102ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80102f0:	e01f      	b.n	8010332 <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80102f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102f4:	891b      	ldrh	r3, [r3, #8]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d101      	bne.n	80102fe <find_volume+0x56e>
 80102fa:	230d      	movs	r3, #13
 80102fc:	e094      	b.n	8010428 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80102fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010300:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010302:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010304:	441a      	add	r2, r3
 8010306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010308:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801030a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801030e:	2b02      	cmp	r3, #2
 8010310:	d103      	bne.n	801031a <find_volume+0x58a>
 8010312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010314:	69db      	ldr	r3, [r3, #28]
 8010316:	005b      	lsls	r3, r3, #1
 8010318:	e00a      	b.n	8010330 <find_volume+0x5a0>
 801031a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801031c:	69da      	ldr	r2, [r3, #28]
 801031e:	4613      	mov	r3, r2
 8010320:	005b      	lsls	r3, r3, #1
 8010322:	4413      	add	r3, r2
 8010324:	085a      	lsrs	r2, r3, #1
 8010326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010328:	69db      	ldr	r3, [r3, #28]
 801032a:	f003 0301 	and.w	r3, r3, #1
 801032e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010330:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010334:	6a1a      	ldr	r2, [r3, #32]
 8010336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010338:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801033c:	0a5b      	lsrs	r3, r3, #9
 801033e:	429a      	cmp	r2, r3
 8010340:	d201      	bcs.n	8010346 <find_volume+0x5b6>
 8010342:	230d      	movs	r3, #13
 8010344:	e070      	b.n	8010428 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010348:	f04f 32ff 	mov.w	r2, #4294967295
 801034c:	619a      	str	r2, [r3, #24]
 801034e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010350:	699a      	ldr	r2, [r3, #24]
 8010352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010354:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8010356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010358:	2280      	movs	r2, #128	; 0x80
 801035a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801035c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010360:	2b03      	cmp	r3, #3
 8010362:	d149      	bne.n	80103f8 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010366:	3338      	adds	r3, #56	; 0x38
 8010368:	3330      	adds	r3, #48	; 0x30
 801036a:	4618      	mov	r0, r3
 801036c:	f7fc fe58 	bl	800d020 <ld_word>
 8010370:	4603      	mov	r3, r0
 8010372:	2b01      	cmp	r3, #1
 8010374:	d140      	bne.n	80103f8 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010376:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010378:	3301      	adds	r3, #1
 801037a:	4619      	mov	r1, r3
 801037c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801037e:	f7fd fa63 	bl	800d848 <move_window>
 8010382:	4603      	mov	r3, r0
 8010384:	2b00      	cmp	r3, #0
 8010386:	d137      	bne.n	80103f8 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 8010388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801038a:	2200      	movs	r2, #0
 801038c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801038e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010390:	3338      	adds	r3, #56	; 0x38
 8010392:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010396:	4618      	mov	r0, r3
 8010398:	f7fc fe42 	bl	800d020 <ld_word>
 801039c:	4603      	mov	r3, r0
 801039e:	461a      	mov	r2, r3
 80103a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80103a4:	429a      	cmp	r2, r3
 80103a6:	d127      	bne.n	80103f8 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80103a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103aa:	3338      	adds	r3, #56	; 0x38
 80103ac:	4618      	mov	r0, r3
 80103ae:	f7fc fe4f 	bl	800d050 <ld_dword>
 80103b2:	4603      	mov	r3, r0
 80103b4:	4a1f      	ldr	r2, [pc, #124]	; (8010434 <find_volume+0x6a4>)
 80103b6:	4293      	cmp	r3, r2
 80103b8:	d11e      	bne.n	80103f8 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80103ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103bc:	3338      	adds	r3, #56	; 0x38
 80103be:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80103c2:	4618      	mov	r0, r3
 80103c4:	f7fc fe44 	bl	800d050 <ld_dword>
 80103c8:	4603      	mov	r3, r0
 80103ca:	4a1b      	ldr	r2, [pc, #108]	; (8010438 <find_volume+0x6a8>)
 80103cc:	4293      	cmp	r3, r2
 80103ce:	d113      	bne.n	80103f8 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80103d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103d2:	3338      	adds	r3, #56	; 0x38
 80103d4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80103d8:	4618      	mov	r0, r3
 80103da:	f7fc fe39 	bl	800d050 <ld_dword>
 80103de:	4602      	mov	r2, r0
 80103e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103e2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80103e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103e6:	3338      	adds	r3, #56	; 0x38
 80103e8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80103ec:	4618      	mov	r0, r3
 80103ee:	f7fc fe2f 	bl	800d050 <ld_dword>
 80103f2:	4602      	mov	r2, r0
 80103f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103f6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80103f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103fa:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80103fe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010400:	4b0e      	ldr	r3, [pc, #56]	; (801043c <find_volume+0x6ac>)
 8010402:	881b      	ldrh	r3, [r3, #0]
 8010404:	3301      	adds	r3, #1
 8010406:	b29a      	uxth	r2, r3
 8010408:	4b0c      	ldr	r3, [pc, #48]	; (801043c <find_volume+0x6ac>)
 801040a:	801a      	strh	r2, [r3, #0]
 801040c:	4b0b      	ldr	r3, [pc, #44]	; (801043c <find_volume+0x6ac>)
 801040e:	881a      	ldrh	r2, [r3, #0]
 8010410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010412:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8010414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010416:	4a0a      	ldr	r2, [pc, #40]	; (8010440 <find_volume+0x6b0>)
 8010418:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 801041a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801041c:	4a09      	ldr	r2, [pc, #36]	; (8010444 <find_volume+0x6b4>)
 801041e:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010420:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010422:	f7fd f9a9 	bl	800d778 <clear_lock>
#endif
	return FR_OK;
 8010426:	2300      	movs	r3, #0
}
 8010428:	4618      	mov	r0, r3
 801042a:	3770      	adds	r7, #112	; 0x70
 801042c:	46bd      	mov	sp, r7
 801042e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010432:	bf00      	nop
 8010434:	41615252 	.word	0x41615252
 8010438:	61417272 	.word	0x61417272
 801043c:	20001e68 	.word	0x20001e68
 8010440:	200020ec 	.word	0x200020ec
 8010444:	20001e8c 	.word	0x20001e8c

08010448 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b084      	sub	sp, #16
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010452:	2309      	movs	r3, #9
 8010454:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d01c      	beq.n	8010496 <validate+0x4e>
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d018      	beq.n	8010496 <validate+0x4e>
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	781b      	ldrb	r3, [r3, #0]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d013      	beq.n	8010496 <validate+0x4e>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	889a      	ldrh	r2, [r3, #4]
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	88db      	ldrh	r3, [r3, #6]
 8010478:	429a      	cmp	r2, r3
 801047a:	d10c      	bne.n	8010496 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	785b      	ldrb	r3, [r3, #1]
 8010482:	4618      	mov	r0, r3
 8010484:	f7fc fd2e 	bl	800cee4 <disk_status>
 8010488:	4603      	mov	r3, r0
 801048a:	f003 0301 	and.w	r3, r3, #1
 801048e:	2b00      	cmp	r3, #0
 8010490:	d101      	bne.n	8010496 <validate+0x4e>
			res = FR_OK;
 8010492:	2300      	movs	r3, #0
 8010494:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010496:	7bfb      	ldrb	r3, [r7, #15]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d102      	bne.n	80104a2 <validate+0x5a>
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	e000      	b.n	80104a4 <validate+0x5c>
 80104a2:	2300      	movs	r3, #0
 80104a4:	683a      	ldr	r2, [r7, #0]
 80104a6:	6013      	str	r3, [r2, #0]
	return res;
 80104a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3710      	adds	r7, #16
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}
	...

080104b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b088      	sub	sp, #32
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	60f8      	str	r0, [r7, #12]
 80104bc:	60b9      	str	r1, [r7, #8]
 80104be:	4613      	mov	r3, r2
 80104c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80104c2:	68bb      	ldr	r3, [r7, #8]
 80104c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80104c6:	f107 0310 	add.w	r3, r7, #16
 80104ca:	4618      	mov	r0, r3
 80104cc:	f7ff fbb7 	bl	800fc3e <get_ldnumber>
 80104d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80104d2:	69fb      	ldr	r3, [r7, #28]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	da01      	bge.n	80104dc <f_mount+0x28>
 80104d8:	230b      	movs	r3, #11
 80104da:	e02b      	b.n	8010534 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80104dc:	4a17      	ldr	r2, [pc, #92]	; (801053c <f_mount+0x88>)
 80104de:	69fb      	ldr	r3, [r7, #28]
 80104e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80104e6:	69bb      	ldr	r3, [r7, #24]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d005      	beq.n	80104f8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80104ec:	69b8      	ldr	r0, [r7, #24]
 80104ee:	f7fd f943 	bl	800d778 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80104f2:	69bb      	ldr	r3, [r7, #24]
 80104f4:	2200      	movs	r2, #0
 80104f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d002      	beq.n	8010504 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	2200      	movs	r2, #0
 8010502:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010504:	68fa      	ldr	r2, [r7, #12]
 8010506:	490d      	ldr	r1, [pc, #52]	; (801053c <f_mount+0x88>)
 8010508:	69fb      	ldr	r3, [r7, #28]
 801050a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d002      	beq.n	801051a <f_mount+0x66>
 8010514:	79fb      	ldrb	r3, [r7, #7]
 8010516:	2b01      	cmp	r3, #1
 8010518:	d001      	beq.n	801051e <f_mount+0x6a>
 801051a:	2300      	movs	r3, #0
 801051c:	e00a      	b.n	8010534 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801051e:	f107 010c 	add.w	r1, r7, #12
 8010522:	f107 0308 	add.w	r3, r7, #8
 8010526:	2200      	movs	r2, #0
 8010528:	4618      	mov	r0, r3
 801052a:	f7ff fc31 	bl	800fd90 <find_volume>
 801052e:	4603      	mov	r3, r0
 8010530:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010532:	7dfb      	ldrb	r3, [r7, #23]
}
 8010534:	4618      	mov	r0, r3
 8010536:	3720      	adds	r7, #32
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}
 801053c:	20001e58 	.word	0x20001e58

08010540 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010544:	b0a6      	sub	sp, #152	; 0x98
 8010546:	af00      	add	r7, sp, #0
 8010548:	61f8      	str	r0, [r7, #28]
 801054a:	61b9      	str	r1, [r7, #24]
 801054c:	4613      	mov	r3, r2
 801054e:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010550:	69fb      	ldr	r3, [r7, #28]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d101      	bne.n	801055a <f_open+0x1a>
 8010556:	2309      	movs	r3, #9
 8010558:	e2ae      	b.n	8010ab8 <f_open+0x578>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801055a:	7dfb      	ldrb	r3, [r7, #23]
 801055c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010560:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 8010562:	7dfa      	ldrb	r2, [r7, #23]
 8010564:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8010568:	f107 0318 	add.w	r3, r7, #24
 801056c:	4618      	mov	r0, r3
 801056e:	f7ff fc0f 	bl	800fd90 <find_volume>
 8010572:	4603      	mov	r3, r0
 8010574:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (res == FR_OK) {
 8010578:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801057c:	2b00      	cmp	r3, #0
 801057e:	f040 8292 	bne.w	8010aa6 <f_open+0x566>
		dj.obj.fs = fs;
 8010582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010584:	62bb      	str	r3, [r7, #40]	; 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010586:	69ba      	ldr	r2, [r7, #24]
 8010588:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801058c:	4611      	mov	r1, r2
 801058e:	4618      	mov	r0, r3
 8010590:	f7ff faac 	bl	800faec <follow_path>
 8010594:	4603      	mov	r3, r0
 8010596:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801059a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d11a      	bne.n	80105d8 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80105a2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80105a6:	b25b      	sxtb	r3, r3
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	da03      	bge.n	80105b4 <f_open+0x74>
				res = FR_INVALID_NAME;
 80105ac:	2306      	movs	r3, #6
 80105ae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80105b2:	e011      	b.n	80105d8 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80105b4:	7dfb      	ldrb	r3, [r7, #23]
 80105b6:	f023 0301 	bic.w	r3, r3, #1
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	bf14      	ite	ne
 80105be:	2301      	movne	r3, #1
 80105c0:	2300      	moveq	r3, #0
 80105c2:	b2db      	uxtb	r3, r3
 80105c4:	461a      	mov	r2, r3
 80105c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80105ca:	4611      	mov	r1, r2
 80105cc:	4618      	mov	r0, r3
 80105ce:	f7fc ff8b 	bl	800d4e8 <chk_lock>
 80105d2:	4603      	mov	r3, r0
 80105d4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80105d8:	7dfb      	ldrb	r3, [r7, #23]
 80105da:	f003 031c 	and.w	r3, r3, #28
 80105de:	2b00      	cmp	r3, #0
 80105e0:	f000 8115 	beq.w	801080e <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 80105e4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d017      	beq.n	801061c <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80105ec:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80105f0:	2b04      	cmp	r3, #4
 80105f2:	d10e      	bne.n	8010612 <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80105f4:	f7fc ffd4 	bl	800d5a0 <enq_lock>
 80105f8:	4603      	mov	r3, r0
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d006      	beq.n	801060c <f_open+0xcc>
 80105fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010602:	4618      	mov	r0, r3
 8010604:	f7fe ff14 	bl	800f430 <dir_register>
 8010608:	4603      	mov	r3, r0
 801060a:	e000      	b.n	801060e <f_open+0xce>
 801060c:	2312      	movs	r3, #18
 801060e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010612:	7dfb      	ldrb	r3, [r7, #23]
 8010614:	f043 0308 	orr.w	r3, r3, #8
 8010618:	75fb      	strb	r3, [r7, #23]
 801061a:	e011      	b.n	8010640 <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801061c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010620:	f003 0311 	and.w	r3, r3, #17
 8010624:	2b00      	cmp	r3, #0
 8010626:	d003      	beq.n	8010630 <f_open+0xf0>
					res = FR_DENIED;
 8010628:	2307      	movs	r3, #7
 801062a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801062e:	e007      	b.n	8010640 <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010630:	7dfb      	ldrb	r3, [r7, #23]
 8010632:	f003 0304 	and.w	r3, r3, #4
 8010636:	2b00      	cmp	r3, #0
 8010638:	d002      	beq.n	8010640 <f_open+0x100>
 801063a:	2308      	movs	r3, #8
 801063c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010640:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010644:	2b00      	cmp	r3, #0
 8010646:	f040 80fe 	bne.w	8010846 <f_open+0x306>
 801064a:	7dfb      	ldrb	r3, [r7, #23]
 801064c:	f003 0308 	and.w	r3, r3, #8
 8010650:	2b00      	cmp	r3, #0
 8010652:	f000 80f8 	beq.w	8010846 <f_open+0x306>
				dw = GET_FATTIME();
 8010656:	f7f9 fe47 	bl	800a2e8 <get_fattime>
 801065a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 801065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010660:	781b      	ldrb	r3, [r3, #0]
 8010662:	2b04      	cmp	r3, #4
 8010664:	f040 8084 	bne.w	8010770 <f_open+0x230>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8010668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801066a:	69fb      	ldr	r3, [r7, #28]
 801066c:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 801066e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010670:	691b      	ldr	r3, [r3, #16]
 8010672:	3334      	adds	r3, #52	; 0x34
 8010674:	4618      	mov	r0, r3
 8010676:	f7fc fceb 	bl	800d050 <ld_dword>
 801067a:	4602      	mov	r2, r0
 801067c:	69fb      	ldr	r3, [r7, #28]
 801067e:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8010680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010682:	691b      	ldr	r3, [r3, #16]
 8010684:	3338      	adds	r3, #56	; 0x38
 8010686:	4618      	mov	r0, r3
 8010688:	f7fc fd05 	bl	800d096 <ld_qword>
 801068c:	4602      	mov	r2, r0
 801068e:	460b      	mov	r3, r1
 8010690:	69f9      	ldr	r1, [r7, #28]
 8010692:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8010696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010698:	691b      	ldr	r3, [r3, #16]
 801069a:	3321      	adds	r3, #33	; 0x21
 801069c:	781b      	ldrb	r3, [r3, #0]
 801069e:	f003 0302 	and.w	r3, r3, #2
 80106a2:	b2da      	uxtb	r2, r3
 80106a4:	69fb      	ldr	r3, [r7, #28]
 80106a6:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 80106a8:	69fb      	ldr	r3, [r7, #28]
 80106aa:	2200      	movs	r2, #0
 80106ac:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 80106ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b0:	691b      	ldr	r3, [r3, #16]
 80106b2:	3308      	adds	r3, #8
 80106b4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80106b8:	4618      	mov	r0, r3
 80106ba:	f7fc fde2 	bl	800d282 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 80106be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c0:	691b      	ldr	r3, [r3, #16]
 80106c2:	3314      	adds	r3, #20
 80106c4:	2200      	movs	r2, #0
 80106c6:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 80106c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ca:	691b      	ldr	r3, [r3, #16]
 80106cc:	330c      	adds	r3, #12
 80106ce:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80106d2:	4618      	mov	r0, r3
 80106d4:	f7fc fdd5 	bl	800d282 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 80106d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106da:	691b      	ldr	r3, [r3, #16]
 80106dc:	3315      	adds	r3, #21
 80106de:	2200      	movs	r2, #0
 80106e0:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 80106e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e4:	691b      	ldr	r3, [r3, #16]
 80106e6:	3304      	adds	r3, #4
 80106e8:	2220      	movs	r2, #32
 80106ea:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 80106ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ee:	691b      	ldr	r3, [r3, #16]
 80106f0:	3334      	adds	r3, #52	; 0x34
 80106f2:	2100      	movs	r1, #0
 80106f4:	4618      	mov	r0, r3
 80106f6:	f7fc fdc4 	bl	800d282 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 80106fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106fc:	691b      	ldr	r3, [r3, #16]
 80106fe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010702:	f04f 0200 	mov.w	r2, #0
 8010706:	f04f 0300 	mov.w	r3, #0
 801070a:	4608      	mov	r0, r1
 801070c:	f7fc fde5 	bl	800d2da <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8010710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010712:	691b      	ldr	r3, [r3, #16]
 8010714:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8010718:	f04f 0200 	mov.w	r2, #0
 801071c:	f04f 0300 	mov.w	r3, #0
 8010720:	4608      	mov	r0, r1
 8010722:	f7fc fdda 	bl	800d2da <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8010726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010728:	691b      	ldr	r3, [r3, #16]
 801072a:	3321      	adds	r3, #33	; 0x21
 801072c:	2201      	movs	r2, #1
 801072e:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8010730:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010734:	4618      	mov	r0, r3
 8010736:	f7fe fbc9 	bl	800eecc <store_xdir>
 801073a:	4603      	mov	r3, r0
 801073c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8010740:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010744:	2b00      	cmp	r3, #0
 8010746:	d17e      	bne.n	8010846 <f_open+0x306>
 8010748:	69fb      	ldr	r3, [r7, #28]
 801074a:	689b      	ldr	r3, [r3, #8]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d07a      	beq.n	8010846 <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8010750:	69f8      	ldr	r0, [r7, #28]
 8010752:	69fb      	ldr	r3, [r7, #28]
 8010754:	689b      	ldr	r3, [r3, #8]
 8010756:	2200      	movs	r2, #0
 8010758:	4619      	mov	r1, r3
 801075a:	f7fd fc81 	bl	800e060 <remove_chain>
 801075e:	4603      	mov	r3, r0
 8010760:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8010764:	69fb      	ldr	r3, [r7, #28]
 8010766:	689a      	ldr	r2, [r3, #8]
 8010768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801076a:	3a01      	subs	r2, #1
 801076c:	615a      	str	r2, [r3, #20]
 801076e:	e06a      	b.n	8010846 <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010772:	330e      	adds	r3, #14
 8010774:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8010778:	4618      	mov	r0, r3
 801077a:	f7fc fd82 	bl	800d282 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801077e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010780:	3316      	adds	r3, #22
 8010782:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8010786:	4618      	mov	r0, r3
 8010788:	f7fc fd7b 	bl	800d282 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801078c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801078e:	330b      	adds	r3, #11
 8010790:	2220      	movs	r2, #32
 8010792:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010796:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010798:	4611      	mov	r1, r2
 801079a:	4618      	mov	r0, r3
 801079c:	f7fe f810 	bl	800e7c0 <ld_clust>
 80107a0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80107a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80107a8:	2200      	movs	r2, #0
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7fe f827 	bl	800e7fe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80107b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107b2:	331c      	adds	r3, #28
 80107b4:	2100      	movs	r1, #0
 80107b6:	4618      	mov	r0, r3
 80107b8:	f7fc fd63 	bl	800d282 <st_dword>
					fs->wflag = 1;
 80107bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107be:	2201      	movs	r2, #1
 80107c0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80107c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d03d      	beq.n	8010846 <f_open+0x306>
						dw = fs->winsect;
 80107ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						res = remove_chain(&dj.obj, cl, 0);
 80107d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80107d6:	2200      	movs	r2, #0
 80107d8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80107dc:	4618      	mov	r0, r3
 80107de:	f7fd fc3f 	bl	800e060 <remove_chain>
 80107e2:	4603      	mov	r3, r0
 80107e4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						if (res == FR_OK) {
 80107e8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d12a      	bne.n	8010846 <f_open+0x306>
							res = move_window(fs, dw);
 80107f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80107f6:	4618      	mov	r0, r3
 80107f8:	f7fd f826 	bl	800d848 <move_window>
 80107fc:	4603      	mov	r3, r0
 80107fe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010804:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010808:	3a01      	subs	r2, #1
 801080a:	615a      	str	r2, [r3, #20]
 801080c:	e01b      	b.n	8010846 <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801080e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010812:	2b00      	cmp	r3, #0
 8010814:	d117      	bne.n	8010846 <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010816:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801081a:	f003 0310 	and.w	r3, r3, #16
 801081e:	2b00      	cmp	r3, #0
 8010820:	d003      	beq.n	801082a <f_open+0x2ea>
					res = FR_NO_FILE;
 8010822:	2304      	movs	r3, #4
 8010824:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010828:	e00d      	b.n	8010846 <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801082a:	7dfb      	ldrb	r3, [r7, #23]
 801082c:	f003 0302 	and.w	r3, r3, #2
 8010830:	2b00      	cmp	r3, #0
 8010832:	d008      	beq.n	8010846 <f_open+0x306>
 8010834:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010838:	f003 0301 	and.w	r3, r3, #1
 801083c:	2b00      	cmp	r3, #0
 801083e:	d002      	beq.n	8010846 <f_open+0x306>
						res = FR_DENIED;
 8010840:	2307      	movs	r3, #7
 8010842:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 8010846:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801084a:	2b00      	cmp	r3, #0
 801084c:	d128      	bne.n	80108a0 <f_open+0x360>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801084e:	7dfb      	ldrb	r3, [r7, #23]
 8010850:	f003 0308 	and.w	r3, r3, #8
 8010854:	2b00      	cmp	r3, #0
 8010856:	d003      	beq.n	8010860 <f_open+0x320>
				mode |= FA_MODIFIED;
 8010858:	7dfb      	ldrb	r3, [r7, #23]
 801085a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801085e:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010864:	69fb      	ldr	r3, [r7, #28]
 8010866:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8010868:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801086a:	69fb      	ldr	r3, [r7, #28]
 801086c:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801086e:	7dfb      	ldrb	r3, [r7, #23]
 8010870:	f023 0301 	bic.w	r3, r3, #1
 8010874:	2b00      	cmp	r3, #0
 8010876:	bf14      	ite	ne
 8010878:	2301      	movne	r3, #1
 801087a:	2300      	moveq	r3, #0
 801087c:	b2db      	uxtb	r3, r3
 801087e:	461a      	mov	r2, r3
 8010880:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010884:	4611      	mov	r1, r2
 8010886:	4618      	mov	r0, r3
 8010888:	f7fc feac 	bl	800d5e4 <inc_lock>
 801088c:	4602      	mov	r2, r0
 801088e:	69fb      	ldr	r3, [r7, #28]
 8010890:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010892:	69fb      	ldr	r3, [r7, #28]
 8010894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010896:	2b00      	cmp	r3, #0
 8010898:	d102      	bne.n	80108a0 <f_open+0x360>
 801089a:	2302      	movs	r3, #2
 801089c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 80108a0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	f040 80fe 	bne.w	8010aa6 <f_open+0x566>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80108aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ac:	781b      	ldrb	r3, [r3, #0]
 80108ae:	2b04      	cmp	r3, #4
 80108b0:	d12d      	bne.n	801090e <f_open+0x3ce>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80108b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108b4:	69fb      	ldr	r3, [r7, #28]
 80108b6:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80108b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80108bc:	4613      	mov	r3, r2
 80108be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80108c2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80108c6:	431a      	orrs	r2, r3
 80108c8:	69fb      	ldr	r3, [r7, #28]
 80108ca:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80108cc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80108ce:	69fb      	ldr	r3, [r7, #28]
 80108d0:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80108d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108d4:	691b      	ldr	r3, [r3, #16]
 80108d6:	3334      	adds	r3, #52	; 0x34
 80108d8:	4618      	mov	r0, r3
 80108da:	f7fc fbb9 	bl	800d050 <ld_dword>
 80108de:	4602      	mov	r2, r0
 80108e0:	69fb      	ldr	r3, [r7, #28]
 80108e2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80108e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e6:	691b      	ldr	r3, [r3, #16]
 80108e8:	3338      	adds	r3, #56	; 0x38
 80108ea:	4618      	mov	r0, r3
 80108ec:	f7fc fbd3 	bl	800d096 <ld_qword>
 80108f0:	4602      	mov	r2, r0
 80108f2:	460b      	mov	r3, r1
 80108f4:	69f9      	ldr	r1, [r7, #28]
 80108f6:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80108fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108fc:	691b      	ldr	r3, [r3, #16]
 80108fe:	3321      	adds	r3, #33	; 0x21
 8010900:	781b      	ldrb	r3, [r3, #0]
 8010902:	f003 0302 	and.w	r3, r3, #2
 8010906:	b2da      	uxtb	r2, r3
 8010908:	69fb      	ldr	r3, [r7, #28]
 801090a:	71da      	strb	r2, [r3, #7]
 801090c:	e016      	b.n	801093c <f_open+0x3fc>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010910:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010912:	4611      	mov	r1, r2
 8010914:	4618      	mov	r0, r3
 8010916:	f7fd ff53 	bl	800e7c0 <ld_clust>
 801091a:	4602      	mov	r2, r0
 801091c:	69fb      	ldr	r3, [r7, #28]
 801091e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010922:	331c      	adds	r3, #28
 8010924:	4618      	mov	r0, r3
 8010926:	f7fc fb93 	bl	800d050 <ld_dword>
 801092a:	4603      	mov	r3, r0
 801092c:	2200      	movs	r2, #0
 801092e:	60bb      	str	r3, [r7, #8]
 8010930:	60fa      	str	r2, [r7, #12]
 8010932:	69fb      	ldr	r3, [r7, #28]
 8010934:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010938:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801093c:	69fb      	ldr	r3, [r7, #28]
 801093e:	2200      	movs	r2, #0
 8010940:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010944:	69fb      	ldr	r3, [r7, #28]
 8010946:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094a:	88da      	ldrh	r2, [r3, #6]
 801094c:	69fb      	ldr	r3, [r7, #28]
 801094e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010950:	69fb      	ldr	r3, [r7, #28]
 8010952:	7dfa      	ldrb	r2, [r7, #23]
 8010954:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 8010958:	69fb      	ldr	r3, [r7, #28]
 801095a:	2200      	movs	r2, #0
 801095c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8010960:	69fb      	ldr	r3, [r7, #28]
 8010962:	2200      	movs	r2, #0
 8010964:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010966:	69f9      	ldr	r1, [r7, #28]
 8010968:	f04f 0200 	mov.w	r2, #0
 801096c:	f04f 0300 	mov.w	r3, #0
 8010970:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010974:	69fb      	ldr	r3, [r7, #28]
 8010976:	3354      	adds	r3, #84	; 0x54
 8010978:	f44f 7200 	mov.w	r2, #512	; 0x200
 801097c:	2100      	movs	r1, #0
 801097e:	4618      	mov	r0, r3
 8010980:	f7fc fd54 	bl	800d42c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010984:	7dfb      	ldrb	r3, [r7, #23]
 8010986:	f003 0320 	and.w	r3, r3, #32
 801098a:	2b00      	cmp	r3, #0
 801098c:	f000 808b 	beq.w	8010aa6 <f_open+0x566>
 8010990:	69fb      	ldr	r3, [r7, #28]
 8010992:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010996:	4313      	orrs	r3, r2
 8010998:	f000 8085 	beq.w	8010aa6 <f_open+0x566>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801099c:	69fb      	ldr	r3, [r7, #28]
 801099e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80109a2:	69f9      	ldr	r1, [r7, #28]
 80109a4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80109a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109aa:	895b      	ldrh	r3, [r3, #10]
 80109ac:	025b      	lsls	r3, r3, #9
 80109ae:	67fb      	str	r3, [r7, #124]	; 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80109b0:	69fb      	ldr	r3, [r7, #28]
 80109b2:	689b      	ldr	r3, [r3, #8]
 80109b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80109b8:	69fb      	ldr	r3, [r7, #28]
 80109ba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80109be:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 80109c2:	e026      	b.n	8010a12 <f_open+0x4d2>
					clst = get_fat(&fp->obj, clst);
 80109c4:	69fb      	ldr	r3, [r7, #28]
 80109c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80109ca:	4618      	mov	r0, r3
 80109cc:	f7fc fff8 	bl	800d9c0 <get_fat>
 80109d0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
					if (clst <= 1) res = FR_INT_ERR;
 80109d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80109d8:	2b01      	cmp	r3, #1
 80109da:	d802      	bhi.n	80109e2 <f_open+0x4a2>
 80109dc:	2302      	movs	r3, #2
 80109de:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80109e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80109e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109ea:	d102      	bne.n	80109f2 <f_open+0x4b2>
 80109ec:	2301      	movs	r3, #1
 80109ee:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80109f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80109f4:	2200      	movs	r2, #0
 80109f6:	469a      	mov	sl, r3
 80109f8:	4693      	mov	fp, r2
 80109fa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80109fe:	ebb2 010a 	subs.w	r1, r2, sl
 8010a02:	6039      	str	r1, [r7, #0]
 8010a04:	eb63 030b 	sbc.w	r3, r3, fp
 8010a08:	607b      	str	r3, [r7, #4]
 8010a0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a0e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8010a12:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d109      	bne.n	8010a2e <f_open+0x4ee>
 8010a1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	4698      	mov	r8, r3
 8010a20:	4691      	mov	r9, r2
 8010a22:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010a26:	4590      	cmp	r8, r2
 8010a28:	eb79 0303 	sbcs.w	r3, r9, r3
 8010a2c:	d3ca      	bcc.n	80109c4 <f_open+0x484>
				}
				fp->clust = clst;
 8010a2e:	69fb      	ldr	r3, [r7, #28]
 8010a30:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010a34:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010a36:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d133      	bne.n	8010aa6 <f_open+0x566>
 8010a3e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010a42:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8010a46:	2500      	movs	r5, #0
 8010a48:	ea54 0305 	orrs.w	r3, r4, r5
 8010a4c:	d02b      	beq.n	8010aa6 <f_open+0x566>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a50:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010a54:	4618      	mov	r0, r3
 8010a56:	f7fc ff93 	bl	800d980 <clust2sect>
 8010a5a:	67b8      	str	r0, [r7, #120]	; 0x78
 8010a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d103      	bne.n	8010a6a <f_open+0x52a>
						res = FR_INT_ERR;
 8010a62:	2302      	movs	r3, #2
 8010a64:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010a68:	e01d      	b.n	8010aa6 <f_open+0x566>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010a6a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8010a6e:	f04f 0200 	mov.w	r2, #0
 8010a72:	f04f 0300 	mov.w	r3, #0
 8010a76:	0a42      	lsrs	r2, r0, #9
 8010a78:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8010a7c:	0a4b      	lsrs	r3, r1, #9
 8010a7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010a80:	441a      	add	r2, r3
 8010a82:	69fb      	ldr	r3, [r7, #28]
 8010a84:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a88:	7858      	ldrb	r0, [r3, #1]
 8010a8a:	69fb      	ldr	r3, [r7, #28]
 8010a8c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010a90:	69fb      	ldr	r3, [r7, #28]
 8010a92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a94:	2301      	movs	r3, #1
 8010a96:	f7fc fa65 	bl	800cf64 <disk_read>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d002      	beq.n	8010aa6 <f_open+0x566>
 8010aa0:	2301      	movs	r3, #1
 8010aa2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010aa6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d002      	beq.n	8010ab4 <f_open+0x574>
 8010aae:	69fb      	ldr	r3, [r7, #28]
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010ab4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8010ab8:	4618      	mov	r0, r3
 8010aba:	3798      	adds	r7, #152	; 0x98
 8010abc:	46bd      	mov	sp, r7
 8010abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010ac2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010ac2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010ac6:	b08c      	sub	sp, #48	; 0x30
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	60f8      	str	r0, [r7, #12]
 8010acc:	60b9      	str	r1, [r7, #8]
 8010ace:	607a      	str	r2, [r7, #4]
 8010ad0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010ad2:	68bb      	ldr	r3, [r7, #8]
 8010ad4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	2200      	movs	r2, #0
 8010ada:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	f107 0210 	add.w	r2, r7, #16
 8010ae2:	4611      	mov	r1, r2
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7ff fcaf 	bl	8010448 <validate>
 8010aea:	4603      	mov	r3, r0
 8010aec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010af0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d108      	bne.n	8010b0a <f_write+0x48>
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010afe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010b02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d002      	beq.n	8010b10 <f_write+0x4e>
 8010b0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b0e:	e187      	b.n	8010e20 <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010b16:	f003 0302 	and.w	r3, r3, #2
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d101      	bne.n	8010b22 <f_write+0x60>
 8010b1e:	2307      	movs	r3, #7
 8010b20:	e17e      	b.n	8010e20 <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010b22:	693b      	ldr	r3, [r7, #16]
 8010b24:	781b      	ldrb	r3, [r3, #0]
 8010b26:	2b04      	cmp	r3, #4
 8010b28:	f000 816a 	beq.w	8010e00 <f_write+0x33e>
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	18d1      	adds	r1, r2, r3
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010b3c:	4613      	mov	r3, r2
 8010b3e:	4299      	cmp	r1, r3
 8010b40:	f080 815e 	bcs.w	8010e00 <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010b4a:	4613      	mov	r3, r2
 8010b4c:	43db      	mvns	r3, r3
 8010b4e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010b50:	e156      	b.n	8010e00 <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010b58:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8010b5c:	2500      	movs	r5, #0
 8010b5e:	ea54 0305 	orrs.w	r3, r4, r5
 8010b62:	f040 80fb 	bne.w	8010d5c <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010b6c:	f04f 0200 	mov.w	r2, #0
 8010b70:	f04f 0300 	mov.w	r3, #0
 8010b74:	0a42      	lsrs	r2, r0, #9
 8010b76:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8010b7a:	0a4b      	lsrs	r3, r1, #9
 8010b7c:	693b      	ldr	r3, [r7, #16]
 8010b7e:	895b      	ldrh	r3, [r3, #10]
 8010b80:	3b01      	subs	r3, #1
 8010b82:	4013      	ands	r3, r2
 8010b84:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010b86:	69bb      	ldr	r3, [r7, #24]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d146      	bne.n	8010c1a <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010b92:	4313      	orrs	r3, r2
 8010b94:	d10c      	bne.n	8010bb0 <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	689b      	ldr	r3, [r3, #8]
 8010b9a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d11a      	bne.n	8010bd8 <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	2100      	movs	r1, #0
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f7fd fb0e 	bl	800e1c8 <create_chain>
 8010bac:	62b8      	str	r0, [r7, #40]	; 0x28
 8010bae:	e013      	b.n	8010bd8 <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d007      	beq.n	8010bc8 <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010bbe:	68f8      	ldr	r0, [r7, #12]
 8010bc0:	f7fd fc03 	bl	800e3ca <clmt_clust>
 8010bc4:	62b8      	str	r0, [r7, #40]	; 0x28
 8010bc6:	e007      	b.n	8010bd8 <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010bc8:	68fa      	ldr	r2, [r7, #12]
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bce:	4619      	mov	r1, r3
 8010bd0:	4610      	mov	r0, r2
 8010bd2:	f7fd faf9 	bl	800e1c8 <create_chain>
 8010bd6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	f000 8115 	beq.w	8010e0a <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be2:	2b01      	cmp	r3, #1
 8010be4:	d105      	bne.n	8010bf2 <f_write+0x130>
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	2202      	movs	r2, #2
 8010bea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010bee:	2302      	movs	r3, #2
 8010bf0:	e116      	b.n	8010e20 <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bf8:	d105      	bne.n	8010c06 <f_write+0x144>
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	2201      	movs	r2, #1
 8010bfe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010c02:	2301      	movs	r3, #1
 8010c04:	e10c      	b.n	8010e20 <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c0a:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	689b      	ldr	r3, [r3, #8]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d102      	bne.n	8010c1a <f_write+0x158>
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c18:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c20:	b25b      	sxtb	r3, r3
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	da1b      	bge.n	8010c5e <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010c26:	693b      	ldr	r3, [r7, #16]
 8010c28:	7858      	ldrb	r0, [r3, #1]
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010c34:	2301      	movs	r3, #1
 8010c36:	f7fc f9b5 	bl	800cfa4 <disk_write>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d005      	beq.n	8010c4c <f_write+0x18a>
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	2201      	movs	r2, #1
 8010c44:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010c48:	2301      	movs	r3, #1
 8010c4a:	e0e9      	b.n	8010e20 <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c56:	b2da      	uxtb	r2, r3
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010c5e:	693a      	ldr	r2, [r7, #16]
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c64:	4619      	mov	r1, r3
 8010c66:	4610      	mov	r0, r2
 8010c68:	f7fc fe8a 	bl	800d980 <clust2sect>
 8010c6c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010c6e:	697b      	ldr	r3, [r7, #20]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d105      	bne.n	8010c80 <f_write+0x1be>
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	2202      	movs	r2, #2
 8010c78:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010c7c:	2302      	movs	r3, #2
 8010c7e:	e0cf      	b.n	8010e20 <f_write+0x35e>
			sect += csect;
 8010c80:	697a      	ldr	r2, [r7, #20]
 8010c82:	69bb      	ldr	r3, [r7, #24]
 8010c84:	4413      	add	r3, r2
 8010c86:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	0a5b      	lsrs	r3, r3, #9
 8010c8c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010c8e:	6a3b      	ldr	r3, [r7, #32]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d03f      	beq.n	8010d14 <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010c94:	69ba      	ldr	r2, [r7, #24]
 8010c96:	6a3b      	ldr	r3, [r7, #32]
 8010c98:	4413      	add	r3, r2
 8010c9a:	693a      	ldr	r2, [r7, #16]
 8010c9c:	8952      	ldrh	r2, [r2, #10]
 8010c9e:	4293      	cmp	r3, r2
 8010ca0:	d905      	bls.n	8010cae <f_write+0x1ec>
					cc = fs->csize - csect;
 8010ca2:	693b      	ldr	r3, [r7, #16]
 8010ca4:	895b      	ldrh	r3, [r3, #10]
 8010ca6:	461a      	mov	r2, r3
 8010ca8:	69bb      	ldr	r3, [r7, #24]
 8010caa:	1ad3      	subs	r3, r2, r3
 8010cac:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	7858      	ldrb	r0, [r3, #1]
 8010cb2:	6a3b      	ldr	r3, [r7, #32]
 8010cb4:	697a      	ldr	r2, [r7, #20]
 8010cb6:	69f9      	ldr	r1, [r7, #28]
 8010cb8:	f7fc f974 	bl	800cfa4 <disk_write>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d005      	beq.n	8010cce <f_write+0x20c>
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	2201      	movs	r2, #1
 8010cc6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010cca:	2301      	movs	r3, #1
 8010ccc:	e0a8      	b.n	8010e20 <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	1ad3      	subs	r3, r2, r3
 8010cd6:	6a3a      	ldr	r2, [r7, #32]
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	d917      	bls.n	8010d0c <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	1ad3      	subs	r3, r2, r3
 8010cea:	025b      	lsls	r3, r3, #9
 8010cec:	69fa      	ldr	r2, [r7, #28]
 8010cee:	4413      	add	r3, r2
 8010cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010cf4:	4619      	mov	r1, r3
 8010cf6:	f7fc fb78 	bl	800d3ea <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d04:	b2da      	uxtb	r2, r3
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010d0c:	6a3b      	ldr	r3, [r7, #32]
 8010d0e:	025b      	lsls	r3, r3, #9
 8010d10:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010d12:	e04a      	b.n	8010daa <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d18:	697a      	ldr	r2, [r7, #20]
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d01b      	beq.n	8010d56 <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010d2a:	4290      	cmp	r0, r2
 8010d2c:	eb71 0303 	sbcs.w	r3, r1, r3
 8010d30:	d211      	bcs.n	8010d56 <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010d32:	693b      	ldr	r3, [r7, #16]
 8010d34:	7858      	ldrb	r0, [r3, #1]
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010d3c:	2301      	movs	r3, #1
 8010d3e:	697a      	ldr	r2, [r7, #20]
 8010d40:	f7fc f910 	bl	800cf64 <disk_read>
 8010d44:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d005      	beq.n	8010d56 <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	2201      	movs	r2, #1
 8010d4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010d52:	2301      	movs	r3, #1
 8010d54:	e064      	b.n	8010e20 <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	697a      	ldr	r2, [r7, #20]
 8010d5a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010d62:	4613      	mov	r3, r2
 8010d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d68:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010d6c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	429a      	cmp	r2, r3
 8010d74:	d901      	bls.n	8010d7a <f_write+0x2b8>
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010d86:	4613      	mov	r3, r2
 8010d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d8c:	440b      	add	r3, r1
 8010d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d90:	69f9      	ldr	r1, [r7, #28]
 8010d92:	4618      	mov	r0, r3
 8010d94:	f7fc fb29 	bl	800d3ea <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010da2:	b2da      	uxtb	r2, r3
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010daa:	69fa      	ldr	r2, [r7, #28]
 8010dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dae:	4413      	add	r3, r2
 8010db0:	61fb      	str	r3, [r7, #28]
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010db8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010dba:	2000      	movs	r0, #0
 8010dbc:	4688      	mov	r8, r1
 8010dbe:	4681      	mov	r9, r0
 8010dc0:	eb12 0a08 	adds.w	sl, r2, r8
 8010dc4:	eb43 0b09 	adc.w	fp, r3, r9
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010dd4:	68f9      	ldr	r1, [r7, #12]
 8010dd6:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 8010dda:	4282      	cmp	r2, r0
 8010ddc:	eb73 0c01 	sbcs.w	ip, r3, r1
 8010de0:	d201      	bcs.n	8010de6 <f_write+0x324>
 8010de2:	4602      	mov	r2, r0
 8010de4:	460b      	mov	r3, r1
 8010de6:	68f9      	ldr	r1, [r7, #12]
 8010de8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	681a      	ldr	r2, [r3, #0]
 8010df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df2:	441a      	add	r2, r3
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	601a      	str	r2, [r3, #0]
 8010df8:	687a      	ldr	r2, [r7, #4]
 8010dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dfc:	1ad3      	subs	r3, r2, r3
 8010dfe:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f47f aea5 	bne.w	8010b52 <f_write+0x90>
 8010e08:	e000      	b.n	8010e0c <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010e0a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e16:	b2da      	uxtb	r2, r3
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8010e1e:	2300      	movs	r3, #0
}
 8010e20:	4618      	mov	r0, r3
 8010e22:	3730      	adds	r7, #48	; 0x30
 8010e24:	46bd      	mov	sp, r7
 8010e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010e2a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010e2a:	b580      	push	{r7, lr}
 8010e2c:	b09a      	sub	sp, #104	; 0x68
 8010e2e:	af00      	add	r7, sp, #0
 8010e30:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010e38:	4611      	mov	r1, r2
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f7ff fb04 	bl	8010448 <validate>
 8010e40:	4603      	mov	r3, r0
 8010e42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8010e46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	f040 8105 	bne.w	801105a <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	f000 80fd 	beq.w	801105a <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e66:	b25b      	sxtb	r3, r3
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	da17      	bge.n	8010e9c <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010e6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e6e:	7858      	ldrb	r0, [r3, #1]
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	f7fc f892 	bl	800cfa4 <disk_write>
 8010e80:	4603      	mov	r3, r0
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d001      	beq.n	8010e8a <f_sync+0x60>
 8010e86:	2301      	movs	r3, #1
 8010e88:	e0e9      	b.n	801105e <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e94:	b2da      	uxtb	r2, r3
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010e9c:	f7f9 fa24 	bl	800a2e8 <get_fattime>
 8010ea0:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8010ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010ea4:	781b      	ldrb	r3, [r3, #0]
 8010ea6:	2b04      	cmp	r3, #4
 8010ea8:	f040 808c 	bne.w	8010fc4 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f7fd f876 	bl	800dfa0 <fill_first_frag>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8010eba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d10a      	bne.n	8010ed8 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8010ecc:	4619      	mov	r1, r3
 8010ece:	f7fd f896 	bl	800dffe <fill_last_frag>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 8010ed8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	f040 80bc 	bne.w	801105a <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8010ee2:	687a      	ldr	r2, [r7, #4]
 8010ee4:	f107 0308 	add.w	r3, r7, #8
 8010ee8:	4611      	mov	r1, r2
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7fd ffb8 	bl	800ee60 <load_obj_dir>
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 8010ef6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	f040 80ad 	bne.w	801105a <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8010f00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f02:	691b      	ldr	r3, [r3, #16]
 8010f04:	3304      	adds	r3, #4
 8010f06:	781a      	ldrb	r2, [r3, #0]
 8010f08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f0a:	691b      	ldr	r3, [r3, #16]
 8010f0c:	3304      	adds	r3, #4
 8010f0e:	f042 0220 	orr.w	r2, r2, #32
 8010f12:	b2d2      	uxtb	r2, r2
 8010f14:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	79da      	ldrb	r2, [r3, #7]
 8010f1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f1c:	691b      	ldr	r3, [r3, #16]
 8010f1e:	3321      	adds	r3, #33	; 0x21
 8010f20:	f042 0201 	orr.w	r2, r2, #1
 8010f24:	b2d2      	uxtb	r2, r2
 8010f26:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8010f28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f2a:	691b      	ldr	r3, [r3, #16]
 8010f2c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	689b      	ldr	r3, [r3, #8]
 8010f34:	4619      	mov	r1, r3
 8010f36:	4610      	mov	r0, r2
 8010f38:	f7fc f9a3 	bl	800d282 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8010f3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f3e:	691b      	ldr	r3, [r3, #16]
 8010f40:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010f4a:	4608      	mov	r0, r1
 8010f4c:	f7fc f9c5 	bl	800d2da <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8010f50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f52:	691b      	ldr	r3, [r3, #16]
 8010f54:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010f5e:	4608      	mov	r0, r1
 8010f60:	f7fc f9bb 	bl	800d2da <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8010f64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f66:	691b      	ldr	r3, [r3, #16]
 8010f68:	330c      	adds	r3, #12
 8010f6a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f7fc f988 	bl	800d282 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8010f72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f74:	691b      	ldr	r3, [r3, #16]
 8010f76:	3315      	adds	r3, #21
 8010f78:	2200      	movs	r2, #0
 8010f7a:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8010f7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f7e:	691b      	ldr	r3, [r3, #16]
 8010f80:	3310      	adds	r3, #16
 8010f82:	2100      	movs	r1, #0
 8010f84:	4618      	mov	r0, r3
 8010f86:	f7fc f97c 	bl	800d282 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8010f8a:	f107 0308 	add.w	r3, r7, #8
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f7fd ff9c 	bl	800eecc <store_xdir>
 8010f94:	4603      	mov	r3, r0
 8010f96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8010f9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d15b      	bne.n	801105a <f_sync+0x230>
							res = sync_fs(fs);
 8010fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7fc fc7d 	bl	800d8a4 <sync_fs>
 8010faa:	4603      	mov	r3, r0
 8010fac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010fba:	b2da      	uxtb	r2, r3
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010fc2:	e04a      	b.n	801105a <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010fc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010fca:	4619      	mov	r1, r3
 8010fcc:	4610      	mov	r0, r2
 8010fce:	f7fc fc3b 	bl	800d848 <move_window>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8010fd8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d13c      	bne.n	801105a <f_sync+0x230>
					dir = fp->dir_ptr;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010fe8:	330b      	adds	r3, #11
 8010fea:	781a      	ldrb	r2, [r3, #0]
 8010fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010fee:	330b      	adds	r3, #11
 8010ff0:	f042 0220 	orr.w	r2, r2, #32
 8010ff4:	b2d2      	uxtb	r2, r2
 8010ff6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	6818      	ldr	r0, [r3, #0]
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	689b      	ldr	r3, [r3, #8]
 8011000:	461a      	mov	r2, r3
 8011002:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8011004:	f7fd fbfb 	bl	800e7fe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801100a:	f103 001c 	add.w	r0, r3, #28
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011014:	4613      	mov	r3, r2
 8011016:	4619      	mov	r1, r3
 8011018:	f7fc f933 	bl	800d282 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801101c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801101e:	3316      	adds	r3, #22
 8011020:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8011022:	4618      	mov	r0, r3
 8011024:	f7fc f92d 	bl	800d282 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801102a:	3312      	adds	r3, #18
 801102c:	2100      	movs	r1, #0
 801102e:	4618      	mov	r0, r3
 8011030:	f7fc f90c 	bl	800d24c <st_word>
					fs->wflag = 1;
 8011034:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011036:	2201      	movs	r2, #1
 8011038:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801103a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801103c:	4618      	mov	r0, r3
 801103e:	f7fc fc31 	bl	800d8a4 <sync_fs>
 8011042:	4603      	mov	r3, r0
 8011044:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801104e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011052:	b2da      	uxtb	r2, r3
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801105a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 801105e:	4618      	mov	r0, r3
 8011060:	3768      	adds	r7, #104	; 0x68
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}

08011066 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011066:	b580      	push	{r7, lr}
 8011068:	b084      	sub	sp, #16
 801106a:	af00      	add	r7, sp, #0
 801106c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f7ff fedb 	bl	8010e2a <f_sync>
 8011074:	4603      	mov	r3, r0
 8011076:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011078:	7bfb      	ldrb	r3, [r7, #15]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d118      	bne.n	80110b0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f107 0208 	add.w	r2, r7, #8
 8011084:	4611      	mov	r1, r2
 8011086:	4618      	mov	r0, r3
 8011088:	f7ff f9de 	bl	8010448 <validate>
 801108c:	4603      	mov	r3, r0
 801108e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011090:	7bfb      	ldrb	r3, [r7, #15]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d10c      	bne.n	80110b0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801109a:	4618      	mov	r0, r3
 801109c:	f7fc fb30 	bl	800d700 <dec_lock>
 80110a0:	4603      	mov	r3, r0
 80110a2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80110a4:	7bfb      	ldrb	r3, [r7, #15]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d102      	bne.n	80110b0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	2200      	movs	r2, #0
 80110ae:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80110b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	3710      	adds	r7, #16
 80110b6:	46bd      	mov	sp, r7
 80110b8:	bd80      	pop	{r7, pc}

080110ba <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80110ba:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80110be:	b0b6      	sub	sp, #216	; 0xd8
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80110c6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80110ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80110ce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80110d2:	4619      	mov	r1, r3
 80110d4:	4610      	mov	r0, r2
 80110d6:	f7ff f9b7 	bl	8010448 <validate>
 80110da:	4603      	mov	r3, r0
 80110dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	if (res == FR_OK) res = (FRESULT)fp->err;
 80110e0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d105      	bne.n	80110f4 <f_lseek+0x3a>
 80110e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80110f0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 80110f4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d111      	bne.n	8011120 <f_lseek+0x66>
 80110fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011100:	781b      	ldrb	r3, [r3, #0]
 8011102:	2b04      	cmp	r3, #4
 8011104:	d10c      	bne.n	8011120 <f_lseek+0x66>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8011106:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 801110a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011110:	f04f 32ff 	mov.w	r2, #4294967295
 8011114:	4619      	mov	r1, r3
 8011116:	f7fc ff72 	bl	800dffe <fill_last_frag>
 801111a:	4603      	mov	r3, r0
 801111c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011120:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8011124:	2b00      	cmp	r3, #0
 8011126:	d002      	beq.n	801112e <f_lseek+0x74>
 8011128:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 801112c:	e38c      	b.n	8011848 <f_lseek+0x78e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801112e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011134:	2b00      	cmp	r3, #0
 8011136:	f000 8141 	beq.w	80113bc <f_lseek+0x302>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801113a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801113e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011142:	bf08      	it	eq
 8011144:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8011148:	f040 8087 	bne.w	801125a <f_lseek+0x1a0>
			tbl = fp->cltbl;
 801114c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011152:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011156:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801115a:	1d1a      	adds	r2, r3, #4
 801115c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011166:	2302      	movs	r3, #2
 8011168:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			cl = fp->obj.sclust;		/* Origin of the chain */
 801116c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011170:	689b      	ldr	r3, [r3, #8]
 8011172:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			if (cl) {
 8011176:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801117a:	2b00      	cmp	r3, #0
 801117c:	d058      	beq.n	8011230 <f_lseek+0x176>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801117e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011186:	2300      	movs	r3, #0
 8011188:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801118c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011190:	3302      	adds	r3, #2
 8011192:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					do {
						pcl = cl; ncl++;
 8011196:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801119a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801119e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80111a2:	3301      	adds	r3, #1
 80111a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
						cl = get_fat(&fp->obj, cl);
 80111a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80111ac:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7fc fc05 	bl	800d9c0 <get_fat>
 80111b6:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80111ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80111be:	2b01      	cmp	r3, #1
 80111c0:	d806      	bhi.n	80111d0 <f_lseek+0x116>
 80111c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80111c6:	2202      	movs	r2, #2
 80111c8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80111cc:	2302      	movs	r3, #2
 80111ce:	e33b      	b.n	8011848 <f_lseek+0x78e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80111d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80111d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111d8:	d106      	bne.n	80111e8 <f_lseek+0x12e>
 80111da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80111de:	2201      	movs	r2, #1
 80111e0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80111e4:	2301      	movs	r3, #1
 80111e6:	e32f      	b.n	8011848 <f_lseek+0x78e>
					} while (cl == pcl + 1);
 80111e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80111ec:	3301      	adds	r3, #1
 80111ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d0cf      	beq.n	8011196 <f_lseek+0xdc>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80111f6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80111fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80111fe:	429a      	cmp	r2, r3
 8011200:	d80f      	bhi.n	8011222 <f_lseek+0x168>
						*tbl++ = ncl; *tbl++ = tcl;
 8011202:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011206:	1d1a      	adds	r2, r3, #4
 8011208:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801120c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011210:	601a      	str	r2, [r3, #0]
 8011212:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011216:	1d1a      	adds	r2, r3, #4
 8011218:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801121c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8011220:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011222:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011226:	69db      	ldr	r3, [r3, #28]
 8011228:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801122c:	429a      	cmp	r2, r3
 801122e:	d3a6      	bcc.n	801117e <f_lseek+0xc4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011230:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011236:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801123a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801123c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8011240:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011244:	429a      	cmp	r2, r3
 8011246:	d804      	bhi.n	8011252 <f_lseek+0x198>
				*tbl = 0;		/* Terminate table */
 8011248:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801124c:	2200      	movs	r2, #0
 801124e:	601a      	str	r2, [r3, #0]
 8011250:	e2f8      	b.n	8011844 <f_lseek+0x78a>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011252:	2311      	movs	r3, #17
 8011254:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8011258:	e2f4      	b.n	8011844 <f_lseek+0x78a>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801125a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801125e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8011262:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011266:	4290      	cmp	r0, r2
 8011268:	eb71 0303 	sbcs.w	r3, r1, r3
 801126c:	d205      	bcs.n	801127a <f_lseek+0x1c0>
 801126e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011272:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011276:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			fp->fptr = ofs;				/* Set file pointer */
 801127a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801127e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011282:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			if (ofs) {
 8011286:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801128a:	4313      	orrs	r3, r2
 801128c:	f000 82da 	beq.w	8011844 <f_lseek+0x78a>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011290:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011294:	f112 3aff 	adds.w	sl, r2, #4294967295
 8011298:	f143 3bff 	adc.w	fp, r3, #4294967295
 801129c:	4652      	mov	r2, sl
 801129e:	465b      	mov	r3, fp
 80112a0:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80112a4:	f7fd f891 	bl	800e3ca <clmt_clust>
 80112a8:	4602      	mov	r2, r0
 80112aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80112ae:	641a      	str	r2, [r3, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 80112b0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80112b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80112b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112ba:	4619      	mov	r1, r3
 80112bc:	4610      	mov	r0, r2
 80112be:	f7fc fb5f 	bl	800d980 <clust2sect>
 80112c2:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80112c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d106      	bne.n	80112dc <f_lseek+0x222>
 80112ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80112d2:	2202      	movs	r2, #2
 80112d4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80112d8:	2302      	movs	r3, #2
 80112da:	e2b5      	b.n	8011848 <f_lseek+0x78e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80112dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80112e0:	1e54      	subs	r4, r2, #1
 80112e2:	f143 35ff 	adc.w	r5, r3, #4294967295
 80112e6:	f04f 0200 	mov.w	r2, #0
 80112ea:	f04f 0300 	mov.w	r3, #0
 80112ee:	0a62      	lsrs	r2, r4, #9
 80112f0:	ea42 52c5 	orr.w	r2, r2, r5, lsl #23
 80112f4:	0a6b      	lsrs	r3, r5, #9
 80112f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80112fa:	895b      	ldrh	r3, [r3, #10]
 80112fc:	3b01      	subs	r3, #1
 80112fe:	4013      	ands	r3, r2
 8011300:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011304:	4413      	add	r3, r2
 8011306:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801130a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801130e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011312:	f3c2 0808 	ubfx	r8, r2, #0, #9
 8011316:	f04f 0900 	mov.w	r9, #0
 801131a:	ea58 0309 	orrs.w	r3, r8, r9
 801131e:	f000 8291 	beq.w	8011844 <f_lseek+0x78a>
 8011322:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011328:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801132c:	429a      	cmp	r2, r3
 801132e:	f000 8289 	beq.w	8011844 <f_lseek+0x78a>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011332:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011336:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801133a:	b25b      	sxtb	r3, r3
 801133c:	2b00      	cmp	r3, #0
 801133e:	da21      	bge.n	8011384 <f_lseek+0x2ca>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011344:	7858      	ldrb	r0, [r3, #1]
 8011346:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801134a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801134e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011352:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011354:	2301      	movs	r3, #1
 8011356:	f7fb fe25 	bl	800cfa4 <disk_write>
 801135a:	4603      	mov	r3, r0
 801135c:	2b00      	cmp	r3, #0
 801135e:	d006      	beq.n	801136e <f_lseek+0x2b4>
 8011360:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011364:	2201      	movs	r2, #1
 8011366:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801136a:	2301      	movs	r3, #1
 801136c:	e26c      	b.n	8011848 <f_lseek+0x78e>
						fp->flag &= (BYTE)~FA_DIRTY;
 801136e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011372:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801137a:	b2da      	uxtb	r2, r3
 801137c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011380:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011384:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011388:	7858      	ldrb	r0, [r3, #1]
 801138a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801138e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8011392:	2301      	movs	r3, #1
 8011394:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011398:	f7fb fde4 	bl	800cf64 <disk_read>
 801139c:	4603      	mov	r3, r0
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d006      	beq.n	80113b0 <f_lseek+0x2f6>
 80113a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80113a6:	2201      	movs	r2, #1
 80113a8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80113ac:	2301      	movs	r3, #1
 80113ae:	e24b      	b.n	8011848 <f_lseek+0x78e>
#endif
					fp->sect = dsc;
 80113b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80113b4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80113b8:	645a      	str	r2, [r3, #68]	; 0x44
 80113ba:	e243      	b.n	8011844 <f_lseek+0x78a>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 80113bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80113c0:	781b      	ldrb	r3, [r3, #0]
 80113c2:	2b04      	cmp	r3, #4
 80113c4:	d009      	beq.n	80113da <f_lseek+0x320>
 80113c6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80113ca:	2b01      	cmp	r3, #1
 80113cc:	d305      	bcc.n	80113da <f_lseek+0x320>
 80113ce:	f04f 32ff 	mov.w	r2, #4294967295
 80113d2:	f04f 0300 	mov.w	r3, #0
 80113d6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80113da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80113de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80113e2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80113e6:	4290      	cmp	r0, r2
 80113e8:	eb71 0303 	sbcs.w	r3, r1, r3
 80113ec:	d20d      	bcs.n	801140a <f_lseek+0x350>
 80113ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80113f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80113f6:	f003 0302 	and.w	r3, r3, #2
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d105      	bne.n	801140a <f_lseek+0x350>
			ofs = fp->obj.objsize;
 80113fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011402:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011406:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		}
		ifptr = fp->fptr;
 801140a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801140e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011412:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
		fp->fptr = nsect = 0;
 8011416:	2300      	movs	r3, #0
 8011418:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801141c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8011420:	f04f 0200 	mov.w	r2, #0
 8011424:	f04f 0300 	mov.w	r3, #0
 8011428:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if (ofs) {
 801142c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011430:	4313      	orrs	r3, r2
 8011432:	f000 818f 	beq.w	8011754 <f_lseek+0x69a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011436:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801143a:	895b      	ldrh	r3, [r3, #10]
 801143c:	025b      	lsls	r3, r3, #9
 801143e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			if (ifptr > 0 &&
 8011442:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8011446:	4313      	orrs	r3, r2
 8011448:	d06b      	beq.n	8011522 <f_lseek+0x468>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801144a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801144e:	1e51      	subs	r1, r2, #1
 8011450:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8011454:	f143 33ff 	adc.w	r3, r3, #4294967295
 8011458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801145c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011460:	2200      	movs	r2, #0
 8011462:	67bb      	str	r3, [r7, #120]	; 0x78
 8011464:	67fa      	str	r2, [r7, #124]	; 0x7c
 8011466:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 801146a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801146e:	f7ee ff17 	bl	80002a0 <__aeabi_uldivmod>
 8011472:	4602      	mov	r2, r0
 8011474:	460b      	mov	r3, r1
 8011476:	4614      	mov	r4, r2
 8011478:	461d      	mov	r5, r3
 801147a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 801147e:	1e51      	subs	r1, r2, #1
 8011480:	6739      	str	r1, [r7, #112]	; 0x70
 8011482:	f143 33ff 	adc.w	r3, r3, #4294967295
 8011486:	677b      	str	r3, [r7, #116]	; 0x74
 8011488:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801148c:	2200      	movs	r2, #0
 801148e:	66bb      	str	r3, [r7, #104]	; 0x68
 8011490:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011492:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8011496:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801149a:	f7ee ff01 	bl	80002a0 <__aeabi_uldivmod>
 801149e:	4602      	mov	r2, r0
 80114a0:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 80114a2:	4294      	cmp	r4, r2
 80114a4:	eb75 0303 	sbcs.w	r3, r5, r3
 80114a8:	d33b      	bcc.n	8011522 <f_lseek+0x468>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80114aa:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80114ae:	1e51      	subs	r1, r2, #1
 80114b0:	6639      	str	r1, [r7, #96]	; 0x60
 80114b2:	f143 33ff 	adc.w	r3, r3, #4294967295
 80114b6:	667b      	str	r3, [r7, #100]	; 0x64
 80114b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80114bc:	3b01      	subs	r3, #1
 80114be:	2200      	movs	r2, #0
 80114c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80114c2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80114c4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80114c8:	460b      	mov	r3, r1
 80114ca:	43db      	mvns	r3, r3
 80114cc:	653b      	str	r3, [r7, #80]	; 0x50
 80114ce:	4613      	mov	r3, r2
 80114d0:	43db      	mvns	r3, r3
 80114d2:	657b      	str	r3, [r7, #84]	; 0x54
 80114d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80114d8:	4623      	mov	r3, r4
 80114da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80114de:	4602      	mov	r2, r0
 80114e0:	4013      	ands	r3, r2
 80114e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80114e4:	462b      	mov	r3, r5
 80114e6:	460a      	mov	r2, r1
 80114e8:	4013      	ands	r3, r2
 80114ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80114ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80114f0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80114f4:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				ofs -= fp->fptr;
 80114f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80114fc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8011500:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011504:	1a14      	subs	r4, r2, r0
 8011506:	60bc      	str	r4, [r7, #8]
 8011508:	eb63 0301 	sbc.w	r3, r3, r1
 801150c:	60fb      	str	r3, [r7, #12]
 801150e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8011512:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				clst = fp->clust;
 8011516:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801151c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011520:	e031      	b.n	8011586 <f_lseek+0x4cc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011522:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011526:	689b      	ldr	r3, [r3, #8]
 8011528:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801152c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011530:	2b00      	cmp	r3, #0
 8011532:	d123      	bne.n	801157c <f_lseek+0x4c2>
					clst = create_chain(&fp->obj, 0);
 8011534:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011538:	2100      	movs	r1, #0
 801153a:	4618      	mov	r0, r3
 801153c:	f7fc fe44 	bl	800e1c8 <create_chain>
 8011540:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011544:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011548:	2b01      	cmp	r3, #1
 801154a:	d106      	bne.n	801155a <f_lseek+0x4a0>
 801154c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011550:	2202      	movs	r2, #2
 8011552:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011556:	2302      	movs	r3, #2
 8011558:	e176      	b.n	8011848 <f_lseek+0x78e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801155a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801155e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011562:	d106      	bne.n	8011572 <f_lseek+0x4b8>
 8011564:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011568:	2201      	movs	r2, #1
 801156a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801156e:	2301      	movs	r3, #1
 8011570:	e16a      	b.n	8011848 <f_lseek+0x78e>
					fp->obj.sclust = clst;
 8011572:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011576:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801157a:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 801157c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011580:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011584:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (clst != 0) {
 8011586:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801158a:	2b00      	cmp	r3, #0
 801158c:	f000 80e2 	beq.w	8011754 <f_lseek+0x69a>
				while (ofs > bcs) {						/* Cluster following loop */
 8011590:	e090      	b.n	80116b4 <f_lseek+0x5fa>
					ofs -= bcs; fp->fptr += bcs;
 8011592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011596:	2200      	movs	r2, #0
 8011598:	643b      	str	r3, [r7, #64]	; 0x40
 801159a:	647a      	str	r2, [r7, #68]	; 0x44
 801159c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80115a0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80115a4:	4621      	mov	r1, r4
 80115a6:	1a51      	subs	r1, r2, r1
 80115a8:	6039      	str	r1, [r7, #0]
 80115aa:	4629      	mov	r1, r5
 80115ac:	eb63 0301 	sbc.w	r3, r3, r1
 80115b0:	607b      	str	r3, [r7, #4]
 80115b2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80115b6:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
 80115ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80115be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80115c2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80115c6:	2000      	movs	r0, #0
 80115c8:	63b9      	str	r1, [r7, #56]	; 0x38
 80115ca:	63f8      	str	r0, [r7, #60]	; 0x3c
 80115cc:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80115d0:	4621      	mov	r1, r4
 80115d2:	1851      	adds	r1, r2, r1
 80115d4:	6339      	str	r1, [r7, #48]	; 0x30
 80115d6:	4629      	mov	r1, r5
 80115d8:	414b      	adcs	r3, r1
 80115da:	637b      	str	r3, [r7, #52]	; 0x34
 80115dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80115e0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80115e4:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80115e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80115ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80115f0:	f003 0302 	and.w	r3, r3, #2
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d031      	beq.n	801165c <f_lseek+0x5a2>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 80115f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80115fc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8011600:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011604:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011608:	4282      	cmp	r2, r0
 801160a:	418b      	sbcs	r3, r1
 801160c:	d212      	bcs.n	8011634 <f_lseek+0x57a>
							fp->obj.objsize = fp->fptr;
 801160e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011612:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8011616:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801161a:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 801161e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011622:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801162a:	b2db      	uxtb	r3, r3
 801162c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011630:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011634:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011638:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 801163c:	4618      	mov	r0, r3
 801163e:	f7fc fdc3 	bl	800e1c8 <create_chain>
 8011642:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011646:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801164a:	2b00      	cmp	r3, #0
 801164c:	d10f      	bne.n	801166e <f_lseek+0x5b4>
							ofs = 0; break;
 801164e:	f04f 0200 	mov.w	r2, #0
 8011652:	f04f 0300 	mov.w	r3, #0
 8011656:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 801165a:	e03b      	b.n	80116d4 <f_lseek+0x61a>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801165c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011660:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8011664:	4618      	mov	r0, r3
 8011666:	f7fc f9ab 	bl	800d9c0 <get_fat>
 801166a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801166e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011676:	d106      	bne.n	8011686 <f_lseek+0x5cc>
 8011678:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801167c:	2201      	movs	r2, #1
 801167e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011682:	2301      	movs	r3, #1
 8011684:	e0e0      	b.n	8011848 <f_lseek+0x78e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011686:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801168a:	2b01      	cmp	r3, #1
 801168c:	d906      	bls.n	801169c <f_lseek+0x5e2>
 801168e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011692:	69da      	ldr	r2, [r3, #28]
 8011694:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011698:	4293      	cmp	r3, r2
 801169a:	d306      	bcc.n	80116aa <f_lseek+0x5f0>
 801169c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80116a0:	2202      	movs	r2, #2
 80116a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80116a6:	2302      	movs	r3, #2
 80116a8:	e0ce      	b.n	8011848 <f_lseek+0x78e>
					fp->clust = clst;
 80116aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80116ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80116b2:	6413      	str	r3, [r2, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 80116b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80116b8:	2200      	movs	r2, #0
 80116ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80116bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80116be:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80116c2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80116c6:	4621      	mov	r1, r4
 80116c8:	4291      	cmp	r1, r2
 80116ca:	4629      	mov	r1, r5
 80116cc:	eb71 0303 	sbcs.w	r3, r1, r3
 80116d0:	f4ff af5f 	bcc.w	8011592 <f_lseek+0x4d8>
				}
				fp->fptr += ofs;
 80116d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80116d8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80116dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80116e0:	1884      	adds	r4, r0, r2
 80116e2:	623c      	str	r4, [r7, #32]
 80116e4:	eb41 0303 	adc.w	r3, r1, r3
 80116e8:	627b      	str	r3, [r7, #36]	; 0x24
 80116ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80116ee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80116f2:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				if (ofs % SS(fs)) {
 80116f6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80116fa:	f3c2 0308 	ubfx	r3, r2, #0, #9
 80116fe:	61bb      	str	r3, [r7, #24]
 8011700:	2300      	movs	r3, #0
 8011702:	61fb      	str	r3, [r7, #28]
 8011704:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8011708:	460b      	mov	r3, r1
 801170a:	4313      	orrs	r3, r2
 801170c:	d022      	beq.n	8011754 <f_lseek+0x69a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801170e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011712:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8011716:	4618      	mov	r0, r3
 8011718:	f7fc f932 	bl	800d980 <clust2sect>
 801171c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011720:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011724:	2b00      	cmp	r3, #0
 8011726:	d106      	bne.n	8011736 <f_lseek+0x67c>
 8011728:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801172c:	2202      	movs	r2, #2
 801172e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011732:	2302      	movs	r3, #2
 8011734:	e088      	b.n	8011848 <f_lseek+0x78e>
					nsect += (DWORD)(ofs / SS(fs));
 8011736:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 801173a:	f04f 0200 	mov.w	r2, #0
 801173e:	f04f 0300 	mov.w	r3, #0
 8011742:	0a42      	lsrs	r2, r0, #9
 8011744:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8011748:	0a4b      	lsrs	r3, r1, #9
 801174a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801174e:	4413      	add	r3, r2
 8011750:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011754:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011758:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801175c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8011760:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8011764:	4290      	cmp	r0, r2
 8011766:	eb71 0303 	sbcs.w	r3, r1, r3
 801176a:	d212      	bcs.n	8011792 <f_lseek+0x6d8>
			fp->obj.objsize = fp->fptr;
 801176c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011770:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011774:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8011778:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 801177c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011780:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011788:	b2da      	uxtb	r2, r3
 801178a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801178e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011792:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011796:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801179a:	f3c2 0308 	ubfx	r3, r2, #0, #9
 801179e:	613b      	str	r3, [r7, #16]
 80117a0:	2300      	movs	r3, #0
 80117a2:	617b      	str	r3, [r7, #20]
 80117a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80117a8:	460b      	mov	r3, r1
 80117aa:	4313      	orrs	r3, r2
 80117ac:	d04a      	beq.n	8011844 <f_lseek+0x78a>
 80117ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80117b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117b4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80117b8:	429a      	cmp	r2, r3
 80117ba:	d043      	beq.n	8011844 <f_lseek+0x78a>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80117bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80117c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80117c4:	b25b      	sxtb	r3, r3
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	da21      	bge.n	801180e <f_lseek+0x754>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80117ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80117ce:	7858      	ldrb	r0, [r3, #1]
 80117d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80117d4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80117d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80117dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80117de:	2301      	movs	r3, #1
 80117e0:	f7fb fbe0 	bl	800cfa4 <disk_write>
 80117e4:	4603      	mov	r3, r0
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d006      	beq.n	80117f8 <f_lseek+0x73e>
 80117ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80117ee:	2201      	movs	r2, #1
 80117f0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80117f4:	2301      	movs	r3, #1
 80117f6:	e027      	b.n	8011848 <f_lseek+0x78e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80117f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80117fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011804:	b2da      	uxtb	r2, r3
 8011806:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801180a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801180e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011812:	7858      	ldrb	r0, [r3, #1]
 8011814:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011818:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801181c:	2301      	movs	r3, #1
 801181e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8011822:	f7fb fb9f 	bl	800cf64 <disk_read>
 8011826:	4603      	mov	r3, r0
 8011828:	2b00      	cmp	r3, #0
 801182a:	d006      	beq.n	801183a <f_lseek+0x780>
 801182c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011830:	2201      	movs	r2, #1
 8011832:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011836:	2301      	movs	r3, #1
 8011838:	e006      	b.n	8011848 <f_lseek+0x78e>
#endif
			fp->sect = nsect;
 801183a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801183e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8011842:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 8011844:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8011848:	4618      	mov	r0, r3
 801184a:	37d8      	adds	r7, #216	; 0xd8
 801184c:	46bd      	mov	sp, r7
 801184e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011852 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8011852:	b580      	push	{r7, lr}
 8011854:	b09a      	sub	sp, #104	; 0x68
 8011856:	af00      	add	r7, sp, #0
 8011858:	60f8      	str	r0, [r7, #12]
 801185a:	60b9      	str	r1, [r7, #8]
 801185c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801185e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8011862:	f107 030c 	add.w	r3, r7, #12
 8011866:	2200      	movs	r2, #0
 8011868:	4618      	mov	r0, r3
 801186a:	f7fe fa91 	bl	800fd90 <find_volume>
 801186e:	4603      	mov	r3, r0
 8011870:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8011874:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011878:	2b00      	cmp	r3, #0
 801187a:	f040 80e6 	bne.w	8011a4a <f_getfree+0x1f8>
		*fatfs = fs;				/* Return ptr to the fs object */
 801187e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8011884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011886:	699a      	ldr	r2, [r3, #24]
 8011888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801188a:	69db      	ldr	r3, [r3, #28]
 801188c:	3b02      	subs	r3, #2
 801188e:	429a      	cmp	r2, r3
 8011890:	d804      	bhi.n	801189c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8011892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011894:	699a      	ldr	r2, [r3, #24]
 8011896:	68bb      	ldr	r3, [r7, #8]
 8011898:	601a      	str	r2, [r3, #0]
 801189a:	e0d6      	b.n	8011a4a <f_getfree+0x1f8>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 801189c:	2300      	movs	r3, #0
 801189e:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80118a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118a2:	781b      	ldrb	r3, [r3, #0]
 80118a4:	2b01      	cmp	r3, #1
 80118a6:	d128      	bne.n	80118fa <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80118a8:	2302      	movs	r3, #2
 80118aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80118ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118ae:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 80118b0:	f107 0310 	add.w	r3, r7, #16
 80118b4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80118b6:	4618      	mov	r0, r3
 80118b8:	f7fc f882 	bl	800d9c0 <get_fat>
 80118bc:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80118be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118c4:	d103      	bne.n	80118ce <f_getfree+0x7c>
 80118c6:	2301      	movs	r3, #1
 80118c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80118cc:	e0b0      	b.n	8011a30 <f_getfree+0x1de>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80118ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118d0:	2b01      	cmp	r3, #1
 80118d2:	d103      	bne.n	80118dc <f_getfree+0x8a>
 80118d4:	2302      	movs	r3, #2
 80118d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80118da:	e0a9      	b.n	8011a30 <f_getfree+0x1de>
					if (stat == 0) nfree++;
 80118dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d102      	bne.n	80118e8 <f_getfree+0x96>
 80118e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80118e4:	3301      	adds	r3, #1
 80118e6:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 80118e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118ea:	3301      	adds	r3, #1
 80118ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80118ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118f0:	69db      	ldr	r3, [r3, #28]
 80118f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80118f4:	429a      	cmp	r2, r3
 80118f6:	d3db      	bcc.n	80118b0 <f_getfree+0x5e>
 80118f8:	e09a      	b.n	8011a30 <f_getfree+0x1de>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 80118fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118fc:	781b      	ldrb	r3, [r3, #0]
 80118fe:	2b04      	cmp	r3, #4
 8011900:	d146      	bne.n	8011990 <f_getfree+0x13e>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 8011902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011904:	69db      	ldr	r3, [r3, #28]
 8011906:	3b02      	subs	r3, #2
 8011908:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 801190a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801190e:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 8011910:	2300      	movs	r3, #0
 8011912:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 8011914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011916:	2b00      	cmp	r3, #0
 8011918:	d10d      	bne.n	8011936 <f_getfree+0xe4>
 801191a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801191c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801191e:	1c5a      	adds	r2, r3, #1
 8011920:	65ba      	str	r2, [r7, #88]	; 0x58
 8011922:	4619      	mov	r1, r3
 8011924:	f7fb ff90 	bl	800d848 <move_window>
 8011928:	4603      	mov	r3, r0
 801192a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801192e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011932:	2b00      	cmp	r3, #0
 8011934:	d179      	bne.n	8011a2a <f_getfree+0x1d8>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 8011936:	2308      	movs	r3, #8
 8011938:	64bb      	str	r3, [r7, #72]	; 0x48
 801193a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801193c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801193e:	4413      	add	r3, r2
 8011940:	3338      	adds	r3, #56	; 0x38
 8011942:	781b      	ldrb	r3, [r3, #0]
 8011944:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8011948:	e013      	b.n	8011972 <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 801194a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801194e:	f003 0301 	and.w	r3, r3, #1
 8011952:	2b00      	cmp	r3, #0
 8011954:	d102      	bne.n	801195c <f_getfree+0x10a>
 8011956:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011958:	3301      	adds	r3, #1
 801195a:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 801195c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011960:	085b      	lsrs	r3, r3, #1
 8011962:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 8011966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011968:	3b01      	subs	r3, #1
 801196a:	64bb      	str	r3, [r7, #72]	; 0x48
 801196c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801196e:	3b01      	subs	r3, #1
 8011970:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011974:	2b00      	cmp	r3, #0
 8011976:	d002      	beq.n	801197e <f_getfree+0x12c>
 8011978:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801197a:	2b00      	cmp	r3, #0
 801197c:	d1e5      	bne.n	801194a <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 801197e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011980:	3301      	adds	r3, #1
 8011982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011986:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 8011988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801198a:	2b00      	cmp	r3, #0
 801198c:	d1c2      	bne.n	8011914 <f_getfree+0xc2>
 801198e:	e04f      	b.n	8011a30 <f_getfree+0x1de>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8011990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011992:	69db      	ldr	r3, [r3, #28]
 8011994:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801199a:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 801199c:	2300      	movs	r3, #0
 801199e:	657b      	str	r3, [r7, #84]	; 0x54
 80119a0:	2300      	movs	r3, #0
 80119a2:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 80119a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d113      	bne.n	80119d2 <f_getfree+0x180>
							res = move_window(fs, sect++);
 80119aa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80119ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80119ae:	1c5a      	adds	r2, r3, #1
 80119b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80119b2:	4619      	mov	r1, r3
 80119b4:	f7fb ff48 	bl	800d848 <move_window>
 80119b8:	4603      	mov	r3, r0
 80119ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 80119be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d133      	bne.n	8011a2e <f_getfree+0x1dc>
							p = fs->win;
 80119c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119c8:	3338      	adds	r3, #56	; 0x38
 80119ca:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 80119cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80119d0:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 80119d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119d4:	781b      	ldrb	r3, [r3, #0]
 80119d6:	2b02      	cmp	r3, #2
 80119d8:	d10f      	bne.n	80119fa <f_getfree+0x1a8>
							if (ld_word(p) == 0) nfree++;
 80119da:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80119dc:	f7fb fb20 	bl	800d020 <ld_word>
 80119e0:	4603      	mov	r3, r0
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d102      	bne.n	80119ec <f_getfree+0x19a>
 80119e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80119e8:	3301      	adds	r3, #1
 80119ea:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 80119ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119ee:	3302      	adds	r3, #2
 80119f0:	653b      	str	r3, [r7, #80]	; 0x50
 80119f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119f4:	3b02      	subs	r3, #2
 80119f6:	657b      	str	r3, [r7, #84]	; 0x54
 80119f8:	e010      	b.n	8011a1c <f_getfree+0x1ca>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80119fa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80119fc:	f7fb fb28 	bl	800d050 <ld_dword>
 8011a00:	4603      	mov	r3, r0
 8011a02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d102      	bne.n	8011a10 <f_getfree+0x1be>
 8011a0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011a0c:	3301      	adds	r3, #1
 8011a0e:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 8011a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a12:	3304      	adds	r3, #4
 8011a14:	653b      	str	r3, [r7, #80]	; 0x50
 8011a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a18:	3b04      	subs	r3, #4
 8011a1a:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 8011a1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a1e:	3b01      	subs	r3, #1
 8011a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d1bd      	bne.n	80119a4 <f_getfree+0x152>
 8011a28:	e002      	b.n	8011a30 <f_getfree+0x1de>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 8011a2a:	bf00      	nop
 8011a2c:	e000      	b.n	8011a30 <f_getfree+0x1de>
							if (res != FR_OK) break;
 8011a2e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8011a30:	68bb      	ldr	r3, [r7, #8]
 8011a32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011a34:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8011a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011a3a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8011a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a3e:	791a      	ldrb	r2, [r3, #4]
 8011a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a42:	f042 0201 	orr.w	r2, r2, #1
 8011a46:	b2d2      	uxtb	r2, r2
 8011a48:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8011a4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3768      	adds	r7, #104	; 0x68
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}
	...

08011a58 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011a58:	b480      	push	{r7}
 8011a5a:	b087      	sub	sp, #28
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	60f8      	str	r0, [r7, #12]
 8011a60:	60b9      	str	r1, [r7, #8]
 8011a62:	4613      	mov	r3, r2
 8011a64:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011a66:	2301      	movs	r3, #1
 8011a68:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011a6e:	4b1f      	ldr	r3, [pc, #124]	; (8011aec <FATFS_LinkDriverEx+0x94>)
 8011a70:	7e1b      	ldrb	r3, [r3, #24]
 8011a72:	b2db      	uxtb	r3, r3
 8011a74:	2b03      	cmp	r3, #3
 8011a76:	d831      	bhi.n	8011adc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011a78:	4b1c      	ldr	r3, [pc, #112]	; (8011aec <FATFS_LinkDriverEx+0x94>)
 8011a7a:	7e1b      	ldrb	r3, [r3, #24]
 8011a7c:	b2db      	uxtb	r3, r3
 8011a7e:	461a      	mov	r2, r3
 8011a80:	4b1a      	ldr	r3, [pc, #104]	; (8011aec <FATFS_LinkDriverEx+0x94>)
 8011a82:	2100      	movs	r1, #0
 8011a84:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011a86:	4b19      	ldr	r3, [pc, #100]	; (8011aec <FATFS_LinkDriverEx+0x94>)
 8011a88:	7e1b      	ldrb	r3, [r3, #24]
 8011a8a:	b2db      	uxtb	r3, r3
 8011a8c:	4a17      	ldr	r2, [pc, #92]	; (8011aec <FATFS_LinkDriverEx+0x94>)
 8011a8e:	009b      	lsls	r3, r3, #2
 8011a90:	4413      	add	r3, r2
 8011a92:	68fa      	ldr	r2, [r7, #12]
 8011a94:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011a96:	4b15      	ldr	r3, [pc, #84]	; (8011aec <FATFS_LinkDriverEx+0x94>)
 8011a98:	7e1b      	ldrb	r3, [r3, #24]
 8011a9a:	b2db      	uxtb	r3, r3
 8011a9c:	461a      	mov	r2, r3
 8011a9e:	4b13      	ldr	r3, [pc, #76]	; (8011aec <FATFS_LinkDriverEx+0x94>)
 8011aa0:	4413      	add	r3, r2
 8011aa2:	79fa      	ldrb	r2, [r7, #7]
 8011aa4:	751a      	strb	r2, [r3, #20]
    DiskNum = disk.nbr++;
 8011aa6:	4b11      	ldr	r3, [pc, #68]	; (8011aec <FATFS_LinkDriverEx+0x94>)
 8011aa8:	7e1b      	ldrb	r3, [r3, #24]
 8011aaa:	b2db      	uxtb	r3, r3
 8011aac:	1c5a      	adds	r2, r3, #1
 8011aae:	b2d1      	uxtb	r1, r2
 8011ab0:	4a0e      	ldr	r2, [pc, #56]	; (8011aec <FATFS_LinkDriverEx+0x94>)
 8011ab2:	7611      	strb	r1, [r2, #24]
 8011ab4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011ab6:	7dbb      	ldrb	r3, [r7, #22]
 8011ab8:	3330      	adds	r3, #48	; 0x30
 8011aba:	b2da      	uxtb	r2, r3
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	3301      	adds	r3, #1
 8011ac4:	223a      	movs	r2, #58	; 0x3a
 8011ac6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	3302      	adds	r3, #2
 8011acc:	222f      	movs	r2, #47	; 0x2f
 8011ace:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	3303      	adds	r3, #3
 8011ad4:	2200      	movs	r2, #0
 8011ad6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011ad8:	2300      	movs	r3, #0
 8011ada:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ade:	4618      	mov	r0, r3
 8011ae0:	371c      	adds	r7, #28
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae8:	4770      	bx	lr
 8011aea:	bf00      	nop
 8011aec:	200022ec 	.word	0x200022ec

08011af0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b082      	sub	sp, #8
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011afa:	2200      	movs	r2, #0
 8011afc:	6839      	ldr	r1, [r7, #0]
 8011afe:	6878      	ldr	r0, [r7, #4]
 8011b00:	f7ff ffaa 	bl	8011a58 <FATFS_LinkDriverEx>
 8011b04:	4603      	mov	r3, r0
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3708      	adds	r7, #8
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}
	...

08011b10 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8011b10:	b480      	push	{r7}
 8011b12:	b085      	sub	sp, #20
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	4603      	mov	r3, r0
 8011b18:	6039      	str	r1, [r7, #0]
 8011b1a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011b1c:	88fb      	ldrh	r3, [r7, #6]
 8011b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8011b20:	d802      	bhi.n	8011b28 <ff_convert+0x18>
		c = chr;
 8011b22:	88fb      	ldrh	r3, [r7, #6]
 8011b24:	81fb      	strh	r3, [r7, #14]
 8011b26:	e025      	b.n	8011b74 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d00b      	beq.n	8011b46 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8011b2e:	88fb      	ldrh	r3, [r7, #6]
 8011b30:	2bff      	cmp	r3, #255	; 0xff
 8011b32:	d805      	bhi.n	8011b40 <ff_convert+0x30>
 8011b34:	88fb      	ldrh	r3, [r7, #6]
 8011b36:	3b80      	subs	r3, #128	; 0x80
 8011b38:	4a12      	ldr	r2, [pc, #72]	; (8011b84 <ff_convert+0x74>)
 8011b3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b3e:	e000      	b.n	8011b42 <ff_convert+0x32>
 8011b40:	2300      	movs	r3, #0
 8011b42:	81fb      	strh	r3, [r7, #14]
 8011b44:	e016      	b.n	8011b74 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8011b46:	2300      	movs	r3, #0
 8011b48:	81fb      	strh	r3, [r7, #14]
 8011b4a:	e009      	b.n	8011b60 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011b4c:	89fb      	ldrh	r3, [r7, #14]
 8011b4e:	4a0d      	ldr	r2, [pc, #52]	; (8011b84 <ff_convert+0x74>)
 8011b50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b54:	88fa      	ldrh	r2, [r7, #6]
 8011b56:	429a      	cmp	r2, r3
 8011b58:	d006      	beq.n	8011b68 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8011b5a:	89fb      	ldrh	r3, [r7, #14]
 8011b5c:	3301      	adds	r3, #1
 8011b5e:	81fb      	strh	r3, [r7, #14]
 8011b60:	89fb      	ldrh	r3, [r7, #14]
 8011b62:	2b7f      	cmp	r3, #127	; 0x7f
 8011b64:	d9f2      	bls.n	8011b4c <ff_convert+0x3c>
 8011b66:	e000      	b.n	8011b6a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011b68:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011b6a:	89fb      	ldrh	r3, [r7, #14]
 8011b6c:	3380      	adds	r3, #128	; 0x80
 8011b6e:	b29b      	uxth	r3, r3
 8011b70:	b2db      	uxtb	r3, r3
 8011b72:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011b74:	89fb      	ldrh	r3, [r7, #14]
}
 8011b76:	4618      	mov	r0, r3
 8011b78:	3714      	adds	r7, #20
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b80:	4770      	bx	lr
 8011b82:	bf00      	nop
 8011b84:	080177bc 	.word	0x080177bc

08011b88 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011b88:	b480      	push	{r7}
 8011b8a:	b087      	sub	sp, #28
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	4603      	mov	r3, r0
 8011b90:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8011b92:	88fb      	ldrh	r3, [r7, #6]
 8011b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011b98:	d201      	bcs.n	8011b9e <ff_wtoupper+0x16>
 8011b9a:	4b3e      	ldr	r3, [pc, #248]	; (8011c94 <ff_wtoupper+0x10c>)
 8011b9c:	e000      	b.n	8011ba0 <ff_wtoupper+0x18>
 8011b9e:	4b3e      	ldr	r3, [pc, #248]	; (8011c98 <ff_wtoupper+0x110>)
 8011ba0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8011ba2:	697b      	ldr	r3, [r7, #20]
 8011ba4:	1c9a      	adds	r2, r3, #2
 8011ba6:	617a      	str	r2, [r7, #20]
 8011ba8:	881b      	ldrh	r3, [r3, #0]
 8011baa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8011bac:	8a7b      	ldrh	r3, [r7, #18]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d068      	beq.n	8011c84 <ff_wtoupper+0xfc>
 8011bb2:	88fa      	ldrh	r2, [r7, #6]
 8011bb4:	8a7b      	ldrh	r3, [r7, #18]
 8011bb6:	429a      	cmp	r2, r3
 8011bb8:	d364      	bcc.n	8011c84 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8011bba:	697b      	ldr	r3, [r7, #20]
 8011bbc:	1c9a      	adds	r2, r3, #2
 8011bbe:	617a      	str	r2, [r7, #20]
 8011bc0:	881b      	ldrh	r3, [r3, #0]
 8011bc2:	823b      	strh	r3, [r7, #16]
 8011bc4:	8a3b      	ldrh	r3, [r7, #16]
 8011bc6:	0a1b      	lsrs	r3, r3, #8
 8011bc8:	81fb      	strh	r3, [r7, #14]
 8011bca:	8a3b      	ldrh	r3, [r7, #16]
 8011bcc:	b2db      	uxtb	r3, r3
 8011bce:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8011bd0:	88fa      	ldrh	r2, [r7, #6]
 8011bd2:	8a79      	ldrh	r1, [r7, #18]
 8011bd4:	8a3b      	ldrh	r3, [r7, #16]
 8011bd6:	440b      	add	r3, r1
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	da49      	bge.n	8011c70 <ff_wtoupper+0xe8>
			switch (cmd) {
 8011bdc:	89fb      	ldrh	r3, [r7, #14]
 8011bde:	2b08      	cmp	r3, #8
 8011be0:	d84f      	bhi.n	8011c82 <ff_wtoupper+0xfa>
 8011be2:	a201      	add	r2, pc, #4	; (adr r2, 8011be8 <ff_wtoupper+0x60>)
 8011be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011be8:	08011c0d 	.word	0x08011c0d
 8011bec:	08011c1f 	.word	0x08011c1f
 8011bf0:	08011c35 	.word	0x08011c35
 8011bf4:	08011c3d 	.word	0x08011c3d
 8011bf8:	08011c45 	.word	0x08011c45
 8011bfc:	08011c4d 	.word	0x08011c4d
 8011c00:	08011c55 	.word	0x08011c55
 8011c04:	08011c5d 	.word	0x08011c5d
 8011c08:	08011c65 	.word	0x08011c65
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8011c0c:	88fa      	ldrh	r2, [r7, #6]
 8011c0e:	8a7b      	ldrh	r3, [r7, #18]
 8011c10:	1ad3      	subs	r3, r2, r3
 8011c12:	005b      	lsls	r3, r3, #1
 8011c14:	697a      	ldr	r2, [r7, #20]
 8011c16:	4413      	add	r3, r2
 8011c18:	881b      	ldrh	r3, [r3, #0]
 8011c1a:	80fb      	strh	r3, [r7, #6]
 8011c1c:	e027      	b.n	8011c6e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8011c1e:	88fa      	ldrh	r2, [r7, #6]
 8011c20:	8a7b      	ldrh	r3, [r7, #18]
 8011c22:	1ad3      	subs	r3, r2, r3
 8011c24:	b29b      	uxth	r3, r3
 8011c26:	f003 0301 	and.w	r3, r3, #1
 8011c2a:	b29b      	uxth	r3, r3
 8011c2c:	88fa      	ldrh	r2, [r7, #6]
 8011c2e:	1ad3      	subs	r3, r2, r3
 8011c30:	80fb      	strh	r3, [r7, #6]
 8011c32:	e01c      	b.n	8011c6e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8011c34:	88fb      	ldrh	r3, [r7, #6]
 8011c36:	3b10      	subs	r3, #16
 8011c38:	80fb      	strh	r3, [r7, #6]
 8011c3a:	e018      	b.n	8011c6e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011c3c:	88fb      	ldrh	r3, [r7, #6]
 8011c3e:	3b20      	subs	r3, #32
 8011c40:	80fb      	strh	r3, [r7, #6]
 8011c42:	e014      	b.n	8011c6e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8011c44:	88fb      	ldrh	r3, [r7, #6]
 8011c46:	3b30      	subs	r3, #48	; 0x30
 8011c48:	80fb      	strh	r3, [r7, #6]
 8011c4a:	e010      	b.n	8011c6e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011c4c:	88fb      	ldrh	r3, [r7, #6]
 8011c4e:	3b1a      	subs	r3, #26
 8011c50:	80fb      	strh	r3, [r7, #6]
 8011c52:	e00c      	b.n	8011c6e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011c54:	88fb      	ldrh	r3, [r7, #6]
 8011c56:	3308      	adds	r3, #8
 8011c58:	80fb      	strh	r3, [r7, #6]
 8011c5a:	e008      	b.n	8011c6e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011c5c:	88fb      	ldrh	r3, [r7, #6]
 8011c5e:	3b50      	subs	r3, #80	; 0x50
 8011c60:	80fb      	strh	r3, [r7, #6]
 8011c62:	e004      	b.n	8011c6e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011c64:	88fb      	ldrh	r3, [r7, #6]
 8011c66:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8011c6a:	80fb      	strh	r3, [r7, #6]
 8011c6c:	bf00      	nop
			}
			break;
 8011c6e:	e008      	b.n	8011c82 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011c70:	89fb      	ldrh	r3, [r7, #14]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d195      	bne.n	8011ba2 <ff_wtoupper+0x1a>
 8011c76:	8a3b      	ldrh	r3, [r7, #16]
 8011c78:	005b      	lsls	r3, r3, #1
 8011c7a:	697a      	ldr	r2, [r7, #20]
 8011c7c:	4413      	add	r3, r2
 8011c7e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011c80:	e78f      	b.n	8011ba2 <ff_wtoupper+0x1a>
			break;
 8011c82:	bf00      	nop
	}

	return chr;
 8011c84:	88fb      	ldrh	r3, [r7, #6]
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	371c      	adds	r7, #28
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c90:	4770      	bx	lr
 8011c92:	bf00      	nop
 8011c94:	080178bc 	.word	0x080178bc
 8011c98:	08017ab0 	.word	0x08017ab0

08011c9c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011c9c:	b480      	push	{r7}
 8011c9e:	b085      	sub	sp, #20
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011cae:	2b84      	cmp	r3, #132	; 0x84
 8011cb0:	d005      	beq.n	8011cbe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011cb2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	4413      	add	r3, r2
 8011cba:	3303      	adds	r3, #3
 8011cbc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011cbe:	68fb      	ldr	r3, [r7, #12]
}
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	3714      	adds	r7, #20
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cca:	4770      	bx	lr

08011ccc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011ccc:	b480      	push	{r7}
 8011cce:	b083      	sub	sp, #12
 8011cd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011cd2:	f3ef 8305 	mrs	r3, IPSR
 8011cd6:	607b      	str	r3, [r7, #4]
  return(result);
 8011cd8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	bf14      	ite	ne
 8011cde:	2301      	movne	r3, #1
 8011ce0:	2300      	moveq	r3, #0
 8011ce2:	b2db      	uxtb	r3, r3
}
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	370c      	adds	r7, #12
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cee:	4770      	bx	lr

08011cf0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011cf4:	f001 f916 	bl	8012f24 <vTaskStartScheduler>
  
  return osOK;
 8011cf8:	2300      	movs	r3, #0
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	bd80      	pop	{r7, pc}

08011cfe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d00:	b089      	sub	sp, #36	; 0x24
 8011d02:	af04      	add	r7, sp, #16
 8011d04:	6078      	str	r0, [r7, #4]
 8011d06:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	695b      	ldr	r3, [r3, #20]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d020      	beq.n	8011d52 <osThreadCreate+0x54>
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	699b      	ldr	r3, [r3, #24]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d01c      	beq.n	8011d52 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	685c      	ldr	r4, [r3, #4]
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681d      	ldr	r5, [r3, #0]
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	691e      	ldr	r6, [r3, #16]
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f7ff ffb6 	bl	8011c9c <makeFreeRtosPriority>
 8011d30:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	695b      	ldr	r3, [r3, #20]
 8011d36:	687a      	ldr	r2, [r7, #4]
 8011d38:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011d3a:	9202      	str	r2, [sp, #8]
 8011d3c:	9301      	str	r3, [sp, #4]
 8011d3e:	9100      	str	r1, [sp, #0]
 8011d40:	683b      	ldr	r3, [r7, #0]
 8011d42:	4632      	mov	r2, r6
 8011d44:	4629      	mov	r1, r5
 8011d46:	4620      	mov	r0, r4
 8011d48:	f000 ff0e 	bl	8012b68 <xTaskCreateStatic>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	60fb      	str	r3, [r7, #12]
 8011d50:	e01c      	b.n	8011d8c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	685c      	ldr	r4, [r3, #4]
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011d5e:	b29e      	uxth	r6, r3
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011d66:	4618      	mov	r0, r3
 8011d68:	f7ff ff98 	bl	8011c9c <makeFreeRtosPriority>
 8011d6c:	4602      	mov	r2, r0
 8011d6e:	f107 030c 	add.w	r3, r7, #12
 8011d72:	9301      	str	r3, [sp, #4]
 8011d74:	9200      	str	r2, [sp, #0]
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	4632      	mov	r2, r6
 8011d7a:	4629      	mov	r1, r5
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	f000 ff50 	bl	8012c22 <xTaskCreate>
 8011d82:	4603      	mov	r3, r0
 8011d84:	2b01      	cmp	r3, #1
 8011d86:	d001      	beq.n	8011d8c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011d88:	2300      	movs	r3, #0
 8011d8a:	e000      	b.n	8011d8e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011d8c:	68fb      	ldr	r3, [r7, #12]
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	3714      	adds	r7, #20
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011d96 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011d96:	b580      	push	{r7, lr}
 8011d98:	b084      	sub	sp, #16
 8011d9a:	af00      	add	r7, sp, #0
 8011d9c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d001      	beq.n	8011dac <osDelay+0x16>
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	e000      	b.n	8011dae <osDelay+0x18>
 8011dac:	2301      	movs	r3, #1
 8011dae:	4618      	mov	r0, r3
 8011db0:	f001 f884 	bl	8012ebc <vTaskDelay>
  
  return osOK;
 8011db4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011db6:	4618      	mov	r0, r3
 8011db8:	3710      	adds	r7, #16
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}

08011dbe <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011dbe:	b590      	push	{r4, r7, lr}
 8011dc0:	b085      	sub	sp, #20
 8011dc2:	af02      	add	r7, sp, #8
 8011dc4:	6078      	str	r0, [r7, #4]
 8011dc6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	689b      	ldr	r3, [r3, #8]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d011      	beq.n	8011df4 <osMessageCreate+0x36>
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	68db      	ldr	r3, [r3, #12]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d00d      	beq.n	8011df4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	6818      	ldr	r0, [r3, #0]
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	6859      	ldr	r1, [r3, #4]
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	689a      	ldr	r2, [r3, #8]
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	68db      	ldr	r3, [r3, #12]
 8011de8:	2400      	movs	r4, #0
 8011dea:	9400      	str	r4, [sp, #0]
 8011dec:	f000 f9e0 	bl	80121b0 <xQueueGenericCreateStatic>
 8011df0:	4603      	mov	r3, r0
 8011df2:	e008      	b.n	8011e06 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	6818      	ldr	r0, [r3, #0]
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	685b      	ldr	r3, [r3, #4]
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	4619      	mov	r1, r3
 8011e00:	f000 fa4e 	bl	80122a0 <xQueueGenericCreate>
 8011e04:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8011e06:	4618      	mov	r0, r3
 8011e08:	370c      	adds	r7, #12
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	bd90      	pop	{r4, r7, pc}
	...

08011e10 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b086      	sub	sp, #24
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	60f8      	str	r0, [r7, #12]
 8011e18:	60b9      	str	r1, [r7, #8]
 8011e1a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8011e24:	697b      	ldr	r3, [r7, #20]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d101      	bne.n	8011e2e <osMessagePut+0x1e>
    ticks = 1;
 8011e2a:	2301      	movs	r3, #1
 8011e2c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8011e2e:	f7ff ff4d 	bl	8011ccc <inHandlerMode>
 8011e32:	4603      	mov	r3, r0
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d018      	beq.n	8011e6a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8011e38:	f107 0210 	add.w	r2, r7, #16
 8011e3c:	f107 0108 	add.w	r1, r7, #8
 8011e40:	2300      	movs	r3, #0
 8011e42:	68f8      	ldr	r0, [r7, #12]
 8011e44:	f000 fb84 	bl	8012550 <xQueueGenericSendFromISR>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	2b01      	cmp	r3, #1
 8011e4c:	d001      	beq.n	8011e52 <osMessagePut+0x42>
      return osErrorOS;
 8011e4e:	23ff      	movs	r3, #255	; 0xff
 8011e50:	e018      	b.n	8011e84 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011e52:	693b      	ldr	r3, [r7, #16]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d014      	beq.n	8011e82 <osMessagePut+0x72>
 8011e58:	4b0c      	ldr	r3, [pc, #48]	; (8011e8c <osMessagePut+0x7c>)
 8011e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e5e:	601a      	str	r2, [r3, #0]
 8011e60:	f3bf 8f4f 	dsb	sy
 8011e64:	f3bf 8f6f 	isb	sy
 8011e68:	e00b      	b.n	8011e82 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8011e6a:	f107 0108 	add.w	r1, r7, #8
 8011e6e:	2300      	movs	r3, #0
 8011e70:	697a      	ldr	r2, [r7, #20]
 8011e72:	68f8      	ldr	r0, [r7, #12]
 8011e74:	f000 fa6e 	bl	8012354 <xQueueGenericSend>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	2b01      	cmp	r3, #1
 8011e7c:	d001      	beq.n	8011e82 <osMessagePut+0x72>
      return osErrorOS;
 8011e7e:	23ff      	movs	r3, #255	; 0xff
 8011e80:	e000      	b.n	8011e84 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8011e82:	2300      	movs	r3, #0
}
 8011e84:	4618      	mov	r0, r3
 8011e86:	3718      	adds	r7, #24
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bd80      	pop	{r7, pc}
 8011e8c:	e000ed04 	.word	0xe000ed04

08011e90 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8011e90:	b590      	push	{r4, r7, lr}
 8011e92:	b08b      	sub	sp, #44	; 0x2c
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	60f8      	str	r0, [r7, #12]
 8011e98:	60b9      	str	r1, [r7, #8]
 8011e9a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8011e9c:	68bb      	ldr	r3, [r7, #8]
 8011e9e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8011ea4:	68bb      	ldr	r3, [r7, #8]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d10a      	bne.n	8011ec0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8011eaa:	2380      	movs	r3, #128	; 0x80
 8011eac:	617b      	str	r3, [r7, #20]
    return event;
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	461c      	mov	r4, r3
 8011eb2:	f107 0314 	add.w	r3, r7, #20
 8011eb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011eba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011ebe:	e054      	b.n	8011f6a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ece:	d103      	bne.n	8011ed8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8011ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8011ed6:	e009      	b.n	8011eec <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d006      	beq.n	8011eec <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8011ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d101      	bne.n	8011eec <osMessageGet+0x5c>
      ticks = 1;
 8011ee8:	2301      	movs	r3, #1
 8011eea:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8011eec:	f7ff feee 	bl	8011ccc <inHandlerMode>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d01c      	beq.n	8011f30 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8011ef6:	f107 0220 	add.w	r2, r7, #32
 8011efa:	f107 0314 	add.w	r3, r7, #20
 8011efe:	3304      	adds	r3, #4
 8011f00:	4619      	mov	r1, r3
 8011f02:	68b8      	ldr	r0, [r7, #8]
 8011f04:	f000 fca0 	bl	8012848 <xQueueReceiveFromISR>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	2b01      	cmp	r3, #1
 8011f0c:	d102      	bne.n	8011f14 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8011f0e:	2310      	movs	r3, #16
 8011f10:	617b      	str	r3, [r7, #20]
 8011f12:	e001      	b.n	8011f18 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8011f14:	2300      	movs	r3, #0
 8011f16:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011f18:	6a3b      	ldr	r3, [r7, #32]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d01d      	beq.n	8011f5a <osMessageGet+0xca>
 8011f1e:	4b15      	ldr	r3, [pc, #84]	; (8011f74 <osMessageGet+0xe4>)
 8011f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f24:	601a      	str	r2, [r3, #0]
 8011f26:	f3bf 8f4f 	dsb	sy
 8011f2a:	f3bf 8f6f 	isb	sy
 8011f2e:	e014      	b.n	8011f5a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8011f30:	f107 0314 	add.w	r3, r7, #20
 8011f34:	3304      	adds	r3, #4
 8011f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f38:	4619      	mov	r1, r3
 8011f3a:	68b8      	ldr	r0, [r7, #8]
 8011f3c:	f000 fba4 	bl	8012688 <xQueueReceive>
 8011f40:	4603      	mov	r3, r0
 8011f42:	2b01      	cmp	r3, #1
 8011f44:	d102      	bne.n	8011f4c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8011f46:	2310      	movs	r3, #16
 8011f48:	617b      	str	r3, [r7, #20]
 8011f4a:	e006      	b.n	8011f5a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d101      	bne.n	8011f56 <osMessageGet+0xc6>
 8011f52:	2300      	movs	r3, #0
 8011f54:	e000      	b.n	8011f58 <osMessageGet+0xc8>
 8011f56:	2340      	movs	r3, #64	; 0x40
 8011f58:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	461c      	mov	r4, r3
 8011f5e:	f107 0314 	add.w	r3, r7, #20
 8011f62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011f66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011f6a:	68f8      	ldr	r0, [r7, #12]
 8011f6c:	372c      	adds	r7, #44	; 0x2c
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd90      	pop	{r4, r7, pc}
 8011f72:	bf00      	nop
 8011f74:	e000ed04 	.word	0xe000ed04

08011f78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011f78:	b480      	push	{r7}
 8011f7a:	b083      	sub	sp, #12
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	f103 0208 	add.w	r2, r3, #8
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8011f90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	f103 0208 	add.w	r2, r3, #8
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f103 0208 	add.w	r2, r3, #8
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2200      	movs	r2, #0
 8011faa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011fac:	bf00      	nop
 8011fae:	370c      	adds	r7, #12
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb6:	4770      	bx	lr

08011fb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011fb8:	b480      	push	{r7}
 8011fba:	b083      	sub	sp, #12
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011fc6:	bf00      	nop
 8011fc8:	370c      	adds	r7, #12
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd0:	4770      	bx	lr

08011fd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011fd2:	b480      	push	{r7}
 8011fd4:	b085      	sub	sp, #20
 8011fd6:	af00      	add	r7, sp, #0
 8011fd8:	6078      	str	r0, [r7, #4]
 8011fda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	685b      	ldr	r3, [r3, #4]
 8011fe0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011fe2:	683b      	ldr	r3, [r7, #0]
 8011fe4:	68fa      	ldr	r2, [r7, #12]
 8011fe6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	689a      	ldr	r2, [r3, #8]
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	689b      	ldr	r3, [r3, #8]
 8011ff4:	683a      	ldr	r2, [r7, #0]
 8011ff6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	683a      	ldr	r2, [r7, #0]
 8011ffc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011ffe:	683b      	ldr	r3, [r7, #0]
 8012000:	687a      	ldr	r2, [r7, #4]
 8012002:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	1c5a      	adds	r2, r3, #1
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	601a      	str	r2, [r3, #0]
}
 801200e:	bf00      	nop
 8012010:	3714      	adds	r7, #20
 8012012:	46bd      	mov	sp, r7
 8012014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012018:	4770      	bx	lr

0801201a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801201a:	b480      	push	{r7}
 801201c:	b085      	sub	sp, #20
 801201e:	af00      	add	r7, sp, #0
 8012020:	6078      	str	r0, [r7, #4]
 8012022:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801202a:	68bb      	ldr	r3, [r7, #8]
 801202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012030:	d103      	bne.n	801203a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	691b      	ldr	r3, [r3, #16]
 8012036:	60fb      	str	r3, [r7, #12]
 8012038:	e00c      	b.n	8012054 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	3308      	adds	r3, #8
 801203e:	60fb      	str	r3, [r7, #12]
 8012040:	e002      	b.n	8012048 <vListInsert+0x2e>
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	685b      	ldr	r3, [r3, #4]
 8012046:	60fb      	str	r3, [r7, #12]
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	685b      	ldr	r3, [r3, #4]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	68ba      	ldr	r2, [r7, #8]
 8012050:	429a      	cmp	r2, r3
 8012052:	d2f6      	bcs.n	8012042 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	685a      	ldr	r2, [r3, #4]
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801205c:	683b      	ldr	r3, [r7, #0]
 801205e:	685b      	ldr	r3, [r3, #4]
 8012060:	683a      	ldr	r2, [r7, #0]
 8012062:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	68fa      	ldr	r2, [r7, #12]
 8012068:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	683a      	ldr	r2, [r7, #0]
 801206e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012070:	683b      	ldr	r3, [r7, #0]
 8012072:	687a      	ldr	r2, [r7, #4]
 8012074:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	1c5a      	adds	r2, r3, #1
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	601a      	str	r2, [r3, #0]
}
 8012080:	bf00      	nop
 8012082:	3714      	adds	r7, #20
 8012084:	46bd      	mov	sp, r7
 8012086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208a:	4770      	bx	lr

0801208c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801208c:	b480      	push	{r7}
 801208e:	b085      	sub	sp, #20
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	691b      	ldr	r3, [r3, #16]
 8012098:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	685b      	ldr	r3, [r3, #4]
 801209e:	687a      	ldr	r2, [r7, #4]
 80120a0:	6892      	ldr	r2, [r2, #8]
 80120a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	689b      	ldr	r3, [r3, #8]
 80120a8:	687a      	ldr	r2, [r7, #4]
 80120aa:	6852      	ldr	r2, [r2, #4]
 80120ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	685b      	ldr	r3, [r3, #4]
 80120b2:	687a      	ldr	r2, [r7, #4]
 80120b4:	429a      	cmp	r2, r3
 80120b6:	d103      	bne.n	80120c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	689a      	ldr	r2, [r3, #8]
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	2200      	movs	r2, #0
 80120c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	1e5a      	subs	r2, r3, #1
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	681b      	ldr	r3, [r3, #0]
}
 80120d4:	4618      	mov	r0, r3
 80120d6:	3714      	adds	r7, #20
 80120d8:	46bd      	mov	sp, r7
 80120da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120de:	4770      	bx	lr

080120e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b084      	sub	sp, #16
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
 80120e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d10a      	bne.n	801210a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80120f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120f8:	f383 8811 	msr	BASEPRI, r3
 80120fc:	f3bf 8f6f 	isb	sy
 8012100:	f3bf 8f4f 	dsb	sy
 8012104:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012106:	bf00      	nop
 8012108:	e7fe      	b.n	8012108 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801210a:	f001 fd63 	bl	8013bd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	681a      	ldr	r2, [r3, #0]
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012116:	68f9      	ldr	r1, [r7, #12]
 8012118:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801211a:	fb01 f303 	mul.w	r3, r1, r3
 801211e:	441a      	add	r2, r3
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	2200      	movs	r2, #0
 8012128:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	681a      	ldr	r2, [r3, #0]
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	681a      	ldr	r2, [r3, #0]
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801213a:	3b01      	subs	r3, #1
 801213c:	68f9      	ldr	r1, [r7, #12]
 801213e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012140:	fb01 f303 	mul.w	r3, r1, r3
 8012144:	441a      	add	r2, r3
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	22ff      	movs	r2, #255	; 0xff
 801214e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	22ff      	movs	r2, #255	; 0xff
 8012156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801215a:	683b      	ldr	r3, [r7, #0]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d114      	bne.n	801218a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	691b      	ldr	r3, [r3, #16]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d01a      	beq.n	801219e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	3310      	adds	r3, #16
 801216c:	4618      	mov	r0, r3
 801216e:	f001 f93b 	bl	80133e8 <xTaskRemoveFromEventList>
 8012172:	4603      	mov	r3, r0
 8012174:	2b00      	cmp	r3, #0
 8012176:	d012      	beq.n	801219e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012178:	4b0c      	ldr	r3, [pc, #48]	; (80121ac <xQueueGenericReset+0xcc>)
 801217a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801217e:	601a      	str	r2, [r3, #0]
 8012180:	f3bf 8f4f 	dsb	sy
 8012184:	f3bf 8f6f 	isb	sy
 8012188:	e009      	b.n	801219e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	3310      	adds	r3, #16
 801218e:	4618      	mov	r0, r3
 8012190:	f7ff fef2 	bl	8011f78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	3324      	adds	r3, #36	; 0x24
 8012198:	4618      	mov	r0, r3
 801219a:	f7ff feed 	bl	8011f78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801219e:	f001 fd49 	bl	8013c34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80121a2:	2301      	movs	r3, #1
}
 80121a4:	4618      	mov	r0, r3
 80121a6:	3710      	adds	r7, #16
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd80      	pop	{r7, pc}
 80121ac:	e000ed04 	.word	0xe000ed04

080121b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b08e      	sub	sp, #56	; 0x38
 80121b4:	af02      	add	r7, sp, #8
 80121b6:	60f8      	str	r0, [r7, #12]
 80121b8:	60b9      	str	r1, [r7, #8]
 80121ba:	607a      	str	r2, [r7, #4]
 80121bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d10a      	bne.n	80121da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80121c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121c8:	f383 8811 	msr	BASEPRI, r3
 80121cc:	f3bf 8f6f 	isb	sy
 80121d0:	f3bf 8f4f 	dsb	sy
 80121d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80121d6:	bf00      	nop
 80121d8:	e7fe      	b.n	80121d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80121da:	683b      	ldr	r3, [r7, #0]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d10a      	bne.n	80121f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80121e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121e4:	f383 8811 	msr	BASEPRI, r3
 80121e8:	f3bf 8f6f 	isb	sy
 80121ec:	f3bf 8f4f 	dsb	sy
 80121f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80121f2:	bf00      	nop
 80121f4:	e7fe      	b.n	80121f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d002      	beq.n	8012202 <xQueueGenericCreateStatic+0x52>
 80121fc:	68bb      	ldr	r3, [r7, #8]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d001      	beq.n	8012206 <xQueueGenericCreateStatic+0x56>
 8012202:	2301      	movs	r3, #1
 8012204:	e000      	b.n	8012208 <xQueueGenericCreateStatic+0x58>
 8012206:	2300      	movs	r3, #0
 8012208:	2b00      	cmp	r3, #0
 801220a:	d10a      	bne.n	8012222 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801220c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012210:	f383 8811 	msr	BASEPRI, r3
 8012214:	f3bf 8f6f 	isb	sy
 8012218:	f3bf 8f4f 	dsb	sy
 801221c:	623b      	str	r3, [r7, #32]
}
 801221e:	bf00      	nop
 8012220:	e7fe      	b.n	8012220 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d102      	bne.n	801222e <xQueueGenericCreateStatic+0x7e>
 8012228:	68bb      	ldr	r3, [r7, #8]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d101      	bne.n	8012232 <xQueueGenericCreateStatic+0x82>
 801222e:	2301      	movs	r3, #1
 8012230:	e000      	b.n	8012234 <xQueueGenericCreateStatic+0x84>
 8012232:	2300      	movs	r3, #0
 8012234:	2b00      	cmp	r3, #0
 8012236:	d10a      	bne.n	801224e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012238:	f04f 0350 	mov.w	r3, #80	; 0x50
 801223c:	f383 8811 	msr	BASEPRI, r3
 8012240:	f3bf 8f6f 	isb	sy
 8012244:	f3bf 8f4f 	dsb	sy
 8012248:	61fb      	str	r3, [r7, #28]
}
 801224a:	bf00      	nop
 801224c:	e7fe      	b.n	801224c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801224e:	2348      	movs	r3, #72	; 0x48
 8012250:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012252:	697b      	ldr	r3, [r7, #20]
 8012254:	2b48      	cmp	r3, #72	; 0x48
 8012256:	d00a      	beq.n	801226e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012258:	f04f 0350 	mov.w	r3, #80	; 0x50
 801225c:	f383 8811 	msr	BASEPRI, r3
 8012260:	f3bf 8f6f 	isb	sy
 8012264:	f3bf 8f4f 	dsb	sy
 8012268:	61bb      	str	r3, [r7, #24]
}
 801226a:	bf00      	nop
 801226c:	e7fe      	b.n	801226c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801226e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012276:	2b00      	cmp	r3, #0
 8012278:	d00d      	beq.n	8012296 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801227c:	2201      	movs	r2, #1
 801227e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012282:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012288:	9300      	str	r3, [sp, #0]
 801228a:	4613      	mov	r3, r2
 801228c:	687a      	ldr	r2, [r7, #4]
 801228e:	68b9      	ldr	r1, [r7, #8]
 8012290:	68f8      	ldr	r0, [r7, #12]
 8012292:	f000 f83f 	bl	8012314 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012298:	4618      	mov	r0, r3
 801229a:	3730      	adds	r7, #48	; 0x30
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}

080122a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b08a      	sub	sp, #40	; 0x28
 80122a4:	af02      	add	r7, sp, #8
 80122a6:	60f8      	str	r0, [r7, #12]
 80122a8:	60b9      	str	r1, [r7, #8]
 80122aa:	4613      	mov	r3, r2
 80122ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d10a      	bne.n	80122ca <xQueueGenericCreate+0x2a>
	__asm volatile
 80122b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122b8:	f383 8811 	msr	BASEPRI, r3
 80122bc:	f3bf 8f6f 	isb	sy
 80122c0:	f3bf 8f4f 	dsb	sy
 80122c4:	613b      	str	r3, [r7, #16]
}
 80122c6:	bf00      	nop
 80122c8:	e7fe      	b.n	80122c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	68ba      	ldr	r2, [r7, #8]
 80122ce:	fb02 f303 	mul.w	r3, r2, r3
 80122d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80122d4:	69fb      	ldr	r3, [r7, #28]
 80122d6:	3348      	adds	r3, #72	; 0x48
 80122d8:	4618      	mov	r0, r3
 80122da:	f001 fd9d 	bl	8013e18 <pvPortMalloc>
 80122de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80122e0:	69bb      	ldr	r3, [r7, #24]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d011      	beq.n	801230a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80122e6:	69bb      	ldr	r3, [r7, #24]
 80122e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80122ea:	697b      	ldr	r3, [r7, #20]
 80122ec:	3348      	adds	r3, #72	; 0x48
 80122ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80122f0:	69bb      	ldr	r3, [r7, #24]
 80122f2:	2200      	movs	r2, #0
 80122f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80122f8:	79fa      	ldrb	r2, [r7, #7]
 80122fa:	69bb      	ldr	r3, [r7, #24]
 80122fc:	9300      	str	r3, [sp, #0]
 80122fe:	4613      	mov	r3, r2
 8012300:	697a      	ldr	r2, [r7, #20]
 8012302:	68b9      	ldr	r1, [r7, #8]
 8012304:	68f8      	ldr	r0, [r7, #12]
 8012306:	f000 f805 	bl	8012314 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801230a:	69bb      	ldr	r3, [r7, #24]
	}
 801230c:	4618      	mov	r0, r3
 801230e:	3720      	adds	r7, #32
 8012310:	46bd      	mov	sp, r7
 8012312:	bd80      	pop	{r7, pc}

08012314 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b084      	sub	sp, #16
 8012318:	af00      	add	r7, sp, #0
 801231a:	60f8      	str	r0, [r7, #12]
 801231c:	60b9      	str	r1, [r7, #8]
 801231e:	607a      	str	r2, [r7, #4]
 8012320:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012322:	68bb      	ldr	r3, [r7, #8]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d103      	bne.n	8012330 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012328:	69bb      	ldr	r3, [r7, #24]
 801232a:	69ba      	ldr	r2, [r7, #24]
 801232c:	601a      	str	r2, [r3, #0]
 801232e:	e002      	b.n	8012336 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012330:	69bb      	ldr	r3, [r7, #24]
 8012332:	687a      	ldr	r2, [r7, #4]
 8012334:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012336:	69bb      	ldr	r3, [r7, #24]
 8012338:	68fa      	ldr	r2, [r7, #12]
 801233a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801233c:	69bb      	ldr	r3, [r7, #24]
 801233e:	68ba      	ldr	r2, [r7, #8]
 8012340:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012342:	2101      	movs	r1, #1
 8012344:	69b8      	ldr	r0, [r7, #24]
 8012346:	f7ff fecb 	bl	80120e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801234a:	bf00      	nop
 801234c:	3710      	adds	r7, #16
 801234e:	46bd      	mov	sp, r7
 8012350:	bd80      	pop	{r7, pc}
	...

08012354 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b08e      	sub	sp, #56	; 0x38
 8012358:	af00      	add	r7, sp, #0
 801235a:	60f8      	str	r0, [r7, #12]
 801235c:	60b9      	str	r1, [r7, #8]
 801235e:	607a      	str	r2, [r7, #4]
 8012360:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012362:	2300      	movs	r3, #0
 8012364:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801236c:	2b00      	cmp	r3, #0
 801236e:	d10a      	bne.n	8012386 <xQueueGenericSend+0x32>
	__asm volatile
 8012370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012374:	f383 8811 	msr	BASEPRI, r3
 8012378:	f3bf 8f6f 	isb	sy
 801237c:	f3bf 8f4f 	dsb	sy
 8012380:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012382:	bf00      	nop
 8012384:	e7fe      	b.n	8012384 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012386:	68bb      	ldr	r3, [r7, #8]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d103      	bne.n	8012394 <xQueueGenericSend+0x40>
 801238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012390:	2b00      	cmp	r3, #0
 8012392:	d101      	bne.n	8012398 <xQueueGenericSend+0x44>
 8012394:	2301      	movs	r3, #1
 8012396:	e000      	b.n	801239a <xQueueGenericSend+0x46>
 8012398:	2300      	movs	r3, #0
 801239a:	2b00      	cmp	r3, #0
 801239c:	d10a      	bne.n	80123b4 <xQueueGenericSend+0x60>
	__asm volatile
 801239e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123a2:	f383 8811 	msr	BASEPRI, r3
 80123a6:	f3bf 8f6f 	isb	sy
 80123aa:	f3bf 8f4f 	dsb	sy
 80123ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80123b0:	bf00      	nop
 80123b2:	e7fe      	b.n	80123b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	2b02      	cmp	r3, #2
 80123b8:	d103      	bne.n	80123c2 <xQueueGenericSend+0x6e>
 80123ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123be:	2b01      	cmp	r3, #1
 80123c0:	d101      	bne.n	80123c6 <xQueueGenericSend+0x72>
 80123c2:	2301      	movs	r3, #1
 80123c4:	e000      	b.n	80123c8 <xQueueGenericSend+0x74>
 80123c6:	2300      	movs	r3, #0
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d10a      	bne.n	80123e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80123cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123d0:	f383 8811 	msr	BASEPRI, r3
 80123d4:	f3bf 8f6f 	isb	sy
 80123d8:	f3bf 8f4f 	dsb	sy
 80123dc:	623b      	str	r3, [r7, #32]
}
 80123de:	bf00      	nop
 80123e0:	e7fe      	b.n	80123e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80123e2:	f001 f9c1 	bl	8013768 <xTaskGetSchedulerState>
 80123e6:	4603      	mov	r3, r0
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d102      	bne.n	80123f2 <xQueueGenericSend+0x9e>
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d101      	bne.n	80123f6 <xQueueGenericSend+0xa2>
 80123f2:	2301      	movs	r3, #1
 80123f4:	e000      	b.n	80123f8 <xQueueGenericSend+0xa4>
 80123f6:	2300      	movs	r3, #0
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d10a      	bne.n	8012412 <xQueueGenericSend+0xbe>
	__asm volatile
 80123fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012400:	f383 8811 	msr	BASEPRI, r3
 8012404:	f3bf 8f6f 	isb	sy
 8012408:	f3bf 8f4f 	dsb	sy
 801240c:	61fb      	str	r3, [r7, #28]
}
 801240e:	bf00      	nop
 8012410:	e7fe      	b.n	8012410 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012412:	f001 fbdf 	bl	8013bd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801241a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801241c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801241e:	429a      	cmp	r2, r3
 8012420:	d302      	bcc.n	8012428 <xQueueGenericSend+0xd4>
 8012422:	683b      	ldr	r3, [r7, #0]
 8012424:	2b02      	cmp	r3, #2
 8012426:	d129      	bne.n	801247c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012428:	683a      	ldr	r2, [r7, #0]
 801242a:	68b9      	ldr	r1, [r7, #8]
 801242c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801242e:	f000 fa8b 	bl	8012948 <prvCopyDataToQueue>
 8012432:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012438:	2b00      	cmp	r3, #0
 801243a:	d010      	beq.n	801245e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801243c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801243e:	3324      	adds	r3, #36	; 0x24
 8012440:	4618      	mov	r0, r3
 8012442:	f000 ffd1 	bl	80133e8 <xTaskRemoveFromEventList>
 8012446:	4603      	mov	r3, r0
 8012448:	2b00      	cmp	r3, #0
 801244a:	d013      	beq.n	8012474 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801244c:	4b3f      	ldr	r3, [pc, #252]	; (801254c <xQueueGenericSend+0x1f8>)
 801244e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012452:	601a      	str	r2, [r3, #0]
 8012454:	f3bf 8f4f 	dsb	sy
 8012458:	f3bf 8f6f 	isb	sy
 801245c:	e00a      	b.n	8012474 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801245e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012460:	2b00      	cmp	r3, #0
 8012462:	d007      	beq.n	8012474 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012464:	4b39      	ldr	r3, [pc, #228]	; (801254c <xQueueGenericSend+0x1f8>)
 8012466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801246a:	601a      	str	r2, [r3, #0]
 801246c:	f3bf 8f4f 	dsb	sy
 8012470:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012474:	f001 fbde 	bl	8013c34 <vPortExitCritical>
				return pdPASS;
 8012478:	2301      	movs	r3, #1
 801247a:	e063      	b.n	8012544 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d103      	bne.n	801248a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012482:	f001 fbd7 	bl	8013c34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012486:	2300      	movs	r3, #0
 8012488:	e05c      	b.n	8012544 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801248a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801248c:	2b00      	cmp	r3, #0
 801248e:	d106      	bne.n	801249e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012490:	f107 0314 	add.w	r3, r7, #20
 8012494:	4618      	mov	r0, r3
 8012496:	f001 f809 	bl	80134ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801249a:	2301      	movs	r3, #1
 801249c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801249e:	f001 fbc9 	bl	8013c34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80124a2:	f000 fda9 	bl	8012ff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80124a6:	f001 fb95 	bl	8013bd4 <vPortEnterCritical>
 80124aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80124b0:	b25b      	sxtb	r3, r3
 80124b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124b6:	d103      	bne.n	80124c0 <xQueueGenericSend+0x16c>
 80124b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124ba:	2200      	movs	r2, #0
 80124bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80124c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80124c6:	b25b      	sxtb	r3, r3
 80124c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124cc:	d103      	bne.n	80124d6 <xQueueGenericSend+0x182>
 80124ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124d0:	2200      	movs	r2, #0
 80124d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80124d6:	f001 fbad 	bl	8013c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80124da:	1d3a      	adds	r2, r7, #4
 80124dc:	f107 0314 	add.w	r3, r7, #20
 80124e0:	4611      	mov	r1, r2
 80124e2:	4618      	mov	r0, r3
 80124e4:	f000 fff8 	bl	80134d8 <xTaskCheckForTimeOut>
 80124e8:	4603      	mov	r3, r0
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d124      	bne.n	8012538 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80124ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124f0:	f000 fb22 	bl	8012b38 <prvIsQueueFull>
 80124f4:	4603      	mov	r3, r0
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d018      	beq.n	801252c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80124fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124fc:	3310      	adds	r3, #16
 80124fe:	687a      	ldr	r2, [r7, #4]
 8012500:	4611      	mov	r1, r2
 8012502:	4618      	mov	r0, r3
 8012504:	f000 ff4c 	bl	80133a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801250a:	f000 faad 	bl	8012a68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801250e:	f000 fd81 	bl	8013014 <xTaskResumeAll>
 8012512:	4603      	mov	r3, r0
 8012514:	2b00      	cmp	r3, #0
 8012516:	f47f af7c 	bne.w	8012412 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801251a:	4b0c      	ldr	r3, [pc, #48]	; (801254c <xQueueGenericSend+0x1f8>)
 801251c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012520:	601a      	str	r2, [r3, #0]
 8012522:	f3bf 8f4f 	dsb	sy
 8012526:	f3bf 8f6f 	isb	sy
 801252a:	e772      	b.n	8012412 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801252c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801252e:	f000 fa9b 	bl	8012a68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012532:	f000 fd6f 	bl	8013014 <xTaskResumeAll>
 8012536:	e76c      	b.n	8012412 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801253a:	f000 fa95 	bl	8012a68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801253e:	f000 fd69 	bl	8013014 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012542:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012544:	4618      	mov	r0, r3
 8012546:	3738      	adds	r7, #56	; 0x38
 8012548:	46bd      	mov	sp, r7
 801254a:	bd80      	pop	{r7, pc}
 801254c:	e000ed04 	.word	0xe000ed04

08012550 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b090      	sub	sp, #64	; 0x40
 8012554:	af00      	add	r7, sp, #0
 8012556:	60f8      	str	r0, [r7, #12]
 8012558:	60b9      	str	r1, [r7, #8]
 801255a:	607a      	str	r2, [r7, #4]
 801255c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8012562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012564:	2b00      	cmp	r3, #0
 8012566:	d10a      	bne.n	801257e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012568:	f04f 0350 	mov.w	r3, #80	; 0x50
 801256c:	f383 8811 	msr	BASEPRI, r3
 8012570:	f3bf 8f6f 	isb	sy
 8012574:	f3bf 8f4f 	dsb	sy
 8012578:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801257a:	bf00      	nop
 801257c:	e7fe      	b.n	801257c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801257e:	68bb      	ldr	r3, [r7, #8]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d103      	bne.n	801258c <xQueueGenericSendFromISR+0x3c>
 8012584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012588:	2b00      	cmp	r3, #0
 801258a:	d101      	bne.n	8012590 <xQueueGenericSendFromISR+0x40>
 801258c:	2301      	movs	r3, #1
 801258e:	e000      	b.n	8012592 <xQueueGenericSendFromISR+0x42>
 8012590:	2300      	movs	r3, #0
 8012592:	2b00      	cmp	r3, #0
 8012594:	d10a      	bne.n	80125ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8012596:	f04f 0350 	mov.w	r3, #80	; 0x50
 801259a:	f383 8811 	msr	BASEPRI, r3
 801259e:	f3bf 8f6f 	isb	sy
 80125a2:	f3bf 8f4f 	dsb	sy
 80125a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80125a8:	bf00      	nop
 80125aa:	e7fe      	b.n	80125aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80125ac:	683b      	ldr	r3, [r7, #0]
 80125ae:	2b02      	cmp	r3, #2
 80125b0:	d103      	bne.n	80125ba <xQueueGenericSendFromISR+0x6a>
 80125b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125b6:	2b01      	cmp	r3, #1
 80125b8:	d101      	bne.n	80125be <xQueueGenericSendFromISR+0x6e>
 80125ba:	2301      	movs	r3, #1
 80125bc:	e000      	b.n	80125c0 <xQueueGenericSendFromISR+0x70>
 80125be:	2300      	movs	r3, #0
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d10a      	bne.n	80125da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80125c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125c8:	f383 8811 	msr	BASEPRI, r3
 80125cc:	f3bf 8f6f 	isb	sy
 80125d0:	f3bf 8f4f 	dsb	sy
 80125d4:	623b      	str	r3, [r7, #32]
}
 80125d6:	bf00      	nop
 80125d8:	e7fe      	b.n	80125d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80125da:	f001 fbdd 	bl	8013d98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80125de:	f3ef 8211 	mrs	r2, BASEPRI
 80125e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125e6:	f383 8811 	msr	BASEPRI, r3
 80125ea:	f3bf 8f6f 	isb	sy
 80125ee:	f3bf 8f4f 	dsb	sy
 80125f2:	61fa      	str	r2, [r7, #28]
 80125f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80125f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80125f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80125fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80125fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012602:	429a      	cmp	r2, r3
 8012604:	d302      	bcc.n	801260c <xQueueGenericSendFromISR+0xbc>
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	2b02      	cmp	r3, #2
 801260a:	d12f      	bne.n	801266c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801260c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801260e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801261a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801261c:	683a      	ldr	r2, [r7, #0]
 801261e:	68b9      	ldr	r1, [r7, #8]
 8012620:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012622:	f000 f991 	bl	8012948 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012626:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801262a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801262e:	d112      	bne.n	8012656 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012634:	2b00      	cmp	r3, #0
 8012636:	d016      	beq.n	8012666 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801263a:	3324      	adds	r3, #36	; 0x24
 801263c:	4618      	mov	r0, r3
 801263e:	f000 fed3 	bl	80133e8 <xTaskRemoveFromEventList>
 8012642:	4603      	mov	r3, r0
 8012644:	2b00      	cmp	r3, #0
 8012646:	d00e      	beq.n	8012666 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d00b      	beq.n	8012666 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	2201      	movs	r2, #1
 8012652:	601a      	str	r2, [r3, #0]
 8012654:	e007      	b.n	8012666 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012656:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801265a:	3301      	adds	r3, #1
 801265c:	b2db      	uxtb	r3, r3
 801265e:	b25a      	sxtb	r2, r3
 8012660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012666:	2301      	movs	r3, #1
 8012668:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801266a:	e001      	b.n	8012670 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801266c:	2300      	movs	r3, #0
 801266e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012672:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012674:	697b      	ldr	r3, [r7, #20]
 8012676:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801267a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801267c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801267e:	4618      	mov	r0, r3
 8012680:	3740      	adds	r7, #64	; 0x40
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}
	...

08012688 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b08c      	sub	sp, #48	; 0x30
 801268c:	af00      	add	r7, sp, #0
 801268e:	60f8      	str	r0, [r7, #12]
 8012690:	60b9      	str	r1, [r7, #8]
 8012692:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012694:	2300      	movs	r3, #0
 8012696:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801269c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d10a      	bne.n	80126b8 <xQueueReceive+0x30>
	__asm volatile
 80126a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126a6:	f383 8811 	msr	BASEPRI, r3
 80126aa:	f3bf 8f6f 	isb	sy
 80126ae:	f3bf 8f4f 	dsb	sy
 80126b2:	623b      	str	r3, [r7, #32]
}
 80126b4:	bf00      	nop
 80126b6:	e7fe      	b.n	80126b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d103      	bne.n	80126c6 <xQueueReceive+0x3e>
 80126be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d101      	bne.n	80126ca <xQueueReceive+0x42>
 80126c6:	2301      	movs	r3, #1
 80126c8:	e000      	b.n	80126cc <xQueueReceive+0x44>
 80126ca:	2300      	movs	r3, #0
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d10a      	bne.n	80126e6 <xQueueReceive+0x5e>
	__asm volatile
 80126d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126d4:	f383 8811 	msr	BASEPRI, r3
 80126d8:	f3bf 8f6f 	isb	sy
 80126dc:	f3bf 8f4f 	dsb	sy
 80126e0:	61fb      	str	r3, [r7, #28]
}
 80126e2:	bf00      	nop
 80126e4:	e7fe      	b.n	80126e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80126e6:	f001 f83f 	bl	8013768 <xTaskGetSchedulerState>
 80126ea:	4603      	mov	r3, r0
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d102      	bne.n	80126f6 <xQueueReceive+0x6e>
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d101      	bne.n	80126fa <xQueueReceive+0x72>
 80126f6:	2301      	movs	r3, #1
 80126f8:	e000      	b.n	80126fc <xQueueReceive+0x74>
 80126fa:	2300      	movs	r3, #0
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d10a      	bne.n	8012716 <xQueueReceive+0x8e>
	__asm volatile
 8012700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012704:	f383 8811 	msr	BASEPRI, r3
 8012708:	f3bf 8f6f 	isb	sy
 801270c:	f3bf 8f4f 	dsb	sy
 8012710:	61bb      	str	r3, [r7, #24]
}
 8012712:	bf00      	nop
 8012714:	e7fe      	b.n	8012714 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012716:	f001 fa5d 	bl	8013bd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801271c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801271e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012722:	2b00      	cmp	r3, #0
 8012724:	d01f      	beq.n	8012766 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012726:	68b9      	ldr	r1, [r7, #8]
 8012728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801272a:	f000 f977 	bl	8012a1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012730:	1e5a      	subs	r2, r3, #1
 8012732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012734:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012738:	691b      	ldr	r3, [r3, #16]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d00f      	beq.n	801275e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801273e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012740:	3310      	adds	r3, #16
 8012742:	4618      	mov	r0, r3
 8012744:	f000 fe50 	bl	80133e8 <xTaskRemoveFromEventList>
 8012748:	4603      	mov	r3, r0
 801274a:	2b00      	cmp	r3, #0
 801274c:	d007      	beq.n	801275e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801274e:	4b3d      	ldr	r3, [pc, #244]	; (8012844 <xQueueReceive+0x1bc>)
 8012750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012754:	601a      	str	r2, [r3, #0]
 8012756:	f3bf 8f4f 	dsb	sy
 801275a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801275e:	f001 fa69 	bl	8013c34 <vPortExitCritical>
				return pdPASS;
 8012762:	2301      	movs	r3, #1
 8012764:	e069      	b.n	801283a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d103      	bne.n	8012774 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801276c:	f001 fa62 	bl	8013c34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012770:	2300      	movs	r3, #0
 8012772:	e062      	b.n	801283a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012776:	2b00      	cmp	r3, #0
 8012778:	d106      	bne.n	8012788 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801277a:	f107 0310 	add.w	r3, r7, #16
 801277e:	4618      	mov	r0, r3
 8012780:	f000 fe94 	bl	80134ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012784:	2301      	movs	r3, #1
 8012786:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012788:	f001 fa54 	bl	8013c34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801278c:	f000 fc34 	bl	8012ff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012790:	f001 fa20 	bl	8013bd4 <vPortEnterCritical>
 8012794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012796:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801279a:	b25b      	sxtb	r3, r3
 801279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127a0:	d103      	bne.n	80127aa <xQueueReceive+0x122>
 80127a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127a4:	2200      	movs	r2, #0
 80127a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80127aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80127b0:	b25b      	sxtb	r3, r3
 80127b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127b6:	d103      	bne.n	80127c0 <xQueueReceive+0x138>
 80127b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ba:	2200      	movs	r2, #0
 80127bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80127c0:	f001 fa38 	bl	8013c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80127c4:	1d3a      	adds	r2, r7, #4
 80127c6:	f107 0310 	add.w	r3, r7, #16
 80127ca:	4611      	mov	r1, r2
 80127cc:	4618      	mov	r0, r3
 80127ce:	f000 fe83 	bl	80134d8 <xTaskCheckForTimeOut>
 80127d2:	4603      	mov	r3, r0
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d123      	bne.n	8012820 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80127d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127da:	f000 f997 	bl	8012b0c <prvIsQueueEmpty>
 80127de:	4603      	mov	r3, r0
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d017      	beq.n	8012814 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80127e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127e6:	3324      	adds	r3, #36	; 0x24
 80127e8:	687a      	ldr	r2, [r7, #4]
 80127ea:	4611      	mov	r1, r2
 80127ec:	4618      	mov	r0, r3
 80127ee:	f000 fdd7 	bl	80133a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80127f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127f4:	f000 f938 	bl	8012a68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80127f8:	f000 fc0c 	bl	8013014 <xTaskResumeAll>
 80127fc:	4603      	mov	r3, r0
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d189      	bne.n	8012716 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8012802:	4b10      	ldr	r3, [pc, #64]	; (8012844 <xQueueReceive+0x1bc>)
 8012804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012808:	601a      	str	r2, [r3, #0]
 801280a:	f3bf 8f4f 	dsb	sy
 801280e:	f3bf 8f6f 	isb	sy
 8012812:	e780      	b.n	8012716 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012816:	f000 f927 	bl	8012a68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801281a:	f000 fbfb 	bl	8013014 <xTaskResumeAll>
 801281e:	e77a      	b.n	8012716 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012822:	f000 f921 	bl	8012a68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012826:	f000 fbf5 	bl	8013014 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801282a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801282c:	f000 f96e 	bl	8012b0c <prvIsQueueEmpty>
 8012830:	4603      	mov	r3, r0
 8012832:	2b00      	cmp	r3, #0
 8012834:	f43f af6f 	beq.w	8012716 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012838:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801283a:	4618      	mov	r0, r3
 801283c:	3730      	adds	r7, #48	; 0x30
 801283e:	46bd      	mov	sp, r7
 8012840:	bd80      	pop	{r7, pc}
 8012842:	bf00      	nop
 8012844:	e000ed04 	.word	0xe000ed04

08012848 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b08e      	sub	sp, #56	; 0x38
 801284c:	af00      	add	r7, sp, #0
 801284e:	60f8      	str	r0, [r7, #12]
 8012850:	60b9      	str	r1, [r7, #8]
 8012852:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801285a:	2b00      	cmp	r3, #0
 801285c:	d10a      	bne.n	8012874 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801285e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012862:	f383 8811 	msr	BASEPRI, r3
 8012866:	f3bf 8f6f 	isb	sy
 801286a:	f3bf 8f4f 	dsb	sy
 801286e:	623b      	str	r3, [r7, #32]
}
 8012870:	bf00      	nop
 8012872:	e7fe      	b.n	8012872 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012874:	68bb      	ldr	r3, [r7, #8]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d103      	bne.n	8012882 <xQueueReceiveFromISR+0x3a>
 801287a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801287e:	2b00      	cmp	r3, #0
 8012880:	d101      	bne.n	8012886 <xQueueReceiveFromISR+0x3e>
 8012882:	2301      	movs	r3, #1
 8012884:	e000      	b.n	8012888 <xQueueReceiveFromISR+0x40>
 8012886:	2300      	movs	r3, #0
 8012888:	2b00      	cmp	r3, #0
 801288a:	d10a      	bne.n	80128a2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801288c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012890:	f383 8811 	msr	BASEPRI, r3
 8012894:	f3bf 8f6f 	isb	sy
 8012898:	f3bf 8f4f 	dsb	sy
 801289c:	61fb      	str	r3, [r7, #28]
}
 801289e:	bf00      	nop
 80128a0:	e7fe      	b.n	80128a0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80128a2:	f001 fa79 	bl	8013d98 <vPortValidateInterruptPriority>
	__asm volatile
 80128a6:	f3ef 8211 	mrs	r2, BASEPRI
 80128aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128ae:	f383 8811 	msr	BASEPRI, r3
 80128b2:	f3bf 8f6f 	isb	sy
 80128b6:	f3bf 8f4f 	dsb	sy
 80128ba:	61ba      	str	r2, [r7, #24]
 80128bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80128be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80128c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80128c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80128c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d02f      	beq.n	801292e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80128ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80128d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80128d8:	68b9      	ldr	r1, [r7, #8]
 80128da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80128dc:	f000 f89e 	bl	8012a1c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80128e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e2:	1e5a      	subs	r2, r3, #1
 80128e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80128e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80128ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128f0:	d112      	bne.n	8012918 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80128f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f4:	691b      	ldr	r3, [r3, #16]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d016      	beq.n	8012928 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80128fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128fc:	3310      	adds	r3, #16
 80128fe:	4618      	mov	r0, r3
 8012900:	f000 fd72 	bl	80133e8 <xTaskRemoveFromEventList>
 8012904:	4603      	mov	r3, r0
 8012906:	2b00      	cmp	r3, #0
 8012908:	d00e      	beq.n	8012928 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d00b      	beq.n	8012928 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	2201      	movs	r2, #1
 8012914:	601a      	str	r2, [r3, #0]
 8012916:	e007      	b.n	8012928 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801291c:	3301      	adds	r3, #1
 801291e:	b2db      	uxtb	r3, r3
 8012920:	b25a      	sxtb	r2, r3
 8012922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012928:	2301      	movs	r3, #1
 801292a:	637b      	str	r3, [r7, #52]	; 0x34
 801292c:	e001      	b.n	8012932 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801292e:	2300      	movs	r3, #0
 8012930:	637b      	str	r3, [r7, #52]	; 0x34
 8012932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012934:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012936:	693b      	ldr	r3, [r7, #16]
 8012938:	f383 8811 	msr	BASEPRI, r3
}
 801293c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801293e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012940:	4618      	mov	r0, r3
 8012942:	3738      	adds	r7, #56	; 0x38
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}

08012948 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b086      	sub	sp, #24
 801294c:	af00      	add	r7, sp, #0
 801294e:	60f8      	str	r0, [r7, #12]
 8012950:	60b9      	str	r1, [r7, #8]
 8012952:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012954:	2300      	movs	r3, #0
 8012956:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801295c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012962:	2b00      	cmp	r3, #0
 8012964:	d10d      	bne.n	8012982 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d14d      	bne.n	8012a0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	689b      	ldr	r3, [r3, #8]
 8012972:	4618      	mov	r0, r3
 8012974:	f000 ff16 	bl	80137a4 <xTaskPriorityDisinherit>
 8012978:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	2200      	movs	r2, #0
 801297e:	609a      	str	r2, [r3, #8]
 8012980:	e043      	b.n	8012a0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d119      	bne.n	80129bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	6858      	ldr	r0, [r3, #4]
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012990:	461a      	mov	r2, r3
 8012992:	68b9      	ldr	r1, [r7, #8]
 8012994:	f002 f8ca 	bl	8014b2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	685a      	ldr	r2, [r3, #4]
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129a0:	441a      	add	r2, r3
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	685a      	ldr	r2, [r3, #4]
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	689b      	ldr	r3, [r3, #8]
 80129ae:	429a      	cmp	r2, r3
 80129b0:	d32b      	bcc.n	8012a0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	681a      	ldr	r2, [r3, #0]
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	605a      	str	r2, [r3, #4]
 80129ba:	e026      	b.n	8012a0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	68d8      	ldr	r0, [r3, #12]
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129c4:	461a      	mov	r2, r3
 80129c6:	68b9      	ldr	r1, [r7, #8]
 80129c8:	f002 f8b0 	bl	8014b2c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	68da      	ldr	r2, [r3, #12]
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129d4:	425b      	negs	r3, r3
 80129d6:	441a      	add	r2, r3
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	68da      	ldr	r2, [r3, #12]
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	429a      	cmp	r2, r3
 80129e6:	d207      	bcs.n	80129f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	689a      	ldr	r2, [r3, #8]
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129f0:	425b      	negs	r3, r3
 80129f2:	441a      	add	r2, r3
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	2b02      	cmp	r3, #2
 80129fc:	d105      	bne.n	8012a0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80129fe:	693b      	ldr	r3, [r7, #16]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d002      	beq.n	8012a0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012a04:	693b      	ldr	r3, [r7, #16]
 8012a06:	3b01      	subs	r3, #1
 8012a08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012a0a:	693b      	ldr	r3, [r7, #16]
 8012a0c:	1c5a      	adds	r2, r3, #1
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012a12:	697b      	ldr	r3, [r7, #20]
}
 8012a14:	4618      	mov	r0, r3
 8012a16:	3718      	adds	r7, #24
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	bd80      	pop	{r7, pc}

08012a1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b082      	sub	sp, #8
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
 8012a24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d018      	beq.n	8012a60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	68da      	ldr	r2, [r3, #12]
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a36:	441a      	add	r2, r3
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	68da      	ldr	r2, [r3, #12]
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	689b      	ldr	r3, [r3, #8]
 8012a44:	429a      	cmp	r2, r3
 8012a46:	d303      	bcc.n	8012a50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681a      	ldr	r2, [r3, #0]
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	68d9      	ldr	r1, [r3, #12]
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a58:	461a      	mov	r2, r3
 8012a5a:	6838      	ldr	r0, [r7, #0]
 8012a5c:	f002 f866 	bl	8014b2c <memcpy>
	}
}
 8012a60:	bf00      	nop
 8012a62:	3708      	adds	r7, #8
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bd80      	pop	{r7, pc}

08012a68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b084      	sub	sp, #16
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012a70:	f001 f8b0 	bl	8013bd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012a7c:	e011      	b.n	8012aa2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d012      	beq.n	8012aac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	3324      	adds	r3, #36	; 0x24
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	f000 fcac 	bl	80133e8 <xTaskRemoveFromEventList>
 8012a90:	4603      	mov	r3, r0
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d001      	beq.n	8012a9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012a96:	f000 fd81 	bl	801359c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012a9a:	7bfb      	ldrb	r3, [r7, #15]
 8012a9c:	3b01      	subs	r3, #1
 8012a9e:	b2db      	uxtb	r3, r3
 8012aa0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	dce9      	bgt.n	8012a7e <prvUnlockQueue+0x16>
 8012aaa:	e000      	b.n	8012aae <prvUnlockQueue+0x46>
					break;
 8012aac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	22ff      	movs	r2, #255	; 0xff
 8012ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012ab6:	f001 f8bd 	bl	8013c34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012aba:	f001 f88b 	bl	8013bd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012ac4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012ac6:	e011      	b.n	8012aec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	691b      	ldr	r3, [r3, #16]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d012      	beq.n	8012af6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	3310      	adds	r3, #16
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	f000 fc87 	bl	80133e8 <xTaskRemoveFromEventList>
 8012ada:	4603      	mov	r3, r0
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d001      	beq.n	8012ae4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012ae0:	f000 fd5c 	bl	801359c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012ae4:	7bbb      	ldrb	r3, [r7, #14]
 8012ae6:	3b01      	subs	r3, #1
 8012ae8:	b2db      	uxtb	r3, r3
 8012aea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012aec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	dce9      	bgt.n	8012ac8 <prvUnlockQueue+0x60>
 8012af4:	e000      	b.n	8012af8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012af6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	22ff      	movs	r2, #255	; 0xff
 8012afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012b00:	f001 f898 	bl	8013c34 <vPortExitCritical>
}
 8012b04:	bf00      	nop
 8012b06:	3710      	adds	r7, #16
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	bd80      	pop	{r7, pc}

08012b0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b084      	sub	sp, #16
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012b14:	f001 f85e 	bl	8013bd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d102      	bne.n	8012b26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012b20:	2301      	movs	r3, #1
 8012b22:	60fb      	str	r3, [r7, #12]
 8012b24:	e001      	b.n	8012b2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012b26:	2300      	movs	r3, #0
 8012b28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012b2a:	f001 f883 	bl	8013c34 <vPortExitCritical>

	return xReturn;
 8012b2e:	68fb      	ldr	r3, [r7, #12]
}
 8012b30:	4618      	mov	r0, r3
 8012b32:	3710      	adds	r7, #16
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd80      	pop	{r7, pc}

08012b38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b084      	sub	sp, #16
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012b40:	f001 f848 	bl	8013bd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b4c:	429a      	cmp	r2, r3
 8012b4e:	d102      	bne.n	8012b56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012b50:	2301      	movs	r3, #1
 8012b52:	60fb      	str	r3, [r7, #12]
 8012b54:	e001      	b.n	8012b5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012b56:	2300      	movs	r3, #0
 8012b58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012b5a:	f001 f86b 	bl	8013c34 <vPortExitCritical>

	return xReturn;
 8012b5e:	68fb      	ldr	r3, [r7, #12]
}
 8012b60:	4618      	mov	r0, r3
 8012b62:	3710      	adds	r7, #16
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}

08012b68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b08e      	sub	sp, #56	; 0x38
 8012b6c:	af04      	add	r7, sp, #16
 8012b6e:	60f8      	str	r0, [r7, #12]
 8012b70:	60b9      	str	r1, [r7, #8]
 8012b72:	607a      	str	r2, [r7, #4]
 8012b74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d10a      	bne.n	8012b92 <xTaskCreateStatic+0x2a>
	__asm volatile
 8012b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b80:	f383 8811 	msr	BASEPRI, r3
 8012b84:	f3bf 8f6f 	isb	sy
 8012b88:	f3bf 8f4f 	dsb	sy
 8012b8c:	623b      	str	r3, [r7, #32]
}
 8012b8e:	bf00      	nop
 8012b90:	e7fe      	b.n	8012b90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d10a      	bne.n	8012bae <xTaskCreateStatic+0x46>
	__asm volatile
 8012b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b9c:	f383 8811 	msr	BASEPRI, r3
 8012ba0:	f3bf 8f6f 	isb	sy
 8012ba4:	f3bf 8f4f 	dsb	sy
 8012ba8:	61fb      	str	r3, [r7, #28]
}
 8012baa:	bf00      	nop
 8012bac:	e7fe      	b.n	8012bac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012bae:	23b4      	movs	r3, #180	; 0xb4
 8012bb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012bb2:	693b      	ldr	r3, [r7, #16]
 8012bb4:	2bb4      	cmp	r3, #180	; 0xb4
 8012bb6:	d00a      	beq.n	8012bce <xTaskCreateStatic+0x66>
	__asm volatile
 8012bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bbc:	f383 8811 	msr	BASEPRI, r3
 8012bc0:	f3bf 8f6f 	isb	sy
 8012bc4:	f3bf 8f4f 	dsb	sy
 8012bc8:	61bb      	str	r3, [r7, #24]
}
 8012bca:	bf00      	nop
 8012bcc:	e7fe      	b.n	8012bcc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012bce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d01e      	beq.n	8012c14 <xTaskCreateStatic+0xac>
 8012bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d01b      	beq.n	8012c14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bde:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012be4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be8:	2202      	movs	r2, #2
 8012bea:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012bee:	2300      	movs	r3, #0
 8012bf0:	9303      	str	r3, [sp, #12]
 8012bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf4:	9302      	str	r3, [sp, #8]
 8012bf6:	f107 0314 	add.w	r3, r7, #20
 8012bfa:	9301      	str	r3, [sp, #4]
 8012bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bfe:	9300      	str	r3, [sp, #0]
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	687a      	ldr	r2, [r7, #4]
 8012c04:	68b9      	ldr	r1, [r7, #8]
 8012c06:	68f8      	ldr	r0, [r7, #12]
 8012c08:	f000 f850 	bl	8012cac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012c0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c0e:	f000 f8eb 	bl	8012de8 <prvAddNewTaskToReadyList>
 8012c12:	e001      	b.n	8012c18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012c14:	2300      	movs	r3, #0
 8012c16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012c18:	697b      	ldr	r3, [r7, #20]
	}
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	3728      	adds	r7, #40	; 0x28
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}

08012c22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012c22:	b580      	push	{r7, lr}
 8012c24:	b08c      	sub	sp, #48	; 0x30
 8012c26:	af04      	add	r7, sp, #16
 8012c28:	60f8      	str	r0, [r7, #12]
 8012c2a:	60b9      	str	r1, [r7, #8]
 8012c2c:	603b      	str	r3, [r7, #0]
 8012c2e:	4613      	mov	r3, r2
 8012c30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012c32:	88fb      	ldrh	r3, [r7, #6]
 8012c34:	009b      	lsls	r3, r3, #2
 8012c36:	4618      	mov	r0, r3
 8012c38:	f001 f8ee 	bl	8013e18 <pvPortMalloc>
 8012c3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012c3e:	697b      	ldr	r3, [r7, #20]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d00e      	beq.n	8012c62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012c44:	20b4      	movs	r0, #180	; 0xb4
 8012c46:	f001 f8e7 	bl	8013e18 <pvPortMalloc>
 8012c4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012c4c:	69fb      	ldr	r3, [r7, #28]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d003      	beq.n	8012c5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012c52:	69fb      	ldr	r3, [r7, #28]
 8012c54:	697a      	ldr	r2, [r7, #20]
 8012c56:	631a      	str	r2, [r3, #48]	; 0x30
 8012c58:	e005      	b.n	8012c66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012c5a:	6978      	ldr	r0, [r7, #20]
 8012c5c:	f001 f9a8 	bl	8013fb0 <vPortFree>
 8012c60:	e001      	b.n	8012c66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012c62:	2300      	movs	r3, #0
 8012c64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012c66:	69fb      	ldr	r3, [r7, #28]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d017      	beq.n	8012c9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012c6c:	69fb      	ldr	r3, [r7, #28]
 8012c6e:	2200      	movs	r2, #0
 8012c70:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012c74:	88fa      	ldrh	r2, [r7, #6]
 8012c76:	2300      	movs	r3, #0
 8012c78:	9303      	str	r3, [sp, #12]
 8012c7a:	69fb      	ldr	r3, [r7, #28]
 8012c7c:	9302      	str	r3, [sp, #8]
 8012c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c80:	9301      	str	r3, [sp, #4]
 8012c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c84:	9300      	str	r3, [sp, #0]
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	68b9      	ldr	r1, [r7, #8]
 8012c8a:	68f8      	ldr	r0, [r7, #12]
 8012c8c:	f000 f80e 	bl	8012cac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012c90:	69f8      	ldr	r0, [r7, #28]
 8012c92:	f000 f8a9 	bl	8012de8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012c96:	2301      	movs	r3, #1
 8012c98:	61bb      	str	r3, [r7, #24]
 8012c9a:	e002      	b.n	8012ca2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8012ca0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012ca2:	69bb      	ldr	r3, [r7, #24]
	}
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	3720      	adds	r7, #32
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bd80      	pop	{r7, pc}

08012cac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b088      	sub	sp, #32
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	60f8      	str	r0, [r7, #12]
 8012cb4:	60b9      	str	r1, [r7, #8]
 8012cb6:	607a      	str	r2, [r7, #4]
 8012cb8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012cc4:	3b01      	subs	r3, #1
 8012cc6:	009b      	lsls	r3, r3, #2
 8012cc8:	4413      	add	r3, r2
 8012cca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012ccc:	69bb      	ldr	r3, [r7, #24]
 8012cce:	f023 0307 	bic.w	r3, r3, #7
 8012cd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012cd4:	69bb      	ldr	r3, [r7, #24]
 8012cd6:	f003 0307 	and.w	r3, r3, #7
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d00a      	beq.n	8012cf4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8012cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ce2:	f383 8811 	msr	BASEPRI, r3
 8012ce6:	f3bf 8f6f 	isb	sy
 8012cea:	f3bf 8f4f 	dsb	sy
 8012cee:	617b      	str	r3, [r7, #20]
}
 8012cf0:	bf00      	nop
 8012cf2:	e7fe      	b.n	8012cf2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012cf4:	68bb      	ldr	r3, [r7, #8]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d01f      	beq.n	8012d3a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	61fb      	str	r3, [r7, #28]
 8012cfe:	e012      	b.n	8012d26 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012d00:	68ba      	ldr	r2, [r7, #8]
 8012d02:	69fb      	ldr	r3, [r7, #28]
 8012d04:	4413      	add	r3, r2
 8012d06:	7819      	ldrb	r1, [r3, #0]
 8012d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d0a:	69fb      	ldr	r3, [r7, #28]
 8012d0c:	4413      	add	r3, r2
 8012d0e:	3334      	adds	r3, #52	; 0x34
 8012d10:	460a      	mov	r2, r1
 8012d12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012d14:	68ba      	ldr	r2, [r7, #8]
 8012d16:	69fb      	ldr	r3, [r7, #28]
 8012d18:	4413      	add	r3, r2
 8012d1a:	781b      	ldrb	r3, [r3, #0]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d006      	beq.n	8012d2e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012d20:	69fb      	ldr	r3, [r7, #28]
 8012d22:	3301      	adds	r3, #1
 8012d24:	61fb      	str	r3, [r7, #28]
 8012d26:	69fb      	ldr	r3, [r7, #28]
 8012d28:	2b0f      	cmp	r3, #15
 8012d2a:	d9e9      	bls.n	8012d00 <prvInitialiseNewTask+0x54>
 8012d2c:	e000      	b.n	8012d30 <prvInitialiseNewTask+0x84>
			{
				break;
 8012d2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d32:	2200      	movs	r2, #0
 8012d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012d38:	e003      	b.n	8012d42 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d44:	2b06      	cmp	r3, #6
 8012d46:	d901      	bls.n	8012d4c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012d48:	2306      	movs	r3, #6
 8012d4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d56:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d60:	3304      	adds	r3, #4
 8012d62:	4618      	mov	r0, r3
 8012d64:	f7ff f928 	bl	8011fb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d6a:	3318      	adds	r3, #24
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	f7ff f923 	bl	8011fb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d7a:	f1c3 0207 	rsb	r2, r3, #7
 8012d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d92:	2200      	movs	r2, #0
 8012d94:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d9a:	334c      	adds	r3, #76	; 0x4c
 8012d9c:	2260      	movs	r2, #96	; 0x60
 8012d9e:	2100      	movs	r1, #0
 8012da0:	4618      	mov	r0, r3
 8012da2:	f001 fed1 	bl	8014b48 <memset>
 8012da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012da8:	4a0c      	ldr	r2, [pc, #48]	; (8012ddc <prvInitialiseNewTask+0x130>)
 8012daa:	651a      	str	r2, [r3, #80]	; 0x50
 8012dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dae:	4a0c      	ldr	r2, [pc, #48]	; (8012de0 <prvInitialiseNewTask+0x134>)
 8012db0:	655a      	str	r2, [r3, #84]	; 0x54
 8012db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012db4:	4a0b      	ldr	r2, [pc, #44]	; (8012de4 <prvInitialiseNewTask+0x138>)
 8012db6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012db8:	683a      	ldr	r2, [r7, #0]
 8012dba:	68f9      	ldr	r1, [r7, #12]
 8012dbc:	69b8      	ldr	r0, [r7, #24]
 8012dbe:	f000 fddd 	bl	801397c <pxPortInitialiseStack>
 8012dc2:	4602      	mov	r2, r0
 8012dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dc6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d002      	beq.n	8012dd4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012dd2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012dd4:	bf00      	nop
 8012dd6:	3720      	adds	r7, #32
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	bd80      	pop	{r7, pc}
 8012ddc:	08017b8c 	.word	0x08017b8c
 8012de0:	08017bac 	.word	0x08017bac
 8012de4:	08017b6c 	.word	0x08017b6c

08012de8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b082      	sub	sp, #8
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012df0:	f000 fef0 	bl	8013bd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012df4:	4b2a      	ldr	r3, [pc, #168]	; (8012ea0 <prvAddNewTaskToReadyList+0xb8>)
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	3301      	adds	r3, #1
 8012dfa:	4a29      	ldr	r2, [pc, #164]	; (8012ea0 <prvAddNewTaskToReadyList+0xb8>)
 8012dfc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012dfe:	4b29      	ldr	r3, [pc, #164]	; (8012ea4 <prvAddNewTaskToReadyList+0xbc>)
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d109      	bne.n	8012e1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012e06:	4a27      	ldr	r2, [pc, #156]	; (8012ea4 <prvAddNewTaskToReadyList+0xbc>)
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012e0c:	4b24      	ldr	r3, [pc, #144]	; (8012ea0 <prvAddNewTaskToReadyList+0xb8>)
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	2b01      	cmp	r3, #1
 8012e12:	d110      	bne.n	8012e36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012e14:	f000 fbe6 	bl	80135e4 <prvInitialiseTaskLists>
 8012e18:	e00d      	b.n	8012e36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012e1a:	4b23      	ldr	r3, [pc, #140]	; (8012ea8 <prvAddNewTaskToReadyList+0xc0>)
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d109      	bne.n	8012e36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012e22:	4b20      	ldr	r3, [pc, #128]	; (8012ea4 <prvAddNewTaskToReadyList+0xbc>)
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	d802      	bhi.n	8012e36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012e30:	4a1c      	ldr	r2, [pc, #112]	; (8012ea4 <prvAddNewTaskToReadyList+0xbc>)
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012e36:	4b1d      	ldr	r3, [pc, #116]	; (8012eac <prvAddNewTaskToReadyList+0xc4>)
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	3301      	adds	r3, #1
 8012e3c:	4a1b      	ldr	r2, [pc, #108]	; (8012eac <prvAddNewTaskToReadyList+0xc4>)
 8012e3e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e44:	2201      	movs	r2, #1
 8012e46:	409a      	lsls	r2, r3
 8012e48:	4b19      	ldr	r3, [pc, #100]	; (8012eb0 <prvAddNewTaskToReadyList+0xc8>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	4313      	orrs	r3, r2
 8012e4e:	4a18      	ldr	r2, [pc, #96]	; (8012eb0 <prvAddNewTaskToReadyList+0xc8>)
 8012e50:	6013      	str	r3, [r2, #0]
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e56:	4613      	mov	r3, r2
 8012e58:	009b      	lsls	r3, r3, #2
 8012e5a:	4413      	add	r3, r2
 8012e5c:	009b      	lsls	r3, r3, #2
 8012e5e:	4a15      	ldr	r2, [pc, #84]	; (8012eb4 <prvAddNewTaskToReadyList+0xcc>)
 8012e60:	441a      	add	r2, r3
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	3304      	adds	r3, #4
 8012e66:	4619      	mov	r1, r3
 8012e68:	4610      	mov	r0, r2
 8012e6a:	f7ff f8b2 	bl	8011fd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012e6e:	f000 fee1 	bl	8013c34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012e72:	4b0d      	ldr	r3, [pc, #52]	; (8012ea8 <prvAddNewTaskToReadyList+0xc0>)
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d00e      	beq.n	8012e98 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012e7a:	4b0a      	ldr	r3, [pc, #40]	; (8012ea4 <prvAddNewTaskToReadyList+0xbc>)
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e84:	429a      	cmp	r2, r3
 8012e86:	d207      	bcs.n	8012e98 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012e88:	4b0b      	ldr	r3, [pc, #44]	; (8012eb8 <prvAddNewTaskToReadyList+0xd0>)
 8012e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e8e:	601a      	str	r2, [r3, #0]
 8012e90:	f3bf 8f4f 	dsb	sy
 8012e94:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012e98:	bf00      	nop
 8012e9a:	3708      	adds	r7, #8
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	bd80      	pop	{r7, pc}
 8012ea0:	20002408 	.word	0x20002408
 8012ea4:	20002308 	.word	0x20002308
 8012ea8:	20002414 	.word	0x20002414
 8012eac:	20002424 	.word	0x20002424
 8012eb0:	20002410 	.word	0x20002410
 8012eb4:	2000230c 	.word	0x2000230c
 8012eb8:	e000ed04 	.word	0xe000ed04

08012ebc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b084      	sub	sp, #16
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d017      	beq.n	8012efe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012ece:	4b13      	ldr	r3, [pc, #76]	; (8012f1c <vTaskDelay+0x60>)
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d00a      	beq.n	8012eec <vTaskDelay+0x30>
	__asm volatile
 8012ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eda:	f383 8811 	msr	BASEPRI, r3
 8012ede:	f3bf 8f6f 	isb	sy
 8012ee2:	f3bf 8f4f 	dsb	sy
 8012ee6:	60bb      	str	r3, [r7, #8]
}
 8012ee8:	bf00      	nop
 8012eea:	e7fe      	b.n	8012eea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012eec:	f000 f884 	bl	8012ff8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012ef0:	2100      	movs	r1, #0
 8012ef2:	6878      	ldr	r0, [r7, #4]
 8012ef4:	f000 fcdc 	bl	80138b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012ef8:	f000 f88c 	bl	8013014 <xTaskResumeAll>
 8012efc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d107      	bne.n	8012f14 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8012f04:	4b06      	ldr	r3, [pc, #24]	; (8012f20 <vTaskDelay+0x64>)
 8012f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f0a:	601a      	str	r2, [r3, #0]
 8012f0c:	f3bf 8f4f 	dsb	sy
 8012f10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012f14:	bf00      	nop
 8012f16:	3710      	adds	r7, #16
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}
 8012f1c:	20002430 	.word	0x20002430
 8012f20:	e000ed04 	.word	0xe000ed04

08012f24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b08a      	sub	sp, #40	; 0x28
 8012f28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012f2e:	2300      	movs	r3, #0
 8012f30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012f32:	463a      	mov	r2, r7
 8012f34:	1d39      	adds	r1, r7, #4
 8012f36:	f107 0308 	add.w	r3, r7, #8
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	f7ee f9d0 	bl	80012e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012f40:	6839      	ldr	r1, [r7, #0]
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	68ba      	ldr	r2, [r7, #8]
 8012f46:	9202      	str	r2, [sp, #8]
 8012f48:	9301      	str	r3, [sp, #4]
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	9300      	str	r3, [sp, #0]
 8012f4e:	2300      	movs	r3, #0
 8012f50:	460a      	mov	r2, r1
 8012f52:	4921      	ldr	r1, [pc, #132]	; (8012fd8 <vTaskStartScheduler+0xb4>)
 8012f54:	4821      	ldr	r0, [pc, #132]	; (8012fdc <vTaskStartScheduler+0xb8>)
 8012f56:	f7ff fe07 	bl	8012b68 <xTaskCreateStatic>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	4a20      	ldr	r2, [pc, #128]	; (8012fe0 <vTaskStartScheduler+0xbc>)
 8012f5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012f60:	4b1f      	ldr	r3, [pc, #124]	; (8012fe0 <vTaskStartScheduler+0xbc>)
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d002      	beq.n	8012f6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012f68:	2301      	movs	r3, #1
 8012f6a:	617b      	str	r3, [r7, #20]
 8012f6c:	e001      	b.n	8012f72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012f6e:	2300      	movs	r3, #0
 8012f70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012f72:	697b      	ldr	r3, [r7, #20]
 8012f74:	2b01      	cmp	r3, #1
 8012f76:	d11b      	bne.n	8012fb0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8012f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f7c:	f383 8811 	msr	BASEPRI, r3
 8012f80:	f3bf 8f6f 	isb	sy
 8012f84:	f3bf 8f4f 	dsb	sy
 8012f88:	613b      	str	r3, [r7, #16]
}
 8012f8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012f8c:	4b15      	ldr	r3, [pc, #84]	; (8012fe4 <vTaskStartScheduler+0xc0>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	334c      	adds	r3, #76	; 0x4c
 8012f92:	4a15      	ldr	r2, [pc, #84]	; (8012fe8 <vTaskStartScheduler+0xc4>)
 8012f94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012f96:	4b15      	ldr	r3, [pc, #84]	; (8012fec <vTaskStartScheduler+0xc8>)
 8012f98:	f04f 32ff 	mov.w	r2, #4294967295
 8012f9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012f9e:	4b14      	ldr	r3, [pc, #80]	; (8012ff0 <vTaskStartScheduler+0xcc>)
 8012fa0:	2201      	movs	r2, #1
 8012fa2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012fa4:	4b13      	ldr	r3, [pc, #76]	; (8012ff4 <vTaskStartScheduler+0xd0>)
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012faa:	f000 fd71 	bl	8013a90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012fae:	e00e      	b.n	8012fce <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012fb0:	697b      	ldr	r3, [r7, #20]
 8012fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fb6:	d10a      	bne.n	8012fce <vTaskStartScheduler+0xaa>
	__asm volatile
 8012fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fbc:	f383 8811 	msr	BASEPRI, r3
 8012fc0:	f3bf 8f6f 	isb	sy
 8012fc4:	f3bf 8f4f 	dsb	sy
 8012fc8:	60fb      	str	r3, [r7, #12]
}
 8012fca:	bf00      	nop
 8012fcc:	e7fe      	b.n	8012fcc <vTaskStartScheduler+0xa8>
}
 8012fce:	bf00      	nop
 8012fd0:	3718      	adds	r7, #24
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	080176f8 	.word	0x080176f8
 8012fdc:	080135b5 	.word	0x080135b5
 8012fe0:	2000242c 	.word	0x2000242c
 8012fe4:	20002308 	.word	0x20002308
 8012fe8:	200002b4 	.word	0x200002b4
 8012fec:	20002428 	.word	0x20002428
 8012ff0:	20002414 	.word	0x20002414
 8012ff4:	2000240c 	.word	0x2000240c

08012ff8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012ff8:	b480      	push	{r7}
 8012ffa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012ffc:	4b04      	ldr	r3, [pc, #16]	; (8013010 <vTaskSuspendAll+0x18>)
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	3301      	adds	r3, #1
 8013002:	4a03      	ldr	r2, [pc, #12]	; (8013010 <vTaskSuspendAll+0x18>)
 8013004:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013006:	bf00      	nop
 8013008:	46bd      	mov	sp, r7
 801300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300e:	4770      	bx	lr
 8013010:	20002430 	.word	0x20002430

08013014 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b084      	sub	sp, #16
 8013018:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801301a:	2300      	movs	r3, #0
 801301c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801301e:	2300      	movs	r3, #0
 8013020:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013022:	4b41      	ldr	r3, [pc, #260]	; (8013128 <xTaskResumeAll+0x114>)
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d10a      	bne.n	8013040 <xTaskResumeAll+0x2c>
	__asm volatile
 801302a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801302e:	f383 8811 	msr	BASEPRI, r3
 8013032:	f3bf 8f6f 	isb	sy
 8013036:	f3bf 8f4f 	dsb	sy
 801303a:	603b      	str	r3, [r7, #0]
}
 801303c:	bf00      	nop
 801303e:	e7fe      	b.n	801303e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013040:	f000 fdc8 	bl	8013bd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013044:	4b38      	ldr	r3, [pc, #224]	; (8013128 <xTaskResumeAll+0x114>)
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	3b01      	subs	r3, #1
 801304a:	4a37      	ldr	r2, [pc, #220]	; (8013128 <xTaskResumeAll+0x114>)
 801304c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801304e:	4b36      	ldr	r3, [pc, #216]	; (8013128 <xTaskResumeAll+0x114>)
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d161      	bne.n	801311a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013056:	4b35      	ldr	r3, [pc, #212]	; (801312c <xTaskResumeAll+0x118>)
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d05d      	beq.n	801311a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801305e:	e02e      	b.n	80130be <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013060:	4b33      	ldr	r3, [pc, #204]	; (8013130 <xTaskResumeAll+0x11c>)
 8013062:	68db      	ldr	r3, [r3, #12]
 8013064:	68db      	ldr	r3, [r3, #12]
 8013066:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	3318      	adds	r3, #24
 801306c:	4618      	mov	r0, r3
 801306e:	f7ff f80d 	bl	801208c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	3304      	adds	r3, #4
 8013076:	4618      	mov	r0, r3
 8013078:	f7ff f808 	bl	801208c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013080:	2201      	movs	r2, #1
 8013082:	409a      	lsls	r2, r3
 8013084:	4b2b      	ldr	r3, [pc, #172]	; (8013134 <xTaskResumeAll+0x120>)
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	4313      	orrs	r3, r2
 801308a:	4a2a      	ldr	r2, [pc, #168]	; (8013134 <xTaskResumeAll+0x120>)
 801308c:	6013      	str	r3, [r2, #0]
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013092:	4613      	mov	r3, r2
 8013094:	009b      	lsls	r3, r3, #2
 8013096:	4413      	add	r3, r2
 8013098:	009b      	lsls	r3, r3, #2
 801309a:	4a27      	ldr	r2, [pc, #156]	; (8013138 <xTaskResumeAll+0x124>)
 801309c:	441a      	add	r2, r3
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	3304      	adds	r3, #4
 80130a2:	4619      	mov	r1, r3
 80130a4:	4610      	mov	r0, r2
 80130a6:	f7fe ff94 	bl	8011fd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130ae:	4b23      	ldr	r3, [pc, #140]	; (801313c <xTaskResumeAll+0x128>)
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130b4:	429a      	cmp	r2, r3
 80130b6:	d302      	bcc.n	80130be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80130b8:	4b21      	ldr	r3, [pc, #132]	; (8013140 <xTaskResumeAll+0x12c>)
 80130ba:	2201      	movs	r2, #1
 80130bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80130be:	4b1c      	ldr	r3, [pc, #112]	; (8013130 <xTaskResumeAll+0x11c>)
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d1cc      	bne.n	8013060 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d001      	beq.n	80130d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80130cc:	f000 fb2c 	bl	8013728 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80130d0:	4b1c      	ldr	r3, [pc, #112]	; (8013144 <xTaskResumeAll+0x130>)
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d010      	beq.n	80130fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80130dc:	f000 f846 	bl	801316c <xTaskIncrementTick>
 80130e0:	4603      	mov	r3, r0
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d002      	beq.n	80130ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80130e6:	4b16      	ldr	r3, [pc, #88]	; (8013140 <xTaskResumeAll+0x12c>)
 80130e8:	2201      	movs	r2, #1
 80130ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	3b01      	subs	r3, #1
 80130f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d1f1      	bne.n	80130dc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80130f8:	4b12      	ldr	r3, [pc, #72]	; (8013144 <xTaskResumeAll+0x130>)
 80130fa:	2200      	movs	r2, #0
 80130fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80130fe:	4b10      	ldr	r3, [pc, #64]	; (8013140 <xTaskResumeAll+0x12c>)
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d009      	beq.n	801311a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013106:	2301      	movs	r3, #1
 8013108:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801310a:	4b0f      	ldr	r3, [pc, #60]	; (8013148 <xTaskResumeAll+0x134>)
 801310c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013110:	601a      	str	r2, [r3, #0]
 8013112:	f3bf 8f4f 	dsb	sy
 8013116:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801311a:	f000 fd8b 	bl	8013c34 <vPortExitCritical>

	return xAlreadyYielded;
 801311e:	68bb      	ldr	r3, [r7, #8]
}
 8013120:	4618      	mov	r0, r3
 8013122:	3710      	adds	r7, #16
 8013124:	46bd      	mov	sp, r7
 8013126:	bd80      	pop	{r7, pc}
 8013128:	20002430 	.word	0x20002430
 801312c:	20002408 	.word	0x20002408
 8013130:	200023c8 	.word	0x200023c8
 8013134:	20002410 	.word	0x20002410
 8013138:	2000230c 	.word	0x2000230c
 801313c:	20002308 	.word	0x20002308
 8013140:	2000241c 	.word	0x2000241c
 8013144:	20002418 	.word	0x20002418
 8013148:	e000ed04 	.word	0xe000ed04

0801314c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801314c:	b480      	push	{r7}
 801314e:	b083      	sub	sp, #12
 8013150:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013152:	4b05      	ldr	r3, [pc, #20]	; (8013168 <xTaskGetTickCount+0x1c>)
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013158:	687b      	ldr	r3, [r7, #4]
}
 801315a:	4618      	mov	r0, r3
 801315c:	370c      	adds	r7, #12
 801315e:	46bd      	mov	sp, r7
 8013160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013164:	4770      	bx	lr
 8013166:	bf00      	nop
 8013168:	2000240c 	.word	0x2000240c

0801316c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b086      	sub	sp, #24
 8013170:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013172:	2300      	movs	r3, #0
 8013174:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013176:	4b4e      	ldr	r3, [pc, #312]	; (80132b0 <xTaskIncrementTick+0x144>)
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	2b00      	cmp	r3, #0
 801317c:	f040 808e 	bne.w	801329c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013180:	4b4c      	ldr	r3, [pc, #304]	; (80132b4 <xTaskIncrementTick+0x148>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	3301      	adds	r3, #1
 8013186:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013188:	4a4a      	ldr	r2, [pc, #296]	; (80132b4 <xTaskIncrementTick+0x148>)
 801318a:	693b      	ldr	r3, [r7, #16]
 801318c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801318e:	693b      	ldr	r3, [r7, #16]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d120      	bne.n	80131d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013194:	4b48      	ldr	r3, [pc, #288]	; (80132b8 <xTaskIncrementTick+0x14c>)
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d00a      	beq.n	80131b4 <xTaskIncrementTick+0x48>
	__asm volatile
 801319e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131a2:	f383 8811 	msr	BASEPRI, r3
 80131a6:	f3bf 8f6f 	isb	sy
 80131aa:	f3bf 8f4f 	dsb	sy
 80131ae:	603b      	str	r3, [r7, #0]
}
 80131b0:	bf00      	nop
 80131b2:	e7fe      	b.n	80131b2 <xTaskIncrementTick+0x46>
 80131b4:	4b40      	ldr	r3, [pc, #256]	; (80132b8 <xTaskIncrementTick+0x14c>)
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	60fb      	str	r3, [r7, #12]
 80131ba:	4b40      	ldr	r3, [pc, #256]	; (80132bc <xTaskIncrementTick+0x150>)
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	4a3e      	ldr	r2, [pc, #248]	; (80132b8 <xTaskIncrementTick+0x14c>)
 80131c0:	6013      	str	r3, [r2, #0]
 80131c2:	4a3e      	ldr	r2, [pc, #248]	; (80132bc <xTaskIncrementTick+0x150>)
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	6013      	str	r3, [r2, #0]
 80131c8:	4b3d      	ldr	r3, [pc, #244]	; (80132c0 <xTaskIncrementTick+0x154>)
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	3301      	adds	r3, #1
 80131ce:	4a3c      	ldr	r2, [pc, #240]	; (80132c0 <xTaskIncrementTick+0x154>)
 80131d0:	6013      	str	r3, [r2, #0]
 80131d2:	f000 faa9 	bl	8013728 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80131d6:	4b3b      	ldr	r3, [pc, #236]	; (80132c4 <xTaskIncrementTick+0x158>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	693a      	ldr	r2, [r7, #16]
 80131dc:	429a      	cmp	r2, r3
 80131de:	d348      	bcc.n	8013272 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80131e0:	4b35      	ldr	r3, [pc, #212]	; (80132b8 <xTaskIncrementTick+0x14c>)
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d104      	bne.n	80131f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80131ea:	4b36      	ldr	r3, [pc, #216]	; (80132c4 <xTaskIncrementTick+0x158>)
 80131ec:	f04f 32ff 	mov.w	r2, #4294967295
 80131f0:	601a      	str	r2, [r3, #0]
					break;
 80131f2:	e03e      	b.n	8013272 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131f4:	4b30      	ldr	r3, [pc, #192]	; (80132b8 <xTaskIncrementTick+0x14c>)
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	68db      	ldr	r3, [r3, #12]
 80131fa:	68db      	ldr	r3, [r3, #12]
 80131fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80131fe:	68bb      	ldr	r3, [r7, #8]
 8013200:	685b      	ldr	r3, [r3, #4]
 8013202:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013204:	693a      	ldr	r2, [r7, #16]
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	429a      	cmp	r2, r3
 801320a:	d203      	bcs.n	8013214 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801320c:	4a2d      	ldr	r2, [pc, #180]	; (80132c4 <xTaskIncrementTick+0x158>)
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013212:	e02e      	b.n	8013272 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	3304      	adds	r3, #4
 8013218:	4618      	mov	r0, r3
 801321a:	f7fe ff37 	bl	801208c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013222:	2b00      	cmp	r3, #0
 8013224:	d004      	beq.n	8013230 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	3318      	adds	r3, #24
 801322a:	4618      	mov	r0, r3
 801322c:	f7fe ff2e 	bl	801208c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013230:	68bb      	ldr	r3, [r7, #8]
 8013232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013234:	2201      	movs	r2, #1
 8013236:	409a      	lsls	r2, r3
 8013238:	4b23      	ldr	r3, [pc, #140]	; (80132c8 <xTaskIncrementTick+0x15c>)
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	4313      	orrs	r3, r2
 801323e:	4a22      	ldr	r2, [pc, #136]	; (80132c8 <xTaskIncrementTick+0x15c>)
 8013240:	6013      	str	r3, [r2, #0]
 8013242:	68bb      	ldr	r3, [r7, #8]
 8013244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013246:	4613      	mov	r3, r2
 8013248:	009b      	lsls	r3, r3, #2
 801324a:	4413      	add	r3, r2
 801324c:	009b      	lsls	r3, r3, #2
 801324e:	4a1f      	ldr	r2, [pc, #124]	; (80132cc <xTaskIncrementTick+0x160>)
 8013250:	441a      	add	r2, r3
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	3304      	adds	r3, #4
 8013256:	4619      	mov	r1, r3
 8013258:	4610      	mov	r0, r2
 801325a:	f7fe feba 	bl	8011fd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013262:	4b1b      	ldr	r3, [pc, #108]	; (80132d0 <xTaskIncrementTick+0x164>)
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013268:	429a      	cmp	r2, r3
 801326a:	d3b9      	bcc.n	80131e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801326c:	2301      	movs	r3, #1
 801326e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013270:	e7b6      	b.n	80131e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013272:	4b17      	ldr	r3, [pc, #92]	; (80132d0 <xTaskIncrementTick+0x164>)
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013278:	4914      	ldr	r1, [pc, #80]	; (80132cc <xTaskIncrementTick+0x160>)
 801327a:	4613      	mov	r3, r2
 801327c:	009b      	lsls	r3, r3, #2
 801327e:	4413      	add	r3, r2
 8013280:	009b      	lsls	r3, r3, #2
 8013282:	440b      	add	r3, r1
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	2b01      	cmp	r3, #1
 8013288:	d901      	bls.n	801328e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801328a:	2301      	movs	r3, #1
 801328c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801328e:	4b11      	ldr	r3, [pc, #68]	; (80132d4 <xTaskIncrementTick+0x168>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d007      	beq.n	80132a6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8013296:	2301      	movs	r3, #1
 8013298:	617b      	str	r3, [r7, #20]
 801329a:	e004      	b.n	80132a6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801329c:	4b0e      	ldr	r3, [pc, #56]	; (80132d8 <xTaskIncrementTick+0x16c>)
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	3301      	adds	r3, #1
 80132a2:	4a0d      	ldr	r2, [pc, #52]	; (80132d8 <xTaskIncrementTick+0x16c>)
 80132a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80132a6:	697b      	ldr	r3, [r7, #20]
}
 80132a8:	4618      	mov	r0, r3
 80132aa:	3718      	adds	r7, #24
 80132ac:	46bd      	mov	sp, r7
 80132ae:	bd80      	pop	{r7, pc}
 80132b0:	20002430 	.word	0x20002430
 80132b4:	2000240c 	.word	0x2000240c
 80132b8:	200023c0 	.word	0x200023c0
 80132bc:	200023c4 	.word	0x200023c4
 80132c0:	20002420 	.word	0x20002420
 80132c4:	20002428 	.word	0x20002428
 80132c8:	20002410 	.word	0x20002410
 80132cc:	2000230c 	.word	0x2000230c
 80132d0:	20002308 	.word	0x20002308
 80132d4:	2000241c 	.word	0x2000241c
 80132d8:	20002418 	.word	0x20002418

080132dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80132dc:	b480      	push	{r7}
 80132de:	b087      	sub	sp, #28
 80132e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80132e2:	4b29      	ldr	r3, [pc, #164]	; (8013388 <vTaskSwitchContext+0xac>)
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d003      	beq.n	80132f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80132ea:	4b28      	ldr	r3, [pc, #160]	; (801338c <vTaskSwitchContext+0xb0>)
 80132ec:	2201      	movs	r2, #1
 80132ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80132f0:	e044      	b.n	801337c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80132f2:	4b26      	ldr	r3, [pc, #152]	; (801338c <vTaskSwitchContext+0xb0>)
 80132f4:	2200      	movs	r2, #0
 80132f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132f8:	4b25      	ldr	r3, [pc, #148]	; (8013390 <vTaskSwitchContext+0xb4>)
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	fab3 f383 	clz	r3, r3
 8013304:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013306:	7afb      	ldrb	r3, [r7, #11]
 8013308:	f1c3 031f 	rsb	r3, r3, #31
 801330c:	617b      	str	r3, [r7, #20]
 801330e:	4921      	ldr	r1, [pc, #132]	; (8013394 <vTaskSwitchContext+0xb8>)
 8013310:	697a      	ldr	r2, [r7, #20]
 8013312:	4613      	mov	r3, r2
 8013314:	009b      	lsls	r3, r3, #2
 8013316:	4413      	add	r3, r2
 8013318:	009b      	lsls	r3, r3, #2
 801331a:	440b      	add	r3, r1
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d10a      	bne.n	8013338 <vTaskSwitchContext+0x5c>
	__asm volatile
 8013322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013326:	f383 8811 	msr	BASEPRI, r3
 801332a:	f3bf 8f6f 	isb	sy
 801332e:	f3bf 8f4f 	dsb	sy
 8013332:	607b      	str	r3, [r7, #4]
}
 8013334:	bf00      	nop
 8013336:	e7fe      	b.n	8013336 <vTaskSwitchContext+0x5a>
 8013338:	697a      	ldr	r2, [r7, #20]
 801333a:	4613      	mov	r3, r2
 801333c:	009b      	lsls	r3, r3, #2
 801333e:	4413      	add	r3, r2
 8013340:	009b      	lsls	r3, r3, #2
 8013342:	4a14      	ldr	r2, [pc, #80]	; (8013394 <vTaskSwitchContext+0xb8>)
 8013344:	4413      	add	r3, r2
 8013346:	613b      	str	r3, [r7, #16]
 8013348:	693b      	ldr	r3, [r7, #16]
 801334a:	685b      	ldr	r3, [r3, #4]
 801334c:	685a      	ldr	r2, [r3, #4]
 801334e:	693b      	ldr	r3, [r7, #16]
 8013350:	605a      	str	r2, [r3, #4]
 8013352:	693b      	ldr	r3, [r7, #16]
 8013354:	685a      	ldr	r2, [r3, #4]
 8013356:	693b      	ldr	r3, [r7, #16]
 8013358:	3308      	adds	r3, #8
 801335a:	429a      	cmp	r2, r3
 801335c:	d104      	bne.n	8013368 <vTaskSwitchContext+0x8c>
 801335e:	693b      	ldr	r3, [r7, #16]
 8013360:	685b      	ldr	r3, [r3, #4]
 8013362:	685a      	ldr	r2, [r3, #4]
 8013364:	693b      	ldr	r3, [r7, #16]
 8013366:	605a      	str	r2, [r3, #4]
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	685b      	ldr	r3, [r3, #4]
 801336c:	68db      	ldr	r3, [r3, #12]
 801336e:	4a0a      	ldr	r2, [pc, #40]	; (8013398 <vTaskSwitchContext+0xbc>)
 8013370:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013372:	4b09      	ldr	r3, [pc, #36]	; (8013398 <vTaskSwitchContext+0xbc>)
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	334c      	adds	r3, #76	; 0x4c
 8013378:	4a08      	ldr	r2, [pc, #32]	; (801339c <vTaskSwitchContext+0xc0>)
 801337a:	6013      	str	r3, [r2, #0]
}
 801337c:	bf00      	nop
 801337e:	371c      	adds	r7, #28
 8013380:	46bd      	mov	sp, r7
 8013382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013386:	4770      	bx	lr
 8013388:	20002430 	.word	0x20002430
 801338c:	2000241c 	.word	0x2000241c
 8013390:	20002410 	.word	0x20002410
 8013394:	2000230c 	.word	0x2000230c
 8013398:	20002308 	.word	0x20002308
 801339c:	200002b4 	.word	0x200002b4

080133a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b084      	sub	sp, #16
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
 80133a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d10a      	bne.n	80133c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80133b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133b4:	f383 8811 	msr	BASEPRI, r3
 80133b8:	f3bf 8f6f 	isb	sy
 80133bc:	f3bf 8f4f 	dsb	sy
 80133c0:	60fb      	str	r3, [r7, #12]
}
 80133c2:	bf00      	nop
 80133c4:	e7fe      	b.n	80133c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80133c6:	4b07      	ldr	r3, [pc, #28]	; (80133e4 <vTaskPlaceOnEventList+0x44>)
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	3318      	adds	r3, #24
 80133cc:	4619      	mov	r1, r3
 80133ce:	6878      	ldr	r0, [r7, #4]
 80133d0:	f7fe fe23 	bl	801201a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80133d4:	2101      	movs	r1, #1
 80133d6:	6838      	ldr	r0, [r7, #0]
 80133d8:	f000 fa6a 	bl	80138b0 <prvAddCurrentTaskToDelayedList>
}
 80133dc:	bf00      	nop
 80133de:	3710      	adds	r7, #16
 80133e0:	46bd      	mov	sp, r7
 80133e2:	bd80      	pop	{r7, pc}
 80133e4:	20002308 	.word	0x20002308

080133e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b086      	sub	sp, #24
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	68db      	ldr	r3, [r3, #12]
 80133f4:	68db      	ldr	r3, [r3, #12]
 80133f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80133f8:	693b      	ldr	r3, [r7, #16]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d10a      	bne.n	8013414 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80133fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013402:	f383 8811 	msr	BASEPRI, r3
 8013406:	f3bf 8f6f 	isb	sy
 801340a:	f3bf 8f4f 	dsb	sy
 801340e:	60fb      	str	r3, [r7, #12]
}
 8013410:	bf00      	nop
 8013412:	e7fe      	b.n	8013412 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013414:	693b      	ldr	r3, [r7, #16]
 8013416:	3318      	adds	r3, #24
 8013418:	4618      	mov	r0, r3
 801341a:	f7fe fe37 	bl	801208c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801341e:	4b1d      	ldr	r3, [pc, #116]	; (8013494 <xTaskRemoveFromEventList+0xac>)
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d11c      	bne.n	8013460 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013426:	693b      	ldr	r3, [r7, #16]
 8013428:	3304      	adds	r3, #4
 801342a:	4618      	mov	r0, r3
 801342c:	f7fe fe2e 	bl	801208c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013430:	693b      	ldr	r3, [r7, #16]
 8013432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013434:	2201      	movs	r2, #1
 8013436:	409a      	lsls	r2, r3
 8013438:	4b17      	ldr	r3, [pc, #92]	; (8013498 <xTaskRemoveFromEventList+0xb0>)
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	4313      	orrs	r3, r2
 801343e:	4a16      	ldr	r2, [pc, #88]	; (8013498 <xTaskRemoveFromEventList+0xb0>)
 8013440:	6013      	str	r3, [r2, #0]
 8013442:	693b      	ldr	r3, [r7, #16]
 8013444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013446:	4613      	mov	r3, r2
 8013448:	009b      	lsls	r3, r3, #2
 801344a:	4413      	add	r3, r2
 801344c:	009b      	lsls	r3, r3, #2
 801344e:	4a13      	ldr	r2, [pc, #76]	; (801349c <xTaskRemoveFromEventList+0xb4>)
 8013450:	441a      	add	r2, r3
 8013452:	693b      	ldr	r3, [r7, #16]
 8013454:	3304      	adds	r3, #4
 8013456:	4619      	mov	r1, r3
 8013458:	4610      	mov	r0, r2
 801345a:	f7fe fdba 	bl	8011fd2 <vListInsertEnd>
 801345e:	e005      	b.n	801346c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013460:	693b      	ldr	r3, [r7, #16]
 8013462:	3318      	adds	r3, #24
 8013464:	4619      	mov	r1, r3
 8013466:	480e      	ldr	r0, [pc, #56]	; (80134a0 <xTaskRemoveFromEventList+0xb8>)
 8013468:	f7fe fdb3 	bl	8011fd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801346c:	693b      	ldr	r3, [r7, #16]
 801346e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013470:	4b0c      	ldr	r3, [pc, #48]	; (80134a4 <xTaskRemoveFromEventList+0xbc>)
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013476:	429a      	cmp	r2, r3
 8013478:	d905      	bls.n	8013486 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801347a:	2301      	movs	r3, #1
 801347c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801347e:	4b0a      	ldr	r3, [pc, #40]	; (80134a8 <xTaskRemoveFromEventList+0xc0>)
 8013480:	2201      	movs	r2, #1
 8013482:	601a      	str	r2, [r3, #0]
 8013484:	e001      	b.n	801348a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8013486:	2300      	movs	r3, #0
 8013488:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801348a:	697b      	ldr	r3, [r7, #20]
}
 801348c:	4618      	mov	r0, r3
 801348e:	3718      	adds	r7, #24
 8013490:	46bd      	mov	sp, r7
 8013492:	bd80      	pop	{r7, pc}
 8013494:	20002430 	.word	0x20002430
 8013498:	20002410 	.word	0x20002410
 801349c:	2000230c 	.word	0x2000230c
 80134a0:	200023c8 	.word	0x200023c8
 80134a4:	20002308 	.word	0x20002308
 80134a8:	2000241c 	.word	0x2000241c

080134ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80134ac:	b480      	push	{r7}
 80134ae:	b083      	sub	sp, #12
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80134b4:	4b06      	ldr	r3, [pc, #24]	; (80134d0 <vTaskInternalSetTimeOutState+0x24>)
 80134b6:	681a      	ldr	r2, [r3, #0]
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80134bc:	4b05      	ldr	r3, [pc, #20]	; (80134d4 <vTaskInternalSetTimeOutState+0x28>)
 80134be:	681a      	ldr	r2, [r3, #0]
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	605a      	str	r2, [r3, #4]
}
 80134c4:	bf00      	nop
 80134c6:	370c      	adds	r7, #12
 80134c8:	46bd      	mov	sp, r7
 80134ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ce:	4770      	bx	lr
 80134d0:	20002420 	.word	0x20002420
 80134d4:	2000240c 	.word	0x2000240c

080134d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b088      	sub	sp, #32
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
 80134e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d10a      	bne.n	80134fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80134e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134ec:	f383 8811 	msr	BASEPRI, r3
 80134f0:	f3bf 8f6f 	isb	sy
 80134f4:	f3bf 8f4f 	dsb	sy
 80134f8:	613b      	str	r3, [r7, #16]
}
 80134fa:	bf00      	nop
 80134fc:	e7fe      	b.n	80134fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80134fe:	683b      	ldr	r3, [r7, #0]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d10a      	bne.n	801351a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013508:	f383 8811 	msr	BASEPRI, r3
 801350c:	f3bf 8f6f 	isb	sy
 8013510:	f3bf 8f4f 	dsb	sy
 8013514:	60fb      	str	r3, [r7, #12]
}
 8013516:	bf00      	nop
 8013518:	e7fe      	b.n	8013518 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801351a:	f000 fb5b 	bl	8013bd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801351e:	4b1d      	ldr	r3, [pc, #116]	; (8013594 <xTaskCheckForTimeOut+0xbc>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	685b      	ldr	r3, [r3, #4]
 8013528:	69ba      	ldr	r2, [r7, #24]
 801352a:	1ad3      	subs	r3, r2, r3
 801352c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013536:	d102      	bne.n	801353e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013538:	2300      	movs	r3, #0
 801353a:	61fb      	str	r3, [r7, #28]
 801353c:	e023      	b.n	8013586 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	681a      	ldr	r2, [r3, #0]
 8013542:	4b15      	ldr	r3, [pc, #84]	; (8013598 <xTaskCheckForTimeOut+0xc0>)
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	429a      	cmp	r2, r3
 8013548:	d007      	beq.n	801355a <xTaskCheckForTimeOut+0x82>
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	685b      	ldr	r3, [r3, #4]
 801354e:	69ba      	ldr	r2, [r7, #24]
 8013550:	429a      	cmp	r2, r3
 8013552:	d302      	bcc.n	801355a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013554:	2301      	movs	r3, #1
 8013556:	61fb      	str	r3, [r7, #28]
 8013558:	e015      	b.n	8013586 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	697a      	ldr	r2, [r7, #20]
 8013560:	429a      	cmp	r2, r3
 8013562:	d20b      	bcs.n	801357c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013564:	683b      	ldr	r3, [r7, #0]
 8013566:	681a      	ldr	r2, [r3, #0]
 8013568:	697b      	ldr	r3, [r7, #20]
 801356a:	1ad2      	subs	r2, r2, r3
 801356c:	683b      	ldr	r3, [r7, #0]
 801356e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013570:	6878      	ldr	r0, [r7, #4]
 8013572:	f7ff ff9b 	bl	80134ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013576:	2300      	movs	r3, #0
 8013578:	61fb      	str	r3, [r7, #28]
 801357a:	e004      	b.n	8013586 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801357c:	683b      	ldr	r3, [r7, #0]
 801357e:	2200      	movs	r2, #0
 8013580:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013582:	2301      	movs	r3, #1
 8013584:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013586:	f000 fb55 	bl	8013c34 <vPortExitCritical>

	return xReturn;
 801358a:	69fb      	ldr	r3, [r7, #28]
}
 801358c:	4618      	mov	r0, r3
 801358e:	3720      	adds	r7, #32
 8013590:	46bd      	mov	sp, r7
 8013592:	bd80      	pop	{r7, pc}
 8013594:	2000240c 	.word	0x2000240c
 8013598:	20002420 	.word	0x20002420

0801359c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801359c:	b480      	push	{r7}
 801359e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80135a0:	4b03      	ldr	r3, [pc, #12]	; (80135b0 <vTaskMissedYield+0x14>)
 80135a2:	2201      	movs	r2, #1
 80135a4:	601a      	str	r2, [r3, #0]
}
 80135a6:	bf00      	nop
 80135a8:	46bd      	mov	sp, r7
 80135aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ae:	4770      	bx	lr
 80135b0:	2000241c 	.word	0x2000241c

080135b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b082      	sub	sp, #8
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80135bc:	f000 f852 	bl	8013664 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80135c0:	4b06      	ldr	r3, [pc, #24]	; (80135dc <prvIdleTask+0x28>)
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	2b01      	cmp	r3, #1
 80135c6:	d9f9      	bls.n	80135bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80135c8:	4b05      	ldr	r3, [pc, #20]	; (80135e0 <prvIdleTask+0x2c>)
 80135ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135ce:	601a      	str	r2, [r3, #0]
 80135d0:	f3bf 8f4f 	dsb	sy
 80135d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80135d8:	e7f0      	b.n	80135bc <prvIdleTask+0x8>
 80135da:	bf00      	nop
 80135dc:	2000230c 	.word	0x2000230c
 80135e0:	e000ed04 	.word	0xe000ed04

080135e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80135e4:	b580      	push	{r7, lr}
 80135e6:	b082      	sub	sp, #8
 80135e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80135ea:	2300      	movs	r3, #0
 80135ec:	607b      	str	r3, [r7, #4]
 80135ee:	e00c      	b.n	801360a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80135f0:	687a      	ldr	r2, [r7, #4]
 80135f2:	4613      	mov	r3, r2
 80135f4:	009b      	lsls	r3, r3, #2
 80135f6:	4413      	add	r3, r2
 80135f8:	009b      	lsls	r3, r3, #2
 80135fa:	4a12      	ldr	r2, [pc, #72]	; (8013644 <prvInitialiseTaskLists+0x60>)
 80135fc:	4413      	add	r3, r2
 80135fe:	4618      	mov	r0, r3
 8013600:	f7fe fcba 	bl	8011f78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	3301      	adds	r3, #1
 8013608:	607b      	str	r3, [r7, #4]
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	2b06      	cmp	r3, #6
 801360e:	d9ef      	bls.n	80135f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013610:	480d      	ldr	r0, [pc, #52]	; (8013648 <prvInitialiseTaskLists+0x64>)
 8013612:	f7fe fcb1 	bl	8011f78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013616:	480d      	ldr	r0, [pc, #52]	; (801364c <prvInitialiseTaskLists+0x68>)
 8013618:	f7fe fcae 	bl	8011f78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801361c:	480c      	ldr	r0, [pc, #48]	; (8013650 <prvInitialiseTaskLists+0x6c>)
 801361e:	f7fe fcab 	bl	8011f78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013622:	480c      	ldr	r0, [pc, #48]	; (8013654 <prvInitialiseTaskLists+0x70>)
 8013624:	f7fe fca8 	bl	8011f78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013628:	480b      	ldr	r0, [pc, #44]	; (8013658 <prvInitialiseTaskLists+0x74>)
 801362a:	f7fe fca5 	bl	8011f78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801362e:	4b0b      	ldr	r3, [pc, #44]	; (801365c <prvInitialiseTaskLists+0x78>)
 8013630:	4a05      	ldr	r2, [pc, #20]	; (8013648 <prvInitialiseTaskLists+0x64>)
 8013632:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013634:	4b0a      	ldr	r3, [pc, #40]	; (8013660 <prvInitialiseTaskLists+0x7c>)
 8013636:	4a05      	ldr	r2, [pc, #20]	; (801364c <prvInitialiseTaskLists+0x68>)
 8013638:	601a      	str	r2, [r3, #0]
}
 801363a:	bf00      	nop
 801363c:	3708      	adds	r7, #8
 801363e:	46bd      	mov	sp, r7
 8013640:	bd80      	pop	{r7, pc}
 8013642:	bf00      	nop
 8013644:	2000230c 	.word	0x2000230c
 8013648:	20002398 	.word	0x20002398
 801364c:	200023ac 	.word	0x200023ac
 8013650:	200023c8 	.word	0x200023c8
 8013654:	200023dc 	.word	0x200023dc
 8013658:	200023f4 	.word	0x200023f4
 801365c:	200023c0 	.word	0x200023c0
 8013660:	200023c4 	.word	0x200023c4

08013664 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013664:	b580      	push	{r7, lr}
 8013666:	b082      	sub	sp, #8
 8013668:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801366a:	e019      	b.n	80136a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801366c:	f000 fab2 	bl	8013bd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013670:	4b10      	ldr	r3, [pc, #64]	; (80136b4 <prvCheckTasksWaitingTermination+0x50>)
 8013672:	68db      	ldr	r3, [r3, #12]
 8013674:	68db      	ldr	r3, [r3, #12]
 8013676:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	3304      	adds	r3, #4
 801367c:	4618      	mov	r0, r3
 801367e:	f7fe fd05 	bl	801208c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013682:	4b0d      	ldr	r3, [pc, #52]	; (80136b8 <prvCheckTasksWaitingTermination+0x54>)
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	3b01      	subs	r3, #1
 8013688:	4a0b      	ldr	r2, [pc, #44]	; (80136b8 <prvCheckTasksWaitingTermination+0x54>)
 801368a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801368c:	4b0b      	ldr	r3, [pc, #44]	; (80136bc <prvCheckTasksWaitingTermination+0x58>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	3b01      	subs	r3, #1
 8013692:	4a0a      	ldr	r2, [pc, #40]	; (80136bc <prvCheckTasksWaitingTermination+0x58>)
 8013694:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013696:	f000 facd 	bl	8013c34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801369a:	6878      	ldr	r0, [r7, #4]
 801369c:	f000 f810 	bl	80136c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80136a0:	4b06      	ldr	r3, [pc, #24]	; (80136bc <prvCheckTasksWaitingTermination+0x58>)
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d1e1      	bne.n	801366c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80136a8:	bf00      	nop
 80136aa:	bf00      	nop
 80136ac:	3708      	adds	r7, #8
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}
 80136b2:	bf00      	nop
 80136b4:	200023dc 	.word	0x200023dc
 80136b8:	20002408 	.word	0x20002408
 80136bc:	200023f0 	.word	0x200023f0

080136c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b084      	sub	sp, #16
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	334c      	adds	r3, #76	; 0x4c
 80136cc:	4618      	mov	r0, r3
 80136ce:	f001 fda3 	bl	8015218 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d108      	bne.n	80136ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136e0:	4618      	mov	r0, r3
 80136e2:	f000 fc65 	bl	8013fb0 <vPortFree>
				vPortFree( pxTCB );
 80136e6:	6878      	ldr	r0, [r7, #4]
 80136e8:	f000 fc62 	bl	8013fb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80136ec:	e018      	b.n	8013720 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80136f4:	2b01      	cmp	r3, #1
 80136f6:	d103      	bne.n	8013700 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80136f8:	6878      	ldr	r0, [r7, #4]
 80136fa:	f000 fc59 	bl	8013fb0 <vPortFree>
	}
 80136fe:	e00f      	b.n	8013720 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8013706:	2b02      	cmp	r3, #2
 8013708:	d00a      	beq.n	8013720 <prvDeleteTCB+0x60>
	__asm volatile
 801370a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801370e:	f383 8811 	msr	BASEPRI, r3
 8013712:	f3bf 8f6f 	isb	sy
 8013716:	f3bf 8f4f 	dsb	sy
 801371a:	60fb      	str	r3, [r7, #12]
}
 801371c:	bf00      	nop
 801371e:	e7fe      	b.n	801371e <prvDeleteTCB+0x5e>
	}
 8013720:	bf00      	nop
 8013722:	3710      	adds	r7, #16
 8013724:	46bd      	mov	sp, r7
 8013726:	bd80      	pop	{r7, pc}

08013728 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013728:	b480      	push	{r7}
 801372a:	b083      	sub	sp, #12
 801372c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801372e:	4b0c      	ldr	r3, [pc, #48]	; (8013760 <prvResetNextTaskUnblockTime+0x38>)
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d104      	bne.n	8013742 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013738:	4b0a      	ldr	r3, [pc, #40]	; (8013764 <prvResetNextTaskUnblockTime+0x3c>)
 801373a:	f04f 32ff 	mov.w	r2, #4294967295
 801373e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013740:	e008      	b.n	8013754 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013742:	4b07      	ldr	r3, [pc, #28]	; (8013760 <prvResetNextTaskUnblockTime+0x38>)
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	68db      	ldr	r3, [r3, #12]
 8013748:	68db      	ldr	r3, [r3, #12]
 801374a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	685b      	ldr	r3, [r3, #4]
 8013750:	4a04      	ldr	r2, [pc, #16]	; (8013764 <prvResetNextTaskUnblockTime+0x3c>)
 8013752:	6013      	str	r3, [r2, #0]
}
 8013754:	bf00      	nop
 8013756:	370c      	adds	r7, #12
 8013758:	46bd      	mov	sp, r7
 801375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375e:	4770      	bx	lr
 8013760:	200023c0 	.word	0x200023c0
 8013764:	20002428 	.word	0x20002428

08013768 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013768:	b480      	push	{r7}
 801376a:	b083      	sub	sp, #12
 801376c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801376e:	4b0b      	ldr	r3, [pc, #44]	; (801379c <xTaskGetSchedulerState+0x34>)
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d102      	bne.n	801377c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013776:	2301      	movs	r3, #1
 8013778:	607b      	str	r3, [r7, #4]
 801377a:	e008      	b.n	801378e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801377c:	4b08      	ldr	r3, [pc, #32]	; (80137a0 <xTaskGetSchedulerState+0x38>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d102      	bne.n	801378a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013784:	2302      	movs	r3, #2
 8013786:	607b      	str	r3, [r7, #4]
 8013788:	e001      	b.n	801378e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801378a:	2300      	movs	r3, #0
 801378c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801378e:	687b      	ldr	r3, [r7, #4]
	}
 8013790:	4618      	mov	r0, r3
 8013792:	370c      	adds	r7, #12
 8013794:	46bd      	mov	sp, r7
 8013796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801379a:	4770      	bx	lr
 801379c:	20002414 	.word	0x20002414
 80137a0:	20002430 	.word	0x20002430

080137a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b086      	sub	sp, #24
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80137b0:	2300      	movs	r3, #0
 80137b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d06e      	beq.n	8013898 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80137ba:	4b3a      	ldr	r3, [pc, #232]	; (80138a4 <xTaskPriorityDisinherit+0x100>)
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	693a      	ldr	r2, [r7, #16]
 80137c0:	429a      	cmp	r2, r3
 80137c2:	d00a      	beq.n	80137da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80137c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137c8:	f383 8811 	msr	BASEPRI, r3
 80137cc:	f3bf 8f6f 	isb	sy
 80137d0:	f3bf 8f4f 	dsb	sy
 80137d4:	60fb      	str	r3, [r7, #12]
}
 80137d6:	bf00      	nop
 80137d8:	e7fe      	b.n	80137d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80137da:	693b      	ldr	r3, [r7, #16]
 80137dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d10a      	bne.n	80137f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80137e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137e6:	f383 8811 	msr	BASEPRI, r3
 80137ea:	f3bf 8f6f 	isb	sy
 80137ee:	f3bf 8f4f 	dsb	sy
 80137f2:	60bb      	str	r3, [r7, #8]
}
 80137f4:	bf00      	nop
 80137f6:	e7fe      	b.n	80137f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80137f8:	693b      	ldr	r3, [r7, #16]
 80137fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137fc:	1e5a      	subs	r2, r3, #1
 80137fe:	693b      	ldr	r3, [r7, #16]
 8013800:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013802:	693b      	ldr	r3, [r7, #16]
 8013804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013806:	693b      	ldr	r3, [r7, #16]
 8013808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801380a:	429a      	cmp	r2, r3
 801380c:	d044      	beq.n	8013898 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801380e:	693b      	ldr	r3, [r7, #16]
 8013810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013812:	2b00      	cmp	r3, #0
 8013814:	d140      	bne.n	8013898 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013816:	693b      	ldr	r3, [r7, #16]
 8013818:	3304      	adds	r3, #4
 801381a:	4618      	mov	r0, r3
 801381c:	f7fe fc36 	bl	801208c <uxListRemove>
 8013820:	4603      	mov	r3, r0
 8013822:	2b00      	cmp	r3, #0
 8013824:	d115      	bne.n	8013852 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013826:	693b      	ldr	r3, [r7, #16]
 8013828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801382a:	491f      	ldr	r1, [pc, #124]	; (80138a8 <xTaskPriorityDisinherit+0x104>)
 801382c:	4613      	mov	r3, r2
 801382e:	009b      	lsls	r3, r3, #2
 8013830:	4413      	add	r3, r2
 8013832:	009b      	lsls	r3, r3, #2
 8013834:	440b      	add	r3, r1
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d10a      	bne.n	8013852 <xTaskPriorityDisinherit+0xae>
 801383c:	693b      	ldr	r3, [r7, #16]
 801383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013840:	2201      	movs	r2, #1
 8013842:	fa02 f303 	lsl.w	r3, r2, r3
 8013846:	43da      	mvns	r2, r3
 8013848:	4b18      	ldr	r3, [pc, #96]	; (80138ac <xTaskPriorityDisinherit+0x108>)
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	4013      	ands	r3, r2
 801384e:	4a17      	ldr	r2, [pc, #92]	; (80138ac <xTaskPriorityDisinherit+0x108>)
 8013850:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013852:	693b      	ldr	r3, [r7, #16]
 8013854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013856:	693b      	ldr	r3, [r7, #16]
 8013858:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801385a:	693b      	ldr	r3, [r7, #16]
 801385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801385e:	f1c3 0207 	rsb	r2, r3, #7
 8013862:	693b      	ldr	r3, [r7, #16]
 8013864:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013866:	693b      	ldr	r3, [r7, #16]
 8013868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801386a:	2201      	movs	r2, #1
 801386c:	409a      	lsls	r2, r3
 801386e:	4b0f      	ldr	r3, [pc, #60]	; (80138ac <xTaskPriorityDisinherit+0x108>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	4313      	orrs	r3, r2
 8013874:	4a0d      	ldr	r2, [pc, #52]	; (80138ac <xTaskPriorityDisinherit+0x108>)
 8013876:	6013      	str	r3, [r2, #0]
 8013878:	693b      	ldr	r3, [r7, #16]
 801387a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801387c:	4613      	mov	r3, r2
 801387e:	009b      	lsls	r3, r3, #2
 8013880:	4413      	add	r3, r2
 8013882:	009b      	lsls	r3, r3, #2
 8013884:	4a08      	ldr	r2, [pc, #32]	; (80138a8 <xTaskPriorityDisinherit+0x104>)
 8013886:	441a      	add	r2, r3
 8013888:	693b      	ldr	r3, [r7, #16]
 801388a:	3304      	adds	r3, #4
 801388c:	4619      	mov	r1, r3
 801388e:	4610      	mov	r0, r2
 8013890:	f7fe fb9f 	bl	8011fd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013894:	2301      	movs	r3, #1
 8013896:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013898:	697b      	ldr	r3, [r7, #20]
	}
 801389a:	4618      	mov	r0, r3
 801389c:	3718      	adds	r7, #24
 801389e:	46bd      	mov	sp, r7
 80138a0:	bd80      	pop	{r7, pc}
 80138a2:	bf00      	nop
 80138a4:	20002308 	.word	0x20002308
 80138a8:	2000230c 	.word	0x2000230c
 80138ac:	20002410 	.word	0x20002410

080138b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b084      	sub	sp, #16
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]
 80138b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80138ba:	4b29      	ldr	r3, [pc, #164]	; (8013960 <prvAddCurrentTaskToDelayedList+0xb0>)
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80138c0:	4b28      	ldr	r3, [pc, #160]	; (8013964 <prvAddCurrentTaskToDelayedList+0xb4>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	3304      	adds	r3, #4
 80138c6:	4618      	mov	r0, r3
 80138c8:	f7fe fbe0 	bl	801208c <uxListRemove>
 80138cc:	4603      	mov	r3, r0
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d10b      	bne.n	80138ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80138d2:	4b24      	ldr	r3, [pc, #144]	; (8013964 <prvAddCurrentTaskToDelayedList+0xb4>)
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138d8:	2201      	movs	r2, #1
 80138da:	fa02 f303 	lsl.w	r3, r2, r3
 80138de:	43da      	mvns	r2, r3
 80138e0:	4b21      	ldr	r3, [pc, #132]	; (8013968 <prvAddCurrentTaskToDelayedList+0xb8>)
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	4013      	ands	r3, r2
 80138e6:	4a20      	ldr	r2, [pc, #128]	; (8013968 <prvAddCurrentTaskToDelayedList+0xb8>)
 80138e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138f0:	d10a      	bne.n	8013908 <prvAddCurrentTaskToDelayedList+0x58>
 80138f2:	683b      	ldr	r3, [r7, #0]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d007      	beq.n	8013908 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80138f8:	4b1a      	ldr	r3, [pc, #104]	; (8013964 <prvAddCurrentTaskToDelayedList+0xb4>)
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	3304      	adds	r3, #4
 80138fe:	4619      	mov	r1, r3
 8013900:	481a      	ldr	r0, [pc, #104]	; (801396c <prvAddCurrentTaskToDelayedList+0xbc>)
 8013902:	f7fe fb66 	bl	8011fd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013906:	e026      	b.n	8013956 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013908:	68fa      	ldr	r2, [r7, #12]
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	4413      	add	r3, r2
 801390e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013910:	4b14      	ldr	r3, [pc, #80]	; (8013964 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	68ba      	ldr	r2, [r7, #8]
 8013916:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013918:	68ba      	ldr	r2, [r7, #8]
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	429a      	cmp	r2, r3
 801391e:	d209      	bcs.n	8013934 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013920:	4b13      	ldr	r3, [pc, #76]	; (8013970 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013922:	681a      	ldr	r2, [r3, #0]
 8013924:	4b0f      	ldr	r3, [pc, #60]	; (8013964 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	3304      	adds	r3, #4
 801392a:	4619      	mov	r1, r3
 801392c:	4610      	mov	r0, r2
 801392e:	f7fe fb74 	bl	801201a <vListInsert>
}
 8013932:	e010      	b.n	8013956 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013934:	4b0f      	ldr	r3, [pc, #60]	; (8013974 <prvAddCurrentTaskToDelayedList+0xc4>)
 8013936:	681a      	ldr	r2, [r3, #0]
 8013938:	4b0a      	ldr	r3, [pc, #40]	; (8013964 <prvAddCurrentTaskToDelayedList+0xb4>)
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	3304      	adds	r3, #4
 801393e:	4619      	mov	r1, r3
 8013940:	4610      	mov	r0, r2
 8013942:	f7fe fb6a 	bl	801201a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013946:	4b0c      	ldr	r3, [pc, #48]	; (8013978 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	68ba      	ldr	r2, [r7, #8]
 801394c:	429a      	cmp	r2, r3
 801394e:	d202      	bcs.n	8013956 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013950:	4a09      	ldr	r2, [pc, #36]	; (8013978 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013952:	68bb      	ldr	r3, [r7, #8]
 8013954:	6013      	str	r3, [r2, #0]
}
 8013956:	bf00      	nop
 8013958:	3710      	adds	r7, #16
 801395a:	46bd      	mov	sp, r7
 801395c:	bd80      	pop	{r7, pc}
 801395e:	bf00      	nop
 8013960:	2000240c 	.word	0x2000240c
 8013964:	20002308 	.word	0x20002308
 8013968:	20002410 	.word	0x20002410
 801396c:	200023f4 	.word	0x200023f4
 8013970:	200023c4 	.word	0x200023c4
 8013974:	200023c0 	.word	0x200023c0
 8013978:	20002428 	.word	0x20002428

0801397c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801397c:	b480      	push	{r7}
 801397e:	b085      	sub	sp, #20
 8013980:	af00      	add	r7, sp, #0
 8013982:	60f8      	str	r0, [r7, #12]
 8013984:	60b9      	str	r1, [r7, #8]
 8013986:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	3b04      	subs	r3, #4
 801398c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013994:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	3b04      	subs	r3, #4
 801399a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801399c:	68bb      	ldr	r3, [r7, #8]
 801399e:	f023 0201 	bic.w	r2, r3, #1
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	3b04      	subs	r3, #4
 80139aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80139ac:	4a0c      	ldr	r2, [pc, #48]	; (80139e0 <pxPortInitialiseStack+0x64>)
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	3b14      	subs	r3, #20
 80139b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80139b8:	687a      	ldr	r2, [r7, #4]
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	3b04      	subs	r3, #4
 80139c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	f06f 0202 	mvn.w	r2, #2
 80139ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	3b20      	subs	r3, #32
 80139d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80139d2:	68fb      	ldr	r3, [r7, #12]
}
 80139d4:	4618      	mov	r0, r3
 80139d6:	3714      	adds	r7, #20
 80139d8:	46bd      	mov	sp, r7
 80139da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139de:	4770      	bx	lr
 80139e0:	080139e5 	.word	0x080139e5

080139e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80139e4:	b480      	push	{r7}
 80139e6:	b085      	sub	sp, #20
 80139e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80139ea:	2300      	movs	r3, #0
 80139ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80139ee:	4b12      	ldr	r3, [pc, #72]	; (8013a38 <prvTaskExitError+0x54>)
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139f6:	d00a      	beq.n	8013a0e <prvTaskExitError+0x2a>
	__asm volatile
 80139f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139fc:	f383 8811 	msr	BASEPRI, r3
 8013a00:	f3bf 8f6f 	isb	sy
 8013a04:	f3bf 8f4f 	dsb	sy
 8013a08:	60fb      	str	r3, [r7, #12]
}
 8013a0a:	bf00      	nop
 8013a0c:	e7fe      	b.n	8013a0c <prvTaskExitError+0x28>
	__asm volatile
 8013a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a12:	f383 8811 	msr	BASEPRI, r3
 8013a16:	f3bf 8f6f 	isb	sy
 8013a1a:	f3bf 8f4f 	dsb	sy
 8013a1e:	60bb      	str	r3, [r7, #8]
}
 8013a20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013a22:	bf00      	nop
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d0fc      	beq.n	8013a24 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013a2a:	bf00      	nop
 8013a2c:	bf00      	nop
 8013a2e:	3714      	adds	r7, #20
 8013a30:	46bd      	mov	sp, r7
 8013a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a36:	4770      	bx	lr
 8013a38:	200002b0 	.word	0x200002b0
 8013a3c:	00000000 	.word	0x00000000

08013a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013a40:	4b07      	ldr	r3, [pc, #28]	; (8013a60 <pxCurrentTCBConst2>)
 8013a42:	6819      	ldr	r1, [r3, #0]
 8013a44:	6808      	ldr	r0, [r1, #0]
 8013a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a4a:	f380 8809 	msr	PSP, r0
 8013a4e:	f3bf 8f6f 	isb	sy
 8013a52:	f04f 0000 	mov.w	r0, #0
 8013a56:	f380 8811 	msr	BASEPRI, r0
 8013a5a:	4770      	bx	lr
 8013a5c:	f3af 8000 	nop.w

08013a60 <pxCurrentTCBConst2>:
 8013a60:	20002308 	.word	0x20002308
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013a64:	bf00      	nop
 8013a66:	bf00      	nop

08013a68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013a68:	4808      	ldr	r0, [pc, #32]	; (8013a8c <prvPortStartFirstTask+0x24>)
 8013a6a:	6800      	ldr	r0, [r0, #0]
 8013a6c:	6800      	ldr	r0, [r0, #0]
 8013a6e:	f380 8808 	msr	MSP, r0
 8013a72:	f04f 0000 	mov.w	r0, #0
 8013a76:	f380 8814 	msr	CONTROL, r0
 8013a7a:	b662      	cpsie	i
 8013a7c:	b661      	cpsie	f
 8013a7e:	f3bf 8f4f 	dsb	sy
 8013a82:	f3bf 8f6f 	isb	sy
 8013a86:	df00      	svc	0
 8013a88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013a8a:	bf00      	nop
 8013a8c:	e000ed08 	.word	0xe000ed08

08013a90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b086      	sub	sp, #24
 8013a94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013a96:	4b46      	ldr	r3, [pc, #280]	; (8013bb0 <xPortStartScheduler+0x120>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	4a46      	ldr	r2, [pc, #280]	; (8013bb4 <xPortStartScheduler+0x124>)
 8013a9c:	4293      	cmp	r3, r2
 8013a9e:	d10a      	bne.n	8013ab6 <xPortStartScheduler+0x26>
	__asm volatile
 8013aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aa4:	f383 8811 	msr	BASEPRI, r3
 8013aa8:	f3bf 8f6f 	isb	sy
 8013aac:	f3bf 8f4f 	dsb	sy
 8013ab0:	613b      	str	r3, [r7, #16]
}
 8013ab2:	bf00      	nop
 8013ab4:	e7fe      	b.n	8013ab4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013ab6:	4b3e      	ldr	r3, [pc, #248]	; (8013bb0 <xPortStartScheduler+0x120>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	4a3f      	ldr	r2, [pc, #252]	; (8013bb8 <xPortStartScheduler+0x128>)
 8013abc:	4293      	cmp	r3, r2
 8013abe:	d10a      	bne.n	8013ad6 <xPortStartScheduler+0x46>
	__asm volatile
 8013ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ac4:	f383 8811 	msr	BASEPRI, r3
 8013ac8:	f3bf 8f6f 	isb	sy
 8013acc:	f3bf 8f4f 	dsb	sy
 8013ad0:	60fb      	str	r3, [r7, #12]
}
 8013ad2:	bf00      	nop
 8013ad4:	e7fe      	b.n	8013ad4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013ad6:	4b39      	ldr	r3, [pc, #228]	; (8013bbc <xPortStartScheduler+0x12c>)
 8013ad8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013ada:	697b      	ldr	r3, [r7, #20]
 8013adc:	781b      	ldrb	r3, [r3, #0]
 8013ade:	b2db      	uxtb	r3, r3
 8013ae0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	22ff      	movs	r2, #255	; 0xff
 8013ae6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013ae8:	697b      	ldr	r3, [r7, #20]
 8013aea:	781b      	ldrb	r3, [r3, #0]
 8013aec:	b2db      	uxtb	r3, r3
 8013aee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013af0:	78fb      	ldrb	r3, [r7, #3]
 8013af2:	b2db      	uxtb	r3, r3
 8013af4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013af8:	b2da      	uxtb	r2, r3
 8013afa:	4b31      	ldr	r3, [pc, #196]	; (8013bc0 <xPortStartScheduler+0x130>)
 8013afc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013afe:	4b31      	ldr	r3, [pc, #196]	; (8013bc4 <xPortStartScheduler+0x134>)
 8013b00:	2207      	movs	r2, #7
 8013b02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013b04:	e009      	b.n	8013b1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8013b06:	4b2f      	ldr	r3, [pc, #188]	; (8013bc4 <xPortStartScheduler+0x134>)
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	3b01      	subs	r3, #1
 8013b0c:	4a2d      	ldr	r2, [pc, #180]	; (8013bc4 <xPortStartScheduler+0x134>)
 8013b0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013b10:	78fb      	ldrb	r3, [r7, #3]
 8013b12:	b2db      	uxtb	r3, r3
 8013b14:	005b      	lsls	r3, r3, #1
 8013b16:	b2db      	uxtb	r3, r3
 8013b18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013b1a:	78fb      	ldrb	r3, [r7, #3]
 8013b1c:	b2db      	uxtb	r3, r3
 8013b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013b22:	2b80      	cmp	r3, #128	; 0x80
 8013b24:	d0ef      	beq.n	8013b06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013b26:	4b27      	ldr	r3, [pc, #156]	; (8013bc4 <xPortStartScheduler+0x134>)
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	f1c3 0307 	rsb	r3, r3, #7
 8013b2e:	2b04      	cmp	r3, #4
 8013b30:	d00a      	beq.n	8013b48 <xPortStartScheduler+0xb8>
	__asm volatile
 8013b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b36:	f383 8811 	msr	BASEPRI, r3
 8013b3a:	f3bf 8f6f 	isb	sy
 8013b3e:	f3bf 8f4f 	dsb	sy
 8013b42:	60bb      	str	r3, [r7, #8]
}
 8013b44:	bf00      	nop
 8013b46:	e7fe      	b.n	8013b46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013b48:	4b1e      	ldr	r3, [pc, #120]	; (8013bc4 <xPortStartScheduler+0x134>)
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	021b      	lsls	r3, r3, #8
 8013b4e:	4a1d      	ldr	r2, [pc, #116]	; (8013bc4 <xPortStartScheduler+0x134>)
 8013b50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013b52:	4b1c      	ldr	r3, [pc, #112]	; (8013bc4 <xPortStartScheduler+0x134>)
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013b5a:	4a1a      	ldr	r2, [pc, #104]	; (8013bc4 <xPortStartScheduler+0x134>)
 8013b5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	b2da      	uxtb	r2, r3
 8013b62:	697b      	ldr	r3, [r7, #20]
 8013b64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013b66:	4b18      	ldr	r3, [pc, #96]	; (8013bc8 <xPortStartScheduler+0x138>)
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	4a17      	ldr	r2, [pc, #92]	; (8013bc8 <xPortStartScheduler+0x138>)
 8013b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013b70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013b72:	4b15      	ldr	r3, [pc, #84]	; (8013bc8 <xPortStartScheduler+0x138>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	4a14      	ldr	r2, [pc, #80]	; (8013bc8 <xPortStartScheduler+0x138>)
 8013b78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013b7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013b7e:	f000 f8dd 	bl	8013d3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013b82:	4b12      	ldr	r3, [pc, #72]	; (8013bcc <xPortStartScheduler+0x13c>)
 8013b84:	2200      	movs	r2, #0
 8013b86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013b88:	f000 f8fc 	bl	8013d84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013b8c:	4b10      	ldr	r3, [pc, #64]	; (8013bd0 <xPortStartScheduler+0x140>)
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	4a0f      	ldr	r2, [pc, #60]	; (8013bd0 <xPortStartScheduler+0x140>)
 8013b92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013b96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013b98:	f7ff ff66 	bl	8013a68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013b9c:	f7ff fb9e 	bl	80132dc <vTaskSwitchContext>
	prvTaskExitError();
 8013ba0:	f7ff ff20 	bl	80139e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013ba4:	2300      	movs	r3, #0
}
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	3718      	adds	r7, #24
 8013baa:	46bd      	mov	sp, r7
 8013bac:	bd80      	pop	{r7, pc}
 8013bae:	bf00      	nop
 8013bb0:	e000ed00 	.word	0xe000ed00
 8013bb4:	410fc271 	.word	0x410fc271
 8013bb8:	410fc270 	.word	0x410fc270
 8013bbc:	e000e400 	.word	0xe000e400
 8013bc0:	20002434 	.word	0x20002434
 8013bc4:	20002438 	.word	0x20002438
 8013bc8:	e000ed20 	.word	0xe000ed20
 8013bcc:	200002b0 	.word	0x200002b0
 8013bd0:	e000ef34 	.word	0xe000ef34

08013bd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013bd4:	b480      	push	{r7}
 8013bd6:	b083      	sub	sp, #12
 8013bd8:	af00      	add	r7, sp, #0
	__asm volatile
 8013bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bde:	f383 8811 	msr	BASEPRI, r3
 8013be2:	f3bf 8f6f 	isb	sy
 8013be6:	f3bf 8f4f 	dsb	sy
 8013bea:	607b      	str	r3, [r7, #4]
}
 8013bec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013bee:	4b0f      	ldr	r3, [pc, #60]	; (8013c2c <vPortEnterCritical+0x58>)
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	3301      	adds	r3, #1
 8013bf4:	4a0d      	ldr	r2, [pc, #52]	; (8013c2c <vPortEnterCritical+0x58>)
 8013bf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013bf8:	4b0c      	ldr	r3, [pc, #48]	; (8013c2c <vPortEnterCritical+0x58>)
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	2b01      	cmp	r3, #1
 8013bfe:	d10f      	bne.n	8013c20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013c00:	4b0b      	ldr	r3, [pc, #44]	; (8013c30 <vPortEnterCritical+0x5c>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	b2db      	uxtb	r3, r3
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d00a      	beq.n	8013c20 <vPortEnterCritical+0x4c>
	__asm volatile
 8013c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c0e:	f383 8811 	msr	BASEPRI, r3
 8013c12:	f3bf 8f6f 	isb	sy
 8013c16:	f3bf 8f4f 	dsb	sy
 8013c1a:	603b      	str	r3, [r7, #0]
}
 8013c1c:	bf00      	nop
 8013c1e:	e7fe      	b.n	8013c1e <vPortEnterCritical+0x4a>
	}
}
 8013c20:	bf00      	nop
 8013c22:	370c      	adds	r7, #12
 8013c24:	46bd      	mov	sp, r7
 8013c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2a:	4770      	bx	lr
 8013c2c:	200002b0 	.word	0x200002b0
 8013c30:	e000ed04 	.word	0xe000ed04

08013c34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013c34:	b480      	push	{r7}
 8013c36:	b083      	sub	sp, #12
 8013c38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013c3a:	4b12      	ldr	r3, [pc, #72]	; (8013c84 <vPortExitCritical+0x50>)
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d10a      	bne.n	8013c58 <vPortExitCritical+0x24>
	__asm volatile
 8013c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c46:	f383 8811 	msr	BASEPRI, r3
 8013c4a:	f3bf 8f6f 	isb	sy
 8013c4e:	f3bf 8f4f 	dsb	sy
 8013c52:	607b      	str	r3, [r7, #4]
}
 8013c54:	bf00      	nop
 8013c56:	e7fe      	b.n	8013c56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013c58:	4b0a      	ldr	r3, [pc, #40]	; (8013c84 <vPortExitCritical+0x50>)
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	3b01      	subs	r3, #1
 8013c5e:	4a09      	ldr	r2, [pc, #36]	; (8013c84 <vPortExitCritical+0x50>)
 8013c60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013c62:	4b08      	ldr	r3, [pc, #32]	; (8013c84 <vPortExitCritical+0x50>)
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d105      	bne.n	8013c76 <vPortExitCritical+0x42>
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013c6e:	683b      	ldr	r3, [r7, #0]
 8013c70:	f383 8811 	msr	BASEPRI, r3
}
 8013c74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013c76:	bf00      	nop
 8013c78:	370c      	adds	r7, #12
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c80:	4770      	bx	lr
 8013c82:	bf00      	nop
 8013c84:	200002b0 	.word	0x200002b0
	...

08013c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013c90:	f3ef 8009 	mrs	r0, PSP
 8013c94:	f3bf 8f6f 	isb	sy
 8013c98:	4b15      	ldr	r3, [pc, #84]	; (8013cf0 <pxCurrentTCBConst>)
 8013c9a:	681a      	ldr	r2, [r3, #0]
 8013c9c:	f01e 0f10 	tst.w	lr, #16
 8013ca0:	bf08      	it	eq
 8013ca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013ca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013caa:	6010      	str	r0, [r2, #0]
 8013cac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013cb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013cb4:	f380 8811 	msr	BASEPRI, r0
 8013cb8:	f3bf 8f4f 	dsb	sy
 8013cbc:	f3bf 8f6f 	isb	sy
 8013cc0:	f7ff fb0c 	bl	80132dc <vTaskSwitchContext>
 8013cc4:	f04f 0000 	mov.w	r0, #0
 8013cc8:	f380 8811 	msr	BASEPRI, r0
 8013ccc:	bc09      	pop	{r0, r3}
 8013cce:	6819      	ldr	r1, [r3, #0]
 8013cd0:	6808      	ldr	r0, [r1, #0]
 8013cd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cd6:	f01e 0f10 	tst.w	lr, #16
 8013cda:	bf08      	it	eq
 8013cdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013ce0:	f380 8809 	msr	PSP, r0
 8013ce4:	f3bf 8f6f 	isb	sy
 8013ce8:	4770      	bx	lr
 8013cea:	bf00      	nop
 8013cec:	f3af 8000 	nop.w

08013cf0 <pxCurrentTCBConst>:
 8013cf0:	20002308 	.word	0x20002308
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013cf4:	bf00      	nop
 8013cf6:	bf00      	nop

08013cf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8013cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d02:	f383 8811 	msr	BASEPRI, r3
 8013d06:	f3bf 8f6f 	isb	sy
 8013d0a:	f3bf 8f4f 	dsb	sy
 8013d0e:	607b      	str	r3, [r7, #4]
}
 8013d10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013d12:	f7ff fa2b 	bl	801316c <xTaskIncrementTick>
 8013d16:	4603      	mov	r3, r0
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d003      	beq.n	8013d24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013d1c:	4b06      	ldr	r3, [pc, #24]	; (8013d38 <SysTick_Handler+0x40>)
 8013d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d22:	601a      	str	r2, [r3, #0]
 8013d24:	2300      	movs	r3, #0
 8013d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013d28:	683b      	ldr	r3, [r7, #0]
 8013d2a:	f383 8811 	msr	BASEPRI, r3
}
 8013d2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013d30:	bf00      	nop
 8013d32:	3708      	adds	r7, #8
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd80      	pop	{r7, pc}
 8013d38:	e000ed04 	.word	0xe000ed04

08013d3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013d3c:	b480      	push	{r7}
 8013d3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013d40:	4b0b      	ldr	r3, [pc, #44]	; (8013d70 <vPortSetupTimerInterrupt+0x34>)
 8013d42:	2200      	movs	r2, #0
 8013d44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013d46:	4b0b      	ldr	r3, [pc, #44]	; (8013d74 <vPortSetupTimerInterrupt+0x38>)
 8013d48:	2200      	movs	r2, #0
 8013d4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013d4c:	4b0a      	ldr	r3, [pc, #40]	; (8013d78 <vPortSetupTimerInterrupt+0x3c>)
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	4a0a      	ldr	r2, [pc, #40]	; (8013d7c <vPortSetupTimerInterrupt+0x40>)
 8013d52:	fba2 2303 	umull	r2, r3, r2, r3
 8013d56:	099b      	lsrs	r3, r3, #6
 8013d58:	4a09      	ldr	r2, [pc, #36]	; (8013d80 <vPortSetupTimerInterrupt+0x44>)
 8013d5a:	3b01      	subs	r3, #1
 8013d5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013d5e:	4b04      	ldr	r3, [pc, #16]	; (8013d70 <vPortSetupTimerInterrupt+0x34>)
 8013d60:	2207      	movs	r2, #7
 8013d62:	601a      	str	r2, [r3, #0]
}
 8013d64:	bf00      	nop
 8013d66:	46bd      	mov	sp, r7
 8013d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d6c:	4770      	bx	lr
 8013d6e:	bf00      	nop
 8013d70:	e000e010 	.word	0xe000e010
 8013d74:	e000e018 	.word	0xe000e018
 8013d78:	20000234 	.word	0x20000234
 8013d7c:	10624dd3 	.word	0x10624dd3
 8013d80:	e000e014 	.word	0xe000e014

08013d84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013d84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013d94 <vPortEnableVFP+0x10>
 8013d88:	6801      	ldr	r1, [r0, #0]
 8013d8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013d8e:	6001      	str	r1, [r0, #0]
 8013d90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013d92:	bf00      	nop
 8013d94:	e000ed88 	.word	0xe000ed88

08013d98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013d98:	b480      	push	{r7}
 8013d9a:	b085      	sub	sp, #20
 8013d9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013d9e:	f3ef 8305 	mrs	r3, IPSR
 8013da2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	2b0f      	cmp	r3, #15
 8013da8:	d914      	bls.n	8013dd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013daa:	4a17      	ldr	r2, [pc, #92]	; (8013e08 <vPortValidateInterruptPriority+0x70>)
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	4413      	add	r3, r2
 8013db0:	781b      	ldrb	r3, [r3, #0]
 8013db2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013db4:	4b15      	ldr	r3, [pc, #84]	; (8013e0c <vPortValidateInterruptPriority+0x74>)
 8013db6:	781b      	ldrb	r3, [r3, #0]
 8013db8:	7afa      	ldrb	r2, [r7, #11]
 8013dba:	429a      	cmp	r2, r3
 8013dbc:	d20a      	bcs.n	8013dd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8013dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dc2:	f383 8811 	msr	BASEPRI, r3
 8013dc6:	f3bf 8f6f 	isb	sy
 8013dca:	f3bf 8f4f 	dsb	sy
 8013dce:	607b      	str	r3, [r7, #4]
}
 8013dd0:	bf00      	nop
 8013dd2:	e7fe      	b.n	8013dd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013dd4:	4b0e      	ldr	r3, [pc, #56]	; (8013e10 <vPortValidateInterruptPriority+0x78>)
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013ddc:	4b0d      	ldr	r3, [pc, #52]	; (8013e14 <vPortValidateInterruptPriority+0x7c>)
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	429a      	cmp	r2, r3
 8013de2:	d90a      	bls.n	8013dfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013de8:	f383 8811 	msr	BASEPRI, r3
 8013dec:	f3bf 8f6f 	isb	sy
 8013df0:	f3bf 8f4f 	dsb	sy
 8013df4:	603b      	str	r3, [r7, #0]
}
 8013df6:	bf00      	nop
 8013df8:	e7fe      	b.n	8013df8 <vPortValidateInterruptPriority+0x60>
	}
 8013dfa:	bf00      	nop
 8013dfc:	3714      	adds	r7, #20
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e04:	4770      	bx	lr
 8013e06:	bf00      	nop
 8013e08:	e000e3f0 	.word	0xe000e3f0
 8013e0c:	20002434 	.word	0x20002434
 8013e10:	e000ed0c 	.word	0xe000ed0c
 8013e14:	20002438 	.word	0x20002438

08013e18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013e18:	b580      	push	{r7, lr}
 8013e1a:	b08a      	sub	sp, #40	; 0x28
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013e20:	2300      	movs	r3, #0
 8013e22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013e24:	f7ff f8e8 	bl	8012ff8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013e28:	4b5b      	ldr	r3, [pc, #364]	; (8013f98 <pvPortMalloc+0x180>)
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d101      	bne.n	8013e34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013e30:	f000 f920 	bl	8014074 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013e34:	4b59      	ldr	r3, [pc, #356]	; (8013f9c <pvPortMalloc+0x184>)
 8013e36:	681a      	ldr	r2, [r3, #0]
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	4013      	ands	r3, r2
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	f040 8093 	bne.w	8013f68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d01d      	beq.n	8013e84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013e48:	2208      	movs	r2, #8
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	4413      	add	r3, r2
 8013e4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	f003 0307 	and.w	r3, r3, #7
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d014      	beq.n	8013e84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	f023 0307 	bic.w	r3, r3, #7
 8013e60:	3308      	adds	r3, #8
 8013e62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	f003 0307 	and.w	r3, r3, #7
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d00a      	beq.n	8013e84 <pvPortMalloc+0x6c>
	__asm volatile
 8013e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e72:	f383 8811 	msr	BASEPRI, r3
 8013e76:	f3bf 8f6f 	isb	sy
 8013e7a:	f3bf 8f4f 	dsb	sy
 8013e7e:	617b      	str	r3, [r7, #20]
}
 8013e80:	bf00      	nop
 8013e82:	e7fe      	b.n	8013e82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d06e      	beq.n	8013f68 <pvPortMalloc+0x150>
 8013e8a:	4b45      	ldr	r3, [pc, #276]	; (8013fa0 <pvPortMalloc+0x188>)
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	687a      	ldr	r2, [r7, #4]
 8013e90:	429a      	cmp	r2, r3
 8013e92:	d869      	bhi.n	8013f68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013e94:	4b43      	ldr	r3, [pc, #268]	; (8013fa4 <pvPortMalloc+0x18c>)
 8013e96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013e98:	4b42      	ldr	r3, [pc, #264]	; (8013fa4 <pvPortMalloc+0x18c>)
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013e9e:	e004      	b.n	8013eaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eac:	685b      	ldr	r3, [r3, #4]
 8013eae:	687a      	ldr	r2, [r7, #4]
 8013eb0:	429a      	cmp	r2, r3
 8013eb2:	d903      	bls.n	8013ebc <pvPortMalloc+0xa4>
 8013eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d1f1      	bne.n	8013ea0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013ebc:	4b36      	ldr	r3, [pc, #216]	; (8013f98 <pvPortMalloc+0x180>)
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ec2:	429a      	cmp	r2, r3
 8013ec4:	d050      	beq.n	8013f68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013ec6:	6a3b      	ldr	r3, [r7, #32]
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	2208      	movs	r2, #8
 8013ecc:	4413      	add	r3, r2
 8013ece:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ed2:	681a      	ldr	r2, [r3, #0]
 8013ed4:	6a3b      	ldr	r3, [r7, #32]
 8013ed6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eda:	685a      	ldr	r2, [r3, #4]
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	1ad2      	subs	r2, r2, r3
 8013ee0:	2308      	movs	r3, #8
 8013ee2:	005b      	lsls	r3, r3, #1
 8013ee4:	429a      	cmp	r2, r3
 8013ee6:	d91f      	bls.n	8013f28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	4413      	add	r3, r2
 8013eee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013ef0:	69bb      	ldr	r3, [r7, #24]
 8013ef2:	f003 0307 	and.w	r3, r3, #7
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d00a      	beq.n	8013f10 <pvPortMalloc+0xf8>
	__asm volatile
 8013efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013efe:	f383 8811 	msr	BASEPRI, r3
 8013f02:	f3bf 8f6f 	isb	sy
 8013f06:	f3bf 8f4f 	dsb	sy
 8013f0a:	613b      	str	r3, [r7, #16]
}
 8013f0c:	bf00      	nop
 8013f0e:	e7fe      	b.n	8013f0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f12:	685a      	ldr	r2, [r3, #4]
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	1ad2      	subs	r2, r2, r3
 8013f18:	69bb      	ldr	r3, [r7, #24]
 8013f1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f1e:	687a      	ldr	r2, [r7, #4]
 8013f20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013f22:	69b8      	ldr	r0, [r7, #24]
 8013f24:	f000 f908 	bl	8014138 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013f28:	4b1d      	ldr	r3, [pc, #116]	; (8013fa0 <pvPortMalloc+0x188>)
 8013f2a:	681a      	ldr	r2, [r3, #0]
 8013f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f2e:	685b      	ldr	r3, [r3, #4]
 8013f30:	1ad3      	subs	r3, r2, r3
 8013f32:	4a1b      	ldr	r2, [pc, #108]	; (8013fa0 <pvPortMalloc+0x188>)
 8013f34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013f36:	4b1a      	ldr	r3, [pc, #104]	; (8013fa0 <pvPortMalloc+0x188>)
 8013f38:	681a      	ldr	r2, [r3, #0]
 8013f3a:	4b1b      	ldr	r3, [pc, #108]	; (8013fa8 <pvPortMalloc+0x190>)
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	429a      	cmp	r2, r3
 8013f40:	d203      	bcs.n	8013f4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013f42:	4b17      	ldr	r3, [pc, #92]	; (8013fa0 <pvPortMalloc+0x188>)
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	4a18      	ldr	r2, [pc, #96]	; (8013fa8 <pvPortMalloc+0x190>)
 8013f48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f4c:	685a      	ldr	r2, [r3, #4]
 8013f4e:	4b13      	ldr	r3, [pc, #76]	; (8013f9c <pvPortMalloc+0x184>)
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	431a      	orrs	r2, r3
 8013f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f5a:	2200      	movs	r2, #0
 8013f5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013f5e:	4b13      	ldr	r3, [pc, #76]	; (8013fac <pvPortMalloc+0x194>)
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	3301      	adds	r3, #1
 8013f64:	4a11      	ldr	r2, [pc, #68]	; (8013fac <pvPortMalloc+0x194>)
 8013f66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013f68:	f7ff f854 	bl	8013014 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013f6c:	69fb      	ldr	r3, [r7, #28]
 8013f6e:	f003 0307 	and.w	r3, r3, #7
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d00a      	beq.n	8013f8c <pvPortMalloc+0x174>
	__asm volatile
 8013f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f7a:	f383 8811 	msr	BASEPRI, r3
 8013f7e:	f3bf 8f6f 	isb	sy
 8013f82:	f3bf 8f4f 	dsb	sy
 8013f86:	60fb      	str	r3, [r7, #12]
}
 8013f88:	bf00      	nop
 8013f8a:	e7fe      	b.n	8013f8a <pvPortMalloc+0x172>
	return pvReturn;
 8013f8c:	69fb      	ldr	r3, [r7, #28]
}
 8013f8e:	4618      	mov	r0, r3
 8013f90:	3728      	adds	r7, #40	; 0x28
 8013f92:	46bd      	mov	sp, r7
 8013f94:	bd80      	pop	{r7, pc}
 8013f96:	bf00      	nop
 8013f98:	20008204 	.word	0x20008204
 8013f9c:	20008218 	.word	0x20008218
 8013fa0:	20008208 	.word	0x20008208
 8013fa4:	200081fc 	.word	0x200081fc
 8013fa8:	2000820c 	.word	0x2000820c
 8013fac:	20008210 	.word	0x20008210

08013fb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b086      	sub	sp, #24
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d04d      	beq.n	801405e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013fc2:	2308      	movs	r3, #8
 8013fc4:	425b      	negs	r3, r3
 8013fc6:	697a      	ldr	r2, [r7, #20]
 8013fc8:	4413      	add	r3, r2
 8013fca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013fcc:	697b      	ldr	r3, [r7, #20]
 8013fce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013fd0:	693b      	ldr	r3, [r7, #16]
 8013fd2:	685a      	ldr	r2, [r3, #4]
 8013fd4:	4b24      	ldr	r3, [pc, #144]	; (8014068 <vPortFree+0xb8>)
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	4013      	ands	r3, r2
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d10a      	bne.n	8013ff4 <vPortFree+0x44>
	__asm volatile
 8013fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fe2:	f383 8811 	msr	BASEPRI, r3
 8013fe6:	f3bf 8f6f 	isb	sy
 8013fea:	f3bf 8f4f 	dsb	sy
 8013fee:	60fb      	str	r3, [r7, #12]
}
 8013ff0:	bf00      	nop
 8013ff2:	e7fe      	b.n	8013ff2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013ff4:	693b      	ldr	r3, [r7, #16]
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d00a      	beq.n	8014012 <vPortFree+0x62>
	__asm volatile
 8013ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014000:	f383 8811 	msr	BASEPRI, r3
 8014004:	f3bf 8f6f 	isb	sy
 8014008:	f3bf 8f4f 	dsb	sy
 801400c:	60bb      	str	r3, [r7, #8]
}
 801400e:	bf00      	nop
 8014010:	e7fe      	b.n	8014010 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014012:	693b      	ldr	r3, [r7, #16]
 8014014:	685a      	ldr	r2, [r3, #4]
 8014016:	4b14      	ldr	r3, [pc, #80]	; (8014068 <vPortFree+0xb8>)
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	4013      	ands	r3, r2
 801401c:	2b00      	cmp	r3, #0
 801401e:	d01e      	beq.n	801405e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014020:	693b      	ldr	r3, [r7, #16]
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d11a      	bne.n	801405e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014028:	693b      	ldr	r3, [r7, #16]
 801402a:	685a      	ldr	r2, [r3, #4]
 801402c:	4b0e      	ldr	r3, [pc, #56]	; (8014068 <vPortFree+0xb8>)
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	43db      	mvns	r3, r3
 8014032:	401a      	ands	r2, r3
 8014034:	693b      	ldr	r3, [r7, #16]
 8014036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014038:	f7fe ffde 	bl	8012ff8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801403c:	693b      	ldr	r3, [r7, #16]
 801403e:	685a      	ldr	r2, [r3, #4]
 8014040:	4b0a      	ldr	r3, [pc, #40]	; (801406c <vPortFree+0xbc>)
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	4413      	add	r3, r2
 8014046:	4a09      	ldr	r2, [pc, #36]	; (801406c <vPortFree+0xbc>)
 8014048:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801404a:	6938      	ldr	r0, [r7, #16]
 801404c:	f000 f874 	bl	8014138 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014050:	4b07      	ldr	r3, [pc, #28]	; (8014070 <vPortFree+0xc0>)
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	3301      	adds	r3, #1
 8014056:	4a06      	ldr	r2, [pc, #24]	; (8014070 <vPortFree+0xc0>)
 8014058:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801405a:	f7fe ffdb 	bl	8013014 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801405e:	bf00      	nop
 8014060:	3718      	adds	r7, #24
 8014062:	46bd      	mov	sp, r7
 8014064:	bd80      	pop	{r7, pc}
 8014066:	bf00      	nop
 8014068:	20008218 	.word	0x20008218
 801406c:	20008208 	.word	0x20008208
 8014070:	20008214 	.word	0x20008214

08014074 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014074:	b480      	push	{r7}
 8014076:	b085      	sub	sp, #20
 8014078:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801407a:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 801407e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014080:	4b27      	ldr	r3, [pc, #156]	; (8014120 <prvHeapInit+0xac>)
 8014082:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	f003 0307 	and.w	r3, r3, #7
 801408a:	2b00      	cmp	r3, #0
 801408c:	d00c      	beq.n	80140a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	3307      	adds	r3, #7
 8014092:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	f023 0307 	bic.w	r3, r3, #7
 801409a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801409c:	68ba      	ldr	r2, [r7, #8]
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	1ad3      	subs	r3, r2, r3
 80140a2:	4a1f      	ldr	r2, [pc, #124]	; (8014120 <prvHeapInit+0xac>)
 80140a4:	4413      	add	r3, r2
 80140a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80140ac:	4a1d      	ldr	r2, [pc, #116]	; (8014124 <prvHeapInit+0xb0>)
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80140b2:	4b1c      	ldr	r3, [pc, #112]	; (8014124 <prvHeapInit+0xb0>)
 80140b4:	2200      	movs	r2, #0
 80140b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	68ba      	ldr	r2, [r7, #8]
 80140bc:	4413      	add	r3, r2
 80140be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80140c0:	2208      	movs	r2, #8
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	1a9b      	subs	r3, r3, r2
 80140c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	f023 0307 	bic.w	r3, r3, #7
 80140ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	4a15      	ldr	r2, [pc, #84]	; (8014128 <prvHeapInit+0xb4>)
 80140d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80140d6:	4b14      	ldr	r3, [pc, #80]	; (8014128 <prvHeapInit+0xb4>)
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	2200      	movs	r2, #0
 80140dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80140de:	4b12      	ldr	r3, [pc, #72]	; (8014128 <prvHeapInit+0xb4>)
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	2200      	movs	r2, #0
 80140e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80140ea:	683b      	ldr	r3, [r7, #0]
 80140ec:	68fa      	ldr	r2, [r7, #12]
 80140ee:	1ad2      	subs	r2, r2, r3
 80140f0:	683b      	ldr	r3, [r7, #0]
 80140f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80140f4:	4b0c      	ldr	r3, [pc, #48]	; (8014128 <prvHeapInit+0xb4>)
 80140f6:	681a      	ldr	r2, [r3, #0]
 80140f8:	683b      	ldr	r3, [r7, #0]
 80140fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80140fc:	683b      	ldr	r3, [r7, #0]
 80140fe:	685b      	ldr	r3, [r3, #4]
 8014100:	4a0a      	ldr	r2, [pc, #40]	; (801412c <prvHeapInit+0xb8>)
 8014102:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014104:	683b      	ldr	r3, [r7, #0]
 8014106:	685b      	ldr	r3, [r3, #4]
 8014108:	4a09      	ldr	r2, [pc, #36]	; (8014130 <prvHeapInit+0xbc>)
 801410a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801410c:	4b09      	ldr	r3, [pc, #36]	; (8014134 <prvHeapInit+0xc0>)
 801410e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014112:	601a      	str	r2, [r3, #0]
}
 8014114:	bf00      	nop
 8014116:	3714      	adds	r7, #20
 8014118:	46bd      	mov	sp, r7
 801411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411e:	4770      	bx	lr
 8014120:	2000243c 	.word	0x2000243c
 8014124:	200081fc 	.word	0x200081fc
 8014128:	20008204 	.word	0x20008204
 801412c:	2000820c 	.word	0x2000820c
 8014130:	20008208 	.word	0x20008208
 8014134:	20008218 	.word	0x20008218

08014138 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014138:	b480      	push	{r7}
 801413a:	b085      	sub	sp, #20
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014140:	4b28      	ldr	r3, [pc, #160]	; (80141e4 <prvInsertBlockIntoFreeList+0xac>)
 8014142:	60fb      	str	r3, [r7, #12]
 8014144:	e002      	b.n	801414c <prvInsertBlockIntoFreeList+0x14>
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	60fb      	str	r3, [r7, #12]
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	687a      	ldr	r2, [r7, #4]
 8014152:	429a      	cmp	r2, r3
 8014154:	d8f7      	bhi.n	8014146 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	685b      	ldr	r3, [r3, #4]
 801415e:	68ba      	ldr	r2, [r7, #8]
 8014160:	4413      	add	r3, r2
 8014162:	687a      	ldr	r2, [r7, #4]
 8014164:	429a      	cmp	r2, r3
 8014166:	d108      	bne.n	801417a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	685a      	ldr	r2, [r3, #4]
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	685b      	ldr	r3, [r3, #4]
 8014170:	441a      	add	r2, r3
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	685b      	ldr	r3, [r3, #4]
 8014182:	68ba      	ldr	r2, [r7, #8]
 8014184:	441a      	add	r2, r3
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	429a      	cmp	r2, r3
 801418c:	d118      	bne.n	80141c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	681a      	ldr	r2, [r3, #0]
 8014192:	4b15      	ldr	r3, [pc, #84]	; (80141e8 <prvInsertBlockIntoFreeList+0xb0>)
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	429a      	cmp	r2, r3
 8014198:	d00d      	beq.n	80141b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	685a      	ldr	r2, [r3, #4]
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	685b      	ldr	r3, [r3, #4]
 80141a4:	441a      	add	r2, r3
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	681a      	ldr	r2, [r3, #0]
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	601a      	str	r2, [r3, #0]
 80141b4:	e008      	b.n	80141c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80141b6:	4b0c      	ldr	r3, [pc, #48]	; (80141e8 <prvInsertBlockIntoFreeList+0xb0>)
 80141b8:	681a      	ldr	r2, [r3, #0]
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	601a      	str	r2, [r3, #0]
 80141be:	e003      	b.n	80141c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	681a      	ldr	r2, [r3, #0]
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80141c8:	68fa      	ldr	r2, [r7, #12]
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	429a      	cmp	r2, r3
 80141ce:	d002      	beq.n	80141d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	687a      	ldr	r2, [r7, #4]
 80141d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80141d6:	bf00      	nop
 80141d8:	3714      	adds	r7, #20
 80141da:	46bd      	mov	sp, r7
 80141dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e0:	4770      	bx	lr
 80141e2:	bf00      	nop
 80141e4:	200081fc 	.word	0x200081fc
 80141e8:	20008204 	.word	0x20008204

080141ec <USB_transmit_msg>:

/*
 * -- Insert your variables declaration here --
 */
/* USER CODE BEGIN 0 */
void USB_transmit_msg(uint8_t* data,uint32_t size){
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b082      	sub	sp, #8
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
 80141f4:	6039      	str	r1, [r7, #0]
  USBH_CDC_Stop(&hUsbHostFS);
 80141f6:	4806      	ldr	r0, [pc, #24]	; (8014210 <USB_transmit_msg+0x24>)
 80141f8:	f7f6 fd9f 	bl	800ad3a <USBH_CDC_Stop>
  USBH_CDC_Transmit(&hUsbHostFS,data, size);
 80141fc:	683a      	ldr	r2, [r7, #0]
 80141fe:	6879      	ldr	r1, [r7, #4]
 8014200:	4803      	ldr	r0, [pc, #12]	; (8014210 <USB_transmit_msg+0x24>)
 8014202:	f7f6 fe2a 	bl	800ae5a <USBH_CDC_Transmit>
}
 8014206:	bf00      	nop
 8014208:	3708      	adds	r7, #8
 801420a:	46bd      	mov	sp, r7
 801420c:	bd80      	pop	{r7, pc}
 801420e:	bf00      	nop
 8014210:	2000e1dc 	.word	0x2000e1dc

08014214 <USB_receive_msg>:

void USB_receive_msg(){
 8014214:	b580      	push	{r7, lr}
 8014216:	af00      	add	r7, sp, #0
  USBH_CDC_Stop(&hUsbHostFS);
 8014218:	4809      	ldr	r0, [pc, #36]	; (8014240 <USB_receive_msg+0x2c>)
 801421a:	f7f6 fd8e 	bl	800ad3a <USBH_CDC_Stop>
  USBH_CDC_Receive(&hUsbHostFS,usb_rx_buff[usb_rx_buff_active],USB_RX_BUFF_SIZE);
 801421e:	4b09      	ldr	r3, [pc, #36]	; (8014244 <USB_receive_msg+0x30>)
 8014220:	781b      	ldrb	r3, [r3, #0]
 8014222:	461a      	mov	r2, r3
 8014224:	f640 53ac 	movw	r3, #3500	; 0xdac
 8014228:	fb02 f303 	mul.w	r3, r2, r3
 801422c:	4a06      	ldr	r2, [pc, #24]	; (8014248 <USB_receive_msg+0x34>)
 801422e:	4413      	add	r3, r2
 8014230:	f640 52ac 	movw	r2, #3500	; 0xdac
 8014234:	4619      	mov	r1, r3
 8014236:	4802      	ldr	r0, [pc, #8]	; (8014240 <USB_receive_msg+0x2c>)
 8014238:	f7f6 fe4a 	bl	800aed0 <USBH_CDC_Receive>
}
 801423c:	bf00      	nop
 801423e:	bd80      	pop	{r7, pc}
 8014240:	2000e1dc 	.word	0x2000e1dc
 8014244:	2000e1d8 	.word	0x2000e1d8
 8014248:	20008224 	.word	0x20008224

0801424c <USB_set_line_coding>:


void USB_set_line_coding(){
 801424c:	b580      	push	{r7, lr}
 801424e:	af00      	add	r7, sp, #0
	FrameFormat.b.dwDTERate = 1250000;
 8014250:	4b08      	ldr	r3, [pc, #32]	; (8014274 <USB_set_line_coding+0x28>)
 8014252:	4a09      	ldr	r2, [pc, #36]	; (8014278 <USB_set_line_coding+0x2c>)
 8014254:	601a      	str	r2, [r3, #0]
	FrameFormat.b.bCharFormat = 0;
 8014256:	4b07      	ldr	r3, [pc, #28]	; (8014274 <USB_set_line_coding+0x28>)
 8014258:	2200      	movs	r2, #0
 801425a:	711a      	strb	r2, [r3, #4]
	FrameFormat.b.bDataBits = 8;
 801425c:	4b05      	ldr	r3, [pc, #20]	; (8014274 <USB_set_line_coding+0x28>)
 801425e:	2208      	movs	r2, #8
 8014260:	719a      	strb	r2, [r3, #6]
	FrameFormat.b.bParityType = 0;
 8014262:	4b04      	ldr	r3, [pc, #16]	; (8014274 <USB_set_line_coding+0x28>)
 8014264:	2200      	movs	r2, #0
 8014266:	715a      	strb	r2, [r3, #5]

	USBH_CDC_SetLineCoding(&hUsbHostFS, &FrameFormat);
 8014268:	4902      	ldr	r1, [pc, #8]	; (8014274 <USB_set_line_coding+0x28>)
 801426a:	4804      	ldr	r0, [pc, #16]	; (801427c <USB_set_line_coding+0x30>)
 801426c:	f7f6 fdcc 	bl	800ae08 <USBH_CDC_SetLineCoding>
}
 8014270:	bf00      	nop
 8014272:	bd80      	pop	{r7, pc}
 8014274:	2000821c 	.word	0x2000821c
 8014278:	001312d0 	.word	0x001312d0
 801427c:	2000e1dc 	.word	0x2000e1dc

08014280 <USBH_CDC_TransmitCallback>:
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */

void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b082      	sub	sp, #8
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
  USB_receive_msg();
 8014288:	f7ff ffc4 	bl	8014214 <USB_receive_msg>
}
 801428c:	bf00      	nop
 801428e:	3708      	adds	r7, #8
 8014290:	46bd      	mov	sp, r7
 8014292:	bd80      	pop	{r7, pc}

08014294 <USBH_CDC_ReceiveCallback>:


void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8014294:	b480      	push	{r7}
 8014296:	b083      	sub	sp, #12
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
}
 801429c:	bf00      	nop
 801429e:	370c      	adds	r7, #12
 80142a0:	46bd      	mov	sp, r7
 80142a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a6:	4770      	bx	lr

080142a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	af00      	add	r7, sp, #0


  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80142ac:	2201      	movs	r2, #1
 80142ae:	490e      	ldr	r1, [pc, #56]	; (80142e8 <MX_USB_HOST_Init+0x40>)
 80142b0:	480e      	ldr	r0, [pc, #56]	; (80142ec <MX_USB_HOST_Init+0x44>)
 80142b2:	f7f6 ff93 	bl	800b1dc <USBH_Init>
 80142b6:	4603      	mov	r3, r0
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d001      	beq.n	80142c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80142bc:	f7ee f95a 	bl	8002574 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80142c0:	490b      	ldr	r1, [pc, #44]	; (80142f0 <MX_USB_HOST_Init+0x48>)
 80142c2:	480a      	ldr	r0, [pc, #40]	; (80142ec <MX_USB_HOST_Init+0x44>)
 80142c4:	f7f7 f840 	bl	800b348 <USBH_RegisterClass>
 80142c8:	4603      	mov	r3, r0
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d001      	beq.n	80142d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80142ce:	f7ee f951 	bl	8002574 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80142d2:	4806      	ldr	r0, [pc, #24]	; (80142ec <MX_USB_HOST_Init+0x44>)
 80142d4:	f7f7 f8c4 	bl	800b460 <USBH_Start>
 80142d8:	4603      	mov	r3, r0
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d001      	beq.n	80142e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80142de:	f7ee f949 	bl	8002574 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80142e2:	bf00      	nop
 80142e4:	bd80      	pop	{r7, pc}
 80142e6:	bf00      	nop
 80142e8:	080142f5 	.word	0x080142f5
 80142ec:	2000e1dc 	.word	0x2000e1dc
 80142f0:	20000290 	.word	0x20000290

080142f4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b082      	sub	sp, #8
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
 80142fc:	460b      	mov	r3, r1
 80142fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8014300:	78fb      	ldrb	r3, [r7, #3]
 8014302:	3b01      	subs	r3, #1
 8014304:	2b04      	cmp	r3, #4
 8014306:	d82e      	bhi.n	8014366 <USBH_UserProcess+0x72>
 8014308:	a201      	add	r2, pc, #4	; (adr r2, 8014310 <USBH_UserProcess+0x1c>)
 801430a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801430e:	bf00      	nop
 8014310:	08014367 	.word	0x08014367
 8014314:	0801433b 	.word	0x0801433b
 8014318:	08014367 	.word	0x08014367
 801431c:	08014351 	.word	0x08014351
 8014320:	08014325 	.word	0x08014325
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8014324:	4b12      	ldr	r3, [pc, #72]	; (8014370 <USBH_UserProcess+0x7c>)
 8014326:	2203      	movs	r2, #3
 8014328:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_DISCONNECT, 0);
 801432a:	4b12      	ldr	r3, [pc, #72]	; (8014374 <USBH_UserProcess+0x80>)
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	2200      	movs	r2, #0
 8014330:	2103      	movs	r1, #3
 8014332:	4618      	mov	r0, r3
 8014334:	f7fd fd6c 	bl	8011e10 <osMessagePut>
  break;
 8014338:	e016      	b.n	8014368 <USBH_UserProcess+0x74>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801433a:	4b0d      	ldr	r3, [pc, #52]	; (8014370 <USBH_UserProcess+0x7c>)
 801433c:	2202      	movs	r2, #2
 801433e:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_READY, 0);
 8014340:	4b0c      	ldr	r3, [pc, #48]	; (8014374 <USBH_UserProcess+0x80>)
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	2200      	movs	r2, #0
 8014346:	2102      	movs	r1, #2
 8014348:	4618      	mov	r0, r3
 801434a:	f7fd fd61 	bl	8011e10 <osMessagePut>
  break;
 801434e:	e00b      	b.n	8014368 <USBH_UserProcess+0x74>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8014350:	4b07      	ldr	r3, [pc, #28]	; (8014370 <USBH_UserProcess+0x7c>)
 8014352:	2201      	movs	r2, #1
 8014354:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_START, 0);
 8014356:	4b07      	ldr	r3, [pc, #28]	; (8014374 <USBH_UserProcess+0x80>)
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	2200      	movs	r2, #0
 801435c:	2101      	movs	r1, #1
 801435e:	4618      	mov	r0, r3
 8014360:	f7fd fd56 	bl	8011e10 <osMessagePut>
  break;
 8014364:	e000      	b.n	8014368 <USBH_UserProcess+0x74>

  default:
  break;
 8014366:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8014368:	bf00      	nop
 801436a:	3708      	adds	r7, #8
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}
 8014370:	2000e5c0 	.word	0x2000e5c0
 8014374:	200009a8 	.word	0x200009a8

08014378 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b08a      	sub	sp, #40	; 0x28
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014380:	f107 0314 	add.w	r3, r7, #20
 8014384:	2200      	movs	r2, #0
 8014386:	601a      	str	r2, [r3, #0]
 8014388:	605a      	str	r2, [r3, #4]
 801438a:	609a      	str	r2, [r3, #8]
 801438c:	60da      	str	r2, [r3, #12]
 801438e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014398:	d13a      	bne.n	8014410 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801439a:	2300      	movs	r3, #0
 801439c:	613b      	str	r3, [r7, #16]
 801439e:	4b1e      	ldr	r3, [pc, #120]	; (8014418 <HAL_HCD_MspInit+0xa0>)
 80143a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143a2:	4a1d      	ldr	r2, [pc, #116]	; (8014418 <HAL_HCD_MspInit+0xa0>)
 80143a4:	f043 0301 	orr.w	r3, r3, #1
 80143a8:	6313      	str	r3, [r2, #48]	; 0x30
 80143aa:	4b1b      	ldr	r3, [pc, #108]	; (8014418 <HAL_HCD_MspInit+0xa0>)
 80143ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143ae:	f003 0301 	and.w	r3, r3, #1
 80143b2:	613b      	str	r3, [r7, #16]
 80143b4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80143b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80143ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80143bc:	2302      	movs	r3, #2
 80143be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80143c0:	2300      	movs	r3, #0
 80143c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80143c4:	2303      	movs	r3, #3
 80143c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80143c8:	230a      	movs	r3, #10
 80143ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80143cc:	f107 0314 	add.w	r3, r7, #20
 80143d0:	4619      	mov	r1, r3
 80143d2:	4812      	ldr	r0, [pc, #72]	; (801441c <HAL_HCD_MspInit+0xa4>)
 80143d4:	f7f0 f80c 	bl	80043f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80143d8:	4b0f      	ldr	r3, [pc, #60]	; (8014418 <HAL_HCD_MspInit+0xa0>)
 80143da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143dc:	4a0e      	ldr	r2, [pc, #56]	; (8014418 <HAL_HCD_MspInit+0xa0>)
 80143de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80143e2:	6353      	str	r3, [r2, #52]	; 0x34
 80143e4:	2300      	movs	r3, #0
 80143e6:	60fb      	str	r3, [r7, #12]
 80143e8:	4b0b      	ldr	r3, [pc, #44]	; (8014418 <HAL_HCD_MspInit+0xa0>)
 80143ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143ec:	4a0a      	ldr	r2, [pc, #40]	; (8014418 <HAL_HCD_MspInit+0xa0>)
 80143ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80143f2:	6453      	str	r3, [r2, #68]	; 0x44
 80143f4:	4b08      	ldr	r3, [pc, #32]	; (8014418 <HAL_HCD_MspInit+0xa0>)
 80143f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80143fc:	60fb      	str	r3, [r7, #12]
 80143fe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8014400:	2200      	movs	r2, #0
 8014402:	2105      	movs	r1, #5
 8014404:	2043      	movs	r0, #67	; 0x43
 8014406:	f7ef f975 	bl	80036f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801440a:	2043      	movs	r0, #67	; 0x43
 801440c:	f7ef f98e 	bl	800372c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014410:	bf00      	nop
 8014412:	3728      	adds	r7, #40	; 0x28
 8014414:	46bd      	mov	sp, r7
 8014416:	bd80      	pop	{r7, pc}
 8014418:	40023800 	.word	0x40023800
 801441c:	40020000 	.word	0x40020000

08014420 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b082      	sub	sp, #8
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801442e:	4618      	mov	r0, r3
 8014430:	f7f7 fccd 	bl	800bdce <USBH_LL_IncTimer>
}
 8014434:	bf00      	nop
 8014436:	3708      	adds	r7, #8
 8014438:	46bd      	mov	sp, r7
 801443a:	bd80      	pop	{r7, pc}

0801443c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801443c:	b580      	push	{r7, lr}
 801443e:	b082      	sub	sp, #8
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801444a:	4618      	mov	r0, r3
 801444c:	f7f7 fd11 	bl	800be72 <USBH_LL_Connect>
}
 8014450:	bf00      	nop
 8014452:	3708      	adds	r7, #8
 8014454:	46bd      	mov	sp, r7
 8014456:	bd80      	pop	{r7, pc}

08014458 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b082      	sub	sp, #8
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8014466:	4618      	mov	r0, r3
 8014468:	f7f7 fd26 	bl	800beb8 <USBH_LL_Disconnect>
}
 801446c:	bf00      	nop
 801446e:	3708      	adds	r7, #8
 8014470:	46bd      	mov	sp, r7
 8014472:	bd80      	pop	{r7, pc}

08014474 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b082      	sub	sp, #8
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
 801447c:	460b      	mov	r3, r1
 801447e:	70fb      	strb	r3, [r7, #3]
 8014480:	4613      	mov	r3, r2
 8014482:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801448a:	4618      	mov	r0, r3
 801448c:	f7f7 fd5b 	bl	800bf46 <USBH_LL_NotifyURBChange>
#endif
}
 8014490:	bf00      	nop
 8014492:	3708      	adds	r7, #8
 8014494:	46bd      	mov	sp, r7
 8014496:	bd80      	pop	{r7, pc}

08014498 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8014498:	b580      	push	{r7, lr}
 801449a:	b082      	sub	sp, #8
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80144a6:	4618      	mov	r0, r3
 80144a8:	f7f7 fcbb 	bl	800be22 <USBH_LL_PortEnabled>
}
 80144ac:	bf00      	nop
 80144ae:	3708      	adds	r7, #8
 80144b0:	46bd      	mov	sp, r7
 80144b2:	bd80      	pop	{r7, pc}

080144b4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b082      	sub	sp, #8
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80144c2:	4618      	mov	r0, r3
 80144c4:	f7f7 fcc7 	bl	800be56 <USBH_LL_PortDisabled>
}
 80144c8:	bf00      	nop
 80144ca:	3708      	adds	r7, #8
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}

080144d0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b082      	sub	sp, #8
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80144de:	2b01      	cmp	r3, #1
 80144e0:	d12a      	bne.n	8014538 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80144e2:	4a18      	ldr	r2, [pc, #96]	; (8014544 <USBH_LL_Init+0x74>)
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	4a15      	ldr	r2, [pc, #84]	; (8014544 <USBH_LL_Init+0x74>)
 80144ee:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80144f2:	4b14      	ldr	r3, [pc, #80]	; (8014544 <USBH_LL_Init+0x74>)
 80144f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80144f8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80144fa:	4b12      	ldr	r3, [pc, #72]	; (8014544 <USBH_LL_Init+0x74>)
 80144fc:	2208      	movs	r2, #8
 80144fe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8014500:	4b10      	ldr	r3, [pc, #64]	; (8014544 <USBH_LL_Init+0x74>)
 8014502:	2201      	movs	r2, #1
 8014504:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8014506:	4b0f      	ldr	r3, [pc, #60]	; (8014544 <USBH_LL_Init+0x74>)
 8014508:	2200      	movs	r2, #0
 801450a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801450c:	4b0d      	ldr	r3, [pc, #52]	; (8014544 <USBH_LL_Init+0x74>)
 801450e:	2202      	movs	r2, #2
 8014510:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014512:	4b0c      	ldr	r3, [pc, #48]	; (8014544 <USBH_LL_Init+0x74>)
 8014514:	2200      	movs	r2, #0
 8014516:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8014518:	480a      	ldr	r0, [pc, #40]	; (8014544 <USBH_LL_Init+0x74>)
 801451a:	f7f0 f91e 	bl	800475a <HAL_HCD_Init>
 801451e:	4603      	mov	r3, r0
 8014520:	2b00      	cmp	r3, #0
 8014522:	d001      	beq.n	8014528 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8014524:	f7ee f826 	bl	8002574 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8014528:	4806      	ldr	r0, [pc, #24]	; (8014544 <USBH_LL_Init+0x74>)
 801452a:	f7f0 fd02 	bl	8004f32 <HAL_HCD_GetCurrentFrame>
 801452e:	4603      	mov	r3, r0
 8014530:	4619      	mov	r1, r3
 8014532:	6878      	ldr	r0, [r7, #4]
 8014534:	f7f7 fc3c 	bl	800bdb0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8014538:	2300      	movs	r3, #0
}
 801453a:	4618      	mov	r0, r3
 801453c:	3708      	adds	r7, #8
 801453e:	46bd      	mov	sp, r7
 8014540:	bd80      	pop	{r7, pc}
 8014542:	bf00      	nop
 8014544:	2000e5c4 	.word	0x2000e5c4

08014548 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b084      	sub	sp, #16
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014550:	2300      	movs	r3, #0
 8014552:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014554:	2300      	movs	r3, #0
 8014556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801455e:	4618      	mov	r0, r3
 8014560:	f7f0 fc71 	bl	8004e46 <HAL_HCD_Start>
 8014564:	4603      	mov	r3, r0
 8014566:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014568:	7bfb      	ldrb	r3, [r7, #15]
 801456a:	4618      	mov	r0, r3
 801456c:	f000 f95c 	bl	8014828 <USBH_Get_USB_Status>
 8014570:	4603      	mov	r3, r0
 8014572:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014574:	7bbb      	ldrb	r3, [r7, #14]
}
 8014576:	4618      	mov	r0, r3
 8014578:	3710      	adds	r7, #16
 801457a:	46bd      	mov	sp, r7
 801457c:	bd80      	pop	{r7, pc}

0801457e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801457e:	b580      	push	{r7, lr}
 8014580:	b084      	sub	sp, #16
 8014582:	af00      	add	r7, sp, #0
 8014584:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014586:	2300      	movs	r3, #0
 8014588:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801458a:	2300      	movs	r3, #0
 801458c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014594:	4618      	mov	r0, r3
 8014596:	f7f0 fc79 	bl	8004e8c <HAL_HCD_Stop>
 801459a:	4603      	mov	r3, r0
 801459c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801459e:	7bfb      	ldrb	r3, [r7, #15]
 80145a0:	4618      	mov	r0, r3
 80145a2:	f000 f941 	bl	8014828 <USBH_Get_USB_Status>
 80145a6:	4603      	mov	r3, r0
 80145a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80145aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80145ac:	4618      	mov	r0, r3
 80145ae:	3710      	adds	r7, #16
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd80      	pop	{r7, pc}

080145b4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b084      	sub	sp, #16
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80145bc:	2301      	movs	r3, #1
 80145be:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80145c6:	4618      	mov	r0, r3
 80145c8:	f7f0 fcc1 	bl	8004f4e <HAL_HCD_GetCurrentSpeed>
 80145cc:	4603      	mov	r3, r0
 80145ce:	2b02      	cmp	r3, #2
 80145d0:	d00c      	beq.n	80145ec <USBH_LL_GetSpeed+0x38>
 80145d2:	2b02      	cmp	r3, #2
 80145d4:	d80d      	bhi.n	80145f2 <USBH_LL_GetSpeed+0x3e>
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d002      	beq.n	80145e0 <USBH_LL_GetSpeed+0x2c>
 80145da:	2b01      	cmp	r3, #1
 80145dc:	d003      	beq.n	80145e6 <USBH_LL_GetSpeed+0x32>
 80145de:	e008      	b.n	80145f2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80145e0:	2300      	movs	r3, #0
 80145e2:	73fb      	strb	r3, [r7, #15]
    break;
 80145e4:	e008      	b.n	80145f8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80145e6:	2301      	movs	r3, #1
 80145e8:	73fb      	strb	r3, [r7, #15]
    break;
 80145ea:	e005      	b.n	80145f8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80145ec:	2302      	movs	r3, #2
 80145ee:	73fb      	strb	r3, [r7, #15]
    break;
 80145f0:	e002      	b.n	80145f8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80145f2:	2301      	movs	r3, #1
 80145f4:	73fb      	strb	r3, [r7, #15]
    break;
 80145f6:	bf00      	nop
  }
  return  speed;
 80145f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80145fa:	4618      	mov	r0, r3
 80145fc:	3710      	adds	r7, #16
 80145fe:	46bd      	mov	sp, r7
 8014600:	bd80      	pop	{r7, pc}

08014602 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8014602:	b580      	push	{r7, lr}
 8014604:	b084      	sub	sp, #16
 8014606:	af00      	add	r7, sp, #0
 8014608:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801460a:	2300      	movs	r3, #0
 801460c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801460e:	2300      	movs	r3, #0
 8014610:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014618:	4618      	mov	r0, r3
 801461a:	f7f0 fc54 	bl	8004ec6 <HAL_HCD_ResetPort>
 801461e:	4603      	mov	r3, r0
 8014620:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014622:	7bfb      	ldrb	r3, [r7, #15]
 8014624:	4618      	mov	r0, r3
 8014626:	f000 f8ff 	bl	8014828 <USBH_Get_USB_Status>
 801462a:	4603      	mov	r3, r0
 801462c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801462e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014630:	4618      	mov	r0, r3
 8014632:	3710      	adds	r7, #16
 8014634:	46bd      	mov	sp, r7
 8014636:	bd80      	pop	{r7, pc}

08014638 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b082      	sub	sp, #8
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
 8014640:	460b      	mov	r3, r1
 8014642:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801464a:	78fa      	ldrb	r2, [r7, #3]
 801464c:	4611      	mov	r1, r2
 801464e:	4618      	mov	r0, r3
 8014650:	f7f0 fc5b 	bl	8004f0a <HAL_HCD_HC_GetXferCount>
 8014654:	4603      	mov	r3, r0
}
 8014656:	4618      	mov	r0, r3
 8014658:	3708      	adds	r7, #8
 801465a:	46bd      	mov	sp, r7
 801465c:	bd80      	pop	{r7, pc}

0801465e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801465e:	b590      	push	{r4, r7, lr}
 8014660:	b089      	sub	sp, #36	; 0x24
 8014662:	af04      	add	r7, sp, #16
 8014664:	6078      	str	r0, [r7, #4]
 8014666:	4608      	mov	r0, r1
 8014668:	4611      	mov	r1, r2
 801466a:	461a      	mov	r2, r3
 801466c:	4603      	mov	r3, r0
 801466e:	70fb      	strb	r3, [r7, #3]
 8014670:	460b      	mov	r3, r1
 8014672:	70bb      	strb	r3, [r7, #2]
 8014674:	4613      	mov	r3, r2
 8014676:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014678:	2300      	movs	r3, #0
 801467a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801467c:	2300      	movs	r3, #0
 801467e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8014686:	787c      	ldrb	r4, [r7, #1]
 8014688:	78ba      	ldrb	r2, [r7, #2]
 801468a:	78f9      	ldrb	r1, [r7, #3]
 801468c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801468e:	9302      	str	r3, [sp, #8]
 8014690:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014694:	9301      	str	r3, [sp, #4]
 8014696:	f897 3020 	ldrb.w	r3, [r7, #32]
 801469a:	9300      	str	r3, [sp, #0]
 801469c:	4623      	mov	r3, r4
 801469e:	f7f0 f8be 	bl	800481e <HAL_HCD_HC_Init>
 80146a2:	4603      	mov	r3, r0
 80146a4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80146a6:	7bfb      	ldrb	r3, [r7, #15]
 80146a8:	4618      	mov	r0, r3
 80146aa:	f000 f8bd 	bl	8014828 <USBH_Get_USB_Status>
 80146ae:	4603      	mov	r3, r0
 80146b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80146b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80146b4:	4618      	mov	r0, r3
 80146b6:	3714      	adds	r7, #20
 80146b8:	46bd      	mov	sp, r7
 80146ba:	bd90      	pop	{r4, r7, pc}

080146bc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80146bc:	b580      	push	{r7, lr}
 80146be:	b084      	sub	sp, #16
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
 80146c4:	460b      	mov	r3, r1
 80146c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80146c8:	2300      	movs	r3, #0
 80146ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80146cc:	2300      	movs	r3, #0
 80146ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80146d6:	78fa      	ldrb	r2, [r7, #3]
 80146d8:	4611      	mov	r1, r2
 80146da:	4618      	mov	r0, r3
 80146dc:	f7f0 f92e 	bl	800493c <HAL_HCD_HC_Halt>
 80146e0:	4603      	mov	r3, r0
 80146e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80146e4:	7bfb      	ldrb	r3, [r7, #15]
 80146e6:	4618      	mov	r0, r3
 80146e8:	f000 f89e 	bl	8014828 <USBH_Get_USB_Status>
 80146ec:	4603      	mov	r3, r0
 80146ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80146f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80146f2:	4618      	mov	r0, r3
 80146f4:	3710      	adds	r7, #16
 80146f6:	46bd      	mov	sp, r7
 80146f8:	bd80      	pop	{r7, pc}

080146fa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80146fa:	b590      	push	{r4, r7, lr}
 80146fc:	b089      	sub	sp, #36	; 0x24
 80146fe:	af04      	add	r7, sp, #16
 8014700:	6078      	str	r0, [r7, #4]
 8014702:	4608      	mov	r0, r1
 8014704:	4611      	mov	r1, r2
 8014706:	461a      	mov	r2, r3
 8014708:	4603      	mov	r3, r0
 801470a:	70fb      	strb	r3, [r7, #3]
 801470c:	460b      	mov	r3, r1
 801470e:	70bb      	strb	r3, [r7, #2]
 8014710:	4613      	mov	r3, r2
 8014712:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014714:	2300      	movs	r3, #0
 8014716:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014718:	2300      	movs	r3, #0
 801471a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8014722:	787c      	ldrb	r4, [r7, #1]
 8014724:	78ba      	ldrb	r2, [r7, #2]
 8014726:	78f9      	ldrb	r1, [r7, #3]
 8014728:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801472c:	9303      	str	r3, [sp, #12]
 801472e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014730:	9302      	str	r3, [sp, #8]
 8014732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014734:	9301      	str	r3, [sp, #4]
 8014736:	f897 3020 	ldrb.w	r3, [r7, #32]
 801473a:	9300      	str	r3, [sp, #0]
 801473c:	4623      	mov	r3, r4
 801473e:	f7f0 f921 	bl	8004984 <HAL_HCD_HC_SubmitRequest>
 8014742:	4603      	mov	r3, r0
 8014744:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8014746:	7bfb      	ldrb	r3, [r7, #15]
 8014748:	4618      	mov	r0, r3
 801474a:	f000 f86d 	bl	8014828 <USBH_Get_USB_Status>
 801474e:	4603      	mov	r3, r0
 8014750:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014752:	7bbb      	ldrb	r3, [r7, #14]
}
 8014754:	4618      	mov	r0, r3
 8014756:	3714      	adds	r7, #20
 8014758:	46bd      	mov	sp, r7
 801475a:	bd90      	pop	{r4, r7, pc}

0801475c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801475c:	b580      	push	{r7, lr}
 801475e:	b082      	sub	sp, #8
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
 8014764:	460b      	mov	r3, r1
 8014766:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801476e:	78fa      	ldrb	r2, [r7, #3]
 8014770:	4611      	mov	r1, r2
 8014772:	4618      	mov	r0, r3
 8014774:	f7f0 fbb5 	bl	8004ee2 <HAL_HCD_HC_GetURBState>
 8014778:	4603      	mov	r3, r0
}
 801477a:	4618      	mov	r0, r3
 801477c:	3708      	adds	r7, #8
 801477e:	46bd      	mov	sp, r7
 8014780:	bd80      	pop	{r7, pc}

08014782 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8014782:	b580      	push	{r7, lr}
 8014784:	b082      	sub	sp, #8
 8014786:	af00      	add	r7, sp, #0
 8014788:	6078      	str	r0, [r7, #4]
 801478a:	460b      	mov	r3, r1
 801478c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8014794:	2b01      	cmp	r3, #1
 8014796:	d103      	bne.n	80147a0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8014798:	78fb      	ldrb	r3, [r7, #3]
 801479a:	4618      	mov	r0, r3
 801479c:	f000 f870 	bl	8014880 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80147a0:	20c8      	movs	r0, #200	; 0xc8
 80147a2:	f7ee fecb 	bl	800353c <HAL_Delay>
  return USBH_OK;
 80147a6:	2300      	movs	r3, #0
}
 80147a8:	4618      	mov	r0, r3
 80147aa:	3708      	adds	r7, #8
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd80      	pop	{r7, pc}

080147b0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80147b0:	b480      	push	{r7}
 80147b2:	b085      	sub	sp, #20
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
 80147b8:	460b      	mov	r3, r1
 80147ba:	70fb      	strb	r3, [r7, #3]
 80147bc:	4613      	mov	r3, r2
 80147be:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80147c6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80147c8:	78fb      	ldrb	r3, [r7, #3]
 80147ca:	68fa      	ldr	r2, [r7, #12]
 80147cc:	212c      	movs	r1, #44	; 0x2c
 80147ce:	fb01 f303 	mul.w	r3, r1, r3
 80147d2:	4413      	add	r3, r2
 80147d4:	333b      	adds	r3, #59	; 0x3b
 80147d6:	781b      	ldrb	r3, [r3, #0]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d009      	beq.n	80147f0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80147dc:	78fb      	ldrb	r3, [r7, #3]
 80147de:	68fa      	ldr	r2, [r7, #12]
 80147e0:	212c      	movs	r1, #44	; 0x2c
 80147e2:	fb01 f303 	mul.w	r3, r1, r3
 80147e6:	4413      	add	r3, r2
 80147e8:	3354      	adds	r3, #84	; 0x54
 80147ea:	78ba      	ldrb	r2, [r7, #2]
 80147ec:	701a      	strb	r2, [r3, #0]
 80147ee:	e008      	b.n	8014802 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80147f0:	78fb      	ldrb	r3, [r7, #3]
 80147f2:	68fa      	ldr	r2, [r7, #12]
 80147f4:	212c      	movs	r1, #44	; 0x2c
 80147f6:	fb01 f303 	mul.w	r3, r1, r3
 80147fa:	4413      	add	r3, r2
 80147fc:	3355      	adds	r3, #85	; 0x55
 80147fe:	78ba      	ldrb	r2, [r7, #2]
 8014800:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8014802:	2300      	movs	r3, #0
}
 8014804:	4618      	mov	r0, r3
 8014806:	3714      	adds	r7, #20
 8014808:	46bd      	mov	sp, r7
 801480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801480e:	4770      	bx	lr

08014810 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b082      	sub	sp, #8
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8014818:	6878      	ldr	r0, [r7, #4]
 801481a:	f7ee fe8f 	bl	800353c <HAL_Delay>
}
 801481e:	bf00      	nop
 8014820:	3708      	adds	r7, #8
 8014822:	46bd      	mov	sp, r7
 8014824:	bd80      	pop	{r7, pc}
	...

08014828 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014828:	b480      	push	{r7}
 801482a:	b085      	sub	sp, #20
 801482c:	af00      	add	r7, sp, #0
 801482e:	4603      	mov	r3, r0
 8014830:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014832:	2300      	movs	r3, #0
 8014834:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014836:	79fb      	ldrb	r3, [r7, #7]
 8014838:	2b03      	cmp	r3, #3
 801483a:	d817      	bhi.n	801486c <USBH_Get_USB_Status+0x44>
 801483c:	a201      	add	r2, pc, #4	; (adr r2, 8014844 <USBH_Get_USB_Status+0x1c>)
 801483e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014842:	bf00      	nop
 8014844:	08014855 	.word	0x08014855
 8014848:	0801485b 	.word	0x0801485b
 801484c:	08014861 	.word	0x08014861
 8014850:	08014867 	.word	0x08014867
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8014854:	2300      	movs	r3, #0
 8014856:	73fb      	strb	r3, [r7, #15]
    break;
 8014858:	e00b      	b.n	8014872 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801485a:	2302      	movs	r3, #2
 801485c:	73fb      	strb	r3, [r7, #15]
    break;
 801485e:	e008      	b.n	8014872 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8014860:	2301      	movs	r3, #1
 8014862:	73fb      	strb	r3, [r7, #15]
    break;
 8014864:	e005      	b.n	8014872 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8014866:	2302      	movs	r3, #2
 8014868:	73fb      	strb	r3, [r7, #15]
    break;
 801486a:	e002      	b.n	8014872 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801486c:	2302      	movs	r3, #2
 801486e:	73fb      	strb	r3, [r7, #15]
    break;
 8014870:	bf00      	nop
  }
  return usb_status;
 8014872:	7bfb      	ldrb	r3, [r7, #15]
}
 8014874:	4618      	mov	r0, r3
 8014876:	3714      	adds	r7, #20
 8014878:	46bd      	mov	sp, r7
 801487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801487e:	4770      	bx	lr

08014880 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8014880:	b580      	push	{r7, lr}
 8014882:	b084      	sub	sp, #16
 8014884:	af00      	add	r7, sp, #0
 8014886:	4603      	mov	r3, r0
 8014888:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801488a:	79fb      	ldrb	r3, [r7, #7]
 801488c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801488e:	79fb      	ldrb	r3, [r7, #7]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d102      	bne.n	801489a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8014894:	2301      	movs	r3, #1
 8014896:	73fb      	strb	r3, [r7, #15]
 8014898:	e001      	b.n	801489e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801489a:	2300      	movs	r3, #0
 801489c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,(GPIO_PinState)data);
 801489e:	7bfb      	ldrb	r3, [r7, #15]
 80148a0:	461a      	mov	r2, r3
 80148a2:	2101      	movs	r1, #1
 80148a4:	4803      	ldr	r0, [pc, #12]	; (80148b4 <MX_DriverVbusFS+0x34>)
 80148a6:	f7ef ff3f 	bl	8004728 <HAL_GPIO_WritePin>
}
 80148aa:	bf00      	nop
 80148ac:	3710      	adds	r7, #16
 80148ae:	46bd      	mov	sp, r7
 80148b0:	bd80      	pop	{r7, pc}
 80148b2:	bf00      	nop
 80148b4:	40020400 	.word	0x40020400

080148b8 <atol>:
 80148b8:	220a      	movs	r2, #10
 80148ba:	2100      	movs	r1, #0
 80148bc:	f000 be5e 	b.w	801557c <strtol>

080148c0 <__errno>:
 80148c0:	4b01      	ldr	r3, [pc, #4]	; (80148c8 <__errno+0x8>)
 80148c2:	6818      	ldr	r0, [r3, #0]
 80148c4:	4770      	bx	lr
 80148c6:	bf00      	nop
 80148c8:	200002b4 	.word	0x200002b4

080148cc <std>:
 80148cc:	2300      	movs	r3, #0
 80148ce:	b510      	push	{r4, lr}
 80148d0:	4604      	mov	r4, r0
 80148d2:	e9c0 3300 	strd	r3, r3, [r0]
 80148d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80148da:	6083      	str	r3, [r0, #8]
 80148dc:	8181      	strh	r1, [r0, #12]
 80148de:	6643      	str	r3, [r0, #100]	; 0x64
 80148e0:	81c2      	strh	r2, [r0, #14]
 80148e2:	6183      	str	r3, [r0, #24]
 80148e4:	4619      	mov	r1, r3
 80148e6:	2208      	movs	r2, #8
 80148e8:	305c      	adds	r0, #92	; 0x5c
 80148ea:	f000 f92d 	bl	8014b48 <memset>
 80148ee:	4b05      	ldr	r3, [pc, #20]	; (8014904 <std+0x38>)
 80148f0:	6263      	str	r3, [r4, #36]	; 0x24
 80148f2:	4b05      	ldr	r3, [pc, #20]	; (8014908 <std+0x3c>)
 80148f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80148f6:	4b05      	ldr	r3, [pc, #20]	; (801490c <std+0x40>)
 80148f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80148fa:	4b05      	ldr	r3, [pc, #20]	; (8014910 <std+0x44>)
 80148fc:	6224      	str	r4, [r4, #32]
 80148fe:	6323      	str	r3, [r4, #48]	; 0x30
 8014900:	bd10      	pop	{r4, pc}
 8014902:	bf00      	nop
 8014904:	08015331 	.word	0x08015331
 8014908:	08015357 	.word	0x08015357
 801490c:	0801538f 	.word	0x0801538f
 8014910:	080153b3 	.word	0x080153b3

08014914 <_cleanup_r>:
 8014914:	4901      	ldr	r1, [pc, #4]	; (801491c <_cleanup_r+0x8>)
 8014916:	f000 b8af 	b.w	8014a78 <_fwalk_reent>
 801491a:	bf00      	nop
 801491c:	08015bbd 	.word	0x08015bbd

08014920 <__sfmoreglue>:
 8014920:	b570      	push	{r4, r5, r6, lr}
 8014922:	2268      	movs	r2, #104	; 0x68
 8014924:	1e4d      	subs	r5, r1, #1
 8014926:	4355      	muls	r5, r2
 8014928:	460e      	mov	r6, r1
 801492a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801492e:	f000 fbf1 	bl	8015114 <_malloc_r>
 8014932:	4604      	mov	r4, r0
 8014934:	b140      	cbz	r0, 8014948 <__sfmoreglue+0x28>
 8014936:	2100      	movs	r1, #0
 8014938:	e9c0 1600 	strd	r1, r6, [r0]
 801493c:	300c      	adds	r0, #12
 801493e:	60a0      	str	r0, [r4, #8]
 8014940:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014944:	f000 f900 	bl	8014b48 <memset>
 8014948:	4620      	mov	r0, r4
 801494a:	bd70      	pop	{r4, r5, r6, pc}

0801494c <__sfp_lock_acquire>:
 801494c:	4801      	ldr	r0, [pc, #4]	; (8014954 <__sfp_lock_acquire+0x8>)
 801494e:	f000 b8d9 	b.w	8014b04 <__retarget_lock_acquire_recursive>
 8014952:	bf00      	nop
 8014954:	2000e8ca 	.word	0x2000e8ca

08014958 <__sfp_lock_release>:
 8014958:	4801      	ldr	r0, [pc, #4]	; (8014960 <__sfp_lock_release+0x8>)
 801495a:	f000 b8d5 	b.w	8014b08 <__retarget_lock_release_recursive>
 801495e:	bf00      	nop
 8014960:	2000e8ca 	.word	0x2000e8ca

08014964 <__sinit_lock_acquire>:
 8014964:	4801      	ldr	r0, [pc, #4]	; (801496c <__sinit_lock_acquire+0x8>)
 8014966:	f000 b8cd 	b.w	8014b04 <__retarget_lock_acquire_recursive>
 801496a:	bf00      	nop
 801496c:	2000e8cb 	.word	0x2000e8cb

08014970 <__sinit_lock_release>:
 8014970:	4801      	ldr	r0, [pc, #4]	; (8014978 <__sinit_lock_release+0x8>)
 8014972:	f000 b8c9 	b.w	8014b08 <__retarget_lock_release_recursive>
 8014976:	bf00      	nop
 8014978:	2000e8cb 	.word	0x2000e8cb

0801497c <__sinit>:
 801497c:	b510      	push	{r4, lr}
 801497e:	4604      	mov	r4, r0
 8014980:	f7ff fff0 	bl	8014964 <__sinit_lock_acquire>
 8014984:	69a3      	ldr	r3, [r4, #24]
 8014986:	b11b      	cbz	r3, 8014990 <__sinit+0x14>
 8014988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801498c:	f7ff bff0 	b.w	8014970 <__sinit_lock_release>
 8014990:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014994:	6523      	str	r3, [r4, #80]	; 0x50
 8014996:	4b13      	ldr	r3, [pc, #76]	; (80149e4 <__sinit+0x68>)
 8014998:	4a13      	ldr	r2, [pc, #76]	; (80149e8 <__sinit+0x6c>)
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	62a2      	str	r2, [r4, #40]	; 0x28
 801499e:	42a3      	cmp	r3, r4
 80149a0:	bf04      	itt	eq
 80149a2:	2301      	moveq	r3, #1
 80149a4:	61a3      	streq	r3, [r4, #24]
 80149a6:	4620      	mov	r0, r4
 80149a8:	f000 f820 	bl	80149ec <__sfp>
 80149ac:	6060      	str	r0, [r4, #4]
 80149ae:	4620      	mov	r0, r4
 80149b0:	f000 f81c 	bl	80149ec <__sfp>
 80149b4:	60a0      	str	r0, [r4, #8]
 80149b6:	4620      	mov	r0, r4
 80149b8:	f000 f818 	bl	80149ec <__sfp>
 80149bc:	2200      	movs	r2, #0
 80149be:	60e0      	str	r0, [r4, #12]
 80149c0:	2104      	movs	r1, #4
 80149c2:	6860      	ldr	r0, [r4, #4]
 80149c4:	f7ff ff82 	bl	80148cc <std>
 80149c8:	68a0      	ldr	r0, [r4, #8]
 80149ca:	2201      	movs	r2, #1
 80149cc:	2109      	movs	r1, #9
 80149ce:	f7ff ff7d 	bl	80148cc <std>
 80149d2:	68e0      	ldr	r0, [r4, #12]
 80149d4:	2202      	movs	r2, #2
 80149d6:	2112      	movs	r1, #18
 80149d8:	f7ff ff78 	bl	80148cc <std>
 80149dc:	2301      	movs	r3, #1
 80149de:	61a3      	str	r3, [r4, #24]
 80149e0:	e7d2      	b.n	8014988 <__sinit+0xc>
 80149e2:	bf00      	nop
 80149e4:	08017bcc 	.word	0x08017bcc
 80149e8:	08014915 	.word	0x08014915

080149ec <__sfp>:
 80149ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149ee:	4607      	mov	r7, r0
 80149f0:	f7ff ffac 	bl	801494c <__sfp_lock_acquire>
 80149f4:	4b1e      	ldr	r3, [pc, #120]	; (8014a70 <__sfp+0x84>)
 80149f6:	681e      	ldr	r6, [r3, #0]
 80149f8:	69b3      	ldr	r3, [r6, #24]
 80149fa:	b913      	cbnz	r3, 8014a02 <__sfp+0x16>
 80149fc:	4630      	mov	r0, r6
 80149fe:	f7ff ffbd 	bl	801497c <__sinit>
 8014a02:	3648      	adds	r6, #72	; 0x48
 8014a04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014a08:	3b01      	subs	r3, #1
 8014a0a:	d503      	bpl.n	8014a14 <__sfp+0x28>
 8014a0c:	6833      	ldr	r3, [r6, #0]
 8014a0e:	b30b      	cbz	r3, 8014a54 <__sfp+0x68>
 8014a10:	6836      	ldr	r6, [r6, #0]
 8014a12:	e7f7      	b.n	8014a04 <__sfp+0x18>
 8014a14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014a18:	b9d5      	cbnz	r5, 8014a50 <__sfp+0x64>
 8014a1a:	4b16      	ldr	r3, [pc, #88]	; (8014a74 <__sfp+0x88>)
 8014a1c:	60e3      	str	r3, [r4, #12]
 8014a1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014a22:	6665      	str	r5, [r4, #100]	; 0x64
 8014a24:	f000 f86c 	bl	8014b00 <__retarget_lock_init_recursive>
 8014a28:	f7ff ff96 	bl	8014958 <__sfp_lock_release>
 8014a2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014a30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014a34:	6025      	str	r5, [r4, #0]
 8014a36:	61a5      	str	r5, [r4, #24]
 8014a38:	2208      	movs	r2, #8
 8014a3a:	4629      	mov	r1, r5
 8014a3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014a40:	f000 f882 	bl	8014b48 <memset>
 8014a44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014a48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014a4c:	4620      	mov	r0, r4
 8014a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a50:	3468      	adds	r4, #104	; 0x68
 8014a52:	e7d9      	b.n	8014a08 <__sfp+0x1c>
 8014a54:	2104      	movs	r1, #4
 8014a56:	4638      	mov	r0, r7
 8014a58:	f7ff ff62 	bl	8014920 <__sfmoreglue>
 8014a5c:	4604      	mov	r4, r0
 8014a5e:	6030      	str	r0, [r6, #0]
 8014a60:	2800      	cmp	r0, #0
 8014a62:	d1d5      	bne.n	8014a10 <__sfp+0x24>
 8014a64:	f7ff ff78 	bl	8014958 <__sfp_lock_release>
 8014a68:	230c      	movs	r3, #12
 8014a6a:	603b      	str	r3, [r7, #0]
 8014a6c:	e7ee      	b.n	8014a4c <__sfp+0x60>
 8014a6e:	bf00      	nop
 8014a70:	08017bcc 	.word	0x08017bcc
 8014a74:	ffff0001 	.word	0xffff0001

08014a78 <_fwalk_reent>:
 8014a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a7c:	4606      	mov	r6, r0
 8014a7e:	4688      	mov	r8, r1
 8014a80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014a84:	2700      	movs	r7, #0
 8014a86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014a8a:	f1b9 0901 	subs.w	r9, r9, #1
 8014a8e:	d505      	bpl.n	8014a9c <_fwalk_reent+0x24>
 8014a90:	6824      	ldr	r4, [r4, #0]
 8014a92:	2c00      	cmp	r4, #0
 8014a94:	d1f7      	bne.n	8014a86 <_fwalk_reent+0xe>
 8014a96:	4638      	mov	r0, r7
 8014a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a9c:	89ab      	ldrh	r3, [r5, #12]
 8014a9e:	2b01      	cmp	r3, #1
 8014aa0:	d907      	bls.n	8014ab2 <_fwalk_reent+0x3a>
 8014aa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014aa6:	3301      	adds	r3, #1
 8014aa8:	d003      	beq.n	8014ab2 <_fwalk_reent+0x3a>
 8014aaa:	4629      	mov	r1, r5
 8014aac:	4630      	mov	r0, r6
 8014aae:	47c0      	blx	r8
 8014ab0:	4307      	orrs	r7, r0
 8014ab2:	3568      	adds	r5, #104	; 0x68
 8014ab4:	e7e9      	b.n	8014a8a <_fwalk_reent+0x12>
	...

08014ab8 <__libc_init_array>:
 8014ab8:	b570      	push	{r4, r5, r6, lr}
 8014aba:	4d0d      	ldr	r5, [pc, #52]	; (8014af0 <__libc_init_array+0x38>)
 8014abc:	4c0d      	ldr	r4, [pc, #52]	; (8014af4 <__libc_init_array+0x3c>)
 8014abe:	1b64      	subs	r4, r4, r5
 8014ac0:	10a4      	asrs	r4, r4, #2
 8014ac2:	2600      	movs	r6, #0
 8014ac4:	42a6      	cmp	r6, r4
 8014ac6:	d109      	bne.n	8014adc <__libc_init_array+0x24>
 8014ac8:	4d0b      	ldr	r5, [pc, #44]	; (8014af8 <__libc_init_array+0x40>)
 8014aca:	4c0c      	ldr	r4, [pc, #48]	; (8014afc <__libc_init_array+0x44>)
 8014acc:	f002 fbd4 	bl	8017278 <_init>
 8014ad0:	1b64      	subs	r4, r4, r5
 8014ad2:	10a4      	asrs	r4, r4, #2
 8014ad4:	2600      	movs	r6, #0
 8014ad6:	42a6      	cmp	r6, r4
 8014ad8:	d105      	bne.n	8014ae6 <__libc_init_array+0x2e>
 8014ada:	bd70      	pop	{r4, r5, r6, pc}
 8014adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8014ae0:	4798      	blx	r3
 8014ae2:	3601      	adds	r6, #1
 8014ae4:	e7ee      	b.n	8014ac4 <__libc_init_array+0xc>
 8014ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8014aea:	4798      	blx	r3
 8014aec:	3601      	adds	r6, #1
 8014aee:	e7f2      	b.n	8014ad6 <__libc_init_array+0x1e>
 8014af0:	08017ed8 	.word	0x08017ed8
 8014af4:	08017ed8 	.word	0x08017ed8
 8014af8:	08017ed8 	.word	0x08017ed8
 8014afc:	08017edc 	.word	0x08017edc

08014b00 <__retarget_lock_init_recursive>:
 8014b00:	4770      	bx	lr

08014b02 <__retarget_lock_acquire>:
 8014b02:	4770      	bx	lr

08014b04 <__retarget_lock_acquire_recursive>:
 8014b04:	4770      	bx	lr

08014b06 <__retarget_lock_release>:
 8014b06:	4770      	bx	lr

08014b08 <__retarget_lock_release_recursive>:
 8014b08:	4770      	bx	lr
	...

08014b0c <malloc>:
 8014b0c:	4b02      	ldr	r3, [pc, #8]	; (8014b18 <malloc+0xc>)
 8014b0e:	4601      	mov	r1, r0
 8014b10:	6818      	ldr	r0, [r3, #0]
 8014b12:	f000 baff 	b.w	8015114 <_malloc_r>
 8014b16:	bf00      	nop
 8014b18:	200002b4 	.word	0x200002b4

08014b1c <free>:
 8014b1c:	4b02      	ldr	r3, [pc, #8]	; (8014b28 <free+0xc>)
 8014b1e:	4601      	mov	r1, r0
 8014b20:	6818      	ldr	r0, [r3, #0]
 8014b22:	f000 ba8b 	b.w	801503c <_free_r>
 8014b26:	bf00      	nop
 8014b28:	200002b4 	.word	0x200002b4

08014b2c <memcpy>:
 8014b2c:	440a      	add	r2, r1
 8014b2e:	4291      	cmp	r1, r2
 8014b30:	f100 33ff 	add.w	r3, r0, #4294967295
 8014b34:	d100      	bne.n	8014b38 <memcpy+0xc>
 8014b36:	4770      	bx	lr
 8014b38:	b510      	push	{r4, lr}
 8014b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014b3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014b42:	4291      	cmp	r1, r2
 8014b44:	d1f9      	bne.n	8014b3a <memcpy+0xe>
 8014b46:	bd10      	pop	{r4, pc}

08014b48 <memset>:
 8014b48:	4402      	add	r2, r0
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	4293      	cmp	r3, r2
 8014b4e:	d100      	bne.n	8014b52 <memset+0xa>
 8014b50:	4770      	bx	lr
 8014b52:	f803 1b01 	strb.w	r1, [r3], #1
 8014b56:	e7f9      	b.n	8014b4c <memset+0x4>

08014b58 <validate_structure>:
 8014b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014b5a:	6801      	ldr	r1, [r0, #0]
 8014b5c:	293b      	cmp	r1, #59	; 0x3b
 8014b5e:	4604      	mov	r4, r0
 8014b60:	d911      	bls.n	8014b86 <validate_structure+0x2e>
 8014b62:	223c      	movs	r2, #60	; 0x3c
 8014b64:	4668      	mov	r0, sp
 8014b66:	f000 ff8f 	bl	8015a88 <div>
 8014b6a:	9a01      	ldr	r2, [sp, #4]
 8014b6c:	6863      	ldr	r3, [r4, #4]
 8014b6e:	9900      	ldr	r1, [sp, #0]
 8014b70:	2a00      	cmp	r2, #0
 8014b72:	440b      	add	r3, r1
 8014b74:	6063      	str	r3, [r4, #4]
 8014b76:	bfbb      	ittet	lt
 8014b78:	323c      	addlt	r2, #60	; 0x3c
 8014b7a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014b7e:	6022      	strge	r2, [r4, #0]
 8014b80:	6022      	strlt	r2, [r4, #0]
 8014b82:	bfb8      	it	lt
 8014b84:	6063      	strlt	r3, [r4, #4]
 8014b86:	6861      	ldr	r1, [r4, #4]
 8014b88:	293b      	cmp	r1, #59	; 0x3b
 8014b8a:	d911      	bls.n	8014bb0 <validate_structure+0x58>
 8014b8c:	223c      	movs	r2, #60	; 0x3c
 8014b8e:	4668      	mov	r0, sp
 8014b90:	f000 ff7a 	bl	8015a88 <div>
 8014b94:	9a01      	ldr	r2, [sp, #4]
 8014b96:	68a3      	ldr	r3, [r4, #8]
 8014b98:	9900      	ldr	r1, [sp, #0]
 8014b9a:	2a00      	cmp	r2, #0
 8014b9c:	440b      	add	r3, r1
 8014b9e:	60a3      	str	r3, [r4, #8]
 8014ba0:	bfbb      	ittet	lt
 8014ba2:	323c      	addlt	r2, #60	; 0x3c
 8014ba4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014ba8:	6062      	strge	r2, [r4, #4]
 8014baa:	6062      	strlt	r2, [r4, #4]
 8014bac:	bfb8      	it	lt
 8014bae:	60a3      	strlt	r3, [r4, #8]
 8014bb0:	68a1      	ldr	r1, [r4, #8]
 8014bb2:	2917      	cmp	r1, #23
 8014bb4:	d911      	bls.n	8014bda <validate_structure+0x82>
 8014bb6:	2218      	movs	r2, #24
 8014bb8:	4668      	mov	r0, sp
 8014bba:	f000 ff65 	bl	8015a88 <div>
 8014bbe:	9a01      	ldr	r2, [sp, #4]
 8014bc0:	68e3      	ldr	r3, [r4, #12]
 8014bc2:	9900      	ldr	r1, [sp, #0]
 8014bc4:	2a00      	cmp	r2, #0
 8014bc6:	440b      	add	r3, r1
 8014bc8:	60e3      	str	r3, [r4, #12]
 8014bca:	bfbb      	ittet	lt
 8014bcc:	3218      	addlt	r2, #24
 8014bce:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014bd2:	60a2      	strge	r2, [r4, #8]
 8014bd4:	60a2      	strlt	r2, [r4, #8]
 8014bd6:	bfb8      	it	lt
 8014bd8:	60e3      	strlt	r3, [r4, #12]
 8014bda:	6921      	ldr	r1, [r4, #16]
 8014bdc:	290b      	cmp	r1, #11
 8014bde:	d911      	bls.n	8014c04 <validate_structure+0xac>
 8014be0:	220c      	movs	r2, #12
 8014be2:	4668      	mov	r0, sp
 8014be4:	f000 ff50 	bl	8015a88 <div>
 8014be8:	9a01      	ldr	r2, [sp, #4]
 8014bea:	6963      	ldr	r3, [r4, #20]
 8014bec:	9900      	ldr	r1, [sp, #0]
 8014bee:	2a00      	cmp	r2, #0
 8014bf0:	440b      	add	r3, r1
 8014bf2:	6163      	str	r3, [r4, #20]
 8014bf4:	bfbb      	ittet	lt
 8014bf6:	320c      	addlt	r2, #12
 8014bf8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014bfc:	6122      	strge	r2, [r4, #16]
 8014bfe:	6122      	strlt	r2, [r4, #16]
 8014c00:	bfb8      	it	lt
 8014c02:	6163      	strlt	r3, [r4, #20]
 8014c04:	6963      	ldr	r3, [r4, #20]
 8014c06:	0798      	lsls	r0, r3, #30
 8014c08:	d120      	bne.n	8014c4c <validate_structure+0xf4>
 8014c0a:	2164      	movs	r1, #100	; 0x64
 8014c0c:	fb93 f2f1 	sdiv	r2, r3, r1
 8014c10:	fb01 3212 	mls	r2, r1, r2, r3
 8014c14:	b9e2      	cbnz	r2, 8014c50 <validate_structure+0xf8>
 8014c16:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8014c1a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014c1e:	fb93 f1f2 	sdiv	r1, r3, r2
 8014c22:	fb02 3311 	mls	r3, r2, r1, r3
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	bf14      	ite	ne
 8014c2a:	231c      	movne	r3, #28
 8014c2c:	231d      	moveq	r3, #29
 8014c2e:	68e2      	ldr	r2, [r4, #12]
 8014c30:	2a00      	cmp	r2, #0
 8014c32:	dc0f      	bgt.n	8014c54 <validate_structure+0xfc>
 8014c34:	4f33      	ldr	r7, [pc, #204]	; (8014d04 <validate_structure+0x1ac>)
 8014c36:	260b      	movs	r6, #11
 8014c38:	2064      	movs	r0, #100	; 0x64
 8014c3a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8014c3e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8014c42:	f1bc 0f00 	cmp.w	ip, #0
 8014c46:	dd31      	ble.n	8014cac <validate_structure+0x154>
 8014c48:	b003      	add	sp, #12
 8014c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c4c:	231c      	movs	r3, #28
 8014c4e:	e7ee      	b.n	8014c2e <validate_structure+0xd6>
 8014c50:	231d      	movs	r3, #29
 8014c52:	e7ec      	b.n	8014c2e <validate_structure+0xd6>
 8014c54:	4e2b      	ldr	r6, [pc, #172]	; (8014d04 <validate_structure+0x1ac>)
 8014c56:	2700      	movs	r7, #0
 8014c58:	2064      	movs	r0, #100	; 0x64
 8014c5a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8014c5e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8014c62:	2a01      	cmp	r2, #1
 8014c64:	bf14      	ite	ne
 8014c66:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8014c6a:	469c      	moveq	ip, r3
 8014c6c:	4561      	cmp	r1, ip
 8014c6e:	ddeb      	ble.n	8014c48 <validate_structure+0xf0>
 8014c70:	3201      	adds	r2, #1
 8014c72:	eba1 010c 	sub.w	r1, r1, ip
 8014c76:	2a0c      	cmp	r2, #12
 8014c78:	60e1      	str	r1, [r4, #12]
 8014c7a:	6122      	str	r2, [r4, #16]
 8014c7c:	d1ef      	bne.n	8014c5e <validate_structure+0x106>
 8014c7e:	6963      	ldr	r3, [r4, #20]
 8014c80:	1c5a      	adds	r2, r3, #1
 8014c82:	0791      	lsls	r1, r2, #30
 8014c84:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8014c88:	d137      	bne.n	8014cfa <validate_structure+0x1a2>
 8014c8a:	fb92 f1f0 	sdiv	r1, r2, r0
 8014c8e:	fb00 2211 	mls	r2, r0, r1, r2
 8014c92:	2a00      	cmp	r2, #0
 8014c94:	d133      	bne.n	8014cfe <validate_structure+0x1a6>
 8014c96:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8014c9a:	fb93 f2f5 	sdiv	r2, r3, r5
 8014c9e:	fb05 3312 	mls	r3, r5, r2, r3
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	bf14      	ite	ne
 8014ca6:	231c      	movne	r3, #28
 8014ca8:	231d      	moveq	r3, #29
 8014caa:	e7d8      	b.n	8014c5e <validate_structure+0x106>
 8014cac:	6921      	ldr	r1, [r4, #16]
 8014cae:	3901      	subs	r1, #1
 8014cb0:	6121      	str	r1, [r4, #16]
 8014cb2:	3101      	adds	r1, #1
 8014cb4:	d114      	bne.n	8014ce0 <validate_structure+0x188>
 8014cb6:	6963      	ldr	r3, [r4, #20]
 8014cb8:	1e5a      	subs	r2, r3, #1
 8014cba:	0791      	lsls	r1, r2, #30
 8014cbc:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8014cc0:	d117      	bne.n	8014cf2 <validate_structure+0x19a>
 8014cc2:	fb92 f1f0 	sdiv	r1, r2, r0
 8014cc6:	fb00 2211 	mls	r2, r0, r1, r2
 8014cca:	b9a2      	cbnz	r2, 8014cf6 <validate_structure+0x19e>
 8014ccc:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8014cd0:	fb93 f2f5 	sdiv	r2, r3, r5
 8014cd4:	fb05 3312 	mls	r3, r5, r2, r3
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	bf14      	ite	ne
 8014cdc:	231c      	movne	r3, #28
 8014cde:	231d      	moveq	r3, #29
 8014ce0:	6922      	ldr	r2, [r4, #16]
 8014ce2:	2a01      	cmp	r2, #1
 8014ce4:	bf14      	ite	ne
 8014ce6:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8014cea:	461a      	moveq	r2, r3
 8014cec:	4462      	add	r2, ip
 8014cee:	60e2      	str	r2, [r4, #12]
 8014cf0:	e7a5      	b.n	8014c3e <validate_structure+0xe6>
 8014cf2:	231c      	movs	r3, #28
 8014cf4:	e7f4      	b.n	8014ce0 <validate_structure+0x188>
 8014cf6:	231d      	movs	r3, #29
 8014cf8:	e7f2      	b.n	8014ce0 <validate_structure+0x188>
 8014cfa:	231c      	movs	r3, #28
 8014cfc:	e7af      	b.n	8014c5e <validate_structure+0x106>
 8014cfe:	231d      	movs	r3, #29
 8014d00:	e7ad      	b.n	8014c5e <validate_structure+0x106>
 8014d02:	bf00      	nop
 8014d04:	08017bd0 	.word	0x08017bd0

08014d08 <mktime>:
 8014d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d0c:	b085      	sub	sp, #20
 8014d0e:	4607      	mov	r7, r0
 8014d10:	f000 ffe6 	bl	8015ce0 <__gettzinfo>
 8014d14:	4681      	mov	r9, r0
 8014d16:	4638      	mov	r0, r7
 8014d18:	f7ff ff1e 	bl	8014b58 <validate_structure>
 8014d1c:	e9d7 4000 	ldrd	r4, r0, [r7]
 8014d20:	233c      	movs	r3, #60	; 0x3c
 8014d22:	fb03 4400 	mla	r4, r3, r0, r4
 8014d26:	68b8      	ldr	r0, [r7, #8]
 8014d28:	4abc      	ldr	r2, [pc, #752]	; (801501c <mktime+0x314>)
 8014d2a:	697e      	ldr	r6, [r7, #20]
 8014d2c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8014d30:	fb03 4400 	mla	r4, r3, r0, r4
 8014d34:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8014d38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014d3c:	3d01      	subs	r5, #1
 8014d3e:	2b01      	cmp	r3, #1
 8014d40:	4415      	add	r5, r2
 8014d42:	dd11      	ble.n	8014d68 <mktime+0x60>
 8014d44:	07b1      	lsls	r1, r6, #30
 8014d46:	d10f      	bne.n	8014d68 <mktime+0x60>
 8014d48:	2264      	movs	r2, #100	; 0x64
 8014d4a:	fb96 f3f2 	sdiv	r3, r6, r2
 8014d4e:	fb02 6313 	mls	r3, r2, r3, r6
 8014d52:	b943      	cbnz	r3, 8014d66 <mktime+0x5e>
 8014d54:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8014d58:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014d5c:	fb93 f1f2 	sdiv	r1, r3, r2
 8014d60:	fb02 3311 	mls	r3, r2, r1, r3
 8014d64:	b903      	cbnz	r3, 8014d68 <mktime+0x60>
 8014d66:	3501      	adds	r5, #1
 8014d68:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8014d6c:	3310      	adds	r3, #16
 8014d6e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8014d72:	4293      	cmp	r3, r2
 8014d74:	61fd      	str	r5, [r7, #28]
 8014d76:	f200 815d 	bhi.w	8015034 <mktime+0x32c>
 8014d7a:	2e46      	cmp	r6, #70	; 0x46
 8014d7c:	dd71      	ble.n	8014e62 <mktime+0x15a>
 8014d7e:	2346      	movs	r3, #70	; 0x46
 8014d80:	f240 1c6d 	movw	ip, #365	; 0x16d
 8014d84:	2164      	movs	r1, #100	; 0x64
 8014d86:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8014d8a:	079a      	lsls	r2, r3, #30
 8014d8c:	d163      	bne.n	8014e56 <mktime+0x14e>
 8014d8e:	fb93 f2f1 	sdiv	r2, r3, r1
 8014d92:	fb01 3212 	mls	r2, r1, r2, r3
 8014d96:	2a00      	cmp	r2, #0
 8014d98:	d160      	bne.n	8014e5c <mktime+0x154>
 8014d9a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8014d9e:	fb92 fef0 	sdiv	lr, r2, r0
 8014da2:	fb00 221e 	mls	r2, r0, lr, r2
 8014da6:	2a00      	cmp	r2, #0
 8014da8:	bf14      	ite	ne
 8014daa:	4662      	movne	r2, ip
 8014dac:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8014db0:	3301      	adds	r3, #1
 8014db2:	429e      	cmp	r6, r3
 8014db4:	4415      	add	r5, r2
 8014db6:	d1e8      	bne.n	8014d8a <mktime+0x82>
 8014db8:	4b99      	ldr	r3, [pc, #612]	; (8015020 <mktime+0x318>)
 8014dba:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8014dbe:	fbc5 4803 	smlal	r4, r8, r5, r3
 8014dc2:	f000 fc8f 	bl	80156e4 <__tz_lock>
 8014dc6:	f000 fc99 	bl	80156fc <_tzset_unlocked>
 8014dca:	4b96      	ldr	r3, [pc, #600]	; (8015024 <mktime+0x31c>)
 8014dcc:	f8d3 b000 	ldr.w	fp, [r3]
 8014dd0:	f1bb 0f00 	cmp.w	fp, #0
 8014dd4:	d039      	beq.n	8014e4a <mktime+0x142>
 8014dd6:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8014dda:	6978      	ldr	r0, [r7, #20]
 8014ddc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014de0:	f1bb 0f01 	cmp.w	fp, #1
 8014de4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8014de8:	46da      	mov	sl, fp
 8014dea:	bfa8      	it	ge
 8014dec:	f04f 0a01 	movge.w	sl, #1
 8014df0:	4283      	cmp	r3, r0
 8014df2:	d178      	bne.n	8014ee6 <mktime+0x1de>
 8014df4:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8014df8:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8014dfc:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8014e00:	1a5b      	subs	r3, r3, r1
 8014e02:	9302      	str	r3, [sp, #8]
 8014e04:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8014e08:	9303      	str	r3, [sp, #12]
 8014e0a:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8014e0e:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8014e12:	9301      	str	r3, [sp, #4]
 8014e14:	ebb3 0c02 	subs.w	ip, r3, r2
 8014e18:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8014e1c:	4564      	cmp	r4, ip
 8014e1e:	eb78 0300 	sbcs.w	r3, r8, r0
 8014e22:	da66      	bge.n	8014ef2 <mktime+0x1ea>
 8014e24:	f8d9 3000 	ldr.w	r3, [r9]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d06f      	beq.n	8014f0c <mktime+0x204>
 8014e2c:	9b02      	ldr	r3, [sp, #8]
 8014e2e:	429c      	cmp	r4, r3
 8014e30:	9b03      	ldr	r3, [sp, #12]
 8014e32:	eb78 0303 	sbcs.w	r3, r8, r3
 8014e36:	db03      	blt.n	8014e40 <mktime+0x138>
 8014e38:	4564      	cmp	r4, ip
 8014e3a:	eb78 0300 	sbcs.w	r3, r8, r0
 8014e3e:	db6b      	blt.n	8014f18 <mktime+0x210>
 8014e40:	f1bb 0f00 	cmp.w	fp, #0
 8014e44:	f04f 0b00 	mov.w	fp, #0
 8014e48:	da6b      	bge.n	8014f22 <mktime+0x21a>
 8014e4a:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8014e4e:	190c      	adds	r4, r1, r4
 8014e50:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8014e54:	e0a9      	b.n	8014faa <mktime+0x2a2>
 8014e56:	f240 126d 	movw	r2, #365	; 0x16d
 8014e5a:	e7a9      	b.n	8014db0 <mktime+0xa8>
 8014e5c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014e60:	e7a6      	b.n	8014db0 <mktime+0xa8>
 8014e62:	d0a9      	beq.n	8014db8 <mktime+0xb0>
 8014e64:	2345      	movs	r3, #69	; 0x45
 8014e66:	f240 1c6d 	movw	ip, #365	; 0x16d
 8014e6a:	2164      	movs	r1, #100	; 0x64
 8014e6c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8014e70:	e012      	b.n	8014e98 <mktime+0x190>
 8014e72:	bb62      	cbnz	r2, 8014ece <mktime+0x1c6>
 8014e74:	fb93 f2f1 	sdiv	r2, r3, r1
 8014e78:	fb01 3212 	mls	r2, r1, r2, r3
 8014e7c:	bb52      	cbnz	r2, 8014ed4 <mktime+0x1cc>
 8014e7e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8014e82:	fb92 fef0 	sdiv	lr, r2, r0
 8014e86:	fb00 221e 	mls	r2, r0, lr, r2
 8014e8a:	2a00      	cmp	r2, #0
 8014e8c:	bf14      	ite	ne
 8014e8e:	4662      	movne	r2, ip
 8014e90:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8014e94:	1aad      	subs	r5, r5, r2
 8014e96:	3b01      	subs	r3, #1
 8014e98:	429e      	cmp	r6, r3
 8014e9a:	f003 0203 	and.w	r2, r3, #3
 8014e9e:	dbe8      	blt.n	8014e72 <mktime+0x16a>
 8014ea0:	b9da      	cbnz	r2, 8014eda <mktime+0x1d2>
 8014ea2:	2264      	movs	r2, #100	; 0x64
 8014ea4:	fb96 f3f2 	sdiv	r3, r6, r2
 8014ea8:	fb02 6313 	mls	r3, r2, r3, r6
 8014eac:	b9c3      	cbnz	r3, 8014ee0 <mktime+0x1d8>
 8014eae:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8014eb2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014eb6:	fb93 f1f2 	sdiv	r1, r3, r2
 8014eba:	fb02 3311 	mls	r3, r2, r1, r3
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	f240 136d 	movw	r3, #365	; 0x16d
 8014ec4:	bf08      	it	eq
 8014ec6:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8014eca:	1aed      	subs	r5, r5, r3
 8014ecc:	e774      	b.n	8014db8 <mktime+0xb0>
 8014ece:	f240 126d 	movw	r2, #365	; 0x16d
 8014ed2:	e7df      	b.n	8014e94 <mktime+0x18c>
 8014ed4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014ed8:	e7dc      	b.n	8014e94 <mktime+0x18c>
 8014eda:	f240 136d 	movw	r3, #365	; 0x16d
 8014ede:	e7f4      	b.n	8014eca <mktime+0x1c2>
 8014ee0:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8014ee4:	e7f1      	b.n	8014eca <mktime+0x1c2>
 8014ee6:	f000 fb53 	bl	8015590 <__tzcalc_limits>
 8014eea:	2800      	cmp	r0, #0
 8014eec:	d182      	bne.n	8014df4 <mktime+0xec>
 8014eee:	46d3      	mov	fp, sl
 8014ef0:	e050      	b.n	8014f94 <mktime+0x28c>
 8014ef2:	9b01      	ldr	r3, [sp, #4]
 8014ef4:	1a5b      	subs	r3, r3, r1
 8014ef6:	9301      	str	r3, [sp, #4]
 8014ef8:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8014efc:	eb6e 0e03 	sbc.w	lr, lr, r3
 8014f00:	9b01      	ldr	r3, [sp, #4]
 8014f02:	429c      	cmp	r4, r3
 8014f04:	eb78 030e 	sbcs.w	r3, r8, lr
 8014f08:	dbf1      	blt.n	8014eee <mktime+0x1e6>
 8014f0a:	e78b      	b.n	8014e24 <mktime+0x11c>
 8014f0c:	9b02      	ldr	r3, [sp, #8]
 8014f0e:	429c      	cmp	r4, r3
 8014f10:	9b03      	ldr	r3, [sp, #12]
 8014f12:	eb78 0303 	sbcs.w	r3, r8, r3
 8014f16:	db8f      	blt.n	8014e38 <mktime+0x130>
 8014f18:	f1bb 0f00 	cmp.w	fp, #0
 8014f1c:	db3e      	blt.n	8014f9c <mktime+0x294>
 8014f1e:	f04f 0b01 	mov.w	fp, #1
 8014f22:	ea8a 0a0b 	eor.w	sl, sl, fp
 8014f26:	f1ba 0f01 	cmp.w	sl, #1
 8014f2a:	d133      	bne.n	8014f94 <mktime+0x28c>
 8014f2c:	f1bb 0f00 	cmp.w	fp, #0
 8014f30:	d04e      	beq.n	8014fd0 <mktime+0x2c8>
 8014f32:	1a52      	subs	r2, r2, r1
 8014f34:	683b      	ldr	r3, [r7, #0]
 8014f36:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8014f3a:	4413      	add	r3, r2
 8014f3c:	1914      	adds	r4, r2, r4
 8014f3e:	603b      	str	r3, [r7, #0]
 8014f40:	4638      	mov	r0, r7
 8014f42:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8014f46:	f7ff fe07 	bl	8014b58 <validate_structure>
 8014f4a:	68fa      	ldr	r2, [r7, #12]
 8014f4c:	ebb2 020a 	subs.w	r2, r2, sl
 8014f50:	d020      	beq.n	8014f94 <mktime+0x28c>
 8014f52:	2a01      	cmp	r2, #1
 8014f54:	dc3e      	bgt.n	8014fd4 <mktime+0x2cc>
 8014f56:	1c90      	adds	r0, r2, #2
 8014f58:	bfd8      	it	le
 8014f5a:	2201      	movle	r2, #1
 8014f5c:	69fb      	ldr	r3, [r7, #28]
 8014f5e:	18d3      	adds	r3, r2, r3
 8014f60:	4415      	add	r5, r2
 8014f62:	d540      	bpl.n	8014fe6 <mktime+0x2de>
 8014f64:	1e73      	subs	r3, r6, #1
 8014f66:	0799      	lsls	r1, r3, #30
 8014f68:	d137      	bne.n	8014fda <mktime+0x2d2>
 8014f6a:	2264      	movs	r2, #100	; 0x64
 8014f6c:	fb93 f1f2 	sdiv	r1, r3, r2
 8014f70:	fb02 3311 	mls	r3, r2, r1, r3
 8014f74:	bba3      	cbnz	r3, 8014fe0 <mktime+0x2d8>
 8014f76:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8014f7a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8014f7e:	fb96 f2f3 	sdiv	r2, r6, r3
 8014f82:	fb03 6612 	mls	r6, r3, r2, r6
 8014f86:	2e00      	cmp	r6, #0
 8014f88:	f240 136d 	movw	r3, #365	; 0x16d
 8014f8c:	bf18      	it	ne
 8014f8e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8014f92:	61fb      	str	r3, [r7, #28]
 8014f94:	f1bb 0f01 	cmp.w	fp, #1
 8014f98:	f47f af57 	bne.w	8014e4a <mktime+0x142>
 8014f9c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8014fa0:	190c      	adds	r4, r1, r4
 8014fa2:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8014fa6:	f04f 0b01 	mov.w	fp, #1
 8014faa:	f000 fba1 	bl	80156f0 <__tz_unlock>
 8014fae:	3504      	adds	r5, #4
 8014fb0:	2307      	movs	r3, #7
 8014fb2:	fb95 f3f3 	sdiv	r3, r5, r3
 8014fb6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8014fba:	1aed      	subs	r5, r5, r3
 8014fbc:	bf48      	it	mi
 8014fbe:	3507      	addmi	r5, #7
 8014fc0:	f8c7 b020 	str.w	fp, [r7, #32]
 8014fc4:	61bd      	str	r5, [r7, #24]
 8014fc6:	4620      	mov	r0, r4
 8014fc8:	4641      	mov	r1, r8
 8014fca:	b005      	add	sp, #20
 8014fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fd0:	1a8a      	subs	r2, r1, r2
 8014fd2:	e7af      	b.n	8014f34 <mktime+0x22c>
 8014fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8014fd8:	e7c0      	b.n	8014f5c <mktime+0x254>
 8014fda:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8014fde:	e7d8      	b.n	8014f92 <mktime+0x28a>
 8014fe0:	f240 136d 	movw	r3, #365	; 0x16d
 8014fe4:	e7d5      	b.n	8014f92 <mktime+0x28a>
 8014fe6:	07b2      	lsls	r2, r6, #30
 8014fe8:	d11e      	bne.n	8015028 <mktime+0x320>
 8014fea:	2164      	movs	r1, #100	; 0x64
 8014fec:	fb96 f2f1 	sdiv	r2, r6, r1
 8014ff0:	fb01 6212 	mls	r2, r1, r2, r6
 8014ff4:	b9da      	cbnz	r2, 801502e <mktime+0x326>
 8014ff6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014ffa:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8014ffe:	fb96 f1f2 	sdiv	r1, r6, r2
 8015002:	fb02 6611 	mls	r6, r2, r1, r6
 8015006:	2e00      	cmp	r6, #0
 8015008:	f240 126d 	movw	r2, #365	; 0x16d
 801500c:	bf08      	it	eq
 801500e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8015012:	4293      	cmp	r3, r2
 8015014:	bfa8      	it	ge
 8015016:	1a9b      	subge	r3, r3, r2
 8015018:	e7bb      	b.n	8014f92 <mktime+0x28a>
 801501a:	bf00      	nop
 801501c:	08017c00 	.word	0x08017c00
 8015020:	00015180 	.word	0x00015180
 8015024:	2000e8f8 	.word	0x2000e8f8
 8015028:	f240 126d 	movw	r2, #365	; 0x16d
 801502c:	e7f1      	b.n	8015012 <mktime+0x30a>
 801502e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8015032:	e7ee      	b.n	8015012 <mktime+0x30a>
 8015034:	f04f 34ff 	mov.w	r4, #4294967295
 8015038:	46a0      	mov	r8, r4
 801503a:	e7c4      	b.n	8014fc6 <mktime+0x2be>

0801503c <_free_r>:
 801503c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801503e:	2900      	cmp	r1, #0
 8015040:	d044      	beq.n	80150cc <_free_r+0x90>
 8015042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015046:	9001      	str	r0, [sp, #4]
 8015048:	2b00      	cmp	r3, #0
 801504a:	f1a1 0404 	sub.w	r4, r1, #4
 801504e:	bfb8      	it	lt
 8015050:	18e4      	addlt	r4, r4, r3
 8015052:	f000 fe5b 	bl	8015d0c <__malloc_lock>
 8015056:	4a1e      	ldr	r2, [pc, #120]	; (80150d0 <_free_r+0x94>)
 8015058:	9801      	ldr	r0, [sp, #4]
 801505a:	6813      	ldr	r3, [r2, #0]
 801505c:	b933      	cbnz	r3, 801506c <_free_r+0x30>
 801505e:	6063      	str	r3, [r4, #4]
 8015060:	6014      	str	r4, [r2, #0]
 8015062:	b003      	add	sp, #12
 8015064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015068:	f000 be56 	b.w	8015d18 <__malloc_unlock>
 801506c:	42a3      	cmp	r3, r4
 801506e:	d908      	bls.n	8015082 <_free_r+0x46>
 8015070:	6825      	ldr	r5, [r4, #0]
 8015072:	1961      	adds	r1, r4, r5
 8015074:	428b      	cmp	r3, r1
 8015076:	bf01      	itttt	eq
 8015078:	6819      	ldreq	r1, [r3, #0]
 801507a:	685b      	ldreq	r3, [r3, #4]
 801507c:	1949      	addeq	r1, r1, r5
 801507e:	6021      	streq	r1, [r4, #0]
 8015080:	e7ed      	b.n	801505e <_free_r+0x22>
 8015082:	461a      	mov	r2, r3
 8015084:	685b      	ldr	r3, [r3, #4]
 8015086:	b10b      	cbz	r3, 801508c <_free_r+0x50>
 8015088:	42a3      	cmp	r3, r4
 801508a:	d9fa      	bls.n	8015082 <_free_r+0x46>
 801508c:	6811      	ldr	r1, [r2, #0]
 801508e:	1855      	adds	r5, r2, r1
 8015090:	42a5      	cmp	r5, r4
 8015092:	d10b      	bne.n	80150ac <_free_r+0x70>
 8015094:	6824      	ldr	r4, [r4, #0]
 8015096:	4421      	add	r1, r4
 8015098:	1854      	adds	r4, r2, r1
 801509a:	42a3      	cmp	r3, r4
 801509c:	6011      	str	r1, [r2, #0]
 801509e:	d1e0      	bne.n	8015062 <_free_r+0x26>
 80150a0:	681c      	ldr	r4, [r3, #0]
 80150a2:	685b      	ldr	r3, [r3, #4]
 80150a4:	6053      	str	r3, [r2, #4]
 80150a6:	4421      	add	r1, r4
 80150a8:	6011      	str	r1, [r2, #0]
 80150aa:	e7da      	b.n	8015062 <_free_r+0x26>
 80150ac:	d902      	bls.n	80150b4 <_free_r+0x78>
 80150ae:	230c      	movs	r3, #12
 80150b0:	6003      	str	r3, [r0, #0]
 80150b2:	e7d6      	b.n	8015062 <_free_r+0x26>
 80150b4:	6825      	ldr	r5, [r4, #0]
 80150b6:	1961      	adds	r1, r4, r5
 80150b8:	428b      	cmp	r3, r1
 80150ba:	bf04      	itt	eq
 80150bc:	6819      	ldreq	r1, [r3, #0]
 80150be:	685b      	ldreq	r3, [r3, #4]
 80150c0:	6063      	str	r3, [r4, #4]
 80150c2:	bf04      	itt	eq
 80150c4:	1949      	addeq	r1, r1, r5
 80150c6:	6021      	streq	r1, [r4, #0]
 80150c8:	6054      	str	r4, [r2, #4]
 80150ca:	e7ca      	b.n	8015062 <_free_r+0x26>
 80150cc:	b003      	add	sp, #12
 80150ce:	bd30      	pop	{r4, r5, pc}
 80150d0:	2000e8d0 	.word	0x2000e8d0

080150d4 <sbrk_aligned>:
 80150d4:	b570      	push	{r4, r5, r6, lr}
 80150d6:	4e0e      	ldr	r6, [pc, #56]	; (8015110 <sbrk_aligned+0x3c>)
 80150d8:	460c      	mov	r4, r1
 80150da:	6831      	ldr	r1, [r6, #0]
 80150dc:	4605      	mov	r5, r0
 80150de:	b911      	cbnz	r1, 80150e6 <sbrk_aligned+0x12>
 80150e0:	f000 f8f6 	bl	80152d0 <_sbrk_r>
 80150e4:	6030      	str	r0, [r6, #0]
 80150e6:	4621      	mov	r1, r4
 80150e8:	4628      	mov	r0, r5
 80150ea:	f000 f8f1 	bl	80152d0 <_sbrk_r>
 80150ee:	1c43      	adds	r3, r0, #1
 80150f0:	d00a      	beq.n	8015108 <sbrk_aligned+0x34>
 80150f2:	1cc4      	adds	r4, r0, #3
 80150f4:	f024 0403 	bic.w	r4, r4, #3
 80150f8:	42a0      	cmp	r0, r4
 80150fa:	d007      	beq.n	801510c <sbrk_aligned+0x38>
 80150fc:	1a21      	subs	r1, r4, r0
 80150fe:	4628      	mov	r0, r5
 8015100:	f000 f8e6 	bl	80152d0 <_sbrk_r>
 8015104:	3001      	adds	r0, #1
 8015106:	d101      	bne.n	801510c <sbrk_aligned+0x38>
 8015108:	f04f 34ff 	mov.w	r4, #4294967295
 801510c:	4620      	mov	r0, r4
 801510e:	bd70      	pop	{r4, r5, r6, pc}
 8015110:	2000e8d4 	.word	0x2000e8d4

08015114 <_malloc_r>:
 8015114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015118:	1ccd      	adds	r5, r1, #3
 801511a:	f025 0503 	bic.w	r5, r5, #3
 801511e:	3508      	adds	r5, #8
 8015120:	2d0c      	cmp	r5, #12
 8015122:	bf38      	it	cc
 8015124:	250c      	movcc	r5, #12
 8015126:	2d00      	cmp	r5, #0
 8015128:	4607      	mov	r7, r0
 801512a:	db01      	blt.n	8015130 <_malloc_r+0x1c>
 801512c:	42a9      	cmp	r1, r5
 801512e:	d905      	bls.n	801513c <_malloc_r+0x28>
 8015130:	230c      	movs	r3, #12
 8015132:	603b      	str	r3, [r7, #0]
 8015134:	2600      	movs	r6, #0
 8015136:	4630      	mov	r0, r6
 8015138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801513c:	4e2e      	ldr	r6, [pc, #184]	; (80151f8 <_malloc_r+0xe4>)
 801513e:	f000 fde5 	bl	8015d0c <__malloc_lock>
 8015142:	6833      	ldr	r3, [r6, #0]
 8015144:	461c      	mov	r4, r3
 8015146:	bb34      	cbnz	r4, 8015196 <_malloc_r+0x82>
 8015148:	4629      	mov	r1, r5
 801514a:	4638      	mov	r0, r7
 801514c:	f7ff ffc2 	bl	80150d4 <sbrk_aligned>
 8015150:	1c43      	adds	r3, r0, #1
 8015152:	4604      	mov	r4, r0
 8015154:	d14d      	bne.n	80151f2 <_malloc_r+0xde>
 8015156:	6834      	ldr	r4, [r6, #0]
 8015158:	4626      	mov	r6, r4
 801515a:	2e00      	cmp	r6, #0
 801515c:	d140      	bne.n	80151e0 <_malloc_r+0xcc>
 801515e:	6823      	ldr	r3, [r4, #0]
 8015160:	4631      	mov	r1, r6
 8015162:	4638      	mov	r0, r7
 8015164:	eb04 0803 	add.w	r8, r4, r3
 8015168:	f000 f8b2 	bl	80152d0 <_sbrk_r>
 801516c:	4580      	cmp	r8, r0
 801516e:	d13a      	bne.n	80151e6 <_malloc_r+0xd2>
 8015170:	6821      	ldr	r1, [r4, #0]
 8015172:	3503      	adds	r5, #3
 8015174:	1a6d      	subs	r5, r5, r1
 8015176:	f025 0503 	bic.w	r5, r5, #3
 801517a:	3508      	adds	r5, #8
 801517c:	2d0c      	cmp	r5, #12
 801517e:	bf38      	it	cc
 8015180:	250c      	movcc	r5, #12
 8015182:	4629      	mov	r1, r5
 8015184:	4638      	mov	r0, r7
 8015186:	f7ff ffa5 	bl	80150d4 <sbrk_aligned>
 801518a:	3001      	adds	r0, #1
 801518c:	d02b      	beq.n	80151e6 <_malloc_r+0xd2>
 801518e:	6823      	ldr	r3, [r4, #0]
 8015190:	442b      	add	r3, r5
 8015192:	6023      	str	r3, [r4, #0]
 8015194:	e00e      	b.n	80151b4 <_malloc_r+0xa0>
 8015196:	6822      	ldr	r2, [r4, #0]
 8015198:	1b52      	subs	r2, r2, r5
 801519a:	d41e      	bmi.n	80151da <_malloc_r+0xc6>
 801519c:	2a0b      	cmp	r2, #11
 801519e:	d916      	bls.n	80151ce <_malloc_r+0xba>
 80151a0:	1961      	adds	r1, r4, r5
 80151a2:	42a3      	cmp	r3, r4
 80151a4:	6025      	str	r5, [r4, #0]
 80151a6:	bf18      	it	ne
 80151a8:	6059      	strne	r1, [r3, #4]
 80151aa:	6863      	ldr	r3, [r4, #4]
 80151ac:	bf08      	it	eq
 80151ae:	6031      	streq	r1, [r6, #0]
 80151b0:	5162      	str	r2, [r4, r5]
 80151b2:	604b      	str	r3, [r1, #4]
 80151b4:	4638      	mov	r0, r7
 80151b6:	f104 060b 	add.w	r6, r4, #11
 80151ba:	f000 fdad 	bl	8015d18 <__malloc_unlock>
 80151be:	f026 0607 	bic.w	r6, r6, #7
 80151c2:	1d23      	adds	r3, r4, #4
 80151c4:	1af2      	subs	r2, r6, r3
 80151c6:	d0b6      	beq.n	8015136 <_malloc_r+0x22>
 80151c8:	1b9b      	subs	r3, r3, r6
 80151ca:	50a3      	str	r3, [r4, r2]
 80151cc:	e7b3      	b.n	8015136 <_malloc_r+0x22>
 80151ce:	6862      	ldr	r2, [r4, #4]
 80151d0:	42a3      	cmp	r3, r4
 80151d2:	bf0c      	ite	eq
 80151d4:	6032      	streq	r2, [r6, #0]
 80151d6:	605a      	strne	r2, [r3, #4]
 80151d8:	e7ec      	b.n	80151b4 <_malloc_r+0xa0>
 80151da:	4623      	mov	r3, r4
 80151dc:	6864      	ldr	r4, [r4, #4]
 80151de:	e7b2      	b.n	8015146 <_malloc_r+0x32>
 80151e0:	4634      	mov	r4, r6
 80151e2:	6876      	ldr	r6, [r6, #4]
 80151e4:	e7b9      	b.n	801515a <_malloc_r+0x46>
 80151e6:	230c      	movs	r3, #12
 80151e8:	603b      	str	r3, [r7, #0]
 80151ea:	4638      	mov	r0, r7
 80151ec:	f000 fd94 	bl	8015d18 <__malloc_unlock>
 80151f0:	e7a1      	b.n	8015136 <_malloc_r+0x22>
 80151f2:	6025      	str	r5, [r4, #0]
 80151f4:	e7de      	b.n	80151b4 <_malloc_r+0xa0>
 80151f6:	bf00      	nop
 80151f8:	2000e8d0 	.word	0x2000e8d0

080151fc <cleanup_glue>:
 80151fc:	b538      	push	{r3, r4, r5, lr}
 80151fe:	460c      	mov	r4, r1
 8015200:	6809      	ldr	r1, [r1, #0]
 8015202:	4605      	mov	r5, r0
 8015204:	b109      	cbz	r1, 801520a <cleanup_glue+0xe>
 8015206:	f7ff fff9 	bl	80151fc <cleanup_glue>
 801520a:	4621      	mov	r1, r4
 801520c:	4628      	mov	r0, r5
 801520e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015212:	f7ff bf13 	b.w	801503c <_free_r>
	...

08015218 <_reclaim_reent>:
 8015218:	4b2c      	ldr	r3, [pc, #176]	; (80152cc <_reclaim_reent+0xb4>)
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	4283      	cmp	r3, r0
 801521e:	b570      	push	{r4, r5, r6, lr}
 8015220:	4604      	mov	r4, r0
 8015222:	d051      	beq.n	80152c8 <_reclaim_reent+0xb0>
 8015224:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015226:	b143      	cbz	r3, 801523a <_reclaim_reent+0x22>
 8015228:	68db      	ldr	r3, [r3, #12]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d14a      	bne.n	80152c4 <_reclaim_reent+0xac>
 801522e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015230:	6819      	ldr	r1, [r3, #0]
 8015232:	b111      	cbz	r1, 801523a <_reclaim_reent+0x22>
 8015234:	4620      	mov	r0, r4
 8015236:	f7ff ff01 	bl	801503c <_free_r>
 801523a:	6961      	ldr	r1, [r4, #20]
 801523c:	b111      	cbz	r1, 8015244 <_reclaim_reent+0x2c>
 801523e:	4620      	mov	r0, r4
 8015240:	f7ff fefc 	bl	801503c <_free_r>
 8015244:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015246:	b111      	cbz	r1, 801524e <_reclaim_reent+0x36>
 8015248:	4620      	mov	r0, r4
 801524a:	f7ff fef7 	bl	801503c <_free_r>
 801524e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015250:	b111      	cbz	r1, 8015258 <_reclaim_reent+0x40>
 8015252:	4620      	mov	r0, r4
 8015254:	f7ff fef2 	bl	801503c <_free_r>
 8015258:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801525a:	b111      	cbz	r1, 8015262 <_reclaim_reent+0x4a>
 801525c:	4620      	mov	r0, r4
 801525e:	f7ff feed 	bl	801503c <_free_r>
 8015262:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015264:	b111      	cbz	r1, 801526c <_reclaim_reent+0x54>
 8015266:	4620      	mov	r0, r4
 8015268:	f7ff fee8 	bl	801503c <_free_r>
 801526c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801526e:	b111      	cbz	r1, 8015276 <_reclaim_reent+0x5e>
 8015270:	4620      	mov	r0, r4
 8015272:	f7ff fee3 	bl	801503c <_free_r>
 8015276:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015278:	b111      	cbz	r1, 8015280 <_reclaim_reent+0x68>
 801527a:	4620      	mov	r0, r4
 801527c:	f7ff fede 	bl	801503c <_free_r>
 8015280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015282:	b111      	cbz	r1, 801528a <_reclaim_reent+0x72>
 8015284:	4620      	mov	r0, r4
 8015286:	f7ff fed9 	bl	801503c <_free_r>
 801528a:	69a3      	ldr	r3, [r4, #24]
 801528c:	b1e3      	cbz	r3, 80152c8 <_reclaim_reent+0xb0>
 801528e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015290:	4620      	mov	r0, r4
 8015292:	4798      	blx	r3
 8015294:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015296:	b1b9      	cbz	r1, 80152c8 <_reclaim_reent+0xb0>
 8015298:	4620      	mov	r0, r4
 801529a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801529e:	f7ff bfad 	b.w	80151fc <cleanup_glue>
 80152a2:	5949      	ldr	r1, [r1, r5]
 80152a4:	b941      	cbnz	r1, 80152b8 <_reclaim_reent+0xa0>
 80152a6:	3504      	adds	r5, #4
 80152a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80152aa:	2d80      	cmp	r5, #128	; 0x80
 80152ac:	68d9      	ldr	r1, [r3, #12]
 80152ae:	d1f8      	bne.n	80152a2 <_reclaim_reent+0x8a>
 80152b0:	4620      	mov	r0, r4
 80152b2:	f7ff fec3 	bl	801503c <_free_r>
 80152b6:	e7ba      	b.n	801522e <_reclaim_reent+0x16>
 80152b8:	680e      	ldr	r6, [r1, #0]
 80152ba:	4620      	mov	r0, r4
 80152bc:	f7ff febe 	bl	801503c <_free_r>
 80152c0:	4631      	mov	r1, r6
 80152c2:	e7ef      	b.n	80152a4 <_reclaim_reent+0x8c>
 80152c4:	2500      	movs	r5, #0
 80152c6:	e7ef      	b.n	80152a8 <_reclaim_reent+0x90>
 80152c8:	bd70      	pop	{r4, r5, r6, pc}
 80152ca:	bf00      	nop
 80152cc:	200002b4 	.word	0x200002b4

080152d0 <_sbrk_r>:
 80152d0:	b538      	push	{r3, r4, r5, lr}
 80152d2:	4d06      	ldr	r5, [pc, #24]	; (80152ec <_sbrk_r+0x1c>)
 80152d4:	2300      	movs	r3, #0
 80152d6:	4604      	mov	r4, r0
 80152d8:	4608      	mov	r0, r1
 80152da:	602b      	str	r3, [r5, #0]
 80152dc:	f7ed ffa2 	bl	8003224 <_sbrk>
 80152e0:	1c43      	adds	r3, r0, #1
 80152e2:	d102      	bne.n	80152ea <_sbrk_r+0x1a>
 80152e4:	682b      	ldr	r3, [r5, #0]
 80152e6:	b103      	cbz	r3, 80152ea <_sbrk_r+0x1a>
 80152e8:	6023      	str	r3, [r4, #0]
 80152ea:	bd38      	pop	{r3, r4, r5, pc}
 80152ec:	2000e8d8 	.word	0x2000e8d8

080152f0 <siprintf>:
 80152f0:	b40e      	push	{r1, r2, r3}
 80152f2:	b500      	push	{lr}
 80152f4:	b09c      	sub	sp, #112	; 0x70
 80152f6:	ab1d      	add	r3, sp, #116	; 0x74
 80152f8:	9002      	str	r0, [sp, #8]
 80152fa:	9006      	str	r0, [sp, #24]
 80152fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015300:	4809      	ldr	r0, [pc, #36]	; (8015328 <siprintf+0x38>)
 8015302:	9107      	str	r1, [sp, #28]
 8015304:	9104      	str	r1, [sp, #16]
 8015306:	4909      	ldr	r1, [pc, #36]	; (801532c <siprintf+0x3c>)
 8015308:	f853 2b04 	ldr.w	r2, [r3], #4
 801530c:	9105      	str	r1, [sp, #20]
 801530e:	6800      	ldr	r0, [r0, #0]
 8015310:	9301      	str	r3, [sp, #4]
 8015312:	a902      	add	r1, sp, #8
 8015314:	f000 fd62 	bl	8015ddc <_svfiprintf_r>
 8015318:	9b02      	ldr	r3, [sp, #8]
 801531a:	2200      	movs	r2, #0
 801531c:	701a      	strb	r2, [r3, #0]
 801531e:	b01c      	add	sp, #112	; 0x70
 8015320:	f85d eb04 	ldr.w	lr, [sp], #4
 8015324:	b003      	add	sp, #12
 8015326:	4770      	bx	lr
 8015328:	200002b4 	.word	0x200002b4
 801532c:	ffff0208 	.word	0xffff0208

08015330 <__sread>:
 8015330:	b510      	push	{r4, lr}
 8015332:	460c      	mov	r4, r1
 8015334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015338:	f001 f93e 	bl	80165b8 <_read_r>
 801533c:	2800      	cmp	r0, #0
 801533e:	bfab      	itete	ge
 8015340:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015342:	89a3      	ldrhlt	r3, [r4, #12]
 8015344:	181b      	addge	r3, r3, r0
 8015346:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801534a:	bfac      	ite	ge
 801534c:	6563      	strge	r3, [r4, #84]	; 0x54
 801534e:	81a3      	strhlt	r3, [r4, #12]
 8015350:	bd10      	pop	{r4, pc}

08015352 <__seofread>:
 8015352:	2000      	movs	r0, #0
 8015354:	4770      	bx	lr

08015356 <__swrite>:
 8015356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801535a:	461f      	mov	r7, r3
 801535c:	898b      	ldrh	r3, [r1, #12]
 801535e:	05db      	lsls	r3, r3, #23
 8015360:	4605      	mov	r5, r0
 8015362:	460c      	mov	r4, r1
 8015364:	4616      	mov	r6, r2
 8015366:	d505      	bpl.n	8015374 <__swrite+0x1e>
 8015368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801536c:	2302      	movs	r3, #2
 801536e:	2200      	movs	r2, #0
 8015370:	f000 fcba 	bl	8015ce8 <_lseek_r>
 8015374:	89a3      	ldrh	r3, [r4, #12]
 8015376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801537a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801537e:	81a3      	strh	r3, [r4, #12]
 8015380:	4632      	mov	r2, r6
 8015382:	463b      	mov	r3, r7
 8015384:	4628      	mov	r0, r5
 8015386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801538a:	f000 bb3d 	b.w	8015a08 <_write_r>

0801538e <__sseek>:
 801538e:	b510      	push	{r4, lr}
 8015390:	460c      	mov	r4, r1
 8015392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015396:	f000 fca7 	bl	8015ce8 <_lseek_r>
 801539a:	1c43      	adds	r3, r0, #1
 801539c:	89a3      	ldrh	r3, [r4, #12]
 801539e:	bf15      	itete	ne
 80153a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80153a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80153a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80153aa:	81a3      	strheq	r3, [r4, #12]
 80153ac:	bf18      	it	ne
 80153ae:	81a3      	strhne	r3, [r4, #12]
 80153b0:	bd10      	pop	{r4, pc}

080153b2 <__sclose>:
 80153b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153b6:	f000 bb57 	b.w	8015a68 <_close_r>
	...

080153bc <strtok>:
 80153bc:	4b16      	ldr	r3, [pc, #88]	; (8015418 <strtok+0x5c>)
 80153be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80153c0:	681e      	ldr	r6, [r3, #0]
 80153c2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80153c4:	4605      	mov	r5, r0
 80153c6:	b9fc      	cbnz	r4, 8015408 <strtok+0x4c>
 80153c8:	2050      	movs	r0, #80	; 0x50
 80153ca:	9101      	str	r1, [sp, #4]
 80153cc:	f7ff fb9e 	bl	8014b0c <malloc>
 80153d0:	9901      	ldr	r1, [sp, #4]
 80153d2:	65b0      	str	r0, [r6, #88]	; 0x58
 80153d4:	4602      	mov	r2, r0
 80153d6:	b920      	cbnz	r0, 80153e2 <strtok+0x26>
 80153d8:	4b10      	ldr	r3, [pc, #64]	; (801541c <strtok+0x60>)
 80153da:	4811      	ldr	r0, [pc, #68]	; (8015420 <strtok+0x64>)
 80153dc:	2157      	movs	r1, #87	; 0x57
 80153de:	f000 fb25 	bl	8015a2c <__assert_func>
 80153e2:	e9c0 4400 	strd	r4, r4, [r0]
 80153e6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80153ea:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80153ee:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80153f2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80153f6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80153fa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80153fe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8015402:	6184      	str	r4, [r0, #24]
 8015404:	7704      	strb	r4, [r0, #28]
 8015406:	6244      	str	r4, [r0, #36]	; 0x24
 8015408:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801540a:	2301      	movs	r3, #1
 801540c:	4628      	mov	r0, r5
 801540e:	b002      	add	sp, #8
 8015410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015414:	f000 b806 	b.w	8015424 <__strtok_r>
 8015418:	200002b4 	.word	0x200002b4
 801541c:	08017c30 	.word	0x08017c30
 8015420:	08017c47 	.word	0x08017c47

08015424 <__strtok_r>:
 8015424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015426:	b908      	cbnz	r0, 801542c <__strtok_r+0x8>
 8015428:	6810      	ldr	r0, [r2, #0]
 801542a:	b188      	cbz	r0, 8015450 <__strtok_r+0x2c>
 801542c:	4604      	mov	r4, r0
 801542e:	4620      	mov	r0, r4
 8015430:	f814 5b01 	ldrb.w	r5, [r4], #1
 8015434:	460f      	mov	r7, r1
 8015436:	f817 6b01 	ldrb.w	r6, [r7], #1
 801543a:	b91e      	cbnz	r6, 8015444 <__strtok_r+0x20>
 801543c:	b965      	cbnz	r5, 8015458 <__strtok_r+0x34>
 801543e:	6015      	str	r5, [r2, #0]
 8015440:	4628      	mov	r0, r5
 8015442:	e005      	b.n	8015450 <__strtok_r+0x2c>
 8015444:	42b5      	cmp	r5, r6
 8015446:	d1f6      	bne.n	8015436 <__strtok_r+0x12>
 8015448:	2b00      	cmp	r3, #0
 801544a:	d1f0      	bne.n	801542e <__strtok_r+0xa>
 801544c:	6014      	str	r4, [r2, #0]
 801544e:	7003      	strb	r3, [r0, #0]
 8015450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015452:	461c      	mov	r4, r3
 8015454:	e00c      	b.n	8015470 <__strtok_r+0x4c>
 8015456:	b915      	cbnz	r5, 801545e <__strtok_r+0x3a>
 8015458:	f814 3b01 	ldrb.w	r3, [r4], #1
 801545c:	460e      	mov	r6, r1
 801545e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8015462:	42ab      	cmp	r3, r5
 8015464:	d1f7      	bne.n	8015456 <__strtok_r+0x32>
 8015466:	2b00      	cmp	r3, #0
 8015468:	d0f3      	beq.n	8015452 <__strtok_r+0x2e>
 801546a:	2300      	movs	r3, #0
 801546c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8015470:	6014      	str	r4, [r2, #0]
 8015472:	e7ed      	b.n	8015450 <__strtok_r+0x2c>

08015474 <_strtol_l.constprop.0>:
 8015474:	2b01      	cmp	r3, #1
 8015476:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801547a:	d001      	beq.n	8015480 <_strtol_l.constprop.0+0xc>
 801547c:	2b24      	cmp	r3, #36	; 0x24
 801547e:	d906      	bls.n	801548e <_strtol_l.constprop.0+0x1a>
 8015480:	f7ff fa1e 	bl	80148c0 <__errno>
 8015484:	2316      	movs	r3, #22
 8015486:	6003      	str	r3, [r0, #0]
 8015488:	2000      	movs	r0, #0
 801548a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801548e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8015574 <_strtol_l.constprop.0+0x100>
 8015492:	460d      	mov	r5, r1
 8015494:	462e      	mov	r6, r5
 8015496:	f815 4b01 	ldrb.w	r4, [r5], #1
 801549a:	f814 700c 	ldrb.w	r7, [r4, ip]
 801549e:	f017 0708 	ands.w	r7, r7, #8
 80154a2:	d1f7      	bne.n	8015494 <_strtol_l.constprop.0+0x20>
 80154a4:	2c2d      	cmp	r4, #45	; 0x2d
 80154a6:	d132      	bne.n	801550e <_strtol_l.constprop.0+0x9a>
 80154a8:	782c      	ldrb	r4, [r5, #0]
 80154aa:	2701      	movs	r7, #1
 80154ac:	1cb5      	adds	r5, r6, #2
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d05b      	beq.n	801556a <_strtol_l.constprop.0+0xf6>
 80154b2:	2b10      	cmp	r3, #16
 80154b4:	d109      	bne.n	80154ca <_strtol_l.constprop.0+0x56>
 80154b6:	2c30      	cmp	r4, #48	; 0x30
 80154b8:	d107      	bne.n	80154ca <_strtol_l.constprop.0+0x56>
 80154ba:	782c      	ldrb	r4, [r5, #0]
 80154bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80154c0:	2c58      	cmp	r4, #88	; 0x58
 80154c2:	d14d      	bne.n	8015560 <_strtol_l.constprop.0+0xec>
 80154c4:	786c      	ldrb	r4, [r5, #1]
 80154c6:	2310      	movs	r3, #16
 80154c8:	3502      	adds	r5, #2
 80154ca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80154ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80154d2:	f04f 0c00 	mov.w	ip, #0
 80154d6:	fbb8 f9f3 	udiv	r9, r8, r3
 80154da:	4666      	mov	r6, ip
 80154dc:	fb03 8a19 	mls	sl, r3, r9, r8
 80154e0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80154e4:	f1be 0f09 	cmp.w	lr, #9
 80154e8:	d816      	bhi.n	8015518 <_strtol_l.constprop.0+0xa4>
 80154ea:	4674      	mov	r4, lr
 80154ec:	42a3      	cmp	r3, r4
 80154ee:	dd24      	ble.n	801553a <_strtol_l.constprop.0+0xc6>
 80154f0:	f1bc 0f00 	cmp.w	ip, #0
 80154f4:	db1e      	blt.n	8015534 <_strtol_l.constprop.0+0xc0>
 80154f6:	45b1      	cmp	r9, r6
 80154f8:	d31c      	bcc.n	8015534 <_strtol_l.constprop.0+0xc0>
 80154fa:	d101      	bne.n	8015500 <_strtol_l.constprop.0+0x8c>
 80154fc:	45a2      	cmp	sl, r4
 80154fe:	db19      	blt.n	8015534 <_strtol_l.constprop.0+0xc0>
 8015500:	fb06 4603 	mla	r6, r6, r3, r4
 8015504:	f04f 0c01 	mov.w	ip, #1
 8015508:	f815 4b01 	ldrb.w	r4, [r5], #1
 801550c:	e7e8      	b.n	80154e0 <_strtol_l.constprop.0+0x6c>
 801550e:	2c2b      	cmp	r4, #43	; 0x2b
 8015510:	bf04      	itt	eq
 8015512:	782c      	ldrbeq	r4, [r5, #0]
 8015514:	1cb5      	addeq	r5, r6, #2
 8015516:	e7ca      	b.n	80154ae <_strtol_l.constprop.0+0x3a>
 8015518:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801551c:	f1be 0f19 	cmp.w	lr, #25
 8015520:	d801      	bhi.n	8015526 <_strtol_l.constprop.0+0xb2>
 8015522:	3c37      	subs	r4, #55	; 0x37
 8015524:	e7e2      	b.n	80154ec <_strtol_l.constprop.0+0x78>
 8015526:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801552a:	f1be 0f19 	cmp.w	lr, #25
 801552e:	d804      	bhi.n	801553a <_strtol_l.constprop.0+0xc6>
 8015530:	3c57      	subs	r4, #87	; 0x57
 8015532:	e7db      	b.n	80154ec <_strtol_l.constprop.0+0x78>
 8015534:	f04f 3cff 	mov.w	ip, #4294967295
 8015538:	e7e6      	b.n	8015508 <_strtol_l.constprop.0+0x94>
 801553a:	f1bc 0f00 	cmp.w	ip, #0
 801553e:	da05      	bge.n	801554c <_strtol_l.constprop.0+0xd8>
 8015540:	2322      	movs	r3, #34	; 0x22
 8015542:	6003      	str	r3, [r0, #0]
 8015544:	4646      	mov	r6, r8
 8015546:	b942      	cbnz	r2, 801555a <_strtol_l.constprop.0+0xe6>
 8015548:	4630      	mov	r0, r6
 801554a:	e79e      	b.n	801548a <_strtol_l.constprop.0+0x16>
 801554c:	b107      	cbz	r7, 8015550 <_strtol_l.constprop.0+0xdc>
 801554e:	4276      	negs	r6, r6
 8015550:	2a00      	cmp	r2, #0
 8015552:	d0f9      	beq.n	8015548 <_strtol_l.constprop.0+0xd4>
 8015554:	f1bc 0f00 	cmp.w	ip, #0
 8015558:	d000      	beq.n	801555c <_strtol_l.constprop.0+0xe8>
 801555a:	1e69      	subs	r1, r5, #1
 801555c:	6011      	str	r1, [r2, #0]
 801555e:	e7f3      	b.n	8015548 <_strtol_l.constprop.0+0xd4>
 8015560:	2430      	movs	r4, #48	; 0x30
 8015562:	2b00      	cmp	r3, #0
 8015564:	d1b1      	bne.n	80154ca <_strtol_l.constprop.0+0x56>
 8015566:	2308      	movs	r3, #8
 8015568:	e7af      	b.n	80154ca <_strtol_l.constprop.0+0x56>
 801556a:	2c30      	cmp	r4, #48	; 0x30
 801556c:	d0a5      	beq.n	80154ba <_strtol_l.constprop.0+0x46>
 801556e:	230a      	movs	r3, #10
 8015570:	e7ab      	b.n	80154ca <_strtol_l.constprop.0+0x56>
 8015572:	bf00      	nop
 8015574:	08017d1d 	.word	0x08017d1d

08015578 <_strtol_r>:
 8015578:	f7ff bf7c 	b.w	8015474 <_strtol_l.constprop.0>

0801557c <strtol>:
 801557c:	4613      	mov	r3, r2
 801557e:	460a      	mov	r2, r1
 8015580:	4601      	mov	r1, r0
 8015582:	4802      	ldr	r0, [pc, #8]	; (801558c <strtol+0x10>)
 8015584:	6800      	ldr	r0, [r0, #0]
 8015586:	f7ff bf75 	b.w	8015474 <_strtol_l.constprop.0>
 801558a:	bf00      	nop
 801558c:	200002b4 	.word	0x200002b4

08015590 <__tzcalc_limits>:
 8015590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015594:	4605      	mov	r5, r0
 8015596:	f000 fba3 	bl	8015ce0 <__gettzinfo>
 801559a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801559e:	429d      	cmp	r5, r3
 80155a0:	f340 8099 	ble.w	80156d6 <__tzcalc_limits+0x146>
 80155a4:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 80155a8:	18ac      	adds	r4, r5, r2
 80155aa:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 80155ae:	f240 126d 	movw	r2, #365	; 0x16d
 80155b2:	10a4      	asrs	r4, r4, #2
 80155b4:	fb02 4403 	mla	r4, r2, r3, r4
 80155b8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80155bc:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 80155c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80155c4:	441c      	add	r4, r3
 80155c6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80155ca:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 80155ce:	fb95 fcf3 	sdiv	ip, r5, r3
 80155d2:	fb03 5c1c 	mls	ip, r3, ip, r5
 80155d6:	186a      	adds	r2, r5, r1
 80155d8:	fabc f68c 	clz	r6, ip
 80155dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80155e0:	f005 0303 	and.w	r3, r5, #3
 80155e4:	4414      	add	r4, r2
 80155e6:	2264      	movs	r2, #100	; 0x64
 80155e8:	6045      	str	r5, [r0, #4]
 80155ea:	fb95 f7f2 	sdiv	r7, r5, r2
 80155ee:	0976      	lsrs	r6, r6, #5
 80155f0:	fb02 5717 	mls	r7, r2, r7, r5
 80155f4:	4601      	mov	r1, r0
 80155f6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80155fa:	9300      	str	r3, [sp, #0]
 80155fc:	f04f 0a07 	mov.w	sl, #7
 8015600:	7a0d      	ldrb	r5, [r1, #8]
 8015602:	694b      	ldr	r3, [r1, #20]
 8015604:	2d4a      	cmp	r5, #74	; 0x4a
 8015606:	d12d      	bne.n	8015664 <__tzcalc_limits+0xd4>
 8015608:	9a00      	ldr	r2, [sp, #0]
 801560a:	eb04 0e03 	add.w	lr, r4, r3
 801560e:	b902      	cbnz	r2, 8015612 <__tzcalc_limits+0x82>
 8015610:	b917      	cbnz	r7, 8015618 <__tzcalc_limits+0x88>
 8015612:	f1bc 0f00 	cmp.w	ip, #0
 8015616:	d123      	bne.n	8015660 <__tzcalc_limits+0xd0>
 8015618:	2b3b      	cmp	r3, #59	; 0x3b
 801561a:	bfd4      	ite	le
 801561c:	2300      	movle	r3, #0
 801561e:	2301      	movgt	r3, #1
 8015620:	4473      	add	r3, lr
 8015622:	3b01      	subs	r3, #1
 8015624:	698d      	ldr	r5, [r1, #24]
 8015626:	4a2d      	ldr	r2, [pc, #180]	; (80156dc <__tzcalc_limits+0x14c>)
 8015628:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 801562c:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8015630:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8015632:	18ed      	adds	r5, r5, r3
 8015634:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8015638:	e9c1 5308 	strd	r5, r3, [r1, #32]
 801563c:	3128      	adds	r1, #40	; 0x28
 801563e:	458b      	cmp	fp, r1
 8015640:	d1de      	bne.n	8015600 <__tzcalc_limits+0x70>
 8015642:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8015646:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 801564a:	428c      	cmp	r4, r1
 801564c:	eb72 0303 	sbcs.w	r3, r2, r3
 8015650:	bfb4      	ite	lt
 8015652:	2301      	movlt	r3, #1
 8015654:	2300      	movge	r3, #0
 8015656:	6003      	str	r3, [r0, #0]
 8015658:	2001      	movs	r0, #1
 801565a:	b003      	add	sp, #12
 801565c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015660:	2300      	movs	r3, #0
 8015662:	e7dd      	b.n	8015620 <__tzcalc_limits+0x90>
 8015664:	2d44      	cmp	r5, #68	; 0x44
 8015666:	d101      	bne.n	801566c <__tzcalc_limits+0xdc>
 8015668:	4423      	add	r3, r4
 801566a:	e7db      	b.n	8015624 <__tzcalc_limits+0x94>
 801566c:	9a00      	ldr	r2, [sp, #0]
 801566e:	bb62      	cbnz	r2, 80156ca <__tzcalc_limits+0x13a>
 8015670:	2f00      	cmp	r7, #0
 8015672:	bf0c      	ite	eq
 8015674:	4635      	moveq	r5, r6
 8015676:	2501      	movne	r5, #1
 8015678:	68ca      	ldr	r2, [r1, #12]
 801567a:	9201      	str	r2, [sp, #4]
 801567c:	4a18      	ldr	r2, [pc, #96]	; (80156e0 <__tzcalc_limits+0x150>)
 801567e:	f04f 0930 	mov.w	r9, #48	; 0x30
 8015682:	fb09 2505 	mla	r5, r9, r5, r2
 8015686:	46a6      	mov	lr, r4
 8015688:	f04f 0800 	mov.w	r8, #0
 801568c:	3d04      	subs	r5, #4
 801568e:	9a01      	ldr	r2, [sp, #4]
 8015690:	f108 0801 	add.w	r8, r8, #1
 8015694:	4542      	cmp	r2, r8
 8015696:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 801569a:	dc18      	bgt.n	80156ce <__tzcalc_limits+0x13e>
 801569c:	f10e 0504 	add.w	r5, lr, #4
 80156a0:	fb95 f8fa 	sdiv	r8, r5, sl
 80156a4:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 80156a8:	eba5 0808 	sub.w	r8, r5, r8
 80156ac:	ebb3 0808 	subs.w	r8, r3, r8
 80156b0:	690b      	ldr	r3, [r1, #16]
 80156b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80156b6:	bf48      	it	mi
 80156b8:	f108 0807 	addmi.w	r8, r8, #7
 80156bc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80156c0:	4443      	add	r3, r8
 80156c2:	454b      	cmp	r3, r9
 80156c4:	da05      	bge.n	80156d2 <__tzcalc_limits+0x142>
 80156c6:	4473      	add	r3, lr
 80156c8:	e7ac      	b.n	8015624 <__tzcalc_limits+0x94>
 80156ca:	4635      	mov	r5, r6
 80156cc:	e7d4      	b.n	8015678 <__tzcalc_limits+0xe8>
 80156ce:	44ce      	add	lr, r9
 80156d0:	e7dd      	b.n	801568e <__tzcalc_limits+0xfe>
 80156d2:	3b07      	subs	r3, #7
 80156d4:	e7f5      	b.n	80156c2 <__tzcalc_limits+0x132>
 80156d6:	2000      	movs	r0, #0
 80156d8:	e7bf      	b.n	801565a <__tzcalc_limits+0xca>
 80156da:	bf00      	nop
 80156dc:	00015180 	.word	0x00015180
 80156e0:	08017e20 	.word	0x08017e20

080156e4 <__tz_lock>:
 80156e4:	4801      	ldr	r0, [pc, #4]	; (80156ec <__tz_lock+0x8>)
 80156e6:	f7ff ba0c 	b.w	8014b02 <__retarget_lock_acquire>
 80156ea:	bf00      	nop
 80156ec:	2000e8cc 	.word	0x2000e8cc

080156f0 <__tz_unlock>:
 80156f0:	4801      	ldr	r0, [pc, #4]	; (80156f8 <__tz_unlock+0x8>)
 80156f2:	f7ff ba08 	b.w	8014b06 <__retarget_lock_release>
 80156f6:	bf00      	nop
 80156f8:	2000e8cc 	.word	0x2000e8cc

080156fc <_tzset_unlocked>:
 80156fc:	4b01      	ldr	r3, [pc, #4]	; (8015704 <_tzset_unlocked+0x8>)
 80156fe:	6818      	ldr	r0, [r3, #0]
 8015700:	f000 b802 	b.w	8015708 <_tzset_unlocked_r>
 8015704:	200002b4 	.word	0x200002b4

08015708 <_tzset_unlocked_r>:
 8015708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801570c:	b08d      	sub	sp, #52	; 0x34
 801570e:	4607      	mov	r7, r0
 8015710:	f000 fae6 	bl	8015ce0 <__gettzinfo>
 8015714:	49b0      	ldr	r1, [pc, #704]	; (80159d8 <_tzset_unlocked_r+0x2d0>)
 8015716:	4eb1      	ldr	r6, [pc, #708]	; (80159dc <_tzset_unlocked_r+0x2d4>)
 8015718:	4605      	mov	r5, r0
 801571a:	4638      	mov	r0, r7
 801571c:	f000 fad8 	bl	8015cd0 <_getenv_r>
 8015720:	4604      	mov	r4, r0
 8015722:	b970      	cbnz	r0, 8015742 <_tzset_unlocked_r+0x3a>
 8015724:	4bae      	ldr	r3, [pc, #696]	; (80159e0 <_tzset_unlocked_r+0x2d8>)
 8015726:	4aaf      	ldr	r2, [pc, #700]	; (80159e4 <_tzset_unlocked_r+0x2dc>)
 8015728:	6018      	str	r0, [r3, #0]
 801572a:	4baf      	ldr	r3, [pc, #700]	; (80159e8 <_tzset_unlocked_r+0x2e0>)
 801572c:	6018      	str	r0, [r3, #0]
 801572e:	4baf      	ldr	r3, [pc, #700]	; (80159ec <_tzset_unlocked_r+0x2e4>)
 8015730:	6830      	ldr	r0, [r6, #0]
 8015732:	e9c3 2200 	strd	r2, r2, [r3]
 8015736:	f7ff f9f1 	bl	8014b1c <free>
 801573a:	6034      	str	r4, [r6, #0]
 801573c:	b00d      	add	sp, #52	; 0x34
 801573e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015742:	6831      	ldr	r1, [r6, #0]
 8015744:	2900      	cmp	r1, #0
 8015746:	d162      	bne.n	801580e <_tzset_unlocked_r+0x106>
 8015748:	6830      	ldr	r0, [r6, #0]
 801574a:	f7ff f9e7 	bl	8014b1c <free>
 801574e:	4620      	mov	r0, r4
 8015750:	f7ea fd48 	bl	80001e4 <strlen>
 8015754:	1c41      	adds	r1, r0, #1
 8015756:	4638      	mov	r0, r7
 8015758:	f7ff fcdc 	bl	8015114 <_malloc_r>
 801575c:	6030      	str	r0, [r6, #0]
 801575e:	2800      	cmp	r0, #0
 8015760:	d15a      	bne.n	8015818 <_tzset_unlocked_r+0x110>
 8015762:	7823      	ldrb	r3, [r4, #0]
 8015764:	4aa2      	ldr	r2, [pc, #648]	; (80159f0 <_tzset_unlocked_r+0x2e8>)
 8015766:	49a3      	ldr	r1, [pc, #652]	; (80159f4 <_tzset_unlocked_r+0x2ec>)
 8015768:	2b3a      	cmp	r3, #58	; 0x3a
 801576a:	bf08      	it	eq
 801576c:	3401      	addeq	r4, #1
 801576e:	ae0a      	add	r6, sp, #40	; 0x28
 8015770:	4633      	mov	r3, r6
 8015772:	4620      	mov	r0, r4
 8015774:	f000 ff32 	bl	80165dc <siscanf>
 8015778:	2800      	cmp	r0, #0
 801577a:	dddf      	ble.n	801573c <_tzset_unlocked_r+0x34>
 801577c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801577e:	18e7      	adds	r7, r4, r3
 8015780:	5ce3      	ldrb	r3, [r4, r3]
 8015782:	2b2d      	cmp	r3, #45	; 0x2d
 8015784:	d14c      	bne.n	8015820 <_tzset_unlocked_r+0x118>
 8015786:	3701      	adds	r7, #1
 8015788:	f04f 38ff 	mov.w	r8, #4294967295
 801578c:	f10d 0a20 	add.w	sl, sp, #32
 8015790:	f10d 0b1e 	add.w	fp, sp, #30
 8015794:	2400      	movs	r4, #0
 8015796:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801579a:	4997      	ldr	r1, [pc, #604]	; (80159f8 <_tzset_unlocked_r+0x2f0>)
 801579c:	9603      	str	r6, [sp, #12]
 801579e:	f8cd b000 	str.w	fp, [sp]
 80157a2:	4633      	mov	r3, r6
 80157a4:	aa07      	add	r2, sp, #28
 80157a6:	4638      	mov	r0, r7
 80157a8:	f8ad 401e 	strh.w	r4, [sp, #30]
 80157ac:	f8ad 4020 	strh.w	r4, [sp, #32]
 80157b0:	f000 ff14 	bl	80165dc <siscanf>
 80157b4:	42a0      	cmp	r0, r4
 80157b6:	ddc1      	ble.n	801573c <_tzset_unlocked_r+0x34>
 80157b8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80157bc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80157c0:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8015a04 <_tzset_unlocked_r+0x2fc>
 80157c4:	213c      	movs	r1, #60	; 0x3c
 80157c6:	fb01 3302 	mla	r3, r1, r2, r3
 80157ca:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80157ce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80157d2:	fb01 3302 	mla	r3, r1, r2, r3
 80157d6:	fb08 f303 	mul.w	r3, r8, r3
 80157da:	f8df 8210 	ldr.w	r8, [pc, #528]	; 80159ec <_tzset_unlocked_r+0x2e4>
 80157de:	62ab      	str	r3, [r5, #40]	; 0x28
 80157e0:	4b83      	ldr	r3, [pc, #524]	; (80159f0 <_tzset_unlocked_r+0x2e8>)
 80157e2:	f8c8 3000 	str.w	r3, [r8]
 80157e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157e8:	4982      	ldr	r1, [pc, #520]	; (80159f4 <_tzset_unlocked_r+0x2ec>)
 80157ea:	441f      	add	r7, r3
 80157ec:	464a      	mov	r2, r9
 80157ee:	4633      	mov	r3, r6
 80157f0:	4638      	mov	r0, r7
 80157f2:	f000 fef3 	bl	80165dc <siscanf>
 80157f6:	42a0      	cmp	r0, r4
 80157f8:	dc18      	bgt.n	801582c <_tzset_unlocked_r+0x124>
 80157fa:	f8d8 3000 	ldr.w	r3, [r8]
 80157fe:	f8c8 3004 	str.w	r3, [r8, #4]
 8015802:	4b77      	ldr	r3, [pc, #476]	; (80159e0 <_tzset_unlocked_r+0x2d8>)
 8015804:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8015806:	601a      	str	r2, [r3, #0]
 8015808:	4b77      	ldr	r3, [pc, #476]	; (80159e8 <_tzset_unlocked_r+0x2e0>)
 801580a:	601c      	str	r4, [r3, #0]
 801580c:	e796      	b.n	801573c <_tzset_unlocked_r+0x34>
 801580e:	f7ea fcdf 	bl	80001d0 <strcmp>
 8015812:	2800      	cmp	r0, #0
 8015814:	d198      	bne.n	8015748 <_tzset_unlocked_r+0x40>
 8015816:	e791      	b.n	801573c <_tzset_unlocked_r+0x34>
 8015818:	4621      	mov	r1, r4
 801581a:	f000 ff0b 	bl	8016634 <strcpy>
 801581e:	e7a0      	b.n	8015762 <_tzset_unlocked_r+0x5a>
 8015820:	2b2b      	cmp	r3, #43	; 0x2b
 8015822:	bf08      	it	eq
 8015824:	3701      	addeq	r7, #1
 8015826:	f04f 0801 	mov.w	r8, #1
 801582a:	e7af      	b.n	801578c <_tzset_unlocked_r+0x84>
 801582c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801582e:	f8c8 9004 	str.w	r9, [r8, #4]
 8015832:	18fc      	adds	r4, r7, r3
 8015834:	5cfb      	ldrb	r3, [r7, r3]
 8015836:	2b2d      	cmp	r3, #45	; 0x2d
 8015838:	f040 808b 	bne.w	8015952 <_tzset_unlocked_r+0x24a>
 801583c:	3401      	adds	r4, #1
 801583e:	f04f 37ff 	mov.w	r7, #4294967295
 8015842:	2300      	movs	r3, #0
 8015844:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015848:	f8ad 301e 	strh.w	r3, [sp, #30]
 801584c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015850:	930a      	str	r3, [sp, #40]	; 0x28
 8015852:	e9cd a602 	strd	sl, r6, [sp, #8]
 8015856:	e9cd b600 	strd	fp, r6, [sp]
 801585a:	4967      	ldr	r1, [pc, #412]	; (80159f8 <_tzset_unlocked_r+0x2f0>)
 801585c:	4633      	mov	r3, r6
 801585e:	aa07      	add	r2, sp, #28
 8015860:	4620      	mov	r0, r4
 8015862:	f000 febb 	bl	80165dc <siscanf>
 8015866:	2800      	cmp	r0, #0
 8015868:	dc78      	bgt.n	801595c <_tzset_unlocked_r+0x254>
 801586a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801586c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8015870:	652b      	str	r3, [r5, #80]	; 0x50
 8015872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015874:	462f      	mov	r7, r5
 8015876:	441c      	add	r4, r3
 8015878:	f04f 0900 	mov.w	r9, #0
 801587c:	7823      	ldrb	r3, [r4, #0]
 801587e:	2b2c      	cmp	r3, #44	; 0x2c
 8015880:	bf08      	it	eq
 8015882:	3401      	addeq	r4, #1
 8015884:	f894 8000 	ldrb.w	r8, [r4]
 8015888:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801588c:	d178      	bne.n	8015980 <_tzset_unlocked_r+0x278>
 801588e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8015892:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8015896:	ab09      	add	r3, sp, #36	; 0x24
 8015898:	9300      	str	r3, [sp, #0]
 801589a:	4958      	ldr	r1, [pc, #352]	; (80159fc <_tzset_unlocked_r+0x2f4>)
 801589c:	9603      	str	r6, [sp, #12]
 801589e:	4633      	mov	r3, r6
 80158a0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80158a4:	4620      	mov	r0, r4
 80158a6:	f000 fe99 	bl	80165dc <siscanf>
 80158aa:	2803      	cmp	r0, #3
 80158ac:	f47f af46 	bne.w	801573c <_tzset_unlocked_r+0x34>
 80158b0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80158b4:	1e4b      	subs	r3, r1, #1
 80158b6:	2b0b      	cmp	r3, #11
 80158b8:	f63f af40 	bhi.w	801573c <_tzset_unlocked_r+0x34>
 80158bc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80158c0:	1e53      	subs	r3, r2, #1
 80158c2:	2b04      	cmp	r3, #4
 80158c4:	f63f af3a 	bhi.w	801573c <_tzset_unlocked_r+0x34>
 80158c8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80158cc:	2b06      	cmp	r3, #6
 80158ce:	f63f af35 	bhi.w	801573c <_tzset_unlocked_r+0x34>
 80158d2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80158d6:	f887 8008 	strb.w	r8, [r7, #8]
 80158da:	617b      	str	r3, [r7, #20]
 80158dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158de:	eb04 0803 	add.w	r8, r4, r3
 80158e2:	2302      	movs	r3, #2
 80158e4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80158e8:	2300      	movs	r3, #0
 80158ea:	f8ad 301e 	strh.w	r3, [sp, #30]
 80158ee:	f8ad 3020 	strh.w	r3, [sp, #32]
 80158f2:	930a      	str	r3, [sp, #40]	; 0x28
 80158f4:	f898 3000 	ldrb.w	r3, [r8]
 80158f8:	2b2f      	cmp	r3, #47	; 0x2f
 80158fa:	d109      	bne.n	8015910 <_tzset_unlocked_r+0x208>
 80158fc:	e9cd a602 	strd	sl, r6, [sp, #8]
 8015900:	e9cd b600 	strd	fp, r6, [sp]
 8015904:	493e      	ldr	r1, [pc, #248]	; (8015a00 <_tzset_unlocked_r+0x2f8>)
 8015906:	4633      	mov	r3, r6
 8015908:	aa07      	add	r2, sp, #28
 801590a:	4640      	mov	r0, r8
 801590c:	f000 fe66 	bl	80165dc <siscanf>
 8015910:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8015914:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015918:	213c      	movs	r1, #60	; 0x3c
 801591a:	fb01 3302 	mla	r3, r1, r2, r3
 801591e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8015922:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8015926:	fb01 3302 	mla	r3, r1, r2, r3
 801592a:	61bb      	str	r3, [r7, #24]
 801592c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801592e:	3728      	adds	r7, #40	; 0x28
 8015930:	4444      	add	r4, r8
 8015932:	f1b9 0f00 	cmp.w	r9, #0
 8015936:	d020      	beq.n	801597a <_tzset_unlocked_r+0x272>
 8015938:	6868      	ldr	r0, [r5, #4]
 801593a:	f7ff fe29 	bl	8015590 <__tzcalc_limits>
 801593e:	4b28      	ldr	r3, [pc, #160]	; (80159e0 <_tzset_unlocked_r+0x2d8>)
 8015940:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8015942:	601a      	str	r2, [r3, #0]
 8015944:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8015946:	1a9b      	subs	r3, r3, r2
 8015948:	4a27      	ldr	r2, [pc, #156]	; (80159e8 <_tzset_unlocked_r+0x2e0>)
 801594a:	bf18      	it	ne
 801594c:	2301      	movne	r3, #1
 801594e:	6013      	str	r3, [r2, #0]
 8015950:	e6f4      	b.n	801573c <_tzset_unlocked_r+0x34>
 8015952:	2b2b      	cmp	r3, #43	; 0x2b
 8015954:	bf08      	it	eq
 8015956:	3401      	addeq	r4, #1
 8015958:	2701      	movs	r7, #1
 801595a:	e772      	b.n	8015842 <_tzset_unlocked_r+0x13a>
 801595c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8015960:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015964:	213c      	movs	r1, #60	; 0x3c
 8015966:	fb01 3302 	mla	r3, r1, r2, r3
 801596a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801596e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8015972:	fb01 3302 	mla	r3, r1, r2, r3
 8015976:	437b      	muls	r3, r7
 8015978:	e77a      	b.n	8015870 <_tzset_unlocked_r+0x168>
 801597a:	f04f 0901 	mov.w	r9, #1
 801597e:	e77d      	b.n	801587c <_tzset_unlocked_r+0x174>
 8015980:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8015984:	bf06      	itte	eq
 8015986:	3401      	addeq	r4, #1
 8015988:	4643      	moveq	r3, r8
 801598a:	2344      	movne	r3, #68	; 0x44
 801598c:	220a      	movs	r2, #10
 801598e:	a90b      	add	r1, sp, #44	; 0x2c
 8015990:	4620      	mov	r0, r4
 8015992:	9305      	str	r3, [sp, #20]
 8015994:	f000 fede 	bl	8016754 <strtoul>
 8015998:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801599c:	9b05      	ldr	r3, [sp, #20]
 801599e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80159a2:	45a0      	cmp	r8, r4
 80159a4:	d114      	bne.n	80159d0 <_tzset_unlocked_r+0x2c8>
 80159a6:	234d      	movs	r3, #77	; 0x4d
 80159a8:	f1b9 0f00 	cmp.w	r9, #0
 80159ac:	d107      	bne.n	80159be <_tzset_unlocked_r+0x2b6>
 80159ae:	722b      	strb	r3, [r5, #8]
 80159b0:	2103      	movs	r1, #3
 80159b2:	2302      	movs	r3, #2
 80159b4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80159b8:	f8c5 9014 	str.w	r9, [r5, #20]
 80159bc:	e791      	b.n	80158e2 <_tzset_unlocked_r+0x1da>
 80159be:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80159c2:	220b      	movs	r2, #11
 80159c4:	2301      	movs	r3, #1
 80159c6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80159ca:	2300      	movs	r3, #0
 80159cc:	63eb      	str	r3, [r5, #60]	; 0x3c
 80159ce:	e788      	b.n	80158e2 <_tzset_unlocked_r+0x1da>
 80159d0:	b280      	uxth	r0, r0
 80159d2:	723b      	strb	r3, [r7, #8]
 80159d4:	6178      	str	r0, [r7, #20]
 80159d6:	e784      	b.n	80158e2 <_tzset_unlocked_r+0x1da>
 80159d8:	08017ca4 	.word	0x08017ca4
 80159dc:	2000e8f4 	.word	0x2000e8f4
 80159e0:	2000e8fc 	.word	0x2000e8fc
 80159e4:	08017ca7 	.word	0x08017ca7
 80159e8:	2000e8f8 	.word	0x2000e8f8
 80159ec:	20000318 	.word	0x20000318
 80159f0:	2000e8e7 	.word	0x2000e8e7
 80159f4:	08017cab 	.word	0x08017cab
 80159f8:	08017cce 	.word	0x08017cce
 80159fc:	08017cba 	.word	0x08017cba
 8015a00:	08017ccd 	.word	0x08017ccd
 8015a04:	2000e8dc 	.word	0x2000e8dc

08015a08 <_write_r>:
 8015a08:	b538      	push	{r3, r4, r5, lr}
 8015a0a:	4d07      	ldr	r5, [pc, #28]	; (8015a28 <_write_r+0x20>)
 8015a0c:	4604      	mov	r4, r0
 8015a0e:	4608      	mov	r0, r1
 8015a10:	4611      	mov	r1, r2
 8015a12:	2200      	movs	r2, #0
 8015a14:	602a      	str	r2, [r5, #0]
 8015a16:	461a      	mov	r2, r3
 8015a18:	f7ed fbb3 	bl	8003182 <_write>
 8015a1c:	1c43      	adds	r3, r0, #1
 8015a1e:	d102      	bne.n	8015a26 <_write_r+0x1e>
 8015a20:	682b      	ldr	r3, [r5, #0]
 8015a22:	b103      	cbz	r3, 8015a26 <_write_r+0x1e>
 8015a24:	6023      	str	r3, [r4, #0]
 8015a26:	bd38      	pop	{r3, r4, r5, pc}
 8015a28:	2000e8d8 	.word	0x2000e8d8

08015a2c <__assert_func>:
 8015a2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015a2e:	4614      	mov	r4, r2
 8015a30:	461a      	mov	r2, r3
 8015a32:	4b09      	ldr	r3, [pc, #36]	; (8015a58 <__assert_func+0x2c>)
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	4605      	mov	r5, r0
 8015a38:	68d8      	ldr	r0, [r3, #12]
 8015a3a:	b14c      	cbz	r4, 8015a50 <__assert_func+0x24>
 8015a3c:	4b07      	ldr	r3, [pc, #28]	; (8015a5c <__assert_func+0x30>)
 8015a3e:	9100      	str	r1, [sp, #0]
 8015a40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015a44:	4906      	ldr	r1, [pc, #24]	; (8015a60 <__assert_func+0x34>)
 8015a46:	462b      	mov	r3, r5
 8015a48:	f000 f8f4 	bl	8015c34 <fiprintf>
 8015a4c:	f000 ff4c 	bl	80168e8 <abort>
 8015a50:	4b04      	ldr	r3, [pc, #16]	; (8015a64 <__assert_func+0x38>)
 8015a52:	461c      	mov	r4, r3
 8015a54:	e7f3      	b.n	8015a3e <__assert_func+0x12>
 8015a56:	bf00      	nop
 8015a58:	200002b4 	.word	0x200002b4
 8015a5c:	08017ce0 	.word	0x08017ce0
 8015a60:	08017ced 	.word	0x08017ced
 8015a64:	08017d1b 	.word	0x08017d1b

08015a68 <_close_r>:
 8015a68:	b538      	push	{r3, r4, r5, lr}
 8015a6a:	4d06      	ldr	r5, [pc, #24]	; (8015a84 <_close_r+0x1c>)
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	4604      	mov	r4, r0
 8015a70:	4608      	mov	r0, r1
 8015a72:	602b      	str	r3, [r5, #0]
 8015a74:	f7ed fba1 	bl	80031ba <_close>
 8015a78:	1c43      	adds	r3, r0, #1
 8015a7a:	d102      	bne.n	8015a82 <_close_r+0x1a>
 8015a7c:	682b      	ldr	r3, [r5, #0]
 8015a7e:	b103      	cbz	r3, 8015a82 <_close_r+0x1a>
 8015a80:	6023      	str	r3, [r4, #0]
 8015a82:	bd38      	pop	{r3, r4, r5, pc}
 8015a84:	2000e8d8 	.word	0x2000e8d8

08015a88 <div>:
 8015a88:	2900      	cmp	r1, #0
 8015a8a:	b510      	push	{r4, lr}
 8015a8c:	fb91 f4f2 	sdiv	r4, r1, r2
 8015a90:	fb02 1314 	mls	r3, r2, r4, r1
 8015a94:	db06      	blt.n	8015aa4 <div+0x1c>
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	da01      	bge.n	8015a9e <div+0x16>
 8015a9a:	3401      	adds	r4, #1
 8015a9c:	1a9b      	subs	r3, r3, r2
 8015a9e:	e9c0 4300 	strd	r4, r3, [r0]
 8015aa2:	bd10      	pop	{r4, pc}
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	bfc4      	itt	gt
 8015aa8:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8015aac:	189b      	addgt	r3, r3, r2
 8015aae:	e7f6      	b.n	8015a9e <div+0x16>

08015ab0 <__sflush_r>:
 8015ab0:	898a      	ldrh	r2, [r1, #12]
 8015ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ab6:	4605      	mov	r5, r0
 8015ab8:	0710      	lsls	r0, r2, #28
 8015aba:	460c      	mov	r4, r1
 8015abc:	d458      	bmi.n	8015b70 <__sflush_r+0xc0>
 8015abe:	684b      	ldr	r3, [r1, #4]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	dc05      	bgt.n	8015ad0 <__sflush_r+0x20>
 8015ac4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	dc02      	bgt.n	8015ad0 <__sflush_r+0x20>
 8015aca:	2000      	movs	r0, #0
 8015acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015ad2:	2e00      	cmp	r6, #0
 8015ad4:	d0f9      	beq.n	8015aca <__sflush_r+0x1a>
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015adc:	682f      	ldr	r7, [r5, #0]
 8015ade:	602b      	str	r3, [r5, #0]
 8015ae0:	d032      	beq.n	8015b48 <__sflush_r+0x98>
 8015ae2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015ae4:	89a3      	ldrh	r3, [r4, #12]
 8015ae6:	075a      	lsls	r2, r3, #29
 8015ae8:	d505      	bpl.n	8015af6 <__sflush_r+0x46>
 8015aea:	6863      	ldr	r3, [r4, #4]
 8015aec:	1ac0      	subs	r0, r0, r3
 8015aee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015af0:	b10b      	cbz	r3, 8015af6 <__sflush_r+0x46>
 8015af2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015af4:	1ac0      	subs	r0, r0, r3
 8015af6:	2300      	movs	r3, #0
 8015af8:	4602      	mov	r2, r0
 8015afa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015afc:	6a21      	ldr	r1, [r4, #32]
 8015afe:	4628      	mov	r0, r5
 8015b00:	47b0      	blx	r6
 8015b02:	1c43      	adds	r3, r0, #1
 8015b04:	89a3      	ldrh	r3, [r4, #12]
 8015b06:	d106      	bne.n	8015b16 <__sflush_r+0x66>
 8015b08:	6829      	ldr	r1, [r5, #0]
 8015b0a:	291d      	cmp	r1, #29
 8015b0c:	d82c      	bhi.n	8015b68 <__sflush_r+0xb8>
 8015b0e:	4a2a      	ldr	r2, [pc, #168]	; (8015bb8 <__sflush_r+0x108>)
 8015b10:	40ca      	lsrs	r2, r1
 8015b12:	07d6      	lsls	r6, r2, #31
 8015b14:	d528      	bpl.n	8015b68 <__sflush_r+0xb8>
 8015b16:	2200      	movs	r2, #0
 8015b18:	6062      	str	r2, [r4, #4]
 8015b1a:	04d9      	lsls	r1, r3, #19
 8015b1c:	6922      	ldr	r2, [r4, #16]
 8015b1e:	6022      	str	r2, [r4, #0]
 8015b20:	d504      	bpl.n	8015b2c <__sflush_r+0x7c>
 8015b22:	1c42      	adds	r2, r0, #1
 8015b24:	d101      	bne.n	8015b2a <__sflush_r+0x7a>
 8015b26:	682b      	ldr	r3, [r5, #0]
 8015b28:	b903      	cbnz	r3, 8015b2c <__sflush_r+0x7c>
 8015b2a:	6560      	str	r0, [r4, #84]	; 0x54
 8015b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015b2e:	602f      	str	r7, [r5, #0]
 8015b30:	2900      	cmp	r1, #0
 8015b32:	d0ca      	beq.n	8015aca <__sflush_r+0x1a>
 8015b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015b38:	4299      	cmp	r1, r3
 8015b3a:	d002      	beq.n	8015b42 <__sflush_r+0x92>
 8015b3c:	4628      	mov	r0, r5
 8015b3e:	f7ff fa7d 	bl	801503c <_free_r>
 8015b42:	2000      	movs	r0, #0
 8015b44:	6360      	str	r0, [r4, #52]	; 0x34
 8015b46:	e7c1      	b.n	8015acc <__sflush_r+0x1c>
 8015b48:	6a21      	ldr	r1, [r4, #32]
 8015b4a:	2301      	movs	r3, #1
 8015b4c:	4628      	mov	r0, r5
 8015b4e:	47b0      	blx	r6
 8015b50:	1c41      	adds	r1, r0, #1
 8015b52:	d1c7      	bne.n	8015ae4 <__sflush_r+0x34>
 8015b54:	682b      	ldr	r3, [r5, #0]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d0c4      	beq.n	8015ae4 <__sflush_r+0x34>
 8015b5a:	2b1d      	cmp	r3, #29
 8015b5c:	d001      	beq.n	8015b62 <__sflush_r+0xb2>
 8015b5e:	2b16      	cmp	r3, #22
 8015b60:	d101      	bne.n	8015b66 <__sflush_r+0xb6>
 8015b62:	602f      	str	r7, [r5, #0]
 8015b64:	e7b1      	b.n	8015aca <__sflush_r+0x1a>
 8015b66:	89a3      	ldrh	r3, [r4, #12]
 8015b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b6c:	81a3      	strh	r3, [r4, #12]
 8015b6e:	e7ad      	b.n	8015acc <__sflush_r+0x1c>
 8015b70:	690f      	ldr	r7, [r1, #16]
 8015b72:	2f00      	cmp	r7, #0
 8015b74:	d0a9      	beq.n	8015aca <__sflush_r+0x1a>
 8015b76:	0793      	lsls	r3, r2, #30
 8015b78:	680e      	ldr	r6, [r1, #0]
 8015b7a:	bf08      	it	eq
 8015b7c:	694b      	ldreq	r3, [r1, #20]
 8015b7e:	600f      	str	r7, [r1, #0]
 8015b80:	bf18      	it	ne
 8015b82:	2300      	movne	r3, #0
 8015b84:	eba6 0807 	sub.w	r8, r6, r7
 8015b88:	608b      	str	r3, [r1, #8]
 8015b8a:	f1b8 0f00 	cmp.w	r8, #0
 8015b8e:	dd9c      	ble.n	8015aca <__sflush_r+0x1a>
 8015b90:	6a21      	ldr	r1, [r4, #32]
 8015b92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015b94:	4643      	mov	r3, r8
 8015b96:	463a      	mov	r2, r7
 8015b98:	4628      	mov	r0, r5
 8015b9a:	47b0      	blx	r6
 8015b9c:	2800      	cmp	r0, #0
 8015b9e:	dc06      	bgt.n	8015bae <__sflush_r+0xfe>
 8015ba0:	89a3      	ldrh	r3, [r4, #12]
 8015ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ba6:	81a3      	strh	r3, [r4, #12]
 8015ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8015bac:	e78e      	b.n	8015acc <__sflush_r+0x1c>
 8015bae:	4407      	add	r7, r0
 8015bb0:	eba8 0800 	sub.w	r8, r8, r0
 8015bb4:	e7e9      	b.n	8015b8a <__sflush_r+0xda>
 8015bb6:	bf00      	nop
 8015bb8:	20400001 	.word	0x20400001

08015bbc <_fflush_r>:
 8015bbc:	b538      	push	{r3, r4, r5, lr}
 8015bbe:	690b      	ldr	r3, [r1, #16]
 8015bc0:	4605      	mov	r5, r0
 8015bc2:	460c      	mov	r4, r1
 8015bc4:	b913      	cbnz	r3, 8015bcc <_fflush_r+0x10>
 8015bc6:	2500      	movs	r5, #0
 8015bc8:	4628      	mov	r0, r5
 8015bca:	bd38      	pop	{r3, r4, r5, pc}
 8015bcc:	b118      	cbz	r0, 8015bd6 <_fflush_r+0x1a>
 8015bce:	6983      	ldr	r3, [r0, #24]
 8015bd0:	b90b      	cbnz	r3, 8015bd6 <_fflush_r+0x1a>
 8015bd2:	f7fe fed3 	bl	801497c <__sinit>
 8015bd6:	4b14      	ldr	r3, [pc, #80]	; (8015c28 <_fflush_r+0x6c>)
 8015bd8:	429c      	cmp	r4, r3
 8015bda:	d11b      	bne.n	8015c14 <_fflush_r+0x58>
 8015bdc:	686c      	ldr	r4, [r5, #4]
 8015bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d0ef      	beq.n	8015bc6 <_fflush_r+0xa>
 8015be6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015be8:	07d0      	lsls	r0, r2, #31
 8015bea:	d404      	bmi.n	8015bf6 <_fflush_r+0x3a>
 8015bec:	0599      	lsls	r1, r3, #22
 8015bee:	d402      	bmi.n	8015bf6 <_fflush_r+0x3a>
 8015bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015bf2:	f7fe ff87 	bl	8014b04 <__retarget_lock_acquire_recursive>
 8015bf6:	4628      	mov	r0, r5
 8015bf8:	4621      	mov	r1, r4
 8015bfa:	f7ff ff59 	bl	8015ab0 <__sflush_r>
 8015bfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015c00:	07da      	lsls	r2, r3, #31
 8015c02:	4605      	mov	r5, r0
 8015c04:	d4e0      	bmi.n	8015bc8 <_fflush_r+0xc>
 8015c06:	89a3      	ldrh	r3, [r4, #12]
 8015c08:	059b      	lsls	r3, r3, #22
 8015c0a:	d4dd      	bmi.n	8015bc8 <_fflush_r+0xc>
 8015c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c0e:	f7fe ff7b 	bl	8014b08 <__retarget_lock_release_recursive>
 8015c12:	e7d9      	b.n	8015bc8 <_fflush_r+0xc>
 8015c14:	4b05      	ldr	r3, [pc, #20]	; (8015c2c <_fflush_r+0x70>)
 8015c16:	429c      	cmp	r4, r3
 8015c18:	d101      	bne.n	8015c1e <_fflush_r+0x62>
 8015c1a:	68ac      	ldr	r4, [r5, #8]
 8015c1c:	e7df      	b.n	8015bde <_fflush_r+0x22>
 8015c1e:	4b04      	ldr	r3, [pc, #16]	; (8015c30 <_fflush_r+0x74>)
 8015c20:	429c      	cmp	r4, r3
 8015c22:	bf08      	it	eq
 8015c24:	68ec      	ldreq	r4, [r5, #12]
 8015c26:	e7da      	b.n	8015bde <_fflush_r+0x22>
 8015c28:	08017b8c 	.word	0x08017b8c
 8015c2c:	08017bac 	.word	0x08017bac
 8015c30:	08017b6c 	.word	0x08017b6c

08015c34 <fiprintf>:
 8015c34:	b40e      	push	{r1, r2, r3}
 8015c36:	b503      	push	{r0, r1, lr}
 8015c38:	4601      	mov	r1, r0
 8015c3a:	ab03      	add	r3, sp, #12
 8015c3c:	4805      	ldr	r0, [pc, #20]	; (8015c54 <fiprintf+0x20>)
 8015c3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c42:	6800      	ldr	r0, [r0, #0]
 8015c44:	9301      	str	r3, [sp, #4]
 8015c46:	f000 f9f3 	bl	8016030 <_vfiprintf_r>
 8015c4a:	b002      	add	sp, #8
 8015c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015c50:	b003      	add	sp, #12
 8015c52:	4770      	bx	lr
 8015c54:	200002b4 	.word	0x200002b4

08015c58 <_findenv_r>:
 8015c58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c5c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8015ccc <_findenv_r+0x74>
 8015c60:	4607      	mov	r7, r0
 8015c62:	4689      	mov	r9, r1
 8015c64:	4616      	mov	r6, r2
 8015c66:	f000 fe47 	bl	80168f8 <__env_lock>
 8015c6a:	f8da 4000 	ldr.w	r4, [sl]
 8015c6e:	b134      	cbz	r4, 8015c7e <_findenv_r+0x26>
 8015c70:	464b      	mov	r3, r9
 8015c72:	4698      	mov	r8, r3
 8015c74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c78:	b13a      	cbz	r2, 8015c8a <_findenv_r+0x32>
 8015c7a:	2a3d      	cmp	r2, #61	; 0x3d
 8015c7c:	d1f9      	bne.n	8015c72 <_findenv_r+0x1a>
 8015c7e:	4638      	mov	r0, r7
 8015c80:	f000 fe40 	bl	8016904 <__env_unlock>
 8015c84:	2000      	movs	r0, #0
 8015c86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c8a:	eba8 0809 	sub.w	r8, r8, r9
 8015c8e:	46a3      	mov	fp, r4
 8015c90:	f854 0b04 	ldr.w	r0, [r4], #4
 8015c94:	2800      	cmp	r0, #0
 8015c96:	d0f2      	beq.n	8015c7e <_findenv_r+0x26>
 8015c98:	4642      	mov	r2, r8
 8015c9a:	4649      	mov	r1, r9
 8015c9c:	f000 fcd2 	bl	8016644 <strncmp>
 8015ca0:	2800      	cmp	r0, #0
 8015ca2:	d1f4      	bne.n	8015c8e <_findenv_r+0x36>
 8015ca4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015ca8:	eb03 0508 	add.w	r5, r3, r8
 8015cac:	f813 3008 	ldrb.w	r3, [r3, r8]
 8015cb0:	2b3d      	cmp	r3, #61	; 0x3d
 8015cb2:	d1ec      	bne.n	8015c8e <_findenv_r+0x36>
 8015cb4:	f8da 3000 	ldr.w	r3, [sl]
 8015cb8:	ebab 0303 	sub.w	r3, fp, r3
 8015cbc:	109b      	asrs	r3, r3, #2
 8015cbe:	4638      	mov	r0, r7
 8015cc0:	6033      	str	r3, [r6, #0]
 8015cc2:	f000 fe1f 	bl	8016904 <__env_unlock>
 8015cc6:	1c68      	adds	r0, r5, #1
 8015cc8:	e7dd      	b.n	8015c86 <_findenv_r+0x2e>
 8015cca:	bf00      	nop
 8015ccc:	20000230 	.word	0x20000230

08015cd0 <_getenv_r>:
 8015cd0:	b507      	push	{r0, r1, r2, lr}
 8015cd2:	aa01      	add	r2, sp, #4
 8015cd4:	f7ff ffc0 	bl	8015c58 <_findenv_r>
 8015cd8:	b003      	add	sp, #12
 8015cda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015ce0 <__gettzinfo>:
 8015ce0:	4800      	ldr	r0, [pc, #0]	; (8015ce4 <__gettzinfo+0x4>)
 8015ce2:	4770      	bx	lr
 8015ce4:	20000320 	.word	0x20000320

08015ce8 <_lseek_r>:
 8015ce8:	b538      	push	{r3, r4, r5, lr}
 8015cea:	4d07      	ldr	r5, [pc, #28]	; (8015d08 <_lseek_r+0x20>)
 8015cec:	4604      	mov	r4, r0
 8015cee:	4608      	mov	r0, r1
 8015cf0:	4611      	mov	r1, r2
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	602a      	str	r2, [r5, #0]
 8015cf6:	461a      	mov	r2, r3
 8015cf8:	f7ed fa86 	bl	8003208 <_lseek>
 8015cfc:	1c43      	adds	r3, r0, #1
 8015cfe:	d102      	bne.n	8015d06 <_lseek_r+0x1e>
 8015d00:	682b      	ldr	r3, [r5, #0]
 8015d02:	b103      	cbz	r3, 8015d06 <_lseek_r+0x1e>
 8015d04:	6023      	str	r3, [r4, #0]
 8015d06:	bd38      	pop	{r3, r4, r5, pc}
 8015d08:	2000e8d8 	.word	0x2000e8d8

08015d0c <__malloc_lock>:
 8015d0c:	4801      	ldr	r0, [pc, #4]	; (8015d14 <__malloc_lock+0x8>)
 8015d0e:	f7fe bef9 	b.w	8014b04 <__retarget_lock_acquire_recursive>
 8015d12:	bf00      	nop
 8015d14:	2000e8c9 	.word	0x2000e8c9

08015d18 <__malloc_unlock>:
 8015d18:	4801      	ldr	r0, [pc, #4]	; (8015d20 <__malloc_unlock+0x8>)
 8015d1a:	f7fe bef5 	b.w	8014b08 <__retarget_lock_release_recursive>
 8015d1e:	bf00      	nop
 8015d20:	2000e8c9 	.word	0x2000e8c9

08015d24 <__ssputs_r>:
 8015d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d28:	688e      	ldr	r6, [r1, #8]
 8015d2a:	429e      	cmp	r6, r3
 8015d2c:	4682      	mov	sl, r0
 8015d2e:	460c      	mov	r4, r1
 8015d30:	4690      	mov	r8, r2
 8015d32:	461f      	mov	r7, r3
 8015d34:	d838      	bhi.n	8015da8 <__ssputs_r+0x84>
 8015d36:	898a      	ldrh	r2, [r1, #12]
 8015d38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015d3c:	d032      	beq.n	8015da4 <__ssputs_r+0x80>
 8015d3e:	6825      	ldr	r5, [r4, #0]
 8015d40:	6909      	ldr	r1, [r1, #16]
 8015d42:	eba5 0901 	sub.w	r9, r5, r1
 8015d46:	6965      	ldr	r5, [r4, #20]
 8015d48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015d4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015d50:	3301      	adds	r3, #1
 8015d52:	444b      	add	r3, r9
 8015d54:	106d      	asrs	r5, r5, #1
 8015d56:	429d      	cmp	r5, r3
 8015d58:	bf38      	it	cc
 8015d5a:	461d      	movcc	r5, r3
 8015d5c:	0553      	lsls	r3, r2, #21
 8015d5e:	d531      	bpl.n	8015dc4 <__ssputs_r+0xa0>
 8015d60:	4629      	mov	r1, r5
 8015d62:	f7ff f9d7 	bl	8015114 <_malloc_r>
 8015d66:	4606      	mov	r6, r0
 8015d68:	b950      	cbnz	r0, 8015d80 <__ssputs_r+0x5c>
 8015d6a:	230c      	movs	r3, #12
 8015d6c:	f8ca 3000 	str.w	r3, [sl]
 8015d70:	89a3      	ldrh	r3, [r4, #12]
 8015d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d76:	81a3      	strh	r3, [r4, #12]
 8015d78:	f04f 30ff 	mov.w	r0, #4294967295
 8015d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d80:	6921      	ldr	r1, [r4, #16]
 8015d82:	464a      	mov	r2, r9
 8015d84:	f7fe fed2 	bl	8014b2c <memcpy>
 8015d88:	89a3      	ldrh	r3, [r4, #12]
 8015d8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d92:	81a3      	strh	r3, [r4, #12]
 8015d94:	6126      	str	r6, [r4, #16]
 8015d96:	6165      	str	r5, [r4, #20]
 8015d98:	444e      	add	r6, r9
 8015d9a:	eba5 0509 	sub.w	r5, r5, r9
 8015d9e:	6026      	str	r6, [r4, #0]
 8015da0:	60a5      	str	r5, [r4, #8]
 8015da2:	463e      	mov	r6, r7
 8015da4:	42be      	cmp	r6, r7
 8015da6:	d900      	bls.n	8015daa <__ssputs_r+0x86>
 8015da8:	463e      	mov	r6, r7
 8015daa:	6820      	ldr	r0, [r4, #0]
 8015dac:	4632      	mov	r2, r6
 8015dae:	4641      	mov	r1, r8
 8015db0:	f000 fe14 	bl	80169dc <memmove>
 8015db4:	68a3      	ldr	r3, [r4, #8]
 8015db6:	1b9b      	subs	r3, r3, r6
 8015db8:	60a3      	str	r3, [r4, #8]
 8015dba:	6823      	ldr	r3, [r4, #0]
 8015dbc:	4433      	add	r3, r6
 8015dbe:	6023      	str	r3, [r4, #0]
 8015dc0:	2000      	movs	r0, #0
 8015dc2:	e7db      	b.n	8015d7c <__ssputs_r+0x58>
 8015dc4:	462a      	mov	r2, r5
 8015dc6:	f000 fe23 	bl	8016a10 <_realloc_r>
 8015dca:	4606      	mov	r6, r0
 8015dcc:	2800      	cmp	r0, #0
 8015dce:	d1e1      	bne.n	8015d94 <__ssputs_r+0x70>
 8015dd0:	6921      	ldr	r1, [r4, #16]
 8015dd2:	4650      	mov	r0, sl
 8015dd4:	f7ff f932 	bl	801503c <_free_r>
 8015dd8:	e7c7      	b.n	8015d6a <__ssputs_r+0x46>
	...

08015ddc <_svfiprintf_r>:
 8015ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015de0:	4698      	mov	r8, r3
 8015de2:	898b      	ldrh	r3, [r1, #12]
 8015de4:	061b      	lsls	r3, r3, #24
 8015de6:	b09d      	sub	sp, #116	; 0x74
 8015de8:	4607      	mov	r7, r0
 8015dea:	460d      	mov	r5, r1
 8015dec:	4614      	mov	r4, r2
 8015dee:	d50e      	bpl.n	8015e0e <_svfiprintf_r+0x32>
 8015df0:	690b      	ldr	r3, [r1, #16]
 8015df2:	b963      	cbnz	r3, 8015e0e <_svfiprintf_r+0x32>
 8015df4:	2140      	movs	r1, #64	; 0x40
 8015df6:	f7ff f98d 	bl	8015114 <_malloc_r>
 8015dfa:	6028      	str	r0, [r5, #0]
 8015dfc:	6128      	str	r0, [r5, #16]
 8015dfe:	b920      	cbnz	r0, 8015e0a <_svfiprintf_r+0x2e>
 8015e00:	230c      	movs	r3, #12
 8015e02:	603b      	str	r3, [r7, #0]
 8015e04:	f04f 30ff 	mov.w	r0, #4294967295
 8015e08:	e0d1      	b.n	8015fae <_svfiprintf_r+0x1d2>
 8015e0a:	2340      	movs	r3, #64	; 0x40
 8015e0c:	616b      	str	r3, [r5, #20]
 8015e0e:	2300      	movs	r3, #0
 8015e10:	9309      	str	r3, [sp, #36]	; 0x24
 8015e12:	2320      	movs	r3, #32
 8015e14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015e18:	f8cd 800c 	str.w	r8, [sp, #12]
 8015e1c:	2330      	movs	r3, #48	; 0x30
 8015e1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015fc8 <_svfiprintf_r+0x1ec>
 8015e22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015e26:	f04f 0901 	mov.w	r9, #1
 8015e2a:	4623      	mov	r3, r4
 8015e2c:	469a      	mov	sl, r3
 8015e2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e32:	b10a      	cbz	r2, 8015e38 <_svfiprintf_r+0x5c>
 8015e34:	2a25      	cmp	r2, #37	; 0x25
 8015e36:	d1f9      	bne.n	8015e2c <_svfiprintf_r+0x50>
 8015e38:	ebba 0b04 	subs.w	fp, sl, r4
 8015e3c:	d00b      	beq.n	8015e56 <_svfiprintf_r+0x7a>
 8015e3e:	465b      	mov	r3, fp
 8015e40:	4622      	mov	r2, r4
 8015e42:	4629      	mov	r1, r5
 8015e44:	4638      	mov	r0, r7
 8015e46:	f7ff ff6d 	bl	8015d24 <__ssputs_r>
 8015e4a:	3001      	adds	r0, #1
 8015e4c:	f000 80aa 	beq.w	8015fa4 <_svfiprintf_r+0x1c8>
 8015e50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e52:	445a      	add	r2, fp
 8015e54:	9209      	str	r2, [sp, #36]	; 0x24
 8015e56:	f89a 3000 	ldrb.w	r3, [sl]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	f000 80a2 	beq.w	8015fa4 <_svfiprintf_r+0x1c8>
 8015e60:	2300      	movs	r3, #0
 8015e62:	f04f 32ff 	mov.w	r2, #4294967295
 8015e66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015e6a:	f10a 0a01 	add.w	sl, sl, #1
 8015e6e:	9304      	str	r3, [sp, #16]
 8015e70:	9307      	str	r3, [sp, #28]
 8015e72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015e76:	931a      	str	r3, [sp, #104]	; 0x68
 8015e78:	4654      	mov	r4, sl
 8015e7a:	2205      	movs	r2, #5
 8015e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e80:	4851      	ldr	r0, [pc, #324]	; (8015fc8 <_svfiprintf_r+0x1ec>)
 8015e82:	f7ea f9bd 	bl	8000200 <memchr>
 8015e86:	9a04      	ldr	r2, [sp, #16]
 8015e88:	b9d8      	cbnz	r0, 8015ec2 <_svfiprintf_r+0xe6>
 8015e8a:	06d0      	lsls	r0, r2, #27
 8015e8c:	bf44      	itt	mi
 8015e8e:	2320      	movmi	r3, #32
 8015e90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e94:	0711      	lsls	r1, r2, #28
 8015e96:	bf44      	itt	mi
 8015e98:	232b      	movmi	r3, #43	; 0x2b
 8015e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e9e:	f89a 3000 	ldrb.w	r3, [sl]
 8015ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8015ea4:	d015      	beq.n	8015ed2 <_svfiprintf_r+0xf6>
 8015ea6:	9a07      	ldr	r2, [sp, #28]
 8015ea8:	4654      	mov	r4, sl
 8015eaa:	2000      	movs	r0, #0
 8015eac:	f04f 0c0a 	mov.w	ip, #10
 8015eb0:	4621      	mov	r1, r4
 8015eb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015eb6:	3b30      	subs	r3, #48	; 0x30
 8015eb8:	2b09      	cmp	r3, #9
 8015eba:	d94e      	bls.n	8015f5a <_svfiprintf_r+0x17e>
 8015ebc:	b1b0      	cbz	r0, 8015eec <_svfiprintf_r+0x110>
 8015ebe:	9207      	str	r2, [sp, #28]
 8015ec0:	e014      	b.n	8015eec <_svfiprintf_r+0x110>
 8015ec2:	eba0 0308 	sub.w	r3, r0, r8
 8015ec6:	fa09 f303 	lsl.w	r3, r9, r3
 8015eca:	4313      	orrs	r3, r2
 8015ecc:	9304      	str	r3, [sp, #16]
 8015ece:	46a2      	mov	sl, r4
 8015ed0:	e7d2      	b.n	8015e78 <_svfiprintf_r+0x9c>
 8015ed2:	9b03      	ldr	r3, [sp, #12]
 8015ed4:	1d19      	adds	r1, r3, #4
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	9103      	str	r1, [sp, #12]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	bfbb      	ittet	lt
 8015ede:	425b      	neglt	r3, r3
 8015ee0:	f042 0202 	orrlt.w	r2, r2, #2
 8015ee4:	9307      	strge	r3, [sp, #28]
 8015ee6:	9307      	strlt	r3, [sp, #28]
 8015ee8:	bfb8      	it	lt
 8015eea:	9204      	strlt	r2, [sp, #16]
 8015eec:	7823      	ldrb	r3, [r4, #0]
 8015eee:	2b2e      	cmp	r3, #46	; 0x2e
 8015ef0:	d10c      	bne.n	8015f0c <_svfiprintf_r+0x130>
 8015ef2:	7863      	ldrb	r3, [r4, #1]
 8015ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8015ef6:	d135      	bne.n	8015f64 <_svfiprintf_r+0x188>
 8015ef8:	9b03      	ldr	r3, [sp, #12]
 8015efa:	1d1a      	adds	r2, r3, #4
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	9203      	str	r2, [sp, #12]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	bfb8      	it	lt
 8015f04:	f04f 33ff 	movlt.w	r3, #4294967295
 8015f08:	3402      	adds	r4, #2
 8015f0a:	9305      	str	r3, [sp, #20]
 8015f0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015fd8 <_svfiprintf_r+0x1fc>
 8015f10:	7821      	ldrb	r1, [r4, #0]
 8015f12:	2203      	movs	r2, #3
 8015f14:	4650      	mov	r0, sl
 8015f16:	f7ea f973 	bl	8000200 <memchr>
 8015f1a:	b140      	cbz	r0, 8015f2e <_svfiprintf_r+0x152>
 8015f1c:	2340      	movs	r3, #64	; 0x40
 8015f1e:	eba0 000a 	sub.w	r0, r0, sl
 8015f22:	fa03 f000 	lsl.w	r0, r3, r0
 8015f26:	9b04      	ldr	r3, [sp, #16]
 8015f28:	4303      	orrs	r3, r0
 8015f2a:	3401      	adds	r4, #1
 8015f2c:	9304      	str	r3, [sp, #16]
 8015f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f32:	4826      	ldr	r0, [pc, #152]	; (8015fcc <_svfiprintf_r+0x1f0>)
 8015f34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015f38:	2206      	movs	r2, #6
 8015f3a:	f7ea f961 	bl	8000200 <memchr>
 8015f3e:	2800      	cmp	r0, #0
 8015f40:	d038      	beq.n	8015fb4 <_svfiprintf_r+0x1d8>
 8015f42:	4b23      	ldr	r3, [pc, #140]	; (8015fd0 <_svfiprintf_r+0x1f4>)
 8015f44:	bb1b      	cbnz	r3, 8015f8e <_svfiprintf_r+0x1b2>
 8015f46:	9b03      	ldr	r3, [sp, #12]
 8015f48:	3307      	adds	r3, #7
 8015f4a:	f023 0307 	bic.w	r3, r3, #7
 8015f4e:	3308      	adds	r3, #8
 8015f50:	9303      	str	r3, [sp, #12]
 8015f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f54:	4433      	add	r3, r6
 8015f56:	9309      	str	r3, [sp, #36]	; 0x24
 8015f58:	e767      	b.n	8015e2a <_svfiprintf_r+0x4e>
 8015f5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8015f5e:	460c      	mov	r4, r1
 8015f60:	2001      	movs	r0, #1
 8015f62:	e7a5      	b.n	8015eb0 <_svfiprintf_r+0xd4>
 8015f64:	2300      	movs	r3, #0
 8015f66:	3401      	adds	r4, #1
 8015f68:	9305      	str	r3, [sp, #20]
 8015f6a:	4619      	mov	r1, r3
 8015f6c:	f04f 0c0a 	mov.w	ip, #10
 8015f70:	4620      	mov	r0, r4
 8015f72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015f76:	3a30      	subs	r2, #48	; 0x30
 8015f78:	2a09      	cmp	r2, #9
 8015f7a:	d903      	bls.n	8015f84 <_svfiprintf_r+0x1a8>
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d0c5      	beq.n	8015f0c <_svfiprintf_r+0x130>
 8015f80:	9105      	str	r1, [sp, #20]
 8015f82:	e7c3      	b.n	8015f0c <_svfiprintf_r+0x130>
 8015f84:	fb0c 2101 	mla	r1, ip, r1, r2
 8015f88:	4604      	mov	r4, r0
 8015f8a:	2301      	movs	r3, #1
 8015f8c:	e7f0      	b.n	8015f70 <_svfiprintf_r+0x194>
 8015f8e:	ab03      	add	r3, sp, #12
 8015f90:	9300      	str	r3, [sp, #0]
 8015f92:	462a      	mov	r2, r5
 8015f94:	4b0f      	ldr	r3, [pc, #60]	; (8015fd4 <_svfiprintf_r+0x1f8>)
 8015f96:	a904      	add	r1, sp, #16
 8015f98:	4638      	mov	r0, r7
 8015f9a:	f3af 8000 	nop.w
 8015f9e:	1c42      	adds	r2, r0, #1
 8015fa0:	4606      	mov	r6, r0
 8015fa2:	d1d6      	bne.n	8015f52 <_svfiprintf_r+0x176>
 8015fa4:	89ab      	ldrh	r3, [r5, #12]
 8015fa6:	065b      	lsls	r3, r3, #25
 8015fa8:	f53f af2c 	bmi.w	8015e04 <_svfiprintf_r+0x28>
 8015fac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015fae:	b01d      	add	sp, #116	; 0x74
 8015fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fb4:	ab03      	add	r3, sp, #12
 8015fb6:	9300      	str	r3, [sp, #0]
 8015fb8:	462a      	mov	r2, r5
 8015fba:	4b06      	ldr	r3, [pc, #24]	; (8015fd4 <_svfiprintf_r+0x1f8>)
 8015fbc:	a904      	add	r1, sp, #16
 8015fbe:	4638      	mov	r0, r7
 8015fc0:	f000 f9d4 	bl	801636c <_printf_i>
 8015fc4:	e7eb      	b.n	8015f9e <_svfiprintf_r+0x1c2>
 8015fc6:	bf00      	nop
 8015fc8:	08017e80 	.word	0x08017e80
 8015fcc:	08017e8a 	.word	0x08017e8a
 8015fd0:	00000000 	.word	0x00000000
 8015fd4:	08015d25 	.word	0x08015d25
 8015fd8:	08017e86 	.word	0x08017e86

08015fdc <__sfputc_r>:
 8015fdc:	6893      	ldr	r3, [r2, #8]
 8015fde:	3b01      	subs	r3, #1
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	b410      	push	{r4}
 8015fe4:	6093      	str	r3, [r2, #8]
 8015fe6:	da08      	bge.n	8015ffa <__sfputc_r+0x1e>
 8015fe8:	6994      	ldr	r4, [r2, #24]
 8015fea:	42a3      	cmp	r3, r4
 8015fec:	db01      	blt.n	8015ff2 <__sfputc_r+0x16>
 8015fee:	290a      	cmp	r1, #10
 8015ff0:	d103      	bne.n	8015ffa <__sfputc_r+0x1e>
 8015ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ff6:	f000 bbb7 	b.w	8016768 <__swbuf_r>
 8015ffa:	6813      	ldr	r3, [r2, #0]
 8015ffc:	1c58      	adds	r0, r3, #1
 8015ffe:	6010      	str	r0, [r2, #0]
 8016000:	7019      	strb	r1, [r3, #0]
 8016002:	4608      	mov	r0, r1
 8016004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016008:	4770      	bx	lr

0801600a <__sfputs_r>:
 801600a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801600c:	4606      	mov	r6, r0
 801600e:	460f      	mov	r7, r1
 8016010:	4614      	mov	r4, r2
 8016012:	18d5      	adds	r5, r2, r3
 8016014:	42ac      	cmp	r4, r5
 8016016:	d101      	bne.n	801601c <__sfputs_r+0x12>
 8016018:	2000      	movs	r0, #0
 801601a:	e007      	b.n	801602c <__sfputs_r+0x22>
 801601c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016020:	463a      	mov	r2, r7
 8016022:	4630      	mov	r0, r6
 8016024:	f7ff ffda 	bl	8015fdc <__sfputc_r>
 8016028:	1c43      	adds	r3, r0, #1
 801602a:	d1f3      	bne.n	8016014 <__sfputs_r+0xa>
 801602c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016030 <_vfiprintf_r>:
 8016030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016034:	460d      	mov	r5, r1
 8016036:	b09d      	sub	sp, #116	; 0x74
 8016038:	4614      	mov	r4, r2
 801603a:	4698      	mov	r8, r3
 801603c:	4606      	mov	r6, r0
 801603e:	b118      	cbz	r0, 8016048 <_vfiprintf_r+0x18>
 8016040:	6983      	ldr	r3, [r0, #24]
 8016042:	b90b      	cbnz	r3, 8016048 <_vfiprintf_r+0x18>
 8016044:	f7fe fc9a 	bl	801497c <__sinit>
 8016048:	4b89      	ldr	r3, [pc, #548]	; (8016270 <_vfiprintf_r+0x240>)
 801604a:	429d      	cmp	r5, r3
 801604c:	d11b      	bne.n	8016086 <_vfiprintf_r+0x56>
 801604e:	6875      	ldr	r5, [r6, #4]
 8016050:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016052:	07d9      	lsls	r1, r3, #31
 8016054:	d405      	bmi.n	8016062 <_vfiprintf_r+0x32>
 8016056:	89ab      	ldrh	r3, [r5, #12]
 8016058:	059a      	lsls	r2, r3, #22
 801605a:	d402      	bmi.n	8016062 <_vfiprintf_r+0x32>
 801605c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801605e:	f7fe fd51 	bl	8014b04 <__retarget_lock_acquire_recursive>
 8016062:	89ab      	ldrh	r3, [r5, #12]
 8016064:	071b      	lsls	r3, r3, #28
 8016066:	d501      	bpl.n	801606c <_vfiprintf_r+0x3c>
 8016068:	692b      	ldr	r3, [r5, #16]
 801606a:	b9eb      	cbnz	r3, 80160a8 <_vfiprintf_r+0x78>
 801606c:	4629      	mov	r1, r5
 801606e:	4630      	mov	r0, r6
 8016070:	f000 fbcc 	bl	801680c <__swsetup_r>
 8016074:	b1c0      	cbz	r0, 80160a8 <_vfiprintf_r+0x78>
 8016076:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016078:	07dc      	lsls	r4, r3, #31
 801607a:	d50e      	bpl.n	801609a <_vfiprintf_r+0x6a>
 801607c:	f04f 30ff 	mov.w	r0, #4294967295
 8016080:	b01d      	add	sp, #116	; 0x74
 8016082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016086:	4b7b      	ldr	r3, [pc, #492]	; (8016274 <_vfiprintf_r+0x244>)
 8016088:	429d      	cmp	r5, r3
 801608a:	d101      	bne.n	8016090 <_vfiprintf_r+0x60>
 801608c:	68b5      	ldr	r5, [r6, #8]
 801608e:	e7df      	b.n	8016050 <_vfiprintf_r+0x20>
 8016090:	4b79      	ldr	r3, [pc, #484]	; (8016278 <_vfiprintf_r+0x248>)
 8016092:	429d      	cmp	r5, r3
 8016094:	bf08      	it	eq
 8016096:	68f5      	ldreq	r5, [r6, #12]
 8016098:	e7da      	b.n	8016050 <_vfiprintf_r+0x20>
 801609a:	89ab      	ldrh	r3, [r5, #12]
 801609c:	0598      	lsls	r0, r3, #22
 801609e:	d4ed      	bmi.n	801607c <_vfiprintf_r+0x4c>
 80160a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80160a2:	f7fe fd31 	bl	8014b08 <__retarget_lock_release_recursive>
 80160a6:	e7e9      	b.n	801607c <_vfiprintf_r+0x4c>
 80160a8:	2300      	movs	r3, #0
 80160aa:	9309      	str	r3, [sp, #36]	; 0x24
 80160ac:	2320      	movs	r3, #32
 80160ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80160b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80160b6:	2330      	movs	r3, #48	; 0x30
 80160b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801627c <_vfiprintf_r+0x24c>
 80160bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80160c0:	f04f 0901 	mov.w	r9, #1
 80160c4:	4623      	mov	r3, r4
 80160c6:	469a      	mov	sl, r3
 80160c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80160cc:	b10a      	cbz	r2, 80160d2 <_vfiprintf_r+0xa2>
 80160ce:	2a25      	cmp	r2, #37	; 0x25
 80160d0:	d1f9      	bne.n	80160c6 <_vfiprintf_r+0x96>
 80160d2:	ebba 0b04 	subs.w	fp, sl, r4
 80160d6:	d00b      	beq.n	80160f0 <_vfiprintf_r+0xc0>
 80160d8:	465b      	mov	r3, fp
 80160da:	4622      	mov	r2, r4
 80160dc:	4629      	mov	r1, r5
 80160de:	4630      	mov	r0, r6
 80160e0:	f7ff ff93 	bl	801600a <__sfputs_r>
 80160e4:	3001      	adds	r0, #1
 80160e6:	f000 80aa 	beq.w	801623e <_vfiprintf_r+0x20e>
 80160ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80160ec:	445a      	add	r2, fp
 80160ee:	9209      	str	r2, [sp, #36]	; 0x24
 80160f0:	f89a 3000 	ldrb.w	r3, [sl]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	f000 80a2 	beq.w	801623e <_vfiprintf_r+0x20e>
 80160fa:	2300      	movs	r3, #0
 80160fc:	f04f 32ff 	mov.w	r2, #4294967295
 8016100:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016104:	f10a 0a01 	add.w	sl, sl, #1
 8016108:	9304      	str	r3, [sp, #16]
 801610a:	9307      	str	r3, [sp, #28]
 801610c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016110:	931a      	str	r3, [sp, #104]	; 0x68
 8016112:	4654      	mov	r4, sl
 8016114:	2205      	movs	r2, #5
 8016116:	f814 1b01 	ldrb.w	r1, [r4], #1
 801611a:	4858      	ldr	r0, [pc, #352]	; (801627c <_vfiprintf_r+0x24c>)
 801611c:	f7ea f870 	bl	8000200 <memchr>
 8016120:	9a04      	ldr	r2, [sp, #16]
 8016122:	b9d8      	cbnz	r0, 801615c <_vfiprintf_r+0x12c>
 8016124:	06d1      	lsls	r1, r2, #27
 8016126:	bf44      	itt	mi
 8016128:	2320      	movmi	r3, #32
 801612a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801612e:	0713      	lsls	r3, r2, #28
 8016130:	bf44      	itt	mi
 8016132:	232b      	movmi	r3, #43	; 0x2b
 8016134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016138:	f89a 3000 	ldrb.w	r3, [sl]
 801613c:	2b2a      	cmp	r3, #42	; 0x2a
 801613e:	d015      	beq.n	801616c <_vfiprintf_r+0x13c>
 8016140:	9a07      	ldr	r2, [sp, #28]
 8016142:	4654      	mov	r4, sl
 8016144:	2000      	movs	r0, #0
 8016146:	f04f 0c0a 	mov.w	ip, #10
 801614a:	4621      	mov	r1, r4
 801614c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016150:	3b30      	subs	r3, #48	; 0x30
 8016152:	2b09      	cmp	r3, #9
 8016154:	d94e      	bls.n	80161f4 <_vfiprintf_r+0x1c4>
 8016156:	b1b0      	cbz	r0, 8016186 <_vfiprintf_r+0x156>
 8016158:	9207      	str	r2, [sp, #28]
 801615a:	e014      	b.n	8016186 <_vfiprintf_r+0x156>
 801615c:	eba0 0308 	sub.w	r3, r0, r8
 8016160:	fa09 f303 	lsl.w	r3, r9, r3
 8016164:	4313      	orrs	r3, r2
 8016166:	9304      	str	r3, [sp, #16]
 8016168:	46a2      	mov	sl, r4
 801616a:	e7d2      	b.n	8016112 <_vfiprintf_r+0xe2>
 801616c:	9b03      	ldr	r3, [sp, #12]
 801616e:	1d19      	adds	r1, r3, #4
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	9103      	str	r1, [sp, #12]
 8016174:	2b00      	cmp	r3, #0
 8016176:	bfbb      	ittet	lt
 8016178:	425b      	neglt	r3, r3
 801617a:	f042 0202 	orrlt.w	r2, r2, #2
 801617e:	9307      	strge	r3, [sp, #28]
 8016180:	9307      	strlt	r3, [sp, #28]
 8016182:	bfb8      	it	lt
 8016184:	9204      	strlt	r2, [sp, #16]
 8016186:	7823      	ldrb	r3, [r4, #0]
 8016188:	2b2e      	cmp	r3, #46	; 0x2e
 801618a:	d10c      	bne.n	80161a6 <_vfiprintf_r+0x176>
 801618c:	7863      	ldrb	r3, [r4, #1]
 801618e:	2b2a      	cmp	r3, #42	; 0x2a
 8016190:	d135      	bne.n	80161fe <_vfiprintf_r+0x1ce>
 8016192:	9b03      	ldr	r3, [sp, #12]
 8016194:	1d1a      	adds	r2, r3, #4
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	9203      	str	r2, [sp, #12]
 801619a:	2b00      	cmp	r3, #0
 801619c:	bfb8      	it	lt
 801619e:	f04f 33ff 	movlt.w	r3, #4294967295
 80161a2:	3402      	adds	r4, #2
 80161a4:	9305      	str	r3, [sp, #20]
 80161a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801628c <_vfiprintf_r+0x25c>
 80161aa:	7821      	ldrb	r1, [r4, #0]
 80161ac:	2203      	movs	r2, #3
 80161ae:	4650      	mov	r0, sl
 80161b0:	f7ea f826 	bl	8000200 <memchr>
 80161b4:	b140      	cbz	r0, 80161c8 <_vfiprintf_r+0x198>
 80161b6:	2340      	movs	r3, #64	; 0x40
 80161b8:	eba0 000a 	sub.w	r0, r0, sl
 80161bc:	fa03 f000 	lsl.w	r0, r3, r0
 80161c0:	9b04      	ldr	r3, [sp, #16]
 80161c2:	4303      	orrs	r3, r0
 80161c4:	3401      	adds	r4, #1
 80161c6:	9304      	str	r3, [sp, #16]
 80161c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161cc:	482c      	ldr	r0, [pc, #176]	; (8016280 <_vfiprintf_r+0x250>)
 80161ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80161d2:	2206      	movs	r2, #6
 80161d4:	f7ea f814 	bl	8000200 <memchr>
 80161d8:	2800      	cmp	r0, #0
 80161da:	d03f      	beq.n	801625c <_vfiprintf_r+0x22c>
 80161dc:	4b29      	ldr	r3, [pc, #164]	; (8016284 <_vfiprintf_r+0x254>)
 80161de:	bb1b      	cbnz	r3, 8016228 <_vfiprintf_r+0x1f8>
 80161e0:	9b03      	ldr	r3, [sp, #12]
 80161e2:	3307      	adds	r3, #7
 80161e4:	f023 0307 	bic.w	r3, r3, #7
 80161e8:	3308      	adds	r3, #8
 80161ea:	9303      	str	r3, [sp, #12]
 80161ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161ee:	443b      	add	r3, r7
 80161f0:	9309      	str	r3, [sp, #36]	; 0x24
 80161f2:	e767      	b.n	80160c4 <_vfiprintf_r+0x94>
 80161f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80161f8:	460c      	mov	r4, r1
 80161fa:	2001      	movs	r0, #1
 80161fc:	e7a5      	b.n	801614a <_vfiprintf_r+0x11a>
 80161fe:	2300      	movs	r3, #0
 8016200:	3401      	adds	r4, #1
 8016202:	9305      	str	r3, [sp, #20]
 8016204:	4619      	mov	r1, r3
 8016206:	f04f 0c0a 	mov.w	ip, #10
 801620a:	4620      	mov	r0, r4
 801620c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016210:	3a30      	subs	r2, #48	; 0x30
 8016212:	2a09      	cmp	r2, #9
 8016214:	d903      	bls.n	801621e <_vfiprintf_r+0x1ee>
 8016216:	2b00      	cmp	r3, #0
 8016218:	d0c5      	beq.n	80161a6 <_vfiprintf_r+0x176>
 801621a:	9105      	str	r1, [sp, #20]
 801621c:	e7c3      	b.n	80161a6 <_vfiprintf_r+0x176>
 801621e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016222:	4604      	mov	r4, r0
 8016224:	2301      	movs	r3, #1
 8016226:	e7f0      	b.n	801620a <_vfiprintf_r+0x1da>
 8016228:	ab03      	add	r3, sp, #12
 801622a:	9300      	str	r3, [sp, #0]
 801622c:	462a      	mov	r2, r5
 801622e:	4b16      	ldr	r3, [pc, #88]	; (8016288 <_vfiprintf_r+0x258>)
 8016230:	a904      	add	r1, sp, #16
 8016232:	4630      	mov	r0, r6
 8016234:	f3af 8000 	nop.w
 8016238:	4607      	mov	r7, r0
 801623a:	1c78      	adds	r0, r7, #1
 801623c:	d1d6      	bne.n	80161ec <_vfiprintf_r+0x1bc>
 801623e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016240:	07d9      	lsls	r1, r3, #31
 8016242:	d405      	bmi.n	8016250 <_vfiprintf_r+0x220>
 8016244:	89ab      	ldrh	r3, [r5, #12]
 8016246:	059a      	lsls	r2, r3, #22
 8016248:	d402      	bmi.n	8016250 <_vfiprintf_r+0x220>
 801624a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801624c:	f7fe fc5c 	bl	8014b08 <__retarget_lock_release_recursive>
 8016250:	89ab      	ldrh	r3, [r5, #12]
 8016252:	065b      	lsls	r3, r3, #25
 8016254:	f53f af12 	bmi.w	801607c <_vfiprintf_r+0x4c>
 8016258:	9809      	ldr	r0, [sp, #36]	; 0x24
 801625a:	e711      	b.n	8016080 <_vfiprintf_r+0x50>
 801625c:	ab03      	add	r3, sp, #12
 801625e:	9300      	str	r3, [sp, #0]
 8016260:	462a      	mov	r2, r5
 8016262:	4b09      	ldr	r3, [pc, #36]	; (8016288 <_vfiprintf_r+0x258>)
 8016264:	a904      	add	r1, sp, #16
 8016266:	4630      	mov	r0, r6
 8016268:	f000 f880 	bl	801636c <_printf_i>
 801626c:	e7e4      	b.n	8016238 <_vfiprintf_r+0x208>
 801626e:	bf00      	nop
 8016270:	08017b8c 	.word	0x08017b8c
 8016274:	08017bac 	.word	0x08017bac
 8016278:	08017b6c 	.word	0x08017b6c
 801627c:	08017e80 	.word	0x08017e80
 8016280:	08017e8a 	.word	0x08017e8a
 8016284:	00000000 	.word	0x00000000
 8016288:	0801600b 	.word	0x0801600b
 801628c:	08017e86 	.word	0x08017e86

08016290 <_printf_common>:
 8016290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016294:	4616      	mov	r6, r2
 8016296:	4699      	mov	r9, r3
 8016298:	688a      	ldr	r2, [r1, #8]
 801629a:	690b      	ldr	r3, [r1, #16]
 801629c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80162a0:	4293      	cmp	r3, r2
 80162a2:	bfb8      	it	lt
 80162a4:	4613      	movlt	r3, r2
 80162a6:	6033      	str	r3, [r6, #0]
 80162a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80162ac:	4607      	mov	r7, r0
 80162ae:	460c      	mov	r4, r1
 80162b0:	b10a      	cbz	r2, 80162b6 <_printf_common+0x26>
 80162b2:	3301      	adds	r3, #1
 80162b4:	6033      	str	r3, [r6, #0]
 80162b6:	6823      	ldr	r3, [r4, #0]
 80162b8:	0699      	lsls	r1, r3, #26
 80162ba:	bf42      	ittt	mi
 80162bc:	6833      	ldrmi	r3, [r6, #0]
 80162be:	3302      	addmi	r3, #2
 80162c0:	6033      	strmi	r3, [r6, #0]
 80162c2:	6825      	ldr	r5, [r4, #0]
 80162c4:	f015 0506 	ands.w	r5, r5, #6
 80162c8:	d106      	bne.n	80162d8 <_printf_common+0x48>
 80162ca:	f104 0a19 	add.w	sl, r4, #25
 80162ce:	68e3      	ldr	r3, [r4, #12]
 80162d0:	6832      	ldr	r2, [r6, #0]
 80162d2:	1a9b      	subs	r3, r3, r2
 80162d4:	42ab      	cmp	r3, r5
 80162d6:	dc26      	bgt.n	8016326 <_printf_common+0x96>
 80162d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80162dc:	1e13      	subs	r3, r2, #0
 80162de:	6822      	ldr	r2, [r4, #0]
 80162e0:	bf18      	it	ne
 80162e2:	2301      	movne	r3, #1
 80162e4:	0692      	lsls	r2, r2, #26
 80162e6:	d42b      	bmi.n	8016340 <_printf_common+0xb0>
 80162e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80162ec:	4649      	mov	r1, r9
 80162ee:	4638      	mov	r0, r7
 80162f0:	47c0      	blx	r8
 80162f2:	3001      	adds	r0, #1
 80162f4:	d01e      	beq.n	8016334 <_printf_common+0xa4>
 80162f6:	6823      	ldr	r3, [r4, #0]
 80162f8:	68e5      	ldr	r5, [r4, #12]
 80162fa:	6832      	ldr	r2, [r6, #0]
 80162fc:	f003 0306 	and.w	r3, r3, #6
 8016300:	2b04      	cmp	r3, #4
 8016302:	bf08      	it	eq
 8016304:	1aad      	subeq	r5, r5, r2
 8016306:	68a3      	ldr	r3, [r4, #8]
 8016308:	6922      	ldr	r2, [r4, #16]
 801630a:	bf0c      	ite	eq
 801630c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016310:	2500      	movne	r5, #0
 8016312:	4293      	cmp	r3, r2
 8016314:	bfc4      	itt	gt
 8016316:	1a9b      	subgt	r3, r3, r2
 8016318:	18ed      	addgt	r5, r5, r3
 801631a:	2600      	movs	r6, #0
 801631c:	341a      	adds	r4, #26
 801631e:	42b5      	cmp	r5, r6
 8016320:	d11a      	bne.n	8016358 <_printf_common+0xc8>
 8016322:	2000      	movs	r0, #0
 8016324:	e008      	b.n	8016338 <_printf_common+0xa8>
 8016326:	2301      	movs	r3, #1
 8016328:	4652      	mov	r2, sl
 801632a:	4649      	mov	r1, r9
 801632c:	4638      	mov	r0, r7
 801632e:	47c0      	blx	r8
 8016330:	3001      	adds	r0, #1
 8016332:	d103      	bne.n	801633c <_printf_common+0xac>
 8016334:	f04f 30ff 	mov.w	r0, #4294967295
 8016338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801633c:	3501      	adds	r5, #1
 801633e:	e7c6      	b.n	80162ce <_printf_common+0x3e>
 8016340:	18e1      	adds	r1, r4, r3
 8016342:	1c5a      	adds	r2, r3, #1
 8016344:	2030      	movs	r0, #48	; 0x30
 8016346:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801634a:	4422      	add	r2, r4
 801634c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016350:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016354:	3302      	adds	r3, #2
 8016356:	e7c7      	b.n	80162e8 <_printf_common+0x58>
 8016358:	2301      	movs	r3, #1
 801635a:	4622      	mov	r2, r4
 801635c:	4649      	mov	r1, r9
 801635e:	4638      	mov	r0, r7
 8016360:	47c0      	blx	r8
 8016362:	3001      	adds	r0, #1
 8016364:	d0e6      	beq.n	8016334 <_printf_common+0xa4>
 8016366:	3601      	adds	r6, #1
 8016368:	e7d9      	b.n	801631e <_printf_common+0x8e>
	...

0801636c <_printf_i>:
 801636c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016370:	7e0f      	ldrb	r7, [r1, #24]
 8016372:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016374:	2f78      	cmp	r7, #120	; 0x78
 8016376:	4691      	mov	r9, r2
 8016378:	4680      	mov	r8, r0
 801637a:	460c      	mov	r4, r1
 801637c:	469a      	mov	sl, r3
 801637e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016382:	d807      	bhi.n	8016394 <_printf_i+0x28>
 8016384:	2f62      	cmp	r7, #98	; 0x62
 8016386:	d80a      	bhi.n	801639e <_printf_i+0x32>
 8016388:	2f00      	cmp	r7, #0
 801638a:	f000 80d8 	beq.w	801653e <_printf_i+0x1d2>
 801638e:	2f58      	cmp	r7, #88	; 0x58
 8016390:	f000 80a3 	beq.w	80164da <_printf_i+0x16e>
 8016394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016398:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801639c:	e03a      	b.n	8016414 <_printf_i+0xa8>
 801639e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80163a2:	2b15      	cmp	r3, #21
 80163a4:	d8f6      	bhi.n	8016394 <_printf_i+0x28>
 80163a6:	a101      	add	r1, pc, #4	; (adr r1, 80163ac <_printf_i+0x40>)
 80163a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80163ac:	08016405 	.word	0x08016405
 80163b0:	08016419 	.word	0x08016419
 80163b4:	08016395 	.word	0x08016395
 80163b8:	08016395 	.word	0x08016395
 80163bc:	08016395 	.word	0x08016395
 80163c0:	08016395 	.word	0x08016395
 80163c4:	08016419 	.word	0x08016419
 80163c8:	08016395 	.word	0x08016395
 80163cc:	08016395 	.word	0x08016395
 80163d0:	08016395 	.word	0x08016395
 80163d4:	08016395 	.word	0x08016395
 80163d8:	08016525 	.word	0x08016525
 80163dc:	08016449 	.word	0x08016449
 80163e0:	08016507 	.word	0x08016507
 80163e4:	08016395 	.word	0x08016395
 80163e8:	08016395 	.word	0x08016395
 80163ec:	08016547 	.word	0x08016547
 80163f0:	08016395 	.word	0x08016395
 80163f4:	08016449 	.word	0x08016449
 80163f8:	08016395 	.word	0x08016395
 80163fc:	08016395 	.word	0x08016395
 8016400:	0801650f 	.word	0x0801650f
 8016404:	682b      	ldr	r3, [r5, #0]
 8016406:	1d1a      	adds	r2, r3, #4
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	602a      	str	r2, [r5, #0]
 801640c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016414:	2301      	movs	r3, #1
 8016416:	e0a3      	b.n	8016560 <_printf_i+0x1f4>
 8016418:	6820      	ldr	r0, [r4, #0]
 801641a:	6829      	ldr	r1, [r5, #0]
 801641c:	0606      	lsls	r6, r0, #24
 801641e:	f101 0304 	add.w	r3, r1, #4
 8016422:	d50a      	bpl.n	801643a <_printf_i+0xce>
 8016424:	680e      	ldr	r6, [r1, #0]
 8016426:	602b      	str	r3, [r5, #0]
 8016428:	2e00      	cmp	r6, #0
 801642a:	da03      	bge.n	8016434 <_printf_i+0xc8>
 801642c:	232d      	movs	r3, #45	; 0x2d
 801642e:	4276      	negs	r6, r6
 8016430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016434:	485e      	ldr	r0, [pc, #376]	; (80165b0 <_printf_i+0x244>)
 8016436:	230a      	movs	r3, #10
 8016438:	e019      	b.n	801646e <_printf_i+0x102>
 801643a:	680e      	ldr	r6, [r1, #0]
 801643c:	602b      	str	r3, [r5, #0]
 801643e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016442:	bf18      	it	ne
 8016444:	b236      	sxthne	r6, r6
 8016446:	e7ef      	b.n	8016428 <_printf_i+0xbc>
 8016448:	682b      	ldr	r3, [r5, #0]
 801644a:	6820      	ldr	r0, [r4, #0]
 801644c:	1d19      	adds	r1, r3, #4
 801644e:	6029      	str	r1, [r5, #0]
 8016450:	0601      	lsls	r1, r0, #24
 8016452:	d501      	bpl.n	8016458 <_printf_i+0xec>
 8016454:	681e      	ldr	r6, [r3, #0]
 8016456:	e002      	b.n	801645e <_printf_i+0xf2>
 8016458:	0646      	lsls	r6, r0, #25
 801645a:	d5fb      	bpl.n	8016454 <_printf_i+0xe8>
 801645c:	881e      	ldrh	r6, [r3, #0]
 801645e:	4854      	ldr	r0, [pc, #336]	; (80165b0 <_printf_i+0x244>)
 8016460:	2f6f      	cmp	r7, #111	; 0x6f
 8016462:	bf0c      	ite	eq
 8016464:	2308      	moveq	r3, #8
 8016466:	230a      	movne	r3, #10
 8016468:	2100      	movs	r1, #0
 801646a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801646e:	6865      	ldr	r5, [r4, #4]
 8016470:	60a5      	str	r5, [r4, #8]
 8016472:	2d00      	cmp	r5, #0
 8016474:	bfa2      	ittt	ge
 8016476:	6821      	ldrge	r1, [r4, #0]
 8016478:	f021 0104 	bicge.w	r1, r1, #4
 801647c:	6021      	strge	r1, [r4, #0]
 801647e:	b90e      	cbnz	r6, 8016484 <_printf_i+0x118>
 8016480:	2d00      	cmp	r5, #0
 8016482:	d04d      	beq.n	8016520 <_printf_i+0x1b4>
 8016484:	4615      	mov	r5, r2
 8016486:	fbb6 f1f3 	udiv	r1, r6, r3
 801648a:	fb03 6711 	mls	r7, r3, r1, r6
 801648e:	5dc7      	ldrb	r7, [r0, r7]
 8016490:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016494:	4637      	mov	r7, r6
 8016496:	42bb      	cmp	r3, r7
 8016498:	460e      	mov	r6, r1
 801649a:	d9f4      	bls.n	8016486 <_printf_i+0x11a>
 801649c:	2b08      	cmp	r3, #8
 801649e:	d10b      	bne.n	80164b8 <_printf_i+0x14c>
 80164a0:	6823      	ldr	r3, [r4, #0]
 80164a2:	07de      	lsls	r6, r3, #31
 80164a4:	d508      	bpl.n	80164b8 <_printf_i+0x14c>
 80164a6:	6923      	ldr	r3, [r4, #16]
 80164a8:	6861      	ldr	r1, [r4, #4]
 80164aa:	4299      	cmp	r1, r3
 80164ac:	bfde      	ittt	le
 80164ae:	2330      	movle	r3, #48	; 0x30
 80164b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80164b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80164b8:	1b52      	subs	r2, r2, r5
 80164ba:	6122      	str	r2, [r4, #16]
 80164bc:	f8cd a000 	str.w	sl, [sp]
 80164c0:	464b      	mov	r3, r9
 80164c2:	aa03      	add	r2, sp, #12
 80164c4:	4621      	mov	r1, r4
 80164c6:	4640      	mov	r0, r8
 80164c8:	f7ff fee2 	bl	8016290 <_printf_common>
 80164cc:	3001      	adds	r0, #1
 80164ce:	d14c      	bne.n	801656a <_printf_i+0x1fe>
 80164d0:	f04f 30ff 	mov.w	r0, #4294967295
 80164d4:	b004      	add	sp, #16
 80164d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164da:	4835      	ldr	r0, [pc, #212]	; (80165b0 <_printf_i+0x244>)
 80164dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80164e0:	6829      	ldr	r1, [r5, #0]
 80164e2:	6823      	ldr	r3, [r4, #0]
 80164e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80164e8:	6029      	str	r1, [r5, #0]
 80164ea:	061d      	lsls	r5, r3, #24
 80164ec:	d514      	bpl.n	8016518 <_printf_i+0x1ac>
 80164ee:	07df      	lsls	r7, r3, #31
 80164f0:	bf44      	itt	mi
 80164f2:	f043 0320 	orrmi.w	r3, r3, #32
 80164f6:	6023      	strmi	r3, [r4, #0]
 80164f8:	b91e      	cbnz	r6, 8016502 <_printf_i+0x196>
 80164fa:	6823      	ldr	r3, [r4, #0]
 80164fc:	f023 0320 	bic.w	r3, r3, #32
 8016500:	6023      	str	r3, [r4, #0]
 8016502:	2310      	movs	r3, #16
 8016504:	e7b0      	b.n	8016468 <_printf_i+0xfc>
 8016506:	6823      	ldr	r3, [r4, #0]
 8016508:	f043 0320 	orr.w	r3, r3, #32
 801650c:	6023      	str	r3, [r4, #0]
 801650e:	2378      	movs	r3, #120	; 0x78
 8016510:	4828      	ldr	r0, [pc, #160]	; (80165b4 <_printf_i+0x248>)
 8016512:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016516:	e7e3      	b.n	80164e0 <_printf_i+0x174>
 8016518:	0659      	lsls	r1, r3, #25
 801651a:	bf48      	it	mi
 801651c:	b2b6      	uxthmi	r6, r6
 801651e:	e7e6      	b.n	80164ee <_printf_i+0x182>
 8016520:	4615      	mov	r5, r2
 8016522:	e7bb      	b.n	801649c <_printf_i+0x130>
 8016524:	682b      	ldr	r3, [r5, #0]
 8016526:	6826      	ldr	r6, [r4, #0]
 8016528:	6961      	ldr	r1, [r4, #20]
 801652a:	1d18      	adds	r0, r3, #4
 801652c:	6028      	str	r0, [r5, #0]
 801652e:	0635      	lsls	r5, r6, #24
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	d501      	bpl.n	8016538 <_printf_i+0x1cc>
 8016534:	6019      	str	r1, [r3, #0]
 8016536:	e002      	b.n	801653e <_printf_i+0x1d2>
 8016538:	0670      	lsls	r0, r6, #25
 801653a:	d5fb      	bpl.n	8016534 <_printf_i+0x1c8>
 801653c:	8019      	strh	r1, [r3, #0]
 801653e:	2300      	movs	r3, #0
 8016540:	6123      	str	r3, [r4, #16]
 8016542:	4615      	mov	r5, r2
 8016544:	e7ba      	b.n	80164bc <_printf_i+0x150>
 8016546:	682b      	ldr	r3, [r5, #0]
 8016548:	1d1a      	adds	r2, r3, #4
 801654a:	602a      	str	r2, [r5, #0]
 801654c:	681d      	ldr	r5, [r3, #0]
 801654e:	6862      	ldr	r2, [r4, #4]
 8016550:	2100      	movs	r1, #0
 8016552:	4628      	mov	r0, r5
 8016554:	f7e9 fe54 	bl	8000200 <memchr>
 8016558:	b108      	cbz	r0, 801655e <_printf_i+0x1f2>
 801655a:	1b40      	subs	r0, r0, r5
 801655c:	6060      	str	r0, [r4, #4]
 801655e:	6863      	ldr	r3, [r4, #4]
 8016560:	6123      	str	r3, [r4, #16]
 8016562:	2300      	movs	r3, #0
 8016564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016568:	e7a8      	b.n	80164bc <_printf_i+0x150>
 801656a:	6923      	ldr	r3, [r4, #16]
 801656c:	462a      	mov	r2, r5
 801656e:	4649      	mov	r1, r9
 8016570:	4640      	mov	r0, r8
 8016572:	47d0      	blx	sl
 8016574:	3001      	adds	r0, #1
 8016576:	d0ab      	beq.n	80164d0 <_printf_i+0x164>
 8016578:	6823      	ldr	r3, [r4, #0]
 801657a:	079b      	lsls	r3, r3, #30
 801657c:	d413      	bmi.n	80165a6 <_printf_i+0x23a>
 801657e:	68e0      	ldr	r0, [r4, #12]
 8016580:	9b03      	ldr	r3, [sp, #12]
 8016582:	4298      	cmp	r0, r3
 8016584:	bfb8      	it	lt
 8016586:	4618      	movlt	r0, r3
 8016588:	e7a4      	b.n	80164d4 <_printf_i+0x168>
 801658a:	2301      	movs	r3, #1
 801658c:	4632      	mov	r2, r6
 801658e:	4649      	mov	r1, r9
 8016590:	4640      	mov	r0, r8
 8016592:	47d0      	blx	sl
 8016594:	3001      	adds	r0, #1
 8016596:	d09b      	beq.n	80164d0 <_printf_i+0x164>
 8016598:	3501      	adds	r5, #1
 801659a:	68e3      	ldr	r3, [r4, #12]
 801659c:	9903      	ldr	r1, [sp, #12]
 801659e:	1a5b      	subs	r3, r3, r1
 80165a0:	42ab      	cmp	r3, r5
 80165a2:	dcf2      	bgt.n	801658a <_printf_i+0x21e>
 80165a4:	e7eb      	b.n	801657e <_printf_i+0x212>
 80165a6:	2500      	movs	r5, #0
 80165a8:	f104 0619 	add.w	r6, r4, #25
 80165ac:	e7f5      	b.n	801659a <_printf_i+0x22e>
 80165ae:	bf00      	nop
 80165b0:	08017e91 	.word	0x08017e91
 80165b4:	08017ea2 	.word	0x08017ea2

080165b8 <_read_r>:
 80165b8:	b538      	push	{r3, r4, r5, lr}
 80165ba:	4d07      	ldr	r5, [pc, #28]	; (80165d8 <_read_r+0x20>)
 80165bc:	4604      	mov	r4, r0
 80165be:	4608      	mov	r0, r1
 80165c0:	4611      	mov	r1, r2
 80165c2:	2200      	movs	r2, #0
 80165c4:	602a      	str	r2, [r5, #0]
 80165c6:	461a      	mov	r2, r3
 80165c8:	f7ec fdbe 	bl	8003148 <_read>
 80165cc:	1c43      	adds	r3, r0, #1
 80165ce:	d102      	bne.n	80165d6 <_read_r+0x1e>
 80165d0:	682b      	ldr	r3, [r5, #0]
 80165d2:	b103      	cbz	r3, 80165d6 <_read_r+0x1e>
 80165d4:	6023      	str	r3, [r4, #0]
 80165d6:	bd38      	pop	{r3, r4, r5, pc}
 80165d8:	2000e8d8 	.word	0x2000e8d8

080165dc <siscanf>:
 80165dc:	b40e      	push	{r1, r2, r3}
 80165de:	b510      	push	{r4, lr}
 80165e0:	b09f      	sub	sp, #124	; 0x7c
 80165e2:	ac21      	add	r4, sp, #132	; 0x84
 80165e4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80165e8:	f854 2b04 	ldr.w	r2, [r4], #4
 80165ec:	9201      	str	r2, [sp, #4]
 80165ee:	f8ad 101c 	strh.w	r1, [sp, #28]
 80165f2:	9004      	str	r0, [sp, #16]
 80165f4:	9008      	str	r0, [sp, #32]
 80165f6:	f7e9 fdf5 	bl	80001e4 <strlen>
 80165fa:	4b0c      	ldr	r3, [pc, #48]	; (801662c <siscanf+0x50>)
 80165fc:	9005      	str	r0, [sp, #20]
 80165fe:	9009      	str	r0, [sp, #36]	; 0x24
 8016600:	930d      	str	r3, [sp, #52]	; 0x34
 8016602:	480b      	ldr	r0, [pc, #44]	; (8016630 <siscanf+0x54>)
 8016604:	9a01      	ldr	r2, [sp, #4]
 8016606:	6800      	ldr	r0, [r0, #0]
 8016608:	9403      	str	r4, [sp, #12]
 801660a:	2300      	movs	r3, #0
 801660c:	9311      	str	r3, [sp, #68]	; 0x44
 801660e:	9316      	str	r3, [sp, #88]	; 0x58
 8016610:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016614:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016618:	a904      	add	r1, sp, #16
 801661a:	4623      	mov	r3, r4
 801661c:	f000 fa82 	bl	8016b24 <__ssvfiscanf_r>
 8016620:	b01f      	add	sp, #124	; 0x7c
 8016622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016626:	b003      	add	sp, #12
 8016628:	4770      	bx	lr
 801662a:	bf00      	nop
 801662c:	08015353 	.word	0x08015353
 8016630:	200002b4 	.word	0x200002b4

08016634 <strcpy>:
 8016634:	4603      	mov	r3, r0
 8016636:	f811 2b01 	ldrb.w	r2, [r1], #1
 801663a:	f803 2b01 	strb.w	r2, [r3], #1
 801663e:	2a00      	cmp	r2, #0
 8016640:	d1f9      	bne.n	8016636 <strcpy+0x2>
 8016642:	4770      	bx	lr

08016644 <strncmp>:
 8016644:	b510      	push	{r4, lr}
 8016646:	b17a      	cbz	r2, 8016668 <strncmp+0x24>
 8016648:	4603      	mov	r3, r0
 801664a:	3901      	subs	r1, #1
 801664c:	1884      	adds	r4, r0, r2
 801664e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016652:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016656:	4290      	cmp	r0, r2
 8016658:	d101      	bne.n	801665e <strncmp+0x1a>
 801665a:	42a3      	cmp	r3, r4
 801665c:	d101      	bne.n	8016662 <strncmp+0x1e>
 801665e:	1a80      	subs	r0, r0, r2
 8016660:	bd10      	pop	{r4, pc}
 8016662:	2800      	cmp	r0, #0
 8016664:	d1f3      	bne.n	801664e <strncmp+0xa>
 8016666:	e7fa      	b.n	801665e <strncmp+0x1a>
 8016668:	4610      	mov	r0, r2
 801666a:	e7f9      	b.n	8016660 <strncmp+0x1c>

0801666c <_strtoul_l.constprop.0>:
 801666c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016670:	4f36      	ldr	r7, [pc, #216]	; (801674c <_strtoul_l.constprop.0+0xe0>)
 8016672:	4686      	mov	lr, r0
 8016674:	460d      	mov	r5, r1
 8016676:	4628      	mov	r0, r5
 8016678:	f815 4b01 	ldrb.w	r4, [r5], #1
 801667c:	5de6      	ldrb	r6, [r4, r7]
 801667e:	f016 0608 	ands.w	r6, r6, #8
 8016682:	d1f8      	bne.n	8016676 <_strtoul_l.constprop.0+0xa>
 8016684:	2c2d      	cmp	r4, #45	; 0x2d
 8016686:	d12f      	bne.n	80166e8 <_strtoul_l.constprop.0+0x7c>
 8016688:	782c      	ldrb	r4, [r5, #0]
 801668a:	2601      	movs	r6, #1
 801668c:	1c85      	adds	r5, r0, #2
 801668e:	2b00      	cmp	r3, #0
 8016690:	d057      	beq.n	8016742 <_strtoul_l.constprop.0+0xd6>
 8016692:	2b10      	cmp	r3, #16
 8016694:	d109      	bne.n	80166aa <_strtoul_l.constprop.0+0x3e>
 8016696:	2c30      	cmp	r4, #48	; 0x30
 8016698:	d107      	bne.n	80166aa <_strtoul_l.constprop.0+0x3e>
 801669a:	7828      	ldrb	r0, [r5, #0]
 801669c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80166a0:	2858      	cmp	r0, #88	; 0x58
 80166a2:	d149      	bne.n	8016738 <_strtoul_l.constprop.0+0xcc>
 80166a4:	786c      	ldrb	r4, [r5, #1]
 80166a6:	2310      	movs	r3, #16
 80166a8:	3502      	adds	r5, #2
 80166aa:	f04f 38ff 	mov.w	r8, #4294967295
 80166ae:	2700      	movs	r7, #0
 80166b0:	fbb8 f8f3 	udiv	r8, r8, r3
 80166b4:	fb03 f908 	mul.w	r9, r3, r8
 80166b8:	ea6f 0909 	mvn.w	r9, r9
 80166bc:	4638      	mov	r0, r7
 80166be:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80166c2:	f1bc 0f09 	cmp.w	ip, #9
 80166c6:	d814      	bhi.n	80166f2 <_strtoul_l.constprop.0+0x86>
 80166c8:	4664      	mov	r4, ip
 80166ca:	42a3      	cmp	r3, r4
 80166cc:	dd22      	ble.n	8016714 <_strtoul_l.constprop.0+0xa8>
 80166ce:	2f00      	cmp	r7, #0
 80166d0:	db1d      	blt.n	801670e <_strtoul_l.constprop.0+0xa2>
 80166d2:	4580      	cmp	r8, r0
 80166d4:	d31b      	bcc.n	801670e <_strtoul_l.constprop.0+0xa2>
 80166d6:	d101      	bne.n	80166dc <_strtoul_l.constprop.0+0x70>
 80166d8:	45a1      	cmp	r9, r4
 80166da:	db18      	blt.n	801670e <_strtoul_l.constprop.0+0xa2>
 80166dc:	fb00 4003 	mla	r0, r0, r3, r4
 80166e0:	2701      	movs	r7, #1
 80166e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80166e6:	e7ea      	b.n	80166be <_strtoul_l.constprop.0+0x52>
 80166e8:	2c2b      	cmp	r4, #43	; 0x2b
 80166ea:	bf04      	itt	eq
 80166ec:	782c      	ldrbeq	r4, [r5, #0]
 80166ee:	1c85      	addeq	r5, r0, #2
 80166f0:	e7cd      	b.n	801668e <_strtoul_l.constprop.0+0x22>
 80166f2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80166f6:	f1bc 0f19 	cmp.w	ip, #25
 80166fa:	d801      	bhi.n	8016700 <_strtoul_l.constprop.0+0x94>
 80166fc:	3c37      	subs	r4, #55	; 0x37
 80166fe:	e7e4      	b.n	80166ca <_strtoul_l.constprop.0+0x5e>
 8016700:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8016704:	f1bc 0f19 	cmp.w	ip, #25
 8016708:	d804      	bhi.n	8016714 <_strtoul_l.constprop.0+0xa8>
 801670a:	3c57      	subs	r4, #87	; 0x57
 801670c:	e7dd      	b.n	80166ca <_strtoul_l.constprop.0+0x5e>
 801670e:	f04f 37ff 	mov.w	r7, #4294967295
 8016712:	e7e6      	b.n	80166e2 <_strtoul_l.constprop.0+0x76>
 8016714:	2f00      	cmp	r7, #0
 8016716:	da07      	bge.n	8016728 <_strtoul_l.constprop.0+0xbc>
 8016718:	2322      	movs	r3, #34	; 0x22
 801671a:	f8ce 3000 	str.w	r3, [lr]
 801671e:	f04f 30ff 	mov.w	r0, #4294967295
 8016722:	b932      	cbnz	r2, 8016732 <_strtoul_l.constprop.0+0xc6>
 8016724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016728:	b106      	cbz	r6, 801672c <_strtoul_l.constprop.0+0xc0>
 801672a:	4240      	negs	r0, r0
 801672c:	2a00      	cmp	r2, #0
 801672e:	d0f9      	beq.n	8016724 <_strtoul_l.constprop.0+0xb8>
 8016730:	b107      	cbz	r7, 8016734 <_strtoul_l.constprop.0+0xc8>
 8016732:	1e69      	subs	r1, r5, #1
 8016734:	6011      	str	r1, [r2, #0]
 8016736:	e7f5      	b.n	8016724 <_strtoul_l.constprop.0+0xb8>
 8016738:	2430      	movs	r4, #48	; 0x30
 801673a:	2b00      	cmp	r3, #0
 801673c:	d1b5      	bne.n	80166aa <_strtoul_l.constprop.0+0x3e>
 801673e:	2308      	movs	r3, #8
 8016740:	e7b3      	b.n	80166aa <_strtoul_l.constprop.0+0x3e>
 8016742:	2c30      	cmp	r4, #48	; 0x30
 8016744:	d0a9      	beq.n	801669a <_strtoul_l.constprop.0+0x2e>
 8016746:	230a      	movs	r3, #10
 8016748:	e7af      	b.n	80166aa <_strtoul_l.constprop.0+0x3e>
 801674a:	bf00      	nop
 801674c:	08017d1d 	.word	0x08017d1d

08016750 <_strtoul_r>:
 8016750:	f7ff bf8c 	b.w	801666c <_strtoul_l.constprop.0>

08016754 <strtoul>:
 8016754:	4613      	mov	r3, r2
 8016756:	460a      	mov	r2, r1
 8016758:	4601      	mov	r1, r0
 801675a:	4802      	ldr	r0, [pc, #8]	; (8016764 <strtoul+0x10>)
 801675c:	6800      	ldr	r0, [r0, #0]
 801675e:	f7ff bf85 	b.w	801666c <_strtoul_l.constprop.0>
 8016762:	bf00      	nop
 8016764:	200002b4 	.word	0x200002b4

08016768 <__swbuf_r>:
 8016768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801676a:	460e      	mov	r6, r1
 801676c:	4614      	mov	r4, r2
 801676e:	4605      	mov	r5, r0
 8016770:	b118      	cbz	r0, 801677a <__swbuf_r+0x12>
 8016772:	6983      	ldr	r3, [r0, #24]
 8016774:	b90b      	cbnz	r3, 801677a <__swbuf_r+0x12>
 8016776:	f7fe f901 	bl	801497c <__sinit>
 801677a:	4b21      	ldr	r3, [pc, #132]	; (8016800 <__swbuf_r+0x98>)
 801677c:	429c      	cmp	r4, r3
 801677e:	d12b      	bne.n	80167d8 <__swbuf_r+0x70>
 8016780:	686c      	ldr	r4, [r5, #4]
 8016782:	69a3      	ldr	r3, [r4, #24]
 8016784:	60a3      	str	r3, [r4, #8]
 8016786:	89a3      	ldrh	r3, [r4, #12]
 8016788:	071a      	lsls	r2, r3, #28
 801678a:	d52f      	bpl.n	80167ec <__swbuf_r+0x84>
 801678c:	6923      	ldr	r3, [r4, #16]
 801678e:	b36b      	cbz	r3, 80167ec <__swbuf_r+0x84>
 8016790:	6923      	ldr	r3, [r4, #16]
 8016792:	6820      	ldr	r0, [r4, #0]
 8016794:	1ac0      	subs	r0, r0, r3
 8016796:	6963      	ldr	r3, [r4, #20]
 8016798:	b2f6      	uxtb	r6, r6
 801679a:	4283      	cmp	r3, r0
 801679c:	4637      	mov	r7, r6
 801679e:	dc04      	bgt.n	80167aa <__swbuf_r+0x42>
 80167a0:	4621      	mov	r1, r4
 80167a2:	4628      	mov	r0, r5
 80167a4:	f7ff fa0a 	bl	8015bbc <_fflush_r>
 80167a8:	bb30      	cbnz	r0, 80167f8 <__swbuf_r+0x90>
 80167aa:	68a3      	ldr	r3, [r4, #8]
 80167ac:	3b01      	subs	r3, #1
 80167ae:	60a3      	str	r3, [r4, #8]
 80167b0:	6823      	ldr	r3, [r4, #0]
 80167b2:	1c5a      	adds	r2, r3, #1
 80167b4:	6022      	str	r2, [r4, #0]
 80167b6:	701e      	strb	r6, [r3, #0]
 80167b8:	6963      	ldr	r3, [r4, #20]
 80167ba:	3001      	adds	r0, #1
 80167bc:	4283      	cmp	r3, r0
 80167be:	d004      	beq.n	80167ca <__swbuf_r+0x62>
 80167c0:	89a3      	ldrh	r3, [r4, #12]
 80167c2:	07db      	lsls	r3, r3, #31
 80167c4:	d506      	bpl.n	80167d4 <__swbuf_r+0x6c>
 80167c6:	2e0a      	cmp	r6, #10
 80167c8:	d104      	bne.n	80167d4 <__swbuf_r+0x6c>
 80167ca:	4621      	mov	r1, r4
 80167cc:	4628      	mov	r0, r5
 80167ce:	f7ff f9f5 	bl	8015bbc <_fflush_r>
 80167d2:	b988      	cbnz	r0, 80167f8 <__swbuf_r+0x90>
 80167d4:	4638      	mov	r0, r7
 80167d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167d8:	4b0a      	ldr	r3, [pc, #40]	; (8016804 <__swbuf_r+0x9c>)
 80167da:	429c      	cmp	r4, r3
 80167dc:	d101      	bne.n	80167e2 <__swbuf_r+0x7a>
 80167de:	68ac      	ldr	r4, [r5, #8]
 80167e0:	e7cf      	b.n	8016782 <__swbuf_r+0x1a>
 80167e2:	4b09      	ldr	r3, [pc, #36]	; (8016808 <__swbuf_r+0xa0>)
 80167e4:	429c      	cmp	r4, r3
 80167e6:	bf08      	it	eq
 80167e8:	68ec      	ldreq	r4, [r5, #12]
 80167ea:	e7ca      	b.n	8016782 <__swbuf_r+0x1a>
 80167ec:	4621      	mov	r1, r4
 80167ee:	4628      	mov	r0, r5
 80167f0:	f000 f80c 	bl	801680c <__swsetup_r>
 80167f4:	2800      	cmp	r0, #0
 80167f6:	d0cb      	beq.n	8016790 <__swbuf_r+0x28>
 80167f8:	f04f 37ff 	mov.w	r7, #4294967295
 80167fc:	e7ea      	b.n	80167d4 <__swbuf_r+0x6c>
 80167fe:	bf00      	nop
 8016800:	08017b8c 	.word	0x08017b8c
 8016804:	08017bac 	.word	0x08017bac
 8016808:	08017b6c 	.word	0x08017b6c

0801680c <__swsetup_r>:
 801680c:	4b32      	ldr	r3, [pc, #200]	; (80168d8 <__swsetup_r+0xcc>)
 801680e:	b570      	push	{r4, r5, r6, lr}
 8016810:	681d      	ldr	r5, [r3, #0]
 8016812:	4606      	mov	r6, r0
 8016814:	460c      	mov	r4, r1
 8016816:	b125      	cbz	r5, 8016822 <__swsetup_r+0x16>
 8016818:	69ab      	ldr	r3, [r5, #24]
 801681a:	b913      	cbnz	r3, 8016822 <__swsetup_r+0x16>
 801681c:	4628      	mov	r0, r5
 801681e:	f7fe f8ad 	bl	801497c <__sinit>
 8016822:	4b2e      	ldr	r3, [pc, #184]	; (80168dc <__swsetup_r+0xd0>)
 8016824:	429c      	cmp	r4, r3
 8016826:	d10f      	bne.n	8016848 <__swsetup_r+0x3c>
 8016828:	686c      	ldr	r4, [r5, #4]
 801682a:	89a3      	ldrh	r3, [r4, #12]
 801682c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016830:	0719      	lsls	r1, r3, #28
 8016832:	d42c      	bmi.n	801688e <__swsetup_r+0x82>
 8016834:	06dd      	lsls	r5, r3, #27
 8016836:	d411      	bmi.n	801685c <__swsetup_r+0x50>
 8016838:	2309      	movs	r3, #9
 801683a:	6033      	str	r3, [r6, #0]
 801683c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016840:	81a3      	strh	r3, [r4, #12]
 8016842:	f04f 30ff 	mov.w	r0, #4294967295
 8016846:	e03e      	b.n	80168c6 <__swsetup_r+0xba>
 8016848:	4b25      	ldr	r3, [pc, #148]	; (80168e0 <__swsetup_r+0xd4>)
 801684a:	429c      	cmp	r4, r3
 801684c:	d101      	bne.n	8016852 <__swsetup_r+0x46>
 801684e:	68ac      	ldr	r4, [r5, #8]
 8016850:	e7eb      	b.n	801682a <__swsetup_r+0x1e>
 8016852:	4b24      	ldr	r3, [pc, #144]	; (80168e4 <__swsetup_r+0xd8>)
 8016854:	429c      	cmp	r4, r3
 8016856:	bf08      	it	eq
 8016858:	68ec      	ldreq	r4, [r5, #12]
 801685a:	e7e6      	b.n	801682a <__swsetup_r+0x1e>
 801685c:	0758      	lsls	r0, r3, #29
 801685e:	d512      	bpl.n	8016886 <__swsetup_r+0x7a>
 8016860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016862:	b141      	cbz	r1, 8016876 <__swsetup_r+0x6a>
 8016864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016868:	4299      	cmp	r1, r3
 801686a:	d002      	beq.n	8016872 <__swsetup_r+0x66>
 801686c:	4630      	mov	r0, r6
 801686e:	f7fe fbe5 	bl	801503c <_free_r>
 8016872:	2300      	movs	r3, #0
 8016874:	6363      	str	r3, [r4, #52]	; 0x34
 8016876:	89a3      	ldrh	r3, [r4, #12]
 8016878:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801687c:	81a3      	strh	r3, [r4, #12]
 801687e:	2300      	movs	r3, #0
 8016880:	6063      	str	r3, [r4, #4]
 8016882:	6923      	ldr	r3, [r4, #16]
 8016884:	6023      	str	r3, [r4, #0]
 8016886:	89a3      	ldrh	r3, [r4, #12]
 8016888:	f043 0308 	orr.w	r3, r3, #8
 801688c:	81a3      	strh	r3, [r4, #12]
 801688e:	6923      	ldr	r3, [r4, #16]
 8016890:	b94b      	cbnz	r3, 80168a6 <__swsetup_r+0x9a>
 8016892:	89a3      	ldrh	r3, [r4, #12]
 8016894:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801689c:	d003      	beq.n	80168a6 <__swsetup_r+0x9a>
 801689e:	4621      	mov	r1, r4
 80168a0:	4630      	mov	r0, r6
 80168a2:	f000 f85b 	bl	801695c <__smakebuf_r>
 80168a6:	89a0      	ldrh	r0, [r4, #12]
 80168a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80168ac:	f010 0301 	ands.w	r3, r0, #1
 80168b0:	d00a      	beq.n	80168c8 <__swsetup_r+0xbc>
 80168b2:	2300      	movs	r3, #0
 80168b4:	60a3      	str	r3, [r4, #8]
 80168b6:	6963      	ldr	r3, [r4, #20]
 80168b8:	425b      	negs	r3, r3
 80168ba:	61a3      	str	r3, [r4, #24]
 80168bc:	6923      	ldr	r3, [r4, #16]
 80168be:	b943      	cbnz	r3, 80168d2 <__swsetup_r+0xc6>
 80168c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80168c4:	d1ba      	bne.n	801683c <__swsetup_r+0x30>
 80168c6:	bd70      	pop	{r4, r5, r6, pc}
 80168c8:	0781      	lsls	r1, r0, #30
 80168ca:	bf58      	it	pl
 80168cc:	6963      	ldrpl	r3, [r4, #20]
 80168ce:	60a3      	str	r3, [r4, #8]
 80168d0:	e7f4      	b.n	80168bc <__swsetup_r+0xb0>
 80168d2:	2000      	movs	r0, #0
 80168d4:	e7f7      	b.n	80168c6 <__swsetup_r+0xba>
 80168d6:	bf00      	nop
 80168d8:	200002b4 	.word	0x200002b4
 80168dc:	08017b8c 	.word	0x08017b8c
 80168e0:	08017bac 	.word	0x08017bac
 80168e4:	08017b6c 	.word	0x08017b6c

080168e8 <abort>:
 80168e8:	b508      	push	{r3, lr}
 80168ea:	2006      	movs	r0, #6
 80168ec:	f000 fc44 	bl	8017178 <raise>
 80168f0:	2001      	movs	r0, #1
 80168f2:	f7ec fc1f 	bl	8003134 <_exit>
	...

080168f8 <__env_lock>:
 80168f8:	4801      	ldr	r0, [pc, #4]	; (8016900 <__env_lock+0x8>)
 80168fa:	f7fe b903 	b.w	8014b04 <__retarget_lock_acquire_recursive>
 80168fe:	bf00      	nop
 8016900:	2000e8c8 	.word	0x2000e8c8

08016904 <__env_unlock>:
 8016904:	4801      	ldr	r0, [pc, #4]	; (801690c <__env_unlock+0x8>)
 8016906:	f7fe b8ff 	b.w	8014b08 <__retarget_lock_release_recursive>
 801690a:	bf00      	nop
 801690c:	2000e8c8 	.word	0x2000e8c8

08016910 <__swhatbuf_r>:
 8016910:	b570      	push	{r4, r5, r6, lr}
 8016912:	460e      	mov	r6, r1
 8016914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016918:	2900      	cmp	r1, #0
 801691a:	b096      	sub	sp, #88	; 0x58
 801691c:	4614      	mov	r4, r2
 801691e:	461d      	mov	r5, r3
 8016920:	da08      	bge.n	8016934 <__swhatbuf_r+0x24>
 8016922:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016926:	2200      	movs	r2, #0
 8016928:	602a      	str	r2, [r5, #0]
 801692a:	061a      	lsls	r2, r3, #24
 801692c:	d410      	bmi.n	8016950 <__swhatbuf_r+0x40>
 801692e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016932:	e00e      	b.n	8016952 <__swhatbuf_r+0x42>
 8016934:	466a      	mov	r2, sp
 8016936:	f000 fc75 	bl	8017224 <_fstat_r>
 801693a:	2800      	cmp	r0, #0
 801693c:	dbf1      	blt.n	8016922 <__swhatbuf_r+0x12>
 801693e:	9a01      	ldr	r2, [sp, #4]
 8016940:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016944:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016948:	425a      	negs	r2, r3
 801694a:	415a      	adcs	r2, r3
 801694c:	602a      	str	r2, [r5, #0]
 801694e:	e7ee      	b.n	801692e <__swhatbuf_r+0x1e>
 8016950:	2340      	movs	r3, #64	; 0x40
 8016952:	2000      	movs	r0, #0
 8016954:	6023      	str	r3, [r4, #0]
 8016956:	b016      	add	sp, #88	; 0x58
 8016958:	bd70      	pop	{r4, r5, r6, pc}
	...

0801695c <__smakebuf_r>:
 801695c:	898b      	ldrh	r3, [r1, #12]
 801695e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016960:	079d      	lsls	r5, r3, #30
 8016962:	4606      	mov	r6, r0
 8016964:	460c      	mov	r4, r1
 8016966:	d507      	bpl.n	8016978 <__smakebuf_r+0x1c>
 8016968:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801696c:	6023      	str	r3, [r4, #0]
 801696e:	6123      	str	r3, [r4, #16]
 8016970:	2301      	movs	r3, #1
 8016972:	6163      	str	r3, [r4, #20]
 8016974:	b002      	add	sp, #8
 8016976:	bd70      	pop	{r4, r5, r6, pc}
 8016978:	ab01      	add	r3, sp, #4
 801697a:	466a      	mov	r2, sp
 801697c:	f7ff ffc8 	bl	8016910 <__swhatbuf_r>
 8016980:	9900      	ldr	r1, [sp, #0]
 8016982:	4605      	mov	r5, r0
 8016984:	4630      	mov	r0, r6
 8016986:	f7fe fbc5 	bl	8015114 <_malloc_r>
 801698a:	b948      	cbnz	r0, 80169a0 <__smakebuf_r+0x44>
 801698c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016990:	059a      	lsls	r2, r3, #22
 8016992:	d4ef      	bmi.n	8016974 <__smakebuf_r+0x18>
 8016994:	f023 0303 	bic.w	r3, r3, #3
 8016998:	f043 0302 	orr.w	r3, r3, #2
 801699c:	81a3      	strh	r3, [r4, #12]
 801699e:	e7e3      	b.n	8016968 <__smakebuf_r+0xc>
 80169a0:	4b0d      	ldr	r3, [pc, #52]	; (80169d8 <__smakebuf_r+0x7c>)
 80169a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80169a4:	89a3      	ldrh	r3, [r4, #12]
 80169a6:	6020      	str	r0, [r4, #0]
 80169a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80169ac:	81a3      	strh	r3, [r4, #12]
 80169ae:	9b00      	ldr	r3, [sp, #0]
 80169b0:	6163      	str	r3, [r4, #20]
 80169b2:	9b01      	ldr	r3, [sp, #4]
 80169b4:	6120      	str	r0, [r4, #16]
 80169b6:	b15b      	cbz	r3, 80169d0 <__smakebuf_r+0x74>
 80169b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80169bc:	4630      	mov	r0, r6
 80169be:	f000 fc43 	bl	8017248 <_isatty_r>
 80169c2:	b128      	cbz	r0, 80169d0 <__smakebuf_r+0x74>
 80169c4:	89a3      	ldrh	r3, [r4, #12]
 80169c6:	f023 0303 	bic.w	r3, r3, #3
 80169ca:	f043 0301 	orr.w	r3, r3, #1
 80169ce:	81a3      	strh	r3, [r4, #12]
 80169d0:	89a0      	ldrh	r0, [r4, #12]
 80169d2:	4305      	orrs	r5, r0
 80169d4:	81a5      	strh	r5, [r4, #12]
 80169d6:	e7cd      	b.n	8016974 <__smakebuf_r+0x18>
 80169d8:	08014915 	.word	0x08014915

080169dc <memmove>:
 80169dc:	4288      	cmp	r0, r1
 80169de:	b510      	push	{r4, lr}
 80169e0:	eb01 0402 	add.w	r4, r1, r2
 80169e4:	d902      	bls.n	80169ec <memmove+0x10>
 80169e6:	4284      	cmp	r4, r0
 80169e8:	4623      	mov	r3, r4
 80169ea:	d807      	bhi.n	80169fc <memmove+0x20>
 80169ec:	1e43      	subs	r3, r0, #1
 80169ee:	42a1      	cmp	r1, r4
 80169f0:	d008      	beq.n	8016a04 <memmove+0x28>
 80169f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80169f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80169fa:	e7f8      	b.n	80169ee <memmove+0x12>
 80169fc:	4402      	add	r2, r0
 80169fe:	4601      	mov	r1, r0
 8016a00:	428a      	cmp	r2, r1
 8016a02:	d100      	bne.n	8016a06 <memmove+0x2a>
 8016a04:	bd10      	pop	{r4, pc}
 8016a06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016a0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016a0e:	e7f7      	b.n	8016a00 <memmove+0x24>

08016a10 <_realloc_r>:
 8016a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a14:	4680      	mov	r8, r0
 8016a16:	4614      	mov	r4, r2
 8016a18:	460e      	mov	r6, r1
 8016a1a:	b921      	cbnz	r1, 8016a26 <_realloc_r+0x16>
 8016a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a20:	4611      	mov	r1, r2
 8016a22:	f7fe bb77 	b.w	8015114 <_malloc_r>
 8016a26:	b92a      	cbnz	r2, 8016a34 <_realloc_r+0x24>
 8016a28:	f7fe fb08 	bl	801503c <_free_r>
 8016a2c:	4625      	mov	r5, r4
 8016a2e:	4628      	mov	r0, r5
 8016a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a34:	f000 fc18 	bl	8017268 <_malloc_usable_size_r>
 8016a38:	4284      	cmp	r4, r0
 8016a3a:	4607      	mov	r7, r0
 8016a3c:	d802      	bhi.n	8016a44 <_realloc_r+0x34>
 8016a3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016a42:	d812      	bhi.n	8016a6a <_realloc_r+0x5a>
 8016a44:	4621      	mov	r1, r4
 8016a46:	4640      	mov	r0, r8
 8016a48:	f7fe fb64 	bl	8015114 <_malloc_r>
 8016a4c:	4605      	mov	r5, r0
 8016a4e:	2800      	cmp	r0, #0
 8016a50:	d0ed      	beq.n	8016a2e <_realloc_r+0x1e>
 8016a52:	42bc      	cmp	r4, r7
 8016a54:	4622      	mov	r2, r4
 8016a56:	4631      	mov	r1, r6
 8016a58:	bf28      	it	cs
 8016a5a:	463a      	movcs	r2, r7
 8016a5c:	f7fe f866 	bl	8014b2c <memcpy>
 8016a60:	4631      	mov	r1, r6
 8016a62:	4640      	mov	r0, r8
 8016a64:	f7fe faea 	bl	801503c <_free_r>
 8016a68:	e7e1      	b.n	8016a2e <_realloc_r+0x1e>
 8016a6a:	4635      	mov	r5, r6
 8016a6c:	e7df      	b.n	8016a2e <_realloc_r+0x1e>

08016a6e <_sungetc_r>:
 8016a6e:	b538      	push	{r3, r4, r5, lr}
 8016a70:	1c4b      	adds	r3, r1, #1
 8016a72:	4614      	mov	r4, r2
 8016a74:	d103      	bne.n	8016a7e <_sungetc_r+0x10>
 8016a76:	f04f 35ff 	mov.w	r5, #4294967295
 8016a7a:	4628      	mov	r0, r5
 8016a7c:	bd38      	pop	{r3, r4, r5, pc}
 8016a7e:	8993      	ldrh	r3, [r2, #12]
 8016a80:	f023 0320 	bic.w	r3, r3, #32
 8016a84:	8193      	strh	r3, [r2, #12]
 8016a86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016a88:	6852      	ldr	r2, [r2, #4]
 8016a8a:	b2cd      	uxtb	r5, r1
 8016a8c:	b18b      	cbz	r3, 8016ab2 <_sungetc_r+0x44>
 8016a8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016a90:	4293      	cmp	r3, r2
 8016a92:	dd08      	ble.n	8016aa6 <_sungetc_r+0x38>
 8016a94:	6823      	ldr	r3, [r4, #0]
 8016a96:	1e5a      	subs	r2, r3, #1
 8016a98:	6022      	str	r2, [r4, #0]
 8016a9a:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016a9e:	6863      	ldr	r3, [r4, #4]
 8016aa0:	3301      	adds	r3, #1
 8016aa2:	6063      	str	r3, [r4, #4]
 8016aa4:	e7e9      	b.n	8016a7a <_sungetc_r+0xc>
 8016aa6:	4621      	mov	r1, r4
 8016aa8:	f000 fb82 	bl	80171b0 <__submore>
 8016aac:	2800      	cmp	r0, #0
 8016aae:	d0f1      	beq.n	8016a94 <_sungetc_r+0x26>
 8016ab0:	e7e1      	b.n	8016a76 <_sungetc_r+0x8>
 8016ab2:	6921      	ldr	r1, [r4, #16]
 8016ab4:	6823      	ldr	r3, [r4, #0]
 8016ab6:	b151      	cbz	r1, 8016ace <_sungetc_r+0x60>
 8016ab8:	4299      	cmp	r1, r3
 8016aba:	d208      	bcs.n	8016ace <_sungetc_r+0x60>
 8016abc:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016ac0:	42a9      	cmp	r1, r5
 8016ac2:	d104      	bne.n	8016ace <_sungetc_r+0x60>
 8016ac4:	3b01      	subs	r3, #1
 8016ac6:	3201      	adds	r2, #1
 8016ac8:	6023      	str	r3, [r4, #0]
 8016aca:	6062      	str	r2, [r4, #4]
 8016acc:	e7d5      	b.n	8016a7a <_sungetc_r+0xc>
 8016ace:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016ad2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ad6:	6363      	str	r3, [r4, #52]	; 0x34
 8016ad8:	2303      	movs	r3, #3
 8016ada:	63a3      	str	r3, [r4, #56]	; 0x38
 8016adc:	4623      	mov	r3, r4
 8016ade:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016ae2:	6023      	str	r3, [r4, #0]
 8016ae4:	2301      	movs	r3, #1
 8016ae6:	e7dc      	b.n	8016aa2 <_sungetc_r+0x34>

08016ae8 <__ssrefill_r>:
 8016ae8:	b510      	push	{r4, lr}
 8016aea:	460c      	mov	r4, r1
 8016aec:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016aee:	b169      	cbz	r1, 8016b0c <__ssrefill_r+0x24>
 8016af0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016af4:	4299      	cmp	r1, r3
 8016af6:	d001      	beq.n	8016afc <__ssrefill_r+0x14>
 8016af8:	f7fe faa0 	bl	801503c <_free_r>
 8016afc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016afe:	6063      	str	r3, [r4, #4]
 8016b00:	2000      	movs	r0, #0
 8016b02:	6360      	str	r0, [r4, #52]	; 0x34
 8016b04:	b113      	cbz	r3, 8016b0c <__ssrefill_r+0x24>
 8016b06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016b08:	6023      	str	r3, [r4, #0]
 8016b0a:	bd10      	pop	{r4, pc}
 8016b0c:	6923      	ldr	r3, [r4, #16]
 8016b0e:	6023      	str	r3, [r4, #0]
 8016b10:	2300      	movs	r3, #0
 8016b12:	6063      	str	r3, [r4, #4]
 8016b14:	89a3      	ldrh	r3, [r4, #12]
 8016b16:	f043 0320 	orr.w	r3, r3, #32
 8016b1a:	81a3      	strh	r3, [r4, #12]
 8016b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8016b20:	e7f3      	b.n	8016b0a <__ssrefill_r+0x22>
	...

08016b24 <__ssvfiscanf_r>:
 8016b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b28:	460c      	mov	r4, r1
 8016b2a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8016b2e:	2100      	movs	r1, #0
 8016b30:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8016b34:	49a6      	ldr	r1, [pc, #664]	; (8016dd0 <__ssvfiscanf_r+0x2ac>)
 8016b36:	91a0      	str	r1, [sp, #640]	; 0x280
 8016b38:	f10d 0804 	add.w	r8, sp, #4
 8016b3c:	49a5      	ldr	r1, [pc, #660]	; (8016dd4 <__ssvfiscanf_r+0x2b0>)
 8016b3e:	4fa6      	ldr	r7, [pc, #664]	; (8016dd8 <__ssvfiscanf_r+0x2b4>)
 8016b40:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8016ddc <__ssvfiscanf_r+0x2b8>
 8016b44:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016b48:	4606      	mov	r6, r0
 8016b4a:	91a1      	str	r1, [sp, #644]	; 0x284
 8016b4c:	9300      	str	r3, [sp, #0]
 8016b4e:	7813      	ldrb	r3, [r2, #0]
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	f000 815a 	beq.w	8016e0a <__ssvfiscanf_r+0x2e6>
 8016b56:	5dd9      	ldrb	r1, [r3, r7]
 8016b58:	f011 0108 	ands.w	r1, r1, #8
 8016b5c:	f102 0501 	add.w	r5, r2, #1
 8016b60:	d019      	beq.n	8016b96 <__ssvfiscanf_r+0x72>
 8016b62:	6863      	ldr	r3, [r4, #4]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	dd0f      	ble.n	8016b88 <__ssvfiscanf_r+0x64>
 8016b68:	6823      	ldr	r3, [r4, #0]
 8016b6a:	781a      	ldrb	r2, [r3, #0]
 8016b6c:	5cba      	ldrb	r2, [r7, r2]
 8016b6e:	0712      	lsls	r2, r2, #28
 8016b70:	d401      	bmi.n	8016b76 <__ssvfiscanf_r+0x52>
 8016b72:	462a      	mov	r2, r5
 8016b74:	e7eb      	b.n	8016b4e <__ssvfiscanf_r+0x2a>
 8016b76:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016b78:	3201      	adds	r2, #1
 8016b7a:	9245      	str	r2, [sp, #276]	; 0x114
 8016b7c:	6862      	ldr	r2, [r4, #4]
 8016b7e:	3301      	adds	r3, #1
 8016b80:	3a01      	subs	r2, #1
 8016b82:	6062      	str	r2, [r4, #4]
 8016b84:	6023      	str	r3, [r4, #0]
 8016b86:	e7ec      	b.n	8016b62 <__ssvfiscanf_r+0x3e>
 8016b88:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016b8a:	4621      	mov	r1, r4
 8016b8c:	4630      	mov	r0, r6
 8016b8e:	4798      	blx	r3
 8016b90:	2800      	cmp	r0, #0
 8016b92:	d0e9      	beq.n	8016b68 <__ssvfiscanf_r+0x44>
 8016b94:	e7ed      	b.n	8016b72 <__ssvfiscanf_r+0x4e>
 8016b96:	2b25      	cmp	r3, #37	; 0x25
 8016b98:	d012      	beq.n	8016bc0 <__ssvfiscanf_r+0x9c>
 8016b9a:	469a      	mov	sl, r3
 8016b9c:	6863      	ldr	r3, [r4, #4]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	f340 8091 	ble.w	8016cc6 <__ssvfiscanf_r+0x1a2>
 8016ba4:	6822      	ldr	r2, [r4, #0]
 8016ba6:	7813      	ldrb	r3, [r2, #0]
 8016ba8:	4553      	cmp	r3, sl
 8016baa:	f040 812e 	bne.w	8016e0a <__ssvfiscanf_r+0x2e6>
 8016bae:	6863      	ldr	r3, [r4, #4]
 8016bb0:	3b01      	subs	r3, #1
 8016bb2:	6063      	str	r3, [r4, #4]
 8016bb4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016bb6:	3201      	adds	r2, #1
 8016bb8:	3301      	adds	r3, #1
 8016bba:	6022      	str	r2, [r4, #0]
 8016bbc:	9345      	str	r3, [sp, #276]	; 0x114
 8016bbe:	e7d8      	b.n	8016b72 <__ssvfiscanf_r+0x4e>
 8016bc0:	9141      	str	r1, [sp, #260]	; 0x104
 8016bc2:	9143      	str	r1, [sp, #268]	; 0x10c
 8016bc4:	7853      	ldrb	r3, [r2, #1]
 8016bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8016bc8:	bf02      	ittt	eq
 8016bca:	2310      	moveq	r3, #16
 8016bcc:	1c95      	addeq	r5, r2, #2
 8016bce:	9341      	streq	r3, [sp, #260]	; 0x104
 8016bd0:	220a      	movs	r2, #10
 8016bd2:	46aa      	mov	sl, r5
 8016bd4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8016bd8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8016bdc:	2b09      	cmp	r3, #9
 8016bde:	d91d      	bls.n	8016c1c <__ssvfiscanf_r+0xf8>
 8016be0:	487e      	ldr	r0, [pc, #504]	; (8016ddc <__ssvfiscanf_r+0x2b8>)
 8016be2:	2203      	movs	r2, #3
 8016be4:	f7e9 fb0c 	bl	8000200 <memchr>
 8016be8:	b140      	cbz	r0, 8016bfc <__ssvfiscanf_r+0xd8>
 8016bea:	2301      	movs	r3, #1
 8016bec:	eba0 0009 	sub.w	r0, r0, r9
 8016bf0:	fa03 f000 	lsl.w	r0, r3, r0
 8016bf4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016bf6:	4318      	orrs	r0, r3
 8016bf8:	9041      	str	r0, [sp, #260]	; 0x104
 8016bfa:	4655      	mov	r5, sl
 8016bfc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016c00:	2b78      	cmp	r3, #120	; 0x78
 8016c02:	d806      	bhi.n	8016c12 <__ssvfiscanf_r+0xee>
 8016c04:	2b57      	cmp	r3, #87	; 0x57
 8016c06:	d810      	bhi.n	8016c2a <__ssvfiscanf_r+0x106>
 8016c08:	2b25      	cmp	r3, #37	; 0x25
 8016c0a:	d0c6      	beq.n	8016b9a <__ssvfiscanf_r+0x76>
 8016c0c:	d856      	bhi.n	8016cbc <__ssvfiscanf_r+0x198>
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d064      	beq.n	8016cdc <__ssvfiscanf_r+0x1b8>
 8016c12:	2303      	movs	r3, #3
 8016c14:	9347      	str	r3, [sp, #284]	; 0x11c
 8016c16:	230a      	movs	r3, #10
 8016c18:	9342      	str	r3, [sp, #264]	; 0x108
 8016c1a:	e071      	b.n	8016d00 <__ssvfiscanf_r+0x1dc>
 8016c1c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016c1e:	fb02 1103 	mla	r1, r2, r3, r1
 8016c22:	3930      	subs	r1, #48	; 0x30
 8016c24:	9143      	str	r1, [sp, #268]	; 0x10c
 8016c26:	4655      	mov	r5, sl
 8016c28:	e7d3      	b.n	8016bd2 <__ssvfiscanf_r+0xae>
 8016c2a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8016c2e:	2a20      	cmp	r2, #32
 8016c30:	d8ef      	bhi.n	8016c12 <__ssvfiscanf_r+0xee>
 8016c32:	a101      	add	r1, pc, #4	; (adr r1, 8016c38 <__ssvfiscanf_r+0x114>)
 8016c34:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016c38:	08016ceb 	.word	0x08016ceb
 8016c3c:	08016c13 	.word	0x08016c13
 8016c40:	08016c13 	.word	0x08016c13
 8016c44:	08016d49 	.word	0x08016d49
 8016c48:	08016c13 	.word	0x08016c13
 8016c4c:	08016c13 	.word	0x08016c13
 8016c50:	08016c13 	.word	0x08016c13
 8016c54:	08016c13 	.word	0x08016c13
 8016c58:	08016c13 	.word	0x08016c13
 8016c5c:	08016c13 	.word	0x08016c13
 8016c60:	08016c13 	.word	0x08016c13
 8016c64:	08016d5f 	.word	0x08016d5f
 8016c68:	08016d35 	.word	0x08016d35
 8016c6c:	08016cc3 	.word	0x08016cc3
 8016c70:	08016cc3 	.word	0x08016cc3
 8016c74:	08016cc3 	.word	0x08016cc3
 8016c78:	08016c13 	.word	0x08016c13
 8016c7c:	08016d39 	.word	0x08016d39
 8016c80:	08016c13 	.word	0x08016c13
 8016c84:	08016c13 	.word	0x08016c13
 8016c88:	08016c13 	.word	0x08016c13
 8016c8c:	08016c13 	.word	0x08016c13
 8016c90:	08016d6f 	.word	0x08016d6f
 8016c94:	08016d41 	.word	0x08016d41
 8016c98:	08016ce3 	.word	0x08016ce3
 8016c9c:	08016c13 	.word	0x08016c13
 8016ca0:	08016c13 	.word	0x08016c13
 8016ca4:	08016d6b 	.word	0x08016d6b
 8016ca8:	08016c13 	.word	0x08016c13
 8016cac:	08016d35 	.word	0x08016d35
 8016cb0:	08016c13 	.word	0x08016c13
 8016cb4:	08016c13 	.word	0x08016c13
 8016cb8:	08016ceb 	.word	0x08016ceb
 8016cbc:	3b45      	subs	r3, #69	; 0x45
 8016cbe:	2b02      	cmp	r3, #2
 8016cc0:	d8a7      	bhi.n	8016c12 <__ssvfiscanf_r+0xee>
 8016cc2:	2305      	movs	r3, #5
 8016cc4:	e01b      	b.n	8016cfe <__ssvfiscanf_r+0x1da>
 8016cc6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016cc8:	4621      	mov	r1, r4
 8016cca:	4630      	mov	r0, r6
 8016ccc:	4798      	blx	r3
 8016cce:	2800      	cmp	r0, #0
 8016cd0:	f43f af68 	beq.w	8016ba4 <__ssvfiscanf_r+0x80>
 8016cd4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016cd6:	2800      	cmp	r0, #0
 8016cd8:	f040 808d 	bne.w	8016df6 <__ssvfiscanf_r+0x2d2>
 8016cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8016ce0:	e08f      	b.n	8016e02 <__ssvfiscanf_r+0x2de>
 8016ce2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016ce4:	f042 0220 	orr.w	r2, r2, #32
 8016ce8:	9241      	str	r2, [sp, #260]	; 0x104
 8016cea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016cf0:	9241      	str	r2, [sp, #260]	; 0x104
 8016cf2:	2210      	movs	r2, #16
 8016cf4:	2b6f      	cmp	r3, #111	; 0x6f
 8016cf6:	9242      	str	r2, [sp, #264]	; 0x108
 8016cf8:	bf34      	ite	cc
 8016cfa:	2303      	movcc	r3, #3
 8016cfc:	2304      	movcs	r3, #4
 8016cfe:	9347      	str	r3, [sp, #284]	; 0x11c
 8016d00:	6863      	ldr	r3, [r4, #4]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	dd42      	ble.n	8016d8c <__ssvfiscanf_r+0x268>
 8016d06:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016d08:	0659      	lsls	r1, r3, #25
 8016d0a:	d404      	bmi.n	8016d16 <__ssvfiscanf_r+0x1f2>
 8016d0c:	6823      	ldr	r3, [r4, #0]
 8016d0e:	781a      	ldrb	r2, [r3, #0]
 8016d10:	5cba      	ldrb	r2, [r7, r2]
 8016d12:	0712      	lsls	r2, r2, #28
 8016d14:	d441      	bmi.n	8016d9a <__ssvfiscanf_r+0x276>
 8016d16:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016d18:	2b02      	cmp	r3, #2
 8016d1a:	dc50      	bgt.n	8016dbe <__ssvfiscanf_r+0x29a>
 8016d1c:	466b      	mov	r3, sp
 8016d1e:	4622      	mov	r2, r4
 8016d20:	a941      	add	r1, sp, #260	; 0x104
 8016d22:	4630      	mov	r0, r6
 8016d24:	f000 f876 	bl	8016e14 <_scanf_chars>
 8016d28:	2801      	cmp	r0, #1
 8016d2a:	d06e      	beq.n	8016e0a <__ssvfiscanf_r+0x2e6>
 8016d2c:	2802      	cmp	r0, #2
 8016d2e:	f47f af20 	bne.w	8016b72 <__ssvfiscanf_r+0x4e>
 8016d32:	e7cf      	b.n	8016cd4 <__ssvfiscanf_r+0x1b0>
 8016d34:	220a      	movs	r2, #10
 8016d36:	e7dd      	b.n	8016cf4 <__ssvfiscanf_r+0x1d0>
 8016d38:	2300      	movs	r3, #0
 8016d3a:	9342      	str	r3, [sp, #264]	; 0x108
 8016d3c:	2303      	movs	r3, #3
 8016d3e:	e7de      	b.n	8016cfe <__ssvfiscanf_r+0x1da>
 8016d40:	2308      	movs	r3, #8
 8016d42:	9342      	str	r3, [sp, #264]	; 0x108
 8016d44:	2304      	movs	r3, #4
 8016d46:	e7da      	b.n	8016cfe <__ssvfiscanf_r+0x1da>
 8016d48:	4629      	mov	r1, r5
 8016d4a:	4640      	mov	r0, r8
 8016d4c:	f000 f9b4 	bl	80170b8 <__sccl>
 8016d50:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d56:	9341      	str	r3, [sp, #260]	; 0x104
 8016d58:	4605      	mov	r5, r0
 8016d5a:	2301      	movs	r3, #1
 8016d5c:	e7cf      	b.n	8016cfe <__ssvfiscanf_r+0x1da>
 8016d5e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d64:	9341      	str	r3, [sp, #260]	; 0x104
 8016d66:	2300      	movs	r3, #0
 8016d68:	e7c9      	b.n	8016cfe <__ssvfiscanf_r+0x1da>
 8016d6a:	2302      	movs	r3, #2
 8016d6c:	e7c7      	b.n	8016cfe <__ssvfiscanf_r+0x1da>
 8016d6e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016d70:	06c3      	lsls	r3, r0, #27
 8016d72:	f53f aefe 	bmi.w	8016b72 <__ssvfiscanf_r+0x4e>
 8016d76:	9b00      	ldr	r3, [sp, #0]
 8016d78:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016d7a:	1d19      	adds	r1, r3, #4
 8016d7c:	9100      	str	r1, [sp, #0]
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	f010 0f01 	tst.w	r0, #1
 8016d84:	bf14      	ite	ne
 8016d86:	801a      	strhne	r2, [r3, #0]
 8016d88:	601a      	streq	r2, [r3, #0]
 8016d8a:	e6f2      	b.n	8016b72 <__ssvfiscanf_r+0x4e>
 8016d8c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016d8e:	4621      	mov	r1, r4
 8016d90:	4630      	mov	r0, r6
 8016d92:	4798      	blx	r3
 8016d94:	2800      	cmp	r0, #0
 8016d96:	d0b6      	beq.n	8016d06 <__ssvfiscanf_r+0x1e2>
 8016d98:	e79c      	b.n	8016cd4 <__ssvfiscanf_r+0x1b0>
 8016d9a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016d9c:	3201      	adds	r2, #1
 8016d9e:	9245      	str	r2, [sp, #276]	; 0x114
 8016da0:	6862      	ldr	r2, [r4, #4]
 8016da2:	3a01      	subs	r2, #1
 8016da4:	2a00      	cmp	r2, #0
 8016da6:	6062      	str	r2, [r4, #4]
 8016da8:	dd02      	ble.n	8016db0 <__ssvfiscanf_r+0x28c>
 8016daa:	3301      	adds	r3, #1
 8016dac:	6023      	str	r3, [r4, #0]
 8016dae:	e7ad      	b.n	8016d0c <__ssvfiscanf_r+0x1e8>
 8016db0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016db2:	4621      	mov	r1, r4
 8016db4:	4630      	mov	r0, r6
 8016db6:	4798      	blx	r3
 8016db8:	2800      	cmp	r0, #0
 8016dba:	d0a7      	beq.n	8016d0c <__ssvfiscanf_r+0x1e8>
 8016dbc:	e78a      	b.n	8016cd4 <__ssvfiscanf_r+0x1b0>
 8016dbe:	2b04      	cmp	r3, #4
 8016dc0:	dc0e      	bgt.n	8016de0 <__ssvfiscanf_r+0x2bc>
 8016dc2:	466b      	mov	r3, sp
 8016dc4:	4622      	mov	r2, r4
 8016dc6:	a941      	add	r1, sp, #260	; 0x104
 8016dc8:	4630      	mov	r0, r6
 8016dca:	f000 f87d 	bl	8016ec8 <_scanf_i>
 8016dce:	e7ab      	b.n	8016d28 <__ssvfiscanf_r+0x204>
 8016dd0:	08016a6f 	.word	0x08016a6f
 8016dd4:	08016ae9 	.word	0x08016ae9
 8016dd8:	08017d1d 	.word	0x08017d1d
 8016ddc:	08017e86 	.word	0x08017e86
 8016de0:	4b0b      	ldr	r3, [pc, #44]	; (8016e10 <__ssvfiscanf_r+0x2ec>)
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	f43f aec5 	beq.w	8016b72 <__ssvfiscanf_r+0x4e>
 8016de8:	466b      	mov	r3, sp
 8016dea:	4622      	mov	r2, r4
 8016dec:	a941      	add	r1, sp, #260	; 0x104
 8016dee:	4630      	mov	r0, r6
 8016df0:	f3af 8000 	nop.w
 8016df4:	e798      	b.n	8016d28 <__ssvfiscanf_r+0x204>
 8016df6:	89a3      	ldrh	r3, [r4, #12]
 8016df8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016dfc:	bf18      	it	ne
 8016dfe:	f04f 30ff 	movne.w	r0, #4294967295
 8016e02:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8016e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e0a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016e0c:	e7f9      	b.n	8016e02 <__ssvfiscanf_r+0x2de>
 8016e0e:	bf00      	nop
 8016e10:	00000000 	.word	0x00000000

08016e14 <_scanf_chars>:
 8016e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e18:	4615      	mov	r5, r2
 8016e1a:	688a      	ldr	r2, [r1, #8]
 8016e1c:	4680      	mov	r8, r0
 8016e1e:	460c      	mov	r4, r1
 8016e20:	b932      	cbnz	r2, 8016e30 <_scanf_chars+0x1c>
 8016e22:	698a      	ldr	r2, [r1, #24]
 8016e24:	2a00      	cmp	r2, #0
 8016e26:	bf0c      	ite	eq
 8016e28:	2201      	moveq	r2, #1
 8016e2a:	f04f 32ff 	movne.w	r2, #4294967295
 8016e2e:	608a      	str	r2, [r1, #8]
 8016e30:	6822      	ldr	r2, [r4, #0]
 8016e32:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8016ec4 <_scanf_chars+0xb0>
 8016e36:	06d1      	lsls	r1, r2, #27
 8016e38:	bf5f      	itttt	pl
 8016e3a:	681a      	ldrpl	r2, [r3, #0]
 8016e3c:	1d11      	addpl	r1, r2, #4
 8016e3e:	6019      	strpl	r1, [r3, #0]
 8016e40:	6816      	ldrpl	r6, [r2, #0]
 8016e42:	2700      	movs	r7, #0
 8016e44:	69a0      	ldr	r0, [r4, #24]
 8016e46:	b188      	cbz	r0, 8016e6c <_scanf_chars+0x58>
 8016e48:	2801      	cmp	r0, #1
 8016e4a:	d107      	bne.n	8016e5c <_scanf_chars+0x48>
 8016e4c:	682a      	ldr	r2, [r5, #0]
 8016e4e:	7811      	ldrb	r1, [r2, #0]
 8016e50:	6962      	ldr	r2, [r4, #20]
 8016e52:	5c52      	ldrb	r2, [r2, r1]
 8016e54:	b952      	cbnz	r2, 8016e6c <_scanf_chars+0x58>
 8016e56:	2f00      	cmp	r7, #0
 8016e58:	d031      	beq.n	8016ebe <_scanf_chars+0xaa>
 8016e5a:	e022      	b.n	8016ea2 <_scanf_chars+0x8e>
 8016e5c:	2802      	cmp	r0, #2
 8016e5e:	d120      	bne.n	8016ea2 <_scanf_chars+0x8e>
 8016e60:	682b      	ldr	r3, [r5, #0]
 8016e62:	781b      	ldrb	r3, [r3, #0]
 8016e64:	f813 3009 	ldrb.w	r3, [r3, r9]
 8016e68:	071b      	lsls	r3, r3, #28
 8016e6a:	d41a      	bmi.n	8016ea2 <_scanf_chars+0x8e>
 8016e6c:	6823      	ldr	r3, [r4, #0]
 8016e6e:	06da      	lsls	r2, r3, #27
 8016e70:	bf5e      	ittt	pl
 8016e72:	682b      	ldrpl	r3, [r5, #0]
 8016e74:	781b      	ldrbpl	r3, [r3, #0]
 8016e76:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016e7a:	682a      	ldr	r2, [r5, #0]
 8016e7c:	686b      	ldr	r3, [r5, #4]
 8016e7e:	3201      	adds	r2, #1
 8016e80:	602a      	str	r2, [r5, #0]
 8016e82:	68a2      	ldr	r2, [r4, #8]
 8016e84:	3b01      	subs	r3, #1
 8016e86:	3a01      	subs	r2, #1
 8016e88:	606b      	str	r3, [r5, #4]
 8016e8a:	3701      	adds	r7, #1
 8016e8c:	60a2      	str	r2, [r4, #8]
 8016e8e:	b142      	cbz	r2, 8016ea2 <_scanf_chars+0x8e>
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	dcd7      	bgt.n	8016e44 <_scanf_chars+0x30>
 8016e94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016e98:	4629      	mov	r1, r5
 8016e9a:	4640      	mov	r0, r8
 8016e9c:	4798      	blx	r3
 8016e9e:	2800      	cmp	r0, #0
 8016ea0:	d0d0      	beq.n	8016e44 <_scanf_chars+0x30>
 8016ea2:	6823      	ldr	r3, [r4, #0]
 8016ea4:	f013 0310 	ands.w	r3, r3, #16
 8016ea8:	d105      	bne.n	8016eb6 <_scanf_chars+0xa2>
 8016eaa:	68e2      	ldr	r2, [r4, #12]
 8016eac:	3201      	adds	r2, #1
 8016eae:	60e2      	str	r2, [r4, #12]
 8016eb0:	69a2      	ldr	r2, [r4, #24]
 8016eb2:	b102      	cbz	r2, 8016eb6 <_scanf_chars+0xa2>
 8016eb4:	7033      	strb	r3, [r6, #0]
 8016eb6:	6923      	ldr	r3, [r4, #16]
 8016eb8:	443b      	add	r3, r7
 8016eba:	6123      	str	r3, [r4, #16]
 8016ebc:	2000      	movs	r0, #0
 8016ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ec2:	bf00      	nop
 8016ec4:	08017d1d 	.word	0x08017d1d

08016ec8 <_scanf_i>:
 8016ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ecc:	4698      	mov	r8, r3
 8016ece:	4b76      	ldr	r3, [pc, #472]	; (80170a8 <_scanf_i+0x1e0>)
 8016ed0:	460c      	mov	r4, r1
 8016ed2:	4682      	mov	sl, r0
 8016ed4:	4616      	mov	r6, r2
 8016ed6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016eda:	b087      	sub	sp, #28
 8016edc:	ab03      	add	r3, sp, #12
 8016ede:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016ee2:	4b72      	ldr	r3, [pc, #456]	; (80170ac <_scanf_i+0x1e4>)
 8016ee4:	69a1      	ldr	r1, [r4, #24]
 8016ee6:	4a72      	ldr	r2, [pc, #456]	; (80170b0 <_scanf_i+0x1e8>)
 8016ee8:	2903      	cmp	r1, #3
 8016eea:	bf18      	it	ne
 8016eec:	461a      	movne	r2, r3
 8016eee:	68a3      	ldr	r3, [r4, #8]
 8016ef0:	9201      	str	r2, [sp, #4]
 8016ef2:	1e5a      	subs	r2, r3, #1
 8016ef4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016ef8:	bf88      	it	hi
 8016efa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016efe:	4627      	mov	r7, r4
 8016f00:	bf82      	ittt	hi
 8016f02:	eb03 0905 	addhi.w	r9, r3, r5
 8016f06:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016f0a:	60a3      	strhi	r3, [r4, #8]
 8016f0c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016f10:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016f14:	bf98      	it	ls
 8016f16:	f04f 0900 	movls.w	r9, #0
 8016f1a:	6023      	str	r3, [r4, #0]
 8016f1c:	463d      	mov	r5, r7
 8016f1e:	f04f 0b00 	mov.w	fp, #0
 8016f22:	6831      	ldr	r1, [r6, #0]
 8016f24:	ab03      	add	r3, sp, #12
 8016f26:	7809      	ldrb	r1, [r1, #0]
 8016f28:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016f2c:	2202      	movs	r2, #2
 8016f2e:	f7e9 f967 	bl	8000200 <memchr>
 8016f32:	b328      	cbz	r0, 8016f80 <_scanf_i+0xb8>
 8016f34:	f1bb 0f01 	cmp.w	fp, #1
 8016f38:	d159      	bne.n	8016fee <_scanf_i+0x126>
 8016f3a:	6862      	ldr	r2, [r4, #4]
 8016f3c:	b92a      	cbnz	r2, 8016f4a <_scanf_i+0x82>
 8016f3e:	6822      	ldr	r2, [r4, #0]
 8016f40:	2308      	movs	r3, #8
 8016f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016f46:	6063      	str	r3, [r4, #4]
 8016f48:	6022      	str	r2, [r4, #0]
 8016f4a:	6822      	ldr	r2, [r4, #0]
 8016f4c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016f50:	6022      	str	r2, [r4, #0]
 8016f52:	68a2      	ldr	r2, [r4, #8]
 8016f54:	1e51      	subs	r1, r2, #1
 8016f56:	60a1      	str	r1, [r4, #8]
 8016f58:	b192      	cbz	r2, 8016f80 <_scanf_i+0xb8>
 8016f5a:	6832      	ldr	r2, [r6, #0]
 8016f5c:	1c51      	adds	r1, r2, #1
 8016f5e:	6031      	str	r1, [r6, #0]
 8016f60:	7812      	ldrb	r2, [r2, #0]
 8016f62:	f805 2b01 	strb.w	r2, [r5], #1
 8016f66:	6872      	ldr	r2, [r6, #4]
 8016f68:	3a01      	subs	r2, #1
 8016f6a:	2a00      	cmp	r2, #0
 8016f6c:	6072      	str	r2, [r6, #4]
 8016f6e:	dc07      	bgt.n	8016f80 <_scanf_i+0xb8>
 8016f70:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8016f74:	4631      	mov	r1, r6
 8016f76:	4650      	mov	r0, sl
 8016f78:	4790      	blx	r2
 8016f7a:	2800      	cmp	r0, #0
 8016f7c:	f040 8085 	bne.w	801708a <_scanf_i+0x1c2>
 8016f80:	f10b 0b01 	add.w	fp, fp, #1
 8016f84:	f1bb 0f03 	cmp.w	fp, #3
 8016f88:	d1cb      	bne.n	8016f22 <_scanf_i+0x5a>
 8016f8a:	6863      	ldr	r3, [r4, #4]
 8016f8c:	b90b      	cbnz	r3, 8016f92 <_scanf_i+0xca>
 8016f8e:	230a      	movs	r3, #10
 8016f90:	6063      	str	r3, [r4, #4]
 8016f92:	6863      	ldr	r3, [r4, #4]
 8016f94:	4947      	ldr	r1, [pc, #284]	; (80170b4 <_scanf_i+0x1ec>)
 8016f96:	6960      	ldr	r0, [r4, #20]
 8016f98:	1ac9      	subs	r1, r1, r3
 8016f9a:	f000 f88d 	bl	80170b8 <__sccl>
 8016f9e:	f04f 0b00 	mov.w	fp, #0
 8016fa2:	68a3      	ldr	r3, [r4, #8]
 8016fa4:	6822      	ldr	r2, [r4, #0]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d03d      	beq.n	8017026 <_scanf_i+0x15e>
 8016faa:	6831      	ldr	r1, [r6, #0]
 8016fac:	6960      	ldr	r0, [r4, #20]
 8016fae:	f891 c000 	ldrb.w	ip, [r1]
 8016fb2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016fb6:	2800      	cmp	r0, #0
 8016fb8:	d035      	beq.n	8017026 <_scanf_i+0x15e>
 8016fba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016fbe:	d124      	bne.n	801700a <_scanf_i+0x142>
 8016fc0:	0510      	lsls	r0, r2, #20
 8016fc2:	d522      	bpl.n	801700a <_scanf_i+0x142>
 8016fc4:	f10b 0b01 	add.w	fp, fp, #1
 8016fc8:	f1b9 0f00 	cmp.w	r9, #0
 8016fcc:	d003      	beq.n	8016fd6 <_scanf_i+0x10e>
 8016fce:	3301      	adds	r3, #1
 8016fd0:	f109 39ff 	add.w	r9, r9, #4294967295
 8016fd4:	60a3      	str	r3, [r4, #8]
 8016fd6:	6873      	ldr	r3, [r6, #4]
 8016fd8:	3b01      	subs	r3, #1
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	6073      	str	r3, [r6, #4]
 8016fde:	dd1b      	ble.n	8017018 <_scanf_i+0x150>
 8016fe0:	6833      	ldr	r3, [r6, #0]
 8016fe2:	3301      	adds	r3, #1
 8016fe4:	6033      	str	r3, [r6, #0]
 8016fe6:	68a3      	ldr	r3, [r4, #8]
 8016fe8:	3b01      	subs	r3, #1
 8016fea:	60a3      	str	r3, [r4, #8]
 8016fec:	e7d9      	b.n	8016fa2 <_scanf_i+0xda>
 8016fee:	f1bb 0f02 	cmp.w	fp, #2
 8016ff2:	d1ae      	bne.n	8016f52 <_scanf_i+0x8a>
 8016ff4:	6822      	ldr	r2, [r4, #0]
 8016ff6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016ffa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016ffe:	d1bf      	bne.n	8016f80 <_scanf_i+0xb8>
 8017000:	2310      	movs	r3, #16
 8017002:	6063      	str	r3, [r4, #4]
 8017004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017008:	e7a2      	b.n	8016f50 <_scanf_i+0x88>
 801700a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801700e:	6022      	str	r2, [r4, #0]
 8017010:	780b      	ldrb	r3, [r1, #0]
 8017012:	f805 3b01 	strb.w	r3, [r5], #1
 8017016:	e7de      	b.n	8016fd6 <_scanf_i+0x10e>
 8017018:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801701c:	4631      	mov	r1, r6
 801701e:	4650      	mov	r0, sl
 8017020:	4798      	blx	r3
 8017022:	2800      	cmp	r0, #0
 8017024:	d0df      	beq.n	8016fe6 <_scanf_i+0x11e>
 8017026:	6823      	ldr	r3, [r4, #0]
 8017028:	05db      	lsls	r3, r3, #23
 801702a:	d50d      	bpl.n	8017048 <_scanf_i+0x180>
 801702c:	42bd      	cmp	r5, r7
 801702e:	d909      	bls.n	8017044 <_scanf_i+0x17c>
 8017030:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017034:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017038:	4632      	mov	r2, r6
 801703a:	4650      	mov	r0, sl
 801703c:	4798      	blx	r3
 801703e:	f105 39ff 	add.w	r9, r5, #4294967295
 8017042:	464d      	mov	r5, r9
 8017044:	42bd      	cmp	r5, r7
 8017046:	d02d      	beq.n	80170a4 <_scanf_i+0x1dc>
 8017048:	6822      	ldr	r2, [r4, #0]
 801704a:	f012 0210 	ands.w	r2, r2, #16
 801704e:	d113      	bne.n	8017078 <_scanf_i+0x1b0>
 8017050:	702a      	strb	r2, [r5, #0]
 8017052:	6863      	ldr	r3, [r4, #4]
 8017054:	9e01      	ldr	r6, [sp, #4]
 8017056:	4639      	mov	r1, r7
 8017058:	4650      	mov	r0, sl
 801705a:	47b0      	blx	r6
 801705c:	6821      	ldr	r1, [r4, #0]
 801705e:	f8d8 3000 	ldr.w	r3, [r8]
 8017062:	f011 0f20 	tst.w	r1, #32
 8017066:	d013      	beq.n	8017090 <_scanf_i+0x1c8>
 8017068:	1d1a      	adds	r2, r3, #4
 801706a:	f8c8 2000 	str.w	r2, [r8]
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	6018      	str	r0, [r3, #0]
 8017072:	68e3      	ldr	r3, [r4, #12]
 8017074:	3301      	adds	r3, #1
 8017076:	60e3      	str	r3, [r4, #12]
 8017078:	1bed      	subs	r5, r5, r7
 801707a:	44ab      	add	fp, r5
 801707c:	6925      	ldr	r5, [r4, #16]
 801707e:	445d      	add	r5, fp
 8017080:	6125      	str	r5, [r4, #16]
 8017082:	2000      	movs	r0, #0
 8017084:	b007      	add	sp, #28
 8017086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801708a:	f04f 0b00 	mov.w	fp, #0
 801708e:	e7ca      	b.n	8017026 <_scanf_i+0x15e>
 8017090:	1d1a      	adds	r2, r3, #4
 8017092:	f8c8 2000 	str.w	r2, [r8]
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	f011 0f01 	tst.w	r1, #1
 801709c:	bf14      	ite	ne
 801709e:	8018      	strhne	r0, [r3, #0]
 80170a0:	6018      	streq	r0, [r3, #0]
 80170a2:	e7e6      	b.n	8017072 <_scanf_i+0x1aa>
 80170a4:	2001      	movs	r0, #1
 80170a6:	e7ed      	b.n	8017084 <_scanf_i+0x1bc>
 80170a8:	08017700 	.word	0x08017700
 80170ac:	08016751 	.word	0x08016751
 80170b0:	08015579 	.word	0x08015579
 80170b4:	08017ecc 	.word	0x08017ecc

080170b8 <__sccl>:
 80170b8:	b570      	push	{r4, r5, r6, lr}
 80170ba:	780b      	ldrb	r3, [r1, #0]
 80170bc:	4604      	mov	r4, r0
 80170be:	2b5e      	cmp	r3, #94	; 0x5e
 80170c0:	bf0b      	itete	eq
 80170c2:	784b      	ldrbeq	r3, [r1, #1]
 80170c4:	1c48      	addne	r0, r1, #1
 80170c6:	1c88      	addeq	r0, r1, #2
 80170c8:	2200      	movne	r2, #0
 80170ca:	bf08      	it	eq
 80170cc:	2201      	moveq	r2, #1
 80170ce:	1e61      	subs	r1, r4, #1
 80170d0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80170d4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80170d8:	42a9      	cmp	r1, r5
 80170da:	d1fb      	bne.n	80170d4 <__sccl+0x1c>
 80170dc:	b90b      	cbnz	r3, 80170e2 <__sccl+0x2a>
 80170de:	3801      	subs	r0, #1
 80170e0:	bd70      	pop	{r4, r5, r6, pc}
 80170e2:	f082 0201 	eor.w	r2, r2, #1
 80170e6:	54e2      	strb	r2, [r4, r3]
 80170e8:	4605      	mov	r5, r0
 80170ea:	4628      	mov	r0, r5
 80170ec:	f810 1b01 	ldrb.w	r1, [r0], #1
 80170f0:	292d      	cmp	r1, #45	; 0x2d
 80170f2:	d006      	beq.n	8017102 <__sccl+0x4a>
 80170f4:	295d      	cmp	r1, #93	; 0x5d
 80170f6:	d0f3      	beq.n	80170e0 <__sccl+0x28>
 80170f8:	b909      	cbnz	r1, 80170fe <__sccl+0x46>
 80170fa:	4628      	mov	r0, r5
 80170fc:	e7f0      	b.n	80170e0 <__sccl+0x28>
 80170fe:	460b      	mov	r3, r1
 8017100:	e7f1      	b.n	80170e6 <__sccl+0x2e>
 8017102:	786e      	ldrb	r6, [r5, #1]
 8017104:	2e5d      	cmp	r6, #93	; 0x5d
 8017106:	d0fa      	beq.n	80170fe <__sccl+0x46>
 8017108:	42b3      	cmp	r3, r6
 801710a:	dcf8      	bgt.n	80170fe <__sccl+0x46>
 801710c:	3502      	adds	r5, #2
 801710e:	4619      	mov	r1, r3
 8017110:	3101      	adds	r1, #1
 8017112:	428e      	cmp	r6, r1
 8017114:	5462      	strb	r2, [r4, r1]
 8017116:	dcfb      	bgt.n	8017110 <__sccl+0x58>
 8017118:	1af1      	subs	r1, r6, r3
 801711a:	3901      	subs	r1, #1
 801711c:	1c58      	adds	r0, r3, #1
 801711e:	42b3      	cmp	r3, r6
 8017120:	bfa8      	it	ge
 8017122:	2100      	movge	r1, #0
 8017124:	1843      	adds	r3, r0, r1
 8017126:	e7e0      	b.n	80170ea <__sccl+0x32>

08017128 <_raise_r>:
 8017128:	291f      	cmp	r1, #31
 801712a:	b538      	push	{r3, r4, r5, lr}
 801712c:	4604      	mov	r4, r0
 801712e:	460d      	mov	r5, r1
 8017130:	d904      	bls.n	801713c <_raise_r+0x14>
 8017132:	2316      	movs	r3, #22
 8017134:	6003      	str	r3, [r0, #0]
 8017136:	f04f 30ff 	mov.w	r0, #4294967295
 801713a:	bd38      	pop	{r3, r4, r5, pc}
 801713c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801713e:	b112      	cbz	r2, 8017146 <_raise_r+0x1e>
 8017140:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017144:	b94b      	cbnz	r3, 801715a <_raise_r+0x32>
 8017146:	4620      	mov	r0, r4
 8017148:	f000 f830 	bl	80171ac <_getpid_r>
 801714c:	462a      	mov	r2, r5
 801714e:	4601      	mov	r1, r0
 8017150:	4620      	mov	r0, r4
 8017152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017156:	f000 b817 	b.w	8017188 <_kill_r>
 801715a:	2b01      	cmp	r3, #1
 801715c:	d00a      	beq.n	8017174 <_raise_r+0x4c>
 801715e:	1c59      	adds	r1, r3, #1
 8017160:	d103      	bne.n	801716a <_raise_r+0x42>
 8017162:	2316      	movs	r3, #22
 8017164:	6003      	str	r3, [r0, #0]
 8017166:	2001      	movs	r0, #1
 8017168:	e7e7      	b.n	801713a <_raise_r+0x12>
 801716a:	2400      	movs	r4, #0
 801716c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017170:	4628      	mov	r0, r5
 8017172:	4798      	blx	r3
 8017174:	2000      	movs	r0, #0
 8017176:	e7e0      	b.n	801713a <_raise_r+0x12>

08017178 <raise>:
 8017178:	4b02      	ldr	r3, [pc, #8]	; (8017184 <raise+0xc>)
 801717a:	4601      	mov	r1, r0
 801717c:	6818      	ldr	r0, [r3, #0]
 801717e:	f7ff bfd3 	b.w	8017128 <_raise_r>
 8017182:	bf00      	nop
 8017184:	200002b4 	.word	0x200002b4

08017188 <_kill_r>:
 8017188:	b538      	push	{r3, r4, r5, lr}
 801718a:	4d07      	ldr	r5, [pc, #28]	; (80171a8 <_kill_r+0x20>)
 801718c:	2300      	movs	r3, #0
 801718e:	4604      	mov	r4, r0
 8017190:	4608      	mov	r0, r1
 8017192:	4611      	mov	r1, r2
 8017194:	602b      	str	r3, [r5, #0]
 8017196:	f7eb ffbd 	bl	8003114 <_kill>
 801719a:	1c43      	adds	r3, r0, #1
 801719c:	d102      	bne.n	80171a4 <_kill_r+0x1c>
 801719e:	682b      	ldr	r3, [r5, #0]
 80171a0:	b103      	cbz	r3, 80171a4 <_kill_r+0x1c>
 80171a2:	6023      	str	r3, [r4, #0]
 80171a4:	bd38      	pop	{r3, r4, r5, pc}
 80171a6:	bf00      	nop
 80171a8:	2000e8d8 	.word	0x2000e8d8

080171ac <_getpid_r>:
 80171ac:	f7eb bfaa 	b.w	8003104 <_getpid>

080171b0 <__submore>:
 80171b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171b4:	460c      	mov	r4, r1
 80171b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80171b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80171bc:	4299      	cmp	r1, r3
 80171be:	d11d      	bne.n	80171fc <__submore+0x4c>
 80171c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80171c4:	f7fd ffa6 	bl	8015114 <_malloc_r>
 80171c8:	b918      	cbnz	r0, 80171d2 <__submore+0x22>
 80171ca:	f04f 30ff 	mov.w	r0, #4294967295
 80171ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80171d6:	63a3      	str	r3, [r4, #56]	; 0x38
 80171d8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80171dc:	6360      	str	r0, [r4, #52]	; 0x34
 80171de:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80171e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80171e6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80171ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80171ee:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80171f2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80171f6:	6020      	str	r0, [r4, #0]
 80171f8:	2000      	movs	r0, #0
 80171fa:	e7e8      	b.n	80171ce <__submore+0x1e>
 80171fc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80171fe:	0077      	lsls	r7, r6, #1
 8017200:	463a      	mov	r2, r7
 8017202:	f7ff fc05 	bl	8016a10 <_realloc_r>
 8017206:	4605      	mov	r5, r0
 8017208:	2800      	cmp	r0, #0
 801720a:	d0de      	beq.n	80171ca <__submore+0x1a>
 801720c:	eb00 0806 	add.w	r8, r0, r6
 8017210:	4601      	mov	r1, r0
 8017212:	4632      	mov	r2, r6
 8017214:	4640      	mov	r0, r8
 8017216:	f7fd fc89 	bl	8014b2c <memcpy>
 801721a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801721e:	f8c4 8000 	str.w	r8, [r4]
 8017222:	e7e9      	b.n	80171f8 <__submore+0x48>

08017224 <_fstat_r>:
 8017224:	b538      	push	{r3, r4, r5, lr}
 8017226:	4d07      	ldr	r5, [pc, #28]	; (8017244 <_fstat_r+0x20>)
 8017228:	2300      	movs	r3, #0
 801722a:	4604      	mov	r4, r0
 801722c:	4608      	mov	r0, r1
 801722e:	4611      	mov	r1, r2
 8017230:	602b      	str	r3, [r5, #0]
 8017232:	f7eb ffce 	bl	80031d2 <_fstat>
 8017236:	1c43      	adds	r3, r0, #1
 8017238:	d102      	bne.n	8017240 <_fstat_r+0x1c>
 801723a:	682b      	ldr	r3, [r5, #0]
 801723c:	b103      	cbz	r3, 8017240 <_fstat_r+0x1c>
 801723e:	6023      	str	r3, [r4, #0]
 8017240:	bd38      	pop	{r3, r4, r5, pc}
 8017242:	bf00      	nop
 8017244:	2000e8d8 	.word	0x2000e8d8

08017248 <_isatty_r>:
 8017248:	b538      	push	{r3, r4, r5, lr}
 801724a:	4d06      	ldr	r5, [pc, #24]	; (8017264 <_isatty_r+0x1c>)
 801724c:	2300      	movs	r3, #0
 801724e:	4604      	mov	r4, r0
 8017250:	4608      	mov	r0, r1
 8017252:	602b      	str	r3, [r5, #0]
 8017254:	f7eb ffcd 	bl	80031f2 <_isatty>
 8017258:	1c43      	adds	r3, r0, #1
 801725a:	d102      	bne.n	8017262 <_isatty_r+0x1a>
 801725c:	682b      	ldr	r3, [r5, #0]
 801725e:	b103      	cbz	r3, 8017262 <_isatty_r+0x1a>
 8017260:	6023      	str	r3, [r4, #0]
 8017262:	bd38      	pop	{r3, r4, r5, pc}
 8017264:	2000e8d8 	.word	0x2000e8d8

08017268 <_malloc_usable_size_r>:
 8017268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801726c:	1f18      	subs	r0, r3, #4
 801726e:	2b00      	cmp	r3, #0
 8017270:	bfbc      	itt	lt
 8017272:	580b      	ldrlt	r3, [r1, r0]
 8017274:	18c0      	addlt	r0, r0, r3
 8017276:	4770      	bx	lr

08017278 <_init>:
 8017278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801727a:	bf00      	nop
 801727c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801727e:	bc08      	pop	{r3}
 8017280:	469e      	mov	lr, r3
 8017282:	4770      	bx	lr

08017284 <_fini>:
 8017284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017286:	bf00      	nop
 8017288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801728a:	bc08      	pop	{r3}
 801728c:	469e      	mov	lr, r3
 801728e:	4770      	bx	lr
