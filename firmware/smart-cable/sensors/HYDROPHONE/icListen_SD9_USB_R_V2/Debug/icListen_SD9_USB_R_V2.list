
icListen_SD9_USB_R_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be8  08016bc0  08016bc0  00026bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080177a8  080177a8  00030378  2**0
                  CONTENTS
  4 .ARM          00000008  080177a8  080177a8  000277a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080177b0  080177b0  00030378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080177b0  080177b0  000277b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080177b4  080177b4  000277b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  080177b8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030378  2**0
                  CONTENTS
 10 .bss          0000d76c  20000378  20000378  00030378  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000dae4  2000dae4  00030378  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY
 13 .debug_info   000329fb  00000000  00000000  000303a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000074c5  00000000  00000000  00062da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024d8  00000000  00000000  0006a268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002200  00000000  00000000  0006c740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b016  00000000  00000000  0006e940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033ba7  00000000  00000000  00099956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dad96  00000000  00000000  000cd4fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a8293  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a8fc  00000000  00000000  001a82e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000378 	.word	0x20000378
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016ba8 	.word	0x08016ba8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000037c 	.word	0x2000037c
 80001cc:	08016ba8 	.word	0x08016ba8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <UI_init>:
char temp_array[400];
const char* UI_commands_strings[]={"help here\r"};


void UI_init(UI_typedef* UI_obj)
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b096      	sub	sp, #88	; 0x58
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	UI_messages_init(UI_obj);
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f000 f967 	bl	8000880 <UI_messages_init>


	osMessageQDef(UI_events_q, 20, uint8_t);
 80005b2:	4b20      	ldr	r3, [pc, #128]	; (8000634 <UI_init+0x90>)
 80005b4:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80005b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->events_q= osMessageCreate(osMessageQ(UI_events_q), NULL);
 80005be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f011 f88e 	bl	80116e6 <osMessageCreate>
 80005ca:	4602      	mov	r2, r0
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	609a      	str	r2, [r3, #8]

	osMessageQDef(UI_media_rx_q, 20, uint16_t);
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <UI_init+0x94>)
 80005d2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->media_rx_messages_q= osMessageCreate(osMessageQ(UI_media_rx_q), NULL);
 80005dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f011 f87f 	bl	80116e6 <osMessageCreate>
 80005e8:	4602      	mov	r2, r0
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	601a      	str	r2, [r3, #0]

	osMessageQDef(UI_media_tx_q, 200, uint8_t);
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <UI_init+0x98>)
 80005f0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80005f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->media_tx_q = osMessageCreate(osMessageQ(UI_media_tx_q), NULL);
 80005fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f011 f870 	bl	80116e6 <osMessageCreate>
 8000606:	4602      	mov	r2, r0
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	605a      	str	r2, [r3, #4]

	osThreadDef(UI_task, UI_loop, osPriorityNormal, 0, 256);
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <UI_init+0x9c>)
 800060e:	f107 040c 	add.w	r4, r7, #12
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(UI_task), UI_obj);
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	4618      	mov	r0, r3
 8000628:	f010 fffd 	bl	8011626 <osThreadCreate>
}
 800062c:	bf00      	nop
 800062e:	3758      	adds	r7, #88	; 0x58
 8000630:	46bd      	mov	sp, r7
 8000632:	bdb0      	pop	{r4, r5, r7, pc}
 8000634:	08016bd4 	.word	0x08016bd4
 8000638:	08016be4 	.word	0x08016be4
 800063c:	08016bf4 	.word	0x08016bf4
 8000640:	08016c04 	.word	0x08016c04

08000644 <UI_loop>:


void UI_loop(UI_typedef* UI_obj)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	 uint16_t msg_indx;
	 for(;;)
	 {
		if(xQueueReceive(UI_obj->media_rx_messages_q,&msg_indx,osWaitForever))
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f107 010a 	add.w	r1, r7, #10
 8000654:	f04f 32ff 	mov.w	r2, #4294967295
 8000658:	4618      	mov	r0, r3
 800065a:	f011 fca9 	bl	8011fb0 <xQueueReceive>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0f3      	beq.n	800064c <UI_loop+0x8>
		{   uint8_t* msg=UI_obj->rx_buffer+msg_indx;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	330e      	adds	r3, #14
 8000668:	897a      	ldrh	r2, [r7, #10]
 800066a:	4413      	add	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]
			UI_parse_message(UI_obj,msg);
 800066e:	68f9      	ldr	r1, [r7, #12]
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f000 f8c7 	bl	8000804 <UI_parse_message>
		if(xQueueReceive(UI_obj->media_rx_messages_q,&msg_indx,osWaitForever))
 8000676:	e7e9      	b.n	800064c <UI_loop+0x8>

08000678 <UI_media_process_byte>:

}


void UI_media_process_byte(UI_typedef* UI_obj,uint8_t rx_byte)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	if(UI_obj->media_status==UI_MEDIA_READY && rx_byte!=0x00)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7b5b      	ldrb	r3, [r3, #13]
 8000688:	2b0a      	cmp	r3, #10
 800068a:	d160      	bne.n	800074e <UI_media_process_byte+0xd6>
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d05d      	beq.n	800074e <UI_media_process_byte+0xd6>
	{
		UI_obj->rx_buffer[UI_obj->rx_buffer_indx]=rx_byte;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000698:	b29b      	uxth	r3, r3
 800069a:	461a      	mov	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4413      	add	r3, r2
 80006a0:	78fa      	ldrb	r2, [r7, #3]
 80006a2:	739a      	strb	r2, [r3, #14]
		if(rx_byte=='\r')
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	2b0d      	cmp	r3, #13
 80006a8:	d132      	bne.n	8000710 <UI_media_process_byte+0x98>
		{
			UI_obj->rx_buffer[UI_obj->rx_buffer_indx]=0x00;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4413      	add	r3, r2
 80006b8:	2200      	movs	r2, #0
 80006ba:	739a      	strb	r2, [r3, #14]
			osMessagePut(UI_obj->media_rx_messages_q,UI_obj->rx_buffer_new_string_indx,0);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6818      	ldr	r0, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	2200      	movs	r2, #0
 80006ca:	4619      	mov	r1, r3
 80006cc:	f011 f834 	bl	8011738 <osMessagePut>
			if(UI_obj->rx_buffer_indx>UI_RX_BUFFER_THR) UI_obj->rx_buffer_indx=0;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80006dc:	d907      	bls.n	80006ee <UI_media_process_byte+0x76>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 80006e6:	2200      	movs	r2, #0
 80006e8:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
 80006ec:	e008      	b.n	8000700 <UI_media_process_byte+0x88>
			else  UI_obj->rx_buffer_indx++;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	3301      	adds	r3, #1
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
			UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000706:	b29a      	uxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
 800070e:	e008      	b.n	8000722 <UI_media_process_byte+0xaa>
		}
		else UI_obj->rx_buffer_indx++;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000716:	b29b      	uxth	r3, r3
 8000718:	3301      	adds	r3, #1
 800071a:	b29a      	uxth	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
		if(UI_obj->rx_buffer_indx==UI_RX_BUFFER_SIZE)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000728:	b29b      	uxth	r3, r3
 800072a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800072e:	d11d      	bne.n	800076c <UI_media_process_byte+0xf4>
		{
			UI_obj->rx_buffer_indx=0;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2200      	movs	r2, #0
 8000734:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8000738:	2200      	movs	r2, #0
 800073a:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
			UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000744:	b29a      	uxth	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
		if(UI_obj->rx_buffer_indx==UI_RX_BUFFER_SIZE)
 800074c:	e00e      	b.n	800076c <UI_media_process_byte+0xf4>
		}
	}
	else
	{
		UI_obj->rx_buffer_indx=0;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8000756:	2200      	movs	r2, #0
 8000758:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
		UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000762:	b29a      	uxth	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
	}
}
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <UI_media_get_byte>:

uint8_t UI_media_get_byte(UI_typedef* UI_obj,uint8_t* tx_byte)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	osEvent res=osMessageGet(UI_obj->media_tx_q,0);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6859      	ldr	r1, [r3, #4]
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2200      	movs	r2, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f011 f815 	bl	80117b8 <osMessageGet>
	if(res.status==osEventMessage)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2b10      	cmp	r3, #16
 8000792:	d105      	bne.n	80007a0 <UI_media_get_byte+0x2c>
    {
		*tx_byte=res.value.v;
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	701a      	strb	r2, [r3, #0]
		return UI_F_OK;
 800079c:	2300      	movs	r3, #0
 800079e:	e000      	b.n	80007a2 <UI_media_get_byte+0x2e>
    }
  return UI_F_ERR;
 80007a0:	2301      	movs	r3, #1
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <UI_send_msg>:


void UI_send_msg(UI_typedef* UI_obj,uint8_t cmd_id,void* arg)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	60f8      	str	r0, [r7, #12]
 80007b2:	460b      	mov	r3, r1
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	72fb      	strb	r3, [r7, #11]
 memory_region_pointer*  ptr=arg;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	613b      	str	r3, [r7, #16]

 switch(cmd_id)
 80007bc:	7afb      	ldrb	r3, [r7, #11]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d01a      	beq.n	80007f8 <UI_send_msg+0x4e>
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d000      	beq.n	80007c8 <UI_send_msg+0x1e>
		   osMessagePut(UI_obj->media_tx_q,*((uint8_t*)(ptr->start_addr)+i),osWaitForever);
	   }
     break;
 }

}
 80007c6:	e018      	b.n	80007fa <UI_send_msg+0x50>
       for(int i=0;i<ptr->size;i++)
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	e00e      	b.n	80007ec <UI_send_msg+0x42>
		   osMessagePut(UI_obj->media_tx_q,*((uint8_t*)(ptr->start_addr)+i),osWaitForever);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6858      	ldr	r0, [r3, #4]
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	4413      	add	r3, r2
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	f04f 32ff 	mov.w	r2, #4294967295
 80007e0:	4619      	mov	r1, r3
 80007e2:	f010 ffa9 	bl	8011738 <osMessagePut>
       for(int i=0;i<ptr->size;i++)
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	3301      	adds	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d8eb      	bhi.n	80007ce <UI_send_msg+0x24>
     break;
 80007f6:	e000      	b.n	80007fa <UI_send_msg+0x50>
	 break;
 80007f8:	bf00      	nop
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <UI_parse_message>:
	return UI_F_ERR;
}


int UI_parse_message(UI_typedef* UI_obj,uint8_t* msg)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
 char* pch;
 pch=strtok(msg," ");
 800080e:	4919      	ldr	r1, [pc, #100]	; (8000874 <UI_parse_message+0x70>)
 8000810:	6838      	ldr	r0, [r7, #0]
 8000812:	f014 fa6b 	bl	8014cec <strtok>
 8000816:	60b8      	str	r0, [r7, #8]
 for(int i=0;i<UI_MSG_NUM_OF_FUNCTIONS;i++)
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	e022      	b.n	8000864 <UI_parse_message+0x60>
 {
	  if(strcmp(pch,UI_messages_strings[i])==0)
 800081e:	4a16      	ldr	r2, [pc, #88]	; (8000878 <UI_parse_message+0x74>)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000826:	4619      	mov	r1, r3
 8000828:	68b8      	ldr	r0, [r7, #8]
 800082a:	f7ff fcd1 	bl	80001d0 <strcmp>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d114      	bne.n	800085e <UI_parse_message+0x5a>
		{
			if(UI_functions[i](UI_obj,pch+strlen(pch)+1)==UI_F_OK) return UI_F_OK;
 8000834:	4a11      	ldr	r2, [pc, #68]	; (800087c <UI_parse_message+0x78>)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800083c:	68b8      	ldr	r0, [r7, #8]
 800083e:	f7ff fcd1 	bl	80001e4 <strlen>
 8000842:	4603      	mov	r3, r0
 8000844:	3301      	adds	r3, #1
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	4413      	add	r3, r2
 800084a:	4619      	mov	r1, r3
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	47a0      	blx	r4
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d101      	bne.n	800085a <UI_parse_message+0x56>
 8000856:	2300      	movs	r3, #0
 8000858:	e008      	b.n	800086c <UI_parse_message+0x68>
      else return UI_F_ERR;
 800085a:	2301      	movs	r3, #1
 800085c:	e006      	b.n	800086c <UI_parse_message+0x68>
 for(int i=0;i<UI_MSG_NUM_OF_FUNCTIONS;i++)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	3301      	adds	r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b03      	cmp	r3, #3
 8000868:	ddd9      	ble.n	800081e <UI_parse_message+0x1a>
		}

 }
 return UI_F_ERR;
 800086a:	2301      	movs	r3, #1
}
 800086c:	4618      	mov	r0, r3
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	bd90      	pop	{r4, r7, pc}
 8000874:	08016c20 	.word	0x08016c20
 8000878:	200003a4 	.word	0x200003a4
 800087c:	20000394 	.word	0x20000394

08000880 <UI_messages_init>:

void UI_messages_init(UI_typedef* UI_obj)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	UI_functions[UI_MSG_SET] = UI_MSG_SET_f;
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <UI_messages_init+0x44>)
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <UI_messages_init+0x48>)
 800088c:	601a      	str	r2, [r3, #0]
	UI_functions[UI_MSG_SHOW] = UI_MSG_SHOW_f;
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <UI_messages_init+0x44>)
 8000890:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <UI_messages_init+0x4c>)
 8000892:	605a      	str	r2, [r3, #4]
	UI_functions[UI_MSG_RESET] = UI_MSG_RESET_f;
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <UI_messages_init+0x44>)
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <UI_messages_init+0x50>)
 8000898:	609a      	str	r2, [r3, #8]
	UI_functions[UI_MSG_HELP] = UI_MSG_HELP_f;
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <UI_messages_init+0x44>)
 800089c:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <UI_messages_init+0x54>)
 800089e:	60da      	str	r2, [r3, #12]

	UI_messages_strings[UI_MSG_SET] = "set";
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <UI_messages_init+0x58>)
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <UI_messages_init+0x5c>)
 80008a4:	601a      	str	r2, [r3, #0]
	UI_messages_strings[UI_MSG_SHOW] = "show";
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <UI_messages_init+0x58>)
 80008a8:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <UI_messages_init+0x60>)
 80008aa:	605a      	str	r2, [r3, #4]
	UI_messages_strings[UI_MSG_RESET] = "reset";
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <UI_messages_init+0x58>)
 80008ae:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <UI_messages_init+0x64>)
 80008b0:	609a      	str	r2, [r3, #8]
	UI_messages_strings[UI_MSG_HELP] = "help";
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <UI_messages_init+0x58>)
 80008b4:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <UI_messages_init+0x68>)
 80008b6:	60da      	str	r2, [r3, #12]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	20000394 	.word	0x20000394
 80008c8:	08000c0d 	.word	0x08000c0d
 80008cc:	080009b5 	.word	0x080009b5
 80008d0:	0800091d 	.word	0x0800091d
 80008d4:	080008ed 	.word	0x080008ed
 80008d8:	200003a4 	.word	0x200003a4
 80008dc:	08016c24 	.word	0x08016c24
 80008e0:	08016c28 	.word	0x08016c28
 80008e4:	08016c30 	.word	0x08016c30
 80008e8:	08016c38 	.word	0x08016c38

080008ec <UI_MSG_HELP_f>:

int UI_MSG_HELP_f(UI_typedef* UI_obj,uint8_t* msg)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
	char * pch;
	memory_region_pointer ptr;

	pch = strtok (NULL," ");//subcomand
 80008f6:	4908      	ldr	r1, [pc, #32]	; (8000918 <UI_MSG_HELP_f+0x2c>)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f014 f9f7 	bl	8014cec <strtok>
 80008fe:	6178      	str	r0, [r7, #20]
	osMessagePut(UI_obj->events_q,UI_EVNT_HELP,1);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	2201      	movs	r2, #1
 8000906:	2103      	movs	r1, #3
 8000908:	4618      	mov	r0, r3
 800090a:	f010 ff15 	bl	8011738 <osMessagePut>
	return UI_F_OK;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	08016c20 	.word	0x08016c20

0800091c <UI_MSG_RESET_f>:

int UI_MSG_RESET_f(UI_typedef* UI_obj,uint8_t* msg)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	char * pch;
	memory_region_pointer ptr;

	pch = strtok (NULL," ");//subcomand
 8000926:	491f      	ldr	r1, [pc, #124]	; (80009a4 <UI_MSG_RESET_f+0x88>)
 8000928:	2000      	movs	r0, #0
 800092a:	f014 f9df 	bl	8014cec <strtok>
 800092e:	6178      	str	r0, [r7, #20]
	if(strcmp(pch,"settings")==0){
 8000930:	491d      	ldr	r1, [pc, #116]	; (80009a8 <UI_MSG_RESET_f+0x8c>)
 8000932:	6978      	ldr	r0, [r7, #20]
 8000934:	f7ff fc4c 	bl	80001d0 <strcmp>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d126      	bne.n	800098c <UI_MSG_RESET_f+0x70>
		icListen.settings->wav_sample_rate=ICLISTEN_DEFAULT_WAV_SAMPLE_RATE;
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <UI_MSG_RESET_f+0x90>)
 8000940:	6a1b      	ldr	r3, [r3, #32]
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
 8000946:	2200      	movs	r2, #0
 8000948:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 800094c:	705a      	strb	r2, [r3, #1]
 800094e:	2200      	movs	r2, #0
 8000950:	709a      	strb	r2, [r3, #2]
 8000952:	2200      	movs	r2, #0
 8000954:	70da      	strb	r2, [r3, #3]
		icListen.settings->wav_sample_bit_depth=ICLISTEN_DEFAULT_WAV_SAMPLE_BIT_DEPTH;
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <UI_MSG_RESET_f+0x90>)
 8000958:	6a1b      	ldr	r3, [r3, #32]
 800095a:	2200      	movs	r2, #0
 800095c:	f042 0218 	orr.w	r2, r2, #24
 8000960:	711a      	strb	r2, [r3, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	715a      	strb	r2, [r3, #5]
 8000966:	2200      	movs	r2, #0
 8000968:	719a      	strb	r2, [r3, #6]
 800096a:	2200      	movs	r2, #0
 800096c:	71da      	strb	r2, [r3, #7]
		icListen.settings->file_duration=ICLISTEN_DEFAULT_FILE_DURATION;
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <UI_MSG_RESET_f+0x90>)
 8000970:	6a1b      	ldr	r3, [r3, #32]
 8000972:	2200      	movs	r2, #0
 8000974:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 8000978:	721a      	strb	r2, [r3, #8]
 800097a:	2200      	movs	r2, #0
 800097c:	725a      	strb	r2, [r3, #9]
 800097e:	2200      	movs	r2, #0
 8000980:	729a      	strb	r2, [r3, #10]
 8000982:	2200      	movs	r2, #0
 8000984:	72da      	strb	r2, [r3, #11]
		mcu_flash_save(&mcu_flash);
 8000986:	480a      	ldr	r0, [pc, #40]	; (80009b0 <UI_MSG_RESET_f+0x94>)
 8000988:	f001 fb02 	bl	8001f90 <mcu_flash_save>
	}
	osMessagePut(UI_obj->events_q,UI_EVNT_RESET,1);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	2201      	movs	r2, #1
 8000992:	2102      	movs	r1, #2
 8000994:	4618      	mov	r0, r3
 8000996:	f010 fecf 	bl	8011738 <osMessagePut>
	return UI_F_OK;
 800099a:	2300      	movs	r3, #0
}
 800099c:	4618      	mov	r0, r3
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	08016c20 	.word	0x08016c20
 80009a8:	08016c40 	.word	0x08016c40
 80009ac:	20000800 	.word	0x20000800
 80009b0:	20000e04 	.word	0x20000e04

080009b4 <UI_MSG_SHOW_f>:

int UI_MSG_SHOW_f(UI_typedef* UI_obj,uint8_t* msg)
{
 80009b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009b8:	b092      	sub	sp, #72	; 0x48
 80009ba:	af0c      	add	r7, sp, #48	; 0x30
 80009bc:	60f8      	str	r0, [r7, #12]
 80009be:	60b9      	str	r1, [r7, #8]
	char * pch;
	pch = strtok (NULL," ");//subcomand
 80009c0:	4982      	ldr	r1, [pc, #520]	; (8000bcc <UI_MSG_SHOW_f+0x218>)
 80009c2:	2000      	movs	r0, #0
 80009c4:	f014 f992 	bl	8014cec <strtok>
 80009c8:	6138      	str	r0, [r7, #16]

	if(strcmp(pch,"sensor")==0){
 80009ca:	4981      	ldr	r1, [pc, #516]	; (8000bd0 <UI_MSG_SHOW_f+0x21c>)
 80009cc:	6938      	ldr	r0, [r7, #16]
 80009ce:	f7ff fbff 	bl	80001d0 <strcmp>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d14e      	bne.n	8000a76 <UI_MSG_SHOW_f+0xc2>
                           "WAV sample rate: %d\r"
                           "Seq err:%d\r"
				           "Last msg num:%d\r"
				           "Files created:%d\r"
				           "Disc free:%d\r"
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.last_collect_msg_num,files_created,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 80009d8:	4b7e      	ldr	r3, [pc, #504]	; (8000bd4 <UI_MSG_SHOW_f+0x220>)
 80009da:	7f1b      	ldrb	r3, [r3, #28]
		sprintf(temp_array,"Device type: %d\r"
 80009dc:	469e      	mov	lr, r3
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.last_collect_msg_num,files_created,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 80009de:	4b7d      	ldr	r3, [pc, #500]	; (8000bd4 <UI_MSG_SHOW_f+0x220>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
		sprintf(temp_array,"Device type: %d\r"
 80009e2:	4698      	mov	r8, r3
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.last_collect_msg_num,files_created,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 80009e4:	4b7b      	ldr	r3, [pc, #492]	; (8000bd4 <UI_MSG_SHOW_f+0x220>)
 80009e6:	7f5b      	ldrb	r3, [r3, #29]
		sprintf(temp_array,"Device type: %d\r"
 80009e8:	607b      	str	r3, [r7, #4]
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.last_collect_msg_num,files_created,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 80009ea:	4b7a      	ldr	r3, [pc, #488]	; (8000bd4 <UI_MSG_SHOW_f+0x220>)
 80009ec:	6a1b      	ldr	r3, [r3, #32]
		sprintf(temp_array,"Device type: %d\r"
 80009ee:	689b      	ldr	r3, [r3, #8]
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.last_collect_msg_num,files_created,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 80009f0:	4a78      	ldr	r2, [pc, #480]	; (8000bd4 <UI_MSG_SHOW_f+0x220>)
 80009f2:	6a12      	ldr	r2, [r2, #32]
		sprintf(temp_array,"Device type: %d\r"
 80009f4:	6852      	ldr	r2, [r2, #4]
 80009f6:	603a      	str	r2, [r7, #0]
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.last_collect_msg_num,files_created,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 80009f8:	4976      	ldr	r1, [pc, #472]	; (8000bd4 <UI_MSG_SHOW_f+0x220>)
 80009fa:	6a09      	ldr	r1, [r1, #32]
		sprintf(temp_array,"Device type: %d\r"
 80009fc:	6809      	ldr	r1, [r1, #0]
 80009fe:	4875      	ldr	r0, [pc, #468]	; (8000bd4 <UI_MSG_SHOW_f+0x220>)
 8000a00:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8000a02:	4c74      	ldr	r4, [pc, #464]	; (8000bd4 <UI_MSG_SHOW_f+0x220>)
 8000a04:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8000a06:	4d74      	ldr	r5, [pc, #464]	; (8000bd8 <UI_MSG_SHOW_f+0x224>)
 8000a08:	682d      	ldr	r5, [r5, #0]
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.last_collect_msg_num,files_created,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000a0a:	4e74      	ldr	r6, [pc, #464]	; (8000bdc <UI_MSG_SHOW_f+0x228>)
 8000a0c:	f896 6910 	ldrb.w	r6, [r6, #2320]	; 0x910
 8000a10:	46b4      	mov	ip, r6
		sprintf(temp_array,"Device type: %d\r"
 8000a12:	4e72      	ldr	r6, [pc, #456]	; (8000bdc <UI_MSG_SHOW_f+0x228>)
 8000a14:	4632      	mov	r2, r6
 8000a16:	f44f 7611 	mov.w	r6, #580	; 0x244
 8000a1a:	fb06 f60c 	mul.w	r6, r6, ip
 8000a1e:	4416      	add	r6, r2
 8000a20:	f506 7610 	add.w	r6, r6, #576	; 0x240
 8000a24:	6836      	ldr	r6, [r6, #0]
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.last_collect_msg_num,files_created,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000a26:	4a6d      	ldr	r2, [pc, #436]	; (8000bdc <UI_MSG_SHOW_f+0x228>)
 8000a28:	f892 c910 	ldrb.w	ip, [r2, #2320]	; 0x910
		sprintf(temp_array,"Device type: %d\r"
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	920a      	str	r2, [sp, #40]	; 0x28
 8000a30:	9609      	str	r6, [sp, #36]	; 0x24
 8000a32:	9508      	str	r5, [sp, #32]
 8000a34:	9407      	str	r4, [sp, #28]
 8000a36:	9006      	str	r0, [sp, #24]
 8000a38:	9105      	str	r1, [sp, #20]
 8000a3a:	683a      	ldr	r2, [r7, #0]
 8000a3c:	9204      	str	r2, [sp, #16]
 8000a3e:	9303      	str	r3, [sp, #12]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	9302      	str	r3, [sp, #8]
 8000a44:	4b66      	ldr	r3, [pc, #408]	; (8000be0 <UI_MSG_SHOW_f+0x22c>)
 8000a46:	9301      	str	r3, [sp, #4]
 8000a48:	4b66      	ldr	r3, [pc, #408]	; (8000be4 <UI_MSG_SHOW_f+0x230>)
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	4643      	mov	r3, r8
 8000a4e:	4672      	mov	r2, lr
 8000a50:	4965      	ldr	r1, [pc, #404]	; (8000be8 <UI_MSG_SHOW_f+0x234>)
 8000a52:	4866      	ldr	r0, [pc, #408]	; (8000bec <UI_MSG_SHOW_f+0x238>)
 8000a54:	f014 f8e4 	bl	8014c20 <siprintf>
		temp_ptr.start_addr=temp_array;
 8000a58:	4b65      	ldr	r3, [pc, #404]	; (8000bf0 <UI_MSG_SHOW_f+0x23c>)
 8000a5a:	4a64      	ldr	r2, [pc, #400]	; (8000bec <UI_MSG_SHOW_f+0x238>)
 8000a5c:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000a5e:	4863      	ldr	r0, [pc, #396]	; (8000bec <UI_MSG_SHOW_f+0x238>)
 8000a60:	f7ff fbc0 	bl	80001e4 <strlen>
 8000a64:	4603      	mov	r3, r0
 8000a66:	4a62      	ldr	r2, [pc, #392]	; (8000bf0 <UI_MSG_SHOW_f+0x23c>)
 8000a68:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000a6a:	4a61      	ldr	r2, [pc, #388]	; (8000bf0 <UI_MSG_SHOW_f+0x23c>)
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	68f8      	ldr	r0, [r7, #12]
 8000a70:	f7ff fe9b 	bl	80007aa <UI_send_msg>
 8000a74:	e09c      	b.n	8000bb0 <UI_MSG_SHOW_f+0x1fc>
	}
	else if(strcmp(pch,"storage")==0){
 8000a76:	495f      	ldr	r1, [pc, #380]	; (8000bf4 <UI_MSG_SHOW_f+0x240>)
 8000a78:	6938      	ldr	r0, [r7, #16]
 8000a7a:	f7ff fba9 	bl	80001d0 <strcmp>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d146      	bne.n	8000b12 <UI_MSG_SHOW_f+0x15e>
		temp_array[0]=0x00;
 8000a84:	4b59      	ldr	r3, [pc, #356]	; (8000bec <UI_MSG_SHOW_f+0x238>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	e02e      	b.n	8000aee <UI_MSG_SHOW_f+0x13a>
		{
		 sprintf(temp_array+strlen(temp_array),"Disk: %d\rStatus: %d\rSize: %d KB\rFree space: %d KB\r",i,microsd_storage.disks[i].status,microsd_storage.disks[i].size,microsd_storage.disks[i].free_space);
 8000a90:	4856      	ldr	r0, [pc, #344]	; (8000bec <UI_MSG_SHOW_f+0x238>)
 8000a92:	f7ff fba7 	bl	80001e4 <strlen>
 8000a96:	4603      	mov	r3, r0
 8000a98:	4a54      	ldr	r2, [pc, #336]	; (8000bec <UI_MSG_SHOW_f+0x238>)
 8000a9a:	1898      	adds	r0, r3, r2
 8000a9c:	4a4f      	ldr	r2, [pc, #316]	; (8000bdc <UI_MSG_SHOW_f+0x228>)
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000aa4:	fb01 f303 	mul.w	r3, r1, r3
 8000aa8:	4413      	add	r3, r2
 8000aaa:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461d      	mov	r5, r3
 8000ab2:	4a4a      	ldr	r2, [pc, #296]	; (8000bdc <UI_MSG_SHOW_f+0x228>)
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000aba:	fb01 f303 	mul.w	r3, r1, r3
 8000abe:	4413      	add	r3, r2
 8000ac0:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4945      	ldr	r1, [pc, #276]	; (8000bdc <UI_MSG_SHOW_f+0x228>)
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	f44f 7411 	mov.w	r4, #580	; 0x244
 8000ace:	fb04 f202 	mul.w	r2, r4, r2
 8000ad2:	440a      	add	r2, r1
 8000ad4:	f502 7210 	add.w	r2, r2, #576	; 0x240
 8000ad8:	6812      	ldr	r2, [r2, #0]
 8000ada:	9201      	str	r2, [sp, #4]
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	462b      	mov	r3, r5
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	4945      	ldr	r1, [pc, #276]	; (8000bf8 <UI_MSG_SHOW_f+0x244>)
 8000ae4:	f014 f89c 	bl	8014c20 <siprintf>
		for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	3301      	adds	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	ddcd      	ble.n	8000a90 <UI_MSG_SHOW_f+0xdc>
		}
		temp_ptr.start_addr=temp_array;
 8000af4:	4b3e      	ldr	r3, [pc, #248]	; (8000bf0 <UI_MSG_SHOW_f+0x23c>)
 8000af6:	4a3d      	ldr	r2, [pc, #244]	; (8000bec <UI_MSG_SHOW_f+0x238>)
 8000af8:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000afa:	483c      	ldr	r0, [pc, #240]	; (8000bec <UI_MSG_SHOW_f+0x238>)
 8000afc:	f7ff fb72 	bl	80001e4 <strlen>
 8000b00:	4603      	mov	r3, r0
 8000b02:	4a3b      	ldr	r2, [pc, #236]	; (8000bf0 <UI_MSG_SHOW_f+0x23c>)
 8000b04:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000b06:	4a3a      	ldr	r2, [pc, #232]	; (8000bf0 <UI_MSG_SHOW_f+0x23c>)
 8000b08:	2101      	movs	r1, #1
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	f7ff fe4d 	bl	80007aa <UI_send_msg>
 8000b10:	e04e      	b.n	8000bb0 <UI_MSG_SHOW_f+0x1fc>
	}
	else if(strcmp(pch,"clock")==0){
 8000b12:	493a      	ldr	r1, [pc, #232]	; (8000bfc <UI_MSG_SHOW_f+0x248>)
 8000b14:	6938      	ldr	r0, [r7, #16]
 8000b16:	f7ff fb5b 	bl	80001d0 <strcmp>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d135      	bne.n	8000b8c <UI_MSG_SHOW_f+0x1d8>
		temp_array[0]=0x00;
 8000b20:	4b32      	ldr	r3, [pc, #200]	; (8000bec <UI_MSG_SHOW_f+0x238>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
		read_time(&rtc);
 8000b26:	4836      	ldr	r0, [pc, #216]	; (8000c00 <UI_MSG_SHOW_f+0x24c>)
 8000b28:	f001 fa94 	bl	8002054 <read_time>
        sprintf(temp_array,"Clock: %d:%d:%d  %d/%d/%d %d\r",rtc.time.Hours,rtc.time.Minutes,rtc.time.Seconds,rtc.date.Date,rtc.date.Month,rtc.date.Year,(uint32_t)rtc.timestamp);
 8000b2c:	4b34      	ldr	r3, [pc, #208]	; (8000c00 <UI_MSG_SHOW_f+0x24c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461e      	mov	r6, r3
 8000b32:	4b33      	ldr	r3, [pc, #204]	; (8000c00 <UI_MSG_SHOW_f+0x24c>)
 8000b34:	785b      	ldrb	r3, [r3, #1]
 8000b36:	469c      	mov	ip, r3
 8000b38:	4b31      	ldr	r3, [pc, #196]	; (8000c00 <UI_MSG_SHOW_f+0x24c>)
 8000b3a:	789b      	ldrb	r3, [r3, #2]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <UI_MSG_SHOW_f+0x24c>)
 8000b40:	7d9b      	ldrb	r3, [r3, #22]
 8000b42:	4618      	mov	r0, r3
 8000b44:	4b2e      	ldr	r3, [pc, #184]	; (8000c00 <UI_MSG_SHOW_f+0x24c>)
 8000b46:	7d5b      	ldrb	r3, [r3, #21]
 8000b48:	461c      	mov	r4, r3
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <UI_MSG_SHOW_f+0x24c>)
 8000b4c:	7ddb      	ldrb	r3, [r3, #23]
 8000b4e:	461d      	mov	r5, r3
 8000b50:	4b2b      	ldr	r3, [pc, #172]	; (8000c00 <UI_MSG_SHOW_f+0x24c>)
 8000b52:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000b56:	4613      	mov	r3, r2
 8000b58:	9304      	str	r3, [sp, #16]
 8000b5a:	9503      	str	r5, [sp, #12]
 8000b5c:	9402      	str	r4, [sp, #8]
 8000b5e:	9001      	str	r0, [sp, #4]
 8000b60:	9100      	str	r1, [sp, #0]
 8000b62:	4663      	mov	r3, ip
 8000b64:	4632      	mov	r2, r6
 8000b66:	4927      	ldr	r1, [pc, #156]	; (8000c04 <UI_MSG_SHOW_f+0x250>)
 8000b68:	4820      	ldr	r0, [pc, #128]	; (8000bec <UI_MSG_SHOW_f+0x238>)
 8000b6a:	f014 f859 	bl	8014c20 <siprintf>
		temp_ptr.start_addr=temp_array;
 8000b6e:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <UI_MSG_SHOW_f+0x23c>)
 8000b70:	4a1e      	ldr	r2, [pc, #120]	; (8000bec <UI_MSG_SHOW_f+0x238>)
 8000b72:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000b74:	481d      	ldr	r0, [pc, #116]	; (8000bec <UI_MSG_SHOW_f+0x238>)
 8000b76:	f7ff fb35 	bl	80001e4 <strlen>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	4a1c      	ldr	r2, [pc, #112]	; (8000bf0 <UI_MSG_SHOW_f+0x23c>)
 8000b7e:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000b80:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <UI_MSG_SHOW_f+0x23c>)
 8000b82:	2101      	movs	r1, #1
 8000b84:	68f8      	ldr	r0, [r7, #12]
 8000b86:	f7ff fe10 	bl	80007aa <UI_send_msg>
 8000b8a:	e011      	b.n	8000bb0 <UI_MSG_SHOW_f+0x1fc>
	}
	else{
		sprintf(temp_array,"sensor\rstorage\rclock\r");
 8000b8c:	491e      	ldr	r1, [pc, #120]	; (8000c08 <UI_MSG_SHOW_f+0x254>)
 8000b8e:	4817      	ldr	r0, [pc, #92]	; (8000bec <UI_MSG_SHOW_f+0x238>)
 8000b90:	f014 f846 	bl	8014c20 <siprintf>
		temp_ptr.start_addr=temp_array;
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <UI_MSG_SHOW_f+0x23c>)
 8000b96:	4a15      	ldr	r2, [pc, #84]	; (8000bec <UI_MSG_SHOW_f+0x238>)
 8000b98:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000b9a:	4814      	ldr	r0, [pc, #80]	; (8000bec <UI_MSG_SHOW_f+0x238>)
 8000b9c:	f7ff fb22 	bl	80001e4 <strlen>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <UI_MSG_SHOW_f+0x23c>)
 8000ba4:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <UI_MSG_SHOW_f+0x23c>)
 8000ba8:	2101      	movs	r1, #1
 8000baa:	68f8      	ldr	r0, [r7, #12]
 8000bac:	f7ff fdfd 	bl	80007aa <UI_send_msg>
	}
	osMessagePut(UI_obj->events_q,UI_EVNT_SHOW,1);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f010 fdbd 	bl	8011738 <osMessagePut>
	return UI_F_OK;
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bca:	bf00      	nop
 8000bcc:	08016c20 	.word	0x08016c20
 8000bd0:	08016c4c 	.word	0x08016c4c
 8000bd4:	20000800 	.word	0x20000800
 8000bd8:	20001b04 	.word	0x20001b04
 8000bdc:	20000e24 	.word	0x20000e24
 8000be0:	2000080a 	.word	0x2000080a
 8000be4:	20000802 	.word	0x20000802
 8000be8:	08016c54 	.word	0x08016c54
 8000bec:	200003bc 	.word	0x200003bc
 8000bf0:	200003b4 	.word	0x200003b4
 8000bf4:	08016d20 	.word	0x08016d20
 8000bf8:	08016d28 	.word	0x08016d28
 8000bfc:	08016d5c 	.word	0x08016d5c
 8000c00:	20001b18 	.word	0x20001b18
 8000c04:	08016d64 	.word	0x08016d64
 8000c08:	08016d84 	.word	0x08016d84

08000c0c <UI_MSG_SET_f>:

int UI_MSG_SET_f(UI_typedef* UI_obj,uint8_t* msg)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (NULL," ");//subcomand
 8000c16:	4933      	ldr	r1, [pc, #204]	; (8000ce4 <UI_MSG_SET_f+0xd8>)
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f014 f867 	bl	8014cec <strtok>
 8000c1e:	60f8      	str	r0, [r7, #12]
	if(strcmp(pch,"clock")==0){
 8000c20:	4931      	ldr	r1, [pc, #196]	; (8000ce8 <UI_MSG_SET_f+0xdc>)
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	f7ff fad4 	bl	80001d0 <strcmp>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d14d      	bne.n	8000cca <UI_MSG_SET_f+0xbe>
		pch = strtok (NULL,":");//hours
 8000c2e:	492f      	ldr	r1, [pc, #188]	; (8000cec <UI_MSG_SET_f+0xe0>)
 8000c30:	2000      	movs	r0, #0
 8000c32:	f014 f85b 	bl	8014cec <strtok>
 8000c36:	60f8      	str	r0, [r7, #12]
		rtc.time.Hours=atol(pch);
 8000c38:	68f8      	ldr	r0, [r7, #12]
 8000c3a:	f013 fad5 	bl	80141e8 <atol>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <UI_MSG_SET_f+0xe4>)
 8000c44:	701a      	strb	r2, [r3, #0]
		pch = strtok (NULL,":");//minutes
 8000c46:	4929      	ldr	r1, [pc, #164]	; (8000cec <UI_MSG_SET_f+0xe0>)
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f014 f84f 	bl	8014cec <strtok>
 8000c4e:	60f8      	str	r0, [r7, #12]
		rtc.time.Minutes=atol(pch);
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f013 fac9 	bl	80141e8 <atol>
 8000c56:	4603      	mov	r3, r0
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4b25      	ldr	r3, [pc, #148]	; (8000cf0 <UI_MSG_SET_f+0xe4>)
 8000c5c:	705a      	strb	r2, [r3, #1]
		pch = strtok (NULL," ");//seconds
 8000c5e:	4921      	ldr	r1, [pc, #132]	; (8000ce4 <UI_MSG_SET_f+0xd8>)
 8000c60:	2000      	movs	r0, #0
 8000c62:	f014 f843 	bl	8014cec <strtok>
 8000c66:	60f8      	str	r0, [r7, #12]
		rtc.time.Seconds=atol(pch);
 8000c68:	68f8      	ldr	r0, [r7, #12]
 8000c6a:	f013 fabd 	bl	80141e8 <atol>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <UI_MSG_SET_f+0xe4>)
 8000c74:	709a      	strb	r2, [r3, #2]
		pch = strtok (NULL,"/");//day
 8000c76:	491f      	ldr	r1, [pc, #124]	; (8000cf4 <UI_MSG_SET_f+0xe8>)
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f014 f837 	bl	8014cec <strtok>
 8000c7e:	60f8      	str	r0, [r7, #12]
		rtc.date.Date=atol(pch);
 8000c80:	68f8      	ldr	r0, [r7, #12]
 8000c82:	f013 fab1 	bl	80141e8 <atol>
 8000c86:	4603      	mov	r3, r0
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <UI_MSG_SET_f+0xe4>)
 8000c8c:	759a      	strb	r2, [r3, #22]
		pch = strtok (NULL,"/");//month
 8000c8e:	4919      	ldr	r1, [pc, #100]	; (8000cf4 <UI_MSG_SET_f+0xe8>)
 8000c90:	2000      	movs	r0, #0
 8000c92:	f014 f82b 	bl	8014cec <strtok>
 8000c96:	60f8      	str	r0, [r7, #12]
		rtc.date.Month=atol(pch);
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f013 faa5 	bl	80141e8 <atol>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <UI_MSG_SET_f+0xe4>)
 8000ca4:	755a      	strb	r2, [r3, #21]
		pch = strtok (NULL," ");//year
 8000ca6:	490f      	ldr	r1, [pc, #60]	; (8000ce4 <UI_MSG_SET_f+0xd8>)
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f014 f81f 	bl	8014cec <strtok>
 8000cae:	60f8      	str	r0, [r7, #12]
		rtc.date.Year=atol(pch);
 8000cb0:	68f8      	ldr	r0, [r7, #12]
 8000cb2:	f013 fa99 	bl	80141e8 <atol>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <UI_MSG_SET_f+0xe4>)
 8000cbc:	75da      	strb	r2, [r3, #23]
		rtc.date.WeekDay=RTC_WEEKDAY_MONDAY;
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <UI_MSG_SET_f+0xe4>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	751a      	strb	r2, [r3, #20]
		set_time(&rtc);
 8000cc4:	480a      	ldr	r0, [pc, #40]	; (8000cf0 <UI_MSG_SET_f+0xe4>)
 8000cc6:	f001 f9ff 	bl	80020c8 <set_time>
	}

	osMessagePut(UI_obj->events_q,UI_EVNT_SET,1);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f010 fd30 	bl	8011738 <osMessagePut>
	return UI_F_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	08016c20 	.word	0x08016c20
 8000ce8:	08016d5c 	.word	0x08016d5c
 8000cec:	08016d9c 	.word	0x08016d9c
 8000cf0:	20001b18 	.word	0x20001b18
 8000cf4:	08016da0 	.word	0x08016da0

08000cf8 <crc16_arc_update>:
};



uint16_t crc16_arc_update( char data, uint16_t accum )
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	460a      	mov	r2, r1
 8000d02:	71fb      	strb	r3, [r7, #7]
 8000d04:	4613      	mov	r3, r2
 8000d06:	80bb      	strh	r3, [r7, #4]
  unsigned char comb_value;
  comb_value = ( accum&0x00ff ) ^ (unsigned char)data;
 8000d08:	88bb      	ldrh	r3, [r7, #4]
 8000d0a:	b25a      	sxtb	r2, r3
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	4053      	eors	r3, r2
 8000d12:	b25b      	sxtb	r3, r3
 8000d14:	73fb      	strb	r3, [r7, #15]
  accum = ( accum >> 8 ) ^ crc16_arc_table[ comb_value ];
 8000d16:	88bb      	ldrh	r3, [r7, #4]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	4906      	ldr	r1, [pc, #24]	; (8000d38 <crc16_arc_update+0x40>)
 8000d20:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d24:	4053      	eors	r3, r2
 8000d26:	80bb      	strh	r3, [r7, #4]
  return ( accum );
 8000d28:	88bb      	ldrh	r3, [r7, #4]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000000 	.word	0x20000000

08000d3c <get_crc16_arc>:

uint16_t get_crc16_arc( uint8_t* data,uint16_t length )
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	807b      	strh	r3, [r7, #2]
  uint16_t accm=0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	81fb      	strh	r3, [r7, #14]

  for(int i=0;i<length;i++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	e00d      	b.n	8000d6e <get_crc16_arc+0x32>
  {
    accm=crc16_arc_update(data[i], accm);
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	4413      	add	r3, r2
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	89fa      	ldrh	r2, [r7, #14]
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ffca 	bl	8000cf8 <crc16_arc_update>
 8000d64:	4603      	mov	r3, r0
 8000d66:	81fb      	strh	r3, [r7, #14]
  for(int i=0;i<length;i++)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	887b      	ldrh	r3, [r7, #2]
 8000d70:	68ba      	ldr	r2, [r7, #8]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	dbed      	blt.n	8000d52 <get_crc16_arc+0x16>
  }

  return accm;
 8000d76:	89fb      	ldrh	r3, [r7, #14]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <sd_storage_disk_init>:

extern ss_pp sd_cards_ss[4];
extern UART_HandleTypeDef huart1;

F_RES sd_storage_disk_init(FATFS* fs,char* path)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
	if(f_mount(fs,path,1)==FR_OK) return F_OK;
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	6839      	ldr	r1, [r7, #0]
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f00f f824 	bl	800fddc <f_mount>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <sd_storage_disk_init+0x1e>
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e000      	b.n	8000da0 <sd_storage_disk_init+0x20>
	else return F_ERR;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <sd_storage_init>:
F_RES sd_storage_init(sd_storage_t* self_object)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	; 0x30
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  char tt[10];
  FRESULT res;
  DWORD fre_clust, fre_sect, tot_sect;
  FATFS*  fs;
  self_object->active_disk_indx=0;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
  self_object->num_of_discs=0;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f883 2918 	strb.w	r2, [r3, #2328]	; 0x918
  self_object->status=STORAGE_NOT_INITTIALIZED;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f883 2919 	strb.w	r2, [r3, #2329]	; 0x919

  MX_FATFS_Init();
 8000dc8:	f008 ff00 	bl	8009bcc <MX_FATFS_Init>

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dd0:	e080      	b.n	8000ed4 <sd_storage_init+0x12c>
  {
   sprintf(tt,"%d:",i);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dd8:	4953      	ldr	r1, [pc, #332]	; (8000f28 <sd_storage_init+0x180>)
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f013 ff20 	bl	8014c20 <siprintf>
   if(sd_storage_disk_init(&self_object->disks[i].fs,tt)==F_OK){
 8000de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de2:	f44f 7211 	mov.w	r2, #580	; 0x244
 8000de6:	fb02 f303 	mul.w	r3, r2, r3
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	f107 0214 	add.w	r2, r7, #20
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ffc3 	bl	8000d80 <sd_storage_disk_init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d15b      	bne.n	8000eb8 <sd_storage_init+0x110>
		  self_object->disks[i].status=DISK_PRESENT;
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e04:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000e08:	fb01 f303 	mul.w	r3, r1, r3
 8000e0c:	4413      	add	r3, r2
 8000e0e:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
		  self_object->num_of_discs++;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f893 3918 	ldrb.w	r3, [r3, #2328]	; 0x918
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f883 2918 	strb.w	r2, [r3, #2328]	; 0x918
  		  if(f_getfree(tt, &fre_clust, &fs)==FR_OK){
 8000e26:	f107 020c 	add.w	r2, r7, #12
 8000e2a:	f107 0110 	add.w	r1, r7, #16
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4618      	mov	r0, r3
 8000e34:	f010 f9a1 	bl	801117a <f_getfree>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d147      	bne.n	8000ece <sd_storage_init+0x126>
		    tot_sect = (self_object->disks[i].fs.n_fatent - 2) * self_object->disks[i].fs.csize;
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e42:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000e46:	fb01 f303 	mul.w	r3, r1, r3
 8000e4a:	4413      	add	r3, r2
 8000e4c:	331c      	adds	r3, #28
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3b02      	subs	r3, #2
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e56:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000e5a:	fb00 f202 	mul.w	r2, r0, r2
 8000e5e:	440a      	add	r2, r1
 8000e60:	320a      	adds	r2, #10
 8000e62:	8812      	ldrh	r2, [r2, #0]
 8000e64:	fb02 f303 	mul.w	r3, r2, r3
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
			fre_sect = fre_clust * self_object->disks[i].fs.csize;
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e6e:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000e72:	fb01 f303 	mul.w	r3, r1, r3
 8000e76:	4413      	add	r3, r2
 8000e78:	330a      	adds	r3, #10
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	fb02 f303 	mul.w	r3, r2, r3
 8000e84:	623b      	str	r3, [r7, #32]
			self_object->disks[i].size=tot_sect/2;
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	085a      	lsrs	r2, r3, #1
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e8e:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000e92:	fb00 f303 	mul.w	r3, r0, r3
 8000e96:	440b      	add	r3, r1
 8000e98:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000e9c:	601a      	str	r2, [r3, #0]
			self_object->disks[i].free_space=fre_sect/2;
 8000e9e:	6a3b      	ldr	r3, [r7, #32]
 8000ea0:	085a      	lsrs	r2, r3, #1
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea6:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000eaa:	fb00 f303 	mul.w	r3, r0, r3
 8000eae:	440b      	add	r3, r1
 8000eb0:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	e00a      	b.n	8000ece <sd_storage_init+0x126>
		  }
   }
   else{
		 self_object->disks[i].status=DISK_ABSENT;
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ebc:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000ec0:	fb01 f303 	mul.w	r3, r1, r3
 8000ec4:	4413      	add	r3, r2
 8000ec6:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	f77f af7b 	ble.w	8000dd2 <sd_storage_init+0x2a>
   }
  }

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000edc:	2300      	movs	r3, #0
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ee0:	e019      	b.n	8000f16 <sd_storage_init+0x16e>
  {
   if(self_object->disks[i].status==DISK_PRESENT){
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee6:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000eea:	fb01 f303 	mul.w	r3, r1, r3
 8000eee:	4413      	add	r3, r2
 8000ef0:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10a      	bne.n	8000f10 <sd_storage_init+0x168>
	   self_object->active_disk_indx=i;
 8000efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
	   self_object->status=STORAGE_INITTIALIZED;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2919 	strb.w	r2, [r3, #2329]	; 0x919
	   return F_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	e006      	b.n	8000f1e <sd_storage_init+0x176>
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f12:	3301      	adds	r3, #1
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	dde2      	ble.n	8000ee2 <sd_storage_init+0x13a>
   }
  }
  return F_ERR;
 8000f1c:	2301      	movs	r3, #1
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3730      	adds	r7, #48	; 0x30
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	08016da4 	.word	0x08016da4

08000f2c <sd_storage_link_ss>:

F_RES sd_storage_link_ss(sd_storage_t* self_object,uint8_t disk_num, uint16_t sd_ss_pin,GPIO_TypeDef* sd_ss_port)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	460b      	mov	r3, r1
 8000f38:	72fb      	strb	r3, [r7, #11]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	813b      	strh	r3, [r7, #8]
	  sd_cards_ss[disk_num].sd_ss_pin=sd_ss_pin;
 8000f3e:	7afb      	ldrb	r3, [r7, #11]
 8000f40:	4908      	ldr	r1, [pc, #32]	; (8000f64 <sd_storage_link_ss+0x38>)
 8000f42:	893a      	ldrh	r2, [r7, #8]
 8000f44:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
	  sd_cards_ss[disk_num].sd_ss_port=sd_ss_port;
 8000f48:	7afb      	ldrb	r3, [r7, #11]
 8000f4a:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <sd_storage_link_ss+0x38>)
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	4413      	add	r3, r2
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	605a      	str	r2, [r3, #4]
	  return F_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20001b40 	.word	0x20001b40

08000f68 <sd_storage_set_next_disk>:
F_RES sd_storage_read(sd_storage_t* self_object)
{

}
F_RES sd_storage_set_next_disk(sd_storage_t* self_object)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 int i=self_object->active_disk_indx+1;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 8000f76:	3301      	adds	r3, #1
 8000f78:	60fb      	str	r3, [r7, #12]
 for(;i<SD_STORAGE_NUM_DISKS;i++)
 8000f7a:	e015      	b.n	8000fa8 <sd_storage_set_next_disk+0x40>
 {
   if(self_object->disks[i].status==DISK_PRESENT){
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000f84:	fb01 f303 	mul.w	r3, r1, r3
 8000f88:	4413      	add	r3, r2
 8000f8a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d106      	bne.n	8000fa2 <sd_storage_set_next_disk+0x3a>
	 self_object->active_disk_indx=i;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
	 return F_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e006      	b.n	8000fb0 <sd_storage_set_next_disk+0x48>
 for(;i<SD_STORAGE_NUM_DISKS;i++)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	dde6      	ble.n	8000f7c <sd_storage_set_next_disk+0x14>
   }
 }
 return F_ERR;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	4a06      	ldr	r2, [pc, #24]	; (8000fec <vApplicationGetIdleTaskMemory+0x30>)
 8000fd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2280      	movs	r2, #128	; 0x80
 8000fd8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	2000054c 	.word	0x2000054c
 8000fec:	20000600 	.word	0x20000600

08000ff0 <icListen_init_sensor_status>:

icListen_object_typedef icListen;


void icListen_init_sensor_status(icListen_object_typedef* self_object)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	self_object->status=ICLISTEN_DISCONNECTED;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	775a      	strb	r2, [r3, #29]
	memset(self_object->build_date,0x00,18);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	330a      	adds	r3, #10
 8001002:	2212      	movs	r2, #18
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f013 fa36 	bl	8014478 <memset>
	memset(self_object->firmware_version,0x00,8);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3302      	adds	r3, #2
 8001010:	2208      	movs	r2, #8
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f013 fa2f 	bl	8014478 <memset>
	self_object->serial_number=0;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	801a      	strh	r2, [r3, #0]
	self_object->device_type=0;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	771a      	strb	r2, [r3, #28]
	self_object->last_collect_msg_num=0;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	625a      	str	r2, [r3, #36]	; 0x24
	self_object->collect_seq_num_err=0;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <icListen_prepare_collect_msg>:
	msg->basic_hdr.length=sizeof(icListen_setup_full_msg)-4-2;
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_setup_full_msg)-2);
}

void icListen_prepare_collect_msg(icListen_collect_short_mask_msg* msg,uint8_t mask)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	460b      	mov	r3, r1
 8001044:	70fb      	strb	r3, [r7, #3]
	msg->basic_hdr.sync=MSG_SYNC;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	222a      	movs	r2, #42	; 0x2a
 800104a:	701a      	strb	r2, [r3, #0]
    msg->basic_hdr.type=MSG_TYPE_COLLECT_DATA;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2243      	movs	r2, #67	; 0x43
 8001050:	705a      	strb	r2, [r3, #1]
    msg->mask_hdr.mask=mask;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	78fa      	ldrb	r2, [r7, #3]
 8001056:	711a      	strb	r2, [r3, #4]
    msg->basic_hdr.length=1;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	f042 0201 	orr.w	r2, r2, #1
 8001060:	709a      	strb	r2, [r3, #2]
 8001062:	2200      	movs	r2, #0
 8001064:	70da      	strb	r2, [r3, #3]
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_collect_short_mask_msg)-2);
 8001066:	2105      	movs	r1, #5
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff fe67 	bl	8000d3c <get_crc16_arc>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f8a3 2005 	strh.w	r2, [r3, #5]
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <icListen_prepare_enquire_device_msg>:

void icListen_prepare_enquire_device_msg(icListen_enquire_device_msg* msg)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	msg->basic_hdr.sync=MSG_SYNC;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	222a      	movs	r2, #42	; 0x2a
 800108c:	701a      	strb	r2, [r3, #0]
    msg->basic_hdr.type=MSG_TYPE_ENQUIRE_DEVICE;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2245      	movs	r2, #69	; 0x45
 8001092:	705a      	strb	r2, [r3, #1]
    msg->basic_hdr.length=0;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	709a      	strb	r2, [r3, #2]
 800109a:	2200      	movs	r2, #0
 800109c:	70da      	strb	r2, [r3, #3]
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_enquire_device_msg)-2);
 800109e:	2104      	movs	r1, #4
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff fe4b 	bl	8000d3c <get_crc16_arc>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	809a      	strh	r2, [r3, #4]

}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <icListen_parse_msg>:

F_RES icListen_parse_msg(uint8_t* msg,icListen_object_typedef* self_object,uint8_t* msg_type,memory_region_pointer* parsed_data_ptr)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b088      	sub	sp, #32
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	603b      	str	r3, [r7, #0]

	icListen_basic_header* basic_header=(icListen_basic_header*)msg;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	61fb      	str	r3, [r7, #28]
	icListen_status_basic_msg* status_msg=(icListen_status_basic_msg*)msg;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	61bb      	str	r3, [r7, #24]
	icListen_wav_full_header* collected_wav_header=(icListen_wav_full_header*)msg;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	617b      	str	r3, [r7, #20]

	uint16_t crc_msg=*(uint16_t*)(msg+basic_header->length+4);
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	885b      	ldrh	r3, [r3, #2]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	3304      	adds	r3, #4
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	827b      	strh	r3, [r7, #18]

	if(basic_header->sync==MSG_SYNC){
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b2a      	cmp	r3, #42	; 0x2a
 80010e6:	d173      	bne.n	80011d0 <icListen_parse_msg+0x11a>
	*msg_type=basic_header->type;
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	785a      	ldrb	r2, [r3, #1]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	701a      	strb	r2, [r3, #0]
	switch(basic_header->type){
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	785b      	ldrb	r3, [r3, #1]
 80010f4:	2b43      	cmp	r3, #67	; 0x43
 80010f6:	d033      	beq.n	8001160 <icListen_parse_msg+0xaa>
 80010f8:	2b45      	cmp	r3, #69	; 0x45
 80010fa:	d167      	bne.n	80011cc <icListen_parse_msg+0x116>
	     case MSG_TYPE_ENQUIRE_DEVICE:
	    	 if(crc_msg==get_crc16_arc(msg,(uint16_t)basic_header->length+4)){
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	885b      	ldrh	r3, [r3, #2]
 8001100:	b29b      	uxth	r3, r3
 8001102:	3304      	adds	r3, #4
 8001104:	b29b      	uxth	r3, r3
 8001106:	4619      	mov	r1, r3
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f7ff fe17 	bl	8000d3c <get_crc16_arc>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	8a7b      	ldrh	r3, [r7, #18]
 8001114:	4293      	cmp	r3, r2
 8001116:	d121      	bne.n	800115c <icListen_parse_msg+0xa6>
		    	  self_object->status=status_msg->status;
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	775a      	strb	r2, [r3, #29]
		    	  memcpy(self_object->build_date,status_msg->build_date,18);
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	f103 000a 	add.w	r0, r3, #10
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	330e      	adds	r3, #14
 800112c:	2212      	movs	r2, #18
 800112e:	4619      	mov	r1, r3
 8001130:	f013 f994 	bl	801445c <memcpy>
		    	  memcpy(self_object->firmware_version,status_msg->firmware_version,8);
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	1c98      	adds	r0, r3, #2
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	3306      	adds	r3, #6
 800113c:	2208      	movs	r2, #8
 800113e:	4619      	mov	r1, r3
 8001140:	f013 f98c 	bl	801445c <memcpy>
		    	  self_object->serial_number=status_msg->serial_number;
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	889b      	ldrh	r3, [r3, #4]
 8001148:	b29a      	uxth	r2, r3
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	801a      	strh	r2, [r3, #0]
		    	  self_object->device_type=status_msg->device_type;
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	771a      	strb	r2, [r3, #28]
		    	  return F_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	e03a      	b.n	80011d2 <icListen_parse_msg+0x11c>
	    	  }
	    	 else return F_ERR;
 800115c:	2301      	movs	r3, #1
 800115e:	e038      	b.n	80011d2 <icListen_parse_msg+0x11c>
	     break;
		 case MSG_TYPE_COLLECT_DATA:
			 if(collected_wav_header->basic_hdr.length>1){
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	885b      	ldrh	r3, [r3, #2]
 8001164:	b29b      	uxth	r3, r3
 8001166:	2b01      	cmp	r3, #1
 8001168:	d925      	bls.n	80011b6 <icListen_parse_msg+0x100>
			      if((self_object->last_collect_msg_num+1)!=collected_wav_header->wav_hdr.seq_num && self_object->last_collect_msg_num !=0){
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	3301      	adds	r3, #1
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	f8b2 2005 	ldrh.w	r2, [r2, #5]
 8001176:	b292      	uxth	r2, r2
 8001178:	4293      	cmp	r3, r2
 800117a:	d008      	beq.n	800118e <icListen_parse_msg+0xd8>
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	2b00      	cmp	r3, #0
 8001182:	d004      	beq.n	800118e <icListen_parse_msg+0xd8>
			    	  self_object->collect_seq_num_err++;
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	629a      	str	r2, [r3, #40]	; 0x28
			      }
			      self_object->last_collect_msg_num=collected_wav_header->wav_hdr.seq_num;
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001194:	b29b      	uxth	r3, r3
 8001196:	461a      	mov	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	625a      	str	r2, [r3, #36]	; 0x24
		    	  parsed_data_ptr->start_addr=msg+sizeof(icListen_wav_full_header);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f103 0213 	add.w	r2, r3, #19
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	601a      	str	r2, [r3, #0]
		    	  parsed_data_ptr->size=collected_wav_header->wav_hdr.num_of_bytes;
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	891b      	ldrh	r3, [r3, #8]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	461a      	mov	r2, r3
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	605a      	str	r2, [r3, #4]
			    //parsed_data_ptr->start_addr=msg;
				//parsed_data_ptr->size=collected_wav_header->basic_hdr.length+4;
				  return F_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e00d      	b.n	80011d2 <icListen_parse_msg+0x11c>
			 }
			 parsed_data_ptr->size=0;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2200      	movs	r2, #0
 80011ba:	711a      	strb	r2, [r3, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	715a      	strb	r2, [r3, #5]
 80011c0:	2200      	movs	r2, #0
 80011c2:	719a      	strb	r2, [r3, #6]
 80011c4:	2200      	movs	r2, #0
 80011c6:	71da      	strb	r2, [r3, #7]
		     return F_OK;
 80011c8:	2300      	movs	r3, #0
 80011ca:	e002      	b.n	80011d2 <icListen_parse_msg+0x11c>
		 break;
		 default:
			 return F_ERR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e000      	b.n	80011d2 <icListen_parse_msg+0x11c>
	     break;
	 };
	}
	else{
		return F_ERR;
 80011d0:	2301      	movs	r3, #1
	}
	return F_ERR;
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011dc:	b5b0      	push	{r4, r5, r7, lr}
 80011de:	b0ac      	sub	sp, #176	; 0xb0
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e2:	f001 fdff 	bl	8002de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e6:	f000 f8cd 	bl	8001384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ea:	f000 fa5d 	bl	80016a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80011ee:	f000 f98f 	bl	8001510 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80011f2:	f000 fa0f 	bl	8001614 <MX_USART1_UART_Init>
  MX_DMA_Init();
 80011f6:	f000 fa37 	bl	8001668 <MX_DMA_Init>
  MX_TIM2_Init();
 80011fa:	f000 f9bf 	bl	800157c <MX_TIM2_Init>
  MX_RTC_Init();
 80011fe:	f000 f92d 	bl	800145c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  UI_init(&user_interface);
 8001202:	484c      	ldr	r0, [pc, #304]	; (8001334 <main+0x158>)
 8001204:	f7ff f9ce 	bl	80005a4 <UI_init>
  HAL_UART_Receive_IT(&UI_UART,&(user_interface.media_rx_byte),1);
 8001208:	2201      	movs	r2, #1
 800120a:	494b      	ldr	r1, [pc, #300]	; (8001338 <main+0x15c>)
 800120c:	484b      	ldr	r0, [pc, #300]	; (800133c <main+0x160>)
 800120e:	f006 fd69 	bl	8007ce4 <HAL_UART_Receive_IT>
  mcu_flash_init(&mcu_flash,FLASH_SECTOR_11);
 8001212:	210b      	movs	r1, #11
 8001214:	484a      	ldr	r0, [pc, #296]	; (8001340 <main+0x164>)
 8001216:	f000 fe49 	bl	8001eac <mcu_flash_init>

  system_status=SYSTEM_STARTED;
 800121a:	4b4a      	ldr	r3, [pc, #296]	; (8001344 <main+0x168>)
 800121c:	220b      	movs	r2, #11
 800121e:	701a      	strb	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of AppliEvent */
  osMessageQDef(AppliEvent, 16, uint16_t);
 8001220:	4b49      	ldr	r3, [pc, #292]	; (8001348 <main+0x16c>)
 8001222:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8001226:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001228:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AppliEventHandle = osMessageCreate(osMessageQ(AppliEvent), NULL);
 800122c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f010 fa57 	bl	80116e6 <osMessageCreate>
 8001238:	4603      	mov	r3, r0
 800123a:	4a44      	ldr	r2, [pc, #272]	; (800134c <main+0x170>)
 800123c:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_rx */
  osMessageQDef(USB_rx, 10, uint32_t);
 800123e:	4b44      	ldr	r3, [pc, #272]	; (8001350 <main+0x174>)
 8001240:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001244:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001246:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  USB_rxHandle = osMessageCreate(osMessageQ(USB_rx), NULL);
 800124a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f010 fa48 	bl	80116e6 <osMessageCreate>
 8001256:	4603      	mov	r3, r0
 8001258:	4a3e      	ldr	r2, [pc, #248]	; (8001354 <main+0x178>)
 800125a:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_tx */
  osMessageQDef(USB_tx, 10, uint32_t);
 800125c:	4b3c      	ldr	r3, [pc, #240]	; (8001350 <main+0x174>)
 800125e:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8001262:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001264:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  USB_txHandle = osMessageCreate(osMessageQ(USB_tx), NULL);
 8001268:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f010 fa39 	bl	80116e6 <osMessageCreate>
 8001274:	4603      	mov	r3, r0
 8001276:	4a38      	ldr	r2, [pc, #224]	; (8001358 <main+0x17c>)
 8001278:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_w */
  osMessageQDef(storage_w, 5, uint32_t);
 800127a:	4b38      	ldr	r3, [pc, #224]	; (800135c <main+0x180>)
 800127c:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001280:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001282:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  storage_wHandle = osMessageCreate(osMessageQ(storage_w), NULL);
 8001286:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f010 fa2a 	bl	80116e6 <osMessageCreate>
 8001292:	4603      	mov	r3, r0
 8001294:	4a32      	ldr	r2, [pc, #200]	; (8001360 <main+0x184>)
 8001296:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8001298:	4b32      	ldr	r3, [pc, #200]	; (8001364 <main+0x188>)
 800129a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800129e:	461d      	mov	r5, r3
 80012a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80012ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f010 f9b7 	bl	8011626 <osThreadCreate>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4a2b      	ldr	r2, [pc, #172]	; (8001368 <main+0x18c>)
 80012bc:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_t */
  osThreadDef(storage_t, storage_f, osPriorityNormal, 0, 512);
 80012be:	4b2b      	ldr	r3, [pc, #172]	; (800136c <main+0x190>)
 80012c0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80012c4:	461d      	mov	r5, r3
 80012c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  storage_tHandle = osThreadCreate(osThread(storage_t), NULL);
 80012d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f010 f9a4 	bl	8011626 <osThreadCreate>
 80012de:	4603      	mov	r3, r0
 80012e0:	4a23      	ldr	r2, [pc, #140]	; (8001370 <main+0x194>)
 80012e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of icListen_t */
  osThreadDef(icListen_t, icListen_f, osPriorityNormal, 0, 512);
 80012e4:	4b23      	ldr	r3, [pc, #140]	; (8001374 <main+0x198>)
 80012e6:	f107 041c 	add.w	r4, r7, #28
 80012ea:	461d      	mov	r5, r3
 80012ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  icListen_tHandle = osThreadCreate(osThread(icListen_t), NULL);
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f010 f991 	bl	8011626 <osThreadCreate>
 8001304:	4603      	mov	r3, r0
 8001306:	4a1c      	ldr	r2, [pc, #112]	; (8001378 <main+0x19c>)
 8001308:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart_t */
  osThreadDef(uart_t, uart_f, osPriorityNormal, 0, 256);
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <main+0x1a0>)
 800130c:	463c      	mov	r4, r7
 800130e:	461d      	mov	r5, r3
 8001310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001314:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001318:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart_tHandle = osThreadCreate(osThread(uart_t), NULL);
 800131c:	463b      	mov	r3, r7
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f010 f980 	bl	8011626 <osThreadCreate>
 8001326:	4603      	mov	r3, r0
 8001328:	4a15      	ldr	r2, [pc, #84]	; (8001380 <main+0x1a4>)
 800132a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800132c:	f010 f974 	bl	8011618 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001330:	e7fe      	b.n	8001330 <main+0x154>
 8001332:	bf00      	nop
 8001334:	200009f0 	.word	0x200009f0
 8001338:	200009fc 	.word	0x200009fc
 800133c:	2000094c 	.word	0x2000094c
 8001340:	20000e04 	.word	0x20000e04
 8001344:	20001af8 	.word	0x20001af8
 8001348:	08016dd4 	.word	0x08016dd4
 800134c:	200009a0 	.word	0x200009a0
 8001350:	08016de4 	.word	0x08016de4
 8001354:	200009a4 	.word	0x200009a4
 8001358:	200009a8 	.word	0x200009a8
 800135c:	08016df4 	.word	0x08016df4
 8001360:	200009ac 	.word	0x200009ac
 8001364:	08016e04 	.word	0x08016e04
 8001368:	20000990 	.word	0x20000990
 800136c:	08016e20 	.word	0x08016e20
 8001370:	20000994 	.word	0x20000994
 8001374:	08016e3c 	.word	0x08016e3c
 8001378:	20000998 	.word	0x20000998
 800137c:	08016e58 	.word	0x08016e58
 8001380:	2000099c 	.word	0x2000099c

08001384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b094      	sub	sp, #80	; 0x50
 8001388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138a:	f107 0320 	add.w	r3, r7, #32
 800138e:	2230      	movs	r2, #48	; 0x30
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f013 f870 	bl	8014478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	4b29      	ldr	r3, [pc, #164]	; (8001454 <SystemClock_Config+0xd0>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	4a28      	ldr	r2, [pc, #160]	; (8001454 <SystemClock_Config+0xd0>)
 80013b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b6:	6413      	str	r3, [r2, #64]	; 0x40
 80013b8:	4b26      	ldr	r3, [pc, #152]	; (8001454 <SystemClock_Config+0xd0>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c4:	2300      	movs	r3, #0
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <SystemClock_Config+0xd4>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a22      	ldr	r2, [pc, #136]	; (8001458 <SystemClock_Config+0xd4>)
 80013ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b20      	ldr	r3, [pc, #128]	; (8001458 <SystemClock_Config+0xd4>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80013e0:	2305      	movs	r3, #5
 80013e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013ea:	2301      	movs	r3, #1
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ee:	2302      	movs	r3, #2
 80013f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80013f8:	230f      	movs	r3, #15
 80013fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80013fc:	2390      	movs	r3, #144	; 0x90
 80013fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001400:	2302      	movs	r3, #2
 8001402:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001404:	2305      	movs	r3, #5
 8001406:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001408:	f107 0320 	add.w	r3, r7, #32
 800140c:	4618      	mov	r0, r3
 800140e:	f004 fa45 	bl	800589c <HAL_RCC_OscConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001418:	f000 fd42 	bl	8001ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141c:	230f      	movs	r3, #15
 800141e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001420:	2302      	movs	r3, #2
 8001422:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001428:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800142c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800142e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001432:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	2103      	movs	r1, #3
 800143a:	4618      	mov	r0, r3
 800143c:	f004 fca6 	bl	8005d8c <HAL_RCC_ClockConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001446:	f000 fd2b 	bl	8001ea0 <Error_Handler>
  }
}
 800144a:	bf00      	nop
 800144c:	3750      	adds	r7, #80	; 0x50
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800
 8001458:	40007000 	.word	0x40007000

0800145c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001470:	2300      	movs	r3, #0
 8001472:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001474:	4b24      	ldr	r3, [pc, #144]	; (8001508 <MX_RTC_Init+0xac>)
 8001476:	4a25      	ldr	r2, [pc, #148]	; (800150c <MX_RTC_Init+0xb0>)
 8001478:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800147a:	4b23      	ldr	r3, [pc, #140]	; (8001508 <MX_RTC_Init+0xac>)
 800147c:	2200      	movs	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001480:	4b21      	ldr	r3, [pc, #132]	; (8001508 <MX_RTC_Init+0xac>)
 8001482:	227f      	movs	r2, #127	; 0x7f
 8001484:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001486:	4b20      	ldr	r3, [pc, #128]	; (8001508 <MX_RTC_Init+0xac>)
 8001488:	22ff      	movs	r2, #255	; 0xff
 800148a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800148c:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <MX_RTC_Init+0xac>)
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001492:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <MX_RTC_Init+0xac>)
 8001494:	2200      	movs	r2, #0
 8001496:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001498:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <MX_RTC_Init+0xac>)
 800149a:	2200      	movs	r2, #0
 800149c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800149e:	481a      	ldr	r0, [pc, #104]	; (8001508 <MX_RTC_Init+0xac>)
 80014a0:	f004 ff68 	bl	8006374 <HAL_RTC_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80014aa:	f000 fcf9 	bl	8001ea0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2200      	movs	r2, #0
 80014c6:	4619      	mov	r1, r3
 80014c8:	480f      	ldr	r0, [pc, #60]	; (8001508 <MX_RTC_Init+0xac>)
 80014ca:	f004 ffc9 	bl	8006460 <HAL_RTC_SetTime>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80014d4:	f000 fce4 	bl	8001ea0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80014d8:	2301      	movs	r3, #1
 80014da:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80014dc:	2301      	movs	r3, #1
 80014de:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80014e0:	2301      	movs	r3, #1
 80014e2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80014e8:	463b      	mov	r3, r7
 80014ea:	2200      	movs	r2, #0
 80014ec:	4619      	mov	r1, r3
 80014ee:	4806      	ldr	r0, [pc, #24]	; (8001508 <MX_RTC_Init+0xac>)
 80014f0:	f005 f8ae 	bl	8006650 <HAL_RTC_SetDate>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80014fa:	f000 fcd1 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	2000082c 	.word	0x2000082c
 800150c:	40002800 	.word	0x40002800

08001510 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <MX_SPI1_Init+0x64>)
 8001516:	4a18      	ldr	r2, [pc, #96]	; (8001578 <MX_SPI1_Init+0x68>)
 8001518:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <MX_SPI1_Init+0x64>)
 800151c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001520:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_SPI1_Init+0x64>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <MX_SPI1_Init+0x64>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_SPI1_Init+0x64>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_SPI1_Init+0x64>)
 8001536:	2200      	movs	r2, #0
 8001538:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_SPI1_Init+0x64>)
 800153c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001540:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_SPI1_Init+0x64>)
 8001544:	2208      	movs	r2, #8
 8001546:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001548:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <MX_SPI1_Init+0x64>)
 800154a:	2200      	movs	r2, #0
 800154c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_SPI1_Init+0x64>)
 8001550:	2200      	movs	r2, #0
 8001552:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001554:	4b07      	ldr	r3, [pc, #28]	; (8001574 <MX_SPI1_Init+0x64>)
 8001556:	2200      	movs	r2, #0
 8001558:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_SPI1_Init+0x64>)
 800155c:	220a      	movs	r2, #10
 800155e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <MX_SPI1_Init+0x64>)
 8001562:	f005 fa05 	bl	8006970 <HAL_SPI_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800156c:	f000 fc98 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	2000084c 	.word	0x2000084c
 8001578:	40013000 	.word	0x40013000

0800157c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001582:	f107 0308 	add.w	r3, r7, #8
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001590:	463b      	mov	r3, r7
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <MX_TIM2_Init+0x94>)
 800159a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800159e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015a0:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <MX_TIM2_Init+0x94>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a6:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <MX_TIM2_Init+0x94>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <MX_TIM2_Init+0x94>)
 80015ae:	f04f 32ff 	mov.w	r2, #4294967295
 80015b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b4:	4b16      	ldr	r3, [pc, #88]	; (8001610 <MX_TIM2_Init+0x94>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <MX_TIM2_Init+0x94>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015c0:	4813      	ldr	r0, [pc, #76]	; (8001610 <MX_TIM2_Init+0x94>)
 80015c2:	f005 fde9 	bl	8007198 <HAL_TIM_Base_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015cc:	f000 fc68 	bl	8001ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	4619      	mov	r1, r3
 80015dc:	480c      	ldr	r0, [pc, #48]	; (8001610 <MX_TIM2_Init+0x94>)
 80015de:	f005 ffa3 	bl	8007528 <HAL_TIM_ConfigClockSource>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015e8:	f000 fc5a 	bl	8001ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015f4:	463b      	mov	r3, r7
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_TIM2_Init+0x94>)
 80015fa:	f006 f9bf 	bl	800797c <HAL_TIMEx_MasterConfigSynchronization>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001604:	f000 fc4c 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000904 	.word	0x20000904

08001614 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <MX_USART1_UART_Init+0x50>)
 800161c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 8001620:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001624:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 800163a:	220c      	movs	r2, #12
 800163c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163e:	4b08      	ldr	r3, [pc, #32]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 800164c:	f006 fa26 	bl	8007a9c <HAL_UART_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001656:	f000 fc23 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	2000094c 	.word	0x2000094c
 8001664:	40011000 	.word	0x40011000

08001668 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_DMA_Init+0x3c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <MX_DMA_Init+0x3c>)
 8001678:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <MX_DMA_Init+0x3c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2105      	movs	r1, #5
 800168e:	203b      	movs	r0, #59	; 0x3b
 8001690:	f001 fcc6 	bl	8003020 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001694:	203b      	movs	r0, #59	; 0x3b
 8001696:	f001 fcdf 	bl	8003058 <HAL_NVIC_EnableIRQ>

}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800

080016a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	4b39      	ldr	r3, [pc, #228]	; (80017a8 <MX_GPIO_Init+0x100>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a38      	ldr	r2, [pc, #224]	; (80017a8 <MX_GPIO_Init+0x100>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b36      	ldr	r3, [pc, #216]	; (80017a8 <MX_GPIO_Init+0x100>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b32      	ldr	r3, [pc, #200]	; (80017a8 <MX_GPIO_Init+0x100>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a31      	ldr	r2, [pc, #196]	; (80017a8 <MX_GPIO_Init+0x100>)
 80016e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b2f      	ldr	r3, [pc, #188]	; (80017a8 <MX_GPIO_Init+0x100>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <MX_GPIO_Init+0x100>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a2a      	ldr	r2, [pc, #168]	; (80017a8 <MX_GPIO_Init+0x100>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b28      	ldr	r3, [pc, #160]	; (80017a8 <MX_GPIO_Init+0x100>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <MX_GPIO_Init+0x100>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a23      	ldr	r2, [pc, #140]	; (80017a8 <MX_GPIO_Init+0x100>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <MX_GPIO_Init+0x100>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_SD3_GPIO_Port, SS_SD3_Pin, GPIO_PIN_SET);
 800172e:	2201      	movs	r2, #1
 8001730:	2102      	movs	r1, #2
 8001732:	481e      	ldr	r0, [pc, #120]	; (80017ac <MX_GPIO_Init+0x104>)
 8001734:	f002 fc8e 	bl	8004054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin, GPIO_PIN_SET);
 8001738:	2201      	movs	r2, #1
 800173a:	2186      	movs	r1, #134	; 0x86
 800173c:	481c      	ldr	r0, [pc, #112]	; (80017b0 <MX_GPIO_Init+0x108>)
 800173e:	f002 fc89 	bl	8004054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_VBUS_GPIO_Port, USB_VBUS_Pin, GPIO_PIN_SET);
 8001742:	2201      	movs	r2, #1
 8001744:	2101      	movs	r1, #1
 8001746:	481b      	ldr	r0, [pc, #108]	; (80017b4 <MX_GPIO_Init+0x10c>)
 8001748:	f002 fc84 	bl	8004054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS_SD3_Pin */
  GPIO_InitStruct.Pin = SS_SD3_Pin;
 800174c:	2302      	movs	r3, #2
 800174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001754:	2301      	movs	r3, #1
 8001756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001758:	2302      	movs	r3, #2
 800175a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SS_SD3_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	4812      	ldr	r0, [pc, #72]	; (80017ac <MX_GPIO_Init+0x104>)
 8001764:	f002 fada 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_SD1_Pin SS_SD2_Pin SS_SD4_Pin */
  GPIO_InitStruct.Pin = SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin;
 8001768:	2386      	movs	r3, #134	; 0x86
 800176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001770:	2301      	movs	r3, #1
 8001772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001774:	2302      	movs	r3, #2
 8001776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	480c      	ldr	r0, [pc, #48]	; (80017b0 <MX_GPIO_Init+0x108>)
 8001780:	f002 facc 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001784:	2301      	movs	r3, #1
 8001786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	4806      	ldr	r0, [pc, #24]	; (80017b4 <MX_GPIO_Init+0x10c>)
 800179c:	f002 fabe 	bl	8003d1c <HAL_GPIO_Init>

}
 80017a0:	bf00      	nop
 80017a2:	3728      	adds	r7, #40	; 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40020800 	.word	0x40020800
 80017b0:	40020000 	.word	0x40020000
 80017b4:	40020400 	.word	0x40020400

080017b8 <HAL_UART_RxCpltCallback>:

uint8_t tmp1;
uint8_t tmp2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 if(huart==&UI_UART && system_status==SYSTEM_READY)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <HAL_UART_RxCpltCallback+0x38>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d10e      	bne.n	80017e6 <HAL_UART_RxCpltCallback+0x2e>
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_UART_RxCpltCallback+0x3c>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b0a      	cmp	r3, #10
 80017ce:	d10a      	bne.n	80017e6 <HAL_UART_RxCpltCallback+0x2e>
 {
	 UI_media_process_byte(&user_interface,user_interface.media_rx_byte);
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_UART_RxCpltCallback+0x40>)
 80017d2:	7b1b      	ldrb	r3, [r3, #12]
 80017d4:	4619      	mov	r1, r3
 80017d6:	4808      	ldr	r0, [pc, #32]	; (80017f8 <HAL_UART_RxCpltCallback+0x40>)
 80017d8:	f7fe ff4e 	bl	8000678 <UI_media_process_byte>
	 HAL_UART_Receive_IT(&UI_UART,&(user_interface.media_rx_byte),1);
 80017dc:	2201      	movs	r2, #1
 80017de:	4907      	ldr	r1, [pc, #28]	; (80017fc <HAL_UART_RxCpltCallback+0x44>)
 80017e0:	4803      	ldr	r0, [pc, #12]	; (80017f0 <HAL_UART_RxCpltCallback+0x38>)
 80017e2:	f006 fa7f 	bl	8007ce4 <HAL_UART_Receive_IT>
 }
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2000094c 	.word	0x2000094c
 80017f4:	20001af8 	.word	0x20001af8
 80017f8:	200009f0 	.word	0x200009f0
 80017fc:	200009fc 	.word	0x200009fc

08001800 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

 if(huart==&UI_UART)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a09      	ldr	r2, [pc, #36]	; (8001830 <HAL_UART_TxCpltCallback+0x30>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d10b      	bne.n	8001828 <HAL_UART_TxCpltCallback+0x28>
 {
  if(UI_media_get_byte(&user_interface,&tmp2)==UI_F_OK)
 8001810:	4908      	ldr	r1, [pc, #32]	; (8001834 <HAL_UART_TxCpltCallback+0x34>)
 8001812:	4809      	ldr	r0, [pc, #36]	; (8001838 <HAL_UART_TxCpltCallback+0x38>)
 8001814:	f7fe ffae 	bl	8000774 <UI_media_get_byte>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d104      	bne.n	8001828 <HAL_UART_TxCpltCallback+0x28>
  {
	    HAL_UART_Transmit_IT(&UI_UART,&tmp2,1);
 800181e:	2201      	movs	r2, #1
 8001820:	4904      	ldr	r1, [pc, #16]	; (8001834 <HAL_UART_TxCpltCallback+0x34>)
 8001822:	4803      	ldr	r0, [pc, #12]	; (8001830 <HAL_UART_TxCpltCallback+0x30>)
 8001824:	f006 fa19 	bl	8007c5a <HAL_UART_Transmit_IT>
  }
 }
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	2000094c 	.word	0x2000094c
 8001834:	20001b10 	.word	0x20001b10
 8001838:	200009f0 	.word	0x200009f0

0800183c <icListen_prepare_messages>:

void icListen_prepare_messages()
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  collect_msg_ptr.start_addr=(uint8_t*)&collect_msg;
 8001840:	4b0a      	ldr	r3, [pc, #40]	; (800186c <icListen_prepare_messages+0x30>)
 8001842:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <icListen_prepare_messages+0x34>)
 8001844:	601a      	str	r2, [r3, #0]
  collect_msg_ptr.size=sizeof(icListen_collect_short_mask_msg);
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <icListen_prepare_messages+0x30>)
 8001848:	2207      	movs	r2, #7
 800184a:	605a      	str	r2, [r3, #4]

  status_msg_ptr.start_addr=(uint8_t*)&status_msg;
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <icListen_prepare_messages+0x38>)
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <icListen_prepare_messages+0x3c>)
 8001850:	601a      	str	r2, [r3, #0]
  status_msg_ptr.size=sizeof(icListen_enquire_device_msg);
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <icListen_prepare_messages+0x38>)
 8001854:	2206      	movs	r2, #6
 8001856:	605a      	str	r2, [r3, #4]

  icListen_prepare_collect_msg(&collect_msg,0x20);
 8001858:	2120      	movs	r1, #32
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <icListen_prepare_messages+0x34>)
 800185c:	f7ff fbed 	bl	800103a <icListen_prepare_collect_msg>
  icListen_prepare_enquire_device_msg(&status_msg);
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <icListen_prepare_messages+0x3c>)
 8001862:	f7ff fc0d 	bl	8001080 <icListen_prepare_enquire_device_msg>
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200009e0 	.word	0x200009e0
 8001870:	200009e8 	.word	0x200009e8
 8001874:	200009b0 	.word	0x200009b0
 8001878:	200009b8 	.word	0x200009b8

0800187c <open_new_wav_file>:

F_RES open_new_wav_file()
{
 800187c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187e:	b08f      	sub	sp, #60	; 0x3c
 8001880:	af06      	add	r7, sp, #24
	char file_name[30];
	file_bytes_left=((icListen.settings->wav_sample_bit_depth/8)*icListen.settings->wav_sample_rate*icListen.settings->file_duration)-44;
 8001882:	4b2c      	ldr	r3, [pc, #176]	; (8001934 <open_new_wav_file+0xb8>)
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	08db      	lsrs	r3, r3, #3
 800188a:	4a2a      	ldr	r2, [pc, #168]	; (8001934 <open_new_wav_file+0xb8>)
 800188c:	6a12      	ldr	r2, [r2, #32]
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	fb02 f303 	mul.w	r3, r2, r3
 8001894:	4a27      	ldr	r2, [pc, #156]	; (8001934 <open_new_wav_file+0xb8>)
 8001896:	6a12      	ldr	r2, [r2, #32]
 8001898:	6892      	ldr	r2, [r2, #8]
 800189a:	fb02 f303 	mul.w	r3, r2, r3
 800189e:	3b2c      	subs	r3, #44	; 0x2c
 80018a0:	4a25      	ldr	r2, [pc, #148]	; (8001938 <open_new_wav_file+0xbc>)
 80018a2:	6013      	str	r3, [r2, #0]
	read_time(&rtc);
 80018a4:	4825      	ldr	r0, [pc, #148]	; (800193c <open_new_wav_file+0xc0>)
 80018a6:	f000 fbd5 	bl	8002054 <read_time>
	sprintf(file_name,"%d:%02d%02d%02d_%02d%02d%02d.wav",microsd_storage.active_disk_indx,rtc.time.Hours,rtc.time.Minutes,rtc.time.Seconds,rtc.date.Date,rtc.date.Month,rtc.date.Year);
 80018aa:	4b25      	ldr	r3, [pc, #148]	; (8001940 <open_new_wav_file+0xc4>)
 80018ac:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 80018b0:	461e      	mov	r6, r3
 80018b2:	4b22      	ldr	r3, [pc, #136]	; (800193c <open_new_wav_file+0xc0>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	469c      	mov	ip, r3
 80018b8:	4b20      	ldr	r3, [pc, #128]	; (800193c <open_new_wav_file+0xc0>)
 80018ba:	785b      	ldrb	r3, [r3, #1]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b1f      	ldr	r3, [pc, #124]	; (800193c <open_new_wav_file+0xc0>)
 80018c0:	789b      	ldrb	r3, [r3, #2]
 80018c2:	4619      	mov	r1, r3
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <open_new_wav_file+0xc0>)
 80018c6:	7d9b      	ldrb	r3, [r3, #22]
 80018c8:	461c      	mov	r4, r3
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <open_new_wav_file+0xc0>)
 80018cc:	7d5b      	ldrb	r3, [r3, #21]
 80018ce:	461d      	mov	r5, r3
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <open_new_wav_file+0xc0>)
 80018d2:	7ddb      	ldrb	r3, [r3, #23]
 80018d4:	4638      	mov	r0, r7
 80018d6:	9304      	str	r3, [sp, #16]
 80018d8:	9503      	str	r5, [sp, #12]
 80018da:	9402      	str	r4, [sp, #8]
 80018dc:	9101      	str	r1, [sp, #4]
 80018de:	9200      	str	r2, [sp, #0]
 80018e0:	4663      	mov	r3, ip
 80018e2:	4632      	mov	r2, r6
 80018e4:	4917      	ldr	r1, [pc, #92]	; (8001944 <open_new_wav_file+0xc8>)
 80018e6:	f013 f99b 	bl	8014c20 <siprintf>
	if(disk_kbytes_left>(file_bytes_left/1024)){
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <open_new_wav_file+0xbc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	0a9a      	lsrs	r2, r3, #10
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <open_new_wav_file+0xcc>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d218      	bcs.n	800192a <open_new_wav_file+0xae>
	 if(wav_file_open(&wav_file,file_name,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,1)==F_OK){
 80018f8:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <open_new_wav_file+0xb8>)
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <open_new_wav_file+0xb8>)
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4639      	mov	r1, r7
 8001906:	2001      	movs	r0, #1
 8001908:	9000      	str	r0, [sp, #0]
 800190a:	4810      	ldr	r0, [pc, #64]	; (800194c <open_new_wav_file+0xd0>)
 800190c:	f001 f968 	bl	8002be0 <wav_file_open>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d109      	bne.n	800192a <open_new_wav_file+0xae>
		disk_kbytes_left-=(file_bytes_left/1024);
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <open_new_wav_file+0xcc>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	4b07      	ldr	r3, [pc, #28]	; (8001938 <open_new_wav_file+0xbc>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	0a9b      	lsrs	r3, r3, #10
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <open_new_wav_file+0xcc>)
 8001924:	6013      	str	r3, [r2, #0]
		return F_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	e000      	b.n	800192c <open_new_wav_file+0xb0>
	 }
	}
    return F_ERR;
 800192a:	2301      	movs	r3, #1
}
 800192c:	4618      	mov	r0, r3
 800192e:	3724      	adds	r7, #36	; 0x24
 8001930:	46bd      	mov	sp, r7
 8001932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001934:	20000800 	.word	0x20000800
 8001938:	20001afc 	.word	0x20001afc
 800193c:	20001b18 	.word	0x20001b18
 8001940:	20000e24 	.word	0x20000e24
 8001944:	08016e74 	.word	0x08016e74
 8001948:	20001b00 	.word	0x20001b00
 800194c:	20001740 	.word	0x20001740

08001950 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001958:	f012 f93e 	bl	8013bd8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
   osEvent event;

  if(mcu_flash_read(&mcu_flash)!=F_OK){
 800195c:	4839      	ldr	r0, [pc, #228]	; (8001a44 <StartDefaultTask+0xf4>)
 800195e:	f000 faf7 	bl	8001f50 <mcu_flash_read>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d02a      	beq.n	80019be <StartDefaultTask+0x6e>
  		icListen.settings->wav_sample_rate=ICLISTEN_DEFAULT_WAV_SAMPLE_RATE;
 8001968:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <StartDefaultTask+0xf8>)
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
 8001970:	2200      	movs	r2, #0
 8001972:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 8001976:	705a      	strb	r2, [r3, #1]
 8001978:	2200      	movs	r2, #0
 800197a:	709a      	strb	r2, [r3, #2]
 800197c:	2200      	movs	r2, #0
 800197e:	70da      	strb	r2, [r3, #3]
  		icListen.settings->wav_sample_bit_depth=ICLISTEN_DEFAULT_WAV_SAMPLE_BIT_DEPTH;
 8001980:	4b31      	ldr	r3, [pc, #196]	; (8001a48 <StartDefaultTask+0xf8>)
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	2200      	movs	r2, #0
 8001986:	f042 0218 	orr.w	r2, r2, #24
 800198a:	711a      	strb	r2, [r3, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	715a      	strb	r2, [r3, #5]
 8001990:	2200      	movs	r2, #0
 8001992:	719a      	strb	r2, [r3, #6]
 8001994:	2200      	movs	r2, #0
 8001996:	71da      	strb	r2, [r3, #7]
  		icListen.settings->file_duration=ICLISTEN_DEFAULT_FILE_DURATION;
 8001998:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <StartDefaultTask+0xf8>)
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	2200      	movs	r2, #0
 800199e:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 80019a2:	721a      	strb	r2, [r3, #8]
 80019a4:	2200      	movs	r2, #0
 80019a6:	725a      	strb	r2, [r3, #9]
 80019a8:	2200      	movs	r2, #0
 80019aa:	729a      	strb	r2, [r3, #10]
 80019ac:	2200      	movs	r2, #0
 80019ae:	72da      	strb	r2, [r3, #11]
  		mcu_flash_save(&mcu_flash);
 80019b0:	4824      	ldr	r0, [pc, #144]	; (8001a44 <StartDefaultTask+0xf4>)
 80019b2:	f000 faed 	bl	8001f90 <mcu_flash_save>
  }
  while(microsd_storage.status!=STORAGE_NOT_INITTIALIZED) {osDelay(1);}
 80019b6:	e002      	b.n	80019be <StartDefaultTask+0x6e>
 80019b8:	2001      	movs	r0, #1
 80019ba:	f00f fe80 	bl	80116be <osDelay>
 80019be:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <StartDefaultTask+0xfc>)
 80019c0:	f893 3919 	ldrb.w	r3, [r3, #2329]	; 0x919
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d1f7      	bne.n	80019b8 <StartDefaultTask+0x68>
  system_status=SYSTEM_READY;
 80019c8:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <StartDefaultTask+0x100>)
 80019ca:	220a      	movs	r2, #10
 80019cc:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  for(;;)
  {
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 80019ce:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <StartDefaultTask+0x104>)
 80019d0:	6819      	ldr	r1, [r3, #0]
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	f04f 32ff 	mov.w	r2, #4294967295
 80019da:	4618      	mov	r0, r3
 80019dc:	f00f feec 	bl	80117b8 <osMessageGet>

	  if(event.status == osEventMessage)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b10      	cmp	r3, #16
 80019e4:	d129      	bne.n	8001a3a <StartDefaultTask+0xea>
	  {
		switch(event.value.v)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d006      	beq.n	80019fa <StartDefaultTask+0xaa>
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d826      	bhi.n	8001a3e <StartDefaultTask+0xee>
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d01f      	beq.n	8001a34 <StartDefaultTask+0xe4>
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d004      	beq.n	8001a02 <StartDefaultTask+0xb2>
		 case APPLICATION_START:
		   USB_set_line_coding();
		 break;

		 default:
		 break;
 80019f8:	e021      	b.n	8001a3e <StartDefaultTask+0xee>
			 icListen_init_sensor_status(&icListen);
 80019fa:	4813      	ldr	r0, [pc, #76]	; (8001a48 <StartDefaultTask+0xf8>)
 80019fc:	f7ff faf8 	bl	8000ff0 <icListen_init_sensor_status>
		 break;
 8001a00:	e01e      	b.n	8001a40 <StartDefaultTask+0xf0>
			 osDelay(5000);
 8001a02:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a06:	f00f fe5a 	bl	80116be <osDelay>
			 icListen_init_sensor_status(&icListen);
 8001a0a:	480f      	ldr	r0, [pc, #60]	; (8001a48 <StartDefaultTask+0xf8>)
 8001a0c:	f7ff faf0 	bl	8000ff0 <icListen_init_sensor_status>
			 icListen.status=ICLISTEN_CONNECTED;
 8001a10:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <StartDefaultTask+0xf8>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	775a      	strb	r2, [r3, #29]
			 osMessagePut(USB_txHandle,(uint32_t)&status_msg_ptr, 0);
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <StartDefaultTask+0x108>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4910      	ldr	r1, [pc, #64]	; (8001a5c <StartDefaultTask+0x10c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f00f fe8a 	bl	8011738 <osMessagePut>
			 osMessagePut(USB_txHandle,(uint32_t)&collect_msg_ptr, 0);
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <StartDefaultTask+0x108>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	490d      	ldr	r1, [pc, #52]	; (8001a60 <StartDefaultTask+0x110>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f00f fe83 	bl	8011738 <osMessagePut>
		 break;
 8001a32:	e005      	b.n	8001a40 <StartDefaultTask+0xf0>
		   USB_set_line_coding();
 8001a34:	f012 f8a2 	bl	8013b7c <USB_set_line_coding>
		 break;
 8001a38:	e002      	b.n	8001a40 <StartDefaultTask+0xf0>
		 }
	   }
 8001a3a:	bf00      	nop
 8001a3c:	e7c7      	b.n	80019ce <StartDefaultTask+0x7e>
		 break;
 8001a3e:	bf00      	nop
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 8001a40:	e7c5      	b.n	80019ce <StartDefaultTask+0x7e>
 8001a42:	bf00      	nop
 8001a44:	20000e04 	.word	0x20000e04
 8001a48:	20000800 	.word	0x20000800
 8001a4c:	20000e24 	.word	0x20000e24
 8001a50:	20001af8 	.word	0x20001af8
 8001a54:	200009a0 	.word	0x200009a0
 8001a58:	200009a8 	.word	0x200009a8
 8001a5c:	200009b0 	.word	0x200009b0
 8001a60:	200009e0 	.word	0x200009e0

08001a64 <storage_f>:
* @retval None
*/

/* USER CODE END Header_storage_f */
void storage_f(void const * argument)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b0a0      	sub	sp, #128	; 0x80
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN storage_f */
  osDelay(500);
 8001a6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a70:	f00f fe25 	bl	80116be <osDelay>
  char info_msg[100];

  memory_region_pointer* data_ptr;
  osEvent storage_w_event;

  sprintf(info_msg,"Wait for storage init....");
 8001a74:	f107 0318 	add.w	r3, r7, #24
 8001a78:	4993      	ldr	r1, [pc, #588]	; (8001cc8 <storage_f+0x264>)
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f013 f8d0 	bl	8014c20 <siprintf>
  HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8001a80:	f107 0318 	add.w	r3, r7, #24
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fbad 	bl	80001e4 <strlen>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	f107 0118 	add.w	r1, r7, #24
 8001a92:	2364      	movs	r3, #100	; 0x64
 8001a94:	488d      	ldr	r0, [pc, #564]	; (8001ccc <storage_f+0x268>)
 8001a96:	f006 f84e 	bl	8007b36 <HAL_UART_Transmit>

  sd_storage_link_ss(&microsd_storage,0,SS_SD1_Pin,GPIOA);
 8001a9a:	4b8d      	ldr	r3, [pc, #564]	; (8001cd0 <storage_f+0x26c>)
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	488c      	ldr	r0, [pc, #560]	; (8001cd4 <storage_f+0x270>)
 8001aa2:	f7ff fa43 	bl	8000f2c <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,1,SS_SD2_Pin,GPIOA);
 8001aa6:	4b8a      	ldr	r3, [pc, #552]	; (8001cd0 <storage_f+0x26c>)
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	2101      	movs	r1, #1
 8001aac:	4889      	ldr	r0, [pc, #548]	; (8001cd4 <storage_f+0x270>)
 8001aae:	f7ff fa3d 	bl	8000f2c <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,2,SS_SD3_Pin,SS_SD3_GPIO_Port);
 8001ab2:	4b89      	ldr	r3, [pc, #548]	; (8001cd8 <storage_f+0x274>)
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	2102      	movs	r1, #2
 8001ab8:	4886      	ldr	r0, [pc, #536]	; (8001cd4 <storage_f+0x270>)
 8001aba:	f7ff fa37 	bl	8000f2c <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,3,SS_SD4_Pin,GPIOA);
 8001abe:	4b84      	ldr	r3, [pc, #528]	; (8001cd0 <storage_f+0x26c>)
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	2103      	movs	r1, #3
 8001ac4:	4883      	ldr	r0, [pc, #524]	; (8001cd4 <storage_f+0x270>)
 8001ac6:	f7ff fa31 	bl	8000f2c <sd_storage_link_ss>
  while(sd_storage_init(&microsd_storage)!=F_OK) osDelay(1000);
 8001aca:	e003      	b.n	8001ad4 <storage_f+0x70>
 8001acc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ad0:	f00f fdf5 	bl	80116be <osDelay>
 8001ad4:	487f      	ldr	r0, [pc, #508]	; (8001cd4 <storage_f+0x270>)
 8001ad6:	f7ff f967 	bl	8000da8 <sd_storage_init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f5      	bne.n	8001acc <storage_f+0x68>

  sprintf(info_msg,"detected %d cards.\r",microsd_storage.num_of_discs);
 8001ae0:	4b7c      	ldr	r3, [pc, #496]	; (8001cd4 <storage_f+0x270>)
 8001ae2:	f893 3918 	ldrb.w	r3, [r3, #2328]	; 0x918
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	497b      	ldr	r1, [pc, #492]	; (8001cdc <storage_f+0x278>)
 8001aee:	4618      	mov	r0, r3
 8001af0:	f013 f896 	bl	8014c20 <siprintf>
  HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8001af4:	f107 0318 	add.w	r3, r7, #24
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fb73 	bl	80001e4 <strlen>
 8001afe:	4603      	mov	r3, r0
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	f107 0118 	add.w	r1, r7, #24
 8001b06:	2364      	movs	r3, #100	; 0x64
 8001b08:	4870      	ldr	r0, [pc, #448]	; (8001ccc <storage_f+0x268>)
 8001b0a:	f006 f814 	bl	8007b36 <HAL_UART_Transmit>



  disk_kbytes_left=microsd_storage.disks[microsd_storage.active_disk_indx].free_space;
 8001b0e:	4b71      	ldr	r3, [pc, #452]	; (8001cd4 <storage_f+0x270>)
 8001b10:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 8001b14:	4619      	mov	r1, r3
 8001b16:	4a6f      	ldr	r2, [pc, #444]	; (8001cd4 <storage_f+0x270>)
 8001b18:	f44f 7311 	mov.w	r3, #580	; 0x244
 8001b1c:	fb01 f303 	mul.w	r3, r1, r3
 8001b20:	4413      	add	r3, r2
 8001b22:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a6d      	ldr	r2, [pc, #436]	; (8001ce0 <storage_f+0x27c>)
 8001b2a:	6013      	str	r3, [r2, #0]
  if(open_new_wav_file()==F_ERR){
 8001b2c:	f7ff fea6 	bl	800187c <open_new_wav_file>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d116      	bne.n	8001b64 <storage_f+0x100>
	sprintf(info_msg,"Not enough space for start.\r");
 8001b36:	f107 0318 	add.w	r3, r7, #24
 8001b3a:	496a      	ldr	r1, [pc, #424]	; (8001ce4 <storage_f+0x280>)
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f013 f86f 	bl	8014c20 <siprintf>
	HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8001b42:	f107 0318 	add.w	r3, r7, #24
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fb4c 	bl	80001e4 <strlen>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	f107 0118 	add.w	r1, r7, #24
 8001b54:	2364      	movs	r3, #100	; 0x64
 8001b56:	485d      	ldr	r0, [pc, #372]	; (8001ccc <storage_f+0x268>)
 8001b58:	f005 ffed 	bl	8007b36 <HAL_UART_Transmit>
	while(1){osDelay(1);}
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	f00f fdae 	bl	80116be <osDelay>
 8001b62:	e7fb      	b.n	8001b5c <storage_f+0xf8>
  }
  files_created++;
 8001b64:	4b60      	ldr	r3, [pc, #384]	; (8001ce8 <storage_f+0x284>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	4a5f      	ldr	r2, [pc, #380]	; (8001ce8 <storage_f+0x284>)
 8001b6c:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  for(;;)
  {

   storage_w_event = osMessageGet(storage_wHandle, osWaitForever);
 8001b6e:	4b5f      	ldr	r3, [pc, #380]	; (8001cec <storage_f+0x288>)
 8001b70:	6819      	ldr	r1, [r3, #0]
 8001b72:	f107 030c 	add.w	r3, r7, #12
 8001b76:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f00f fe1c 	bl	80117b8 <osMessageGet>
   if(storage_w_event.status == osEventMessage){
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2b10      	cmp	r3, #16
 8001b84:	d1f3      	bne.n	8001b6e <storage_f+0x10a>
	 data_ptr=(memory_region_pointer*)storage_w_event.value.v;
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	67fb      	str	r3, [r7, #124]	; 0x7c


	 if(file_bytes_left>data_ptr->size){
 8001b8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	4b58      	ldr	r3, [pc, #352]	; (8001cf0 <storage_f+0x28c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d22c      	bcs.n	8001bf0 <storage_f+0x18c>
	   if(wav_file_write(&wav_file,data_ptr->start_addr,data_ptr->size)==F_OK){
 8001b96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b98:	6819      	ldr	r1, [r3, #0]
 8001b9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4854      	ldr	r0, [pc, #336]	; (8001cf4 <storage_f+0x290>)
 8001ba2:	f001 f8d2 	bl	8002d4a <wav_file_write>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d107      	bne.n	8001bbc <storage_f+0x158>
	      file_bytes_left-=data_ptr->size;
 8001bac:	4b50      	ldr	r3, [pc, #320]	; (8001cf0 <storage_f+0x28c>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	4a4e      	ldr	r2, [pc, #312]	; (8001cf0 <storage_f+0x28c>)
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e7d8      	b.n	8001b6e <storage_f+0x10a>
	   }
	   else{
	      wav_file_close(&wav_file);
 8001bbc:	484d      	ldr	r0, [pc, #308]	; (8001cf4 <storage_f+0x290>)
 8001bbe:	f001 f893 	bl	8002ce8 <wav_file_close>
	      sprintf(info_msg,"Write error.\r");
 8001bc2:	f107 0318 	add.w	r3, r7, #24
 8001bc6:	494c      	ldr	r1, [pc, #304]	; (8001cf8 <storage_f+0x294>)
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f013 f829 	bl	8014c20 <siprintf>
	      HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8001bce:	f107 0318 	add.w	r3, r7, #24
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fb06 	bl	80001e4 <strlen>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	f107 0118 	add.w	r1, r7, #24
 8001be0:	2364      	movs	r3, #100	; 0x64
 8001be2:	483a      	ldr	r0, [pc, #232]	; (8001ccc <storage_f+0x268>)
 8001be4:	f005 ffa7 	bl	8007b36 <HAL_UART_Transmit>
	      while(1){osDelay(1);}
 8001be8:	2001      	movs	r0, #1
 8001bea:	f00f fd68 	bl	80116be <osDelay>
 8001bee:	e7fb      	b.n	8001be8 <storage_f+0x184>
	   }
	 }
	 else{
		wav_file_close(&wav_file);
 8001bf0:	4840      	ldr	r0, [pc, #256]	; (8001cf4 <storage_f+0x290>)
 8001bf2:	f001 f879 	bl	8002ce8 <wav_file_close>
		if(open_new_wav_file()!=F_OK){
 8001bf6:	f7ff fe41 	bl	800187c <open_new_wav_file>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d030      	beq.n	8001c62 <storage_f+0x1fe>
		  do{
				if(sd_storage_set_next_disk(&microsd_storage)!=F_OK){
 8001c00:	4834      	ldr	r0, [pc, #208]	; (8001cd4 <storage_f+0x270>)
 8001c02:	f7ff f9b1 	bl	8000f68 <sd_storage_set_next_disk>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d016      	beq.n	8001c3a <storage_f+0x1d6>
	        		sprintf(info_msg,"End of storage reached.\r");
 8001c0c:	f107 0318 	add.w	r3, r7, #24
 8001c10:	493a      	ldr	r1, [pc, #232]	; (8001cfc <storage_f+0x298>)
 8001c12:	4618      	mov	r0, r3
 8001c14:	f013 f804 	bl	8014c20 <siprintf>
		        	HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8001c18:	f107 0318 	add.w	r3, r7, #24
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe fae1 	bl	80001e4 <strlen>
 8001c22:	4603      	mov	r3, r0
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	f107 0118 	add.w	r1, r7, #24
 8001c2a:	2364      	movs	r3, #100	; 0x64
 8001c2c:	4827      	ldr	r0, [pc, #156]	; (8001ccc <storage_f+0x268>)
 8001c2e:	f005 ff82 	bl	8007b36 <HAL_UART_Transmit>
		        	while(1){osDelay(1);}
 8001c32:	2001      	movs	r0, #1
 8001c34:	f00f fd43 	bl	80116be <osDelay>
 8001c38:	e7fb      	b.n	8001c32 <storage_f+0x1ce>
				}
				disk_kbytes_left=microsd_storage.disks[microsd_storage.active_disk_indx].free_space;
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <storage_f+0x270>)
 8001c3c:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 8001c40:	4619      	mov	r1, r3
 8001c42:	4a24      	ldr	r2, [pc, #144]	; (8001cd4 <storage_f+0x270>)
 8001c44:	f44f 7311 	mov.w	r3, #580	; 0x244
 8001c48:	fb01 f303 	mul.w	r3, r1, r3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a22      	ldr	r2, [pc, #136]	; (8001ce0 <storage_f+0x27c>)
 8001c56:	6013      	str	r3, [r2, #0]
		   }while(open_new_wav_file()!=F_OK);
 8001c58:	f7ff fe10 	bl	800187c <open_new_wav_file>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1ce      	bne.n	8001c00 <storage_f+0x19c>
	   	 }
		 if(wav_file_write(&wav_file,data_ptr->start_addr,data_ptr->size)==F_OK){
 8001c62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c64:	6819      	ldr	r1, [r3, #0]
 8001c66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4821      	ldr	r0, [pc, #132]	; (8001cf4 <storage_f+0x290>)
 8001c6e:	f001 f86c 	bl	8002d4a <wav_file_write>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10c      	bne.n	8001c92 <storage_f+0x22e>
			 file_bytes_left-=data_ptr->size;
 8001c78:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <storage_f+0x28c>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	4a1b      	ldr	r2, [pc, #108]	; (8001cf0 <storage_f+0x28c>)
 8001c84:	6013      	str	r3, [r2, #0]
			 files_created++;
 8001c86:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <storage_f+0x284>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	4a16      	ldr	r2, [pc, #88]	; (8001ce8 <storage_f+0x284>)
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	e76d      	b.n	8001b6e <storage_f+0x10a>
	     }
		 else{
			 wav_file_close(&wav_file);
 8001c92:	4818      	ldr	r0, [pc, #96]	; (8001cf4 <storage_f+0x290>)
 8001c94:	f001 f828 	bl	8002ce8 <wav_file_close>
		     sprintf(info_msg,"Write error.\r");
 8001c98:	f107 0318 	add.w	r3, r7, #24
 8001c9c:	4916      	ldr	r1, [pc, #88]	; (8001cf8 <storage_f+0x294>)
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f012 ffbe 	bl	8014c20 <siprintf>
		     HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8001ca4:	f107 0318 	add.w	r3, r7, #24
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fa9b 	bl	80001e4 <strlen>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	f107 0118 	add.w	r1, r7, #24
 8001cb6:	2364      	movs	r3, #100	; 0x64
 8001cb8:	4804      	ldr	r0, [pc, #16]	; (8001ccc <storage_f+0x268>)
 8001cba:	f005 ff3c 	bl	8007b36 <HAL_UART_Transmit>
		     while(1){osDelay(1);}
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f00f fcfd 	bl	80116be <osDelay>
 8001cc4:	e7fb      	b.n	8001cbe <storage_f+0x25a>
 8001cc6:	bf00      	nop
 8001cc8:	08016e98 	.word	0x08016e98
 8001ccc:	2000094c 	.word	0x2000094c
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	20000e24 	.word	0x20000e24
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	08016eb4 	.word	0x08016eb4
 8001ce0:	20001b00 	.word	0x20001b00
 8001ce4:	08016ec8 	.word	0x08016ec8
 8001ce8:	20001b04 	.word	0x20001b04
 8001cec:	200009ac 	.word	0x200009ac
 8001cf0:	20001afc 	.word	0x20001afc
 8001cf4:	20001740 	.word	0x20001740
 8001cf8:	08016ee8 	.word	0x08016ee8
 8001cfc:	08016ef8 	.word	0x08016ef8

08001d00 <icListen_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_icListen_f */
void icListen_f(void const * argument)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b0a0      	sub	sp, #128	; 0x80
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN icListen_f */
  /* Infinite loop */
  uint8_t msg_type;
  memory_region_pointer* usb_tx_msg_ptr;
  memory_region_pointer  parsed_data_ptr[10];
  uint8_t                parsed_data_ptr_index=0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

  osEvent event;

  icListen_prepare_messages();
 8001d0e:	f7ff fd95 	bl	800183c <icListen_prepare_messages>
  icListen.settings=(icListen_settings_typedef*)mcu_flash.data.raw_data;
 8001d12:	4b3b      	ldr	r3, [pc, #236]	; (8001e00 <icListen_f+0x100>)
 8001d14:	4a3b      	ldr	r2, [pc, #236]	; (8001e04 <icListen_f+0x104>)
 8001d16:	621a      	str	r2, [r3, #32]
  icListen_init_sensor_status(&icListen);
 8001d18:	4839      	ldr	r0, [pc, #228]	; (8001e00 <icListen_f+0x100>)
 8001d1a:	f7ff f969 	bl	8000ff0 <icListen_init_sensor_status>


  /* Infinite loop */
  for(;;)
  {
	   event = osMessageGet(USB_txHandle, osWaitForever);
 8001d1e:	4b3a      	ldr	r3, [pc, #232]	; (8001e08 <icListen_f+0x108>)
 8001d20:	6819      	ldr	r1, [r3, #0]
 8001d22:	f107 0318 	add.w	r3, r7, #24
 8001d26:	f04f 32ff 	mov.w	r2, #4294967295
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f00f fd44 	bl	80117b8 <osMessageGet>
	   if(icListen.status==ICLISTEN_CONNECTED){
 8001d30:	4b33      	ldr	r3, [pc, #204]	; (8001e00 <icListen_f+0x100>)
 8001d32:	7f5b      	ldrb	r3, [r3, #29]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f2      	bne.n	8001d1e <icListen_f+0x1e>
		if(event.status == osEventMessage){
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	2b10      	cmp	r3, #16
 8001d3c:	d109      	bne.n	8001d52 <icListen_f+0x52>
		   usb_tx_msg_ptr=(memory_region_pointer*)event.value.v;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	67bb      	str	r3, [r7, #120]	; 0x78
		   USB_transmit_msg(usb_tx_msg_ptr->start_addr,usb_tx_msg_ptr->size);
 8001d42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	f011 fee5 	bl	8013b1c <USB_transmit_msg>
		}

		event = osMessageGet(USB_rxHandle, 20);
 8001d52:	4b2e      	ldr	r3, [pc, #184]	; (8001e0c <icListen_f+0x10c>)
 8001d54:	6819      	ldr	r1, [r3, #0]
 8001d56:	463b      	mov	r3, r7
 8001d58:	2214      	movs	r2, #20
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f00f fd2c 	bl	80117b8 <osMessageGet>
 8001d60:	f107 0318 	add.w	r3, r7, #24
 8001d64:	463a      	mov	r2, r7
 8001d66:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if(event.status == osEventMessage){
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2b10      	cmp	r3, #16
 8001d70:	d1d5      	bne.n	8001d1e <icListen_f+0x1e>

		   if(icListen_parse_msg((uint8_t*)event.value.v,&icListen,&msg_type,&parsed_data_ptr[parsed_data_ptr_index])==F_OK)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001d7a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4413      	add	r3, r2
 8001d82:	f107 0277 	add.w	r2, r7, #119	; 0x77
 8001d86:	491e      	ldr	r1, [pc, #120]	; (8001e00 <icListen_f+0x100>)
 8001d88:	f7ff f995 	bl	80010b6 <icListen_parse_msg>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1c5      	bne.n	8001d1e <icListen_f+0x1e>
		   {
			   if(msg_type==MSG_TYPE_COLLECT_DATA){
 8001d92:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001d96:	2b43      	cmp	r3, #67	; 0x43
 8001d98:	d1c1      	bne.n	8001d1e <icListen_f+0x1e>
			     if(parsed_data_ptr[parsed_data_ptr_index].size>7){
 8001d9a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	3380      	adds	r3, #128	; 0x80
 8001da2:	443b      	add	r3, r7
 8001da4:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8001da8:	2b07      	cmp	r3, #7
 8001daa:	d91d      	bls.n	8001de8 <icListen_f+0xe8>
				  osMessagePut(storage_wHandle,(uint32_t)&parsed_data_ptr[parsed_data_ptr_index],0);
 8001dac:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <icListen_f+0x110>)
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001db4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	4413      	add	r3, r2
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f00f fcba 	bl	8011738 <osMessagePut>
				  parsed_data_ptr_index++;
 8001dc4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001dc8:	3301      	adds	r3, #1
 8001dca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				  parsed_data_ptr_index%=10;
 8001dce:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <icListen_f+0x114>)
 8001dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8001dd8:	08d9      	lsrs	r1, r3, #3
 8001dda:	460b      	mov	r3, r1
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	440b      	add	r3, r1
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			     }
				 osDelay(15);
 8001de8:	200f      	movs	r0, #15
 8001dea:	f00f fc68 	bl	80116be <osDelay>
				 osMessagePut(USB_txHandle,(uint32_t)&collect_msg_ptr, 0);
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <icListen_f+0x108>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4909      	ldr	r1, [pc, #36]	; (8001e18 <icListen_f+0x118>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f00f fc9e 	bl	8011738 <osMessagePut>
	   event = osMessageGet(USB_txHandle, osWaitForever);
 8001dfc:	e78f      	b.n	8001d1e <icListen_f+0x1e>
 8001dfe:	bf00      	nop
 8001e00:	20000800 	.word	0x20000800
 8001e04:	20000e10 	.word	0x20000e10
 8001e08:	200009a8 	.word	0x200009a8
 8001e0c:	200009a4 	.word	0x200009a4
 8001e10:	200009ac 	.word	0x200009ac
 8001e14:	cccccccd 	.word	0xcccccccd
 8001e18:	200009e0 	.word	0x200009e0

08001e1c <uart_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_f */
void uart_f(void const * argument)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart_f */
  uint8_t tmp;
  while(system_status!=SYSTEM_READY) {osDelay(1);}
 8001e24:	e002      	b.n	8001e2c <uart_f+0x10>
 8001e26:	2001      	movs	r0, #1
 8001e28:	f00f fc49 	bl	80116be <osDelay>
 8001e2c:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <uart_f+0x54>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b0a      	cmp	r3, #10
 8001e32:	d1f8      	bne.n	8001e26 <uart_f+0xa>
  user_interface.media_status=UI_MEDIA_READY;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <uart_f+0x58>)
 8001e36:	220a      	movs	r2, #10
 8001e38:	735a      	strb	r2, [r3, #13]
  /* Infinite loop */

  for(;;)
  {
   if(UI_UART.gState!=HAL_UART_STATE_BUSY_TX)
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <uart_f+0x5c>)
 8001e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b21      	cmp	r3, #33	; 0x21
 8001e44:	d00f      	beq.n	8001e66 <uart_f+0x4a>
   {
 	if(UI_media_get_byte(&user_interface,&tmp)==UI_F_OK) HAL_UART_Transmit_IT(&UI_UART,&tmp,1);
 8001e46:	f107 030f 	add.w	r3, r7, #15
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4809      	ldr	r0, [pc, #36]	; (8001e74 <uart_f+0x58>)
 8001e4e:	f7fe fc91 	bl	8000774 <UI_media_get_byte>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d106      	bne.n	8001e66 <uart_f+0x4a>
 8001e58:	f107 030f 	add.w	r3, r7, #15
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4805      	ldr	r0, [pc, #20]	; (8001e78 <uart_f+0x5c>)
 8001e62:	f005 fefa 	bl	8007c5a <HAL_UART_Transmit_IT>
   }
   osDelay(1);
 8001e66:	2001      	movs	r0, #1
 8001e68:	f00f fc29 	bl	80116be <osDelay>
   if(UI_UART.gState!=HAL_UART_STATE_BUSY_TX)
 8001e6c:	e7e5      	b.n	8001e3a <uart_f+0x1e>
 8001e6e:	bf00      	nop
 8001e70:	20001af8 	.word	0x20001af8
 8001e74:	200009f0 	.word	0x200009f0
 8001e78:	2000094c 	.word	0x2000094c

08001e7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d101      	bne.n	8001e92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e8e:	f000 ffcb 	bl	8002e28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40010000 	.word	0x40010000

08001ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea4:	b672      	cpsid	i
}
 8001ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <Error_Handler+0x8>
	...

08001eac <mcu_flash_init>:
#if defined(STM32F205xx)  //KB
uint32_t  flash_block_size[]={16,16,16,16,64,128,128,128,128,128,128,128};
#endif

void mcu_flash_init(mcu_flash_typedef* mcu_flash_obj,uint32_t first_block)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
	uint32_t temp=0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
	int32_t temp2=0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
	if(first_block<FLASH_NUM_OF_BLOCKS){
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b0b      	cmp	r3, #11
 8001ec2:	d83d      	bhi.n	8001f40 <mcu_flash_init+0x94>
      mcu_flash_obj->first_block_num=first_block;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
      for(int i=0;i<first_block;i++) temp+=flash_block_size[i];
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	e009      	b.n	8001ee4 <mcu_flash_init+0x38>
 8001ed0:	4a1e      	ldr	r2, [pc, #120]	; (8001f4c <mcu_flash_init+0xa0>)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	4413      	add	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d8f1      	bhi.n	8001ed0 <mcu_flash_init+0x24>
	  mcu_flash_obj->first_block_addr=FLASH_BASE+(temp*1024);
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001ef2:	029a      	lsls	r2, r3, #10
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	601a      	str	r2, [r3, #0]

	  temp2=FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE;
 8001ef8:	2312      	movs	r3, #18
 8001efa:	613b      	str	r3, [r7, #16]
	  mcu_flash_obj->num_of_blocks=0;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	721a      	strb	r2, [r3, #8]
 8001f02:	2200      	movs	r2, #0
 8001f04:	725a      	strb	r2, [r3, #9]
 8001f06:	2200      	movs	r2, #0
 8001f08:	729a      	strb	r2, [r3, #10]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	72da      	strb	r2, [r3, #11]
	  for(int i=mcu_flash_obj->first_block_num;i<FLASH_NUM_OF_BLOCKS&&temp2>0;i++) {
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	e00e      	b.n	8001f34 <mcu_flash_init+0x88>
		  temp2-=flash_block_size[i];
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	490c      	ldr	r1, [pc, #48]	; (8001f4c <mcu_flash_init+0xa0>)
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	613b      	str	r3, [r7, #16]
		  mcu_flash_obj->num_of_blocks++;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	609a      	str	r2, [r3, #8]
	  for(int i=mcu_flash_obj->first_block_num;i<FLASH_NUM_OF_BLOCKS&&temp2>0;i++) {
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	3301      	adds	r3, #1
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2b0b      	cmp	r3, #11
 8001f38:	dc02      	bgt.n	8001f40 <mcu_flash_init+0x94>
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	dcea      	bgt.n	8001f16 <mcu_flash_init+0x6a>
	  }
	}
}
 8001f40:	bf00      	nop
 8001f42:	371c      	adds	r7, #28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	20000200 	.word	0x20000200

08001f50 <mcu_flash_read>:

F_RES mcu_flash_read(mcu_flash_typedef* mcu_flash_obj)
{
 8001f50:	b590      	push	{r4, r7, lr}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
	 memcpy((uint8_t*)&(mcu_flash_obj->data),(uint8_t*)mcu_flash_obj->first_block_addr,FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f103 000c 	add.w	r0, r3, #12
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2212      	movs	r2, #18
 8001f64:	4619      	mov	r1, r3
 8001f66:	f012 fa79 	bl	801445c <memcpy>
	 if(mcu_flash_obj->data.crc==get_crc16_arc(mcu_flash_obj->data.raw_data,FLASH_DATA_SIZE)){
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	8b9b      	ldrh	r3, [r3, #28]
 8001f6e:	b29c      	uxth	r4, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	330c      	adds	r3, #12
 8001f74:	2110      	movs	r1, #16
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fee0 	bl	8000d3c <get_crc16_arc>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	429c      	cmp	r4, r3
 8001f80:	d101      	bne.n	8001f86 <mcu_flash_read+0x36>
		 return F_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e000      	b.n	8001f88 <mcu_flash_read+0x38>
	 }
	 else{
		 return F_ERR;
 8001f86:	2301      	movs	r3, #1
	 }

}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd90      	pop	{r4, r7, pc}

08001f90 <mcu_flash_save>:
void mcu_flash_save(mcu_flash_typedef* mcu_flash_obj)
{
 8001f90:	b5b0      	push	{r4, r5, r7, lr}
 8001f92:	b08c      	sub	sp, #48	; 0x30
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	uint32_t i=0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t tmp;
	uint32_t pgerr = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	623b      	str	r3, [r7, #32]
	uint8_t* data=(uint8_t*)&mcu_flash_obj->data;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	330c      	adds	r3, #12
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24

	mcu_flash_obj->data.crc=get_crc16_arc(mcu_flash_obj->data.raw_data,FLASH_DATA_SIZE);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	330c      	adds	r3, #12
 8001faa:	2110      	movs	r1, #16
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fec5 	bl	8000d3c <get_crc16_arc>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	839a      	strh	r2, [r3, #28]

    HAL_FLASH_Unlock();
 8001fba:	f001 fc2b 	bl	8003814 <HAL_FLASH_Unlock>
    #if defined(STM32F405xx)
	FLASH_EraseInitTypeDef erase_info = {
 8001fbe:	f107 030c 	add.w	r3, r7, #12
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	611a      	str	r2, [r3, #16]
		.TypeErase = FLASH_TYPEERASE_SECTORS,
		.Sector = mcu_flash_obj->first_block_num,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
	FLASH_EraseInitTypeDef erase_info = {
 8001fd2:	617b      	str	r3, [r7, #20]
		.NbSectors = mcu_flash_obj->num_of_blocks,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
	FLASH_EraseInitTypeDef erase_info = {
 8001fd8:	61bb      	str	r3, [r7, #24]
	.NbPages = mcu_flash_obj->num_of_blocks,
    };
    #endif


	HAL_FLASHEx_Erase(&erase_info, &pgerr);
 8001fda:	f107 0220 	add.w	r2, r7, #32
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f001 fd77 	bl	8003ad8 <HAL_FLASHEx_Erase>

	if(pgerr != 0xFFFFFFFFul)
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff0:	d027      	beq.n	8002042 <mcu_flash_save+0xb2>
	{
		HAL_FLASH_Lock();
 8001ff2:	f001 fc31 	bl	8003858 <HAL_FLASH_Lock>
 8001ff6:	e029      	b.n	800204c <mcu_flash_save+0xbc>
		return ;
	}

	while(i<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE))
	{
        tmp=(tmp&0x0000)|(data[i]&0x00FF);
 8001ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffc:	4413      	add	r3, r2
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	857b      	strh	r3, [r7, #42]	; 0x2a
		if((i+1)<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE)) tmp=tmp|(data[i+1]<<8&0xFF00);
 8002002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002004:	3301      	adds	r3, #1
 8002006:	2b11      	cmp	r3, #17
 8002008:	d80b      	bhi.n	8002022 <mcu_flash_save+0x92>
 800200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200c:	3301      	adds	r3, #1
 800200e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002010:	4413      	add	r3, r2
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	b21a      	sxth	r2, r3
 8002018:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800201c:	4313      	orrs	r3, r2
 800201e:	b21b      	sxth	r3, r3
 8002020:	857b      	strh	r3, [r7, #42]	; 0x2a
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,mcu_flash_obj->first_block_addr+i,tmp);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002028:	18d1      	adds	r1, r2, r3
 800202a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800202c:	2200      	movs	r2, #0
 800202e:	461c      	mov	r4, r3
 8002030:	4615      	mov	r5, r2
 8002032:	4622      	mov	r2, r4
 8002034:	462b      	mov	r3, r5
 8002036:	2001      	movs	r0, #1
 8002038:	f001 fb98 	bl	800376c <HAL_FLASH_Program>
		i=i+2;
 800203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203e:	3302      	adds	r3, #2
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(i<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE))
 8002042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002044:	2b11      	cmp	r3, #17
 8002046:	d9d7      	bls.n	8001ff8 <mcu_flash_save+0x68>
	}

	HAL_FLASH_Lock();
 8002048:	f001 fc06 	bl	8003858 <HAL_FLASH_Lock>
}
 800204c:	3730      	adds	r7, #48	; 0x30
 800204e:	46bd      	mov	sp, r7
 8002050:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002054 <read_time>:

extern RTC_HandleTypeDef hrtc;
rtc_typedef rtc;

time_t read_time(rtc_typedef* self_object)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08c      	sub	sp, #48	; 0x30
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	struct tm currTime;
	HAL_RTC_GetTime(&hrtc, &self_object->time, RTC_FORMAT_BIN);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	4619      	mov	r1, r3
 8002062:	4818      	ldr	r0, [pc, #96]	; (80020c4 <read_time+0x70>)
 8002064:	f004 fa96 	bl	8006594 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &self_object->date, RTC_FORMAT_BIN);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3314      	adds	r3, #20
 800206c:	2200      	movs	r2, #0
 800206e:	4619      	mov	r1, r3
 8002070:	4814      	ldr	r0, [pc, #80]	; (80020c4 <read_time+0x70>)
 8002072:	f004 fb71 	bl	8006758 <HAL_RTC_GetDate>
	currTime.tm_hour=self_object->time.Hours;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	617b      	str	r3, [r7, #20]
	currTime.tm_min=self_object->time.Minutes;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	785b      	ldrb	r3, [r3, #1]
 8002080:	613b      	str	r3, [r7, #16]
	currTime.tm_sec=self_object->time.Seconds;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	789b      	ldrb	r3, [r3, #2]
 8002086:	60fb      	str	r3, [r7, #12]
	currTime.tm_mday=self_object->date.Date;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	7d9b      	ldrb	r3, [r3, #22]
 800208c:	61bb      	str	r3, [r7, #24]
	currTime.tm_mon=self_object->date.Month-1;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	7d5b      	ldrb	r3, [r3, #21]
 8002092:	3b01      	subs	r3, #1
 8002094:	61fb      	str	r3, [r7, #28]
	currTime.tm_year=(2000+self_object->date.Year)-1900;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	7ddb      	ldrb	r3, [r3, #23]
 800209a:	3364      	adds	r3, #100	; 0x64
 800209c:	623b      	str	r3, [r7, #32]
	self_object->timestamp=mktime(&currTime);
 800209e:	f107 030c 	add.w	r3, r7, #12
 80020a2:	4618      	mov	r0, r3
 80020a4:	f012 fac8 	bl	8014638 <mktime>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	e9c1 2306 	strd	r2, r3, [r1, #24]
	return self_object->timestamp;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 80020b8:	4610      	mov	r0, r2
 80020ba:	4619      	mov	r1, r3
 80020bc:	3730      	adds	r7, #48	; 0x30
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	2000082c 	.word	0x2000082c

080020c8 <set_time>:

time_t set_time(rtc_typedef* self_object)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetTime(&hrtc, &self_object->time, RTC_FORMAT_BIN);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	4619      	mov	r1, r3
 80020d6:	4808      	ldr	r0, [pc, #32]	; (80020f8 <set_time+0x30>)
 80020d8:	f004 f9c2 	bl	8006460 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &self_object->date, RTC_FORMAT_BIN);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3314      	adds	r3, #20
 80020e0:	2200      	movs	r2, #0
 80020e2:	4619      	mov	r1, r3
 80020e4:	4804      	ldr	r0, [pc, #16]	; (80020f8 <set_time+0x30>)
 80020e6:	f004 fab3 	bl	8006650 <HAL_RTC_SetDate>
}
 80020ea:	bf00      	nop
 80020ec:	4610      	mov	r0, r2
 80020ee:	4619      	mov	r1, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000082c 	.word	0x2000082c

080020fc <sd_ss_set_active>:
extern volatile uint16_t htim2;

uint8_t spi_rx_buffer[512];

void sd_ss_set_active(uint8_t drv)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
  active_sd_ss_pin=sd_cards_ss[drv].sd_ss_pin;
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	4a08      	ldr	r2, [pc, #32]	; (800212c <sd_ss_set_active+0x30>)
 800210a:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <sd_ss_set_active+0x34>)
 8002110:	801a      	strh	r2, [r3, #0]
  active_sd_ss_port=sd_cards_ss[drv].sd_ss_port;
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	4a05      	ldr	r2, [pc, #20]	; (800212c <sd_ss_set_active+0x30>)
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4a05      	ldr	r2, [pc, #20]	; (8002134 <sd_ss_set_active+0x38>)
 800211e:	6013      	str	r3, [r2, #0]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	20001b40 	.word	0x20001b40
 8002130:	20001b3a 	.word	0x20001b3a
 8002134:	20001b3c 	.word	0x20001b3c

08002138 <sd_ss_active_pin_down>:

void sd_ss_active_pin_down()
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_RESET);
 800213c:	4b04      	ldr	r3, [pc, #16]	; (8002150 <sd_ss_active_pin_down+0x18>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a04      	ldr	r2, [pc, #16]	; (8002154 <sd_ss_active_pin_down+0x1c>)
 8002142:	8811      	ldrh	r1, [r2, #0]
 8002144:	2200      	movs	r2, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f001 ff84 	bl	8004054 <HAL_GPIO_WritePin>
}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20001b3c 	.word	0x20001b3c
 8002154:	20001b3a 	.word	0x20001b3a

08002158 <sd_ss_active_pin_up>:
void sd_ss_active_pin_up()
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_SET);
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <sd_ss_active_pin_up+0x18>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <sd_ss_active_pin_up+0x1c>)
 8002162:	8811      	ldrh	r1, [r2, #0]
 8002164:	2201      	movs	r2, #1
 8002166:	4618      	mov	r0, r3
 8002168:	f001 ff74 	bl	8004054 <HAL_GPIO_WritePin>
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20001b3c 	.word	0x20001b3c
 8002174:	20001b3a 	.word	0x20001b3a

08002178 <SD_cmd>:



//-----------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	71fb      	strb	r3, [r7, #7]
  uint8_t n, res;
  // ACMD<n> is the command sequense of CMD55-CMD<n>
  if (cmd & 0x80)
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	2b00      	cmp	r3, #0
 800218a:	da0e      	bge.n	80021aa <SD_cmd+0x32>
  {
    cmd &= 0x7F;
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002192:	71fb      	strb	r3, [r7, #7]
    res = SD_cmd(CMD55, 0);
 8002194:	2100      	movs	r1, #0
 8002196:	2077      	movs	r0, #119	; 0x77
 8002198:	f7ff ffee 	bl	8002178 <SD_cmd>
 800219c:	4603      	mov	r3, r0
 800219e:	73bb      	strb	r3, [r7, #14]
    if (res > 1) return res;
 80021a0:	7bbb      	ldrb	r3, [r7, #14]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d901      	bls.n	80021aa <SD_cmd+0x32>
 80021a6:	7bbb      	ldrb	r3, [r7, #14]
 80021a8:	e043      	b.n	8002232 <SD_cmd+0xba>
  }
  // Select the card
  SS_SD_DESELECT();
 80021aa:	f7ff ffd5 	bl	8002158 <sd_ss_active_pin_up>
  SPI_ReceiveByte();
 80021ae:	f000 f96a 	bl	8002486 <SPI_ReceiveByte>

  SS_SD_SELECT();
 80021b2:	f7ff ffc1 	bl	8002138 <sd_ss_active_pin_down>
  SPI_ReceiveByte();
 80021b6:	f000 f966 	bl	8002486 <SPI_ReceiveByte>
  // Send a command packet
  SPI_SendByte(cmd); // Start + Command index
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 f955 	bl	800246c <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	0e1b      	lsrs	r3, r3, #24
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 f94f 	bl	800246c <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	0c1b      	lsrs	r3, r3, #16
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 f949 	bl	800246c <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	0a1b      	lsrs	r3, r3, #8
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 f943 	bl	800246c <SPI_SendByte>
  SPI_SendByte((uint8_t)arg); // Argument[7..0]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 f93e 	bl	800246c <SPI_SendByte>

  n = 0x01; // Dummy CRC + Stop
 80021f0:	2301      	movs	r3, #1
 80021f2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	2b40      	cmp	r3, #64	; 0x40
 80021f8:	d101      	bne.n	80021fe <SD_cmd+0x86>
 80021fa:	2395      	movs	r3, #149	; 0x95
 80021fc:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	2b48      	cmp	r3, #72	; 0x48
 8002202:	d101      	bne.n	8002208 <SD_cmd+0x90>
 8002204:	2387      	movs	r3, #135	; 0x87
 8002206:	73fb      	strb	r3, [r7, #15]
  SPI_SendByte(n);
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	4618      	mov	r0, r3
 800220c:	f000 f92e 	bl	800246c <SPI_SendByte>
  // Receive a command response
  n = 10; // Wait for a valid response in timeout of 10 attempts
 8002210:	230a      	movs	r3, #10
 8002212:	73fb      	strb	r3, [r7, #15]
  do {
    res = SPI_ReceiveByte();
 8002214:	f000 f937 	bl	8002486 <SPI_ReceiveByte>
 8002218:	4603      	mov	r3, r0
 800221a:	73bb      	strb	r3, [r7, #14]
  } while ((res & 0x80) && --n);
 800221c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002220:	2b00      	cmp	r3, #0
 8002222:	da05      	bge.n	8002230 <SD_cmd+0xb8>
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	3b01      	subs	r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f1      	bne.n	8002214 <SD_cmd+0x9c>
  return res;
 8002230:	7bbb      	ldrb	r3, [r7, #14]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <sd_ini>:

uint8_t sd_ini(void)
{
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
	  uint8_t i, cmd;;
	  uint8_t ocr[4];
	  int16_t tmr;
	  uint32_t temp;
	  //LD_OFF;
	  sdinfo.type = 0;
 8002242:	4b57      	ldr	r3, [pc, #348]	; (80023a0 <sd_ini+0x164>)
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]

	  hspi1.Init.BaudRatePrescaler = temp;
	  HAL_SPI_Init(&hspi1);
	  */

	  SS_SD_SELECT();
 8002248:	f7ff ff76 	bl	8002138 <sd_ss_active_pin_down>
	  if (SD_cmd(CMD0, 0) == 1) // Enter Idle state
 800224c:	2100      	movs	r1, #0
 800224e:	2040      	movs	r0, #64	; 0x40
 8002250:	f7ff ff92 	bl	8002178 <SD_cmd>
 8002254:	4603      	mov	r3, r0
 8002256:	2b01      	cmp	r3, #1
 8002258:	f040 809a 	bne.w	8002390 <sd_ini+0x154>
	  {
		  SPI_Release();
 800225c:	f000 f920 	bl	80024a0 <SPI_Release>
		  if (SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8002260:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002264:	2048      	movs	r0, #72	; 0x48
 8002266:	f7ff ff87 	bl	8002178 <SD_cmd>
 800226a:	4603      	mov	r3, r0
 800226c:	2b01      	cmp	r3, #1
 800226e:	d157      	bne.n	8002320 <sd_ini+0xe4>
		  {
			  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8002270:	2300      	movs	r3, #0
 8002272:	71fb      	strb	r3, [r7, #7]
 8002274:	e00c      	b.n	8002290 <sd_ini+0x54>
 8002276:	79fc      	ldrb	r4, [r7, #7]
 8002278:	f000 f905 	bl	8002486 <SPI_ReceiveByte>
 800227c:	4603      	mov	r3, r0
 800227e:	461a      	mov	r2, r3
 8002280:	f104 0308 	add.w	r3, r4, #8
 8002284:	443b      	add	r3, r7
 8002286:	f803 2c08 	strb.w	r2, [r3, #-8]
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	3301      	adds	r3, #1
 800228e:	71fb      	strb	r3, [r7, #7]
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	2b03      	cmp	r3, #3
 8002294:	d9ef      	bls.n	8002276 <sd_ini+0x3a>

			    // Get trailing return value of R7 resp
			    if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8002296:	78bb      	ldrb	r3, [r7, #2]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d17b      	bne.n	8002394 <sd_ini+0x158>
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	2baa      	cmp	r3, #170	; 0xaa
 80022a0:	d178      	bne.n	8002394 <sd_ini+0x158>
			    {
			    	for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--)
 80022a2:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80022a6:	80bb      	strh	r3, [r7, #4]
 80022a8:	e005      	b.n	80022b6 <sd_ini+0x7a>
 80022aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	80bb      	strh	r3, [r7, #4]
 80022b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d007      	beq.n	80022ce <sd_ini+0x92>
 80022be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80022c2:	20e9      	movs	r0, #233	; 0xe9
 80022c4:	f7ff ff58 	bl	8002178 <SD_cmd>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1ed      	bne.n	80022aa <sd_ini+0x6e>
			    	    ; // Wait for leaving idle state (ACMD41 with HCS bit)
			    	if (tmr && SD_cmd(CMD58, 0) == 0)
 80022ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d05e      	beq.n	8002394 <sd_ini+0x158>
 80022d6:	2100      	movs	r1, #0
 80022d8:	207a      	movs	r0, #122	; 0x7a
 80022da:	f7ff ff4d 	bl	8002178 <SD_cmd>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d157      	bne.n	8002394 <sd_ini+0x158>
			    	 { // Check CCS bit in the OCR
			    	  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 80022e4:	2300      	movs	r3, #0
 80022e6:	71fb      	strb	r3, [r7, #7]
 80022e8:	e00c      	b.n	8002304 <sd_ini+0xc8>
 80022ea:	79fc      	ldrb	r4, [r7, #7]
 80022ec:	f000 f8cb 	bl	8002486 <SPI_ReceiveByte>
 80022f0:	4603      	mov	r3, r0
 80022f2:	461a      	mov	r2, r3
 80022f4:	f104 0308 	add.w	r3, r4, #8
 80022f8:	443b      	add	r3, r7
 80022fa:	f803 2c08 	strb.w	r2, [r3, #-8]
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	3301      	adds	r3, #1
 8002302:	71fb      	strb	r3, [r7, #7]
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	2b03      	cmp	r3, #3
 8002308:	d9ef      	bls.n	80022ea <sd_ini+0xae>
			     	   sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 800230a:	783b      	ldrb	r3, [r7, #0]
 800230c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <sd_ini+0xdc>
 8002314:	220c      	movs	r2, #12
 8002316:	e000      	b.n	800231a <sd_ini+0xde>
 8002318:	2204      	movs	r2, #4
 800231a:	4b21      	ldr	r3, [pc, #132]	; (80023a0 <sd_ini+0x164>)
 800231c:	701a      	strb	r2, [r3, #0]
 800231e:	e039      	b.n	8002394 <sd_ini+0x158>
			    	}
			    }
		  }
		  else //SDv1 or MMCv3
		  {
			  if (SD_cmd(ACMD41, 0) <= 1)
 8002320:	2100      	movs	r1, #0
 8002322:	20e9      	movs	r0, #233	; 0xe9
 8002324:	f7ff ff28 	bl	8002178 <SD_cmd>
 8002328:	4603      	mov	r3, r0
 800232a:	2b01      	cmp	r3, #1
 800232c:	d805      	bhi.n	800233a <sd_ini+0xfe>
			    {
			      sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 800232e:	4b1c      	ldr	r3, [pc, #112]	; (80023a0 <sd_ini+0x164>)
 8002330:	2202      	movs	r2, #2
 8002332:	701a      	strb	r2, [r3, #0]
 8002334:	23e9      	movs	r3, #233	; 0xe9
 8002336:	71bb      	strb	r3, [r7, #6]
 8002338:	e004      	b.n	8002344 <sd_ini+0x108>
			    }
			    else
			    {
			      sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 800233a:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <sd_ini+0x164>)
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
 8002340:	2341      	movs	r3, #65	; 0x41
 8002342:	71bb      	strb	r3, [r7, #6]
			    }
			    for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 8002344:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8002348:	80bb      	strh	r3, [r7, #4]
 800234a:	e005      	b.n	8002358 <sd_ini+0x11c>
 800234c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29b      	uxth	r3, r3
 8002356:	80bb      	strh	r3, [r7, #4]
 8002358:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d007      	beq.n	8002370 <sd_ini+0x134>
 8002360:	79bb      	ldrb	r3, [r7, #6]
 8002362:	2100      	movs	r1, #0
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff07 	bl	8002178 <SD_cmd>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1ed      	bne.n	800234c <sd_ini+0x110>
			    if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8002370:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d007      	beq.n	8002388 <sd_ini+0x14c>
 8002378:	f44f 7100 	mov.w	r1, #512	; 0x200
 800237c:	2050      	movs	r0, #80	; 0x50
 800237e:	f7ff fefb 	bl	8002178 <SD_cmd>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <sd_ini+0x158>
			    sdinfo.type = 0;
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <sd_ini+0x164>)
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
 800238e:	e001      	b.n	8002394 <sd_ini+0x158>

	  }
	  else
	  {

	    return 1;
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <sd_ini+0x15a>
	  }




  return 0;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	bd90      	pop	{r4, r7, pc}
 800239e:	bf00      	nop
 80023a0:	20001b38 	.word	0x20001b38

080023a4 <Error>:

static void Error (void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  //LD_ON;
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <SPI_wait_ready>:

uint8_t SPI_wait_ready(void)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
  uint8_t res;
  uint16_t cnt;
  cnt=0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	80fb      	strh	r3, [r7, #6]
  do {
    res=SPI_ReceiveByte();
 80023bc:	f000 f863 	bl	8002486 <SPI_ReceiveByte>
 80023c0:	4603      	mov	r3, r0
 80023c2:	717b      	strb	r3, [r7, #5]
    cnt++;
 80023c4:	88fb      	ldrh	r3, [r7, #6]
 80023c6:	3301      	adds	r3, #1
 80023c8:	80fb      	strh	r3, [r7, #6]
  } while ( (res!=0xFF)&&(cnt<0xFFFF) );
 80023ca:	797b      	ldrb	r3, [r7, #5]
 80023cc:	2bff      	cmp	r3, #255	; 0xff
 80023ce:	d004      	beq.n	80023da <SPI_wait_ready+0x28>
 80023d0:	88fb      	ldrh	r3, [r7, #6]
 80023d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d1f0      	bne.n	80023bc <SPI_wait_ready+0xa>
  if (cnt>=0xFFFF) return 1;
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d101      	bne.n	80023e8 <SPI_wait_ready+0x36>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <SPI_wait_ready+0x38>
  return res;
 80023e8:	797b      	ldrb	r3, [r7, #5]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <SPIx_Write_Multi>:
{
	if(HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_READY) return F_OK;
	else return F_ERR;
}
F_RES SPIx_Write_Multi(uint8_t* tx_buf,uint32_t size)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af02      	add	r7, sp, #8
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
	if(HAL_SPI_TransmitReceive(&hspi1, tx_buf, spi_rx_buffer, size,HAL_MAX_DELAY)==HAL_OK) return F_OK;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	f04f 32ff 	mov.w	r2, #4294967295
 8002406:	9200      	str	r2, [sp, #0]
 8002408:	4a07      	ldr	r2, [pc, #28]	; (8002428 <SPIx_Write_Multi+0x34>)
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4807      	ldr	r0, [pc, #28]	; (800242c <SPIx_Write_Multi+0x38>)
 800240e:	f004 fb38 	bl	8006a82 <HAL_SPI_TransmitReceive>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <SPIx_Write_Multi+0x28>
 8002418:	2300      	movs	r3, #0
 800241a:	e000      	b.n	800241e <SPIx_Write_Multi+0x2a>
		else return F_ERR;
 800241c:	2301      	movs	r3, #1
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20001b60 	.word	0x20001b60
 800242c:	2000084c 	.word	0x2000084c

08002430 <SPIx_WriteRead>:
	if(HAL_SPI_Transmit_DMA(&hspi1, tx_buf, size)==HAL_OK) return F_OK;
	else return F_ERR;
}

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af02      	add	r7, sp, #8
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 800243e:	f107 020f 	add.w	r2, r7, #15
 8002442:	1df9      	adds	r1, r7, #7
 8002444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	2301      	movs	r3, #1
 800244c:	4806      	ldr	r0, [pc, #24]	; (8002468 <SPIx_WriteRead+0x38>)
 800244e:	f004 fb18 	bl	8006a82 <HAL_SPI_TransmitReceive>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <SPIx_WriteRead+0x2c>
  {
    Error();
 8002458:	f7ff ffa4 	bl	80023a4 <Error>
  }
  return receivedbyte;
 800245c:	7bfb      	ldrb	r3, [r7, #15]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	2000084c 	.word	0x2000084c

0800246c <SPI_SendByte>:

void SPI_SendByte(uint8_t bt)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(bt);
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ffd9 	bl	8002430 <SPIx_WriteRead>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <SPI_ReceiveByte>:

uint8_t SPI_ReceiveByte(void)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
  uint8_t bt = SPIx_WriteRead(0xFF);
 800248c:	20ff      	movs	r0, #255	; 0xff
 800248e:	f7ff ffcf 	bl	8002430 <SPIx_WriteRead>
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
  return bt;
 8002496:	79fb      	ldrb	r3, [r7, #7]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <SPI_Release>:
void SPI_Release(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 80024a4:	20ff      	movs	r0, #255	; 0xff
 80024a6:	f7ff ffc3 	bl	8002430 <SPIx_WriteRead>
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}

080024ae <SD_Read_Block>:

uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)
{
 80024ae:	b590      	push	{r4, r7, lr}
 80024b0:	b085      	sub	sp, #20
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;

  result=SD_cmd (CMD17, lba);
 80024b8:	6839      	ldr	r1, [r7, #0]
 80024ba:	2051      	movs	r0, #81	; 0x51
 80024bc:	f7ff fe5c 	bl	8002178 <SD_cmd>
 80024c0:	4603      	mov	r3, r0
 80024c2:	737b      	strb	r3, [r7, #13]
  if (result!=0x00){
 80024c4:	7b7b      	ldrb	r3, [r7, #13]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <SD_Read_Block+0x20>
	  return 5;
 80024ca:	2305      	movs	r3, #5
 80024cc:	e02f      	b.n	800252e <SD_Read_Block+0x80>
  }

  SPI_Release();
 80024ce:	f7ff ffe7 	bl	80024a0 <SPI_Release>
   cnt=0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	81fb      	strh	r3, [r7, #14]
   do{
     result=SPI_ReceiveByte();
 80024d6:	f7ff ffd6 	bl	8002486 <SPI_ReceiveByte>
 80024da:	4603      	mov	r3, r0
 80024dc:	737b      	strb	r3, [r7, #13]
     cnt++;
 80024de:	89fb      	ldrh	r3, [r7, #14]
 80024e0:	3301      	adds	r3, #1
 80024e2:	81fb      	strh	r3, [r7, #14]
   } while ( (result!=0xFE)&&(cnt<0xFFFF) );
 80024e4:	7b7b      	ldrb	r3, [r7, #13]
 80024e6:	2bfe      	cmp	r3, #254	; 0xfe
 80024e8:	d004      	beq.n	80024f4 <SD_Read_Block+0x46>
 80024ea:	89fb      	ldrh	r3, [r7, #14]
 80024ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d1f0      	bne.n	80024d6 <SD_Read_Block+0x28>
   if (cnt>=0xFFFF) {
 80024f4:	89fb      	ldrh	r3, [r7, #14]
 80024f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d101      	bne.n	8002502 <SD_Read_Block+0x54>
	   return 5;
 80024fe:	2305      	movs	r3, #5
 8002500:	e015      	b.n	800252e <SD_Read_Block+0x80>
   }
   for (cnt=0;cnt<512;cnt++) buff[cnt]=SPI_ReceiveByte();
 8002502:	2300      	movs	r3, #0
 8002504:	81fb      	strh	r3, [r7, #14]
 8002506:	e009      	b.n	800251c <SD_Read_Block+0x6e>
 8002508:	89fb      	ldrh	r3, [r7, #14]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	18d4      	adds	r4, r2, r3
 800250e:	f7ff ffba 	bl	8002486 <SPI_ReceiveByte>
 8002512:	4603      	mov	r3, r0
 8002514:	7023      	strb	r3, [r4, #0]
 8002516:	89fb      	ldrh	r3, [r7, #14]
 8002518:	3301      	adds	r3, #1
 800251a:	81fb      	strh	r3, [r7, #14]
 800251c:	89fb      	ldrh	r3, [r7, #14]
 800251e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002522:	d3f1      	bcc.n	8002508 <SD_Read_Block+0x5a>
   SPI_Release();
 8002524:	f7ff ffbc 	bl	80024a0 <SPI_Release>
   SPI_Release();
 8002528:	f7ff ffba 	bl	80024a0 <SPI_Release>



  return 0;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	bd90      	pop	{r4, r7, pc}
	...

08002538 <SD_Write_Blocks>:

uint8_t SD_Write_Blocks (uint8_t *buff, uint32_t lba,uint16_t count)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	4613      	mov	r3, r2
 8002544:	80fb      	strh	r3, [r7, #6]
  tick1=xTaskGetTickCount();
 8002546:	f010 fa95 	bl	8012a74 <xTaskGetTickCount>
 800254a:	4603      	mov	r3, r0
 800254c:	4a39      	ldr	r2, [pc, #228]	; (8002634 <SD_Write_Blocks+0xfc>)
 800254e:	6013      	str	r3, [r2, #0]
  uint8_t result;
  uint16_t cnt;


  result=SD_cmd(CMD25,lba);//CMD25
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	2059      	movs	r0, #89	; 0x59
 8002554:	f7ff fe10 	bl	8002178 <SD_cmd>
 8002558:	4603      	mov	r3, r0
 800255a:	75fb      	strb	r3, [r7, #23]
  if (result!=0x00){
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <SD_Write_Blocks+0x2e>
	  return 6;
 8002562:	2306      	movs	r3, #6
 8002564:	e061      	b.n	800262a <SD_Write_Blocks+0xf2>
  }
  SPI_Release();  //1byte gap
 8002566:	f7ff ff9b 	bl	80024a0 <SPI_Release>

  for(int i=0;i<count;i++){
 800256a:	2300      	movs	r3, #0
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	e035      	b.n	80025dc <SD_Write_Blocks+0xa4>
   SPI_SendByte (0xFC);//token CMD25
 8002570:	20fc      	movs	r0, #252	; 0xfc
 8002572:	f7ff ff7b 	bl	800246c <SPI_SendByte>

   SPIx_Write_Multi(buff,512);
 8002576:	f44f 7100 	mov.w	r1, #512	; 0x200
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f7ff ff3a 	bl	80023f4 <SPIx_Write_Multi>
   buff+=512;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002586:	60fb      	str	r3, [r7, #12]
   SPI_Release();   //CRC
 8002588:	f7ff ff8a 	bl	80024a0 <SPI_Release>
   SPI_Release();   //CRC
 800258c:	f7ff ff88 	bl	80024a0 <SPI_Release>


   result=SPI_ReceiveByte();
 8002590:	f7ff ff79 	bl	8002486 <SPI_ReceiveByte>
 8002594:	4603      	mov	r3, r0
 8002596:	75fb      	strb	r3, [r7, #23]
   if ((result&0x1F)!=0x05) {
 8002598:	7dfb      	ldrb	r3, [r7, #23]
 800259a:	f003 031f 	and.w	r3, r3, #31
 800259e:	2b05      	cmp	r3, #5
 80025a0:	d001      	beq.n	80025a6 <SD_Write_Blocks+0x6e>
	  return 6;
 80025a2:	2306      	movs	r3, #6
 80025a4:	e041      	b.n	800262a <SD_Write_Blocks+0xf2>
   }
   cnt=0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	83fb      	strh	r3, [r7, #30]
   do {
    result=SPI_ReceiveByte();
 80025aa:	f7ff ff6c 	bl	8002486 <SPI_ReceiveByte>
 80025ae:	4603      	mov	r3, r0
 80025b0:	75fb      	strb	r3, [r7, #23]
    cnt++;
 80025b2:	8bfb      	ldrh	r3, [r7, #30]
 80025b4:	3301      	adds	r3, #1
 80025b6:	83fb      	strh	r3, [r7, #30]
   } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 80025b8:	7dfb      	ldrb	r3, [r7, #23]
 80025ba:	2bff      	cmp	r3, #255	; 0xff
 80025bc:	d004      	beq.n	80025c8 <SD_Write_Blocks+0x90>
 80025be:	8bfb      	ldrh	r3, [r7, #30]
 80025c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d1f0      	bne.n	80025aa <SD_Write_Blocks+0x72>
   if (cnt>=0xFFFF) {
 80025c8:	8bfb      	ldrh	r3, [r7, #30]
 80025ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d101      	bne.n	80025d6 <SD_Write_Blocks+0x9e>
	  return 6;
 80025d2:	2306      	movs	r3, #6
 80025d4:	e029      	b.n	800262a <SD_Write_Blocks+0xf2>
  for(int i=0;i<count;i++){
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	3301      	adds	r3, #1
 80025da:	61bb      	str	r3, [r7, #24]
 80025dc:	88fb      	ldrh	r3, [r7, #6]
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	dbc5      	blt.n	8002570 <SD_Write_Blocks+0x38>
   }
  }

  SPI_SendByte (0xFD); //stop transaction token for CMD25
 80025e4:	20fd      	movs	r0, #253	; 0xfd
 80025e6:	f7ff ff41 	bl	800246c <SPI_SendByte>
  SPI_Release();       //1byte gap
 80025ea:	f7ff ff59 	bl	80024a0 <SPI_Release>
  cnt=0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	83fb      	strh	r3, [r7, #30]
  do {
	result=SPI_ReceiveByte();
 80025f2:	f7ff ff48 	bl	8002486 <SPI_ReceiveByte>
 80025f6:	4603      	mov	r3, r0
 80025f8:	75fb      	strb	r3, [r7, #23]
	cnt++;
 80025fa:	8bfb      	ldrh	r3, [r7, #30]
 80025fc:	3301      	adds	r3, #1
 80025fe:	83fb      	strh	r3, [r7, #30]
  } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 8002600:	7dfb      	ldrb	r3, [r7, #23]
 8002602:	2bff      	cmp	r3, #255	; 0xff
 8002604:	d004      	beq.n	8002610 <SD_Write_Blocks+0xd8>
 8002606:	8bfb      	ldrh	r3, [r7, #30]
 8002608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800260c:	4293      	cmp	r3, r2
 800260e:	d1f0      	bne.n	80025f2 <SD_Write_Blocks+0xba>
  if (cnt>=0xFFFF) return 6;
 8002610:	8bfb      	ldrh	r3, [r7, #30]
 8002612:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002616:	4293      	cmp	r3, r2
 8002618:	d101      	bne.n	800261e <SD_Write_Blocks+0xe6>
 800261a:	2306      	movs	r3, #6
 800261c:	e005      	b.n	800262a <SD_Write_Blocks+0xf2>
  tick2=xTaskGetTickCount();
 800261e:	f010 fa29 	bl	8012a74 <xTaskGetTickCount>
 8002622:	4603      	mov	r3, r0
 8002624:	4a04      	ldr	r2, [pc, #16]	; (8002638 <SD_Write_Blocks+0x100>)
 8002626:	6013      	str	r3, [r2, #0]
  return 0;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3720      	adds	r7, #32
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20001b08 	.word	0x20001b08
 8002638:	20001b0c 	.word	0x20001b0c

0800263c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	607b      	str	r3, [r7, #4]
 8002646:	4b12      	ldr	r3, [pc, #72]	; (8002690 <HAL_MspInit+0x54>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	4a11      	ldr	r2, [pc, #68]	; (8002690 <HAL_MspInit+0x54>)
 800264c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002650:	6453      	str	r3, [r2, #68]	; 0x44
 8002652:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <HAL_MspInit+0x54>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265a:	607b      	str	r3, [r7, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	603b      	str	r3, [r7, #0]
 8002662:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_MspInit+0x54>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <HAL_MspInit+0x54>)
 8002668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266c:	6413      	str	r3, [r2, #64]	; 0x40
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <HAL_MspInit+0x54>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	210f      	movs	r1, #15
 800267e:	f06f 0001 	mvn.w	r0, #1
 8002682:	f000 fccd 	bl	8003020 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800

08002694 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800269c:	f107 0308 	add.w	r3, r7, #8
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a0c      	ldr	r2, [pc, #48]	; (80026e0 <HAL_RTC_MspInit+0x4c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d111      	bne.n	80026d8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80026b4:	2302      	movs	r3, #2
 80026b6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80026b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026bc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026be:	f107 0308 	add.w	r3, r7, #8
 80026c2:	4618      	mov	r0, r3
 80026c4:	f003 fd74 	bl	80061b0 <HAL_RCCEx_PeriphCLKConfig>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80026ce:	f7ff fbe7 	bl	8001ea0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026d2:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <HAL_RTC_MspInit+0x50>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80026d8:	bf00      	nop
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40002800 	.word	0x40002800
 80026e4:	42470e3c 	.word	0x42470e3c

080026e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08a      	sub	sp, #40	; 0x28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a34      	ldr	r2, [pc, #208]	; (80027d8 <HAL_SPI_MspInit+0xf0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d162      	bne.n	80027d0 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	4b33      	ldr	r3, [pc, #204]	; (80027dc <HAL_SPI_MspInit+0xf4>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	4a32      	ldr	r2, [pc, #200]	; (80027dc <HAL_SPI_MspInit+0xf4>)
 8002714:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002718:	6453      	str	r3, [r2, #68]	; 0x44
 800271a:	4b30      	ldr	r3, [pc, #192]	; (80027dc <HAL_SPI_MspInit+0xf4>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <HAL_SPI_MspInit+0xf4>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a2b      	ldr	r2, [pc, #172]	; (80027dc <HAL_SPI_MspInit+0xf4>)
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b29      	ldr	r3, [pc, #164]	; (80027dc <HAL_SPI_MspInit+0xf4>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002742:	2338      	movs	r3, #56	; 0x38
 8002744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800274a:	2301      	movs	r3, #1
 800274c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274e:	2303      	movs	r3, #3
 8002750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002752:	2305      	movs	r3, #5
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002756:	f107 0314 	add.w	r3, r7, #20
 800275a:	4619      	mov	r1, r3
 800275c:	4820      	ldr	r0, [pc, #128]	; (80027e0 <HAL_SPI_MspInit+0xf8>)
 800275e:	f001 fadd 	bl	8003d1c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002762:	4b20      	ldr	r3, [pc, #128]	; (80027e4 <HAL_SPI_MspInit+0xfc>)
 8002764:	4a20      	ldr	r2, [pc, #128]	; (80027e8 <HAL_SPI_MspInit+0x100>)
 8002766:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002768:	4b1e      	ldr	r3, [pc, #120]	; (80027e4 <HAL_SPI_MspInit+0xfc>)
 800276a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800276e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002770:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <HAL_SPI_MspInit+0xfc>)
 8002772:	2240      	movs	r2, #64	; 0x40
 8002774:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002776:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <HAL_SPI_MspInit+0xfc>)
 8002778:	2200      	movs	r2, #0
 800277a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800277c:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <HAL_SPI_MspInit+0xfc>)
 800277e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002782:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002784:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <HAL_SPI_MspInit+0xfc>)
 8002786:	2200      	movs	r2, #0
 8002788:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800278a:	4b16      	ldr	r3, [pc, #88]	; (80027e4 <HAL_SPI_MspInit+0xfc>)
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002790:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <HAL_SPI_MspInit+0xfc>)
 8002792:	2200      	movs	r2, #0
 8002794:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002796:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <HAL_SPI_MspInit+0xfc>)
 8002798:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800279c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800279e:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_SPI_MspInit+0xfc>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80027a4:	480f      	ldr	r0, [pc, #60]	; (80027e4 <HAL_SPI_MspInit+0xfc>)
 80027a6:	f000 fc65 	bl	8003074 <HAL_DMA_Init>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80027b0:	f7ff fb76 	bl	8001ea0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a0b      	ldr	r2, [pc, #44]	; (80027e4 <HAL_SPI_MspInit+0xfc>)
 80027b8:	649a      	str	r2, [r3, #72]	; 0x48
 80027ba:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <HAL_SPI_MspInit+0xfc>)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80027c0:	2200      	movs	r2, #0
 80027c2:	2105      	movs	r1, #5
 80027c4:	2023      	movs	r0, #35	; 0x23
 80027c6:	f000 fc2b 	bl	8003020 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80027ca:	2023      	movs	r0, #35	; 0x23
 80027cc:	f000 fc44 	bl	8003058 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80027d0:	bf00      	nop
 80027d2:	3728      	adds	r7, #40	; 0x28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40013000 	.word	0x40013000
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40020400 	.word	0x40020400
 80027e4:	200008a4 	.word	0x200008a4
 80027e8:	40026458 	.word	0x40026458

080027ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fc:	d115      	bne.n	800282a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <HAL_TIM_Base_MspInit+0x48>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	4a0b      	ldr	r2, [pc, #44]	; (8002834 <HAL_TIM_Base_MspInit+0x48>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6413      	str	r3, [r2, #64]	; 0x40
 800280e:	4b09      	ldr	r3, [pc, #36]	; (8002834 <HAL_TIM_Base_MspInit+0x48>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800281a:	2200      	movs	r2, #0
 800281c:	2105      	movs	r1, #5
 800281e:	201c      	movs	r0, #28
 8002820:	f000 fbfe 	bl	8003020 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002824:	201c      	movs	r0, #28
 8002826:	f000 fc17 	bl	8003058 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800282a:	bf00      	nop
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40023800 	.word	0x40023800

08002838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <HAL_UART_MspInit+0x94>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d134      	bne.n	80028c4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <HAL_UART_MspInit+0x98>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	4a1b      	ldr	r2, [pc, #108]	; (80028d0 <HAL_UART_MspInit+0x98>)
 8002864:	f043 0310 	orr.w	r3, r3, #16
 8002868:	6453      	str	r3, [r2, #68]	; 0x44
 800286a:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <HAL_UART_MspInit+0x98>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f003 0310 	and.w	r3, r3, #16
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <HAL_UART_MspInit+0x98>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a14      	ldr	r2, [pc, #80]	; (80028d0 <HAL_UART_MspInit+0x98>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_UART_MspInit+0x98>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002892:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002898:	2302      	movs	r3, #2
 800289a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a0:	2303      	movs	r3, #3
 80028a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028a4:	2307      	movs	r3, #7
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a8:	f107 0314 	add.w	r3, r7, #20
 80028ac:	4619      	mov	r1, r3
 80028ae:	4809      	ldr	r0, [pc, #36]	; (80028d4 <HAL_UART_MspInit+0x9c>)
 80028b0:	f001 fa34 	bl	8003d1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80028b4:	2200      	movs	r2, #0
 80028b6:	2105      	movs	r1, #5
 80028b8:	2025      	movs	r0, #37	; 0x25
 80028ba:	f000 fbb1 	bl	8003020 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028be:	2025      	movs	r0, #37	; 0x25
 80028c0:	f000 fbca 	bl	8003058 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80028c4:	bf00      	nop
 80028c6:	3728      	adds	r7, #40	; 0x28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40011000 	.word	0x40011000
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40020000 	.word	0x40020000

080028d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08c      	sub	sp, #48	; 0x30
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80028e8:	2200      	movs	r2, #0
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	2019      	movs	r0, #25
 80028ee:	f000 fb97 	bl	8003020 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80028f2:	2019      	movs	r0, #25
 80028f4:	f000 fbb0 	bl	8003058 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	4b1f      	ldr	r3, [pc, #124]	; (800297c <HAL_InitTick+0xa4>)
 80028fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002900:	4a1e      	ldr	r2, [pc, #120]	; (800297c <HAL_InitTick+0xa4>)
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	6453      	str	r3, [r2, #68]	; 0x44
 8002908:	4b1c      	ldr	r3, [pc, #112]	; (800297c <HAL_InitTick+0xa4>)
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002914:	f107 0210 	add.w	r2, r7, #16
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	4611      	mov	r1, r2
 800291e:	4618      	mov	r0, r3
 8002920:	f003 fc14 	bl	800614c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002924:	f003 fbfe 	bl	8006124 <HAL_RCC_GetPCLK2Freq>
 8002928:	4603      	mov	r3, r0
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002930:	4a13      	ldr	r2, [pc, #76]	; (8002980 <HAL_InitTick+0xa8>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0c9b      	lsrs	r3, r3, #18
 8002938:	3b01      	subs	r3, #1
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800293c:	4b11      	ldr	r3, [pc, #68]	; (8002984 <HAL_InitTick+0xac>)
 800293e:	4a12      	ldr	r2, [pc, #72]	; (8002988 <HAL_InitTick+0xb0>)
 8002940:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002942:	4b10      	ldr	r3, [pc, #64]	; (8002984 <HAL_InitTick+0xac>)
 8002944:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002948:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800294a:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <HAL_InitTick+0xac>)
 800294c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <HAL_InitTick+0xac>)
 8002952:	2200      	movs	r2, #0
 8002954:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002956:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_InitTick+0xac>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800295c:	4809      	ldr	r0, [pc, #36]	; (8002984 <HAL_InitTick+0xac>)
 800295e:	f004 fc1b 	bl	8007198 <HAL_TIM_Base_Init>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d104      	bne.n	8002972 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002968:	4806      	ldr	r0, [pc, #24]	; (8002984 <HAL_InitTick+0xac>)
 800296a:	f004 fc65 	bl	8007238 <HAL_TIM_Base_Start_IT>
 800296e:	4603      	mov	r3, r0
 8002970:	e000      	b.n	8002974 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
}
 8002974:	4618      	mov	r0, r3
 8002976:	3730      	adds	r7, #48	; 0x30
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40023800 	.word	0x40023800
 8002980:	431bde83 	.word	0x431bde83
 8002984:	20001d60 	.word	0x20001d60
 8002988:	40010000 	.word	0x40010000

0800298c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002990:	e7fe      	b.n	8002990 <NMI_Handler+0x4>

08002992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002996:	e7fe      	b.n	8002996 <HardFault_Handler+0x4>

08002998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800299c:	e7fe      	b.n	800299c <MemManage_Handler+0x4>

0800299e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029a2:	e7fe      	b.n	80029a2 <BusFault_Handler+0x4>

080029a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029a8:	e7fe      	b.n	80029a8 <UsageFault_Handler+0x4>

080029aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029aa:	b480      	push	{r7}
 80029ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029bc:	4802      	ldr	r0, [pc, #8]	; (80029c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80029be:	f004 fcab 	bl	8007318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20001d60 	.word	0x20001d60

080029cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029d0:	4802      	ldr	r0, [pc, #8]	; (80029dc <TIM2_IRQHandler+0x10>)
 80029d2:	f004 fca1 	bl	8007318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000904 	.word	0x20000904

080029e0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80029e4:	4802      	ldr	r0, [pc, #8]	; (80029f0 <SPI1_IRQHandler+0x10>)
 80029e6:	f004 f9ef 	bl	8006dc8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	2000084c 	.word	0x2000084c

080029f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029f8:	4802      	ldr	r0, [pc, #8]	; (8002a04 <USART1_IRQHandler+0x10>)
 80029fa:	f005 f9a3 	bl	8007d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	2000094c 	.word	0x2000094c

08002a08 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002a0c:	4802      	ldr	r0, [pc, #8]	; (8002a18 <DMA2_Stream3_IRQHandler+0x10>)
 8002a0e:	f000 fc71 	bl	80032f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	200008a4 	.word	0x200008a4

08002a1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002a20:	4802      	ldr	r0, [pc, #8]	; (8002a2c <OTG_FS_IRQHandler+0x10>)
 8002a22:	f001 fd9b 	bl	800455c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	2000d7a8 	.word	0x2000d7a8

08002a30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
	return 1;
 8002a34:	2301      	movs	r3, #1
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <_kill>:

int _kill(int pid, int sig)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a4a:	f011 fbd1 	bl	80141f0 <__errno>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2216      	movs	r2, #22
 8002a52:	601a      	str	r2, [r3, #0]
	return -1;
 8002a54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <_exit>:

void _exit (int status)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a68:	f04f 31ff 	mov.w	r1, #4294967295
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff ffe7 	bl	8002a40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a72:	e7fe      	b.n	8002a72 <_exit+0x12>

08002a74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	e00a      	b.n	8002a9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a86:	f3af 8000 	nop.w
 8002a8a:	4601      	mov	r1, r0
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	60ba      	str	r2, [r7, #8]
 8002a92:	b2ca      	uxtb	r2, r1
 8002a94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	dbf0      	blt.n	8002a86 <_read+0x12>
	}

return len;
 8002aa4:	687b      	ldr	r3, [r7, #4]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b086      	sub	sp, #24
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	60f8      	str	r0, [r7, #12]
 8002ab6:	60b9      	str	r1, [r7, #8]
 8002ab8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	e009      	b.n	8002ad4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	60ba      	str	r2, [r7, #8]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	dbf1      	blt.n	8002ac0 <_write+0x12>
	}
	return len;
 8002adc:	687b      	ldr	r3, [r7, #4]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <_close>:

int _close(int file)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
	return -1;
 8002aee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b0e:	605a      	str	r2, [r3, #4]
	return 0;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <_isatty>:

int _isatty(int file)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
	return 1;
 8002b26:	2301      	movs	r3, #1
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
	return 0;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b58:	4a14      	ldr	r2, [pc, #80]	; (8002bac <_sbrk+0x5c>)
 8002b5a:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <_sbrk+0x60>)
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b64:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <_sbrk+0x64>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d102      	bne.n	8002b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b6c:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <_sbrk+0x64>)
 8002b6e:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <_sbrk+0x68>)
 8002b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b72:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <_sbrk+0x64>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4413      	add	r3, r2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d207      	bcs.n	8002b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b80:	f011 fb36 	bl	80141f0 <__errno>
 8002b84:	4603      	mov	r3, r0
 8002b86:	220c      	movs	r2, #12
 8002b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8e:	e009      	b.n	8002ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <_sbrk+0x64>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b96:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <_sbrk+0x64>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	4a05      	ldr	r2, [pc, #20]	; (8002bb4 <_sbrk+0x64>)
 8002ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20020000 	.word	0x20020000
 8002bb0:	00000400 	.word	0x00000400
 8002bb4:	20001dac 	.word	0x20001dac
 8002bb8:	2000dae8 	.word	0x2000dae8

08002bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <SystemInit+0x20>)
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc6:	4a05      	ldr	r2, [pc, #20]	; (8002bdc <SystemInit+0x20>)
 8002bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <wav_file_open>:


extern UART_HandleTypeDef huart1;

F_RES wav_file_open(wav_file_typedef* self_object,char* filename,uint32_t sample_size,uint32_t sample_rate,uint8_t num_channels)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
  memcpy(self_object->header.chunk.prefix,"RIFF",4);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	4939      	ldr	r1, [pc, #228]	; (8002cd8 <wav_file_open+0xf8>)
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f011 fc31 	bl	801445c <memcpy>
  memcpy(self_object->header.chunk.postfix,"WAVE",4);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	3308      	adds	r3, #8
 8002bfe:	2204      	movs	r2, #4
 8002c00:	4936      	ldr	r1, [pc, #216]	; (8002cdc <wav_file_open+0xfc>)
 8002c02:	4618      	mov	r0, r3
 8002c04:	f011 fc2a 	bl	801445c <memcpy>
  memcpy(self_object->header.subchunk_fmt.prefix,"fmt ",4);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	330c      	adds	r3, #12
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	4934      	ldr	r1, [pc, #208]	; (8002ce0 <wav_file_open+0x100>)
 8002c10:	4618      	mov	r0, r3
 8002c12:	f011 fc23 	bl	801445c <memcpy>
  self_object->header.subchunk_fmt.size=16;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f042 0210 	orr.w	r2, r2, #16
 8002c1e:	741a      	strb	r2, [r3, #16]
 8002c20:	2200      	movs	r2, #0
 8002c22:	745a      	strb	r2, [r3, #17]
 8002c24:	2200      	movs	r2, #0
 8002c26:	749a      	strb	r2, [r3, #18]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	74da      	strb	r2, [r3, #19]
  self_object->header.subchunk_fmt.format=1;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f042 0201 	orr.w	r2, r2, #1
 8002c34:	751a      	strb	r2, [r3, #20]
 8002c36:	2200      	movs	r2, #0
 8002c38:	755a      	strb	r2, [r3, #21]
  self_object->header.subchunk_fmt.numchannels=num_channels;
 8002c3a:	7e3b      	ldrb	r3, [r7, #24]
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	82da      	strh	r2, [r3, #22]
  self_object->header.subchunk_fmt.samplerate=sample_rate;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	619a      	str	r2, [r3, #24]
  self_object->header.subchunk_fmt.bps=sample_size;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	845a      	strh	r2, [r3, #34]	; 0x22
  self_object->header.subchunk_fmt.byterate=sample_rate*num_channels*(sample_size/8);
 8002c50:	7e3b      	ldrb	r3, [r7, #24]
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	fb02 f303 	mul.w	r3, r2, r3
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	08d2      	lsrs	r2, r2, #3
 8002c5c:	fb03 f202 	mul.w	r2, r3, r2
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	61da      	str	r2, [r3, #28]
  self_object->header.subchunk_fmt.block_align=num_channels*(sample_size/8);
 8002c64:	7e3b      	ldrb	r3, [r7, #24]
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	08db      	lsrs	r3, r3, #3
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	fb12 f303 	smulbb	r3, r2, r3
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	841a      	strh	r2, [r3, #32]
  memcpy(self_object->header.subchunk_data.prefix,"data",4);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	3324      	adds	r3, #36	; 0x24
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	4919      	ldr	r1, [pc, #100]	; (8002ce4 <wav_file_open+0x104>)
 8002c80:	4618      	mov	r0, r3
 8002c82:	f011 fbeb 	bl	801445c <memcpy>
  self_object->data_counter=0;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  if(f_open(&self_object->media.file,filename,FA_CREATE_ALWAYS|FA_WRITE)==FR_OK){
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	3330      	adds	r3, #48	; 0x30
 8002ca4:	220a      	movs	r2, #10
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f00d f8dd 	bl	800fe68 <f_open>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10b      	bne.n	8002ccc <wav_file_open+0xec>
   f_lseek(&self_object->media.file, sizeof(self_object->header));
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002cba:	f04f 022c 	mov.w	r2, #44	; 0x2c
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	4608      	mov	r0, r1
 8002cc4:	f00d fe8d 	bl	80109e2 <f_lseek>
   return F_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	e000      	b.n	8002cce <wav_file_open+0xee>
  }
  return F_ERR;
 8002ccc:	2301      	movs	r3, #1
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	08016f14 	.word	0x08016f14
 8002cdc:	08016f1c 	.word	0x08016f1c
 8002ce0:	08016f24 	.word	0x08016f24
 8002ce4:	08016f2c 	.word	0x08016f2c

08002ce8 <wav_file_close>:

F_RES wav_file_close(wav_file_typedef* self_object)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
	self_object->header.subchunk_data.size=self_object->data_counter;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	629a      	str	r2, [r3, #40]	; 0x28
	self_object->header.chunk.size=36+self_object->data_counter;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	605a      	str	r2, [r3, #4]
 	f_lseek(&self_object->media.file, 0);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	4608      	mov	r0, r1
 8002d14:	f00d fe65 	bl	80109e2 <f_lseek>
 	if(f_write(&self_object->media.file,(uint8_t*)&self_object->header,sizeof(self_object->header),(void*)&self_object->media.byteswritten)==FR_OK){
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8002d26:	222c      	movs	r2, #44	; 0x2c
 8002d28:	f00d fb5f 	bl	80103ea <f_write>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <wav_file_close+0x58>
 	  f_close(&self_object->media.file);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3330      	adds	r3, #48	; 0x30
 8002d36:	4618      	mov	r0, r3
 8002d38:	f00d fe29 	bl	801098e <f_close>
 	  return F_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e000      	b.n	8002d42 <wav_file_close+0x5a>
 	}
 	return F_ERR;
 8002d40:	2301      	movs	r3, #1
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <wav_file_write>:

F_RES wav_file_write(wav_file_typedef* self_object,uint8_t* data,uint32_t length)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b086      	sub	sp, #24
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
	FRESULT res;
	self_object->data_counter+=length;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	441a      	add	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	62da      	str	r2, [r3, #44]	; 0x2c
	res=f_write(&self_object->media.file,data,length,(void*)&self_object->media.byteswritten);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	68b9      	ldr	r1, [r7, #8]
 8002d72:	f00d fb3a 	bl	80103ea <f_write>
 8002d76:	4603      	mov	r3, r0
 8002d78:	75fb      	strb	r3, [r7, #23]
	if(res==FR_OK) return F_OK;
 8002d7a:	7dfb      	ldrb	r3, [r7, #23]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <wav_file_write+0x3a>
 8002d80:	2300      	movs	r3, #0
 8002d82:	e000      	b.n	8002d86 <wav_file_write+0x3c>
	return F_ERR;
 8002d84:	2301      	movs	r3, #1
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d94:	480d      	ldr	r0, [pc, #52]	; (8002dcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d96:	490e      	ldr	r1, [pc, #56]	; (8002dd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d98:	4a0e      	ldr	r2, [pc, #56]	; (8002dd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d9c:	e002      	b.n	8002da4 <LoopCopyDataInit>

08002d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002da2:	3304      	adds	r3, #4

08002da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002da8:	d3f9      	bcc.n	8002d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002daa:	4a0b      	ldr	r2, [pc, #44]	; (8002dd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002dac:	4c0b      	ldr	r4, [pc, #44]	; (8002ddc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002db0:	e001      	b.n	8002db6 <LoopFillZerobss>

08002db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002db4:	3204      	adds	r2, #4

08002db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002db8:	d3fb      	bcc.n	8002db2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dba:	f7ff feff 	bl	8002bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dbe:	f011 fb13 	bl	80143e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dc2:	f7fe fa0b 	bl	80011dc <main>
  bx  lr    
 8002dc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002dc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dd0:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 8002dd4:	080177b8 	.word	0x080177b8
  ldr r2, =_sbss
 8002dd8:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 8002ddc:	2000dae4 	.word	0x2000dae4

08002de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002de0:	e7fe      	b.n	8002de0 <ADC_IRQHandler>
	...

08002de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002de8:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <HAL_Init+0x40>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a0d      	ldr	r2, [pc, #52]	; (8002e24 <HAL_Init+0x40>)
 8002dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002df2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002df4:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <HAL_Init+0x40>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a0a      	ldr	r2, [pc, #40]	; (8002e24 <HAL_Init+0x40>)
 8002dfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e00:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <HAL_Init+0x40>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a07      	ldr	r2, [pc, #28]	; (8002e24 <HAL_Init+0x40>)
 8002e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e0c:	2003      	movs	r0, #3
 8002e0e:	f000 f8fc 	bl	800300a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e12:	200f      	movs	r0, #15
 8002e14:	f7ff fd60 	bl	80028d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e18:	f7ff fc10 	bl	800263c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40023c00 	.word	0x40023c00

08002e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <HAL_IncTick+0x20>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_IncTick+0x24>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4413      	add	r3, r2
 8002e38:	4a04      	ldr	r2, [pc, #16]	; (8002e4c <HAL_IncTick+0x24>)
 8002e3a:	6013      	str	r3, [r2, #0]
}
 8002e3c:	bf00      	nop
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	2000023c 	.word	0x2000023c
 8002e4c:	20001db0 	.word	0x20001db0

08002e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return uwTick;
 8002e54:	4b03      	ldr	r3, [pc, #12]	; (8002e64 <HAL_GetTick+0x14>)
 8002e56:	681b      	ldr	r3, [r3, #0]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20001db0 	.word	0x20001db0

08002e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e70:	f7ff ffee 	bl	8002e50 <HAL_GetTick>
 8002e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e80:	d005      	beq.n	8002e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e82:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <HAL_Delay+0x44>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e8e:	bf00      	nop
 8002e90:	f7ff ffde 	bl	8002e50 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d8f7      	bhi.n	8002e90 <HAL_Delay+0x28>
  {
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	bf00      	nop
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	2000023c 	.word	0x2000023c

08002eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ee2:	4a04      	ldr	r2, [pc, #16]	; (8002ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	60d3      	str	r3, [r2, #12]
}
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002efc:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <__NVIC_GetPriorityGrouping+0x18>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	0a1b      	lsrs	r3, r3, #8
 8002f02:	f003 0307 	and.w	r3, r3, #7
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	e000ed00 	.word	0xe000ed00

08002f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	db0b      	blt.n	8002f3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	f003 021f 	and.w	r2, r3, #31
 8002f2c:	4907      	ldr	r1, [pc, #28]	; (8002f4c <__NVIC_EnableIRQ+0x38>)
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	2001      	movs	r0, #1
 8002f36:	fa00 f202 	lsl.w	r2, r0, r2
 8002f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	e000e100 	.word	0xe000e100

08002f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	6039      	str	r1, [r7, #0]
 8002f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	db0a      	blt.n	8002f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	490c      	ldr	r1, [pc, #48]	; (8002f9c <__NVIC_SetPriority+0x4c>)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	0112      	lsls	r2, r2, #4
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	440b      	add	r3, r1
 8002f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f78:	e00a      	b.n	8002f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4908      	ldr	r1, [pc, #32]	; (8002fa0 <__NVIC_SetPriority+0x50>)
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	3b04      	subs	r3, #4
 8002f88:	0112      	lsls	r2, r2, #4
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	761a      	strb	r2, [r3, #24]
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	e000e100 	.word	0xe000e100
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	; 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f1c3 0307 	rsb	r3, r3, #7
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	bf28      	it	cs
 8002fc2:	2304      	movcs	r3, #4
 8002fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	2b06      	cmp	r3, #6
 8002fcc:	d902      	bls.n	8002fd4 <NVIC_EncodePriority+0x30>
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3b03      	subs	r3, #3
 8002fd2:	e000      	b.n	8002fd6 <NVIC_EncodePriority+0x32>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fec:	f04f 31ff 	mov.w	r1, #4294967295
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	43d9      	mvns	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ffc:	4313      	orrs	r3, r2
         );
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3724      	adds	r7, #36	; 0x24
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b082      	sub	sp, #8
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff ff4c 	bl	8002eb0 <__NVIC_SetPriorityGrouping>
}
 8003018:	bf00      	nop
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003032:	f7ff ff61 	bl	8002ef8 <__NVIC_GetPriorityGrouping>
 8003036:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	68b9      	ldr	r1, [r7, #8]
 800303c:	6978      	ldr	r0, [r7, #20]
 800303e:	f7ff ffb1 	bl	8002fa4 <NVIC_EncodePriority>
 8003042:	4602      	mov	r2, r0
 8003044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003048:	4611      	mov	r1, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff ff80 	bl	8002f50 <__NVIC_SetPriority>
}
 8003050:	bf00      	nop
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff ff54 	bl	8002f14 <__NVIC_EnableIRQ>
}
 800306c:	bf00      	nop
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003080:	f7ff fee6 	bl	8002e50 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e099      	b.n	80031c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0201 	bic.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030b0:	e00f      	b.n	80030d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030b2:	f7ff fecd 	bl	8002e50 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b05      	cmp	r3, #5
 80030be:	d908      	bls.n	80030d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2203      	movs	r2, #3
 80030ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e078      	b.n	80031c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1e8      	bne.n	80030b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4b38      	ldr	r3, [pc, #224]	; (80031cc <HAL_DMA_Init+0x158>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800310a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003116:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	2b04      	cmp	r3, #4
 800312a:	d107      	bne.n	800313c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003134:	4313      	orrs	r3, r2
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f023 0307 	bic.w	r3, r3, #7
 8003152:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4313      	orrs	r3, r2
 800315c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	2b04      	cmp	r3, #4
 8003164:	d117      	bne.n	8003196 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00e      	beq.n	8003196 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fa7b 	bl	8003674 <DMA_CheckFifoParam>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2240      	movs	r2, #64	; 0x40
 8003188:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003192:	2301      	movs	r3, #1
 8003194:	e016      	b.n	80031c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 fa32 	bl	8003608 <DMA_CalcBaseAndBitshift>
 80031a4:	4603      	mov	r3, r0
 80031a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ac:	223f      	movs	r2, #63	; 0x3f
 80031ae:	409a      	lsls	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	f010803f 	.word	0xf010803f

080031d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031de:	f7ff fe37 	bl	8002e50 <HAL_GetTick>
 80031e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d008      	beq.n	8003202 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2280      	movs	r2, #128	; 0x80
 80031f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e052      	b.n	80032a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0216 	bic.w	r2, r2, #22
 8003210:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695a      	ldr	r2, [r3, #20]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003220:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <HAL_DMA_Abort+0x62>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0208 	bic.w	r2, r2, #8
 8003240:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0201 	bic.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003252:	e013      	b.n	800327c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003254:	f7ff fdfc 	bl	8002e50 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b05      	cmp	r3, #5
 8003260:	d90c      	bls.n	800327c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2220      	movs	r2, #32
 8003266:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2203      	movs	r2, #3
 800326c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e015      	b.n	80032a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1e4      	bne.n	8003254 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328e:	223f      	movs	r2, #63	; 0x3f
 8003290:	409a      	lsls	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d004      	beq.n	80032ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2280      	movs	r2, #128	; 0x80
 80032c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e00c      	b.n	80032e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2205      	movs	r2, #5
 80032d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0201 	bic.w	r2, r2, #1
 80032e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003300:	4b8e      	ldr	r3, [pc, #568]	; (800353c <HAL_DMA_IRQHandler+0x248>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a8e      	ldr	r2, [pc, #568]	; (8003540 <HAL_DMA_IRQHandler+0x24c>)
 8003306:	fba2 2303 	umull	r2, r3, r2, r3
 800330a:	0a9b      	lsrs	r3, r3, #10
 800330c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003312:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331e:	2208      	movs	r2, #8
 8003320:	409a      	lsls	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4013      	ands	r3, r2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d01a      	beq.n	8003360 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d013      	beq.n	8003360 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0204 	bic.w	r2, r2, #4
 8003346:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334c:	2208      	movs	r2, #8
 800334e:	409a      	lsls	r2, r3
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003358:	f043 0201 	orr.w	r2, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003364:	2201      	movs	r2, #1
 8003366:	409a      	lsls	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d012      	beq.n	8003396 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00b      	beq.n	8003396 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003382:	2201      	movs	r2, #1
 8003384:	409a      	lsls	r2, r3
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338e:	f043 0202 	orr.w	r2, r3, #2
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339a:	2204      	movs	r2, #4
 800339c:	409a      	lsls	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4013      	ands	r3, r2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d012      	beq.n	80033cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00b      	beq.n	80033cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b8:	2204      	movs	r2, #4
 80033ba:	409a      	lsls	r2, r3
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c4:	f043 0204 	orr.w	r2, r3, #4
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d0:	2210      	movs	r2, #16
 80033d2:	409a      	lsls	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d043      	beq.n	8003464 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d03c      	beq.n	8003464 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ee:	2210      	movs	r2, #16
 80033f0:	409a      	lsls	r2, r3
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d018      	beq.n	8003436 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d108      	bne.n	8003424 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d024      	beq.n	8003464 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	4798      	blx	r3
 8003422:	e01f      	b.n	8003464 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01b      	beq.n	8003464 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	4798      	blx	r3
 8003434:	e016      	b.n	8003464 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003440:	2b00      	cmp	r3, #0
 8003442:	d107      	bne.n	8003454 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0208 	bic.w	r2, r2, #8
 8003452:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003468:	2220      	movs	r2, #32
 800346a:	409a      	lsls	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4013      	ands	r3, r2
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 808f 	beq.w	8003594 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 8087 	beq.w	8003594 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348a:	2220      	movs	r2, #32
 800348c:	409a      	lsls	r2, r3
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b05      	cmp	r3, #5
 800349c:	d136      	bne.n	800350c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0216 	bic.w	r2, r2, #22
 80034ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695a      	ldr	r2, [r3, #20]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d103      	bne.n	80034ce <HAL_DMA_IRQHandler+0x1da>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d007      	beq.n	80034de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0208 	bic.w	r2, r2, #8
 80034dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e2:	223f      	movs	r2, #63	; 0x3f
 80034e4:	409a      	lsls	r2, r3
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d07e      	beq.n	8003600 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	4798      	blx	r3
        }
        return;
 800350a:	e079      	b.n	8003600 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d01d      	beq.n	8003556 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10d      	bne.n	8003544 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352c:	2b00      	cmp	r3, #0
 800352e:	d031      	beq.n	8003594 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	4798      	blx	r3
 8003538:	e02c      	b.n	8003594 <HAL_DMA_IRQHandler+0x2a0>
 800353a:	bf00      	nop
 800353c:	20000234 	.word	0x20000234
 8003540:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003548:	2b00      	cmp	r3, #0
 800354a:	d023      	beq.n	8003594 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	4798      	blx	r3
 8003554:	e01e      	b.n	8003594 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10f      	bne.n	8003584 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0210 	bic.w	r2, r2, #16
 8003572:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003598:	2b00      	cmp	r3, #0
 800359a:	d032      	beq.n	8003602 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d022      	beq.n	80035ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2205      	movs	r2, #5
 80035ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0201 	bic.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	3301      	adds	r3, #1
 80035c4:	60bb      	str	r3, [r7, #8]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d307      	bcc.n	80035dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f2      	bne.n	80035c0 <HAL_DMA_IRQHandler+0x2cc>
 80035da:	e000      	b.n	80035de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d005      	beq.n	8003602 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	4798      	blx	r3
 80035fe:	e000      	b.n	8003602 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003600:	bf00      	nop
    }
  }
}
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	3b10      	subs	r3, #16
 8003618:	4a14      	ldr	r2, [pc, #80]	; (800366c <DMA_CalcBaseAndBitshift+0x64>)
 800361a:	fba2 2303 	umull	r2, r3, r2, r3
 800361e:	091b      	lsrs	r3, r3, #4
 8003620:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003622:	4a13      	ldr	r2, [pc, #76]	; (8003670 <DMA_CalcBaseAndBitshift+0x68>)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4413      	add	r3, r2
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b03      	cmp	r3, #3
 8003634:	d909      	bls.n	800364a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800363e:	f023 0303 	bic.w	r3, r3, #3
 8003642:	1d1a      	adds	r2, r3, #4
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	659a      	str	r2, [r3, #88]	; 0x58
 8003648:	e007      	b.n	800365a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003652:	f023 0303 	bic.w	r3, r3, #3
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800365e:	4618      	mov	r0, r3
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	aaaaaaab 	.word	0xaaaaaaab
 8003670:	08016ffc 	.word	0x08016ffc

08003674 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003684:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d11f      	bne.n	80036ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2b03      	cmp	r3, #3
 8003692:	d856      	bhi.n	8003742 <DMA_CheckFifoParam+0xce>
 8003694:	a201      	add	r2, pc, #4	; (adr r2, 800369c <DMA_CheckFifoParam+0x28>)
 8003696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369a:	bf00      	nop
 800369c:	080036ad 	.word	0x080036ad
 80036a0:	080036bf 	.word	0x080036bf
 80036a4:	080036ad 	.word	0x080036ad
 80036a8:	08003743 	.word	0x08003743
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d046      	beq.n	8003746 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036bc:	e043      	b.n	8003746 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036c6:	d140      	bne.n	800374a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036cc:	e03d      	b.n	800374a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d6:	d121      	bne.n	800371c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b03      	cmp	r3, #3
 80036dc:	d837      	bhi.n	800374e <DMA_CheckFifoParam+0xda>
 80036de:	a201      	add	r2, pc, #4	; (adr r2, 80036e4 <DMA_CheckFifoParam+0x70>)
 80036e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e4:	080036f5 	.word	0x080036f5
 80036e8:	080036fb 	.word	0x080036fb
 80036ec:	080036f5 	.word	0x080036f5
 80036f0:	0800370d 	.word	0x0800370d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
      break;
 80036f8:	e030      	b.n	800375c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d025      	beq.n	8003752 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800370a:	e022      	b.n	8003752 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003714:	d11f      	bne.n	8003756 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800371a:	e01c      	b.n	8003756 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d903      	bls.n	800372a <DMA_CheckFifoParam+0xb6>
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b03      	cmp	r3, #3
 8003726:	d003      	beq.n	8003730 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003728:	e018      	b.n	800375c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
      break;
 800372e:	e015      	b.n	800375c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00e      	beq.n	800375a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
      break;
 8003740:	e00b      	b.n	800375a <DMA_CheckFifoParam+0xe6>
      break;
 8003742:	bf00      	nop
 8003744:	e00a      	b.n	800375c <DMA_CheckFifoParam+0xe8>
      break;
 8003746:	bf00      	nop
 8003748:	e008      	b.n	800375c <DMA_CheckFifoParam+0xe8>
      break;
 800374a:	bf00      	nop
 800374c:	e006      	b.n	800375c <DMA_CheckFifoParam+0xe8>
      break;
 800374e:	bf00      	nop
 8003750:	e004      	b.n	800375c <DMA_CheckFifoParam+0xe8>
      break;
 8003752:	bf00      	nop
 8003754:	e002      	b.n	800375c <DMA_CheckFifoParam+0xe8>
      break;   
 8003756:	bf00      	nop
 8003758:	e000      	b.n	800375c <DMA_CheckFifoParam+0xe8>
      break;
 800375a:	bf00      	nop
    }
  } 
  
  return status; 
 800375c:	7bfb      	ldrb	r3, [r7, #15]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop

0800376c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800377e:	4b23      	ldr	r3, [pc, #140]	; (800380c <HAL_FLASH_Program+0xa0>)
 8003780:	7e1b      	ldrb	r3, [r3, #24]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_FLASH_Program+0x1e>
 8003786:	2302      	movs	r3, #2
 8003788:	e03b      	b.n	8003802 <HAL_FLASH_Program+0x96>
 800378a:	4b20      	ldr	r3, [pc, #128]	; (800380c <HAL_FLASH_Program+0xa0>)
 800378c:	2201      	movs	r2, #1
 800378e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003790:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003794:	f000 f870 	bl	8003878 <FLASH_WaitForLastOperation>
 8003798:	4603      	mov	r3, r0
 800379a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800379c:	7dfb      	ldrb	r3, [r7, #23]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d12b      	bne.n	80037fa <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d105      	bne.n	80037b4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80037a8:	783b      	ldrb	r3, [r7, #0]
 80037aa:	4619      	mov	r1, r3
 80037ac:	68b8      	ldr	r0, [r7, #8]
 80037ae:	f000 f91b 	bl	80039e8 <FLASH_Program_Byte>
 80037b2:	e016      	b.n	80037e2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d105      	bne.n	80037c6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80037ba:	883b      	ldrh	r3, [r7, #0]
 80037bc:	4619      	mov	r1, r3
 80037be:	68b8      	ldr	r0, [r7, #8]
 80037c0:	f000 f8ee 	bl	80039a0 <FLASH_Program_HalfWord>
 80037c4:	e00d      	b.n	80037e2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d105      	bne.n	80037d8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	4619      	mov	r1, r3
 80037d0:	68b8      	ldr	r0, [r7, #8]
 80037d2:	f000 f8c3 	bl	800395c <FLASH_Program_Word>
 80037d6:	e004      	b.n	80037e2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80037d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037dc:	68b8      	ldr	r0, [r7, #8]
 80037de:	f000 f88b 	bl	80038f8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037e6:	f000 f847 	bl	8003878 <FLASH_WaitForLastOperation>
 80037ea:	4603      	mov	r3, r0
 80037ec:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80037ee:	4b08      	ldr	r3, [pc, #32]	; (8003810 <HAL_FLASH_Program+0xa4>)
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	4a07      	ldr	r2, [pc, #28]	; (8003810 <HAL_FLASH_Program+0xa4>)
 80037f4:	f023 0301 	bic.w	r3, r3, #1
 80037f8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80037fa:	4b04      	ldr	r3, [pc, #16]	; (800380c <HAL_FLASH_Program+0xa0>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003800:	7dfb      	ldrb	r3, [r7, #23]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20001db4 	.word	0x20001db4
 8003810:	40023c00 	.word	0x40023c00

08003814 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800381e:	4b0b      	ldr	r3, [pc, #44]	; (800384c <HAL_FLASH_Unlock+0x38>)
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	da0b      	bge.n	800383e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003826:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_FLASH_Unlock+0x38>)
 8003828:	4a09      	ldr	r2, [pc, #36]	; (8003850 <HAL_FLASH_Unlock+0x3c>)
 800382a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800382c:	4b07      	ldr	r3, [pc, #28]	; (800384c <HAL_FLASH_Unlock+0x38>)
 800382e:	4a09      	ldr	r2, [pc, #36]	; (8003854 <HAL_FLASH_Unlock+0x40>)
 8003830:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_FLASH_Unlock+0x38>)
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	da01      	bge.n	800383e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800383e:	79fb      	ldrb	r3, [r7, #7]
}
 8003840:	4618      	mov	r0, r3
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	40023c00 	.word	0x40023c00
 8003850:	45670123 	.word	0x45670123
 8003854:	cdef89ab 	.word	0xcdef89ab

08003858 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800385c:	4b05      	ldr	r3, [pc, #20]	; (8003874 <HAL_FLASH_Lock+0x1c>)
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	4a04      	ldr	r2, [pc, #16]	; (8003874 <HAL_FLASH_Lock+0x1c>)
 8003862:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003866:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40023c00 	.word	0x40023c00

08003878 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003884:	4b1a      	ldr	r3, [pc, #104]	; (80038f0 <FLASH_WaitForLastOperation+0x78>)
 8003886:	2200      	movs	r2, #0
 8003888:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800388a:	f7ff fae1 	bl	8002e50 <HAL_GetTick>
 800388e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003890:	e010      	b.n	80038b4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003898:	d00c      	beq.n	80038b4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d007      	beq.n	80038b0 <FLASH_WaitForLastOperation+0x38>
 80038a0:	f7ff fad6 	bl	8002e50 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d201      	bcs.n	80038b4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e019      	b.n	80038e8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80038b4:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <FLASH_WaitForLastOperation+0x7c>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1e8      	bne.n	8003892 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80038c0:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <FLASH_WaitForLastOperation+0x7c>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80038cc:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <FLASH_WaitForLastOperation+0x7c>)
 80038ce:	2201      	movs	r2, #1
 80038d0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80038d2:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <FLASH_WaitForLastOperation+0x7c>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80038de:	f000 f8a5 	bl	8003a2c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
  
}  
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	20001db4 	.word	0x20001db4
 80038f4:	40023c00 	.word	0x40023c00

080038f8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003904:	4b14      	ldr	r3, [pc, #80]	; (8003958 <FLASH_Program_DoubleWord+0x60>)
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	4a13      	ldr	r2, [pc, #76]	; (8003958 <FLASH_Program_DoubleWord+0x60>)
 800390a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800390e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003910:	4b11      	ldr	r3, [pc, #68]	; (8003958 <FLASH_Program_DoubleWord+0x60>)
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	4a10      	ldr	r2, [pc, #64]	; (8003958 <FLASH_Program_DoubleWord+0x60>)
 8003916:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800391a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800391c:	4b0e      	ldr	r3, [pc, #56]	; (8003958 <FLASH_Program_DoubleWord+0x60>)
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	4a0d      	ldr	r2, [pc, #52]	; (8003958 <FLASH_Program_DoubleWord+0x60>)
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800392e:	f3bf 8f6f 	isb	sy
}
 8003932:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003934:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	000a      	movs	r2, r1
 8003942:	2300      	movs	r3, #0
 8003944:	68f9      	ldr	r1, [r7, #12]
 8003946:	3104      	adds	r1, #4
 8003948:	4613      	mov	r3, r2
 800394a:	600b      	str	r3, [r1, #0]
}
 800394c:	bf00      	nop
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	40023c00 	.word	0x40023c00

0800395c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003966:	4b0d      	ldr	r3, [pc, #52]	; (800399c <FLASH_Program_Word+0x40>)
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	4a0c      	ldr	r2, [pc, #48]	; (800399c <FLASH_Program_Word+0x40>)
 800396c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003970:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003972:	4b0a      	ldr	r3, [pc, #40]	; (800399c <FLASH_Program_Word+0x40>)
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	4a09      	ldr	r2, [pc, #36]	; (800399c <FLASH_Program_Word+0x40>)
 8003978:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800397c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800397e:	4b07      	ldr	r3, [pc, #28]	; (800399c <FLASH_Program_Word+0x40>)
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	4a06      	ldr	r2, [pc, #24]	; (800399c <FLASH_Program_Word+0x40>)
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	601a      	str	r2, [r3, #0]
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	40023c00 	.word	0x40023c00

080039a0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80039ac:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <FLASH_Program_HalfWord+0x44>)
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	4a0c      	ldr	r2, [pc, #48]	; (80039e4 <FLASH_Program_HalfWord+0x44>)
 80039b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80039b8:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <FLASH_Program_HalfWord+0x44>)
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	4a09      	ldr	r2, [pc, #36]	; (80039e4 <FLASH_Program_HalfWord+0x44>)
 80039be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80039c4:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <FLASH_Program_HalfWord+0x44>)
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	4a06      	ldr	r2, [pc, #24]	; (80039e4 <FLASH_Program_HalfWord+0x44>)
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	887a      	ldrh	r2, [r7, #2]
 80039d4:	801a      	strh	r2, [r3, #0]
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40023c00 	.word	0x40023c00

080039e8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80039f4:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <FLASH_Program_Byte+0x40>)
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	4a0b      	ldr	r2, [pc, #44]	; (8003a28 <FLASH_Program_Byte+0x40>)
 80039fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003a00:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <FLASH_Program_Byte+0x40>)
 8003a02:	4a09      	ldr	r2, [pc, #36]	; (8003a28 <FLASH_Program_Byte+0x40>)
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003a08:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <FLASH_Program_Byte+0x40>)
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	4a06      	ldr	r2, [pc, #24]	; (8003a28 <FLASH_Program_Byte+0x40>)
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	78fa      	ldrb	r2, [r7, #3]
 8003a18:	701a      	strb	r2, [r3, #0]
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40023c00 	.word	0x40023c00

08003a2c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003a30:	4b27      	ldr	r3, [pc, #156]	; (8003ad0 <FLASH_SetErrorCode+0xa4>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003a3c:	4b25      	ldr	r3, [pc, #148]	; (8003ad4 <FLASH_SetErrorCode+0xa8>)
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	f043 0310 	orr.w	r3, r3, #16
 8003a44:	4a23      	ldr	r2, [pc, #140]	; (8003ad4 <FLASH_SetErrorCode+0xa8>)
 8003a46:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003a48:	4b21      	ldr	r3, [pc, #132]	; (8003ad0 <FLASH_SetErrorCode+0xa4>)
 8003a4a:	2210      	movs	r2, #16
 8003a4c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003a4e:	4b20      	ldr	r3, [pc, #128]	; (8003ad0 <FLASH_SetErrorCode+0xa4>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0320 	and.w	r3, r3, #32
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d008      	beq.n	8003a6c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003a5a:	4b1e      	ldr	r3, [pc, #120]	; (8003ad4 <FLASH_SetErrorCode+0xa8>)
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	f043 0308 	orr.w	r3, r3, #8
 8003a62:	4a1c      	ldr	r2, [pc, #112]	; (8003ad4 <FLASH_SetErrorCode+0xa8>)
 8003a64:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003a66:	4b1a      	ldr	r3, [pc, #104]	; (8003ad0 <FLASH_SetErrorCode+0xa4>)
 8003a68:	2220      	movs	r2, #32
 8003a6a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003a6c:	4b18      	ldr	r3, [pc, #96]	; (8003ad0 <FLASH_SetErrorCode+0xa4>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003a78:	4b16      	ldr	r3, [pc, #88]	; (8003ad4 <FLASH_SetErrorCode+0xa8>)
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	f043 0304 	orr.w	r3, r3, #4
 8003a80:	4a14      	ldr	r2, [pc, #80]	; (8003ad4 <FLASH_SetErrorCode+0xa8>)
 8003a82:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003a84:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <FLASH_SetErrorCode+0xa4>)
 8003a86:	2240      	movs	r2, #64	; 0x40
 8003a88:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003a8a:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <FLASH_SetErrorCode+0xa4>)
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d008      	beq.n	8003aa8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003a96:	4b0f      	ldr	r3, [pc, #60]	; (8003ad4 <FLASH_SetErrorCode+0xa8>)
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f043 0302 	orr.w	r3, r3, #2
 8003a9e:	4a0d      	ldr	r2, [pc, #52]	; (8003ad4 <FLASH_SetErrorCode+0xa8>)
 8003aa0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003aa2:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <FLASH_SetErrorCode+0xa4>)
 8003aa4:	2280      	movs	r2, #128	; 0x80
 8003aa6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003aa8:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <FLASH_SetErrorCode+0xa4>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003ab4:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <FLASH_SetErrorCode+0xa8>)
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	f043 0320 	orr.w	r3, r3, #32
 8003abc:	4a05      	ldr	r2, [pc, #20]	; (8003ad4 <FLASH_SetErrorCode+0xa8>)
 8003abe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003ac0:	4b03      	ldr	r3, [pc, #12]	; (8003ad0 <FLASH_SetErrorCode+0xa4>)
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	60da      	str	r2, [r3, #12]
  }
}
 8003ac6:	bf00      	nop
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	40023c00 	.word	0x40023c00
 8003ad4:	20001db4 	.word	0x20001db4

08003ad8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003aea:	4b31      	ldr	r3, [pc, #196]	; (8003bb0 <HAL_FLASHEx_Erase+0xd8>)
 8003aec:	7e1b      	ldrb	r3, [r3, #24]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d101      	bne.n	8003af6 <HAL_FLASHEx_Erase+0x1e>
 8003af2:	2302      	movs	r3, #2
 8003af4:	e058      	b.n	8003ba8 <HAL_FLASHEx_Erase+0xd0>
 8003af6:	4b2e      	ldr	r3, [pc, #184]	; (8003bb0 <HAL_FLASHEx_Erase+0xd8>)
 8003af8:	2201      	movs	r2, #1
 8003afa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003afc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b00:	f7ff feba 	bl	8003878 <FLASH_WaitForLastOperation>
 8003b04:	4603      	mov	r3, r0
 8003b06:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d148      	bne.n	8003ba0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	f04f 32ff 	mov.w	r2, #4294967295
 8003b14:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d115      	bne.n	8003b4a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	f000 f844 	bl	8003bb8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b34:	f7ff fea0 	bl	8003878 <FLASH_WaitForLastOperation>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003b3c:	4b1d      	ldr	r3, [pc, #116]	; (8003bb4 <HAL_FLASHEx_Erase+0xdc>)
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	4a1c      	ldr	r2, [pc, #112]	; (8003bb4 <HAL_FLASHEx_Erase+0xdc>)
 8003b42:	f023 0304 	bic.w	r3, r3, #4
 8003b46:	6113      	str	r3, [r2, #16]
 8003b48:	e028      	b.n	8003b9c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	60bb      	str	r3, [r7, #8]
 8003b50:	e01c      	b.n	8003b8c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	4619      	mov	r1, r3
 8003b5a:	68b8      	ldr	r0, [r7, #8]
 8003b5c:	f000 f850 	bl	8003c00 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b64:	f7ff fe88 	bl	8003878 <FLASH_WaitForLastOperation>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003b6c:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <HAL_FLASHEx_Erase+0xdc>)
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	4a10      	ldr	r2, [pc, #64]	; (8003bb4 <HAL_FLASHEx_Erase+0xdc>)
 8003b72:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003b76:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	601a      	str	r2, [r3, #0]
          break;
 8003b84:	e00a      	b.n	8003b9c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	4413      	add	r3, r2
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d3da      	bcc.n	8003b52 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003b9c:	f000 f878 	bl	8003c90 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003ba0:	4b03      	ldr	r3, [pc, #12]	; (8003bb0 <HAL_FLASHEx_Erase+0xd8>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	761a      	strb	r2, [r3, #24]

  return status;
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	20001db4 	.word	0x20001db4
 8003bb4:	40023c00 	.word	0x40023c00

08003bb8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	6039      	str	r1, [r7, #0]
 8003bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003bc4:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <FLASH_MassErase+0x44>)
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	4a0c      	ldr	r2, [pc, #48]	; (8003bfc <FLASH_MassErase+0x44>)
 8003bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <FLASH_MassErase+0x44>)
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	4a09      	ldr	r2, [pc, #36]	; (8003bfc <FLASH_MassErase+0x44>)
 8003bd6:	f043 0304 	orr.w	r3, r3, #4
 8003bda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003bdc:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <FLASH_MassErase+0x44>)
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	79fb      	ldrb	r3, [r7, #7]
 8003be2:	021b      	lsls	r3, r3, #8
 8003be4:	4313      	orrs	r3, r2
 8003be6:	4a05      	ldr	r2, [pc, #20]	; (8003bfc <FLASH_MassErase+0x44>)
 8003be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bec:	6113      	str	r3, [r2, #16]
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40023c00 	.word	0x40023c00

08003c00 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003c10:	78fb      	ldrb	r3, [r7, #3]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d102      	bne.n	8003c1c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003c16:	2300      	movs	r3, #0
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	e010      	b.n	8003c3e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003c1c:	78fb      	ldrb	r3, [r7, #3]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d103      	bne.n	8003c2a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	e009      	b.n	8003c3e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003c2a:	78fb      	ldrb	r3, [r7, #3]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d103      	bne.n	8003c38 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003c30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	e002      	b.n	8003c3e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003c38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c3c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c3e:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <FLASH_Erase_Sector+0x8c>)
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	4a12      	ldr	r2, [pc, #72]	; (8003c8c <FLASH_Erase_Sector+0x8c>)
 8003c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c48:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003c4a:	4b10      	ldr	r3, [pc, #64]	; (8003c8c <FLASH_Erase_Sector+0x8c>)
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	490f      	ldr	r1, [pc, #60]	; (8003c8c <FLASH_Erase_Sector+0x8c>)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003c56:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <FLASH_Erase_Sector+0x8c>)
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	4a0c      	ldr	r2, [pc, #48]	; (8003c8c <FLASH_Erase_Sector+0x8c>)
 8003c5c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003c60:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003c62:	4b0a      	ldr	r3, [pc, #40]	; (8003c8c <FLASH_Erase_Sector+0x8c>)
 8003c64:	691a      	ldr	r2, [r3, #16]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	4a07      	ldr	r2, [pc, #28]	; (8003c8c <FLASH_Erase_Sector+0x8c>)
 8003c6e:	f043 0302 	orr.w	r3, r3, #2
 8003c72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003c74:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <FLASH_Erase_Sector+0x8c>)
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	4a04      	ldr	r2, [pc, #16]	; (8003c8c <FLASH_Erase_Sector+0x8c>)
 8003c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c7e:	6113      	str	r3, [r2, #16]
}
 8003c80:	bf00      	nop
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	40023c00 	.word	0x40023c00

08003c90 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003c94:	4b20      	ldr	r3, [pc, #128]	; (8003d18 <FLASH_FlushCaches+0x88>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d017      	beq.n	8003cd0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003ca0:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <FLASH_FlushCaches+0x88>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a1c      	ldr	r2, [pc, #112]	; (8003d18 <FLASH_FlushCaches+0x88>)
 8003ca6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003caa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003cac:	4b1a      	ldr	r3, [pc, #104]	; (8003d18 <FLASH_FlushCaches+0x88>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a19      	ldr	r2, [pc, #100]	; (8003d18 <FLASH_FlushCaches+0x88>)
 8003cb2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	4b17      	ldr	r3, [pc, #92]	; (8003d18 <FLASH_FlushCaches+0x88>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a16      	ldr	r2, [pc, #88]	; (8003d18 <FLASH_FlushCaches+0x88>)
 8003cbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cc2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003cc4:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <FLASH_FlushCaches+0x88>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a13      	ldr	r2, [pc, #76]	; (8003d18 <FLASH_FlushCaches+0x88>)
 8003cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cce:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003cd0:	4b11      	ldr	r3, [pc, #68]	; (8003d18 <FLASH_FlushCaches+0x88>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d017      	beq.n	8003d0c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003cdc:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <FLASH_FlushCaches+0x88>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a0d      	ldr	r2, [pc, #52]	; (8003d18 <FLASH_FlushCaches+0x88>)
 8003ce2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ce6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <FLASH_FlushCaches+0x88>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a0a      	ldr	r2, [pc, #40]	; (8003d18 <FLASH_FlushCaches+0x88>)
 8003cee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <FLASH_FlushCaches+0x88>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a07      	ldr	r2, [pc, #28]	; (8003d18 <FLASH_FlushCaches+0x88>)
 8003cfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cfe:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <FLASH_FlushCaches+0x88>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <FLASH_FlushCaches+0x88>)
 8003d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d0a:	6013      	str	r3, [r2, #0]
  }
}
 8003d0c:	bf00      	nop
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40023c00 	.word	0x40023c00

08003d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b089      	sub	sp, #36	; 0x24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	e16b      	b.n	8004010 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d38:	2201      	movs	r2, #1
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	f040 815a 	bne.w	800400a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d005      	beq.n	8003d6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d130      	bne.n	8003dd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	2203      	movs	r2, #3
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4013      	ands	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003da4:	2201      	movs	r2, #1
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	43db      	mvns	r3, r3
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	4013      	ands	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	091b      	lsrs	r3, r3, #4
 8003dba:	f003 0201 	and.w	r2, r3, #1
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 0303 	and.w	r3, r3, #3
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d017      	beq.n	8003e0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	2203      	movs	r2, #3
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4013      	ands	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 0303 	and.w	r3, r3, #3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d123      	bne.n	8003e60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	08da      	lsrs	r2, r3, #3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3208      	adds	r2, #8
 8003e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	220f      	movs	r2, #15
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	08da      	lsrs	r2, r3, #3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3208      	adds	r2, #8
 8003e5a:	69b9      	ldr	r1, [r7, #24]
 8003e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4013      	ands	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 0203 	and.w	r2, r3, #3
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 80b4 	beq.w	800400a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	4b60      	ldr	r3, [pc, #384]	; (8004028 <HAL_GPIO_Init+0x30c>)
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	4a5f      	ldr	r2, [pc, #380]	; (8004028 <HAL_GPIO_Init+0x30c>)
 8003eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003eb2:	4b5d      	ldr	r3, [pc, #372]	; (8004028 <HAL_GPIO_Init+0x30c>)
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ebe:	4a5b      	ldr	r2, [pc, #364]	; (800402c <HAL_GPIO_Init+0x310>)
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	089b      	lsrs	r3, r3, #2
 8003ec4:	3302      	adds	r3, #2
 8003ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	220f      	movs	r2, #15
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43db      	mvns	r3, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a52      	ldr	r2, [pc, #328]	; (8004030 <HAL_GPIO_Init+0x314>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d02b      	beq.n	8003f42 <HAL_GPIO_Init+0x226>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a51      	ldr	r2, [pc, #324]	; (8004034 <HAL_GPIO_Init+0x318>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d025      	beq.n	8003f3e <HAL_GPIO_Init+0x222>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a50      	ldr	r2, [pc, #320]	; (8004038 <HAL_GPIO_Init+0x31c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d01f      	beq.n	8003f3a <HAL_GPIO_Init+0x21e>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a4f      	ldr	r2, [pc, #316]	; (800403c <HAL_GPIO_Init+0x320>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d019      	beq.n	8003f36 <HAL_GPIO_Init+0x21a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a4e      	ldr	r2, [pc, #312]	; (8004040 <HAL_GPIO_Init+0x324>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d013      	beq.n	8003f32 <HAL_GPIO_Init+0x216>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a4d      	ldr	r2, [pc, #308]	; (8004044 <HAL_GPIO_Init+0x328>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00d      	beq.n	8003f2e <HAL_GPIO_Init+0x212>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a4c      	ldr	r2, [pc, #304]	; (8004048 <HAL_GPIO_Init+0x32c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d007      	beq.n	8003f2a <HAL_GPIO_Init+0x20e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a4b      	ldr	r2, [pc, #300]	; (800404c <HAL_GPIO_Init+0x330>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d101      	bne.n	8003f26 <HAL_GPIO_Init+0x20a>
 8003f22:	2307      	movs	r3, #7
 8003f24:	e00e      	b.n	8003f44 <HAL_GPIO_Init+0x228>
 8003f26:	2308      	movs	r3, #8
 8003f28:	e00c      	b.n	8003f44 <HAL_GPIO_Init+0x228>
 8003f2a:	2306      	movs	r3, #6
 8003f2c:	e00a      	b.n	8003f44 <HAL_GPIO_Init+0x228>
 8003f2e:	2305      	movs	r3, #5
 8003f30:	e008      	b.n	8003f44 <HAL_GPIO_Init+0x228>
 8003f32:	2304      	movs	r3, #4
 8003f34:	e006      	b.n	8003f44 <HAL_GPIO_Init+0x228>
 8003f36:	2303      	movs	r3, #3
 8003f38:	e004      	b.n	8003f44 <HAL_GPIO_Init+0x228>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e002      	b.n	8003f44 <HAL_GPIO_Init+0x228>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <HAL_GPIO_Init+0x228>
 8003f42:	2300      	movs	r3, #0
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	f002 0203 	and.w	r2, r2, #3
 8003f4a:	0092      	lsls	r2, r2, #2
 8003f4c:	4093      	lsls	r3, r2
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f54:	4935      	ldr	r1, [pc, #212]	; (800402c <HAL_GPIO_Init+0x310>)
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	089b      	lsrs	r3, r3, #2
 8003f5a:	3302      	adds	r3, #2
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f62:	4b3b      	ldr	r3, [pc, #236]	; (8004050 <HAL_GPIO_Init+0x334>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f86:	4a32      	ldr	r2, [pc, #200]	; (8004050 <HAL_GPIO_Init+0x334>)
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f8c:	4b30      	ldr	r3, [pc, #192]	; (8004050 <HAL_GPIO_Init+0x334>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	43db      	mvns	r3, r3
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fb0:	4a27      	ldr	r2, [pc, #156]	; (8004050 <HAL_GPIO_Init+0x334>)
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fb6:	4b26      	ldr	r3, [pc, #152]	; (8004050 <HAL_GPIO_Init+0x334>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fda:	4a1d      	ldr	r2, [pc, #116]	; (8004050 <HAL_GPIO_Init+0x334>)
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fe0:	4b1b      	ldr	r3, [pc, #108]	; (8004050 <HAL_GPIO_Init+0x334>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004004:	4a12      	ldr	r2, [pc, #72]	; (8004050 <HAL_GPIO_Init+0x334>)
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	3301      	adds	r3, #1
 800400e:	61fb      	str	r3, [r7, #28]
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	2b0f      	cmp	r3, #15
 8004014:	f67f ae90 	bls.w	8003d38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004018:	bf00      	nop
 800401a:	bf00      	nop
 800401c:	3724      	adds	r7, #36	; 0x24
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	40023800 	.word	0x40023800
 800402c:	40013800 	.word	0x40013800
 8004030:	40020000 	.word	0x40020000
 8004034:	40020400 	.word	0x40020400
 8004038:	40020800 	.word	0x40020800
 800403c:	40020c00 	.word	0x40020c00
 8004040:	40021000 	.word	0x40021000
 8004044:	40021400 	.word	0x40021400
 8004048:	40021800 	.word	0x40021800
 800404c:	40021c00 	.word	0x40021c00
 8004050:	40013c00 	.word	0x40013c00

08004054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	807b      	strh	r3, [r7, #2]
 8004060:	4613      	mov	r3, r2
 8004062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004064:	787b      	ldrb	r3, [r7, #1]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800406a:	887a      	ldrh	r2, [r7, #2]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004070:	e003      	b.n	800407a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004072:	887b      	ldrh	r3, [r7, #2]
 8004074:	041a      	lsls	r2, r3, #16
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	619a      	str	r2, [r3, #24]
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004086:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004088:	b08f      	sub	sp, #60	; 0x3c
 800408a:	af0a      	add	r7, sp, #40	; 0x28
 800408c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e054      	b.n	8004142 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d106      	bne.n	80040b8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f00f fdf8 	bl	8013ca8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2203      	movs	r2, #3
 80040bc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d102      	bne.n	80040d2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f004 fe04 	bl	8008ce4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	603b      	str	r3, [r7, #0]
 80040e2:	687e      	ldr	r6, [r7, #4]
 80040e4:	466d      	mov	r5, sp
 80040e6:	f106 0410 	add.w	r4, r6, #16
 80040ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80040fa:	1d33      	adds	r3, r6, #4
 80040fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040fe:	6838      	ldr	r0, [r7, #0]
 8004100:	f004 fd7e 	bl	8008c00 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2101      	movs	r1, #1
 800410a:	4618      	mov	r0, r3
 800410c:	f004 fdfb 	bl	8008d06 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	603b      	str	r3, [r7, #0]
 8004116:	687e      	ldr	r6, [r7, #4]
 8004118:	466d      	mov	r5, sp
 800411a:	f106 0410 	add.w	r4, r6, #16
 800411e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004120:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004124:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004126:	e894 0003 	ldmia.w	r4, {r0, r1}
 800412a:	e885 0003 	stmia.w	r5, {r0, r1}
 800412e:	1d33      	adds	r3, r6, #4
 8004130:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004132:	6838      	ldr	r0, [r7, #0]
 8004134:	f004 ff84 	bl	8009040 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800414a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800414a:	b590      	push	{r4, r7, lr}
 800414c:	b089      	sub	sp, #36	; 0x24
 800414e:	af04      	add	r7, sp, #16
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	4608      	mov	r0, r1
 8004154:	4611      	mov	r1, r2
 8004156:	461a      	mov	r2, r3
 8004158:	4603      	mov	r3, r0
 800415a:	70fb      	strb	r3, [r7, #3]
 800415c:	460b      	mov	r3, r1
 800415e:	70bb      	strb	r3, [r7, #2]
 8004160:	4613      	mov	r3, r2
 8004162:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <HAL_HCD_HC_Init+0x28>
 800416e:	2302      	movs	r3, #2
 8004170:	e076      	b.n	8004260 <HAL_HCD_HC_Init+0x116>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800417a:	78fb      	ldrb	r3, [r7, #3]
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	212c      	movs	r1, #44	; 0x2c
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	4413      	add	r3, r2
 8004186:	333d      	adds	r3, #61	; 0x3d
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	212c      	movs	r1, #44	; 0x2c
 8004192:	fb01 f303 	mul.w	r3, r1, r3
 8004196:	4413      	add	r3, r2
 8004198:	3338      	adds	r3, #56	; 0x38
 800419a:	787a      	ldrb	r2, [r7, #1]
 800419c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	212c      	movs	r1, #44	; 0x2c
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	3340      	adds	r3, #64	; 0x40
 80041ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80041ae:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80041b0:	78fb      	ldrb	r3, [r7, #3]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	212c      	movs	r1, #44	; 0x2c
 80041b6:	fb01 f303 	mul.w	r3, r1, r3
 80041ba:	4413      	add	r3, r2
 80041bc:	3339      	adds	r3, #57	; 0x39
 80041be:	78fa      	ldrb	r2, [r7, #3]
 80041c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80041c2:	78fb      	ldrb	r3, [r7, #3]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	212c      	movs	r1, #44	; 0x2c
 80041c8:	fb01 f303 	mul.w	r3, r1, r3
 80041cc:	4413      	add	r3, r2
 80041ce:	333f      	adds	r3, #63	; 0x3f
 80041d0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80041d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	78ba      	ldrb	r2, [r7, #2]
 80041da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041de:	b2d0      	uxtb	r0, r2
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	212c      	movs	r1, #44	; 0x2c
 80041e4:	fb01 f303 	mul.w	r3, r1, r3
 80041e8:	4413      	add	r3, r2
 80041ea:	333a      	adds	r3, #58	; 0x3a
 80041ec:	4602      	mov	r2, r0
 80041ee:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80041f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	da09      	bge.n	800420c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	212c      	movs	r1, #44	; 0x2c
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	4413      	add	r3, r2
 8004204:	333b      	adds	r3, #59	; 0x3b
 8004206:	2201      	movs	r2, #1
 8004208:	701a      	strb	r2, [r3, #0]
 800420a:	e008      	b.n	800421e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	212c      	movs	r1, #44	; 0x2c
 8004212:	fb01 f303 	mul.w	r3, r1, r3
 8004216:	4413      	add	r3, r2
 8004218:	333b      	adds	r3, #59	; 0x3b
 800421a:	2200      	movs	r2, #0
 800421c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	212c      	movs	r1, #44	; 0x2c
 8004224:	fb01 f303 	mul.w	r3, r1, r3
 8004228:	4413      	add	r3, r2
 800422a:	333c      	adds	r3, #60	; 0x3c
 800422c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004230:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6818      	ldr	r0, [r3, #0]
 8004236:	787c      	ldrb	r4, [r7, #1]
 8004238:	78ba      	ldrb	r2, [r7, #2]
 800423a:	78f9      	ldrb	r1, [r7, #3]
 800423c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800423e:	9302      	str	r3, [sp, #8]
 8004240:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004244:	9301      	str	r3, [sp, #4]
 8004246:	f897 3020 	ldrb.w	r3, [r7, #32]
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	4623      	mov	r3, r4
 800424e:	f005 f87d 	bl	800934c <USB_HC_Init>
 8004252:	4603      	mov	r3, r0
 8004254:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800425e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	bd90      	pop	{r4, r7, pc}

08004268 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800427e:	2b01      	cmp	r3, #1
 8004280:	d101      	bne.n	8004286 <HAL_HCD_HC_Halt+0x1e>
 8004282:	2302      	movs	r3, #2
 8004284:	e00f      	b.n	80042a6 <HAL_HCD_HC_Halt+0x3e>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	78fa      	ldrb	r2, [r7, #3]
 8004294:	4611      	mov	r1, r2
 8004296:	4618      	mov	r0, r3
 8004298:	f005 facd 	bl	8009836 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	4608      	mov	r0, r1
 80042ba:	4611      	mov	r1, r2
 80042bc:	461a      	mov	r2, r3
 80042be:	4603      	mov	r3, r0
 80042c0:	70fb      	strb	r3, [r7, #3]
 80042c2:	460b      	mov	r3, r1
 80042c4:	70bb      	strb	r3, [r7, #2]
 80042c6:	4613      	mov	r3, r2
 80042c8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	212c      	movs	r1, #44	; 0x2c
 80042d0:	fb01 f303 	mul.w	r3, r1, r3
 80042d4:	4413      	add	r3, r2
 80042d6:	333b      	adds	r3, #59	; 0x3b
 80042d8:	78ba      	ldrb	r2, [r7, #2]
 80042da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	212c      	movs	r1, #44	; 0x2c
 80042e2:	fb01 f303 	mul.w	r3, r1, r3
 80042e6:	4413      	add	r3, r2
 80042e8:	333f      	adds	r3, #63	; 0x3f
 80042ea:	787a      	ldrb	r2, [r7, #1]
 80042ec:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80042ee:	7c3b      	ldrb	r3, [r7, #16]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d112      	bne.n	800431a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	212c      	movs	r1, #44	; 0x2c
 80042fa:	fb01 f303 	mul.w	r3, r1, r3
 80042fe:	4413      	add	r3, r2
 8004300:	3342      	adds	r3, #66	; 0x42
 8004302:	2203      	movs	r2, #3
 8004304:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004306:	78fb      	ldrb	r3, [r7, #3]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	212c      	movs	r1, #44	; 0x2c
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	4413      	add	r3, r2
 8004312:	333d      	adds	r3, #61	; 0x3d
 8004314:	7f3a      	ldrb	r2, [r7, #28]
 8004316:	701a      	strb	r2, [r3, #0]
 8004318:	e008      	b.n	800432c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	212c      	movs	r1, #44	; 0x2c
 8004320:	fb01 f303 	mul.w	r3, r1, r3
 8004324:	4413      	add	r3, r2
 8004326:	3342      	adds	r3, #66	; 0x42
 8004328:	2202      	movs	r2, #2
 800432a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800432c:	787b      	ldrb	r3, [r7, #1]
 800432e:	2b03      	cmp	r3, #3
 8004330:	f200 80c6 	bhi.w	80044c0 <HAL_HCD_HC_SubmitRequest+0x210>
 8004334:	a201      	add	r2, pc, #4	; (adr r2, 800433c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433a:	bf00      	nop
 800433c:	0800434d 	.word	0x0800434d
 8004340:	080044ad 	.word	0x080044ad
 8004344:	080043b1 	.word	0x080043b1
 8004348:	0800442f 	.word	0x0800442f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800434c:	7c3b      	ldrb	r3, [r7, #16]
 800434e:	2b01      	cmp	r3, #1
 8004350:	f040 80b8 	bne.w	80044c4 <HAL_HCD_HC_SubmitRequest+0x214>
 8004354:	78bb      	ldrb	r3, [r7, #2]
 8004356:	2b00      	cmp	r3, #0
 8004358:	f040 80b4 	bne.w	80044c4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800435c:	8b3b      	ldrh	r3, [r7, #24]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d108      	bne.n	8004374 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	212c      	movs	r1, #44	; 0x2c
 8004368:	fb01 f303 	mul.w	r3, r1, r3
 800436c:	4413      	add	r3, r2
 800436e:	3355      	adds	r3, #85	; 0x55
 8004370:	2201      	movs	r2, #1
 8004372:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	212c      	movs	r1, #44	; 0x2c
 800437a:	fb01 f303 	mul.w	r3, r1, r3
 800437e:	4413      	add	r3, r2
 8004380:	3355      	adds	r3, #85	; 0x55
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d109      	bne.n	800439c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	212c      	movs	r1, #44	; 0x2c
 800438e:	fb01 f303 	mul.w	r3, r1, r3
 8004392:	4413      	add	r3, r2
 8004394:	3342      	adds	r3, #66	; 0x42
 8004396:	2200      	movs	r2, #0
 8004398:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800439a:	e093      	b.n	80044c4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800439c:	78fb      	ldrb	r3, [r7, #3]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	212c      	movs	r1, #44	; 0x2c
 80043a2:	fb01 f303 	mul.w	r3, r1, r3
 80043a6:	4413      	add	r3, r2
 80043a8:	3342      	adds	r3, #66	; 0x42
 80043aa:	2202      	movs	r2, #2
 80043ac:	701a      	strb	r2, [r3, #0]
      break;
 80043ae:	e089      	b.n	80044c4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80043b0:	78bb      	ldrb	r3, [r7, #2]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d11d      	bne.n	80043f2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80043b6:	78fb      	ldrb	r3, [r7, #3]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	212c      	movs	r1, #44	; 0x2c
 80043bc:	fb01 f303 	mul.w	r3, r1, r3
 80043c0:	4413      	add	r3, r2
 80043c2:	3355      	adds	r3, #85	; 0x55
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d109      	bne.n	80043de <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043ca:	78fb      	ldrb	r3, [r7, #3]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	212c      	movs	r1, #44	; 0x2c
 80043d0:	fb01 f303 	mul.w	r3, r1, r3
 80043d4:	4413      	add	r3, r2
 80043d6:	3342      	adds	r3, #66	; 0x42
 80043d8:	2200      	movs	r2, #0
 80043da:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80043dc:	e073      	b.n	80044c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043de:	78fb      	ldrb	r3, [r7, #3]
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	212c      	movs	r1, #44	; 0x2c
 80043e4:	fb01 f303 	mul.w	r3, r1, r3
 80043e8:	4413      	add	r3, r2
 80043ea:	3342      	adds	r3, #66	; 0x42
 80043ec:	2202      	movs	r2, #2
 80043ee:	701a      	strb	r2, [r3, #0]
      break;
 80043f0:	e069      	b.n	80044c6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	212c      	movs	r1, #44	; 0x2c
 80043f8:	fb01 f303 	mul.w	r3, r1, r3
 80043fc:	4413      	add	r3, r2
 80043fe:	3354      	adds	r3, #84	; 0x54
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d109      	bne.n	800441a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004406:	78fb      	ldrb	r3, [r7, #3]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	212c      	movs	r1, #44	; 0x2c
 800440c:	fb01 f303 	mul.w	r3, r1, r3
 8004410:	4413      	add	r3, r2
 8004412:	3342      	adds	r3, #66	; 0x42
 8004414:	2200      	movs	r2, #0
 8004416:	701a      	strb	r2, [r3, #0]
      break;
 8004418:	e055      	b.n	80044c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800441a:	78fb      	ldrb	r3, [r7, #3]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	212c      	movs	r1, #44	; 0x2c
 8004420:	fb01 f303 	mul.w	r3, r1, r3
 8004424:	4413      	add	r3, r2
 8004426:	3342      	adds	r3, #66	; 0x42
 8004428:	2202      	movs	r2, #2
 800442a:	701a      	strb	r2, [r3, #0]
      break;
 800442c:	e04b      	b.n	80044c6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800442e:	78bb      	ldrb	r3, [r7, #2]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d11d      	bne.n	8004470 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	212c      	movs	r1, #44	; 0x2c
 800443a:	fb01 f303 	mul.w	r3, r1, r3
 800443e:	4413      	add	r3, r2
 8004440:	3355      	adds	r3, #85	; 0x55
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d109      	bne.n	800445c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	212c      	movs	r1, #44	; 0x2c
 800444e:	fb01 f303 	mul.w	r3, r1, r3
 8004452:	4413      	add	r3, r2
 8004454:	3342      	adds	r3, #66	; 0x42
 8004456:	2200      	movs	r2, #0
 8004458:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800445a:	e034      	b.n	80044c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	212c      	movs	r1, #44	; 0x2c
 8004462:	fb01 f303 	mul.w	r3, r1, r3
 8004466:	4413      	add	r3, r2
 8004468:	3342      	adds	r3, #66	; 0x42
 800446a:	2202      	movs	r2, #2
 800446c:	701a      	strb	r2, [r3, #0]
      break;
 800446e:	e02a      	b.n	80044c6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004470:	78fb      	ldrb	r3, [r7, #3]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	212c      	movs	r1, #44	; 0x2c
 8004476:	fb01 f303 	mul.w	r3, r1, r3
 800447a:	4413      	add	r3, r2
 800447c:	3354      	adds	r3, #84	; 0x54
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d109      	bne.n	8004498 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004484:	78fb      	ldrb	r3, [r7, #3]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	212c      	movs	r1, #44	; 0x2c
 800448a:	fb01 f303 	mul.w	r3, r1, r3
 800448e:	4413      	add	r3, r2
 8004490:	3342      	adds	r3, #66	; 0x42
 8004492:	2200      	movs	r2, #0
 8004494:	701a      	strb	r2, [r3, #0]
      break;
 8004496:	e016      	b.n	80044c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	212c      	movs	r1, #44	; 0x2c
 800449e:	fb01 f303 	mul.w	r3, r1, r3
 80044a2:	4413      	add	r3, r2
 80044a4:	3342      	adds	r3, #66	; 0x42
 80044a6:	2202      	movs	r2, #2
 80044a8:	701a      	strb	r2, [r3, #0]
      break;
 80044aa:	e00c      	b.n	80044c6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	212c      	movs	r1, #44	; 0x2c
 80044b2:	fb01 f303 	mul.w	r3, r1, r3
 80044b6:	4413      	add	r3, r2
 80044b8:	3342      	adds	r3, #66	; 0x42
 80044ba:	2200      	movs	r2, #0
 80044bc:	701a      	strb	r2, [r3, #0]
      break;
 80044be:	e002      	b.n	80044c6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80044c0:	bf00      	nop
 80044c2:	e000      	b.n	80044c6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80044c4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80044c6:	78fb      	ldrb	r3, [r7, #3]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	212c      	movs	r1, #44	; 0x2c
 80044cc:	fb01 f303 	mul.w	r3, r1, r3
 80044d0:	4413      	add	r3, r2
 80044d2:	3344      	adds	r3, #68	; 0x44
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80044d8:	78fb      	ldrb	r3, [r7, #3]
 80044da:	8b3a      	ldrh	r2, [r7, #24]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	202c      	movs	r0, #44	; 0x2c
 80044e0:	fb00 f303 	mul.w	r3, r0, r3
 80044e4:	440b      	add	r3, r1
 80044e6:	334c      	adds	r3, #76	; 0x4c
 80044e8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80044ea:	78fb      	ldrb	r3, [r7, #3]
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	212c      	movs	r1, #44	; 0x2c
 80044f0:	fb01 f303 	mul.w	r3, r1, r3
 80044f4:	4413      	add	r3, r2
 80044f6:	3360      	adds	r3, #96	; 0x60
 80044f8:	2200      	movs	r2, #0
 80044fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	212c      	movs	r1, #44	; 0x2c
 8004502:	fb01 f303 	mul.w	r3, r1, r3
 8004506:	4413      	add	r3, r2
 8004508:	3350      	adds	r3, #80	; 0x50
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800450e:	78fb      	ldrb	r3, [r7, #3]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	212c      	movs	r1, #44	; 0x2c
 8004514:	fb01 f303 	mul.w	r3, r1, r3
 8004518:	4413      	add	r3, r2
 800451a:	3339      	adds	r3, #57	; 0x39
 800451c:	78fa      	ldrb	r2, [r7, #3]
 800451e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	212c      	movs	r1, #44	; 0x2c
 8004526:	fb01 f303 	mul.w	r3, r1, r3
 800452a:	4413      	add	r3, r2
 800452c:	3361      	adds	r3, #97	; 0x61
 800452e:	2200      	movs	r2, #0
 8004530:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	78fb      	ldrb	r3, [r7, #3]
 8004538:	222c      	movs	r2, #44	; 0x2c
 800453a:	fb02 f303 	mul.w	r3, r2, r3
 800453e:	3338      	adds	r3, #56	; 0x38
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	18d1      	adds	r1, r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	461a      	mov	r2, r3
 800454c:	f005 f820 	bl	8009590 <USB_HC_StartXfer>
 8004550:	4603      	mov	r3, r0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop

0800455c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f004 fd21 	bl	8008fba <USB_GetMode>
 8004578:	4603      	mov	r3, r0
 800457a:	2b01      	cmp	r3, #1
 800457c:	f040 80f6 	bne.w	800476c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4618      	mov	r0, r3
 8004586:	f004 fd05 	bl	8008f94 <USB_ReadInterrupts>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 80ec 	beq.w	800476a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f004 fcfc 	bl	8008f94 <USB_ReadInterrupts>
 800459c:	4603      	mov	r3, r0
 800459e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045a6:	d104      	bne.n	80045b2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80045b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f004 fcec 	bl	8008f94 <USB_ReadInterrupts>
 80045bc:	4603      	mov	r3, r0
 80045be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045c6:	d104      	bne.n	80045d2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f004 fcdc 	bl	8008f94 <USB_ReadInterrupts>
 80045dc:	4603      	mov	r3, r0
 80045de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045e6:	d104      	bne.n	80045f2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80045f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f004 fccc 	bl	8008f94 <USB_ReadInterrupts>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b02      	cmp	r3, #2
 8004604:	d103      	bne.n	800460e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2202      	movs	r2, #2
 800460c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f004 fcbe 	bl	8008f94 <USB_ReadInterrupts>
 8004618:	4603      	mov	r3, r0
 800461a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800461e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004622:	d11c      	bne.n	800465e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800462c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10f      	bne.n	800465e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800463e:	2110      	movs	r1, #16
 8004640:	6938      	ldr	r0, [r7, #16]
 8004642:	f004 fbad 	bl	8008da0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004646:	6938      	ldr	r0, [r7, #16]
 8004648:	f004 fbde 	bl	8008e08 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2101      	movs	r1, #1
 8004652:	4618      	mov	r0, r3
 8004654:	f004 fdb4 	bl	80091c0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f00f fb95 	bl	8013d88 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f004 fc96 	bl	8008f94 <USB_ReadInterrupts>
 8004668:	4603      	mov	r3, r0
 800466a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800466e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004672:	d102      	bne.n	800467a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f001 f89e 	bl	80057b6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f004 fc88 	bl	8008f94 <USB_ReadInterrupts>
 8004684:	4603      	mov	r3, r0
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b08      	cmp	r3, #8
 800468c:	d106      	bne.n	800469c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f00f fb5e 	bl	8013d50 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2208      	movs	r2, #8
 800469a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f004 fc77 	bl	8008f94 <USB_ReadInterrupts>
 80046a6:	4603      	mov	r3, r0
 80046a8:	f003 0310 	and.w	r3, r3, #16
 80046ac:	2b10      	cmp	r3, #16
 80046ae:	d101      	bne.n	80046b4 <HAL_HCD_IRQHandler+0x158>
 80046b0:	2301      	movs	r3, #1
 80046b2:	e000      	b.n	80046b6 <HAL_HCD_IRQHandler+0x15a>
 80046b4:	2300      	movs	r3, #0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d012      	beq.n	80046e0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	699a      	ldr	r2, [r3, #24]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 0210 	bic.w	r2, r2, #16
 80046c8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 ffa1 	bl	8005612 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0210 	orr.w	r2, r2, #16
 80046de:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f004 fc55 	bl	8008f94 <USB_ReadInterrupts>
 80046ea:	4603      	mov	r3, r0
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046f4:	d13a      	bne.n	800476c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f005 f88a 	bl	8009814 <USB_HC_ReadInterrupt>
 8004700:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	e025      	b.n	8004754 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	fa22 f303 	lsr.w	r3, r2, r3
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d018      	beq.n	800474e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800472e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004732:	d106      	bne.n	8004742 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	b2db      	uxtb	r3, r3
 8004738:	4619      	mov	r1, r3
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f8ab 	bl	8004896 <HCD_HC_IN_IRQHandler>
 8004740:	e005      	b.n	800474e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	4619      	mov	r1, r3
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fbf9 	bl	8004f40 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	3301      	adds	r3, #1
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	429a      	cmp	r2, r3
 800475c:	d3d4      	bcc.n	8004708 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004766:	615a      	str	r2, [r3, #20]
 8004768:	e000      	b.n	800476c <HAL_HCD_IRQHandler+0x210>
      return;
 800476a:	bf00      	nop
    }
  }
}
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_HCD_Start+0x16>
 8004784:	2302      	movs	r3, #2
 8004786:	e013      	b.n	80047b0 <HAL_HCD_Start+0x3e>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2101      	movs	r1, #1
 8004796:	4618      	mov	r0, r3
 8004798:	f004 fd76 	bl	8009288 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f004 fa8e 	bl	8008cc2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_HCD_Stop+0x16>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e00d      	b.n	80047ea <HAL_HCD_Stop+0x32>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f005 f964 	bl	8009aa8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b082      	sub	sp, #8
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f004 fd18 	bl	8009234 <USB_ResetPort>
 8004804:	4603      	mov	r3, r0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	460b      	mov	r3, r1
 8004818:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800481a:	78fb      	ldrb	r3, [r7, #3]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	212c      	movs	r1, #44	; 0x2c
 8004820:	fb01 f303 	mul.w	r3, r1, r3
 8004824:	4413      	add	r3, r2
 8004826:	3360      	adds	r3, #96	; 0x60
 8004828:	781b      	ldrb	r3, [r3, #0]
}
 800482a:	4618      	mov	r0, r3
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	460b      	mov	r3, r1
 8004840:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004842:	78fb      	ldrb	r3, [r7, #3]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	212c      	movs	r1, #44	; 0x2c
 8004848:	fb01 f303 	mul.w	r3, r1, r3
 800484c:	4413      	add	r3, r2
 800484e:	3350      	adds	r3, #80	; 0x50
 8004850:	681b      	ldr	r3, [r3, #0]
}
 8004852:	4618      	mov	r0, r3
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b082      	sub	sp, #8
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f004 fd5c 	bl	8009328 <USB_GetCurrentFrame>
 8004870:	4603      	mov	r3, r0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b082      	sub	sp, #8
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f004 fd37 	bl	80092fa <USB_GetHostSpeed>
 800488c:	4603      	mov	r3, r0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b086      	sub	sp, #24
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	460b      	mov	r3, r1
 80048a0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 0304 	and.w	r3, r3, #4
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d11a      	bne.n	80048fc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d2:	461a      	mov	r2, r3
 80048d4:	2304      	movs	r3, #4
 80048d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	212c      	movs	r1, #44	; 0x2c
 80048de:	fb01 f303 	mul.w	r3, r1, r3
 80048e2:	4413      	add	r3, r2
 80048e4:	3361      	adds	r3, #97	; 0x61
 80048e6:	2206      	movs	r2, #6
 80048e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	4611      	mov	r1, r2
 80048f4:	4618      	mov	r0, r3
 80048f6:	f004 ff9e 	bl	8009836 <USB_HC_Halt>
 80048fa:	e0af      	b.n	8004a5c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4413      	add	r3, r2
 8004904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004912:	d11b      	bne.n	800494c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	4413      	add	r3, r2
 800491c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004920:	461a      	mov	r2, r3
 8004922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004926:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	212c      	movs	r1, #44	; 0x2c
 800492e:	fb01 f303 	mul.w	r3, r1, r3
 8004932:	4413      	add	r3, r2
 8004934:	3361      	adds	r3, #97	; 0x61
 8004936:	2207      	movs	r2, #7
 8004938:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	4611      	mov	r1, r2
 8004944:	4618      	mov	r0, r3
 8004946:	f004 ff76 	bl	8009836 <USB_HC_Halt>
 800494a:	e087      	b.n	8004a5c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	4413      	add	r3, r2
 8004954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b20      	cmp	r3, #32
 8004960:	d109      	bne.n	8004976 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	4413      	add	r3, r2
 800496a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800496e:	461a      	mov	r2, r3
 8004970:	2320      	movs	r3, #32
 8004972:	6093      	str	r3, [r2, #8]
 8004974:	e072      	b.n	8004a5c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	4413      	add	r3, r2
 800497e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b08      	cmp	r3, #8
 800498a:	d11a      	bne.n	80049c2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	4413      	add	r3, r2
 8004994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004998:	461a      	mov	r2, r3
 800499a:	2308      	movs	r3, #8
 800499c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	212c      	movs	r1, #44	; 0x2c
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	4413      	add	r3, r2
 80049aa:	3361      	adds	r3, #97	; 0x61
 80049ac:	2205      	movs	r2, #5
 80049ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	4611      	mov	r1, r2
 80049ba:	4618      	mov	r0, r3
 80049bc:	f004 ff3b 	bl	8009836 <USB_HC_Halt>
 80049c0:	e04c      	b.n	8004a5c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d8:	d11b      	bne.n	8004a12 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e6:	461a      	mov	r2, r3
 80049e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	212c      	movs	r1, #44	; 0x2c
 80049f4:	fb01 f303 	mul.w	r3, r1, r3
 80049f8:	4413      	add	r3, r2
 80049fa:	3361      	adds	r3, #97	; 0x61
 80049fc:	2208      	movs	r2, #8
 80049fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	4611      	mov	r1, r2
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f004 ff13 	bl	8009836 <USB_HC_Halt>
 8004a10:	e024      	b.n	8004a5c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a24:	2b80      	cmp	r3, #128	; 0x80
 8004a26:	d119      	bne.n	8004a5c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a34:	461a      	mov	r2, r3
 8004a36:	2380      	movs	r3, #128	; 0x80
 8004a38:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	212c      	movs	r1, #44	; 0x2c
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	4413      	add	r3, r2
 8004a46:	3361      	adds	r3, #97	; 0x61
 8004a48:	2206      	movs	r2, #6
 8004a4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	4611      	mov	r1, r2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f004 feed 	bl	8009836 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a72:	d112      	bne.n	8004a9a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f004 fed9 	bl	8009836 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a90:	461a      	mov	r2, r3
 8004a92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a96:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004a98:	e24e      	b.n	8004f38 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	f040 80df 	bne.w	8004c70 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d019      	beq.n	8004aee <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	212c      	movs	r1, #44	; 0x2c
 8004ac0:	fb01 f303 	mul.w	r3, r1, r3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	3348      	adds	r3, #72	; 0x48
 8004ac8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	0159      	lsls	r1, r3, #5
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	440b      	add	r3, r1
 8004ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004adc:	1ad2      	subs	r2, r2, r3
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	202c      	movs	r0, #44	; 0x2c
 8004ae4:	fb00 f303 	mul.w	r3, r0, r3
 8004ae8:	440b      	add	r3, r1
 8004aea:	3350      	adds	r3, #80	; 0x50
 8004aec:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	212c      	movs	r1, #44	; 0x2c
 8004af4:	fb01 f303 	mul.w	r3, r1, r3
 8004af8:	4413      	add	r3, r2
 8004afa:	3361      	adds	r3, #97	; 0x61
 8004afc:	2201      	movs	r2, #1
 8004afe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	212c      	movs	r1, #44	; 0x2c
 8004b06:	fb01 f303 	mul.w	r3, r1, r3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	335c      	adds	r3, #92	; 0x5c
 8004b0e:	2200      	movs	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1e:	461a      	mov	r2, r3
 8004b20:	2301      	movs	r3, #1
 8004b22:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	212c      	movs	r1, #44	; 0x2c
 8004b2a:	fb01 f303 	mul.w	r3, r1, r3
 8004b2e:	4413      	add	r3, r2
 8004b30:	333f      	adds	r3, #63	; 0x3f
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d009      	beq.n	8004b4c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	212c      	movs	r1, #44	; 0x2c
 8004b3e:	fb01 f303 	mul.w	r3, r1, r3
 8004b42:	4413      	add	r3, r2
 8004b44:	333f      	adds	r3, #63	; 0x3f
 8004b46:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d111      	bne.n	8004b70 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	4611      	mov	r1, r2
 8004b56:	4618      	mov	r0, r3
 8004b58:	f004 fe6d 	bl	8009836 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b68:	461a      	mov	r2, r3
 8004b6a:	2310      	movs	r3, #16
 8004b6c:	6093      	str	r3, [r2, #8]
 8004b6e:	e03a      	b.n	8004be6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	212c      	movs	r1, #44	; 0x2c
 8004b76:	fb01 f303 	mul.w	r3, r1, r3
 8004b7a:	4413      	add	r3, r2
 8004b7c:	333f      	adds	r3, #63	; 0x3f
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d009      	beq.n	8004b98 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	212c      	movs	r1, #44	; 0x2c
 8004b8a:	fb01 f303 	mul.w	r3, r1, r3
 8004b8e:	4413      	add	r3, r2
 8004b90:	333f      	adds	r3, #63	; 0x3f
 8004b92:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d126      	bne.n	8004be6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	0151      	lsls	r1, r2, #5
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	440a      	add	r2, r1
 8004bae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bb6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	212c      	movs	r1, #44	; 0x2c
 8004bbe:	fb01 f303 	mul.w	r3, r1, r3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	3360      	adds	r3, #96	; 0x60
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	b2d9      	uxtb	r1, r3
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	202c      	movs	r0, #44	; 0x2c
 8004bd4:	fb00 f303 	mul.w	r3, r0, r3
 8004bd8:	4413      	add	r3, r2
 8004bda:	3360      	adds	r3, #96	; 0x60
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f00f f8df 	bl	8013da4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d12b      	bne.n	8004c46 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	212c      	movs	r1, #44	; 0x2c
 8004bf4:	fb01 f303 	mul.w	r3, r1, r3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	3348      	adds	r3, #72	; 0x48
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	202c      	movs	r0, #44	; 0x2c
 8004c04:	fb00 f202 	mul.w	r2, r0, r2
 8004c08:	440a      	add	r2, r1
 8004c0a:	3240      	adds	r2, #64	; 0x40
 8004c0c:	8812      	ldrh	r2, [r2, #0]
 8004c0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 818e 	beq.w	8004f38 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	212c      	movs	r1, #44	; 0x2c
 8004c22:	fb01 f303 	mul.w	r3, r1, r3
 8004c26:	4413      	add	r3, r2
 8004c28:	3354      	adds	r3, #84	; 0x54
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	f083 0301 	eor.w	r3, r3, #1
 8004c30:	b2d8      	uxtb	r0, r3
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	212c      	movs	r1, #44	; 0x2c
 8004c38:	fb01 f303 	mul.w	r3, r1, r3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	3354      	adds	r3, #84	; 0x54
 8004c40:	4602      	mov	r2, r0
 8004c42:	701a      	strb	r2, [r3, #0]
}
 8004c44:	e178      	b.n	8004f38 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	212c      	movs	r1, #44	; 0x2c
 8004c4c:	fb01 f303 	mul.w	r3, r1, r3
 8004c50:	4413      	add	r3, r2
 8004c52:	3354      	adds	r3, #84	; 0x54
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	f083 0301 	eor.w	r3, r3, #1
 8004c5a:	b2d8      	uxtb	r0, r3
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	212c      	movs	r1, #44	; 0x2c
 8004c62:	fb01 f303 	mul.w	r3, r1, r3
 8004c66:	4413      	add	r3, r2
 8004c68:	3354      	adds	r3, #84	; 0x54
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	701a      	strb	r2, [r3, #0]
}
 8004c6e:	e163      	b.n	8004f38 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	f040 80f6 	bne.w	8004e74 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	212c      	movs	r1, #44	; 0x2c
 8004c8e:	fb01 f303 	mul.w	r3, r1, r3
 8004c92:	4413      	add	r3, r2
 8004c94:	3361      	adds	r3, #97	; 0x61
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d109      	bne.n	8004cb0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	212c      	movs	r1, #44	; 0x2c
 8004ca2:	fb01 f303 	mul.w	r3, r1, r3
 8004ca6:	4413      	add	r3, r2
 8004ca8:	3360      	adds	r3, #96	; 0x60
 8004caa:	2201      	movs	r2, #1
 8004cac:	701a      	strb	r2, [r3, #0]
 8004cae:	e0c9      	b.n	8004e44 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	212c      	movs	r1, #44	; 0x2c
 8004cb6:	fb01 f303 	mul.w	r3, r1, r3
 8004cba:	4413      	add	r3, r2
 8004cbc:	3361      	adds	r3, #97	; 0x61
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b05      	cmp	r3, #5
 8004cc2:	d109      	bne.n	8004cd8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	212c      	movs	r1, #44	; 0x2c
 8004cca:	fb01 f303 	mul.w	r3, r1, r3
 8004cce:	4413      	add	r3, r2
 8004cd0:	3360      	adds	r3, #96	; 0x60
 8004cd2:	2205      	movs	r2, #5
 8004cd4:	701a      	strb	r2, [r3, #0]
 8004cd6:	e0b5      	b.n	8004e44 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	212c      	movs	r1, #44	; 0x2c
 8004cde:	fb01 f303 	mul.w	r3, r1, r3
 8004ce2:	4413      	add	r3, r2
 8004ce4:	3361      	adds	r3, #97	; 0x61
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b06      	cmp	r3, #6
 8004cea:	d009      	beq.n	8004d00 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	212c      	movs	r1, #44	; 0x2c
 8004cf2:	fb01 f303 	mul.w	r3, r1, r3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3361      	adds	r3, #97	; 0x61
 8004cfa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d150      	bne.n	8004da2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	212c      	movs	r1, #44	; 0x2c
 8004d06:	fb01 f303 	mul.w	r3, r1, r3
 8004d0a:	4413      	add	r3, r2
 8004d0c:	335c      	adds	r3, #92	; 0x5c
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	202c      	movs	r0, #44	; 0x2c
 8004d18:	fb00 f303 	mul.w	r3, r0, r3
 8004d1c:	440b      	add	r3, r1
 8004d1e:	335c      	adds	r3, #92	; 0x5c
 8004d20:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	212c      	movs	r1, #44	; 0x2c
 8004d28:	fb01 f303 	mul.w	r3, r1, r3
 8004d2c:	4413      	add	r3, r2
 8004d2e:	335c      	adds	r3, #92	; 0x5c
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d912      	bls.n	8004d5c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	212c      	movs	r1, #44	; 0x2c
 8004d3c:	fb01 f303 	mul.w	r3, r1, r3
 8004d40:	4413      	add	r3, r2
 8004d42:	335c      	adds	r3, #92	; 0x5c
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	212c      	movs	r1, #44	; 0x2c
 8004d4e:	fb01 f303 	mul.w	r3, r1, r3
 8004d52:	4413      	add	r3, r2
 8004d54:	3360      	adds	r3, #96	; 0x60
 8004d56:	2204      	movs	r2, #4
 8004d58:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d5a:	e073      	b.n	8004e44 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	212c      	movs	r1, #44	; 0x2c
 8004d62:	fb01 f303 	mul.w	r3, r1, r3
 8004d66:	4413      	add	r3, r2
 8004d68:	3360      	adds	r3, #96	; 0x60
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d84:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d8c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004da0:	e050      	b.n	8004e44 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	212c      	movs	r1, #44	; 0x2c
 8004da8:	fb01 f303 	mul.w	r3, r1, r3
 8004dac:	4413      	add	r3, r2
 8004dae:	3361      	adds	r3, #97	; 0x61
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d122      	bne.n	8004dfc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	212c      	movs	r1, #44	; 0x2c
 8004dbc:	fb01 f303 	mul.w	r3, r1, r3
 8004dc0:	4413      	add	r3, r2
 8004dc2:	3360      	adds	r3, #96	; 0x60
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004dde:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004de6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df4:	461a      	mov	r2, r3
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	e023      	b.n	8004e44 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	212c      	movs	r1, #44	; 0x2c
 8004e02:	fb01 f303 	mul.w	r3, r1, r3
 8004e06:	4413      	add	r3, r2
 8004e08:	3361      	adds	r3, #97	; 0x61
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b07      	cmp	r3, #7
 8004e0e:	d119      	bne.n	8004e44 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	212c      	movs	r1, #44	; 0x2c
 8004e16:	fb01 f303 	mul.w	r3, r1, r3
 8004e1a:	4413      	add	r3, r2
 8004e1c:	335c      	adds	r3, #92	; 0x5c
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	202c      	movs	r0, #44	; 0x2c
 8004e28:	fb00 f303 	mul.w	r3, r0, r3
 8004e2c:	440b      	add	r3, r1
 8004e2e:	335c      	adds	r3, #92	; 0x5c
 8004e30:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	212c      	movs	r1, #44	; 0x2c
 8004e38:	fb01 f303 	mul.w	r3, r1, r3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	3360      	adds	r3, #96	; 0x60
 8004e40:	2204      	movs	r2, #4
 8004e42:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e50:	461a      	mov	r2, r3
 8004e52:	2302      	movs	r3, #2
 8004e54:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	b2d9      	uxtb	r1, r3
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	202c      	movs	r0, #44	; 0x2c
 8004e60:	fb00 f303 	mul.w	r3, r0, r3
 8004e64:	4413      	add	r3, r2
 8004e66:	3360      	adds	r3, #96	; 0x60
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f00e ff99 	bl	8013da4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004e72:	e061      	b.n	8004f38 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 0310 	and.w	r3, r3, #16
 8004e86:	2b10      	cmp	r3, #16
 8004e88:	d156      	bne.n	8004f38 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	212c      	movs	r1, #44	; 0x2c
 8004e90:	fb01 f303 	mul.w	r3, r1, r3
 8004e94:	4413      	add	r3, r2
 8004e96:	333f      	adds	r3, #63	; 0x3f
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d111      	bne.n	8004ec2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	212c      	movs	r1, #44	; 0x2c
 8004ea4:	fb01 f303 	mul.w	r3, r1, r3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	335c      	adds	r3, #92	; 0x5c
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	4611      	mov	r1, r2
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f004 fcbb 	bl	8009836 <USB_HC_Halt>
 8004ec0:	e031      	b.n	8004f26 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	212c      	movs	r1, #44	; 0x2c
 8004ec8:	fb01 f303 	mul.w	r3, r1, r3
 8004ecc:	4413      	add	r3, r2
 8004ece:	333f      	adds	r3, #63	; 0x3f
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d009      	beq.n	8004eea <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	212c      	movs	r1, #44	; 0x2c
 8004edc:	fb01 f303 	mul.w	r3, r1, r3
 8004ee0:	4413      	add	r3, r2
 8004ee2:	333f      	adds	r3, #63	; 0x3f
 8004ee4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d11d      	bne.n	8004f26 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	212c      	movs	r1, #44	; 0x2c
 8004ef0:	fb01 f303 	mul.w	r3, r1, r3
 8004ef4:	4413      	add	r3, r2
 8004ef6:	335c      	adds	r3, #92	; 0x5c
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d110      	bne.n	8004f26 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	212c      	movs	r1, #44	; 0x2c
 8004f0a:	fb01 f303 	mul.w	r3, r1, r3
 8004f0e:	4413      	add	r3, r2
 8004f10:	3361      	adds	r3, #97	; 0x61
 8004f12:	2203      	movs	r2, #3
 8004f14:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	4611      	mov	r1, r2
 8004f20:	4618      	mov	r0, r3
 8004f22:	f004 fc88 	bl	8009836 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f32:	461a      	mov	r2, r3
 8004f34:	2310      	movs	r3, #16
 8004f36:	6093      	str	r3, [r2, #8]
}
 8004f38:	bf00      	nop
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004f56:	78fb      	ldrb	r3, [r7, #3]
 8004f58:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d11a      	bne.n	8004fa6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	2304      	movs	r3, #4
 8004f80:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	212c      	movs	r1, #44	; 0x2c
 8004f88:	fb01 f303 	mul.w	r3, r1, r3
 8004f8c:	4413      	add	r3, r2
 8004f8e:	3361      	adds	r3, #97	; 0x61
 8004f90:	2206      	movs	r2, #6
 8004f92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	b2d2      	uxtb	r2, r2
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f004 fc49 	bl	8009836 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004fa4:	e331      	b.n	800560a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	d12e      	bne.n	800501a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc8:	461a      	mov	r2, r3
 8004fca:	2320      	movs	r3, #32
 8004fcc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	212c      	movs	r1, #44	; 0x2c
 8004fd4:	fb01 f303 	mul.w	r3, r1, r3
 8004fd8:	4413      	add	r3, r2
 8004fda:	333d      	adds	r3, #61	; 0x3d
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	f040 8313 	bne.w	800560a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	212c      	movs	r1, #44	; 0x2c
 8004fea:	fb01 f303 	mul.w	r3, r1, r3
 8004fee:	4413      	add	r3, r2
 8004ff0:	333d      	adds	r3, #61	; 0x3d
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	212c      	movs	r1, #44	; 0x2c
 8004ffc:	fb01 f303 	mul.w	r3, r1, r3
 8005000:	4413      	add	r3, r2
 8005002:	3360      	adds	r3, #96	; 0x60
 8005004:	2202      	movs	r2, #2
 8005006:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	b2d2      	uxtb	r2, r2
 8005010:	4611      	mov	r1, r2
 8005012:	4618      	mov	r0, r3
 8005014:	f004 fc0f 	bl	8009836 <USB_HC_Halt>
}
 8005018:	e2f7      	b.n	800560a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	4413      	add	r3, r2
 8005022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800502c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005030:	d112      	bne.n	8005058 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	4413      	add	r3, r2
 800503a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503e:	461a      	mov	r2, r3
 8005040:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005044:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	4611      	mov	r1, r2
 8005050:	4618      	mov	r0, r3
 8005052:	f004 fbf0 	bl	8009836 <USB_HC_Halt>
}
 8005056:	e2d8      	b.n	800560a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	4413      	add	r3, r2
 8005060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b01      	cmp	r3, #1
 800506c:	d140      	bne.n	80050f0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	212c      	movs	r1, #44	; 0x2c
 8005074:	fb01 f303 	mul.w	r3, r1, r3
 8005078:	4413      	add	r3, r2
 800507a:	335c      	adds	r3, #92	; 0x5c
 800507c:	2200      	movs	r2, #0
 800507e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	4413      	add	r3, r2
 8005088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005092:	2b40      	cmp	r3, #64	; 0x40
 8005094:	d111      	bne.n	80050ba <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	212c      	movs	r1, #44	; 0x2c
 800509c:	fb01 f303 	mul.w	r3, r1, r3
 80050a0:	4413      	add	r3, r2
 80050a2:	333d      	adds	r3, #61	; 0x3d
 80050a4:	2201      	movs	r2, #1
 80050a6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b4:	461a      	mov	r2, r3
 80050b6:	2340      	movs	r3, #64	; 0x40
 80050b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c6:	461a      	mov	r2, r3
 80050c8:	2301      	movs	r3, #1
 80050ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	212c      	movs	r1, #44	; 0x2c
 80050d2:	fb01 f303 	mul.w	r3, r1, r3
 80050d6:	4413      	add	r3, r2
 80050d8:	3361      	adds	r3, #97	; 0x61
 80050da:	2201      	movs	r2, #1
 80050dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	4611      	mov	r1, r2
 80050e8:	4618      	mov	r0, r3
 80050ea:	f004 fba4 	bl	8009836 <USB_HC_Halt>
}
 80050ee:	e28c      	b.n	800560a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005102:	2b40      	cmp	r3, #64	; 0x40
 8005104:	d12c      	bne.n	8005160 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	212c      	movs	r1, #44	; 0x2c
 800510c:	fb01 f303 	mul.w	r3, r1, r3
 8005110:	4413      	add	r3, r2
 8005112:	3361      	adds	r3, #97	; 0x61
 8005114:	2204      	movs	r2, #4
 8005116:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	212c      	movs	r1, #44	; 0x2c
 800511e:	fb01 f303 	mul.w	r3, r1, r3
 8005122:	4413      	add	r3, r2
 8005124:	333d      	adds	r3, #61	; 0x3d
 8005126:	2201      	movs	r2, #1
 8005128:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	212c      	movs	r1, #44	; 0x2c
 8005130:	fb01 f303 	mul.w	r3, r1, r3
 8005134:	4413      	add	r3, r2
 8005136:	335c      	adds	r3, #92	; 0x5c
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	4611      	mov	r1, r2
 8005146:	4618      	mov	r0, r3
 8005148:	f004 fb75 	bl	8009836 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	4413      	add	r3, r2
 8005154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005158:	461a      	mov	r2, r3
 800515a:	2340      	movs	r3, #64	; 0x40
 800515c:	6093      	str	r3, [r2, #8]
}
 800515e:	e254      	b.n	800560a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	4413      	add	r3, r2
 8005168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b08      	cmp	r3, #8
 8005174:	d11a      	bne.n	80051ac <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	4413      	add	r3, r2
 800517e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005182:	461a      	mov	r2, r3
 8005184:	2308      	movs	r3, #8
 8005186:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	212c      	movs	r1, #44	; 0x2c
 800518e:	fb01 f303 	mul.w	r3, r1, r3
 8005192:	4413      	add	r3, r2
 8005194:	3361      	adds	r3, #97	; 0x61
 8005196:	2205      	movs	r2, #5
 8005198:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	b2d2      	uxtb	r2, r2
 80051a2:	4611      	mov	r1, r2
 80051a4:	4618      	mov	r0, r3
 80051a6:	f004 fb46 	bl	8009836 <USB_HC_Halt>
}
 80051aa:	e22e      	b.n	800560a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 0310 	and.w	r3, r3, #16
 80051be:	2b10      	cmp	r3, #16
 80051c0:	d140      	bne.n	8005244 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	212c      	movs	r1, #44	; 0x2c
 80051c8:	fb01 f303 	mul.w	r3, r1, r3
 80051cc:	4413      	add	r3, r2
 80051ce:	335c      	adds	r3, #92	; 0x5c
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	212c      	movs	r1, #44	; 0x2c
 80051da:	fb01 f303 	mul.w	r3, r1, r3
 80051de:	4413      	add	r3, r2
 80051e0:	3361      	adds	r3, #97	; 0x61
 80051e2:	2203      	movs	r2, #3
 80051e4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	212c      	movs	r1, #44	; 0x2c
 80051ec:	fb01 f303 	mul.w	r3, r1, r3
 80051f0:	4413      	add	r3, r2
 80051f2:	333d      	adds	r3, #61	; 0x3d
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d112      	bne.n	8005220 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	212c      	movs	r1, #44	; 0x2c
 8005200:	fb01 f303 	mul.w	r3, r1, r3
 8005204:	4413      	add	r3, r2
 8005206:	333c      	adds	r3, #60	; 0x3c
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d108      	bne.n	8005220 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	212c      	movs	r1, #44	; 0x2c
 8005214:	fb01 f303 	mul.w	r3, r1, r3
 8005218:	4413      	add	r3, r2
 800521a:	333d      	adds	r3, #61	; 0x3d
 800521c:	2201      	movs	r2, #1
 800521e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	4611      	mov	r1, r2
 800522a:	4618      	mov	r0, r3
 800522c:	f004 fb03 	bl	8009836 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	4413      	add	r3, r2
 8005238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523c:	461a      	mov	r2, r3
 800523e:	2310      	movs	r3, #16
 8005240:	6093      	str	r3, [r2, #8]
}
 8005242:	e1e2      	b.n	800560a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	4413      	add	r3, r2
 800524c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005256:	2b80      	cmp	r3, #128	; 0x80
 8005258:	d164      	bne.n	8005324 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d111      	bne.n	8005286 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	212c      	movs	r1, #44	; 0x2c
 8005268:	fb01 f303 	mul.w	r3, r1, r3
 800526c:	4413      	add	r3, r2
 800526e:	3361      	adds	r3, #97	; 0x61
 8005270:	2206      	movs	r2, #6
 8005272:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	4611      	mov	r1, r2
 800527e:	4618      	mov	r0, r3
 8005280:	f004 fad9 	bl	8009836 <USB_HC_Halt>
 8005284:	e044      	b.n	8005310 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	212c      	movs	r1, #44	; 0x2c
 800528c:	fb01 f303 	mul.w	r3, r1, r3
 8005290:	4413      	add	r3, r2
 8005292:	335c      	adds	r3, #92	; 0x5c
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	202c      	movs	r0, #44	; 0x2c
 800529e:	fb00 f303 	mul.w	r3, r0, r3
 80052a2:	440b      	add	r3, r1
 80052a4:	335c      	adds	r3, #92	; 0x5c
 80052a6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	212c      	movs	r1, #44	; 0x2c
 80052ae:	fb01 f303 	mul.w	r3, r1, r3
 80052b2:	4413      	add	r3, r2
 80052b4:	335c      	adds	r3, #92	; 0x5c
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d920      	bls.n	80052fe <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	212c      	movs	r1, #44	; 0x2c
 80052c2:	fb01 f303 	mul.w	r3, r1, r3
 80052c6:	4413      	add	r3, r2
 80052c8:	335c      	adds	r3, #92	; 0x5c
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	212c      	movs	r1, #44	; 0x2c
 80052d4:	fb01 f303 	mul.w	r3, r1, r3
 80052d8:	4413      	add	r3, r2
 80052da:	3360      	adds	r3, #96	; 0x60
 80052dc:	2204      	movs	r2, #4
 80052de:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	b2d9      	uxtb	r1, r3
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	202c      	movs	r0, #44	; 0x2c
 80052ea:	fb00 f303 	mul.w	r3, r0, r3
 80052ee:	4413      	add	r3, r2
 80052f0:	3360      	adds	r3, #96	; 0x60
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	461a      	mov	r2, r3
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f00e fd54 	bl	8013da4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80052fc:	e008      	b.n	8005310 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	212c      	movs	r1, #44	; 0x2c
 8005304:	fb01 f303 	mul.w	r3, r1, r3
 8005308:	4413      	add	r3, r2
 800530a:	3360      	adds	r3, #96	; 0x60
 800530c:	2202      	movs	r2, #2
 800530e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	4413      	add	r3, r2
 8005318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531c:	461a      	mov	r2, r3
 800531e:	2380      	movs	r3, #128	; 0x80
 8005320:	6093      	str	r3, [r2, #8]
}
 8005322:	e172      	b.n	800560a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	4413      	add	r3, r2
 800532c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800533a:	d11b      	bne.n	8005374 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	212c      	movs	r1, #44	; 0x2c
 8005342:	fb01 f303 	mul.w	r3, r1, r3
 8005346:	4413      	add	r3, r2
 8005348:	3361      	adds	r3, #97	; 0x61
 800534a:	2208      	movs	r2, #8
 800534c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	4611      	mov	r1, r2
 8005358:	4618      	mov	r0, r3
 800535a:	f004 fa6c 	bl	8009836 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	4413      	add	r3, r2
 8005366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536a:	461a      	mov	r2, r3
 800536c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005370:	6093      	str	r3, [r2, #8]
}
 8005372:	e14a      	b.n	800560a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	4413      	add	r3, r2
 800537c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b02      	cmp	r3, #2
 8005388:	f040 813f 	bne.w	800560a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	212c      	movs	r1, #44	; 0x2c
 8005392:	fb01 f303 	mul.w	r3, r1, r3
 8005396:	4413      	add	r3, r2
 8005398:	3361      	adds	r3, #97	; 0x61
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d17d      	bne.n	800549c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	212c      	movs	r1, #44	; 0x2c
 80053a6:	fb01 f303 	mul.w	r3, r1, r3
 80053aa:	4413      	add	r3, r2
 80053ac:	3360      	adds	r3, #96	; 0x60
 80053ae:	2201      	movs	r2, #1
 80053b0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	212c      	movs	r1, #44	; 0x2c
 80053b8:	fb01 f303 	mul.w	r3, r1, r3
 80053bc:	4413      	add	r3, r2
 80053be:	333f      	adds	r3, #63	; 0x3f
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d00a      	beq.n	80053dc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	212c      	movs	r1, #44	; 0x2c
 80053cc:	fb01 f303 	mul.w	r3, r1, r3
 80053d0:	4413      	add	r3, r2
 80053d2:	333f      	adds	r3, #63	; 0x3f
 80053d4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	f040 8100 	bne.w	80055dc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d113      	bne.n	800540c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	212c      	movs	r1, #44	; 0x2c
 80053ea:	fb01 f303 	mul.w	r3, r1, r3
 80053ee:	4413      	add	r3, r2
 80053f0:	3355      	adds	r3, #85	; 0x55
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	f083 0301 	eor.w	r3, r3, #1
 80053f8:	b2d8      	uxtb	r0, r3
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	212c      	movs	r1, #44	; 0x2c
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	4413      	add	r3, r2
 8005406:	3355      	adds	r3, #85	; 0x55
 8005408:	4602      	mov	r2, r0
 800540a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	2b01      	cmp	r3, #1
 8005412:	f040 80e3 	bne.w	80055dc <HCD_HC_OUT_IRQHandler+0x69c>
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	212c      	movs	r1, #44	; 0x2c
 800541c:	fb01 f303 	mul.w	r3, r1, r3
 8005420:	4413      	add	r3, r2
 8005422:	334c      	adds	r3, #76	; 0x4c
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 80d8 	beq.w	80055dc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	212c      	movs	r1, #44	; 0x2c
 8005432:	fb01 f303 	mul.w	r3, r1, r3
 8005436:	4413      	add	r3, r2
 8005438:	334c      	adds	r3, #76	; 0x4c
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	202c      	movs	r0, #44	; 0x2c
 8005442:	fb00 f202 	mul.w	r2, r0, r2
 8005446:	440a      	add	r2, r1
 8005448:	3240      	adds	r2, #64	; 0x40
 800544a:	8812      	ldrh	r2, [r2, #0]
 800544c:	4413      	add	r3, r2
 800544e:	3b01      	subs	r3, #1
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	202c      	movs	r0, #44	; 0x2c
 8005456:	fb00 f202 	mul.w	r2, r0, r2
 800545a:	440a      	add	r2, r1
 800545c:	3240      	adds	r2, #64	; 0x40
 800545e:	8812      	ldrh	r2, [r2, #0]
 8005460:	fbb3 f3f2 	udiv	r3, r3, r2
 8005464:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 80b5 	beq.w	80055dc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	212c      	movs	r1, #44	; 0x2c
 8005478:	fb01 f303 	mul.w	r3, r1, r3
 800547c:	4413      	add	r3, r2
 800547e:	3355      	adds	r3, #85	; 0x55
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	f083 0301 	eor.w	r3, r3, #1
 8005486:	b2d8      	uxtb	r0, r3
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	212c      	movs	r1, #44	; 0x2c
 800548e:	fb01 f303 	mul.w	r3, r1, r3
 8005492:	4413      	add	r3, r2
 8005494:	3355      	adds	r3, #85	; 0x55
 8005496:	4602      	mov	r2, r0
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	e09f      	b.n	80055dc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	212c      	movs	r1, #44	; 0x2c
 80054a2:	fb01 f303 	mul.w	r3, r1, r3
 80054a6:	4413      	add	r3, r2
 80054a8:	3361      	adds	r3, #97	; 0x61
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b03      	cmp	r3, #3
 80054ae:	d109      	bne.n	80054c4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	212c      	movs	r1, #44	; 0x2c
 80054b6:	fb01 f303 	mul.w	r3, r1, r3
 80054ba:	4413      	add	r3, r2
 80054bc:	3360      	adds	r3, #96	; 0x60
 80054be:	2202      	movs	r2, #2
 80054c0:	701a      	strb	r2, [r3, #0]
 80054c2:	e08b      	b.n	80055dc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	212c      	movs	r1, #44	; 0x2c
 80054ca:	fb01 f303 	mul.w	r3, r1, r3
 80054ce:	4413      	add	r3, r2
 80054d0:	3361      	adds	r3, #97	; 0x61
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2b04      	cmp	r3, #4
 80054d6:	d109      	bne.n	80054ec <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	212c      	movs	r1, #44	; 0x2c
 80054de:	fb01 f303 	mul.w	r3, r1, r3
 80054e2:	4413      	add	r3, r2
 80054e4:	3360      	adds	r3, #96	; 0x60
 80054e6:	2202      	movs	r2, #2
 80054e8:	701a      	strb	r2, [r3, #0]
 80054ea:	e077      	b.n	80055dc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	212c      	movs	r1, #44	; 0x2c
 80054f2:	fb01 f303 	mul.w	r3, r1, r3
 80054f6:	4413      	add	r3, r2
 80054f8:	3361      	adds	r3, #97	; 0x61
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2b05      	cmp	r3, #5
 80054fe:	d109      	bne.n	8005514 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	212c      	movs	r1, #44	; 0x2c
 8005506:	fb01 f303 	mul.w	r3, r1, r3
 800550a:	4413      	add	r3, r2
 800550c:	3360      	adds	r3, #96	; 0x60
 800550e:	2205      	movs	r2, #5
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	e063      	b.n	80055dc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	212c      	movs	r1, #44	; 0x2c
 800551a:	fb01 f303 	mul.w	r3, r1, r3
 800551e:	4413      	add	r3, r2
 8005520:	3361      	adds	r3, #97	; 0x61
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b06      	cmp	r3, #6
 8005526:	d009      	beq.n	800553c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	212c      	movs	r1, #44	; 0x2c
 800552e:	fb01 f303 	mul.w	r3, r1, r3
 8005532:	4413      	add	r3, r2
 8005534:	3361      	adds	r3, #97	; 0x61
 8005536:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005538:	2b08      	cmp	r3, #8
 800553a:	d14f      	bne.n	80055dc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	212c      	movs	r1, #44	; 0x2c
 8005542:	fb01 f303 	mul.w	r3, r1, r3
 8005546:	4413      	add	r3, r2
 8005548:	335c      	adds	r3, #92	; 0x5c
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	202c      	movs	r0, #44	; 0x2c
 8005554:	fb00 f303 	mul.w	r3, r0, r3
 8005558:	440b      	add	r3, r1
 800555a:	335c      	adds	r3, #92	; 0x5c
 800555c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	212c      	movs	r1, #44	; 0x2c
 8005564:	fb01 f303 	mul.w	r3, r1, r3
 8005568:	4413      	add	r3, r2
 800556a:	335c      	adds	r3, #92	; 0x5c
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b02      	cmp	r3, #2
 8005570:	d912      	bls.n	8005598 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	212c      	movs	r1, #44	; 0x2c
 8005578:	fb01 f303 	mul.w	r3, r1, r3
 800557c:	4413      	add	r3, r2
 800557e:	335c      	adds	r3, #92	; 0x5c
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	212c      	movs	r1, #44	; 0x2c
 800558a:	fb01 f303 	mul.w	r3, r1, r3
 800558e:	4413      	add	r3, r2
 8005590:	3360      	adds	r3, #96	; 0x60
 8005592:	2204      	movs	r2, #4
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	e021      	b.n	80055dc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	212c      	movs	r1, #44	; 0x2c
 800559e:	fb01 f303 	mul.w	r3, r1, r3
 80055a2:	4413      	add	r3, r2
 80055a4:	3360      	adds	r3, #96	; 0x60
 80055a6:	2202      	movs	r2, #2
 80055a8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055c0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055c8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d6:	461a      	mov	r2, r3
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e8:	461a      	mov	r2, r3
 80055ea:	2302      	movs	r3, #2
 80055ec:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	b2d9      	uxtb	r1, r3
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	202c      	movs	r0, #44	; 0x2c
 80055f8:	fb00 f303 	mul.w	r3, r0, r3
 80055fc:	4413      	add	r3, r2
 80055fe:	3360      	adds	r3, #96	; 0x60
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f00e fbcd 	bl	8013da4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800560a:	bf00      	nop
 800560c:	3720      	adds	r7, #32
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b08a      	sub	sp, #40	; 0x28
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	0c5b      	lsrs	r3, r3, #17
 8005638:	f003 030f 	and.w	r3, r3, #15
 800563c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	091b      	lsrs	r3, r3, #4
 8005642:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005646:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2b02      	cmp	r3, #2
 800564c:	d004      	beq.n	8005658 <HCD_RXQLVL_IRQHandler+0x46>
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2b05      	cmp	r3, #5
 8005652:	f000 80a9 	beq.w	80057a8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005656:	e0aa      	b.n	80057ae <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 80a6 	beq.w	80057ac <HCD_RXQLVL_IRQHandler+0x19a>
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	212c      	movs	r1, #44	; 0x2c
 8005666:	fb01 f303 	mul.w	r3, r1, r3
 800566a:	4413      	add	r3, r2
 800566c:	3344      	adds	r3, #68	; 0x44
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 809b 	beq.w	80057ac <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	212c      	movs	r1, #44	; 0x2c
 800567c:	fb01 f303 	mul.w	r3, r1, r3
 8005680:	4413      	add	r3, r2
 8005682:	3350      	adds	r3, #80	; 0x50
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	441a      	add	r2, r3
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	202c      	movs	r0, #44	; 0x2c
 8005690:	fb00 f303 	mul.w	r3, r0, r3
 8005694:	440b      	add	r3, r1
 8005696:	334c      	adds	r3, #76	; 0x4c
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	429a      	cmp	r2, r3
 800569c:	d87a      	bhi.n	8005794 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	212c      	movs	r1, #44	; 0x2c
 80056a8:	fb01 f303 	mul.w	r3, r1, r3
 80056ac:	4413      	add	r3, r2
 80056ae:	3344      	adds	r3, #68	; 0x44
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	b292      	uxth	r2, r2
 80056b6:	4619      	mov	r1, r3
 80056b8:	f003 fc14 	bl	8008ee4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	212c      	movs	r1, #44	; 0x2c
 80056c2:	fb01 f303 	mul.w	r3, r1, r3
 80056c6:	4413      	add	r3, r2
 80056c8:	3344      	adds	r3, #68	; 0x44
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	441a      	add	r2, r3
 80056d0:	6879      	ldr	r1, [r7, #4]
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	202c      	movs	r0, #44	; 0x2c
 80056d6:	fb00 f303 	mul.w	r3, r0, r3
 80056da:	440b      	add	r3, r1
 80056dc:	3344      	adds	r3, #68	; 0x44
 80056de:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	212c      	movs	r1, #44	; 0x2c
 80056e6:	fb01 f303 	mul.w	r3, r1, r3
 80056ea:	4413      	add	r3, r2
 80056ec:	3350      	adds	r3, #80	; 0x50
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	441a      	add	r2, r3
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	202c      	movs	r0, #44	; 0x2c
 80056fa:	fb00 f303 	mul.w	r3, r0, r3
 80056fe:	440b      	add	r3, r1
 8005700:	3350      	adds	r3, #80	; 0x50
 8005702:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	4413      	add	r3, r2
 800570c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	0cdb      	lsrs	r3, r3, #19
 8005714:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005718:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	212c      	movs	r1, #44	; 0x2c
 8005720:	fb01 f303 	mul.w	r3, r1, r3
 8005724:	4413      	add	r3, r2
 8005726:	3340      	adds	r3, #64	; 0x40
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	4293      	cmp	r3, r2
 8005730:	d13c      	bne.n	80057ac <HCD_RXQLVL_IRQHandler+0x19a>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d039      	beq.n	80057ac <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	4413      	add	r3, r2
 8005740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800574e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005756:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	4413      	add	r3, r2
 8005760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005764:	461a      	mov	r2, r3
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	212c      	movs	r1, #44	; 0x2c
 8005770:	fb01 f303 	mul.w	r3, r1, r3
 8005774:	4413      	add	r3, r2
 8005776:	3354      	adds	r3, #84	; 0x54
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	f083 0301 	eor.w	r3, r3, #1
 800577e:	b2d8      	uxtb	r0, r3
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	212c      	movs	r1, #44	; 0x2c
 8005786:	fb01 f303 	mul.w	r3, r1, r3
 800578a:	4413      	add	r3, r2
 800578c:	3354      	adds	r3, #84	; 0x54
 800578e:	4602      	mov	r2, r0
 8005790:	701a      	strb	r2, [r3, #0]
      break;
 8005792:	e00b      	b.n	80057ac <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	212c      	movs	r1, #44	; 0x2c
 800579a:	fb01 f303 	mul.w	r3, r1, r3
 800579e:	4413      	add	r3, r2
 80057a0:	3360      	adds	r3, #96	; 0x60
 80057a2:	2204      	movs	r2, #4
 80057a4:	701a      	strb	r2, [r3, #0]
      break;
 80057a6:	e001      	b.n	80057ac <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80057a8:	bf00      	nop
 80057aa:	e000      	b.n	80057ae <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80057ac:	bf00      	nop
  }
}
 80057ae:	bf00      	nop
 80057b0:	3728      	adds	r7, #40	; 0x28
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b086      	sub	sp, #24
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80057e2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d10b      	bne.n	8005806 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d102      	bne.n	80057fe <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f00e fab7 	bl	8013d6c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f043 0302 	orr.w	r3, r3, #2
 8005804:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f003 0308 	and.w	r3, r3, #8
 800580c:	2b08      	cmp	r3, #8
 800580e:	d132      	bne.n	8005876 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f043 0308 	orr.w	r3, r3, #8
 8005816:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 0304 	and.w	r3, r3, #4
 800581e:	2b04      	cmp	r3, #4
 8005820:	d126      	bne.n	8005870 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	2b02      	cmp	r3, #2
 8005828:	d113      	bne.n	8005852 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005830:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005834:	d106      	bne.n	8005844 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2102      	movs	r1, #2
 800583c:	4618      	mov	r0, r3
 800583e:	f003 fcbf 	bl	80091c0 <USB_InitFSLSPClkSel>
 8005842:	e011      	b.n	8005868 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2101      	movs	r1, #1
 800584a:	4618      	mov	r0, r3
 800584c:	f003 fcb8 	bl	80091c0 <USB_InitFSLSPClkSel>
 8005850:	e00a      	b.n	8005868 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d106      	bne.n	8005868 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005860:	461a      	mov	r2, r3
 8005862:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005866:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f00e faad 	bl	8013dc8 <HAL_HCD_PortEnabled_Callback>
 800586e:	e002      	b.n	8005876 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f00e fab7 	bl	8013de4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f003 0320 	and.w	r3, r3, #32
 800587c:	2b20      	cmp	r3, #32
 800587e:	d103      	bne.n	8005888 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f043 0320 	orr.w	r3, r3, #32
 8005886:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800588e:	461a      	mov	r2, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	6013      	str	r3, [r2, #0]
}
 8005894:	bf00      	nop
 8005896:	3718      	adds	r7, #24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e267      	b.n	8005d7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d075      	beq.n	80059a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058ba:	4b88      	ldr	r3, [pc, #544]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 030c 	and.w	r3, r3, #12
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d00c      	beq.n	80058e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058c6:	4b85      	ldr	r3, [pc, #532]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058ce:	2b08      	cmp	r3, #8
 80058d0:	d112      	bne.n	80058f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058d2:	4b82      	ldr	r3, [pc, #520]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058de:	d10b      	bne.n	80058f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058e0:	4b7e      	ldr	r3, [pc, #504]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d05b      	beq.n	80059a4 <HAL_RCC_OscConfig+0x108>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d157      	bne.n	80059a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e242      	b.n	8005d7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005900:	d106      	bne.n	8005910 <HAL_RCC_OscConfig+0x74>
 8005902:	4b76      	ldr	r3, [pc, #472]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a75      	ldr	r2, [pc, #468]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 8005908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	e01d      	b.n	800594c <HAL_RCC_OscConfig+0xb0>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005918:	d10c      	bne.n	8005934 <HAL_RCC_OscConfig+0x98>
 800591a:	4b70      	ldr	r3, [pc, #448]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a6f      	ldr	r2, [pc, #444]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 8005920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	4b6d      	ldr	r3, [pc, #436]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a6c      	ldr	r2, [pc, #432]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 800592c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005930:	6013      	str	r3, [r2, #0]
 8005932:	e00b      	b.n	800594c <HAL_RCC_OscConfig+0xb0>
 8005934:	4b69      	ldr	r3, [pc, #420]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a68      	ldr	r2, [pc, #416]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 800593a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	4b66      	ldr	r3, [pc, #408]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a65      	ldr	r2, [pc, #404]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 8005946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800594a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d013      	beq.n	800597c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005954:	f7fd fa7c 	bl	8002e50 <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800595c:	f7fd fa78 	bl	8002e50 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b64      	cmp	r3, #100	; 0x64
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e207      	b.n	8005d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800596e:	4b5b      	ldr	r3, [pc, #364]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0f0      	beq.n	800595c <HAL_RCC_OscConfig+0xc0>
 800597a:	e014      	b.n	80059a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800597c:	f7fd fa68 	bl	8002e50 <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005984:	f7fd fa64 	bl	8002e50 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b64      	cmp	r3, #100	; 0x64
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e1f3      	b.n	8005d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005996:	4b51      	ldr	r3, [pc, #324]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f0      	bne.n	8005984 <HAL_RCC_OscConfig+0xe8>
 80059a2:	e000      	b.n	80059a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d063      	beq.n	8005a7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059b2:	4b4a      	ldr	r3, [pc, #296]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 030c 	and.w	r3, r3, #12
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00b      	beq.n	80059d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059be:	4b47      	ldr	r3, [pc, #284]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d11c      	bne.n	8005a04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059ca:	4b44      	ldr	r3, [pc, #272]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d116      	bne.n	8005a04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059d6:	4b41      	ldr	r3, [pc, #260]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d005      	beq.n	80059ee <HAL_RCC_OscConfig+0x152>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d001      	beq.n	80059ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e1c7      	b.n	8005d7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ee:	4b3b      	ldr	r3, [pc, #236]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	4937      	ldr	r1, [pc, #220]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a02:	e03a      	b.n	8005a7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d020      	beq.n	8005a4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a0c:	4b34      	ldr	r3, [pc, #208]	; (8005ae0 <HAL_RCC_OscConfig+0x244>)
 8005a0e:	2201      	movs	r2, #1
 8005a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a12:	f7fd fa1d 	bl	8002e50 <HAL_GetTick>
 8005a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a18:	e008      	b.n	8005a2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a1a:	f7fd fa19 	bl	8002e50 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d901      	bls.n	8005a2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e1a8      	b.n	8005d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a2c:	4b2b      	ldr	r3, [pc, #172]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d0f0      	beq.n	8005a1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a38:	4b28      	ldr	r3, [pc, #160]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	00db      	lsls	r3, r3, #3
 8005a46:	4925      	ldr	r1, [pc, #148]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	600b      	str	r3, [r1, #0]
 8005a4c:	e015      	b.n	8005a7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a4e:	4b24      	ldr	r3, [pc, #144]	; (8005ae0 <HAL_RCC_OscConfig+0x244>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a54:	f7fd f9fc 	bl	8002e50 <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a5a:	e008      	b.n	8005a6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a5c:	f7fd f9f8 	bl	8002e50 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e187      	b.n	8005d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a6e:	4b1b      	ldr	r3, [pc, #108]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1f0      	bne.n	8005a5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0308 	and.w	r3, r3, #8
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d036      	beq.n	8005af4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d016      	beq.n	8005abc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a8e:	4b15      	ldr	r3, [pc, #84]	; (8005ae4 <HAL_RCC_OscConfig+0x248>)
 8005a90:	2201      	movs	r2, #1
 8005a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a94:	f7fd f9dc 	bl	8002e50 <HAL_GetTick>
 8005a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a9a:	e008      	b.n	8005aae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a9c:	f7fd f9d8 	bl	8002e50 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e167      	b.n	8005d7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aae:	4b0b      	ldr	r3, [pc, #44]	; (8005adc <HAL_RCC_OscConfig+0x240>)
 8005ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0f0      	beq.n	8005a9c <HAL_RCC_OscConfig+0x200>
 8005aba:	e01b      	b.n	8005af4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005abc:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <HAL_RCC_OscConfig+0x248>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ac2:	f7fd f9c5 	bl	8002e50 <HAL_GetTick>
 8005ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ac8:	e00e      	b.n	8005ae8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005aca:	f7fd f9c1 	bl	8002e50 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d907      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e150      	b.n	8005d7e <HAL_RCC_OscConfig+0x4e2>
 8005adc:	40023800 	.word	0x40023800
 8005ae0:	42470000 	.word	0x42470000
 8005ae4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ae8:	4b88      	ldr	r3, [pc, #544]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1ea      	bne.n	8005aca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 8097 	beq.w	8005c30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b02:	2300      	movs	r3, #0
 8005b04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b06:	4b81      	ldr	r3, [pc, #516]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10f      	bne.n	8005b32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b12:	2300      	movs	r3, #0
 8005b14:	60bb      	str	r3, [r7, #8]
 8005b16:	4b7d      	ldr	r3, [pc, #500]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	4a7c      	ldr	r2, [pc, #496]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b20:	6413      	str	r3, [r2, #64]	; 0x40
 8005b22:	4b7a      	ldr	r3, [pc, #488]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b2a:	60bb      	str	r3, [r7, #8]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b32:	4b77      	ldr	r3, [pc, #476]	; (8005d10 <HAL_RCC_OscConfig+0x474>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d118      	bne.n	8005b70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b3e:	4b74      	ldr	r3, [pc, #464]	; (8005d10 <HAL_RCC_OscConfig+0x474>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a73      	ldr	r2, [pc, #460]	; (8005d10 <HAL_RCC_OscConfig+0x474>)
 8005b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b4a:	f7fd f981 	bl	8002e50 <HAL_GetTick>
 8005b4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b50:	e008      	b.n	8005b64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b52:	f7fd f97d 	bl	8002e50 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d901      	bls.n	8005b64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e10c      	b.n	8005d7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b64:	4b6a      	ldr	r3, [pc, #424]	; (8005d10 <HAL_RCC_OscConfig+0x474>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d0f0      	beq.n	8005b52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d106      	bne.n	8005b86 <HAL_RCC_OscConfig+0x2ea>
 8005b78:	4b64      	ldr	r3, [pc, #400]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7c:	4a63      	ldr	r2, [pc, #396]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005b7e:	f043 0301 	orr.w	r3, r3, #1
 8005b82:	6713      	str	r3, [r2, #112]	; 0x70
 8005b84:	e01c      	b.n	8005bc0 <HAL_RCC_OscConfig+0x324>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	2b05      	cmp	r3, #5
 8005b8c:	d10c      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x30c>
 8005b8e:	4b5f      	ldr	r3, [pc, #380]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b92:	4a5e      	ldr	r2, [pc, #376]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005b94:	f043 0304 	orr.w	r3, r3, #4
 8005b98:	6713      	str	r3, [r2, #112]	; 0x70
 8005b9a:	4b5c      	ldr	r3, [pc, #368]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9e:	4a5b      	ldr	r2, [pc, #364]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005ba0:	f043 0301 	orr.w	r3, r3, #1
 8005ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ba6:	e00b      	b.n	8005bc0 <HAL_RCC_OscConfig+0x324>
 8005ba8:	4b58      	ldr	r3, [pc, #352]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bac:	4a57      	ldr	r2, [pc, #348]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005bae:	f023 0301 	bic.w	r3, r3, #1
 8005bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8005bb4:	4b55      	ldr	r3, [pc, #340]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb8:	4a54      	ldr	r2, [pc, #336]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005bba:	f023 0304 	bic.w	r3, r3, #4
 8005bbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d015      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc8:	f7fd f942 	bl	8002e50 <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bce:	e00a      	b.n	8005be6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bd0:	f7fd f93e 	bl	8002e50 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e0cb      	b.n	8005d7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005be6:	4b49      	ldr	r3, [pc, #292]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0ee      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x334>
 8005bf2:	e014      	b.n	8005c1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bf4:	f7fd f92c 	bl	8002e50 <HAL_GetTick>
 8005bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bfa:	e00a      	b.n	8005c12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bfc:	f7fd f928 	bl	8002e50 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e0b5      	b.n	8005d7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c12:	4b3e      	ldr	r3, [pc, #248]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1ee      	bne.n	8005bfc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c1e:	7dfb      	ldrb	r3, [r7, #23]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d105      	bne.n	8005c30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c24:	4b39      	ldr	r3, [pc, #228]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	4a38      	ldr	r2, [pc, #224]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005c2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 80a1 	beq.w	8005d7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c3a:	4b34      	ldr	r3, [pc, #208]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f003 030c 	and.w	r3, r3, #12
 8005c42:	2b08      	cmp	r3, #8
 8005c44:	d05c      	beq.n	8005d00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d141      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c4e:	4b31      	ldr	r3, [pc, #196]	; (8005d14 <HAL_RCC_OscConfig+0x478>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c54:	f7fd f8fc 	bl	8002e50 <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c5a:	e008      	b.n	8005c6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c5c:	f7fd f8f8 	bl	8002e50 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e087      	b.n	8005d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c6e:	4b27      	ldr	r3, [pc, #156]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1f0      	bne.n	8005c5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	69da      	ldr	r2, [r3, #28]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	019b      	lsls	r3, r3, #6
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c90:	085b      	lsrs	r3, r3, #1
 8005c92:	3b01      	subs	r3, #1
 8005c94:	041b      	lsls	r3, r3, #16
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	061b      	lsls	r3, r3, #24
 8005c9e:	491b      	ldr	r1, [pc, #108]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ca4:	4b1b      	ldr	r3, [pc, #108]	; (8005d14 <HAL_RCC_OscConfig+0x478>)
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005caa:	f7fd f8d1 	bl	8002e50 <HAL_GetTick>
 8005cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cb0:	e008      	b.n	8005cc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cb2:	f7fd f8cd 	bl	8002e50 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d901      	bls.n	8005cc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e05c      	b.n	8005d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cc4:	4b11      	ldr	r3, [pc, #68]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d0f0      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x416>
 8005cd0:	e054      	b.n	8005d7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cd2:	4b10      	ldr	r3, [pc, #64]	; (8005d14 <HAL_RCC_OscConfig+0x478>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd8:	f7fd f8ba 	bl	8002e50 <HAL_GetTick>
 8005cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ce0:	f7fd f8b6 	bl	8002e50 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e045      	b.n	8005d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cf2:	4b06      	ldr	r3, [pc, #24]	; (8005d0c <HAL_RCC_OscConfig+0x470>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1f0      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x444>
 8005cfe:	e03d      	b.n	8005d7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d107      	bne.n	8005d18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e038      	b.n	8005d7e <HAL_RCC_OscConfig+0x4e2>
 8005d0c:	40023800 	.word	0x40023800
 8005d10:	40007000 	.word	0x40007000
 8005d14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d18:	4b1b      	ldr	r3, [pc, #108]	; (8005d88 <HAL_RCC_OscConfig+0x4ec>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d028      	beq.n	8005d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d121      	bne.n	8005d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d11a      	bne.n	8005d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d48:	4013      	ands	r3, r2
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d111      	bne.n	8005d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5e:	085b      	lsrs	r3, r3, #1
 8005d60:	3b01      	subs	r3, #1
 8005d62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d107      	bne.n	8005d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d001      	beq.n	8005d7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e000      	b.n	8005d7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	40023800 	.word	0x40023800

08005d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e0cc      	b.n	8005f3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005da0:	4b68      	ldr	r3, [pc, #416]	; (8005f44 <HAL_RCC_ClockConfig+0x1b8>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0307 	and.w	r3, r3, #7
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d90c      	bls.n	8005dc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dae:	4b65      	ldr	r3, [pc, #404]	; (8005f44 <HAL_RCC_ClockConfig+0x1b8>)
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	b2d2      	uxtb	r2, r2
 8005db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005db6:	4b63      	ldr	r3, [pc, #396]	; (8005f44 <HAL_RCC_ClockConfig+0x1b8>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d001      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e0b8      	b.n	8005f3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d020      	beq.n	8005e16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0304 	and.w	r3, r3, #4
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d005      	beq.n	8005dec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005de0:	4b59      	ldr	r3, [pc, #356]	; (8005f48 <HAL_RCC_ClockConfig+0x1bc>)
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	4a58      	ldr	r2, [pc, #352]	; (8005f48 <HAL_RCC_ClockConfig+0x1bc>)
 8005de6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0308 	and.w	r3, r3, #8
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d005      	beq.n	8005e04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005df8:	4b53      	ldr	r3, [pc, #332]	; (8005f48 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	4a52      	ldr	r2, [pc, #328]	; (8005f48 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e04:	4b50      	ldr	r3, [pc, #320]	; (8005f48 <HAL_RCC_ClockConfig+0x1bc>)
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	494d      	ldr	r1, [pc, #308]	; (8005f48 <HAL_RCC_ClockConfig+0x1bc>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d044      	beq.n	8005eac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d107      	bne.n	8005e3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e2a:	4b47      	ldr	r3, [pc, #284]	; (8005f48 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d119      	bne.n	8005e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e07f      	b.n	8005f3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d003      	beq.n	8005e4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	d107      	bne.n	8005e5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e4a:	4b3f      	ldr	r3, [pc, #252]	; (8005f48 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d109      	bne.n	8005e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e06f      	b.n	8005f3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e5a:	4b3b      	ldr	r3, [pc, #236]	; (8005f48 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e067      	b.n	8005f3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e6a:	4b37      	ldr	r3, [pc, #220]	; (8005f48 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f023 0203 	bic.w	r2, r3, #3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	4934      	ldr	r1, [pc, #208]	; (8005f48 <HAL_RCC_ClockConfig+0x1bc>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e7c:	f7fc ffe8 	bl	8002e50 <HAL_GetTick>
 8005e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e82:	e00a      	b.n	8005e9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e84:	f7fc ffe4 	bl	8002e50 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e04f      	b.n	8005f3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e9a:	4b2b      	ldr	r3, [pc, #172]	; (8005f48 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f003 020c 	and.w	r2, r3, #12
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d1eb      	bne.n	8005e84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005eac:	4b25      	ldr	r3, [pc, #148]	; (8005f44 <HAL_RCC_ClockConfig+0x1b8>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0307 	and.w	r3, r3, #7
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d20c      	bcs.n	8005ed4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eba:	4b22      	ldr	r3, [pc, #136]	; (8005f44 <HAL_RCC_ClockConfig+0x1b8>)
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	b2d2      	uxtb	r2, r2
 8005ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ec2:	4b20      	ldr	r3, [pc, #128]	; (8005f44 <HAL_RCC_ClockConfig+0x1b8>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0307 	and.w	r3, r3, #7
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d001      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e032      	b.n	8005f3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0304 	and.w	r3, r3, #4
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d008      	beq.n	8005ef2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ee0:	4b19      	ldr	r3, [pc, #100]	; (8005f48 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	4916      	ldr	r1, [pc, #88]	; (8005f48 <HAL_RCC_ClockConfig+0x1bc>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0308 	and.w	r3, r3, #8
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d009      	beq.n	8005f12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005efe:	4b12      	ldr	r3, [pc, #72]	; (8005f48 <HAL_RCC_ClockConfig+0x1bc>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	490e      	ldr	r1, [pc, #56]	; (8005f48 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f12:	f000 f821 	bl	8005f58 <HAL_RCC_GetSysClockFreq>
 8005f16:	4602      	mov	r2, r0
 8005f18:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	091b      	lsrs	r3, r3, #4
 8005f1e:	f003 030f 	and.w	r3, r3, #15
 8005f22:	490a      	ldr	r1, [pc, #40]	; (8005f4c <HAL_RCC_ClockConfig+0x1c0>)
 8005f24:	5ccb      	ldrb	r3, [r1, r3]
 8005f26:	fa22 f303 	lsr.w	r3, r2, r3
 8005f2a:	4a09      	ldr	r2, [pc, #36]	; (8005f50 <HAL_RCC_ClockConfig+0x1c4>)
 8005f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f2e:	4b09      	ldr	r3, [pc, #36]	; (8005f54 <HAL_RCC_ClockConfig+0x1c8>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fc fcd0 	bl	80028d8 <HAL_InitTick>

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	40023c00 	.word	0x40023c00
 8005f48:	40023800 	.word	0x40023800
 8005f4c:	08016fe4 	.word	0x08016fe4
 8005f50:	20000234 	.word	0x20000234
 8005f54:	20000238 	.word	0x20000238

08005f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f5c:	b090      	sub	sp, #64	; 0x40
 8005f5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	637b      	str	r3, [r7, #52]	; 0x34
 8005f64:	2300      	movs	r3, #0
 8005f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f68:	2300      	movs	r3, #0
 8005f6a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f70:	4b59      	ldr	r3, [pc, #356]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f003 030c 	and.w	r3, r3, #12
 8005f78:	2b08      	cmp	r3, #8
 8005f7a:	d00d      	beq.n	8005f98 <HAL_RCC_GetSysClockFreq+0x40>
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	f200 80a1 	bhi.w	80060c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <HAL_RCC_GetSysClockFreq+0x34>
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d003      	beq.n	8005f92 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f8a:	e09b      	b.n	80060c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f8c:	4b53      	ldr	r3, [pc, #332]	; (80060dc <HAL_RCC_GetSysClockFreq+0x184>)
 8005f8e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005f90:	e09b      	b.n	80060ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f92:	4b53      	ldr	r3, [pc, #332]	; (80060e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005f96:	e098      	b.n	80060ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f98:	4b4f      	ldr	r3, [pc, #316]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fa0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fa2:	4b4d      	ldr	r3, [pc, #308]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d028      	beq.n	8006000 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fae:	4b4a      	ldr	r3, [pc, #296]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	099b      	lsrs	r3, r3, #6
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	623b      	str	r3, [r7, #32]
 8005fb8:	627a      	str	r2, [r7, #36]	; 0x24
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	4b47      	ldr	r3, [pc, #284]	; (80060e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005fc4:	fb03 f201 	mul.w	r2, r3, r1
 8005fc8:	2300      	movs	r3, #0
 8005fca:	fb00 f303 	mul.w	r3, r0, r3
 8005fce:	4413      	add	r3, r2
 8005fd0:	4a43      	ldr	r2, [pc, #268]	; (80060e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005fd2:	fba0 1202 	umull	r1, r2, r0, r2
 8005fd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fd8:	460a      	mov	r2, r1
 8005fda:	62ba      	str	r2, [r7, #40]	; 0x28
 8005fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fde:	4413      	add	r3, r2
 8005fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	61bb      	str	r3, [r7, #24]
 8005fe8:	61fa      	str	r2, [r7, #28]
 8005fea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005ff2:	f7fa f955 	bl	80002a0 <__aeabi_uldivmod>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ffe:	e053      	b.n	80060a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006000:	4b35      	ldr	r3, [pc, #212]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	099b      	lsrs	r3, r3, #6
 8006006:	2200      	movs	r2, #0
 8006008:	613b      	str	r3, [r7, #16]
 800600a:	617a      	str	r2, [r7, #20]
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006012:	f04f 0b00 	mov.w	fp, #0
 8006016:	4652      	mov	r2, sl
 8006018:	465b      	mov	r3, fp
 800601a:	f04f 0000 	mov.w	r0, #0
 800601e:	f04f 0100 	mov.w	r1, #0
 8006022:	0159      	lsls	r1, r3, #5
 8006024:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006028:	0150      	lsls	r0, r2, #5
 800602a:	4602      	mov	r2, r0
 800602c:	460b      	mov	r3, r1
 800602e:	ebb2 080a 	subs.w	r8, r2, sl
 8006032:	eb63 090b 	sbc.w	r9, r3, fp
 8006036:	f04f 0200 	mov.w	r2, #0
 800603a:	f04f 0300 	mov.w	r3, #0
 800603e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006042:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006046:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800604a:	ebb2 0408 	subs.w	r4, r2, r8
 800604e:	eb63 0509 	sbc.w	r5, r3, r9
 8006052:	f04f 0200 	mov.w	r2, #0
 8006056:	f04f 0300 	mov.w	r3, #0
 800605a:	00eb      	lsls	r3, r5, #3
 800605c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006060:	00e2      	lsls	r2, r4, #3
 8006062:	4614      	mov	r4, r2
 8006064:	461d      	mov	r5, r3
 8006066:	eb14 030a 	adds.w	r3, r4, sl
 800606a:	603b      	str	r3, [r7, #0]
 800606c:	eb45 030b 	adc.w	r3, r5, fp
 8006070:	607b      	str	r3, [r7, #4]
 8006072:	f04f 0200 	mov.w	r2, #0
 8006076:	f04f 0300 	mov.w	r3, #0
 800607a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800607e:	4629      	mov	r1, r5
 8006080:	028b      	lsls	r3, r1, #10
 8006082:	4621      	mov	r1, r4
 8006084:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006088:	4621      	mov	r1, r4
 800608a:	028a      	lsls	r2, r1, #10
 800608c:	4610      	mov	r0, r2
 800608e:	4619      	mov	r1, r3
 8006090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006092:	2200      	movs	r2, #0
 8006094:	60bb      	str	r3, [r7, #8]
 8006096:	60fa      	str	r2, [r7, #12]
 8006098:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800609c:	f7fa f900 	bl	80002a0 <__aeabi_uldivmod>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4613      	mov	r3, r2
 80060a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060a8:	4b0b      	ldr	r3, [pc, #44]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	0c1b      	lsrs	r3, r3, #16
 80060ae:	f003 0303 	and.w	r3, r3, #3
 80060b2:	3301      	adds	r3, #1
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80060b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80060c2:	e002      	b.n	80060ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060c4:	4b05      	ldr	r3, [pc, #20]	; (80060dc <HAL_RCC_GetSysClockFreq+0x184>)
 80060c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80060c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3740      	adds	r7, #64	; 0x40
 80060d0:	46bd      	mov	sp, r7
 80060d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060d6:	bf00      	nop
 80060d8:	40023800 	.word	0x40023800
 80060dc:	00f42400 	.word	0x00f42400
 80060e0:	017d7840 	.word	0x017d7840

080060e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060e8:	4b03      	ldr	r3, [pc, #12]	; (80060f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80060ea:	681b      	ldr	r3, [r3, #0]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	20000234 	.word	0x20000234

080060fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006100:	f7ff fff0 	bl	80060e4 <HAL_RCC_GetHCLKFreq>
 8006104:	4602      	mov	r2, r0
 8006106:	4b05      	ldr	r3, [pc, #20]	; (800611c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	0a9b      	lsrs	r3, r3, #10
 800610c:	f003 0307 	and.w	r3, r3, #7
 8006110:	4903      	ldr	r1, [pc, #12]	; (8006120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006112:	5ccb      	ldrb	r3, [r1, r3]
 8006114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006118:	4618      	mov	r0, r3
 800611a:	bd80      	pop	{r7, pc}
 800611c:	40023800 	.word	0x40023800
 8006120:	08016ff4 	.word	0x08016ff4

08006124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006128:	f7ff ffdc 	bl	80060e4 <HAL_RCC_GetHCLKFreq>
 800612c:	4602      	mov	r2, r0
 800612e:	4b05      	ldr	r3, [pc, #20]	; (8006144 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	0b5b      	lsrs	r3, r3, #13
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	4903      	ldr	r1, [pc, #12]	; (8006148 <HAL_RCC_GetPCLK2Freq+0x24>)
 800613a:	5ccb      	ldrb	r3, [r1, r3]
 800613c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006140:	4618      	mov	r0, r3
 8006142:	bd80      	pop	{r7, pc}
 8006144:	40023800 	.word	0x40023800
 8006148:	08016ff4 	.word	0x08016ff4

0800614c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	220f      	movs	r2, #15
 800615a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800615c:	4b12      	ldr	r3, [pc, #72]	; (80061a8 <HAL_RCC_GetClockConfig+0x5c>)
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f003 0203 	and.w	r2, r3, #3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006168:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <HAL_RCC_GetClockConfig+0x5c>)
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006174:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <HAL_RCC_GetClockConfig+0x5c>)
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006180:	4b09      	ldr	r3, [pc, #36]	; (80061a8 <HAL_RCC_GetClockConfig+0x5c>)
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	08db      	lsrs	r3, r3, #3
 8006186:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800618e:	4b07      	ldr	r3, [pc, #28]	; (80061ac <HAL_RCC_GetClockConfig+0x60>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0207 	and.w	r2, r3, #7
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	601a      	str	r2, [r3, #0]
}
 800619a:	bf00      	nop
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	40023800 	.word	0x40023800
 80061ac:	40023c00 	.word	0x40023c00

080061b0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80061bc:	2300      	movs	r3, #0
 80061be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d105      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d035      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80061d8:	4b62      	ldr	r3, [pc, #392]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80061da:	2200      	movs	r2, #0
 80061dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061de:	f7fc fe37 	bl	8002e50 <HAL_GetTick>
 80061e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061e4:	e008      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061e6:	f7fc fe33 	bl	8002e50 <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d901      	bls.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e0b0      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061f8:	4b5b      	ldr	r3, [pc, #364]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1f0      	bne.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	019a      	lsls	r2, r3, #6
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	071b      	lsls	r3, r3, #28
 8006210:	4955      	ldr	r1, [pc, #340]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006212:	4313      	orrs	r3, r2
 8006214:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006218:	4b52      	ldr	r3, [pc, #328]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800621a:	2201      	movs	r2, #1
 800621c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800621e:	f7fc fe17 	bl	8002e50 <HAL_GetTick>
 8006222:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006224:	e008      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006226:	f7fc fe13 	bl	8002e50 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d901      	bls.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e090      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006238:	4b4b      	ldr	r3, [pc, #300]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d0f0      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 8083 	beq.w	8006358 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006252:	2300      	movs	r3, #0
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	4b44      	ldr	r3, [pc, #272]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	4a43      	ldr	r2, [pc, #268]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800625c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006260:	6413      	str	r3, [r2, #64]	; 0x40
 8006262:	4b41      	ldr	r3, [pc, #260]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800626e:	4b3f      	ldr	r3, [pc, #252]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a3e      	ldr	r2, [pc, #248]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006278:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800627a:	f7fc fde9 	bl	8002e50 <HAL_GetTick>
 800627e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006280:	e008      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006282:	f7fc fde5 	bl	8002e50 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	2b02      	cmp	r3, #2
 800628e:	d901      	bls.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e062      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006294:	4b35      	ldr	r3, [pc, #212]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800629c:	2b00      	cmp	r3, #0
 800629e:	d0f0      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062a0:	4b31      	ldr	r3, [pc, #196]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062a8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d02f      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d028      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062be:	4b2a      	ldr	r3, [pc, #168]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062c8:	4b29      	ldr	r3, [pc, #164]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062ce:	4b28      	ldr	r3, [pc, #160]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80062d4:	4a24      	ldr	r2, [pc, #144]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80062da:	4b23      	ldr	r3, [pc, #140]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d114      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80062e6:	f7fc fdb3 	bl	8002e50 <HAL_GetTick>
 80062ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ec:	e00a      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062ee:	f7fc fdaf 	bl	8002e50 <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d901      	bls.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e02a      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006304:	4b18      	ldr	r3, [pc, #96]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0ee      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006318:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800631c:	d10d      	bne.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800631e:	4b12      	ldr	r3, [pc, #72]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800632e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006332:	490d      	ldr	r1, [pc, #52]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006334:	4313      	orrs	r3, r2
 8006336:	608b      	str	r3, [r1, #8]
 8006338:	e005      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800633a:	4b0b      	ldr	r3, [pc, #44]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	4a0a      	ldr	r2, [pc, #40]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006340:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006344:	6093      	str	r3, [r2, #8]
 8006346:	4b08      	ldr	r3, [pc, #32]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006348:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006352:	4905      	ldr	r1, [pc, #20]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006354:	4313      	orrs	r3, r2
 8006356:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	42470068 	.word	0x42470068
 8006368:	40023800 	.word	0x40023800
 800636c:	40007000 	.word	0x40007000
 8006370:	42470e40 	.word	0x42470e40

08006374 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e066      	b.n	8006458 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	7f5b      	ldrb	r3, [r3, #29]
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d105      	bne.n	80063a0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7fc f97a 	bl	8002694 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	22ca      	movs	r2, #202	; 0xca
 80063ac:	625a      	str	r2, [r3, #36]	; 0x24
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2253      	movs	r2, #83	; 0x53
 80063b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fa45 	bl	8006846 <RTC_EnterInitMode>
 80063bc:	4603      	mov	r3, r0
 80063be:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d12c      	bne.n	8006420 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	6812      	ldr	r2, [r2, #0]
 80063d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80063d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063d8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6899      	ldr	r1, [r3, #8]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	431a      	orrs	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	431a      	orrs	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	68d2      	ldr	r2, [r2, #12]
 8006400:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6919      	ldr	r1, [r3, #16]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	041a      	lsls	r2, r3, #16
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fa4c 	bl	80068b4 <RTC_ExitInitMode>
 800641c:	4603      	mov	r3, r0
 800641e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006420:	7bfb      	ldrb	r3, [r7, #15]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d113      	bne.n	800644e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006434:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	699a      	ldr	r2, [r3, #24]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	22ff      	movs	r2, #255	; 0xff
 8006454:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006456:	7bfb      	ldrb	r3, [r7, #15]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006460:	b590      	push	{r4, r7, lr}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800646c:	2300      	movs	r3, #0
 800646e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	7f1b      	ldrb	r3, [r3, #28]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_RTC_SetTime+0x1c>
 8006478:	2302      	movs	r3, #2
 800647a:	e087      	b.n	800658c <HAL_RTC_SetTime+0x12c>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2201      	movs	r2, #1
 8006480:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2202      	movs	r2, #2
 8006486:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d126      	bne.n	80064dc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006498:	2b00      	cmp	r3, #0
 800649a:	d102      	bne.n	80064a2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2200      	movs	r2, #0
 80064a0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 fa29 	bl	80068fe <RTC_ByteToBcd2>
 80064ac:	4603      	mov	r3, r0
 80064ae:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	785b      	ldrb	r3, [r3, #1]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 fa22 	bl	80068fe <RTC_ByteToBcd2>
 80064ba:	4603      	mov	r3, r0
 80064bc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80064be:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	789b      	ldrb	r3, [r3, #2]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 fa1a 	bl	80068fe <RTC_ByteToBcd2>
 80064ca:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80064cc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	78db      	ldrb	r3, [r3, #3]
 80064d4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80064d6:	4313      	orrs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]
 80064da:	e018      	b.n	800650e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d102      	bne.n	80064f0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2200      	movs	r2, #0
 80064ee:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	785b      	ldrb	r3, [r3, #1]
 80064fa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80064fc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006502:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	78db      	ldrb	r3, [r3, #3]
 8006508:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800650a:	4313      	orrs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	22ca      	movs	r2, #202	; 0xca
 8006514:	625a      	str	r2, [r3, #36]	; 0x24
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2253      	movs	r2, #83	; 0x53
 800651c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 f991 	bl	8006846 <RTC_EnterInitMode>
 8006524:	4603      	mov	r3, r0
 8006526:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006528:	7cfb      	ldrb	r3, [r7, #19]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d120      	bne.n	8006570 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006538:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800653c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800654c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6899      	ldr	r1, [r3, #8]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	68da      	ldr	r2, [r3, #12]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	431a      	orrs	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 f9a4 	bl	80068b4 <RTC_ExitInitMode>
 800656c:	4603      	mov	r3, r0
 800656e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006570:	7cfb      	ldrb	r3, [r7, #19]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d102      	bne.n	800657c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2201      	movs	r2, #1
 800657a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	22ff      	movs	r2, #255	; 0xff
 8006582:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	771a      	strb	r2, [r3, #28]

  return status;
 800658a:	7cfb      	ldrb	r3, [r7, #19]
}
 800658c:	4618      	mov	r0, r3
 800658e:	371c      	adds	r7, #28
 8006590:	46bd      	mov	sp, r7
 8006592:	bd90      	pop	{r4, r7, pc}

08006594 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80065c6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80065ca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	0c1b      	lsrs	r3, r3, #16
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	0a1b      	lsrs	r3, r3, #8
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	0d9b      	lsrs	r3, r3, #22
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	b2da      	uxtb	r2, r3
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d11a      	bne.n	8006646 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	4618      	mov	r0, r3
 8006616:	f000 f98f 	bl	8006938 <RTC_Bcd2ToByte>
 800661a:	4603      	mov	r3, r0
 800661c:	461a      	mov	r2, r3
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	785b      	ldrb	r3, [r3, #1]
 8006626:	4618      	mov	r0, r3
 8006628:	f000 f986 	bl	8006938 <RTC_Bcd2ToByte>
 800662c:	4603      	mov	r3, r0
 800662e:	461a      	mov	r2, r3
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	789b      	ldrb	r3, [r3, #2]
 8006638:	4618      	mov	r0, r3
 800663a:	f000 f97d 	bl	8006938 <RTC_Bcd2ToByte>
 800663e:	4603      	mov	r3, r0
 8006640:	461a      	mov	r2, r3
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006650:	b590      	push	{r4, r7, lr}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	7f1b      	ldrb	r3, [r3, #28]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d101      	bne.n	800666c <HAL_RTC_SetDate+0x1c>
 8006668:	2302      	movs	r3, #2
 800666a:	e071      	b.n	8006750 <HAL_RTC_SetDate+0x100>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2201      	movs	r2, #1
 8006670:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2202      	movs	r2, #2
 8006676:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10e      	bne.n	800669c <HAL_RTC_SetDate+0x4c>
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	785b      	ldrb	r3, [r3, #1]
 8006682:	f003 0310 	and.w	r3, r3, #16
 8006686:	2b00      	cmp	r3, #0
 8006688:	d008      	beq.n	800669c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	785b      	ldrb	r3, [r3, #1]
 800668e:	f023 0310 	bic.w	r3, r3, #16
 8006692:	b2db      	uxtb	r3, r3
 8006694:	330a      	adds	r3, #10
 8006696:	b2da      	uxtb	r2, r3
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d11c      	bne.n	80066dc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	78db      	ldrb	r3, [r3, #3]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 f929 	bl	80068fe <RTC_ByteToBcd2>
 80066ac:	4603      	mov	r3, r0
 80066ae:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	785b      	ldrb	r3, [r3, #1]
 80066b4:	4618      	mov	r0, r3
 80066b6:	f000 f922 	bl	80068fe <RTC_ByteToBcd2>
 80066ba:	4603      	mov	r3, r0
 80066bc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80066be:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	789b      	ldrb	r3, [r3, #2]
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 f91a 	bl	80068fe <RTC_ByteToBcd2>
 80066ca:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80066cc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80066d6:	4313      	orrs	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]
 80066da:	e00e      	b.n	80066fa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	78db      	ldrb	r3, [r3, #3]
 80066e0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	785b      	ldrb	r3, [r3, #1]
 80066e6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80066e8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80066ee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80066f6:	4313      	orrs	r3, r2
 80066f8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	22ca      	movs	r2, #202	; 0xca
 8006700:	625a      	str	r2, [r3, #36]	; 0x24
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2253      	movs	r2, #83	; 0x53
 8006708:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f000 f89b 	bl	8006846 <RTC_EnterInitMode>
 8006710:	4603      	mov	r3, r0
 8006712:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006714:	7cfb      	ldrb	r3, [r7, #19]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10c      	bne.n	8006734 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006724:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006728:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 f8c2 	bl	80068b4 <RTC_ExitInitMode>
 8006730:	4603      	mov	r3, r0
 8006732:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006734:	7cfb      	ldrb	r3, [r7, #19]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d102      	bne.n	8006740 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2201      	movs	r2, #1
 800673e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	22ff      	movs	r2, #255	; 0xff
 8006746:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	771a      	strb	r2, [r3, #28]

  return status;
 800674e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006750:	4618      	mov	r0, r3
 8006752:	371c      	adds	r7, #28
 8006754:	46bd      	mov	sp, r7
 8006756:	bd90      	pop	{r4, r7, pc}

08006758 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006764:	2300      	movs	r3, #0
 8006766:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006772:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006776:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	0c1b      	lsrs	r3, r3, #16
 800677c:	b2da      	uxtb	r2, r3
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	0a1b      	lsrs	r3, r3, #8
 8006786:	b2db      	uxtb	r3, r3
 8006788:	f003 031f 	and.w	r3, r3, #31
 800678c:	b2da      	uxtb	r2, r3
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	b2db      	uxtb	r3, r3
 8006796:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800679a:	b2da      	uxtb	r2, r3
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	0b5b      	lsrs	r3, r3, #13
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	f003 0307 	and.w	r3, r3, #7
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d11a      	bne.n	80067ec <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	78db      	ldrb	r3, [r3, #3]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 f8bc 	bl	8006938 <RTC_Bcd2ToByte>
 80067c0:	4603      	mov	r3, r0
 80067c2:	461a      	mov	r2, r3
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	785b      	ldrb	r3, [r3, #1]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 f8b3 	bl	8006938 <RTC_Bcd2ToByte>
 80067d2:	4603      	mov	r3, r0
 80067d4:	461a      	mov	r2, r3
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	789b      	ldrb	r3, [r3, #2]
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 f8aa 	bl	8006938 <RTC_Bcd2ToByte>
 80067e4:	4603      	mov	r3, r0
 80067e6:	461a      	mov	r2, r3
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006810:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006812:	f7fc fb1d 	bl	8002e50 <HAL_GetTick>
 8006816:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006818:	e009      	b.n	800682e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800681a:	f7fc fb19 	bl	8002e50 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006828:	d901      	bls.n	800682e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e007      	b.n	800683e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f003 0320 	and.w	r3, r3, #32
 8006838:	2b00      	cmp	r3, #0
 800683a:	d0ee      	beq.n	800681a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006860:	2b00      	cmp	r3, #0
 8006862:	d122      	bne.n	80068aa <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68da      	ldr	r2, [r3, #12]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006872:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006874:	f7fc faec 	bl	8002e50 <HAL_GetTick>
 8006878:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800687a:	e00c      	b.n	8006896 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800687c:	f7fc fae8 	bl	8002e50 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800688a:	d904      	bls.n	8006896 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2204      	movs	r2, #4
 8006890:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d102      	bne.n	80068aa <RTC_EnterInitMode+0x64>
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d1e8      	bne.n	800687c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068bc:	2300      	movs	r3, #0
 80068be:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068ce:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f003 0320 	and.w	r3, r3, #32
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10a      	bne.n	80068f4 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7ff ff89 	bl	80067f6 <HAL_RTC_WaitForSynchro>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d004      	beq.n	80068f4 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2204      	movs	r2, #4
 80068ee:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80068fe:	b480      	push	{r7}
 8006900:	b085      	sub	sp, #20
 8006902:	af00      	add	r7, sp, #0
 8006904:	4603      	mov	r3, r0
 8006906:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006908:	2300      	movs	r3, #0
 800690a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800690c:	e005      	b.n	800691a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800690e:	7bfb      	ldrb	r3, [r7, #15]
 8006910:	3301      	adds	r3, #1
 8006912:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006914:	79fb      	ldrb	r3, [r7, #7]
 8006916:	3b0a      	subs	r3, #10
 8006918:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800691a:	79fb      	ldrb	r3, [r7, #7]
 800691c:	2b09      	cmp	r3, #9
 800691e:	d8f6      	bhi.n	800690e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006920:	7bfb      	ldrb	r3, [r7, #15]
 8006922:	011b      	lsls	r3, r3, #4
 8006924:	b2da      	uxtb	r2, r3
 8006926:	79fb      	ldrb	r3, [r7, #7]
 8006928:	4313      	orrs	r3, r2
 800692a:	b2db      	uxtb	r3, r3
}
 800692c:	4618      	mov	r0, r3
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	4603      	mov	r3, r0
 8006940:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006946:	79fb      	ldrb	r3, [r7, #7]
 8006948:	091b      	lsrs	r3, r3, #4
 800694a:	b2db      	uxtb	r3, r3
 800694c:	461a      	mov	r2, r3
 800694e:	0092      	lsls	r2, r2, #2
 8006950:	4413      	add	r3, r2
 8006952:	005b      	lsls	r3, r3, #1
 8006954:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006956:	79fb      	ldrb	r3, [r7, #7]
 8006958:	f003 030f 	and.w	r3, r3, #15
 800695c:	b2da      	uxtb	r2, r3
 800695e:	7bfb      	ldrb	r3, [r7, #15]
 8006960:	4413      	add	r3, r2
 8006962:	b2db      	uxtb	r3, r3
}
 8006964:	4618      	mov	r0, r3
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d101      	bne.n	8006982 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e07b      	b.n	8006a7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006986:	2b00      	cmp	r3, #0
 8006988:	d108      	bne.n	800699c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006992:	d009      	beq.n	80069a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	61da      	str	r2, [r3, #28]
 800699a:	e005      	b.n	80069a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d106      	bne.n	80069c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7fb fe90 	bl	80026e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80069f0:	431a      	orrs	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069fa:	431a      	orrs	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	431a      	orrs	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a22:	431a      	orrs	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a2c:	ea42 0103 	orr.w	r1, r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	0c1b      	lsrs	r3, r3, #16
 8006a46:	f003 0104 	and.w	r1, r3, #4
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	f003 0210 	and.w	r2, r3, #16
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	69da      	ldr	r2, [r3, #28]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b08c      	sub	sp, #48	; 0x30
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	60f8      	str	r0, [r7, #12]
 8006a8a:	60b9      	str	r1, [r7, #8]
 8006a8c:	607a      	str	r2, [r7, #4]
 8006a8e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a90:	2301      	movs	r3, #1
 8006a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d101      	bne.n	8006aa8 <HAL_SPI_TransmitReceive+0x26>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e18a      	b.n	8006dbe <HAL_SPI_TransmitReceive+0x33c>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ab0:	f7fc f9ce 	bl	8002e50 <HAL_GetTick>
 8006ab4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006abc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006ac6:	887b      	ldrh	r3, [r7, #2]
 8006ac8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006aca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d00f      	beq.n	8006af2 <HAL_SPI_TransmitReceive+0x70>
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ad8:	d107      	bne.n	8006aea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d103      	bne.n	8006aea <HAL_SPI_TransmitReceive+0x68>
 8006ae2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ae6:	2b04      	cmp	r3, #4
 8006ae8:	d003      	beq.n	8006af2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006aea:	2302      	movs	r3, #2
 8006aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006af0:	e15b      	b.n	8006daa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d005      	beq.n	8006b04 <HAL_SPI_TransmitReceive+0x82>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <HAL_SPI_TransmitReceive+0x82>
 8006afe:	887b      	ldrh	r3, [r7, #2]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d103      	bne.n	8006b0c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006b0a:	e14e      	b.n	8006daa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	d003      	beq.n	8006b20 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2205      	movs	r2, #5
 8006b1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	887a      	ldrh	r2, [r7, #2]
 8006b30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	887a      	ldrh	r2, [r7, #2]
 8006b36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	887a      	ldrh	r2, [r7, #2]
 8006b42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	887a      	ldrh	r2, [r7, #2]
 8006b48:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b60:	2b40      	cmp	r3, #64	; 0x40
 8006b62:	d007      	beq.n	8006b74 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b7c:	d178      	bne.n	8006c70 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <HAL_SPI_TransmitReceive+0x10a>
 8006b86:	8b7b      	ldrh	r3, [r7, #26]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d166      	bne.n	8006c5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b90:	881a      	ldrh	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9c:	1c9a      	adds	r2, r3, #2
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bb0:	e053      	b.n	8006c5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d11b      	bne.n	8006bf8 <HAL_SPI_TransmitReceive+0x176>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d016      	beq.n	8006bf8 <HAL_SPI_TransmitReceive+0x176>
 8006bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d113      	bne.n	8006bf8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd4:	881a      	ldrh	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be0:	1c9a      	adds	r2, r3, #2
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	3b01      	subs	r3, #1
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d119      	bne.n	8006c3a <HAL_SPI_TransmitReceive+0x1b8>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d014      	beq.n	8006c3a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68da      	ldr	r2, [r3, #12]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1a:	b292      	uxth	r2, r2
 8006c1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c22:	1c9a      	adds	r2, r3, #2
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c36:	2301      	movs	r3, #1
 8006c38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c3a:	f7fc f909 	bl	8002e50 <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d807      	bhi.n	8006c5a <HAL_SPI_TransmitReceive+0x1d8>
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c50:	d003      	beq.n	8006c5a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006c58:	e0a7      	b.n	8006daa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1a6      	bne.n	8006bb2 <HAL_SPI_TransmitReceive+0x130>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1a1      	bne.n	8006bb2 <HAL_SPI_TransmitReceive+0x130>
 8006c6e:	e07c      	b.n	8006d6a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <HAL_SPI_TransmitReceive+0x1fc>
 8006c78:	8b7b      	ldrh	r3, [r7, #26]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d16b      	bne.n	8006d56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	330c      	adds	r3, #12
 8006c88:	7812      	ldrb	r2, [r2, #0]
 8006c8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ca4:	e057      	b.n	8006d56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f003 0302 	and.w	r3, r3, #2
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d11c      	bne.n	8006cee <HAL_SPI_TransmitReceive+0x26c>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d017      	beq.n	8006cee <HAL_SPI_TransmitReceive+0x26c>
 8006cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d114      	bne.n	8006cee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	330c      	adds	r3, #12
 8006cce:	7812      	ldrb	r2, [r2, #0]
 8006cd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd6:	1c5a      	adds	r2, r3, #1
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d119      	bne.n	8006d30 <HAL_SPI_TransmitReceive+0x2ae>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d014      	beq.n	8006d30 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68da      	ldr	r2, [r3, #12]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d10:	b2d2      	uxtb	r2, r2
 8006d12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	3b01      	subs	r3, #1
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d30:	f7fc f88e 	bl	8002e50 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d803      	bhi.n	8006d48 <HAL_SPI_TransmitReceive+0x2c6>
 8006d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d46:	d102      	bne.n	8006d4e <HAL_SPI_TransmitReceive+0x2cc>
 8006d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d103      	bne.n	8006d56 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006d54:	e029      	b.n	8006daa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1a2      	bne.n	8006ca6 <HAL_SPI_TransmitReceive+0x224>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d19d      	bne.n	8006ca6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f000 f9d0 	bl	8007114 <SPI_EndRxTxTransaction>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d006      	beq.n	8006d88 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2220      	movs	r2, #32
 8006d84:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006d86:	e010      	b.n	8006daa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10b      	bne.n	8006da8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d90:	2300      	movs	r3, #0
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	617b      	str	r3, [r7, #20]
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	e000      	b.n	8006daa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006da8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006dba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3730      	adds	r7, #48	; 0x30
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
	...

08006dc8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b088      	sub	sp, #32
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	099b      	lsrs	r3, r3, #6
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10f      	bne.n	8006e0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00a      	beq.n	8006e0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	099b      	lsrs	r3, r3, #6
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d004      	beq.n	8006e0c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	4798      	blx	r3
    return;
 8006e0a:	e0d7      	b.n	8006fbc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	085b      	lsrs	r3, r3, #1
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00a      	beq.n	8006e2e <HAL_SPI_IRQHandler+0x66>
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	09db      	lsrs	r3, r3, #7
 8006e1c:	f003 0301 	and.w	r3, r3, #1
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d004      	beq.n	8006e2e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	4798      	blx	r3
    return;
 8006e2c:	e0c6      	b.n	8006fbc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	095b      	lsrs	r3, r3, #5
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10c      	bne.n	8006e54 <HAL_SPI_IRQHandler+0x8c>
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	099b      	lsrs	r3, r3, #6
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d106      	bne.n	8006e54 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	0a1b      	lsrs	r3, r3, #8
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 80b4 	beq.w	8006fbc <HAL_SPI_IRQHandler+0x1f4>
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	095b      	lsrs	r3, r3, #5
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 80ad 	beq.w	8006fbc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	099b      	lsrs	r3, r3, #6
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d023      	beq.n	8006eb6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d011      	beq.n	8006e9e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7e:	f043 0204 	orr.w	r2, r3, #4
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e86:	2300      	movs	r3, #0
 8006e88:	617b      	str	r3, [r7, #20]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	617b      	str	r3, [r7, #20]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	617b      	str	r3, [r7, #20]
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	e00b      	b.n	8006eb6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	613b      	str	r3, [r7, #16]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	613b      	str	r3, [r7, #16]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	613b      	str	r3, [r7, #16]
 8006eb2:	693b      	ldr	r3, [r7, #16]
        return;
 8006eb4:	e082      	b.n	8006fbc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	095b      	lsrs	r3, r3, #5
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d014      	beq.n	8006eec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec6:	f043 0201 	orr.w	r2, r3, #1
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006ece:	2300      	movs	r3, #0
 8006ed0:	60fb      	str	r3, [r7, #12]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	0a1b      	lsrs	r3, r3, #8
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00c      	beq.n	8006f12 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efc:	f043 0208 	orr.w	r2, r3, #8
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006f04:	2300      	movs	r3, #0
 8006f06:	60bb      	str	r3, [r7, #8]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	60bb      	str	r3, [r7, #8]
 8006f10:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d04f      	beq.n	8006fba <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f28:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d104      	bne.n	8006f46 <HAL_SPI_IRQHandler+0x17e>
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d034      	beq.n	8006fb0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 0203 	bic.w	r2, r2, #3
 8006f54:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d011      	beq.n	8006f82 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f62:	4a18      	ldr	r2, [pc, #96]	; (8006fc4 <HAL_SPI_IRQHandler+0x1fc>)
 8006f64:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fc f9a0 	bl	80032b0 <HAL_DMA_Abort_IT>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d005      	beq.n	8006f82 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d016      	beq.n	8006fb8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f8e:	4a0d      	ldr	r2, [pc, #52]	; (8006fc4 <HAL_SPI_IRQHandler+0x1fc>)
 8006f90:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7fc f98a 	bl	80032b0 <HAL_DMA_Abort_IT>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00a      	beq.n	8006fb8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006fae:	e003      	b.n	8006fb8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f809 	bl	8006fc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006fb6:	e000      	b.n	8006fba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006fb8:	bf00      	nop
    return;
 8006fba:	bf00      	nop
  }
}
 8006fbc:	3720      	adds	r7, #32
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	08006fdd 	.word	0x08006fdd

08006fc8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f7ff ffe6 	bl	8006fc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ffc:	bf00      	nop
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b088      	sub	sp, #32
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	603b      	str	r3, [r7, #0]
 8007010:	4613      	mov	r3, r2
 8007012:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007014:	f7fb ff1c 	bl	8002e50 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701c:	1a9b      	subs	r3, r3, r2
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	4413      	add	r3, r2
 8007022:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007024:	f7fb ff14 	bl	8002e50 <HAL_GetTick>
 8007028:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800702a:	4b39      	ldr	r3, [pc, #228]	; (8007110 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	015b      	lsls	r3, r3, #5
 8007030:	0d1b      	lsrs	r3, r3, #20
 8007032:	69fa      	ldr	r2, [r7, #28]
 8007034:	fb02 f303 	mul.w	r3, r2, r3
 8007038:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800703a:	e054      	b.n	80070e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007042:	d050      	beq.n	80070e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007044:	f7fb ff04 	bl	8002e50 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	69fa      	ldr	r2, [r7, #28]
 8007050:	429a      	cmp	r2, r3
 8007052:	d902      	bls.n	800705a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d13d      	bne.n	80070d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007068:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007072:	d111      	bne.n	8007098 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800707c:	d004      	beq.n	8007088 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007086:	d107      	bne.n	8007098 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007096:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070a0:	d10f      	bne.n	80070c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070b0:	601a      	str	r2, [r3, #0]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e017      	b.n	8007106 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d101      	bne.n	80070e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80070dc:	2300      	movs	r3, #0
 80070de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689a      	ldr	r2, [r3, #8]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	4013      	ands	r3, r2
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	bf0c      	ite	eq
 80070f6:	2301      	moveq	r3, #1
 80070f8:	2300      	movne	r3, #0
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	461a      	mov	r2, r3
 80070fe:	79fb      	ldrb	r3, [r7, #7]
 8007100:	429a      	cmp	r2, r3
 8007102:	d19b      	bne.n	800703c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3720      	adds	r7, #32
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	20000234 	.word	0x20000234

08007114 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b088      	sub	sp, #32
 8007118:	af02      	add	r7, sp, #8
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007120:	4b1b      	ldr	r3, [pc, #108]	; (8007190 <SPI_EndRxTxTransaction+0x7c>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a1b      	ldr	r2, [pc, #108]	; (8007194 <SPI_EndRxTxTransaction+0x80>)
 8007126:	fba2 2303 	umull	r2, r3, r2, r3
 800712a:	0d5b      	lsrs	r3, r3, #21
 800712c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007130:	fb02 f303 	mul.w	r3, r2, r3
 8007134:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800713e:	d112      	bne.n	8007166 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2200      	movs	r2, #0
 8007148:	2180      	movs	r1, #128	; 0x80
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f7ff ff5a 	bl	8007004 <SPI_WaitFlagStateUntilTimeout>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d016      	beq.n	8007184 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800715a:	f043 0220 	orr.w	r2, r3, #32
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e00f      	b.n	8007186 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00a      	beq.n	8007182 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	3b01      	subs	r3, #1
 8007170:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717c:	2b80      	cmp	r3, #128	; 0x80
 800717e:	d0f2      	beq.n	8007166 <SPI_EndRxTxTransaction+0x52>
 8007180:	e000      	b.n	8007184 <SPI_EndRxTxTransaction+0x70>
        break;
 8007182:	bf00      	nop
  }

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	20000234 	.word	0x20000234
 8007194:	165e9f81 	.word	0x165e9f81

08007198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e041      	b.n	800722e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d106      	bne.n	80071c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7fb fb14 	bl	80027ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2202      	movs	r2, #2
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	3304      	adds	r3, #4
 80071d4:	4619      	mov	r1, r3
 80071d6:	4610      	mov	r0, r2
 80071d8:	f000 fa96 	bl	8007708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
	...

08007238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b01      	cmp	r3, #1
 800724a:	d001      	beq.n	8007250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e04e      	b.n	80072ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2202      	movs	r2, #2
 8007254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68da      	ldr	r2, [r3, #12]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f042 0201 	orr.w	r2, r2, #1
 8007266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a23      	ldr	r2, [pc, #140]	; (80072fc <HAL_TIM_Base_Start_IT+0xc4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d022      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x80>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800727a:	d01d      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x80>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a1f      	ldr	r2, [pc, #124]	; (8007300 <HAL_TIM_Base_Start_IT+0xc8>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d018      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x80>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a1e      	ldr	r2, [pc, #120]	; (8007304 <HAL_TIM_Base_Start_IT+0xcc>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d013      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x80>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a1c      	ldr	r2, [pc, #112]	; (8007308 <HAL_TIM_Base_Start_IT+0xd0>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d00e      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x80>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a1b      	ldr	r2, [pc, #108]	; (800730c <HAL_TIM_Base_Start_IT+0xd4>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d009      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x80>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a19      	ldr	r2, [pc, #100]	; (8007310 <HAL_TIM_Base_Start_IT+0xd8>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d004      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x80>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a18      	ldr	r2, [pc, #96]	; (8007314 <HAL_TIM_Base_Start_IT+0xdc>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d111      	bne.n	80072dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f003 0307 	and.w	r3, r3, #7
 80072c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2b06      	cmp	r3, #6
 80072c8:	d010      	beq.n	80072ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f042 0201 	orr.w	r2, r2, #1
 80072d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072da:	e007      	b.n	80072ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 0201 	orr.w	r2, r2, #1
 80072ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	40010000 	.word	0x40010000
 8007300:	40000400 	.word	0x40000400
 8007304:	40000800 	.word	0x40000800
 8007308:	40000c00 	.word	0x40000c00
 800730c:	40010400 	.word	0x40010400
 8007310:	40014000 	.word	0x40014000
 8007314:	40001800 	.word	0x40001800

08007318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	f003 0302 	and.w	r3, r3, #2
 800732a:	2b02      	cmp	r3, #2
 800732c:	d122      	bne.n	8007374 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b02      	cmp	r3, #2
 800733a:	d11b      	bne.n	8007374 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f06f 0202 	mvn.w	r2, #2
 8007344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2201      	movs	r2, #1
 800734a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	f003 0303 	and.w	r3, r3, #3
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f9b5 	bl	80076ca <HAL_TIM_IC_CaptureCallback>
 8007360:	e005      	b.n	800736e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f9a7 	bl	80076b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f9b8 	bl	80076de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	f003 0304 	and.w	r3, r3, #4
 800737e:	2b04      	cmp	r3, #4
 8007380:	d122      	bne.n	80073c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	f003 0304 	and.w	r3, r3, #4
 800738c:	2b04      	cmp	r3, #4
 800738e:	d11b      	bne.n	80073c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f06f 0204 	mvn.w	r2, #4
 8007398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2202      	movs	r2, #2
 800739e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d003      	beq.n	80073b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f98b 	bl	80076ca <HAL_TIM_IC_CaptureCallback>
 80073b4:	e005      	b.n	80073c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f97d 	bl	80076b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f98e 	bl	80076de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	f003 0308 	and.w	r3, r3, #8
 80073d2:	2b08      	cmp	r3, #8
 80073d4:	d122      	bne.n	800741c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f003 0308 	and.w	r3, r3, #8
 80073e0:	2b08      	cmp	r3, #8
 80073e2:	d11b      	bne.n	800741c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f06f 0208 	mvn.w	r2, #8
 80073ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2204      	movs	r2, #4
 80073f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	f003 0303 	and.w	r3, r3, #3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f961 	bl	80076ca <HAL_TIM_IC_CaptureCallback>
 8007408:	e005      	b.n	8007416 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f953 	bl	80076b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f964 	bl	80076de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	f003 0310 	and.w	r3, r3, #16
 8007426:	2b10      	cmp	r3, #16
 8007428:	d122      	bne.n	8007470 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f003 0310 	and.w	r3, r3, #16
 8007434:	2b10      	cmp	r3, #16
 8007436:	d11b      	bne.n	8007470 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f06f 0210 	mvn.w	r2, #16
 8007440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2208      	movs	r2, #8
 8007446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f937 	bl	80076ca <HAL_TIM_IC_CaptureCallback>
 800745c:	e005      	b.n	800746a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f929 	bl	80076b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f93a 	bl	80076de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b01      	cmp	r3, #1
 800747c:	d10e      	bne.n	800749c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f003 0301 	and.w	r3, r3, #1
 8007488:	2b01      	cmp	r3, #1
 800748a:	d107      	bne.n	800749c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f06f 0201 	mvn.w	r2, #1
 8007494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7fa fcf0 	bl	8001e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a6:	2b80      	cmp	r3, #128	; 0x80
 80074a8:	d10e      	bne.n	80074c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b4:	2b80      	cmp	r3, #128	; 0x80
 80074b6:	d107      	bne.n	80074c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fae0 	bl	8007a88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d2:	2b40      	cmp	r3, #64	; 0x40
 80074d4:	d10e      	bne.n	80074f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e0:	2b40      	cmp	r3, #64	; 0x40
 80074e2:	d107      	bne.n	80074f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f8ff 	bl	80076f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	f003 0320 	and.w	r3, r3, #32
 80074fe:	2b20      	cmp	r3, #32
 8007500:	d10e      	bne.n	8007520 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	f003 0320 	and.w	r3, r3, #32
 800750c:	2b20      	cmp	r3, #32
 800750e:	d107      	bne.n	8007520 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f06f 0220 	mvn.w	r2, #32
 8007518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 faaa 	bl	8007a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007520:	bf00      	nop
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800753c:	2b01      	cmp	r3, #1
 800753e:	d101      	bne.n	8007544 <HAL_TIM_ConfigClockSource+0x1c>
 8007540:	2302      	movs	r3, #2
 8007542:	e0b4      	b.n	80076ae <HAL_TIM_ConfigClockSource+0x186>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2202      	movs	r2, #2
 8007550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800756a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800757c:	d03e      	beq.n	80075fc <HAL_TIM_ConfigClockSource+0xd4>
 800757e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007582:	f200 8087 	bhi.w	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 8007586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800758a:	f000 8086 	beq.w	800769a <HAL_TIM_ConfigClockSource+0x172>
 800758e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007592:	d87f      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 8007594:	2b70      	cmp	r3, #112	; 0x70
 8007596:	d01a      	beq.n	80075ce <HAL_TIM_ConfigClockSource+0xa6>
 8007598:	2b70      	cmp	r3, #112	; 0x70
 800759a:	d87b      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 800759c:	2b60      	cmp	r3, #96	; 0x60
 800759e:	d050      	beq.n	8007642 <HAL_TIM_ConfigClockSource+0x11a>
 80075a0:	2b60      	cmp	r3, #96	; 0x60
 80075a2:	d877      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075a4:	2b50      	cmp	r3, #80	; 0x50
 80075a6:	d03c      	beq.n	8007622 <HAL_TIM_ConfigClockSource+0xfa>
 80075a8:	2b50      	cmp	r3, #80	; 0x50
 80075aa:	d873      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075ac:	2b40      	cmp	r3, #64	; 0x40
 80075ae:	d058      	beq.n	8007662 <HAL_TIM_ConfigClockSource+0x13a>
 80075b0:	2b40      	cmp	r3, #64	; 0x40
 80075b2:	d86f      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075b4:	2b30      	cmp	r3, #48	; 0x30
 80075b6:	d064      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x15a>
 80075b8:	2b30      	cmp	r3, #48	; 0x30
 80075ba:	d86b      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075bc:	2b20      	cmp	r3, #32
 80075be:	d060      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x15a>
 80075c0:	2b20      	cmp	r3, #32
 80075c2:	d867      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d05c      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x15a>
 80075c8:	2b10      	cmp	r3, #16
 80075ca:	d05a      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x15a>
 80075cc:	e062      	b.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6818      	ldr	r0, [r3, #0]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	6899      	ldr	r1, [r3, #8]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	685a      	ldr	r2, [r3, #4]
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	f000 f9ad 	bl	800793c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	609a      	str	r2, [r3, #8]
      break;
 80075fa:	e04f      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6818      	ldr	r0, [r3, #0]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	6899      	ldr	r1, [r3, #8]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	685a      	ldr	r2, [r3, #4]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	f000 f996 	bl	800793c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689a      	ldr	r2, [r3, #8]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800761e:	609a      	str	r2, [r3, #8]
      break;
 8007620:	e03c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6818      	ldr	r0, [r3, #0]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	6859      	ldr	r1, [r3, #4]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	461a      	mov	r2, r3
 8007630:	f000 f90a 	bl	8007848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2150      	movs	r1, #80	; 0x50
 800763a:	4618      	mov	r0, r3
 800763c:	f000 f963 	bl	8007906 <TIM_ITRx_SetConfig>
      break;
 8007640:	e02c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6818      	ldr	r0, [r3, #0]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	6859      	ldr	r1, [r3, #4]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	461a      	mov	r2, r3
 8007650:	f000 f929 	bl	80078a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2160      	movs	r1, #96	; 0x60
 800765a:	4618      	mov	r0, r3
 800765c:	f000 f953 	bl	8007906 <TIM_ITRx_SetConfig>
      break;
 8007660:	e01c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6818      	ldr	r0, [r3, #0]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	6859      	ldr	r1, [r3, #4]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	461a      	mov	r2, r3
 8007670:	f000 f8ea 	bl	8007848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2140      	movs	r1, #64	; 0x40
 800767a:	4618      	mov	r0, r3
 800767c:	f000 f943 	bl	8007906 <TIM_ITRx_SetConfig>
      break;
 8007680:	e00c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4619      	mov	r1, r3
 800768c:	4610      	mov	r0, r2
 800768e:	f000 f93a 	bl	8007906 <TIM_ITRx_SetConfig>
      break;
 8007692:	e003      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	73fb      	strb	r3, [r7, #15]
      break;
 8007698:	e000      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800769a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076be:	bf00      	nop
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076d2:	bf00      	nop
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076de:	b480      	push	{r7}
 80076e0:	b083      	sub	sp, #12
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
	...

08007708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a40      	ldr	r2, [pc, #256]	; (800781c <TIM_Base_SetConfig+0x114>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d013      	beq.n	8007748 <TIM_Base_SetConfig+0x40>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007726:	d00f      	beq.n	8007748 <TIM_Base_SetConfig+0x40>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a3d      	ldr	r2, [pc, #244]	; (8007820 <TIM_Base_SetConfig+0x118>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d00b      	beq.n	8007748 <TIM_Base_SetConfig+0x40>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a3c      	ldr	r2, [pc, #240]	; (8007824 <TIM_Base_SetConfig+0x11c>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d007      	beq.n	8007748 <TIM_Base_SetConfig+0x40>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a3b      	ldr	r2, [pc, #236]	; (8007828 <TIM_Base_SetConfig+0x120>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d003      	beq.n	8007748 <TIM_Base_SetConfig+0x40>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a3a      	ldr	r2, [pc, #232]	; (800782c <TIM_Base_SetConfig+0x124>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d108      	bne.n	800775a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800774e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	4313      	orrs	r3, r2
 8007758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a2f      	ldr	r2, [pc, #188]	; (800781c <TIM_Base_SetConfig+0x114>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d02b      	beq.n	80077ba <TIM_Base_SetConfig+0xb2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007768:	d027      	beq.n	80077ba <TIM_Base_SetConfig+0xb2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a2c      	ldr	r2, [pc, #176]	; (8007820 <TIM_Base_SetConfig+0x118>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d023      	beq.n	80077ba <TIM_Base_SetConfig+0xb2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a2b      	ldr	r2, [pc, #172]	; (8007824 <TIM_Base_SetConfig+0x11c>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d01f      	beq.n	80077ba <TIM_Base_SetConfig+0xb2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a2a      	ldr	r2, [pc, #168]	; (8007828 <TIM_Base_SetConfig+0x120>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d01b      	beq.n	80077ba <TIM_Base_SetConfig+0xb2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a29      	ldr	r2, [pc, #164]	; (800782c <TIM_Base_SetConfig+0x124>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d017      	beq.n	80077ba <TIM_Base_SetConfig+0xb2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a28      	ldr	r2, [pc, #160]	; (8007830 <TIM_Base_SetConfig+0x128>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d013      	beq.n	80077ba <TIM_Base_SetConfig+0xb2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a27      	ldr	r2, [pc, #156]	; (8007834 <TIM_Base_SetConfig+0x12c>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d00f      	beq.n	80077ba <TIM_Base_SetConfig+0xb2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a26      	ldr	r2, [pc, #152]	; (8007838 <TIM_Base_SetConfig+0x130>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d00b      	beq.n	80077ba <TIM_Base_SetConfig+0xb2>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a25      	ldr	r2, [pc, #148]	; (800783c <TIM_Base_SetConfig+0x134>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d007      	beq.n	80077ba <TIM_Base_SetConfig+0xb2>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a24      	ldr	r2, [pc, #144]	; (8007840 <TIM_Base_SetConfig+0x138>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d003      	beq.n	80077ba <TIM_Base_SetConfig+0xb2>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a23      	ldr	r2, [pc, #140]	; (8007844 <TIM_Base_SetConfig+0x13c>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d108      	bne.n	80077cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	689a      	ldr	r2, [r3, #8]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a0a      	ldr	r2, [pc, #40]	; (800781c <TIM_Base_SetConfig+0x114>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d003      	beq.n	8007800 <TIM_Base_SetConfig+0xf8>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a0c      	ldr	r2, [pc, #48]	; (800782c <TIM_Base_SetConfig+0x124>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d103      	bne.n	8007808 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	691a      	ldr	r2, [r3, #16]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	615a      	str	r2, [r3, #20]
}
 800780e:	bf00      	nop
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	40010000 	.word	0x40010000
 8007820:	40000400 	.word	0x40000400
 8007824:	40000800 	.word	0x40000800
 8007828:	40000c00 	.word	0x40000c00
 800782c:	40010400 	.word	0x40010400
 8007830:	40014000 	.word	0x40014000
 8007834:	40014400 	.word	0x40014400
 8007838:	40014800 	.word	0x40014800
 800783c:	40001800 	.word	0x40001800
 8007840:	40001c00 	.word	0x40001c00
 8007844:	40002000 	.word	0x40002000

08007848 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007848:	b480      	push	{r7}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	f023 0201 	bic.w	r2, r3, #1
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	011b      	lsls	r3, r3, #4
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	4313      	orrs	r3, r2
 800787c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f023 030a 	bic.w	r3, r3, #10
 8007884:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	4313      	orrs	r3, r2
 800788c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	621a      	str	r2, [r3, #32]
}
 800789a:	bf00      	nop
 800789c:	371c      	adds	r7, #28
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b087      	sub	sp, #28
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	60f8      	str	r0, [r7, #12]
 80078ae:	60b9      	str	r1, [r7, #8]
 80078b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	f023 0210 	bic.w	r2, r3, #16
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6a1b      	ldr	r3, [r3, #32]
 80078c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	031b      	lsls	r3, r3, #12
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	4313      	orrs	r3, r2
 80078da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	011b      	lsls	r3, r3, #4
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	621a      	str	r2, [r3, #32]
}
 80078fa:	bf00      	nop
 80078fc:	371c      	adds	r7, #28
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007906:	b480      	push	{r7}
 8007908:	b085      	sub	sp, #20
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800791c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	4313      	orrs	r3, r2
 8007924:	f043 0307 	orr.w	r3, r3, #7
 8007928:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	609a      	str	r2, [r3, #8]
}
 8007930:	bf00      	nop
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800793c:	b480      	push	{r7}
 800793e:	b087      	sub	sp, #28
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
 8007948:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007956:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	021a      	lsls	r2, r3, #8
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	431a      	orrs	r2, r3
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	4313      	orrs	r3, r2
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	4313      	orrs	r3, r2
 8007968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	609a      	str	r2, [r3, #8]
}
 8007970:	bf00      	nop
 8007972:	371c      	adds	r7, #28
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800798c:	2b01      	cmp	r3, #1
 800798e:	d101      	bne.n	8007994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007990:	2302      	movs	r3, #2
 8007992:	e05a      	b.n	8007a4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2202      	movs	r2, #2
 80079a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a21      	ldr	r2, [pc, #132]	; (8007a58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d022      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079e0:	d01d      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a1d      	ldr	r2, [pc, #116]	; (8007a5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d018      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a1b      	ldr	r2, [pc, #108]	; (8007a60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d013      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a1a      	ldr	r2, [pc, #104]	; (8007a64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d00e      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a18      	ldr	r2, [pc, #96]	; (8007a68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d009      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a17      	ldr	r2, [pc, #92]	; (8007a6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d004      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a15      	ldr	r2, [pc, #84]	; (8007a70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d10c      	bne.n	8007a38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	40010000 	.word	0x40010000
 8007a5c:	40000400 	.word	0x40000400
 8007a60:	40000800 	.word	0x40000800
 8007a64:	40000c00 	.word	0x40000c00
 8007a68:	40010400 	.word	0x40010400
 8007a6c:	40014000 	.word	0x40014000
 8007a70:	40001800 	.word	0x40001800

08007a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d101      	bne.n	8007aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e03f      	b.n	8007b2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d106      	bne.n	8007ac8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7fa feb8 	bl	8002838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2224      	movs	r2, #36	; 0x24
 8007acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68da      	ldr	r2, [r3, #12]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ade:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fe19 	bl	8008718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	691a      	ldr	r2, [r3, #16]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007af4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	695a      	ldr	r2, [r3, #20]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68da      	ldr	r2, [r3, #12]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2220      	movs	r2, #32
 8007b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2220      	movs	r2, #32
 8007b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b08a      	sub	sp, #40	; 0x28
 8007b3a:	af02      	add	r7, sp, #8
 8007b3c:	60f8      	str	r0, [r7, #12]
 8007b3e:	60b9      	str	r1, [r7, #8]
 8007b40:	603b      	str	r3, [r7, #0]
 8007b42:	4613      	mov	r3, r2
 8007b44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b20      	cmp	r3, #32
 8007b54:	d17c      	bne.n	8007c50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d002      	beq.n	8007b62 <HAL_UART_Transmit+0x2c>
 8007b5c:	88fb      	ldrh	r3, [r7, #6]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e075      	b.n	8007c52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d101      	bne.n	8007b74 <HAL_UART_Transmit+0x3e>
 8007b70:	2302      	movs	r3, #2
 8007b72:	e06e      	b.n	8007c52 <HAL_UART_Transmit+0x11c>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2221      	movs	r2, #33	; 0x21
 8007b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b8a:	f7fb f961 	bl	8002e50 <HAL_GetTick>
 8007b8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	88fa      	ldrh	r2, [r7, #6]
 8007b94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	88fa      	ldrh	r2, [r7, #6]
 8007b9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ba4:	d108      	bne.n	8007bb8 <HAL_UART_Transmit+0x82>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d104      	bne.n	8007bb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	61bb      	str	r3, [r7, #24]
 8007bb6:	e003      	b.n	8007bc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007bc8:	e02a      	b.n	8007c20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	2180      	movs	r1, #128	; 0x80
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f000 fb59 	bl	800828c <UART_WaitOnFlagUntilTimeout>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e036      	b.n	8007c52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10b      	bne.n	8007c02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	881b      	ldrh	r3, [r3, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	3302      	adds	r3, #2
 8007bfe:	61bb      	str	r3, [r7, #24]
 8007c00:	e007      	b.n	8007c12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	781a      	ldrb	r2, [r3, #0]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1cf      	bne.n	8007bca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	2200      	movs	r2, #0
 8007c32:	2140      	movs	r1, #64	; 0x40
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 fb29 	bl	800828c <UART_WaitOnFlagUntilTimeout>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d001      	beq.n	8007c44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e006      	b.n	8007c52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2220      	movs	r2, #32
 8007c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	e000      	b.n	8007c52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007c50:	2302      	movs	r3, #2
  }
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3720      	adds	r7, #32
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b085      	sub	sp, #20
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	60f8      	str	r0, [r7, #12]
 8007c62:	60b9      	str	r1, [r7, #8]
 8007c64:	4613      	mov	r3, r2
 8007c66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	2b20      	cmp	r3, #32
 8007c72:	d130      	bne.n	8007cd6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d002      	beq.n	8007c80 <HAL_UART_Transmit_IT+0x26>
 8007c7a:	88fb      	ldrh	r3, [r7, #6]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e029      	b.n	8007cd8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d101      	bne.n	8007c92 <HAL_UART_Transmit_IT+0x38>
 8007c8e:	2302      	movs	r3, #2
 8007c90:	e022      	b.n	8007cd8 <HAL_UART_Transmit_IT+0x7e>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	88fa      	ldrh	r2, [r7, #6]
 8007ca4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	88fa      	ldrh	r2, [r7, #6]
 8007caa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2221      	movs	r2, #33	; 0x21
 8007cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68da      	ldr	r2, [r3, #12]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007cd0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	e000      	b.n	8007cd8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007cd6:	2302      	movs	r3, #2
  }
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b20      	cmp	r3, #32
 8007cfc:	d11d      	bne.n	8007d3a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <HAL_UART_Receive_IT+0x26>
 8007d04:	88fb      	ldrh	r3, [r7, #6]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e016      	b.n	8007d3c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d101      	bne.n	8007d1c <HAL_UART_Receive_IT+0x38>
 8007d18:	2302      	movs	r3, #2
 8007d1a:	e00f      	b.n	8007d3c <HAL_UART_Receive_IT+0x58>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007d2a:	88fb      	ldrh	r3, [r7, #6]
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	68b9      	ldr	r1, [r7, #8]
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f000 fb19 	bl	8008368 <UART_Start_Receive_IT>
 8007d36:	4603      	mov	r3, r0
 8007d38:	e000      	b.n	8007d3c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007d3a:	2302      	movs	r3, #2
  }
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b0ba      	sub	sp, #232	; 0xe8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	695b      	ldr	r3, [r3, #20]
 8007d66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007d70:	2300      	movs	r3, #0
 8007d72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d7a:	f003 030f 	and.w	r3, r3, #15
 8007d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007d82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10f      	bne.n	8007daa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d8e:	f003 0320 	and.w	r3, r3, #32
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d009      	beq.n	8007daa <HAL_UART_IRQHandler+0x66>
 8007d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d9a:	f003 0320 	and.w	r3, r3, #32
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d003      	beq.n	8007daa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fbfd 	bl	80085a2 <UART_Receive_IT>
      return;
 8007da8:	e256      	b.n	8008258 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007daa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f000 80de 	beq.w	8007f70 <HAL_UART_IRQHandler+0x22c>
 8007db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007db8:	f003 0301 	and.w	r3, r3, #1
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d106      	bne.n	8007dce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dc4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 80d1 	beq.w	8007f70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00b      	beq.n	8007df2 <HAL_UART_IRQHandler+0xae>
 8007dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d005      	beq.n	8007df2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	f043 0201 	orr.w	r2, r3, #1
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007df6:	f003 0304 	and.w	r3, r3, #4
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00b      	beq.n	8007e16 <HAL_UART_IRQHandler+0xd2>
 8007dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e02:	f003 0301 	and.w	r3, r3, #1
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d005      	beq.n	8007e16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0e:	f043 0202 	orr.w	r2, r3, #2
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00b      	beq.n	8007e3a <HAL_UART_IRQHandler+0xf6>
 8007e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d005      	beq.n	8007e3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e32:	f043 0204 	orr.w	r2, r3, #4
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e3e:	f003 0308 	and.w	r3, r3, #8
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d011      	beq.n	8007e6a <HAL_UART_IRQHandler+0x126>
 8007e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e4a:	f003 0320 	and.w	r3, r3, #32
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d105      	bne.n	8007e5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d005      	beq.n	8007e6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e62:	f043 0208 	orr.w	r2, r3, #8
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f000 81ed 	beq.w	800824e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e78:	f003 0320 	and.w	r3, r3, #32
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d008      	beq.n	8007e92 <HAL_UART_IRQHandler+0x14e>
 8007e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e84:	f003 0320 	and.w	r3, r3, #32
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d002      	beq.n	8007e92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fb88 	bl	80085a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	695b      	ldr	r3, [r3, #20]
 8007e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e9c:	2b40      	cmp	r3, #64	; 0x40
 8007e9e:	bf0c      	ite	eq
 8007ea0:	2301      	moveq	r3, #1
 8007ea2:	2300      	movne	r3, #0
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eae:	f003 0308 	and.w	r3, r3, #8
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d103      	bne.n	8007ebe <HAL_UART_IRQHandler+0x17a>
 8007eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d04f      	beq.n	8007f5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fa90 	bl	80083e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ece:	2b40      	cmp	r3, #64	; 0x40
 8007ed0:	d141      	bne.n	8007f56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	3314      	adds	r3, #20
 8007ed8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ee0:	e853 3f00 	ldrex	r3, [r3]
 8007ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	3314      	adds	r3, #20
 8007efa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007efe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007f0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f0e:	e841 2300 	strex	r3, r2, [r1]
 8007f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007f16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1d9      	bne.n	8007ed2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d013      	beq.n	8007f4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2a:	4a7d      	ldr	r2, [pc, #500]	; (8008120 <HAL_UART_IRQHandler+0x3dc>)
 8007f2c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fb f9bc 	bl	80032b0 <HAL_DMA_Abort_IT>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d016      	beq.n	8007f6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f48:	4610      	mov	r0, r2
 8007f4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f4c:	e00e      	b.n	8007f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f986 	bl	8008260 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f54:	e00a      	b.n	8007f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f982 	bl	8008260 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f5c:	e006      	b.n	8007f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f97e 	bl	8008260 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007f6a:	e170      	b.n	800824e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f6c:	bf00      	nop
    return;
 8007f6e:	e16e      	b.n	800824e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	f040 814a 	bne.w	800820e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f7e:	f003 0310 	and.w	r3, r3, #16
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f000 8143 	beq.w	800820e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f8c:	f003 0310 	and.w	r3, r3, #16
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 813c 	beq.w	800820e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f96:	2300      	movs	r3, #0
 8007f98:	60bb      	str	r3, [r7, #8]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	60bb      	str	r3, [r7, #8]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	60bb      	str	r3, [r7, #8]
 8007faa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb6:	2b40      	cmp	r3, #64	; 0x40
 8007fb8:	f040 80b4 	bne.w	8008124 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007fc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 8140 	beq.w	8008252 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	f080 8139 	bcs.w	8008252 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007fe6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ff2:	f000 8088 	beq.w	8008106 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	330c      	adds	r3, #12
 8007ffc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008000:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008004:	e853 3f00 	ldrex	r3, [r3]
 8008008:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800800c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008014:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	330c      	adds	r3, #12
 800801e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008022:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008026:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800802e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008032:	e841 2300 	strex	r3, r2, [r1]
 8008036:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800803a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1d9      	bne.n	8007ff6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	3314      	adds	r3, #20
 8008048:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800804c:	e853 3f00 	ldrex	r3, [r3]
 8008050:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008052:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008054:	f023 0301 	bic.w	r3, r3, #1
 8008058:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3314      	adds	r3, #20
 8008062:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008066:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800806a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800806e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008072:	e841 2300 	strex	r3, r2, [r1]
 8008076:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1e1      	bne.n	8008042 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3314      	adds	r3, #20
 8008084:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008088:	e853 3f00 	ldrex	r3, [r3]
 800808c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800808e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008094:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	3314      	adds	r3, #20
 800809e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80080a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80080a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80080a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80080aa:	e841 2300 	strex	r3, r2, [r1]
 80080ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80080b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1e3      	bne.n	800807e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2220      	movs	r2, #32
 80080ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	330c      	adds	r3, #12
 80080ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080ce:	e853 3f00 	ldrex	r3, [r3]
 80080d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80080d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080d6:	f023 0310 	bic.w	r3, r3, #16
 80080da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	330c      	adds	r3, #12
 80080e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80080e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80080ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80080ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080f0:	e841 2300 	strex	r3, r2, [r1]
 80080f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80080f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1e3      	bne.n	80080c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008100:	4618      	mov	r0, r3
 8008102:	f7fb f865 	bl	80031d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800810e:	b29b      	uxth	r3, r3
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	b29b      	uxth	r3, r3
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f8ac 	bl	8008274 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800811c:	e099      	b.n	8008252 <HAL_UART_IRQHandler+0x50e>
 800811e:	bf00      	nop
 8008120:	080084ab 	.word	0x080084ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800812c:	b29b      	uxth	r3, r3
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008138:	b29b      	uxth	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	f000 808b 	beq.w	8008256 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008140:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 8086 	beq.w	8008256 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	330c      	adds	r3, #12
 8008150:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008154:	e853 3f00 	ldrex	r3, [r3]
 8008158:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800815a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800815c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008160:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	330c      	adds	r3, #12
 800816a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800816e:	647a      	str	r2, [r7, #68]	; 0x44
 8008170:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008172:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008174:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008176:	e841 2300 	strex	r3, r2, [r1]
 800817a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800817c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1e3      	bne.n	800814a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3314      	adds	r3, #20
 8008188:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818c:	e853 3f00 	ldrex	r3, [r3]
 8008190:	623b      	str	r3, [r7, #32]
   return(result);
 8008192:	6a3b      	ldr	r3, [r7, #32]
 8008194:	f023 0301 	bic.w	r3, r3, #1
 8008198:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	3314      	adds	r3, #20
 80081a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80081a6:	633a      	str	r2, [r7, #48]	; 0x30
 80081a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ae:	e841 2300 	strex	r3, r2, [r1]
 80081b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1e3      	bne.n	8008182 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2220      	movs	r2, #32
 80081be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	330c      	adds	r3, #12
 80081ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	e853 3f00 	ldrex	r3, [r3]
 80081d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f023 0310 	bic.w	r3, r3, #16
 80081de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	330c      	adds	r3, #12
 80081e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80081ec:	61fa      	str	r2, [r7, #28]
 80081ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f0:	69b9      	ldr	r1, [r7, #24]
 80081f2:	69fa      	ldr	r2, [r7, #28]
 80081f4:	e841 2300 	strex	r3, r2, [r1]
 80081f8:	617b      	str	r3, [r7, #20]
   return(result);
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1e3      	bne.n	80081c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008204:	4619      	mov	r1, r3
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f834 	bl	8008274 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800820c:	e023      	b.n	8008256 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800820e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008216:	2b00      	cmp	r3, #0
 8008218:	d009      	beq.n	800822e <HAL_UART_IRQHandler+0x4ea>
 800821a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800821e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008222:	2b00      	cmp	r3, #0
 8008224:	d003      	beq.n	800822e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f953 	bl	80084d2 <UART_Transmit_IT>
    return;
 800822c:	e014      	b.n	8008258 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800822e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00e      	beq.n	8008258 <HAL_UART_IRQHandler+0x514>
 800823a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800823e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008242:	2b00      	cmp	r3, #0
 8008244:	d008      	beq.n	8008258 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f993 	bl	8008572 <UART_EndTransmit_IT>
    return;
 800824c:	e004      	b.n	8008258 <HAL_UART_IRQHandler+0x514>
    return;
 800824e:	bf00      	nop
 8008250:	e002      	b.n	8008258 <HAL_UART_IRQHandler+0x514>
      return;
 8008252:	bf00      	nop
 8008254:	e000      	b.n	8008258 <HAL_UART_IRQHandler+0x514>
      return;
 8008256:	bf00      	nop
  }
}
 8008258:	37e8      	adds	r7, #232	; 0xe8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop

08008260 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008280:	bf00      	nop
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b090      	sub	sp, #64	; 0x40
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	603b      	str	r3, [r7, #0]
 8008298:	4613      	mov	r3, r2
 800829a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800829c:	e050      	b.n	8008340 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800829e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a4:	d04c      	beq.n	8008340 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80082a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d007      	beq.n	80082bc <UART_WaitOnFlagUntilTimeout+0x30>
 80082ac:	f7fa fdd0 	bl	8002e50 <HAL_GetTick>
 80082b0:	4602      	mov	r2, r0
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d241      	bcs.n	8008340 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	330c      	adds	r3, #12
 80082c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c6:	e853 3f00 	ldrex	r3, [r3]
 80082ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	330c      	adds	r3, #12
 80082da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80082dc:	637a      	str	r2, [r7, #52]	; 0x34
 80082de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082e4:	e841 2300 	strex	r3, r2, [r1]
 80082e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1e5      	bne.n	80082bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3314      	adds	r3, #20
 80082f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	e853 3f00 	ldrex	r3, [r3]
 80082fe:	613b      	str	r3, [r7, #16]
   return(result);
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	f023 0301 	bic.w	r3, r3, #1
 8008306:	63bb      	str	r3, [r7, #56]	; 0x38
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3314      	adds	r3, #20
 800830e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008310:	623a      	str	r2, [r7, #32]
 8008312:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008314:	69f9      	ldr	r1, [r7, #28]
 8008316:	6a3a      	ldr	r2, [r7, #32]
 8008318:	e841 2300 	strex	r3, r2, [r1]
 800831c:	61bb      	str	r3, [r7, #24]
   return(result);
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1e5      	bne.n	80082f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2220      	movs	r2, #32
 8008328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2220      	movs	r2, #32
 8008330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	e00f      	b.n	8008360 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	4013      	ands	r3, r2
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	429a      	cmp	r2, r3
 800834e:	bf0c      	ite	eq
 8008350:	2301      	moveq	r3, #1
 8008352:	2300      	movne	r3, #0
 8008354:	b2db      	uxtb	r3, r3
 8008356:	461a      	mov	r2, r3
 8008358:	79fb      	ldrb	r3, [r7, #7]
 800835a:	429a      	cmp	r2, r3
 800835c:	d09f      	beq.n	800829e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3740      	adds	r7, #64	; 0x40
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	4613      	mov	r3, r2
 8008374:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	88fa      	ldrh	r2, [r7, #6]
 8008380:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	88fa      	ldrh	r2, [r7, #6]
 8008386:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2222      	movs	r2, #34	; 0x22
 8008392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d007      	beq.n	80083b6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68da      	ldr	r2, [r3, #12]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083b4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	695a      	ldr	r2, [r3, #20]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f042 0201 	orr.w	r2, r2, #1
 80083c4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	68da      	ldr	r2, [r3, #12]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f042 0220 	orr.w	r2, r2, #32
 80083d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b095      	sub	sp, #84	; 0x54
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	330c      	adds	r3, #12
 80083f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f6:	e853 3f00 	ldrex	r3, [r3]
 80083fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	330c      	adds	r3, #12
 800840a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800840c:	643a      	str	r2, [r7, #64]	; 0x40
 800840e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008410:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008412:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008414:	e841 2300 	strex	r3, r2, [r1]
 8008418:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800841a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1e5      	bne.n	80083ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3314      	adds	r3, #20
 8008426:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008428:	6a3b      	ldr	r3, [r7, #32]
 800842a:	e853 3f00 	ldrex	r3, [r3]
 800842e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	f023 0301 	bic.w	r3, r3, #1
 8008436:	64bb      	str	r3, [r7, #72]	; 0x48
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3314      	adds	r3, #20
 800843e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008440:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008442:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008448:	e841 2300 	strex	r3, r2, [r1]
 800844c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1e5      	bne.n	8008420 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008458:	2b01      	cmp	r3, #1
 800845a:	d119      	bne.n	8008490 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	330c      	adds	r3, #12
 8008462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	e853 3f00 	ldrex	r3, [r3]
 800846a:	60bb      	str	r3, [r7, #8]
   return(result);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	f023 0310 	bic.w	r3, r3, #16
 8008472:	647b      	str	r3, [r7, #68]	; 0x44
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	330c      	adds	r3, #12
 800847a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800847c:	61ba      	str	r2, [r7, #24]
 800847e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008480:	6979      	ldr	r1, [r7, #20]
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	e841 2300 	strex	r3, r2, [r1]
 8008488:	613b      	str	r3, [r7, #16]
   return(result);
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e5      	bne.n	800845c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2220      	movs	r2, #32
 8008494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800849e:	bf00      	nop
 80084a0:	3754      	adds	r7, #84	; 0x54
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b084      	sub	sp, #16
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f7ff fecb 	bl	8008260 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084ca:	bf00      	nop
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80084d2:	b480      	push	{r7}
 80084d4:	b085      	sub	sp, #20
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	2b21      	cmp	r3, #33	; 0x21
 80084e4:	d13e      	bne.n	8008564 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084ee:	d114      	bne.n	800851a <UART_Transmit_IT+0x48>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d110      	bne.n	800851a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	881b      	ldrh	r3, [r3, #0]
 8008502:	461a      	mov	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800850c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a1b      	ldr	r3, [r3, #32]
 8008512:	1c9a      	adds	r2, r3, #2
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	621a      	str	r2, [r3, #32]
 8008518:	e008      	b.n	800852c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a1b      	ldr	r3, [r3, #32]
 800851e:	1c59      	adds	r1, r3, #1
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	6211      	str	r1, [r2, #32]
 8008524:	781a      	ldrb	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008530:	b29b      	uxth	r3, r3
 8008532:	3b01      	subs	r3, #1
 8008534:	b29b      	uxth	r3, r3
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	4619      	mov	r1, r3
 800853a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10f      	bne.n	8008560 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68da      	ldr	r2, [r3, #12]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800854e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68da      	ldr	r2, [r3, #12]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800855e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	e000      	b.n	8008566 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008564:	2302      	movs	r3, #2
  }
}
 8008566:	4618      	mov	r0, r3
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b082      	sub	sp, #8
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68da      	ldr	r2, [r3, #12]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008588:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2220      	movs	r2, #32
 800858e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7f9 f934 	bl	8001800 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b08c      	sub	sp, #48	; 0x30
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b22      	cmp	r3, #34	; 0x22
 80085b4:	f040 80ab 	bne.w	800870e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085c0:	d117      	bne.n	80085f2 <UART_Receive_IT+0x50>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d113      	bne.n	80085f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80085ca:	2300      	movs	r3, #0
 80085cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	b29b      	uxth	r3, r3
 80085dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ea:	1c9a      	adds	r2, r3, #2
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	629a      	str	r2, [r3, #40]	; 0x28
 80085f0:	e026      	b.n	8008640 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80085f8:	2300      	movs	r3, #0
 80085fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008604:	d007      	beq.n	8008616 <UART_Receive_IT+0x74>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10a      	bne.n	8008624 <UART_Receive_IT+0x82>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d106      	bne.n	8008624 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	b2da      	uxtb	r2, r3
 800861e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008620:	701a      	strb	r2, [r3, #0]
 8008622:	e008      	b.n	8008636 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	b2db      	uxtb	r3, r3
 800862c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008630:	b2da      	uxtb	r2, r3
 8008632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008634:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863a:	1c5a      	adds	r2, r3, #1
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008644:	b29b      	uxth	r3, r3
 8008646:	3b01      	subs	r3, #1
 8008648:	b29b      	uxth	r3, r3
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	4619      	mov	r1, r3
 800864e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008650:	2b00      	cmp	r3, #0
 8008652:	d15a      	bne.n	800870a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68da      	ldr	r2, [r3, #12]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f022 0220 	bic.w	r2, r2, #32
 8008662:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68da      	ldr	r2, [r3, #12]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008672:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	695a      	ldr	r2, [r3, #20]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f022 0201 	bic.w	r2, r2, #1
 8008682:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2220      	movs	r2, #32
 8008688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008690:	2b01      	cmp	r3, #1
 8008692:	d135      	bne.n	8008700 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	330c      	adds	r3, #12
 80086a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	e853 3f00 	ldrex	r3, [r3]
 80086a8:	613b      	str	r3, [r7, #16]
   return(result);
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	f023 0310 	bic.w	r3, r3, #16
 80086b0:	627b      	str	r3, [r7, #36]	; 0x24
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	330c      	adds	r3, #12
 80086b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ba:	623a      	str	r2, [r7, #32]
 80086bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086be:	69f9      	ldr	r1, [r7, #28]
 80086c0:	6a3a      	ldr	r2, [r7, #32]
 80086c2:	e841 2300 	strex	r3, r2, [r1]
 80086c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1e5      	bne.n	800869a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0310 	and.w	r3, r3, #16
 80086d8:	2b10      	cmp	r3, #16
 80086da:	d10a      	bne.n	80086f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086dc:	2300      	movs	r3, #0
 80086de:	60fb      	str	r3, [r7, #12]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	60fb      	str	r3, [r7, #12]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	60fb      	str	r3, [r7, #12]
 80086f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086f6:	4619      	mov	r1, r3
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7ff fdbb 	bl	8008274 <HAL_UARTEx_RxEventCallback>
 80086fe:	e002      	b.n	8008706 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f7f9 f859 	bl	80017b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	e002      	b.n	8008710 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	e000      	b.n	8008710 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800870e:	2302      	movs	r3, #2
  }
}
 8008710:	4618      	mov	r0, r3
 8008712:	3730      	adds	r7, #48	; 0x30
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800871c:	b0c0      	sub	sp, #256	; 0x100
 800871e:	af00      	add	r7, sp, #0
 8008720:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008734:	68d9      	ldr	r1, [r3, #12]
 8008736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	ea40 0301 	orr.w	r3, r0, r1
 8008740:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008746:	689a      	ldr	r2, [r3, #8]
 8008748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	431a      	orrs	r2, r3
 8008750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	431a      	orrs	r2, r3
 8008758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	4313      	orrs	r3, r2
 8008760:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008770:	f021 010c 	bic.w	r1, r1, #12
 8008774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800877e:	430b      	orrs	r3, r1
 8008780:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800878e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008792:	6999      	ldr	r1, [r3, #24]
 8008794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	ea40 0301 	orr.w	r3, r0, r1
 800879e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80087a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	4b8f      	ldr	r3, [pc, #572]	; (80089e4 <UART_SetConfig+0x2cc>)
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d005      	beq.n	80087b8 <UART_SetConfig+0xa0>
 80087ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	4b8d      	ldr	r3, [pc, #564]	; (80089e8 <UART_SetConfig+0x2d0>)
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d104      	bne.n	80087c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80087b8:	f7fd fcb4 	bl	8006124 <HAL_RCC_GetPCLK2Freq>
 80087bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80087c0:	e003      	b.n	80087ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80087c2:	f7fd fc9b 	bl	80060fc <HAL_RCC_GetPCLK1Freq>
 80087c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ce:	69db      	ldr	r3, [r3, #28]
 80087d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087d4:	f040 810c 	bne.w	80089f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087dc:	2200      	movs	r2, #0
 80087de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80087e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80087e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80087ea:	4622      	mov	r2, r4
 80087ec:	462b      	mov	r3, r5
 80087ee:	1891      	adds	r1, r2, r2
 80087f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80087f2:	415b      	adcs	r3, r3
 80087f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80087fa:	4621      	mov	r1, r4
 80087fc:	eb12 0801 	adds.w	r8, r2, r1
 8008800:	4629      	mov	r1, r5
 8008802:	eb43 0901 	adc.w	r9, r3, r1
 8008806:	f04f 0200 	mov.w	r2, #0
 800880a:	f04f 0300 	mov.w	r3, #0
 800880e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800881a:	4690      	mov	r8, r2
 800881c:	4699      	mov	r9, r3
 800881e:	4623      	mov	r3, r4
 8008820:	eb18 0303 	adds.w	r3, r8, r3
 8008824:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008828:	462b      	mov	r3, r5
 800882a:	eb49 0303 	adc.w	r3, r9, r3
 800882e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800883e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008842:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008846:	460b      	mov	r3, r1
 8008848:	18db      	adds	r3, r3, r3
 800884a:	653b      	str	r3, [r7, #80]	; 0x50
 800884c:	4613      	mov	r3, r2
 800884e:	eb42 0303 	adc.w	r3, r2, r3
 8008852:	657b      	str	r3, [r7, #84]	; 0x54
 8008854:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008858:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800885c:	f7f7 fd20 	bl	80002a0 <__aeabi_uldivmod>
 8008860:	4602      	mov	r2, r0
 8008862:	460b      	mov	r3, r1
 8008864:	4b61      	ldr	r3, [pc, #388]	; (80089ec <UART_SetConfig+0x2d4>)
 8008866:	fba3 2302 	umull	r2, r3, r3, r2
 800886a:	095b      	lsrs	r3, r3, #5
 800886c:	011c      	lsls	r4, r3, #4
 800886e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008872:	2200      	movs	r2, #0
 8008874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008878:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800887c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008880:	4642      	mov	r2, r8
 8008882:	464b      	mov	r3, r9
 8008884:	1891      	adds	r1, r2, r2
 8008886:	64b9      	str	r1, [r7, #72]	; 0x48
 8008888:	415b      	adcs	r3, r3
 800888a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800888c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008890:	4641      	mov	r1, r8
 8008892:	eb12 0a01 	adds.w	sl, r2, r1
 8008896:	4649      	mov	r1, r9
 8008898:	eb43 0b01 	adc.w	fp, r3, r1
 800889c:	f04f 0200 	mov.w	r2, #0
 80088a0:	f04f 0300 	mov.w	r3, #0
 80088a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80088a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80088ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088b0:	4692      	mov	sl, r2
 80088b2:	469b      	mov	fp, r3
 80088b4:	4643      	mov	r3, r8
 80088b6:	eb1a 0303 	adds.w	r3, sl, r3
 80088ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088be:	464b      	mov	r3, r9
 80088c0:	eb4b 0303 	adc.w	r3, fp, r3
 80088c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80088c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80088d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80088dc:	460b      	mov	r3, r1
 80088de:	18db      	adds	r3, r3, r3
 80088e0:	643b      	str	r3, [r7, #64]	; 0x40
 80088e2:	4613      	mov	r3, r2
 80088e4:	eb42 0303 	adc.w	r3, r2, r3
 80088e8:	647b      	str	r3, [r7, #68]	; 0x44
 80088ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80088ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80088f2:	f7f7 fcd5 	bl	80002a0 <__aeabi_uldivmod>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4611      	mov	r1, r2
 80088fc:	4b3b      	ldr	r3, [pc, #236]	; (80089ec <UART_SetConfig+0x2d4>)
 80088fe:	fba3 2301 	umull	r2, r3, r3, r1
 8008902:	095b      	lsrs	r3, r3, #5
 8008904:	2264      	movs	r2, #100	; 0x64
 8008906:	fb02 f303 	mul.w	r3, r2, r3
 800890a:	1acb      	subs	r3, r1, r3
 800890c:	00db      	lsls	r3, r3, #3
 800890e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008912:	4b36      	ldr	r3, [pc, #216]	; (80089ec <UART_SetConfig+0x2d4>)
 8008914:	fba3 2302 	umull	r2, r3, r3, r2
 8008918:	095b      	lsrs	r3, r3, #5
 800891a:	005b      	lsls	r3, r3, #1
 800891c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008920:	441c      	add	r4, r3
 8008922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008926:	2200      	movs	r2, #0
 8008928:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800892c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008930:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008934:	4642      	mov	r2, r8
 8008936:	464b      	mov	r3, r9
 8008938:	1891      	adds	r1, r2, r2
 800893a:	63b9      	str	r1, [r7, #56]	; 0x38
 800893c:	415b      	adcs	r3, r3
 800893e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008940:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008944:	4641      	mov	r1, r8
 8008946:	1851      	adds	r1, r2, r1
 8008948:	6339      	str	r1, [r7, #48]	; 0x30
 800894a:	4649      	mov	r1, r9
 800894c:	414b      	adcs	r3, r1
 800894e:	637b      	str	r3, [r7, #52]	; 0x34
 8008950:	f04f 0200 	mov.w	r2, #0
 8008954:	f04f 0300 	mov.w	r3, #0
 8008958:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800895c:	4659      	mov	r1, fp
 800895e:	00cb      	lsls	r3, r1, #3
 8008960:	4651      	mov	r1, sl
 8008962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008966:	4651      	mov	r1, sl
 8008968:	00ca      	lsls	r2, r1, #3
 800896a:	4610      	mov	r0, r2
 800896c:	4619      	mov	r1, r3
 800896e:	4603      	mov	r3, r0
 8008970:	4642      	mov	r2, r8
 8008972:	189b      	adds	r3, r3, r2
 8008974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008978:	464b      	mov	r3, r9
 800897a:	460a      	mov	r2, r1
 800897c:	eb42 0303 	adc.w	r3, r2, r3
 8008980:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008990:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008994:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008998:	460b      	mov	r3, r1
 800899a:	18db      	adds	r3, r3, r3
 800899c:	62bb      	str	r3, [r7, #40]	; 0x28
 800899e:	4613      	mov	r3, r2
 80089a0:	eb42 0303 	adc.w	r3, r2, r3
 80089a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80089ae:	f7f7 fc77 	bl	80002a0 <__aeabi_uldivmod>
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	4b0d      	ldr	r3, [pc, #52]	; (80089ec <UART_SetConfig+0x2d4>)
 80089b8:	fba3 1302 	umull	r1, r3, r3, r2
 80089bc:	095b      	lsrs	r3, r3, #5
 80089be:	2164      	movs	r1, #100	; 0x64
 80089c0:	fb01 f303 	mul.w	r3, r1, r3
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	00db      	lsls	r3, r3, #3
 80089c8:	3332      	adds	r3, #50	; 0x32
 80089ca:	4a08      	ldr	r2, [pc, #32]	; (80089ec <UART_SetConfig+0x2d4>)
 80089cc:	fba2 2303 	umull	r2, r3, r2, r3
 80089d0:	095b      	lsrs	r3, r3, #5
 80089d2:	f003 0207 	and.w	r2, r3, #7
 80089d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4422      	add	r2, r4
 80089de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80089e0:	e105      	b.n	8008bee <UART_SetConfig+0x4d6>
 80089e2:	bf00      	nop
 80089e4:	40011000 	.word	0x40011000
 80089e8:	40011400 	.word	0x40011400
 80089ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80089f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089f4:	2200      	movs	r2, #0
 80089f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80089fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80089fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008a02:	4642      	mov	r2, r8
 8008a04:	464b      	mov	r3, r9
 8008a06:	1891      	adds	r1, r2, r2
 8008a08:	6239      	str	r1, [r7, #32]
 8008a0a:	415b      	adcs	r3, r3
 8008a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a12:	4641      	mov	r1, r8
 8008a14:	1854      	adds	r4, r2, r1
 8008a16:	4649      	mov	r1, r9
 8008a18:	eb43 0501 	adc.w	r5, r3, r1
 8008a1c:	f04f 0200 	mov.w	r2, #0
 8008a20:	f04f 0300 	mov.w	r3, #0
 8008a24:	00eb      	lsls	r3, r5, #3
 8008a26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a2a:	00e2      	lsls	r2, r4, #3
 8008a2c:	4614      	mov	r4, r2
 8008a2e:	461d      	mov	r5, r3
 8008a30:	4643      	mov	r3, r8
 8008a32:	18e3      	adds	r3, r4, r3
 8008a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008a38:	464b      	mov	r3, r9
 8008a3a:	eb45 0303 	adc.w	r3, r5, r3
 8008a3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008a4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a52:	f04f 0200 	mov.w	r2, #0
 8008a56:	f04f 0300 	mov.w	r3, #0
 8008a5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008a5e:	4629      	mov	r1, r5
 8008a60:	008b      	lsls	r3, r1, #2
 8008a62:	4621      	mov	r1, r4
 8008a64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a68:	4621      	mov	r1, r4
 8008a6a:	008a      	lsls	r2, r1, #2
 8008a6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008a70:	f7f7 fc16 	bl	80002a0 <__aeabi_uldivmod>
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	4b60      	ldr	r3, [pc, #384]	; (8008bfc <UART_SetConfig+0x4e4>)
 8008a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8008a7e:	095b      	lsrs	r3, r3, #5
 8008a80:	011c      	lsls	r4, r3, #4
 8008a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a86:	2200      	movs	r2, #0
 8008a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008a90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008a94:	4642      	mov	r2, r8
 8008a96:	464b      	mov	r3, r9
 8008a98:	1891      	adds	r1, r2, r2
 8008a9a:	61b9      	str	r1, [r7, #24]
 8008a9c:	415b      	adcs	r3, r3
 8008a9e:	61fb      	str	r3, [r7, #28]
 8008aa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008aa4:	4641      	mov	r1, r8
 8008aa6:	1851      	adds	r1, r2, r1
 8008aa8:	6139      	str	r1, [r7, #16]
 8008aaa:	4649      	mov	r1, r9
 8008aac:	414b      	adcs	r3, r1
 8008aae:	617b      	str	r3, [r7, #20]
 8008ab0:	f04f 0200 	mov.w	r2, #0
 8008ab4:	f04f 0300 	mov.w	r3, #0
 8008ab8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008abc:	4659      	mov	r1, fp
 8008abe:	00cb      	lsls	r3, r1, #3
 8008ac0:	4651      	mov	r1, sl
 8008ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ac6:	4651      	mov	r1, sl
 8008ac8:	00ca      	lsls	r2, r1, #3
 8008aca:	4610      	mov	r0, r2
 8008acc:	4619      	mov	r1, r3
 8008ace:	4603      	mov	r3, r0
 8008ad0:	4642      	mov	r2, r8
 8008ad2:	189b      	adds	r3, r3, r2
 8008ad4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ad8:	464b      	mov	r3, r9
 8008ada:	460a      	mov	r2, r1
 8008adc:	eb42 0303 	adc.w	r3, r2, r3
 8008ae0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	67bb      	str	r3, [r7, #120]	; 0x78
 8008aee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008af0:	f04f 0200 	mov.w	r2, #0
 8008af4:	f04f 0300 	mov.w	r3, #0
 8008af8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008afc:	4649      	mov	r1, r9
 8008afe:	008b      	lsls	r3, r1, #2
 8008b00:	4641      	mov	r1, r8
 8008b02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b06:	4641      	mov	r1, r8
 8008b08:	008a      	lsls	r2, r1, #2
 8008b0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008b0e:	f7f7 fbc7 	bl	80002a0 <__aeabi_uldivmod>
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	4b39      	ldr	r3, [pc, #228]	; (8008bfc <UART_SetConfig+0x4e4>)
 8008b18:	fba3 1302 	umull	r1, r3, r3, r2
 8008b1c:	095b      	lsrs	r3, r3, #5
 8008b1e:	2164      	movs	r1, #100	; 0x64
 8008b20:	fb01 f303 	mul.w	r3, r1, r3
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	011b      	lsls	r3, r3, #4
 8008b28:	3332      	adds	r3, #50	; 0x32
 8008b2a:	4a34      	ldr	r2, [pc, #208]	; (8008bfc <UART_SetConfig+0x4e4>)
 8008b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b30:	095b      	lsrs	r3, r3, #5
 8008b32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b36:	441c      	add	r4, r3
 8008b38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	673b      	str	r3, [r7, #112]	; 0x70
 8008b40:	677a      	str	r2, [r7, #116]	; 0x74
 8008b42:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008b46:	4642      	mov	r2, r8
 8008b48:	464b      	mov	r3, r9
 8008b4a:	1891      	adds	r1, r2, r2
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	415b      	adcs	r3, r3
 8008b50:	60fb      	str	r3, [r7, #12]
 8008b52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b56:	4641      	mov	r1, r8
 8008b58:	1851      	adds	r1, r2, r1
 8008b5a:	6039      	str	r1, [r7, #0]
 8008b5c:	4649      	mov	r1, r9
 8008b5e:	414b      	adcs	r3, r1
 8008b60:	607b      	str	r3, [r7, #4]
 8008b62:	f04f 0200 	mov.w	r2, #0
 8008b66:	f04f 0300 	mov.w	r3, #0
 8008b6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008b6e:	4659      	mov	r1, fp
 8008b70:	00cb      	lsls	r3, r1, #3
 8008b72:	4651      	mov	r1, sl
 8008b74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b78:	4651      	mov	r1, sl
 8008b7a:	00ca      	lsls	r2, r1, #3
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	4619      	mov	r1, r3
 8008b80:	4603      	mov	r3, r0
 8008b82:	4642      	mov	r2, r8
 8008b84:	189b      	adds	r3, r3, r2
 8008b86:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b88:	464b      	mov	r3, r9
 8008b8a:	460a      	mov	r2, r1
 8008b8c:	eb42 0303 	adc.w	r3, r2, r3
 8008b90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	663b      	str	r3, [r7, #96]	; 0x60
 8008b9c:	667a      	str	r2, [r7, #100]	; 0x64
 8008b9e:	f04f 0200 	mov.w	r2, #0
 8008ba2:	f04f 0300 	mov.w	r3, #0
 8008ba6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008baa:	4649      	mov	r1, r9
 8008bac:	008b      	lsls	r3, r1, #2
 8008bae:	4641      	mov	r1, r8
 8008bb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bb4:	4641      	mov	r1, r8
 8008bb6:	008a      	lsls	r2, r1, #2
 8008bb8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008bbc:	f7f7 fb70 	bl	80002a0 <__aeabi_uldivmod>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	4b0d      	ldr	r3, [pc, #52]	; (8008bfc <UART_SetConfig+0x4e4>)
 8008bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8008bca:	095b      	lsrs	r3, r3, #5
 8008bcc:	2164      	movs	r1, #100	; 0x64
 8008bce:	fb01 f303 	mul.w	r3, r1, r3
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	011b      	lsls	r3, r3, #4
 8008bd6:	3332      	adds	r3, #50	; 0x32
 8008bd8:	4a08      	ldr	r2, [pc, #32]	; (8008bfc <UART_SetConfig+0x4e4>)
 8008bda:	fba2 2303 	umull	r2, r3, r2, r3
 8008bde:	095b      	lsrs	r3, r3, #5
 8008be0:	f003 020f 	and.w	r2, r3, #15
 8008be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4422      	add	r2, r4
 8008bec:	609a      	str	r2, [r3, #8]
}
 8008bee:	bf00      	nop
 8008bf0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bfa:	bf00      	nop
 8008bfc:	51eb851f 	.word	0x51eb851f

08008c00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c00:	b084      	sub	sp, #16
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b084      	sub	sp, #16
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
 8008c0a:	f107 001c 	add.w	r0, r7, #28
 8008c0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d122      	bne.n	8008c5e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008c2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d105      	bne.n	8008c52 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f9c0 	bl	8008fd8 <USB_CoreReset>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	73fb      	strb	r3, [r7, #15]
 8008c5c:	e01a      	b.n	8008c94 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f9b4 	bl	8008fd8 <USB_CoreReset>
 8008c70:	4603      	mov	r3, r0
 8008c72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d106      	bne.n	8008c88 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	639a      	str	r2, [r3, #56]	; 0x38
 8008c86:	e005      	b.n	8008c94 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d10b      	bne.n	8008cb2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	f043 0206 	orr.w	r2, r3, #6
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f043 0220 	orr.w	r2, r3, #32
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008cbe:	b004      	add	sp, #16
 8008cc0:	4770      	bx	lr

08008cc2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b083      	sub	sp, #12
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	f043 0201 	orr.w	r2, r3, #1
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	f023 0201 	bic.w	r2, r3, #1
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	370c      	adds	r7, #12
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b084      	sub	sp, #16
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	460b      	mov	r3, r1
 8008d10:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008d12:	2300      	movs	r3, #0
 8008d14:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008d22:	78fb      	ldrb	r3, [r7, #3]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d115      	bne.n	8008d54 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d34:	2001      	movs	r0, #1
 8008d36:	f7fa f897 	bl	8002e68 <HAL_Delay>
      ms++;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f93a 	bl	8008fba <USB_GetMode>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d01e      	beq.n	8008d8a <USB_SetCurrentMode+0x84>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2b31      	cmp	r3, #49	; 0x31
 8008d50:	d9f0      	bls.n	8008d34 <USB_SetCurrentMode+0x2e>
 8008d52:	e01a      	b.n	8008d8a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d54:	78fb      	ldrb	r3, [r7, #3]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d115      	bne.n	8008d86 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d66:	2001      	movs	r0, #1
 8008d68:	f7fa f87e 	bl	8002e68 <HAL_Delay>
      ms++;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f921 	bl	8008fba <USB_GetMode>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d005      	beq.n	8008d8a <USB_SetCurrentMode+0x84>
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2b31      	cmp	r3, #49	; 0x31
 8008d82:	d9f0      	bls.n	8008d66 <USB_SetCurrentMode+0x60>
 8008d84:	e001      	b.n	8008d8a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e005      	b.n	8008d96 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2b32      	cmp	r3, #50	; 0x32
 8008d8e:	d101      	bne.n	8008d94 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e000      	b.n	8008d96 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
	...

08008da0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008daa:	2300      	movs	r3, #0
 8008dac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	3301      	adds	r3, #1
 8008db2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	4a13      	ldr	r2, [pc, #76]	; (8008e04 <USB_FlushTxFifo+0x64>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d901      	bls.n	8008dc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e01b      	b.n	8008df8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	daf2      	bge.n	8008dae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	019b      	lsls	r3, r3, #6
 8008dd0:	f043 0220 	orr.w	r2, r3, #32
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	4a08      	ldr	r2, [pc, #32]	; (8008e04 <USB_FlushTxFifo+0x64>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d901      	bls.n	8008dea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008de6:	2303      	movs	r3, #3
 8008de8:	e006      	b.n	8008df8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	f003 0320 	and.w	r3, r3, #32
 8008df2:	2b20      	cmp	r3, #32
 8008df4:	d0f0      	beq.n	8008dd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr
 8008e04:	00030d40 	.word	0x00030d40

08008e08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e10:	2300      	movs	r3, #0
 8008e12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	3301      	adds	r3, #1
 8008e18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	4a11      	ldr	r2, [pc, #68]	; (8008e64 <USB_FlushRxFifo+0x5c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d901      	bls.n	8008e26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	e018      	b.n	8008e58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	daf2      	bge.n	8008e14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2210      	movs	r2, #16
 8008e36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	4a08      	ldr	r2, [pc, #32]	; (8008e64 <USB_FlushRxFifo+0x5c>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d901      	bls.n	8008e4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e006      	b.n	8008e58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	f003 0310 	and.w	r3, r3, #16
 8008e52:	2b10      	cmp	r3, #16
 8008e54:	d0f0      	beq.n	8008e38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3714      	adds	r7, #20
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	00030d40 	.word	0x00030d40

08008e68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b089      	sub	sp, #36	; 0x24
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	4611      	mov	r1, r2
 8008e74:	461a      	mov	r2, r3
 8008e76:	460b      	mov	r3, r1
 8008e78:	71fb      	strb	r3, [r7, #7]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008e86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d123      	bne.n	8008ed6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008e8e:	88bb      	ldrh	r3, [r7, #4]
 8008e90:	3303      	adds	r3, #3
 8008e92:	089b      	lsrs	r3, r3, #2
 8008e94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008e96:	2300      	movs	r3, #0
 8008e98:	61bb      	str	r3, [r7, #24]
 8008e9a:	e018      	b.n	8008ece <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008e9c:	79fb      	ldrb	r3, [r7, #7]
 8008e9e:	031a      	lsls	r2, r3, #12
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	61bb      	str	r3, [r7, #24]
 8008ece:	69ba      	ldr	r2, [r7, #24]
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d3e2      	bcc.n	8008e9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3724      	adds	r7, #36	; 0x24
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b08b      	sub	sp, #44	; 0x2c
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008efa:	88fb      	ldrh	r3, [r7, #6]
 8008efc:	089b      	lsrs	r3, r3, #2
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008f02:	88fb      	ldrh	r3, [r7, #6]
 8008f04:	f003 0303 	and.w	r3, r3, #3
 8008f08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	623b      	str	r3, [r7, #32]
 8008f0e:	e014      	b.n	8008f3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1e:	3301      	adds	r3, #1
 8008f20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f24:	3301      	adds	r3, #1
 8008f26:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f30:	3301      	adds	r3, #1
 8008f32:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	3301      	adds	r3, #1
 8008f38:	623b      	str	r3, [r7, #32]
 8008f3a:	6a3a      	ldr	r2, [r7, #32]
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d3e6      	bcc.n	8008f10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008f42:	8bfb      	ldrh	r3, [r7, #30]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d01e      	beq.n	8008f86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f52:	461a      	mov	r2, r3
 8008f54:	f107 0310 	add.w	r3, r7, #16
 8008f58:	6812      	ldr	r2, [r2, #0]
 8008f5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	6a3b      	ldr	r3, [r7, #32]
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	00db      	lsls	r3, r3, #3
 8008f64:	fa22 f303 	lsr.w	r3, r2, r3
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6c:	701a      	strb	r2, [r3, #0]
      i++;
 8008f6e:	6a3b      	ldr	r3, [r7, #32]
 8008f70:	3301      	adds	r3, #1
 8008f72:	623b      	str	r3, [r7, #32]
      pDest++;
 8008f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f76:	3301      	adds	r3, #1
 8008f78:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008f7a:	8bfb      	ldrh	r3, [r7, #30]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008f80:	8bfb      	ldrh	r3, [r7, #30]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1ea      	bne.n	8008f5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	372c      	adds	r7, #44	; 0x2c
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	695b      	ldr	r3, [r3, #20]
 8008fa0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	699b      	ldr	r3, [r3, #24]
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	4013      	ands	r3, r2
 8008faa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008fac:	68fb      	ldr	r3, [r7, #12]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3714      	adds	r7, #20
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr

08008fba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008fba:	b480      	push	{r7}
 8008fbc:	b083      	sub	sp, #12
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	695b      	ldr	r3, [r3, #20]
 8008fc6:	f003 0301 	and.w	r3, r3, #1
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
	...

08008fd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	4a13      	ldr	r2, [pc, #76]	; (800903c <USB_CoreReset+0x64>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d901      	bls.n	8008ff6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	e01b      	b.n	800902e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	daf2      	bge.n	8008fe4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008ffe:	2300      	movs	r3, #0
 8009000:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	f043 0201 	orr.w	r2, r3, #1
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	3301      	adds	r3, #1
 8009012:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	4a09      	ldr	r2, [pc, #36]	; (800903c <USB_CoreReset+0x64>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d901      	bls.n	8009020 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800901c:	2303      	movs	r3, #3
 800901e:	e006      	b.n	800902e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	f003 0301 	and.w	r3, r3, #1
 8009028:	2b01      	cmp	r3, #1
 800902a:	d0f0      	beq.n	800900e <USB_CoreReset+0x36>

  return HAL_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	00030d40 	.word	0x00030d40

08009040 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009040:	b084      	sub	sp, #16
 8009042:	b580      	push	{r7, lr}
 8009044:	b086      	sub	sp, #24
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
 800904a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800904e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009060:	461a      	mov	r2, r3
 8009062:	2300      	movs	r3, #0
 8009064:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800906a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009076:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009082:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800908e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009092:	2b00      	cmp	r3, #0
 8009094:	d018      	beq.n	80090c8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009098:	2b01      	cmp	r3, #1
 800909a:	d10a      	bne.n	80090b2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090aa:	f043 0304 	orr.w	r3, r3, #4
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	e014      	b.n	80090dc <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090c0:	f023 0304 	bic.w	r3, r3, #4
 80090c4:	6013      	str	r3, [r2, #0]
 80090c6:	e009      	b.n	80090dc <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090d6:	f023 0304 	bic.w	r3, r3, #4
 80090da:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80090dc:	2110      	movs	r1, #16
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7ff fe5e 	bl	8008da0 <USB_FlushTxFifo>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d001      	beq.n	80090ee <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7ff fe8a 	bl	8008e08 <USB_FlushRxFifo>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80090fe:	2300      	movs	r3, #0
 8009100:	613b      	str	r3, [r7, #16]
 8009102:	e015      	b.n	8009130 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	4413      	add	r3, r2
 800910c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009110:	461a      	mov	r2, r3
 8009112:	f04f 33ff 	mov.w	r3, #4294967295
 8009116:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	015a      	lsls	r2, r3, #5
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	4413      	add	r3, r2
 8009120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009124:	461a      	mov	r2, r3
 8009126:	2300      	movs	r3, #0
 8009128:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	3301      	adds	r3, #1
 800912e:	613b      	str	r3, [r7, #16]
 8009130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009132:	693a      	ldr	r2, [r7, #16]
 8009134:	429a      	cmp	r2, r3
 8009136:	d3e5      	bcc.n	8009104 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f04f 32ff 	mov.w	r2, #4294967295
 8009144:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800914a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00b      	beq.n	800916a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009158:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a13      	ldr	r2, [pc, #76]	; (80091ac <USB_HostInit+0x16c>)
 800915e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a13      	ldr	r2, [pc, #76]	; (80091b0 <USB_HostInit+0x170>)
 8009164:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009168:	e009      	b.n	800917e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2280      	movs	r2, #128	; 0x80
 800916e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a10      	ldr	r2, [pc, #64]	; (80091b4 <USB_HostInit+0x174>)
 8009174:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a0f      	ldr	r2, [pc, #60]	; (80091b8 <USB_HostInit+0x178>)
 800917a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800917e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009180:	2b00      	cmp	r3, #0
 8009182:	d105      	bne.n	8009190 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	f043 0210 	orr.w	r2, r3, #16
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	699a      	ldr	r2, [r3, #24]
 8009194:	4b09      	ldr	r3, [pc, #36]	; (80091bc <USB_HostInit+0x17c>)
 8009196:	4313      	orrs	r3, r2
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800919c:	7dfb      	ldrb	r3, [r7, #23]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3718      	adds	r7, #24
 80091a2:	46bd      	mov	sp, r7
 80091a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091a8:	b004      	add	sp, #16
 80091aa:	4770      	bx	lr
 80091ac:	01000200 	.word	0x01000200
 80091b0:	00e00300 	.word	0x00e00300
 80091b4:	00600080 	.word	0x00600080
 80091b8:	004000e0 	.word	0x004000e0
 80091bc:	a3200008 	.word	0xa3200008

080091c0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	460b      	mov	r3, r1
 80091ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80091de:	f023 0303 	bic.w	r3, r3, #3
 80091e2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	78fb      	ldrb	r3, [r7, #3]
 80091ee:	f003 0303 	and.w	r3, r3, #3
 80091f2:	68f9      	ldr	r1, [r7, #12]
 80091f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80091f8:	4313      	orrs	r3, r2
 80091fa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80091fc:	78fb      	ldrb	r3, [r7, #3]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d107      	bne.n	8009212 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009208:	461a      	mov	r2, r3
 800920a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800920e:	6053      	str	r3, [r2, #4]
 8009210:	e009      	b.n	8009226 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009212:	78fb      	ldrb	r3, [r7, #3]
 8009214:	2b02      	cmp	r3, #2
 8009216:	d106      	bne.n	8009226 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800921e:	461a      	mov	r2, r3
 8009220:	f241 7370 	movw	r3, #6000	; 0x1770
 8009224:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3714      	adds	r7, #20
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009240:	2300      	movs	r3, #0
 8009242:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009254:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800925e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009262:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009264:	2064      	movs	r0, #100	; 0x64
 8009266:	f7f9 fdff 	bl	8002e68 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009272:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009276:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009278:	200a      	movs	r0, #10
 800927a:	f7f9 fdf5 	bl	8002e68 <HAL_Delay>

  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	460b      	mov	r3, r1
 8009292:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009298:	2300      	movs	r3, #0
 800929a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80092ac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d109      	bne.n	80092cc <USB_DriveVbus+0x44>
 80092b8:	78fb      	ldrb	r3, [r7, #3]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d106      	bne.n	80092cc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80092c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80092ca:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80092d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092d6:	d109      	bne.n	80092ec <USB_DriveVbus+0x64>
 80092d8:	78fb      	ldrb	r3, [r7, #3]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d106      	bne.n	80092ec <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80092e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092ea:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3714      	adds	r7, #20
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr

080092fa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80092fa:	b480      	push	{r7}
 80092fc:	b085      	sub	sp, #20
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009306:	2300      	movs	r3, #0
 8009308:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	0c5b      	lsrs	r3, r3, #17
 8009318:	f003 0303 	and.w	r3, r3, #3
}
 800931c:	4618      	mov	r0, r3
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	b29b      	uxth	r3, r3
}
 800933e:	4618      	mov	r0, r3
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
	...

0800934c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b088      	sub	sp, #32
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	4608      	mov	r0, r1
 8009356:	4611      	mov	r1, r2
 8009358:	461a      	mov	r2, r3
 800935a:	4603      	mov	r3, r0
 800935c:	70fb      	strb	r3, [r7, #3]
 800935e:	460b      	mov	r3, r1
 8009360:	70bb      	strb	r3, [r7, #2]
 8009362:	4613      	mov	r3, r2
 8009364:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800936e:	78fb      	ldrb	r3, [r7, #3]
 8009370:	015a      	lsls	r2, r3, #5
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	4413      	add	r3, r2
 8009376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800937a:	461a      	mov	r2, r3
 800937c:	f04f 33ff 	mov.w	r3, #4294967295
 8009380:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009382:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009386:	2b03      	cmp	r3, #3
 8009388:	d87e      	bhi.n	8009488 <USB_HC_Init+0x13c>
 800938a:	a201      	add	r2, pc, #4	; (adr r2, 8009390 <USB_HC_Init+0x44>)
 800938c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009390:	080093a1 	.word	0x080093a1
 8009394:	0800944b 	.word	0x0800944b
 8009398:	080093a1 	.word	0x080093a1
 800939c:	0800940d 	.word	0x0800940d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80093a0:	78fb      	ldrb	r3, [r7, #3]
 80093a2:	015a      	lsls	r2, r3, #5
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	4413      	add	r3, r2
 80093a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093ac:	461a      	mov	r2, r3
 80093ae:	f240 439d 	movw	r3, #1181	; 0x49d
 80093b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80093b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	da10      	bge.n	80093de <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80093bc:	78fb      	ldrb	r3, [r7, #3]
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	78fa      	ldrb	r2, [r7, #3]
 80093cc:	0151      	lsls	r1, r2, #5
 80093ce:	693a      	ldr	r2, [r7, #16]
 80093d0:	440a      	add	r2, r1
 80093d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093da:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80093dc:	e057      	b.n	800948e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d051      	beq.n	800948e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80093ea:	78fb      	ldrb	r3, [r7, #3]
 80093ec:	015a      	lsls	r2, r3, #5
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	4413      	add	r3, r2
 80093f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	78fa      	ldrb	r2, [r7, #3]
 80093fa:	0151      	lsls	r1, r2, #5
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	440a      	add	r2, r1
 8009400:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009404:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009408:	60d3      	str	r3, [r2, #12]
      break;
 800940a:	e040      	b.n	800948e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800940c:	78fb      	ldrb	r3, [r7, #3]
 800940e:	015a      	lsls	r2, r3, #5
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	4413      	add	r3, r2
 8009414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009418:	461a      	mov	r2, r3
 800941a:	f240 639d 	movw	r3, #1693	; 0x69d
 800941e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009420:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009424:	2b00      	cmp	r3, #0
 8009426:	da34      	bge.n	8009492 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009428:	78fb      	ldrb	r3, [r7, #3]
 800942a:	015a      	lsls	r2, r3, #5
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	4413      	add	r3, r2
 8009430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	78fa      	ldrb	r2, [r7, #3]
 8009438:	0151      	lsls	r1, r2, #5
 800943a:	693a      	ldr	r2, [r7, #16]
 800943c:	440a      	add	r2, r1
 800943e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009446:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009448:	e023      	b.n	8009492 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800944a:	78fb      	ldrb	r3, [r7, #3]
 800944c:	015a      	lsls	r2, r3, #5
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	4413      	add	r3, r2
 8009452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009456:	461a      	mov	r2, r3
 8009458:	f240 2325 	movw	r3, #549	; 0x225
 800945c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800945e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009462:	2b00      	cmp	r3, #0
 8009464:	da17      	bge.n	8009496 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009466:	78fb      	ldrb	r3, [r7, #3]
 8009468:	015a      	lsls	r2, r3, #5
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	4413      	add	r3, r2
 800946e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	78fa      	ldrb	r2, [r7, #3]
 8009476:	0151      	lsls	r1, r2, #5
 8009478:	693a      	ldr	r2, [r7, #16]
 800947a:	440a      	add	r2, r1
 800947c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009480:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009484:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009486:	e006      	b.n	8009496 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	77fb      	strb	r3, [r7, #31]
      break;
 800948c:	e004      	b.n	8009498 <USB_HC_Init+0x14c>
      break;
 800948e:	bf00      	nop
 8009490:	e002      	b.n	8009498 <USB_HC_Init+0x14c>
      break;
 8009492:	bf00      	nop
 8009494:	e000      	b.n	8009498 <USB_HC_Init+0x14c>
      break;
 8009496:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009498:	78fb      	ldrb	r3, [r7, #3]
 800949a:	015a      	lsls	r2, r3, #5
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	4413      	add	r3, r2
 80094a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	78fa      	ldrb	r2, [r7, #3]
 80094a8:	0151      	lsls	r1, r2, #5
 80094aa:	693a      	ldr	r2, [r7, #16]
 80094ac:	440a      	add	r2, r1
 80094ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094b2:	f043 0302 	orr.w	r3, r3, #2
 80094b6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094be:	699a      	ldr	r2, [r3, #24]
 80094c0:	78fb      	ldrb	r3, [r7, #3]
 80094c2:	f003 030f 	and.w	r3, r3, #15
 80094c6:	2101      	movs	r1, #1
 80094c8:	fa01 f303 	lsl.w	r3, r1, r3
 80094cc:	6939      	ldr	r1, [r7, #16]
 80094ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80094d2:	4313      	orrs	r3, r2
 80094d4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80094e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	da03      	bge.n	80094f2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80094ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094ee:	61bb      	str	r3, [r7, #24]
 80094f0:	e001      	b.n	80094f6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80094f2:	2300      	movs	r3, #0
 80094f4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f7ff feff 	bl	80092fa <USB_GetHostSpeed>
 80094fc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80094fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009502:	2b02      	cmp	r3, #2
 8009504:	d106      	bne.n	8009514 <USB_HC_Init+0x1c8>
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b02      	cmp	r3, #2
 800950a:	d003      	beq.n	8009514 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800950c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009510:	617b      	str	r3, [r7, #20]
 8009512:	e001      	b.n	8009518 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009514:	2300      	movs	r3, #0
 8009516:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009518:	787b      	ldrb	r3, [r7, #1]
 800951a:	059b      	lsls	r3, r3, #22
 800951c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009520:	78bb      	ldrb	r3, [r7, #2]
 8009522:	02db      	lsls	r3, r3, #11
 8009524:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009528:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800952a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800952e:	049b      	lsls	r3, r3, #18
 8009530:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009534:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009536:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009538:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800953c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009542:	78fb      	ldrb	r3, [r7, #3]
 8009544:	0159      	lsls	r1, r3, #5
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	440b      	add	r3, r1
 800954a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800954e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009554:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009556:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800955a:	2b03      	cmp	r3, #3
 800955c:	d003      	beq.n	8009566 <USB_HC_Init+0x21a>
 800955e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009562:	2b01      	cmp	r3, #1
 8009564:	d10f      	bne.n	8009586 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009566:	78fb      	ldrb	r3, [r7, #3]
 8009568:	015a      	lsls	r2, r3, #5
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	4413      	add	r3, r2
 800956e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	78fa      	ldrb	r2, [r7, #3]
 8009576:	0151      	lsls	r1, r2, #5
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	440a      	add	r2, r1
 800957c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009580:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009584:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009586:	7ffb      	ldrb	r3, [r7, #31]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3720      	adds	r7, #32
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b08c      	sub	sp, #48	; 0x30
 8009594:	af02      	add	r7, sp, #8
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	4613      	mov	r3, r2
 800959c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	785b      	ldrb	r3, [r3, #1]
 80095a6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80095a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095ac:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d02d      	beq.n	8009616 <USB_HC_StartXfer+0x86>
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	791b      	ldrb	r3, [r3, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d129      	bne.n	8009616 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80095c2:	79fb      	ldrb	r3, [r7, #7]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d117      	bne.n	80095f8 <USB_HC_StartXfer+0x68>
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	79db      	ldrb	r3, [r3, #7]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d003      	beq.n	80095d8 <USB_HC_StartXfer+0x48>
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	79db      	ldrb	r3, [r3, #7]
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	d10f      	bne.n	80095f8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	015a      	lsls	r2, r3, #5
 80095dc:	6a3b      	ldr	r3, [r7, #32]
 80095de:	4413      	add	r3, r2
 80095e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	69fa      	ldr	r2, [r7, #28]
 80095e8:	0151      	lsls	r1, r2, #5
 80095ea:	6a3a      	ldr	r2, [r7, #32]
 80095ec:	440a      	add	r2, r1
 80095ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095f6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80095f8:	79fb      	ldrb	r3, [r7, #7]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d10b      	bne.n	8009616 <USB_HC_StartXfer+0x86>
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	795b      	ldrb	r3, [r3, #5]
 8009602:	2b01      	cmp	r3, #1
 8009604:	d107      	bne.n	8009616 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	785b      	ldrb	r3, [r3, #1]
 800960a:	4619      	mov	r1, r3
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f000 fa0f 	bl	8009a30 <USB_DoPing>
      return HAL_OK;
 8009612:	2300      	movs	r3, #0
 8009614:	e0f8      	b.n	8009808 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	695b      	ldr	r3, [r3, #20]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d018      	beq.n	8009650 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	695b      	ldr	r3, [r3, #20]
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	8912      	ldrh	r2, [r2, #8]
 8009626:	4413      	add	r3, r2
 8009628:	3b01      	subs	r3, #1
 800962a:	68ba      	ldr	r2, [r7, #8]
 800962c:	8912      	ldrh	r2, [r2, #8]
 800962e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009632:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009634:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009636:	8b7b      	ldrh	r3, [r7, #26]
 8009638:	429a      	cmp	r2, r3
 800963a:	d90b      	bls.n	8009654 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800963c:	8b7b      	ldrh	r3, [r7, #26]
 800963e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009640:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009642:	68ba      	ldr	r2, [r7, #8]
 8009644:	8912      	ldrh	r2, [r2, #8]
 8009646:	fb03 f202 	mul.w	r2, r3, r2
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	611a      	str	r2, [r3, #16]
 800964e:	e001      	b.n	8009654 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009650:	2301      	movs	r3, #1
 8009652:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	78db      	ldrb	r3, [r3, #3]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d007      	beq.n	800966c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800965c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	8912      	ldrh	r2, [r2, #8]
 8009662:	fb03 f202 	mul.w	r2, r3, r2
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	611a      	str	r2, [r3, #16]
 800966a:	e003      	b.n	8009674 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	695a      	ldr	r2, [r3, #20]
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	691b      	ldr	r3, [r3, #16]
 8009678:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800967c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800967e:	04d9      	lsls	r1, r3, #19
 8009680:	4b63      	ldr	r3, [pc, #396]	; (8009810 <USB_HC_StartXfer+0x280>)
 8009682:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009684:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	7a9b      	ldrb	r3, [r3, #10]
 800968a:	075b      	lsls	r3, r3, #29
 800968c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009690:	69f9      	ldr	r1, [r7, #28]
 8009692:	0148      	lsls	r0, r1, #5
 8009694:	6a39      	ldr	r1, [r7, #32]
 8009696:	4401      	add	r1, r0
 8009698:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800969c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800969e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80096a0:	79fb      	ldrb	r3, [r7, #7]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d009      	beq.n	80096ba <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	68d9      	ldr	r1, [r3, #12]
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	015a      	lsls	r2, r3, #5
 80096ae:	6a3b      	ldr	r3, [r7, #32]
 80096b0:	4413      	add	r3, r2
 80096b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096b6:	460a      	mov	r2, r1
 80096b8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80096ba:	6a3b      	ldr	r3, [r7, #32]
 80096bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	f003 0301 	and.w	r3, r3, #1
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	bf0c      	ite	eq
 80096ca:	2301      	moveq	r3, #1
 80096cc:	2300      	movne	r3, #0
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	015a      	lsls	r2, r3, #5
 80096d6:	6a3b      	ldr	r3, [r7, #32]
 80096d8:	4413      	add	r3, r2
 80096da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	69fa      	ldr	r2, [r7, #28]
 80096e2:	0151      	lsls	r1, r2, #5
 80096e4:	6a3a      	ldr	r2, [r7, #32]
 80096e6:	440a      	add	r2, r1
 80096e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80096f0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	015a      	lsls	r2, r3, #5
 80096f6:	6a3b      	ldr	r3, [r7, #32]
 80096f8:	4413      	add	r3, r2
 80096fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	7e7b      	ldrb	r3, [r7, #25]
 8009702:	075b      	lsls	r3, r3, #29
 8009704:	69f9      	ldr	r1, [r7, #28]
 8009706:	0148      	lsls	r0, r1, #5
 8009708:	6a39      	ldr	r1, [r7, #32]
 800970a:	4401      	add	r1, r0
 800970c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009710:	4313      	orrs	r3, r2
 8009712:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	015a      	lsls	r2, r3, #5
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	4413      	add	r3, r2
 800971c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800972a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	78db      	ldrb	r3, [r3, #3]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d004      	beq.n	800973e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800973a:	613b      	str	r3, [r7, #16]
 800973c:	e003      	b.n	8009746 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009744:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800974c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	015a      	lsls	r2, r3, #5
 8009752:	6a3b      	ldr	r3, [r7, #32]
 8009754:	4413      	add	r3, r2
 8009756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800975a:	461a      	mov	r2, r3
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009760:	79fb      	ldrb	r3, [r7, #7]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009766:	2300      	movs	r3, #0
 8009768:	e04e      	b.n	8009808 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	78db      	ldrb	r3, [r3, #3]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d149      	bne.n	8009806 <USB_HC_StartXfer+0x276>
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d045      	beq.n	8009806 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	79db      	ldrb	r3, [r3, #7]
 800977e:	2b03      	cmp	r3, #3
 8009780:	d830      	bhi.n	80097e4 <USB_HC_StartXfer+0x254>
 8009782:	a201      	add	r2, pc, #4	; (adr r2, 8009788 <USB_HC_StartXfer+0x1f8>)
 8009784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009788:	08009799 	.word	0x08009799
 800978c:	080097bd 	.word	0x080097bd
 8009790:	08009799 	.word	0x08009799
 8009794:	080097bd 	.word	0x080097bd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	695b      	ldr	r3, [r3, #20]
 800979c:	3303      	adds	r3, #3
 800979e:	089b      	lsrs	r3, r3, #2
 80097a0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80097a2:	8afa      	ldrh	r2, [r7, #22]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d91c      	bls.n	80097e8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	699b      	ldr	r3, [r3, #24]
 80097b2:	f043 0220 	orr.w	r2, r3, #32
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	619a      	str	r2, [r3, #24]
        }
        break;
 80097ba:	e015      	b.n	80097e8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	695b      	ldr	r3, [r3, #20]
 80097c0:	3303      	adds	r3, #3
 80097c2:	089b      	lsrs	r3, r3, #2
 80097c4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80097c6:	8afa      	ldrh	r2, [r7, #22]
 80097c8:	6a3b      	ldr	r3, [r7, #32]
 80097ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d90a      	bls.n	80097ec <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	699b      	ldr	r3, [r3, #24]
 80097da:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80097e2:	e003      	b.n	80097ec <USB_HC_StartXfer+0x25c>

      default:
        break;
 80097e4:	bf00      	nop
 80097e6:	e002      	b.n	80097ee <USB_HC_StartXfer+0x25e>
        break;
 80097e8:	bf00      	nop
 80097ea:	e000      	b.n	80097ee <USB_HC_StartXfer+0x25e>
        break;
 80097ec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	68d9      	ldr	r1, [r3, #12]
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	785a      	ldrb	r2, [r3, #1]
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	695b      	ldr	r3, [r3, #20]
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	2000      	movs	r0, #0
 80097fe:	9000      	str	r0, [sp, #0]
 8009800:	68f8      	ldr	r0, [r7, #12]
 8009802:	f7ff fb31 	bl	8008e68 <USB_WritePacket>
  }

  return HAL_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3728      	adds	r7, #40	; 0x28
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	1ff80000 	.word	0x1ff80000

08009814 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	b29b      	uxth	r3, r3
}
 800982a:	4618      	mov	r0, r3
 800982c:	3714      	adds	r7, #20
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr

08009836 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009836:	b480      	push	{r7}
 8009838:	b089      	sub	sp, #36	; 0x24
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
 800983e:	460b      	mov	r3, r1
 8009840:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009846:	78fb      	ldrb	r3, [r7, #3]
 8009848:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800984a:	2300      	movs	r3, #0
 800984c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	015a      	lsls	r2, r3, #5
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	4413      	add	r3, r2
 8009856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	0c9b      	lsrs	r3, r3, #18
 800985e:	f003 0303 	and.w	r3, r3, #3
 8009862:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	015a      	lsls	r2, r3, #5
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	4413      	add	r3, r2
 800986c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	0fdb      	lsrs	r3, r3, #31
 8009874:	f003 0301 	and.w	r3, r3, #1
 8009878:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	f003 0320 	and.w	r3, r3, #32
 8009882:	2b20      	cmp	r3, #32
 8009884:	d104      	bne.n	8009890 <USB_HC_Halt+0x5a>
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d101      	bne.n	8009890 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800988c:	2300      	movs	r3, #0
 800988e:	e0c8      	b.n	8009a22 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d002      	beq.n	800989c <USB_HC_Halt+0x66>
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	2b02      	cmp	r3, #2
 800989a:	d163      	bne.n	8009964 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	015a      	lsls	r2, r3, #5
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	4413      	add	r3, r2
 80098a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	69ba      	ldr	r2, [r7, #24]
 80098ac:	0151      	lsls	r1, r2, #5
 80098ae:	69fa      	ldr	r2, [r7, #28]
 80098b0:	440a      	add	r2, r1
 80098b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098ba:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	f003 0320 	and.w	r3, r3, #32
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f040 80ab 	bne.w	8009a20 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d133      	bne.n	800993e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	015a      	lsls	r2, r3, #5
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	4413      	add	r3, r2
 80098de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	69ba      	ldr	r2, [r7, #24]
 80098e6:	0151      	lsls	r1, r2, #5
 80098e8:	69fa      	ldr	r2, [r7, #28]
 80098ea:	440a      	add	r2, r1
 80098ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098f4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	015a      	lsls	r2, r3, #5
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	4413      	add	r3, r2
 80098fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	69ba      	ldr	r2, [r7, #24]
 8009906:	0151      	lsls	r1, r2, #5
 8009908:	69fa      	ldr	r2, [r7, #28]
 800990a:	440a      	add	r2, r1
 800990c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009914:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	3301      	adds	r3, #1
 800991a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009922:	d81d      	bhi.n	8009960 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	015a      	lsls	r2, r3, #5
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	4413      	add	r3, r2
 800992c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009936:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800993a:	d0ec      	beq.n	8009916 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800993c:	e070      	b.n	8009a20 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	4413      	add	r3, r2
 8009946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	69ba      	ldr	r2, [r7, #24]
 800994e:	0151      	lsls	r1, r2, #5
 8009950:	69fa      	ldr	r2, [r7, #28]
 8009952:	440a      	add	r2, r1
 8009954:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009958:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800995c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800995e:	e05f      	b.n	8009a20 <USB_HC_Halt+0x1ea>
            break;
 8009960:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009962:	e05d      	b.n	8009a20 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	015a      	lsls	r2, r3, #5
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	4413      	add	r3, r2
 800996c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	69ba      	ldr	r2, [r7, #24]
 8009974:	0151      	lsls	r1, r2, #5
 8009976:	69fa      	ldr	r2, [r7, #28]
 8009978:	440a      	add	r2, r1
 800997a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800997e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009982:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009990:	2b00      	cmp	r3, #0
 8009992:	d133      	bne.n	80099fc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	015a      	lsls	r2, r3, #5
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	4413      	add	r3, r2
 800999c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	69ba      	ldr	r2, [r7, #24]
 80099a4:	0151      	lsls	r1, r2, #5
 80099a6:	69fa      	ldr	r2, [r7, #28]
 80099a8:	440a      	add	r2, r1
 80099aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	69ba      	ldr	r2, [r7, #24]
 80099c4:	0151      	lsls	r1, r2, #5
 80099c6:	69fa      	ldr	r2, [r7, #28]
 80099c8:	440a      	add	r2, r1
 80099ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099d2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	3301      	adds	r3, #1
 80099d8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099e0:	d81d      	bhi.n	8009a1e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	015a      	lsls	r2, r3, #5
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	4413      	add	r3, r2
 80099ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099f8:	d0ec      	beq.n	80099d4 <USB_HC_Halt+0x19e>
 80099fa:	e011      	b.n	8009a20 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	015a      	lsls	r2, r3, #5
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	4413      	add	r3, r2
 8009a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	69ba      	ldr	r2, [r7, #24]
 8009a0c:	0151      	lsls	r1, r2, #5
 8009a0e:	69fa      	ldr	r2, [r7, #28]
 8009a10:	440a      	add	r2, r1
 8009a12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a1a:	6013      	str	r3, [r2, #0]
 8009a1c:	e000      	b.n	8009a20 <USB_HC_Halt+0x1ea>
          break;
 8009a1e:	bf00      	nop
    }
  }

  return HAL_OK;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3724      	adds	r7, #36	; 0x24
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
	...

08009a30 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b087      	sub	sp, #28
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	460b      	mov	r3, r1
 8009a3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009a40:	78fb      	ldrb	r3, [r7, #3]
 8009a42:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009a44:	2301      	movs	r3, #1
 8009a46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	04da      	lsls	r2, r3, #19
 8009a4c:	4b15      	ldr	r3, [pc, #84]	; (8009aa4 <USB_DoPing+0x74>)
 8009a4e:	4013      	ands	r3, r2
 8009a50:	693a      	ldr	r2, [r7, #16]
 8009a52:	0151      	lsls	r1, r2, #5
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	440a      	add	r2, r1
 8009a58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a60:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	015a      	lsls	r2, r3, #5
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	4413      	add	r3, r2
 8009a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009a78:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a80:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	015a      	lsls	r2, r3, #5
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	4413      	add	r3, r2
 8009a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a8e:	461a      	mov	r2, r3
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	371c      	adds	r7, #28
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	1ff80000 	.word	0x1ff80000

08009aa8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b088      	sub	sp, #32
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7ff f911 	bl	8008ce4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009ac2:	2110      	movs	r1, #16
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f7ff f96b 	bl	8008da0 <USB_FlushTxFifo>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d001      	beq.n	8009ad4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7ff f997 	bl	8008e08 <USB_FlushRxFifo>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d001      	beq.n	8009ae4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	61bb      	str	r3, [r7, #24]
 8009ae8:	e01f      	b.n	8009b2a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	015a      	lsls	r2, r3, #5
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	4413      	add	r3, r2
 8009af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b00:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b08:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b10:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	015a      	lsls	r2, r3, #5
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	4413      	add	r3, r2
 8009b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b1e:	461a      	mov	r2, r3
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	3301      	adds	r3, #1
 8009b28:	61bb      	str	r3, [r7, #24]
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	2b0f      	cmp	r3, #15
 8009b2e:	d9dc      	bls.n	8009aea <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009b30:	2300      	movs	r3, #0
 8009b32:	61bb      	str	r3, [r7, #24]
 8009b34:	e034      	b.n	8009ba0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	015a      	lsls	r2, r3, #5
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b4c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b54:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b5c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	015a      	lsls	r2, r3, #5
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	4413      	add	r3, r2
 8009b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	3301      	adds	r3, #1
 8009b74:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b7c:	d80c      	bhi.n	8009b98 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	015a      	lsls	r2, r3, #5
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	4413      	add	r3, r2
 8009b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b94:	d0ec      	beq.n	8009b70 <USB_StopHost+0xc8>
 8009b96:	e000      	b.n	8009b9a <USB_StopHost+0xf2>
        break;
 8009b98:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	61bb      	str	r3, [r7, #24]
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	2b0f      	cmp	r3, #15
 8009ba4:	d9c7      	bls.n	8009b36 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bac:	461a      	mov	r2, r3
 8009bae:	f04f 33ff 	mov.w	r3, #4294967295
 8009bb2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7ff f880 	bl	8008cc2 <USB_EnableGlobalInt>

  return ret;
 8009bc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3720      	adds	r7, #32
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  //retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
	FATFS_LinkDriver(&SD0_Driver, SD0Path);
 8009bd0:	4908      	ldr	r1, [pc, #32]	; (8009bf4 <MX_FATFS_Init+0x28>)
 8009bd2:	4809      	ldr	r0, [pc, #36]	; (8009bf8 <MX_FATFS_Init+0x2c>)
 8009bd4:	f007 fc20 	bl	8011418 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD1_Driver, SD1Path);
 8009bd8:	4908      	ldr	r1, [pc, #32]	; (8009bfc <MX_FATFS_Init+0x30>)
 8009bda:	4809      	ldr	r0, [pc, #36]	; (8009c00 <MX_FATFS_Init+0x34>)
 8009bdc:	f007 fc1c 	bl	8011418 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD2_Driver, SD2Path);
 8009be0:	4908      	ldr	r1, [pc, #32]	; (8009c04 <MX_FATFS_Init+0x38>)
 8009be2:	4809      	ldr	r0, [pc, #36]	; (8009c08 <MX_FATFS_Init+0x3c>)
 8009be4:	f007 fc18 	bl	8011418 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD3_Driver, SD3Path);
 8009be8:	4908      	ldr	r1, [pc, #32]	; (8009c0c <MX_FATFS_Init+0x40>)
 8009bea:	4809      	ldr	r0, [pc, #36]	; (8009c10 <MX_FATFS_Init+0x44>)
 8009bec:	f007 fc14 	bl	8011418 <FATFS_LinkDriver>


  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009bf0:	bf00      	nop
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	20001dd4 	.word	0x20001dd4
 8009bf8:	20000240 	.word	0x20000240
 8009bfc:	20001dd8 	.word	0x20001dd8
 8009c00:	20000254 	.word	0x20000254
 8009c04:	20001ddc 	.word	0x20001ddc
 8009c08:	20000268 	.word	0x20000268
 8009c0c:	20001de0 	.word	0x20001de0
 8009c10:	2000027c 	.word	0x2000027c

08009c14 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009c14:	b480      	push	{r7}
 8009c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009c18:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <SD0_initialize>:
  * @brief  Initializes a Drive
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_initialize (BYTE pdrv)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 8009c2e:	2000      	movs	r0, #0
 8009c30:	f7f8 fa64 	bl	80020fc <sd_ss_set_active>
	return USER_initialize(pdrv);
 8009c34:	79fb      	ldrb	r3, [r7, #7]
 8009c36:	4618      	mov	r0, r3
 8009c38:	f000 f838 	bl	8009cac <USER_initialize>
 8009c3c:	4603      	mov	r3, r0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3708      	adds	r7, #8
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <SD1_initialize>:
DSTATUS SD1_initialize (BYTE pdrv)
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b082      	sub	sp, #8
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 8009c50:	2001      	movs	r0, #1
 8009c52:	f7f8 fa53 	bl	80020fc <sd_ss_set_active>
	return USER_initialize(pdrv);
 8009c56:	79fb      	ldrb	r3, [r7, #7]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f000 f827 	bl	8009cac <USER_initialize>
 8009c5e:	4603      	mov	r3, r0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <SD2_initialize>:
DSTATUS SD2_initialize (BYTE pdrv)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	4603      	mov	r3, r0
 8009c70:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 8009c72:	2002      	movs	r0, #2
 8009c74:	f7f8 fa42 	bl	80020fc <sd_ss_set_active>
	return USER_initialize(pdrv);
 8009c78:	79fb      	ldrb	r3, [r7, #7]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 f816 	bl	8009cac <USER_initialize>
 8009c80:	4603      	mov	r3, r0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <SD3_initialize>:
DSTATUS SD3_initialize (BYTE pdrv)
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b082      	sub	sp, #8
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	4603      	mov	r3, r0
 8009c92:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 8009c94:	2003      	movs	r0, #3
 8009c96:	f7f8 fa31 	bl	80020fc <sd_ss_set_active>
	return USER_initialize(pdrv);
 8009c9a:	79fb      	ldrb	r3, [r7, #7]
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f000 f805 	bl	8009cac <USER_initialize>
 8009ca2:	4603      	mov	r3, r0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3708      	adds	r7, #8
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <USER_initialize>:

DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//SD_PowerOn();
	SS_SD_SELECT();
 8009cb6:	f7f8 fa3f 	bl	8002138 <sd_ss_active_pin_down>
	if(sd_ini()==0) {Stat &= ~STA_NOINIT;} // STA_NOINIT
 8009cba:	f7f8 fabf 	bl	800223c <sd_ini>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d107      	bne.n	8009cd4 <USER_initialize+0x28>
 8009cc4:	4b08      	ldr	r3, [pc, #32]	; (8009ce8 <USER_initialize+0x3c>)
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	f023 0301 	bic.w	r3, r3, #1
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	4b05      	ldr	r3, [pc, #20]	; (8009ce8 <USER_initialize+0x3c>)
 8009cd2:	701a      	strb	r2, [r3, #0]
	SS_SD_DESELECT();
 8009cd4:	f7f8 fa40 	bl	8002158 <sd_ss_active_pin_up>
    return Stat;
 8009cd8:	4b03      	ldr	r3, [pc, #12]	; (8009ce8 <USER_initialize+0x3c>)
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	2000023d 	.word	0x2000023d

08009cec <SD0_status>:
  * @brief  Gets Disk Status
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_status (BYTE pdrv)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	f7f8 fa00 	bl	80020fc <sd_ss_set_active>
	return USER_status(pdrv);
 8009cfc:	79fb      	ldrb	r3, [r7, #7]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f000 f838 	bl	8009d74 <USER_status>
 8009d04:	4603      	mov	r3, r0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3708      	adds	r7, #8
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <SD1_status>:
DSTATUS SD1_status (BYTE pdrv)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b082      	sub	sp, #8
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	4603      	mov	r3, r0
 8009d16:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 8009d18:	2001      	movs	r0, #1
 8009d1a:	f7f8 f9ef 	bl	80020fc <sd_ss_set_active>
	return USER_status(pdrv);
 8009d1e:	79fb      	ldrb	r3, [r7, #7]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f000 f827 	bl	8009d74 <USER_status>
 8009d26:	4603      	mov	r3, r0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <SD2_status>:
DSTATUS SD2_status (BYTE pdrv)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	4603      	mov	r3, r0
 8009d38:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 8009d3a:	2002      	movs	r0, #2
 8009d3c:	f7f8 f9de 	bl	80020fc <sd_ss_set_active>
	return USER_status(pdrv);
 8009d40:	79fb      	ldrb	r3, [r7, #7]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 f816 	bl	8009d74 <USER_status>
 8009d48:	4603      	mov	r3, r0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <SD3_status>:
DSTATUS SD3_status (BYTE pdrv)
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b082      	sub	sp, #8
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	4603      	mov	r3, r0
 8009d5a:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 8009d5c:	2003      	movs	r0, #3
 8009d5e:	f7f8 f9cd 	bl	80020fc <sd_ss_set_active>
	return USER_status(pdrv);
 8009d62:	79fb      	ldrb	r3, [r7, #7]
 8009d64:	4618      	mov	r0, r3
 8009d66:	f000 f805 	bl	8009d74 <USER_status>
 8009d6a:	4603      	mov	r3, r0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3708      	adds	r7, #8
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <USER_status>:

DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	SS_SD_SELECT();
 8009d7e:	f7f8 f9db 	bl	8002138 <sd_ss_active_pin_down>
	if (pdrv) return STA_NOINIT;
 8009d82:	79fb      	ldrb	r3, [r7, #7]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d001      	beq.n	8009d8c <USER_status+0x18>
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e004      	b.n	8009d96 <USER_status+0x22>
	SS_SD_DESELECT();
 8009d8c:	f7f8 f9e4 	bl	8002158 <sd_ss_active_pin_up>
    return Stat;
 8009d90:	4b03      	ldr	r3, [pc, #12]	; (8009da0 <USER_status+0x2c>)
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	2000023d 	.word	0x2000023d

08009da4 <SD0_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DSTATUS SD0_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60b9      	str	r1, [r7, #8]
 8009dac:	607a      	str	r2, [r7, #4]
 8009dae:	603b      	str	r3, [r7, #0]
 8009db0:	4603      	mov	r3, r0
 8009db2:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 8009db4:	2000      	movs	r0, #0
 8009db6:	f7f8 f9a1 	bl	80020fc <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8009dba:	7bf8      	ldrb	r0, [r7, #15]
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	68b9      	ldr	r1, [r7, #8]
 8009dc2:	f000 f847 	bl	8009e54 <USER_read>
 8009dc6:	4603      	mov	r3, r0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <SD1_read>:
DSTATUS SD1_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60b9      	str	r1, [r7, #8]
 8009dd8:	607a      	str	r2, [r7, #4]
 8009dda:	603b      	str	r3, [r7, #0]
 8009ddc:	4603      	mov	r3, r0
 8009dde:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 8009de0:	2001      	movs	r0, #1
 8009de2:	f7f8 f98b 	bl	80020fc <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8009de6:	7bf8      	ldrb	r0, [r7, #15]
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	68b9      	ldr	r1, [r7, #8]
 8009dee:	f000 f831 	bl	8009e54 <USER_read>
 8009df2:	4603      	mov	r3, r0
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3710      	adds	r7, #16
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <SD2_read>:
DSTATUS SD2_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60b9      	str	r1, [r7, #8]
 8009e04:	607a      	str	r2, [r7, #4]
 8009e06:	603b      	str	r3, [r7, #0]
 8009e08:	4603      	mov	r3, r0
 8009e0a:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 8009e0c:	2002      	movs	r0, #2
 8009e0e:	f7f8 f975 	bl	80020fc <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8009e12:	7bf8      	ldrb	r0, [r7, #15]
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	68b9      	ldr	r1, [r7, #8]
 8009e1a:	f000 f81b 	bl	8009e54 <USER_read>
 8009e1e:	4603      	mov	r3, r0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <SD3_read>:
DSTATUS SD3_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60b9      	str	r1, [r7, #8]
 8009e30:	607a      	str	r2, [r7, #4]
 8009e32:	603b      	str	r3, [r7, #0]
 8009e34:	4603      	mov	r3, r0
 8009e36:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 8009e38:	2003      	movs	r0, #3
 8009e3a:	f7f8 f95f 	bl	80020fc <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8009e3e:	7bf8      	ldrb	r0, [r7, #15]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	68b9      	ldr	r1, [r7, #8]
 8009e46:	f000 f805 	bl	8009e54 <USER_read>
 8009e4a:	4603      	mov	r3, r0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60b9      	str	r1, [r7, #8]
 8009e5c:	607a      	str	r2, [r7, #4]
 8009e5e:	603b      	str	r3, [r7, #0]
 8009e60:	4603      	mov	r3, r0
 8009e62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	SS_SD_SELECT();
 8009e64:	f7f8 f968 	bl	8002138 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 8009e68:	7bfb      	ldrb	r3, [r7, #15]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d102      	bne.n	8009e74 <USER_read+0x20>
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d101      	bne.n	8009e78 <USER_read+0x24>
 8009e74:	2304      	movs	r3, #4
 8009e76:	e043      	b.n	8009f00 <USER_read+0xac>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009e78:	4b23      	ldr	r3, [pc, #140]	; (8009f08 <USER_read+0xb4>)
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	f003 0301 	and.w	r3, r3, #1
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d001      	beq.n	8009e8a <USER_read+0x36>
 8009e86:	2303      	movs	r3, #3
 8009e88:	e03a      	b.n	8009f00 <USER_read+0xac>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 8009e8a:	4b20      	ldr	r3, [pc, #128]	; (8009f0c <USER_read+0xb8>)
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	f003 0304 	and.w	r3, r3, #4
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d102      	bne.n	8009e9e <USER_read+0x4a>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	025b      	lsls	r3, r3, #9
 8009e9c:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d106      	bne.n	8009eb2 <USER_read+0x5e>
	{
	  SD_Read_Block(buff,sector); //Ð¡Ñ‡Ð¸Ñ‚Ð°ÐµÐ¼ Ð±Ð»Ð¾Ðº Ð² Ð±ÑƒÑ„ÐµÑ€
 8009ea4:	6879      	ldr	r1, [r7, #4]
 8009ea6:	68b8      	ldr	r0, [r7, #8]
 8009ea8:	f7f8 fb01 	bl	80024ae <SD_Read_Block>
	  count = 0;
 8009eac:	2300      	movs	r3, #0
 8009eae:	603b      	str	r3, [r7, #0]
 8009eb0:	e01c      	b.n	8009eec <USER_read+0x98>
	}
	else /* Multiple block read */
	{
		do{
			SD_Read_Block((BYTE*)buff,sector);
 8009eb2:	6879      	ldr	r1, [r7, #4]
 8009eb4:	68b8      	ldr	r0, [r7, #8]
 8009eb6:	f7f8 fafa 	bl	80024ae <SD_Read_Block>
			if (!(sdinfo.type & 4)){
 8009eba:	4b14      	ldr	r3, [pc, #80]	; (8009f0c <USER_read+0xb8>)
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	f003 0304 	and.w	r3, r3, #4
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d104      	bne.n	8009ed2 <USER_read+0x7e>
				sector+=512;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009ece:	607b      	str	r3, [r7, #4]
 8009ed0:	e002      	b.n	8009ed8 <USER_read+0x84>
			}
			else sector++;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	607b      	str	r3, [r7, #4]
			buff+=512;
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009ede:	60bb      	str	r3, [r7, #8]
			count--;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	603b      	str	r3, [r7, #0]
		}while(count>0);
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1e2      	bne.n	8009eb2 <USER_read+0x5e>
	}
	SPI_Release();
 8009eec:	f7f8 fad8 	bl	80024a0 <SPI_Release>
	SS_SD_DESELECT();
 8009ef0:	f7f8 f932 	bl	8002158 <sd_ss_active_pin_up>
	return count ? RES_ERROR : RES_OK;
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	bf14      	ite	ne
 8009efa:	2301      	movne	r3, #1
 8009efc:	2300      	moveq	r3, #0
 8009efe:	b2db      	uxtb	r3, r3
    return RES_OK;
  /* USER CODE END READ */
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	2000023d 	.word	0x2000023d
 8009f0c:	20001b38 	.word	0x20001b38

08009f10 <SD0_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DSTATUS SD0_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	60b9      	str	r1, [r7, #8]
 8009f18:	607a      	str	r2, [r7, #4]
 8009f1a:	603b      	str	r3, [r7, #0]
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 8009f20:	2000      	movs	r0, #0
 8009f22:	f7f8 f8eb 	bl	80020fc <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8009f26:	7bf8      	ldrb	r0, [r7, #15]
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	68b9      	ldr	r1, [r7, #8]
 8009f2e:	f000 f847 	bl	8009fc0 <USER_write>
 8009f32:	4603      	mov	r3, r0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3710      	adds	r7, #16
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <SD1_write>:
DSTATUS SD1_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60b9      	str	r1, [r7, #8]
 8009f44:	607a      	str	r2, [r7, #4]
 8009f46:	603b      	str	r3, [r7, #0]
 8009f48:	4603      	mov	r3, r0
 8009f4a:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 8009f4c:	2001      	movs	r0, #1
 8009f4e:	f7f8 f8d5 	bl	80020fc <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8009f52:	7bf8      	ldrb	r0, [r7, #15]
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	68b9      	ldr	r1, [r7, #8]
 8009f5a:	f000 f831 	bl	8009fc0 <USER_write>
 8009f5e:	4603      	mov	r3, r0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <SD2_write>:
DSTATUS SD2_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60b9      	str	r1, [r7, #8]
 8009f70:	607a      	str	r2, [r7, #4]
 8009f72:	603b      	str	r3, [r7, #0]
 8009f74:	4603      	mov	r3, r0
 8009f76:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 8009f78:	2002      	movs	r0, #2
 8009f7a:	f7f8 f8bf 	bl	80020fc <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8009f7e:	7bf8      	ldrb	r0, [r7, #15]
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	68b9      	ldr	r1, [r7, #8]
 8009f86:	f000 f81b 	bl	8009fc0 <USER_write>
 8009f8a:	4603      	mov	r3, r0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <SD3_write>:
DSTATUS SD3_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60b9      	str	r1, [r7, #8]
 8009f9c:	607a      	str	r2, [r7, #4]
 8009f9e:	603b      	str	r3, [r7, #0]
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 8009fa4:	2003      	movs	r0, #3
 8009fa6:	f7f8 f8a9 	bl	80020fc <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8009faa:	7bf8      	ldrb	r0, [r7, #15]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	68b9      	ldr	r1, [r7, #8]
 8009fb2:	f000 f805 	bl	8009fc0 <USER_write>
 8009fb6:	4603      	mov	r3, r0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3710      	adds	r7, #16
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b086      	sub	sp, #24
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60b9      	str	r1, [r7, #8]
 8009fc8:	607a      	str	r2, [r7, #4]
 8009fca:	603b      	str	r3, [r7, #0]
 8009fcc:	4603      	mov	r3, r0
 8009fce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	uint8_t res;
	SS_SD_SELECT();
 8009fd0:	f7f8 f8b2 	bl	8002138 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 8009fd4:	7bfb      	ldrb	r3, [r7, #15]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d102      	bne.n	8009fe0 <USER_write+0x20>
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d101      	bne.n	8009fe4 <USER_write+0x24>
 8009fe0:	2304      	movs	r3, #4
 8009fe2:	e02c      	b.n	800a03e <USER_write+0x7e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009fe4:	4b18      	ldr	r3, [pc, #96]	; (800a048 <USER_write+0x88>)
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	f003 0301 	and.w	r3, r3, #1
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d001      	beq.n	8009ff6 <USER_write+0x36>
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	e023      	b.n	800a03e <USER_write+0x7e>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8009ff6:	4b14      	ldr	r3, [pc, #80]	; (800a048 <USER_write+0x88>)
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	f003 0304 	and.w	r3, r3, #4
 800a000:	2b00      	cmp	r3, #0
 800a002:	d001      	beq.n	800a008 <USER_write+0x48>
 800a004:	2302      	movs	r3, #2
 800a006:	e01a      	b.n	800a03e <USER_write+0x7e>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800a008:	4b10      	ldr	r3, [pc, #64]	; (800a04c <USER_write+0x8c>)
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	f003 0304 	and.w	r3, r3, #4
 800a012:	2b00      	cmp	r3, #0
 800a014:	d102      	bne.n	800a01c <USER_write+0x5c>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	025b      	lsls	r3, r3, #9
 800a01a:	607b      	str	r3, [r7, #4]
  	res=SD_Write_Blocks((BYTE*)buff,sector,count);
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	b29b      	uxth	r3, r3
 800a020:	461a      	mov	r2, r3
 800a022:	6879      	ldr	r1, [r7, #4]
 800a024:	68b8      	ldr	r0, [r7, #8]
 800a026:	f7f8 fa87 	bl	8002538 <SD_Write_Blocks>
 800a02a:	4603      	mov	r3, r0
 800a02c:	75fb      	strb	r3, [r7, #23]
	SS_SD_DESELECT();
 800a02e:	f7f8 f893 	bl	8002158 <sd_ss_active_pin_up>

	return res ? RES_ERROR : RES_OK;
 800a032:	7dfb      	ldrb	r3, [r7, #23]
 800a034:	2b00      	cmp	r3, #0
 800a036:	bf14      	ite	ne
 800a038:	2301      	movne	r3, #1
 800a03a:	2300      	moveq	r3, #0
 800a03c:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3718      	adds	r7, #24
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	2000023d 	.word	0x2000023d
 800a04c:	20001b38 	.word	0x20001b38

0800a050 <SD0_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DSTATUS SD0_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	4603      	mov	r3, r0
 800a058:	603a      	str	r2, [r7, #0]
 800a05a:	71fb      	strb	r3, [r7, #7]
 800a05c:	460b      	mov	r3, r1
 800a05e:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(0);
 800a060:	2000      	movs	r0, #0
 800a062:	f7f8 f84b 	bl	80020fc <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800a066:	79b9      	ldrb	r1, [r7, #6]
 800a068:	79fb      	ldrb	r3, [r7, #7]
 800a06a:	683a      	ldr	r2, [r7, #0]
 800a06c:	4618      	mov	r0, r3
 800a06e:	f000 f847 	bl	800a100 <USER_ioctl>
 800a072:	4603      	mov	r3, r0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <SD1_ioctl>:
DSTATUS SD1_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	4603      	mov	r3, r0
 800a084:	603a      	str	r2, [r7, #0]
 800a086:	71fb      	strb	r3, [r7, #7]
 800a088:	460b      	mov	r3, r1
 800a08a:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(1);
 800a08c:	2001      	movs	r0, #1
 800a08e:	f7f8 f835 	bl	80020fc <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800a092:	79b9      	ldrb	r1, [r7, #6]
 800a094:	79fb      	ldrb	r3, [r7, #7]
 800a096:	683a      	ldr	r2, [r7, #0]
 800a098:	4618      	mov	r0, r3
 800a09a:	f000 f831 	bl	800a100 <USER_ioctl>
 800a09e:	4603      	mov	r3, r0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <SD2_ioctl>:
DSTATUS SD2_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	603a      	str	r2, [r7, #0]
 800a0b2:	71fb      	strb	r3, [r7, #7]
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(2);
 800a0b8:	2002      	movs	r0, #2
 800a0ba:	f7f8 f81f 	bl	80020fc <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800a0be:	79b9      	ldrb	r1, [r7, #6]
 800a0c0:	79fb      	ldrb	r3, [r7, #7]
 800a0c2:	683a      	ldr	r2, [r7, #0]
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f000 f81b 	bl	800a100 <USER_ioctl>
 800a0ca:	4603      	mov	r3, r0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3708      	adds	r7, #8
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <SD3_ioctl>:
DSTATUS SD3_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	4603      	mov	r3, r0
 800a0dc:	603a      	str	r2, [r7, #0]
 800a0de:	71fb      	strb	r3, [r7, #7]
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(3);
 800a0e4:	2003      	movs	r0, #3
 800a0e6:	f7f8 f809 	bl	80020fc <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800a0ea:	79b9      	ldrb	r1, [r7, #6]
 800a0ec:	79fb      	ldrb	r3, [r7, #7]
 800a0ee:	683a      	ldr	r2, [r7, #0]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f000 f805 	bl	800a100 <USER_ioctl>
 800a0f6:	4603      	mov	r3, r0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3708      	adds	r7, #8
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	4603      	mov	r3, r0
 800a108:	603a      	str	r2, [r7, #0]
 800a10a:	71fb      	strb	r3, [r7, #7]
 800a10c:	460b      	mov	r3, r1
 800a10e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res;
	sd_ss_set_active(pdrv);
 800a110:	79fb      	ldrb	r3, [r7, #7]
 800a112:	4618      	mov	r0, r3
 800a114:	f7f7 fff2 	bl	80020fc <sd_ss_set_active>
	SS_SD_SELECT();
 800a118:	f7f8 f80e 	bl	8002138 <sd_ss_active_pin_down>
	if (pdrv) return RES_PARERR;
 800a11c:	79fb      	ldrb	r3, [r7, #7]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d001      	beq.n	800a126 <USER_ioctl+0x26>
 800a122:	2304      	movs	r3, #4
 800a124:	e02a      	b.n	800a17c <USER_ioctl+0x7c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a126:	4b17      	ldr	r3, [pc, #92]	; (800a184 <USER_ioctl+0x84>)
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	f003 0301 	and.w	r3, r3, #1
 800a130:	2b00      	cmp	r3, #0
 800a132:	d001      	beq.n	800a138 <USER_ioctl+0x38>
 800a134:	2303      	movs	r3, #3
 800a136:	e021      	b.n	800a17c <USER_ioctl+0x7c>
	res = RES_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	73fb      	strb	r3, [r7, #15]
	switch (cmd)
 800a13c:	79bb      	ldrb	r3, [r7, #6]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d002      	beq.n	800a148 <USER_ioctl+0x48>
 800a142:	2b02      	cmp	r3, #2
 800a144:	d00a      	beq.n	800a15c <USER_ioctl+0x5c>
 800a146:	e010      	b.n	800a16a <USER_ioctl+0x6a>
	{
	  case CTRL_SYNC : /* Flush dirty buffer if present */
	    SS_SD_SELECT();
 800a148:	f7f7 fff6 	bl	8002138 <sd_ss_active_pin_down>
	    if (SPI_wait_ready() == 0xFF)
 800a14c:	f7f8 f931 	bl	80023b2 <SPI_wait_ready>
 800a150:	4603      	mov	r3, r0
 800a152:	2bff      	cmp	r3, #255	; 0xff
 800a154:	d10c      	bne.n	800a170 <USER_ioctl+0x70>
	    res = RES_OK;
 800a156:	2300      	movs	r3, #0
 800a158:	73fb      	strb	r3, [r7, #15]
	    break;
 800a15a:	e009      	b.n	800a170 <USER_ioctl+0x70>
	  case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
	    *(WORD*)buff = 512;
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a162:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 800a164:	2300      	movs	r3, #0
 800a166:	73fb      	strb	r3, [r7, #15]
	    break;
 800a168:	e003      	b.n	800a172 <USER_ioctl+0x72>
	  default:
	    res = RES_PARERR;
 800a16a:	2304      	movs	r3, #4
 800a16c:	73fb      	strb	r3, [r7, #15]
 800a16e:	e000      	b.n	800a172 <USER_ioctl+0x72>
	    break;
 800a170:	bf00      	nop
	}
	SPI_Release();
 800a172:	f7f8 f995 	bl	80024a0 <SPI_Release>
	SS_SD_DESELECT();
 800a176:	f7f7 ffef 	bl	8002158 <sd_ss_active_pin_up>
    return res;
 800a17a:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	2000023d 	.word	0x2000023d

0800a188 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a188:	b590      	push	{r4, r7, lr}
 800a18a:	b089      	sub	sp, #36	; 0x24
 800a18c:	af04      	add	r7, sp, #16
 800a18e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a190:	2301      	movs	r3, #1
 800a192:	2202      	movs	r2, #2
 800a194:	2102      	movs	r1, #2
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 fdb0 	bl	800acfc <USBH_FindInterface>
 800a19c:	4603      	mov	r3, r0
 800a19e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a1a0:	7bfb      	ldrb	r3, [r7, #15]
 800a1a2:	2bff      	cmp	r3, #255	; 0xff
 800a1a4:	d002      	beq.n	800a1ac <USBH_CDC_InterfaceInit+0x24>
 800a1a6:	7bfb      	ldrb	r3, [r7, #15]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d901      	bls.n	800a1b0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	e13d      	b.n	800a42c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a1b0:	7bfb      	ldrb	r3, [r7, #15]
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 fd85 	bl	800acc4 <USBH_SelectInterface>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a1be:	7bbb      	ldrb	r3, [r7, #14]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d001      	beq.n	800a1c8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a1c4:	2302      	movs	r3, #2
 800a1c6:	e131      	b.n	800a42c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a1ce:	2050      	movs	r0, #80	; 0x50
 800a1d0:	f00a f934 	bl	801443c <malloc>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1de:	69db      	ldr	r3, [r3, #28]
 800a1e0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d101      	bne.n	800a1ec <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a1e8:	2302      	movs	r3, #2
 800a1ea:	e11f      	b.n	800a42c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a1ec:	2250      	movs	r2, #80	; 0x50
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	68b8      	ldr	r0, [r7, #8]
 800a1f2:	f00a f941 	bl	8014478 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a1f6:	7bfb      	ldrb	r3, [r7, #15]
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	211a      	movs	r1, #26
 800a1fc:	fb01 f303 	mul.w	r3, r1, r3
 800a200:	4413      	add	r3, r2
 800a202:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	b25b      	sxtb	r3, r3
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	da15      	bge.n	800a23a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a20e:	7bfb      	ldrb	r3, [r7, #15]
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	211a      	movs	r1, #26
 800a214:	fb01 f303 	mul.w	r3, r1, r3
 800a218:	4413      	add	r3, r2
 800a21a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a21e:	781a      	ldrb	r2, [r3, #0]
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a224:	7bfb      	ldrb	r3, [r7, #15]
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	211a      	movs	r1, #26
 800a22a:	fb01 f303 	mul.w	r3, r1, r3
 800a22e:	4413      	add	r3, r2
 800a230:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a234:	881a      	ldrh	r2, [r3, #0]
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	785b      	ldrb	r3, [r3, #1]
 800a23e:	4619      	mov	r1, r3
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f002 fa80 	bl	800c746 <USBH_AllocPipe>
 800a246:	4603      	mov	r3, r0
 800a248:	461a      	mov	r2, r3
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	7819      	ldrb	r1, [r3, #0]
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	7858      	ldrb	r0, [r3, #1]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a262:	68ba      	ldr	r2, [r7, #8]
 800a264:	8952      	ldrh	r2, [r2, #10]
 800a266:	9202      	str	r2, [sp, #8]
 800a268:	2203      	movs	r2, #3
 800a26a:	9201      	str	r2, [sp, #4]
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	4623      	mov	r3, r4
 800a270:	4602      	mov	r2, r0
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f002 fa38 	bl	800c6e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	2200      	movs	r2, #0
 800a27e:	4619      	mov	r1, r3
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f009 ff2d 	bl	80140e0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a286:	2300      	movs	r3, #0
 800a288:	2200      	movs	r2, #0
 800a28a:	210a      	movs	r1, #10
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 fd35 	bl	800acfc <USBH_FindInterface>
 800a292:	4603      	mov	r3, r0
 800a294:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a296:	7bfb      	ldrb	r3, [r7, #15]
 800a298:	2bff      	cmp	r3, #255	; 0xff
 800a29a:	d002      	beq.n	800a2a2 <USBH_CDC_InterfaceInit+0x11a>
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d901      	bls.n	800a2a6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a2a2:	2302      	movs	r3, #2
 800a2a4:	e0c2      	b.n	800a42c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a2a6:	7bfb      	ldrb	r3, [r7, #15]
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	211a      	movs	r1, #26
 800a2ac:	fb01 f303 	mul.w	r3, r1, r3
 800a2b0:	4413      	add	r3, r2
 800a2b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	b25b      	sxtb	r3, r3
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	da16      	bge.n	800a2ec <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a2be:	7bfb      	ldrb	r3, [r7, #15]
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	211a      	movs	r1, #26
 800a2c4:	fb01 f303 	mul.w	r3, r1, r3
 800a2c8:	4413      	add	r3, r2
 800a2ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a2ce:	781a      	ldrb	r2, [r3, #0]
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a2d4:	7bfb      	ldrb	r3, [r7, #15]
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	211a      	movs	r1, #26
 800a2da:	fb01 f303 	mul.w	r3, r1, r3
 800a2de:	4413      	add	r3, r2
 800a2e0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a2e4:	881a      	ldrh	r2, [r3, #0]
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	835a      	strh	r2, [r3, #26]
 800a2ea:	e015      	b.n	800a318 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a2ec:	7bfb      	ldrb	r3, [r7, #15]
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	211a      	movs	r1, #26
 800a2f2:	fb01 f303 	mul.w	r3, r1, r3
 800a2f6:	4413      	add	r3, r2
 800a2f8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a2fc:	781a      	ldrb	r2, [r3, #0]
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a302:	7bfb      	ldrb	r3, [r7, #15]
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	211a      	movs	r1, #26
 800a308:	fb01 f303 	mul.w	r3, r1, r3
 800a30c:	4413      	add	r3, r2
 800a30e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a312:	881a      	ldrh	r2, [r3, #0]
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a318:	7bfb      	ldrb	r3, [r7, #15]
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	211a      	movs	r1, #26
 800a31e:	fb01 f303 	mul.w	r3, r1, r3
 800a322:	4413      	add	r3, r2
 800a324:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	b25b      	sxtb	r3, r3
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	da16      	bge.n	800a35e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a330:	7bfb      	ldrb	r3, [r7, #15]
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	211a      	movs	r1, #26
 800a336:	fb01 f303 	mul.w	r3, r1, r3
 800a33a:	4413      	add	r3, r2
 800a33c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a340:	781a      	ldrb	r2, [r3, #0]
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a346:	7bfb      	ldrb	r3, [r7, #15]
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	211a      	movs	r1, #26
 800a34c:	fb01 f303 	mul.w	r3, r1, r3
 800a350:	4413      	add	r3, r2
 800a352:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a356:	881a      	ldrh	r2, [r3, #0]
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	835a      	strh	r2, [r3, #26]
 800a35c:	e015      	b.n	800a38a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a35e:	7bfb      	ldrb	r3, [r7, #15]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	211a      	movs	r1, #26
 800a364:	fb01 f303 	mul.w	r3, r1, r3
 800a368:	4413      	add	r3, r2
 800a36a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a36e:	781a      	ldrb	r2, [r3, #0]
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a374:	7bfb      	ldrb	r3, [r7, #15]
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	211a      	movs	r1, #26
 800a37a:	fb01 f303 	mul.w	r3, r1, r3
 800a37e:	4413      	add	r3, r2
 800a380:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a384:	881a      	ldrh	r2, [r3, #0]
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	7b9b      	ldrb	r3, [r3, #14]
 800a38e:	4619      	mov	r1, r3
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f002 f9d8 	bl	800c746 <USBH_AllocPipe>
 800a396:	4603      	mov	r3, r0
 800a398:	461a      	mov	r2, r3
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	7bdb      	ldrb	r3, [r3, #15]
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f002 f9ce 	bl	800c746 <USBH_AllocPipe>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	7b59      	ldrb	r1, [r3, #13]
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	7b98      	ldrb	r0, [r3, #14]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a3c6:	68ba      	ldr	r2, [r7, #8]
 800a3c8:	8b12      	ldrh	r2, [r2, #24]
 800a3ca:	9202      	str	r2, [sp, #8]
 800a3cc:	2202      	movs	r2, #2
 800a3ce:	9201      	str	r2, [sp, #4]
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	4623      	mov	r3, r4
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f002 f986 	bl	800c6e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	7b19      	ldrb	r1, [r3, #12]
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	7bd8      	ldrb	r0, [r3, #15]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	8b52      	ldrh	r2, [r2, #26]
 800a3f4:	9202      	str	r2, [sp, #8]
 800a3f6:	2202      	movs	r2, #2
 800a3f8:	9201      	str	r2, [sp, #4]
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	4623      	mov	r3, r4
 800a3fe:	4602      	mov	r2, r0
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f002 f971 	bl	800c6e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	7b5b      	ldrb	r3, [r3, #13]
 800a412:	2200      	movs	r2, #0
 800a414:	4619      	mov	r1, r3
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f009 fe62 	bl	80140e0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	7b1b      	ldrb	r3, [r3, #12]
 800a420:	2200      	movs	r2, #0
 800a422:	4619      	mov	r1, r3
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f009 fe5b 	bl	80140e0 <USBH_LL_SetToggle>

  return USBH_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3714      	adds	r7, #20
 800a430:	46bd      	mov	sp, r7
 800a432:	bd90      	pop	{r4, r7, pc}

0800a434 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a442:	69db      	ldr	r3, [r3, #28]
 800a444:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00e      	beq.n	800a46c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	4619      	mov	r1, r3
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f002 f966 	bl	800c726 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	4619      	mov	r1, r3
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f002 f991 	bl	800c788 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2200      	movs	r2, #0
 800a46a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	7b1b      	ldrb	r3, [r3, #12]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00e      	beq.n	800a492 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	7b1b      	ldrb	r3, [r3, #12]
 800a478:	4619      	mov	r1, r3
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f002 f953 	bl	800c726 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	7b1b      	ldrb	r3, [r3, #12]
 800a484:	4619      	mov	r1, r3
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f002 f97e 	bl	800c788 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	7b5b      	ldrb	r3, [r3, #13]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00e      	beq.n	800a4b8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	7b5b      	ldrb	r3, [r3, #13]
 800a49e:	4619      	mov	r1, r3
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f002 f940 	bl	800c726 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	7b5b      	ldrb	r3, [r3, #13]
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f002 f96b 	bl	800c788 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4be:	69db      	ldr	r3, [r3, #28]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00b      	beq.n	800a4dc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4ca:	69db      	ldr	r3, [r3, #28]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f009 ffbd 	bl	801444c <free>
    phost->pActiveClass->pData = 0U;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4d8:	2200      	movs	r2, #0
 800a4da:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b084      	sub	sp, #16
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4f4:	69db      	ldr	r3, [r3, #28]
 800a4f6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	3340      	adds	r3, #64	; 0x40
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 f8da 	bl	800a6b8 <GetLineCoding>
 800a504:	4603      	mov	r3, r0
 800a506:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a508:	7afb      	ldrb	r3, [r7, #11]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d105      	bne.n	800a51a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a514:	2102      	movs	r1, #2
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a51a:	7afb      	ldrb	r3, [r7, #11]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3710      	adds	r7, #16
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a52c:	2301      	movs	r3, #1
 800a52e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a530:	2300      	movs	r3, #0
 800a532:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a53a:	69db      	ldr	r3, [r3, #28]
 800a53c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a544:	2b04      	cmp	r3, #4
 800a546:	d877      	bhi.n	800a638 <USBH_CDC_Process+0x114>
 800a548:	a201      	add	r2, pc, #4	; (adr r2, 800a550 <USBH_CDC_Process+0x2c>)
 800a54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a54e:	bf00      	nop
 800a550:	0800a565 	.word	0x0800a565
 800a554:	0800a56b 	.word	0x0800a56b
 800a558:	0800a59b 	.word	0x0800a59b
 800a55c:	0800a60f 	.word	0x0800a60f
 800a560:	0800a61d 	.word	0x0800a61d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a564:	2300      	movs	r3, #0
 800a566:	73fb      	strb	r3, [r7, #15]
      break;
 800a568:	e06d      	b.n	800a646 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a56e:	4619      	mov	r1, r3
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 f8c0 	bl	800a6f6 <SetLineCoding>
 800a576:	4603      	mov	r3, r0
 800a578:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a57a:	7bbb      	ldrb	r3, [r7, #14]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d104      	bne.n	800a58a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	2202      	movs	r2, #2
 800a584:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a588:	e058      	b.n	800a63c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a58a:	7bbb      	ldrb	r3, [r7, #14]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d055      	beq.n	800a63c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	2204      	movs	r2, #4
 800a594:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a598:	e050      	b.n	800a63c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	3340      	adds	r3, #64	; 0x40
 800a59e:	4619      	mov	r1, r3
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 f889 	bl	800a6b8 <GetLineCoding>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a5aa:	7bbb      	ldrb	r3, [r7, #14]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d126      	bne.n	800a5fe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5c2:	791b      	ldrb	r3, [r3, #4]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d13b      	bne.n	800a640 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5d2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d133      	bne.n	800a640 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5e2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d12b      	bne.n	800a640 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5f0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d124      	bne.n	800a640 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 fa7a 	bl	800aaf0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a5fc:	e020      	b.n	800a640 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a5fe:	7bbb      	ldrb	r3, [r7, #14]
 800a600:	2b01      	cmp	r3, #1
 800a602:	d01d      	beq.n	800a640 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	2204      	movs	r2, #4
 800a608:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a60c:	e018      	b.n	800a640 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f934 	bl	800a87c <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 f9c3 	bl	800a9a0 <CDC_ProcessReception>
      break;
 800a61a:	e014      	b.n	800a646 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a61c:	2100      	movs	r1, #0
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f001 fa53 	bl	800baca <USBH_ClrFeature>
 800a624:	4603      	mov	r3, r0
 800a626:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a628:	7bbb      	ldrb	r3, [r7, #14]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10a      	bne.n	800a644 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	2200      	movs	r2, #0
 800a632:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a636:	e005      	b.n	800a644 <USBH_CDC_Process+0x120>

    default:
      break;
 800a638:	bf00      	nop
 800a63a:	e004      	b.n	800a646 <USBH_CDC_Process+0x122>
      break;
 800a63c:	bf00      	nop
 800a63e:	e002      	b.n	800a646 <USBH_CDC_Process+0x122>
      break;
 800a640:	bf00      	nop
 800a642:	e000      	b.n	800a646 <USBH_CDC_Process+0x122>
      break;
 800a644:	bf00      	nop

  }

  return status;
 800a646:	7bfb      	ldrb	r3, [r7, #15]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	370c      	adds	r7, #12
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr

0800a666 <USBH_CDC_Stop>:
  *         Stop current CDC Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_CDC_Stop(USBH_HandleTypeDef *phost)
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b084      	sub	sp, #16
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a674:	69db      	ldr	r3, [r3, #28]
 800a676:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	2b0b      	cmp	r3, #11
 800a680:	d115      	bne.n	800a6ae <USBH_CDC_Stop+0x48>
  {
    CDC_Handle->state = CDC_IDLE_STATE;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	4619      	mov	r1, r3
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f002 f848 	bl	800c726 <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	7b1b      	ldrb	r3, [r3, #12]
 800a69a:	4619      	mov	r1, r3
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f002 f842 	bl	800c726 <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	7b5b      	ldrb	r3, [r3, #13]
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f002 f83c 	bl	800c726 <USBH_ClosePipe>
  }
  return USBH_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	22a1      	movs	r2, #161	; 0xa1
 800a6c6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2221      	movs	r2, #33	; 0x21
 800a6cc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2207      	movs	r2, #7
 800a6de:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	2207      	movs	r2, #7
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f001 fcbc 	bl	800c064 <USBH_CtlReq>
 800a6ec:	4603      	mov	r3, r0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3708      	adds	r7, #8
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b082      	sub	sp, #8
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
 800a6fe:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2221      	movs	r2, #33	; 0x21
 800a704:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2220      	movs	r2, #32
 800a70a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2207      	movs	r2, #7
 800a71c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	2207      	movs	r2, #7
 800a722:	4619      	mov	r1, r3
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f001 fc9d 	bl	800c064 <USBH_CtlReq>
 800a72a:	4603      	mov	r3, r0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3708      	adds	r7, #8
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <USBH_CDC_SetLineCoding>:
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef USBH_CDC_SetLineCoding(USBH_HandleTypeDef *phost,
                                          CDC_LineCodingTypeDef *linecoding)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a744:	69db      	ldr	r3, [r3, #28]
 800a746:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b0b      	cmp	r3, #11
 800a750:	d114      	bne.n	800a77c <USBH_CDC_SetLineCoding+0x48>
  {
    CDC_Handle->state = CDC_SET_LINE_CODING_STATE;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2201      	movs	r2, #1
 800a756:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->pUserLineCoding = linecoding;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	649a      	str	r2, [r3, #72]	; 0x48

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2204      	movs	r2, #4
 800a764:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a774:	2200      	movs	r2, #0
 800a776:	4619      	mov	r1, r3
 800a778:	f006 ffde 	bl	8011738 <osMessagePut>
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }

  return USBH_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b086      	sub	sp, #24
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	60f8      	str	r0, [r7, #12]
 800a78e:	60b9      	str	r1, [r7, #8]
 800a790:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a792:	2301      	movs	r3, #1
 800a794:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a79c:	69db      	ldr	r3, [r3, #28]
 800a79e:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d004      	beq.n	800a7b4 <USBH_CDC_Transmit+0x2e>
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a7b0:	2b03      	cmp	r3, #3
 800a7b2:	d11d      	bne.n	800a7f0 <USBH_CDC_Transmit+0x6a>
  {
    CDC_Handle->pTxData = pbuff;
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	68ba      	ldr	r2, [r7, #8]
 800a7b8:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	2203      	movs	r2, #3
 800a7c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2204      	movs	r2, #4
 800a7d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	f006 ffa4 	bl	8011738 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 800a7f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3718      	adds	r7, #24
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
	...

0800a7fc <USBH_CDC_Receive>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a808:	2301      	movs	r3, #1
 800a80a:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a812:	69db      	ldr	r3, [r3, #28]
 800a814:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d004      	beq.n	800a82a <USBH_CDC_Receive+0x2e>
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a826:	2b03      	cmp	r3, #3
 800a828:	d120      	bne.n	800a86c <USBH_CDC_Receive+0x70>
  {
	icListen_rx_msg_basic_header=(icListen_wav_full_header*)pbuff;
 800a82a:	4a13      	ldr	r2, [pc, #76]	; (800a878 <USBH_CDC_Receive+0x7c>)
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	6013      	str	r3, [r2, #0]
    CDC_Handle->pRxData = pbuff;
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	68ba      	ldr	r2, [r7, #8]
 800a834:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	2203      	movs	r2, #3
 800a840:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	2203      	movs	r2, #3
 800a848:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 800a84c:	2300      	movs	r3, #0
 800a84e:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2204      	movs	r2, #4
 800a854:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a864:	2200      	movs	r2, #0
 800a866:	4619      	mov	r1, r3
 800a868:	f006 ff66 	bl	8011738 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 800a86c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3718      	adds	r7, #24
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	20001de4 	.word	0x20001de4

0800a87c <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b086      	sub	sp, #24
 800a880:	af02      	add	r7, sp, #8
 800a882:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a88a:	69db      	ldr	r3, [r3, #28]
 800a88c:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a88e:	2300      	movs	r3, #0
 800a890:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d002      	beq.n	800a8a2 <CDC_ProcessTransmission+0x26>
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d023      	beq.n	800a8e8 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a8a0:	e07a      	b.n	800a998 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a6:	68fa      	ldr	r2, [r7, #12]
 800a8a8:	8b12      	ldrh	r2, [r2, #24]
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d90b      	bls.n	800a8c6 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	69d9      	ldr	r1, [r3, #28]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	8b1a      	ldrh	r2, [r3, #24]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	7b5b      	ldrb	r3, [r3, #13]
 800a8ba:	2001      	movs	r0, #1
 800a8bc:	9000      	str	r0, [sp, #0]
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f001 fecf 	bl	800c662 <USBH_BulkSendData>
 800a8c4:	e00b      	b.n	800a8de <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	7b5b      	ldrb	r3, [r3, #13]
 800a8d4:	2001      	movs	r0, #1
 800a8d6:	9000      	str	r0, [sp, #0]
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f001 fec2 	bl	800c662 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2202      	movs	r2, #2
 800a8e2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a8e6:	e057      	b.n	800a998 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	7b5b      	ldrb	r3, [r3, #13]
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f009 fbcc 	bl	801408c <USBH_LL_GetURBState>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a8f8:	7afb      	ldrb	r3, [r7, #11]
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d136      	bne.n	800a96c <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	8b12      	ldrh	r2, [r2, #24]
 800a906:	4293      	cmp	r3, r2
 800a908:	d90e      	bls.n	800a928 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	8b12      	ldrh	r2, [r2, #24]
 800a912:	1a9a      	subs	r2, r3, r2
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	69db      	ldr	r3, [r3, #28]
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	8b12      	ldrh	r2, [r2, #24]
 800a920:	441a      	add	r2, r3
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	61da      	str	r2, [r3, #28]
 800a926:	e002      	b.n	800a92e <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a932:	2b00      	cmp	r3, #0
 800a934:	d004      	beq.n	800a940 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2201      	movs	r2, #1
 800a93a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800a93e:	e006      	b.n	800a94e <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f009 f931 	bl	8013bb0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2204      	movs	r2, #4
 800a952:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a962:	2200      	movs	r2, #0
 800a964:	4619      	mov	r1, r3
 800a966:	f006 fee7 	bl	8011738 <osMessagePut>
      break;
 800a96a:	e014      	b.n	800a996 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800a96c:	7afb      	ldrb	r3, [r7, #11]
 800a96e:	2b02      	cmp	r3, #2
 800a970:	d111      	bne.n	800a996 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2201      	movs	r2, #1
 800a976:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2204      	movs	r2, #4
 800a97e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a98e:	2200      	movs	r2, #0
 800a990:	4619      	mov	r1, r3
 800a992:	f006 fed1 	bl	8011738 <osMessagePut>
      break;
 800a996:	bf00      	nop
  }
}
 800a998:	bf00      	nop
 800a99a:	3710      	adds	r7, #16
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b086      	sub	sp, #24
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9ae:	69db      	ldr	r3, [r3, #28]
 800a9b0:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a9bc:	2b03      	cmp	r3, #3
 800a9be:	d002      	beq.n	800a9c6 <CDC_ProcessReception+0x26>
 800a9c0:	2b04      	cmp	r3, #4
 800a9c2:	d00e      	beq.n	800a9e2 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a9c4:	e086      	b.n	800aad4 <CDC_ProcessReception+0x134>
      (void)USBH_BulkReceiveData(phost,
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	6a19      	ldr	r1, [r3, #32]
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	8b5a      	ldrh	r2, [r3, #26]
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	7b1b      	ldrb	r3, [r3, #12]
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f001 fe6a 	bl	800c6ac <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	2204      	movs	r2, #4
 800a9dc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a9e0:	e078      	b.n	800aad4 <CDC_ProcessReception+0x134>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	7b1b      	ldrb	r3, [r3, #12]
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f009 fb4f 	bl	801408c <USBH_LL_GetURBState>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a9f2:	7cfb      	ldrb	r3, [r7, #19]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d16c      	bne.n	800aad2 <CDC_ProcessReception+0x132>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	7b1b      	ldrb	r3, [r3, #12]
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f009 fab2 	bl	8013f68 <USBH_LL_GetLastXferSize>
 800aa04:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (CDC_Handle->RxDataLength > CDC_Handle->DataItf.InEpSize))
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d04b      	beq.n	800aaa8 <CDC_ProcessReception+0x108>
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa14:	697a      	ldr	r2, [r7, #20]
 800aa16:	8b52      	ldrh	r2, [r2, #26]
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d945      	bls.n	800aaa8 <CDC_ProcessReception+0x108>
           CDC_Handle->RxDataLength -= length ;
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	1ad2      	subs	r2, r2, r3
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	629a      	str	r2, [r3, #40]	; 0x28
           CDC_Handle->pRxData += length;
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	6a1a      	ldr	r2, [r3, #32]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	441a      	add	r2, r3
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	621a      	str	r2, [r3, #32]
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 800aa34:	4b29      	ldr	r3, [pc, #164]	; (800aadc <CDC_ProcessReception+0x13c>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	885b      	ldrh	r3, [r3, #2]
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	3306      	adds	r3, #6
 800aa3e:	461a      	mov	r2, r3
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa44:	f5c3 635a 	rsb	r3, r3, #3488	; 0xda0
 800aa48:	330c      	adds	r3, #12
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d127      	bne.n	800aa9e <CDC_ProcessReception+0xfe>
               CDC_Handle->data_rx_state = CDC_IDLE;
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
               osMessagePut(USB_rxHandle, (uint8_t*)usb_rx_buff[usb_rx_buff_active], 0U);
 800aa56:	4b22      	ldr	r3, [pc, #136]	; (800aae0 <CDC_ProcessReception+0x140>)
 800aa58:	6818      	ldr	r0, [r3, #0]
 800aa5a:	4b22      	ldr	r3, [pc, #136]	; (800aae4 <CDC_ProcessReception+0x144>)
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	461a      	mov	r2, r3
 800aa60:	f640 53ac 	movw	r3, #3500	; 0xdac
 800aa64:	fb02 f303 	mul.w	r3, r2, r3
 800aa68:	4a1f      	ldr	r2, [pc, #124]	; (800aae8 <CDC_ProcessReception+0x148>)
 800aa6a:	4413      	add	r3, r2
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	4619      	mov	r1, r3
 800aa70:	f006 fe62 	bl	8011738 <osMessagePut>
               usb_rx_buff_active++;
 800aa74:	4b1b      	ldr	r3, [pc, #108]	; (800aae4 <CDC_ProcessReception+0x144>)
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	b2da      	uxtb	r2, r3
 800aa7c:	4b19      	ldr	r3, [pc, #100]	; (800aae4 <CDC_ProcessReception+0x144>)
 800aa7e:	701a      	strb	r2, [r3, #0]
               usb_rx_buff_active%=USB_RX_NUM_OF_BUFFERS;
 800aa80:	4b18      	ldr	r3, [pc, #96]	; (800aae4 <CDC_ProcessReception+0x144>)
 800aa82:	781a      	ldrb	r2, [r3, #0]
 800aa84:	4b19      	ldr	r3, [pc, #100]	; (800aaec <CDC_ProcessReception+0x14c>)
 800aa86:	fba3 1302 	umull	r1, r3, r3, r2
 800aa8a:	0899      	lsrs	r1, r3, #2
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	005b      	lsls	r3, r3, #1
 800aa90:	440b      	add	r3, r1
 800aa92:	005b      	lsls	r3, r3, #1
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	b2da      	uxtb	r2, r3
 800aa98:	4b12      	ldr	r3, [pc, #72]	; (800aae4 <CDC_ProcessReception+0x144>)
 800aa9a:	701a      	strb	r2, [r3, #0]
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 800aa9c:	e00b      	b.n	800aab6 <CDC_ProcessReception+0x116>
         	CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	2203      	movs	r2, #3
 800aaa2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 800aaa6:	e006      	b.n	800aab6 <CDC_ProcessReception+0x116>
           CDC_Handle->data_rx_state = CDC_IDLE;
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
           USBH_CDC_ReceiveCallback(phost);
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f009 f887 	bl	8013bc4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2204      	movs	r2, #4
 800aaba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aaca:	2200      	movs	r2, #0
 800aacc:	4619      	mov	r1, r3
 800aace:	f006 fe33 	bl	8011738 <osMessagePut>
      break;
 800aad2:	bf00      	nop
  }
}
 800aad4:	bf00      	nop
 800aad6:	3718      	adds	r7, #24
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	20001de4 	.word	0x20001de4
 800aae0:	200009a4 	.word	0x200009a4
 800aae4:	2000d3bc 	.word	0x2000d3bc
 800aae8:	200081b4 	.word	0x200081b4
 800aaec:	aaaaaaab 	.word	0xaaaaaaab

0800aaf0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800aaf8:	bf00      	nop
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800ab04:	b5b0      	push	{r4, r5, r7, lr}
 800ab06:	b090      	sub	sp, #64	; 0x40
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	4613      	mov	r3, r2
 800ab10:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d101      	bne.n	800ab1c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ab18:	2302      	movs	r3, #2
 800ab1a:	e04d      	b.n	800abb8 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	79fa      	ldrb	r2, [r7, #7]
 800ab20:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2200      	movs	r2, #0
 800ab28:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f000 f847 	bl	800abc8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2200      	movs	r2, #0
 800ab56:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d003      	beq.n	800ab68 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	68ba      	ldr	r2, [r7, #8]
 800ab64:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800ab68:	4b15      	ldr	r3, [pc, #84]	; (800abc0 <USBH_Init+0xbc>)
 800ab6a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800ab6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ab70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800ab74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ab78:	2100      	movs	r1, #0
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f006 fdb3 	bl	80116e6 <osMessageCreate>
 800ab80:	4602      	mov	r2, r0
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800ab88:	4b0e      	ldr	r3, [pc, #56]	; (800abc4 <USBH_Init+0xc0>)
 800ab8a:	f107 0414 	add.w	r4, r7, #20
 800ab8e:	461d      	mov	r5, r3
 800ab90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ab98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800ab9c:	f107 0314 	add.w	r3, r7, #20
 800aba0:	68f9      	ldr	r1, [r7, #12]
 800aba2:	4618      	mov	r0, r3
 800aba4:	f006 fd3f 	bl	8011626 <osThreadCreate>
 800aba8:	4602      	mov	r2, r0
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800abb0:	68f8      	ldr	r0, [r7, #12]
 800abb2:	f009 f925 	bl	8013e00 <USBH_LL_Init>

  return USBH_OK;
 800abb6:	2300      	movs	r3, #0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3740      	adds	r7, #64	; 0x40
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bdb0      	pop	{r4, r5, r7, pc}
 800abc0:	08016f50 	.word	0x08016f50
 800abc4:	08016f60 	.word	0x08016f60

0800abc8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800abd0:	2300      	movs	r3, #0
 800abd2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800abd4:	2300      	movs	r3, #0
 800abd6:	60fb      	str	r3, [r7, #12]
 800abd8:	e009      	b.n	800abee <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	33e0      	adds	r3, #224	; 0xe0
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	4413      	add	r3, r2
 800abe4:	2200      	movs	r2, #0
 800abe6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	3301      	adds	r3, #1
 800abec:	60fb      	str	r3, [r7, #12]
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2b0f      	cmp	r3, #15
 800abf2:	d9f2      	bls.n	800abda <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800abf4:	2300      	movs	r3, #0
 800abf6:	60fb      	str	r3, [r7, #12]
 800abf8:	e009      	b.n	800ac0e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	4413      	add	r3, r2
 800ac00:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ac04:	2200      	movs	r2, #0
 800ac06:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	60fb      	str	r3, [r7, #12]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac14:	d3f1      	bcc.n	800abfa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2201      	movs	r2, #1
 800ac26:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2201      	movs	r2, #1
 800ac34:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2240      	movs	r2, #64	; 0x40
 800ac3a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2200      	movs	r2, #0
 800ac56:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800ac62:	2300      	movs	r3, #0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3714      	adds	r7, #20
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d016      	beq.n	800acb2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d10e      	bne.n	800acac <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ac94:	1c59      	adds	r1, r3, #1
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	33de      	adds	r3, #222	; 0xde
 800aca0:	6839      	ldr	r1, [r7, #0]
 800aca2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800aca6:	2300      	movs	r3, #0
 800aca8:	73fb      	strb	r3, [r7, #15]
 800acaa:	e004      	b.n	800acb6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800acac:	2302      	movs	r3, #2
 800acae:	73fb      	strb	r3, [r7, #15]
 800acb0:	e001      	b.n	800acb6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800acb2:	2302      	movs	r3, #2
 800acb4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800acb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3714      	adds	r7, #20
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	460b      	mov	r3, r1
 800acce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800acd0:	2300      	movs	r3, #0
 800acd2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800acda:	78fa      	ldrb	r2, [r7, #3]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d204      	bcs.n	800acea <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	78fa      	ldrb	r2, [r7, #3]
 800ace4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800ace8:	e001      	b.n	800acee <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800acea:	2302      	movs	r3, #2
 800acec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800acee:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3714      	adds	r7, #20
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b087      	sub	sp, #28
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	4608      	mov	r0, r1
 800ad06:	4611      	mov	r1, r2
 800ad08:	461a      	mov	r2, r3
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	70fb      	strb	r3, [r7, #3]
 800ad0e:	460b      	mov	r3, r1
 800ad10:	70bb      	strb	r3, [r7, #2]
 800ad12:	4613      	mov	r3, r2
 800ad14:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ad16:	2300      	movs	r3, #0
 800ad18:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ad24:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ad26:	e025      	b.n	800ad74 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ad28:	7dfb      	ldrb	r3, [r7, #23]
 800ad2a:	221a      	movs	r2, #26
 800ad2c:	fb02 f303 	mul.w	r3, r2, r3
 800ad30:	3308      	adds	r3, #8
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	4413      	add	r3, r2
 800ad36:	3302      	adds	r3, #2
 800ad38:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	795b      	ldrb	r3, [r3, #5]
 800ad3e:	78fa      	ldrb	r2, [r7, #3]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d002      	beq.n	800ad4a <USBH_FindInterface+0x4e>
 800ad44:	78fb      	ldrb	r3, [r7, #3]
 800ad46:	2bff      	cmp	r3, #255	; 0xff
 800ad48:	d111      	bne.n	800ad6e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ad4e:	78ba      	ldrb	r2, [r7, #2]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d002      	beq.n	800ad5a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ad54:	78bb      	ldrb	r3, [r7, #2]
 800ad56:	2bff      	cmp	r3, #255	; 0xff
 800ad58:	d109      	bne.n	800ad6e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ad5e:	787a      	ldrb	r2, [r7, #1]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d002      	beq.n	800ad6a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ad64:	787b      	ldrb	r3, [r7, #1]
 800ad66:	2bff      	cmp	r3, #255	; 0xff
 800ad68:	d101      	bne.n	800ad6e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ad6a:	7dfb      	ldrb	r3, [r7, #23]
 800ad6c:	e006      	b.n	800ad7c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ad6e:	7dfb      	ldrb	r3, [r7, #23]
 800ad70:	3301      	adds	r3, #1
 800ad72:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ad74:	7dfb      	ldrb	r3, [r7, #23]
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d9d6      	bls.n	800ad28 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ad7a:	23ff      	movs	r3, #255	; 0xff
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	371c      	adds	r7, #28
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f009 f871 	bl	8013e78 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800ad96:	2101      	movs	r1, #1
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f009 f98a 	bl	80140b2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ad9e:	2300      	movs	r3, #0
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3708      	adds	r7, #8
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b088      	sub	sp, #32
 800adac:	af04      	add	r7, sp, #16
 800adae:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800adb0:	2302      	movs	r3, #2
 800adb2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800adb4:	2300      	movs	r3, #0
 800adb6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d102      	bne.n	800adca <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2203      	movs	r2, #3
 800adc8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	b2db      	uxtb	r3, r3
 800add0:	2b0b      	cmp	r3, #11
 800add2:	f200 8247 	bhi.w	800b264 <USBH_Process+0x4bc>
 800add6:	a201      	add	r2, pc, #4	; (adr r2, 800addc <USBH_Process+0x34>)
 800add8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800addc:	0800ae0d 	.word	0x0800ae0d
 800ade0:	0800ae5b 	.word	0x0800ae5b
 800ade4:	0800aedf 	.word	0x0800aedf
 800ade8:	0800b1e3 	.word	0x0800b1e3
 800adec:	0800b265 	.word	0x0800b265
 800adf0:	0800af9f 	.word	0x0800af9f
 800adf4:	0800b16d 	.word	0x0800b16d
 800adf8:	0800aff1 	.word	0x0800aff1
 800adfc:	0800b02d 	.word	0x0800b02d
 800ae00:	0800b067 	.word	0x0800b067
 800ae04:	0800b0c5 	.word	0x0800b0c5
 800ae08:	0800b1cb 	.word	0x0800b1cb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f000 8227 	beq.w	800b268 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ae20:	20c8      	movs	r0, #200	; 0xc8
 800ae22:	f009 f98d 	bl	8014140 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f009 f883 	bl	8013f32 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae50:	2200      	movs	r2, #0
 800ae52:	4619      	mov	r1, r3
 800ae54:	f006 fc70 	bl	8011738 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ae58:	e206      	b.n	800b268 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d107      	bne.n	800ae74 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2202      	movs	r2, #2
 800ae70:	701a      	strb	r2, [r3, #0]
 800ae72:	e025      	b.n	800aec0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ae7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae7e:	d914      	bls.n	800aeaa <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ae86:	3301      	adds	r3, #1
 800ae88:	b2da      	uxtb	r2, r3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ae96:	2b03      	cmp	r3, #3
 800ae98:	d903      	bls.n	800aea2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	220d      	movs	r2, #13
 800ae9e:	701a      	strb	r2, [r3, #0]
 800aea0:	e00e      	b.n	800aec0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2200      	movs	r2, #0
 800aea6:	701a      	strb	r2, [r3, #0]
 800aea8:	e00a      	b.n	800aec0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800aeb0:	f103 020a 	add.w	r2, r3, #10
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800aeba:	200a      	movs	r0, #10
 800aebc:	f009 f940 	bl	8014140 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2201      	movs	r2, #1
 800aec4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aed4:	2200      	movs	r2, #0
 800aed6:	4619      	mov	r1, r3
 800aed8:	f006 fc2e 	bl	8011738 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aedc:	e1cb      	b.n	800b276 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d005      	beq.n	800aef4 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aeee:	2104      	movs	r1, #4
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800aef4:	2064      	movs	r0, #100	; 0x64
 800aef6:	f009 f923 	bl	8014140 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f008 fff2 	bl	8013ee4 <USBH_LL_GetSpeed>
 800af00:	4603      	mov	r3, r0
 800af02:	461a      	mov	r2, r3
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2205      	movs	r2, #5
 800af0e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800af10:	2100      	movs	r1, #0
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f001 fc17 	bl	800c746 <USBH_AllocPipe>
 800af18:	4603      	mov	r3, r0
 800af1a:	461a      	mov	r2, r3
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800af20:	2180      	movs	r1, #128	; 0x80
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f001 fc0f 	bl	800c746 <USBH_AllocPipe>
 800af28:	4603      	mov	r3, r0
 800af2a:	461a      	mov	r2, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	7919      	ldrb	r1, [r3, #4]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800af44:	b292      	uxth	r2, r2
 800af46:	9202      	str	r2, [sp, #8]
 800af48:	2200      	movs	r2, #0
 800af4a:	9201      	str	r2, [sp, #4]
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	4603      	mov	r3, r0
 800af50:	2280      	movs	r2, #128	; 0x80
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f001 fbc8 	bl	800c6e8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	7959      	ldrb	r1, [r3, #5]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800af6c:	b292      	uxth	r2, r2
 800af6e:	9202      	str	r2, [sp, #8]
 800af70:	2200      	movs	r2, #0
 800af72:	9201      	str	r2, [sp, #4]
 800af74:	9300      	str	r3, [sp, #0]
 800af76:	4603      	mov	r3, r0
 800af78:	2200      	movs	r2, #0
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f001 fbb4 	bl	800c6e8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2201      	movs	r2, #1
 800af84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af94:	2200      	movs	r2, #0
 800af96:	4619      	mov	r1, r3
 800af98:	f006 fbce 	bl	8011738 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800af9c:	e16b      	b.n	800b276 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f96e 	bl	800b280 <USBH_HandleEnum>
 800afa4:	4603      	mov	r3, r0
 800afa6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800afa8:	7bbb      	ldrb	r3, [r7, #14]
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	2b00      	cmp	r3, #0
 800afae:	f040 815d 	bne.w	800b26c <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d103      	bne.n	800afcc <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2208      	movs	r2, #8
 800afc8:	701a      	strb	r2, [r3, #0]
 800afca:	e002      	b.n	800afd2 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2207      	movs	r2, #7
 800afd0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2205      	movs	r2, #5
 800afd6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800afe6:	2200      	movs	r2, #0
 800afe8:	4619      	mov	r1, r3
 800afea:	f006 fba5 	bl	8011738 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800afee:	e13d      	b.n	800b26c <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	f000 813a 	beq.w	800b270 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b002:	2101      	movs	r1, #1
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2208      	movs	r2, #8
 800b00c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2205      	movs	r2, #5
 800b012:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b022:	2200      	movs	r2, #0
 800b024:	4619      	mov	r1, r3
 800b026:	f006 fb87 	bl	8011738 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b02a:	e121      	b.n	800b270 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b032:	b29b      	uxth	r3, r3
 800b034:	4619      	mov	r1, r3
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fd00 	bl	800ba3c <USBH_SetCfg>
 800b03c:	4603      	mov	r3, r0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d102      	bne.n	800b048 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2209      	movs	r2, #9
 800b046:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2201      	movs	r2, #1
 800b04c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b05c:	2200      	movs	r2, #0
 800b05e:	4619      	mov	r1, r3
 800b060:	f006 fb6a 	bl	8011738 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b064:	e107      	b.n	800b276 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b06c:	f003 0320 	and.w	r3, r3, #32
 800b070:	2b00      	cmp	r3, #0
 800b072:	d015      	beq.n	800b0a0 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b074:	2101      	movs	r1, #1
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 fd03 	bl	800ba82 <USBH_SetFeature>
 800b07c:	4603      	mov	r3, r0
 800b07e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b080:	7bbb      	ldrb	r3, [r7, #14]
 800b082:	b2db      	uxtb	r3, r3
 800b084:	2b00      	cmp	r3, #0
 800b086:	d103      	bne.n	800b090 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	220a      	movs	r2, #10
 800b08c:	701a      	strb	r2, [r3, #0]
 800b08e:	e00a      	b.n	800b0a6 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800b090:	7bbb      	ldrb	r3, [r7, #14]
 800b092:	b2db      	uxtb	r3, r3
 800b094:	2b03      	cmp	r3, #3
 800b096:	d106      	bne.n	800b0a6 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	220a      	movs	r2, #10
 800b09c:	701a      	strb	r2, [r3, #0]
 800b09e:	e002      	b.n	800b0a6 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	220a      	movs	r2, #10
 800b0a4:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	4619      	mov	r1, r3
 800b0be:	f006 fb3b 	bl	8011738 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b0c2:	e0d8      	b.n	800b276 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d03f      	beq.n	800b14e <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	73fb      	strb	r3, [r7, #15]
 800b0da:	e016      	b.n	800b10a <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b0dc:	7bfa      	ldrb	r2, [r7, #15]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	32de      	adds	r2, #222	; 0xde
 800b0e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0e6:	791a      	ldrb	r2, [r3, #4]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d108      	bne.n	800b104 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b0f2:	7bfa      	ldrb	r2, [r7, #15]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	32de      	adds	r2, #222	; 0xde
 800b0f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b102:	e005      	b.n	800b110 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b104:	7bfb      	ldrb	r3, [r7, #15]
 800b106:	3301      	adds	r3, #1
 800b108:	73fb      	strb	r3, [r7, #15]
 800b10a:	7bfb      	ldrb	r3, [r7, #15]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d0e5      	beq.n	800b0dc <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b116:	2b00      	cmp	r3, #0
 800b118:	d016      	beq.n	800b148 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b120:	689b      	ldr	r3, [r3, #8]
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	4798      	blx	r3
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d109      	bne.n	800b140 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2206      	movs	r2, #6
 800b130:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b138:	2103      	movs	r1, #3
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	4798      	blx	r3
 800b13e:	e006      	b.n	800b14e <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	220d      	movs	r2, #13
 800b144:	701a      	strb	r2, [r3, #0]
 800b146:	e002      	b.n	800b14e <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	220d      	movs	r2, #13
 800b14c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2205      	movs	r2, #5
 800b152:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b162:	2200      	movs	r2, #0
 800b164:	4619      	mov	r1, r3
 800b166:	f006 fae7 	bl	8011738 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b16a:	e084      	b.n	800b276 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b172:	2b00      	cmp	r3, #0
 800b174:	d017      	beq.n	800b1a6 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b17c:	691b      	ldr	r3, [r3, #16]
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	4798      	blx	r3
 800b182:	4603      	mov	r3, r0
 800b184:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b186:	7bbb      	ldrb	r3, [r7, #14]
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d103      	bne.n	800b196 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	220b      	movs	r2, #11
 800b192:	701a      	strb	r2, [r3, #0]
 800b194:	e00a      	b.n	800b1ac <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800b196:	7bbb      	ldrb	r3, [r7, #14]
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	d106      	bne.n	800b1ac <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	220d      	movs	r2, #13
 800b1a2:	701a      	strb	r2, [r3, #0]
 800b1a4:	e002      	b.n	800b1ac <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	220d      	movs	r2, #13
 800b1aa:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2205      	movs	r2, #5
 800b1b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	f006 fab8 	bl	8011738 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b1c8:	e055      	b.n	800b276 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d04f      	beq.n	800b274 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1da:	695b      	ldr	r3, [r3, #20]
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	4798      	blx	r3
      }
      break;
 800b1e0:	e048      	b.n	800b274 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f7ff fcec 	bl	800abc8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d009      	beq.n	800b20e <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b214:	2b00      	cmp	r3, #0
 800b216:	d005      	beq.n	800b224 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b21e:	2105      	movs	r1, #5
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d107      	bne.n	800b240 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f7ff fda5 	bl	800ad88 <USBH_Start>
 800b23e:	e002      	b.n	800b246 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f008 fe19 	bl	8013e78 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2201      	movs	r2, #1
 800b24a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b25a:	2200      	movs	r2, #0
 800b25c:	4619      	mov	r1, r3
 800b25e:	f006 fa6b 	bl	8011738 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b262:	e008      	b.n	800b276 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800b264:	bf00      	nop
 800b266:	e006      	b.n	800b276 <USBH_Process+0x4ce>
      break;
 800b268:	bf00      	nop
 800b26a:	e004      	b.n	800b276 <USBH_Process+0x4ce>
      break;
 800b26c:	bf00      	nop
 800b26e:	e002      	b.n	800b276 <USBH_Process+0x4ce>
    break;
 800b270:	bf00      	nop
 800b272:	e000      	b.n	800b276 <USBH_Process+0x4ce>
      break;
 800b274:	bf00      	nop
  }
  return USBH_OK;
 800b276:	2300      	movs	r3, #0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3710      	adds	r7, #16
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b088      	sub	sp, #32
 800b284:	af04      	add	r7, sp, #16
 800b286:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b288:	2301      	movs	r3, #1
 800b28a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b28c:	2301      	movs	r3, #1
 800b28e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	785b      	ldrb	r3, [r3, #1]
 800b294:	2b07      	cmp	r3, #7
 800b296:	f200 8208 	bhi.w	800b6aa <USBH_HandleEnum+0x42a>
 800b29a:	a201      	add	r2, pc, #4	; (adr r2, 800b2a0 <USBH_HandleEnum+0x20>)
 800b29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a0:	0800b2c1 	.word	0x0800b2c1
 800b2a4:	0800b37f 	.word	0x0800b37f
 800b2a8:	0800b3e9 	.word	0x0800b3e9
 800b2ac:	0800b477 	.word	0x0800b477
 800b2b0:	0800b4e1 	.word	0x0800b4e1
 800b2b4:	0800b551 	.word	0x0800b551
 800b2b8:	0800b5ed 	.word	0x0800b5ed
 800b2bc:	0800b66b 	.word	0x0800b66b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b2c0:	2108      	movs	r1, #8
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 faea 	bl	800b89c <USBH_Get_DevDesc>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b2cc:	7bbb      	ldrb	r3, [r7, #14]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d130      	bne.n	800b334 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	7919      	ldrb	r1, [r3, #4]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b2f6:	b292      	uxth	r2, r2
 800b2f8:	9202      	str	r2, [sp, #8]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	9201      	str	r2, [sp, #4]
 800b2fe:	9300      	str	r3, [sp, #0]
 800b300:	4603      	mov	r3, r0
 800b302:	2280      	movs	r2, #128	; 0x80
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f001 f9ef 	bl	800c6e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	7959      	ldrb	r1, [r3, #5]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b31e:	b292      	uxth	r2, r2
 800b320:	9202      	str	r2, [sp, #8]
 800b322:	2200      	movs	r2, #0
 800b324:	9201      	str	r2, [sp, #4]
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	4603      	mov	r3, r0
 800b32a:	2200      	movs	r2, #0
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f001 f9db 	bl	800c6e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b332:	e1bc      	b.n	800b6ae <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b334:	7bbb      	ldrb	r3, [r7, #14]
 800b336:	2b03      	cmp	r3, #3
 800b338:	f040 81b9 	bne.w	800b6ae <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b342:	3301      	adds	r3, #1
 800b344:	b2da      	uxtb	r2, r3
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b352:	2b03      	cmp	r3, #3
 800b354:	d903      	bls.n	800b35e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	220d      	movs	r2, #13
 800b35a:	701a      	strb	r2, [r3, #0]
      break;
 800b35c:	e1a7      	b.n	800b6ae <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	795b      	ldrb	r3, [r3, #5]
 800b362:	4619      	mov	r1, r3
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f001 fa0f 	bl	800c788 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	791b      	ldrb	r3, [r3, #4]
 800b36e:	4619      	mov	r1, r3
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f001 fa09 	bl	800c788 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	701a      	strb	r2, [r3, #0]
      break;
 800b37c:	e197      	b.n	800b6ae <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b37e:	2112      	movs	r1, #18
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 fa8b 	bl	800b89c <USBH_Get_DevDesc>
 800b386:	4603      	mov	r3, r0
 800b388:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b38a:	7bbb      	ldrb	r3, [r7, #14]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d103      	bne.n	800b398 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2202      	movs	r2, #2
 800b394:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b396:	e18c      	b.n	800b6b2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b398:	7bbb      	ldrb	r3, [r7, #14]
 800b39a:	2b03      	cmp	r3, #3
 800b39c:	f040 8189 	bne.w	800b6b2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	b2da      	uxtb	r2, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b3b6:	2b03      	cmp	r3, #3
 800b3b8:	d903      	bls.n	800b3c2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	220d      	movs	r2, #13
 800b3be:	701a      	strb	r2, [r3, #0]
      break;
 800b3c0:	e177      	b.n	800b6b2 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	795b      	ldrb	r3, [r3, #5]
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f001 f9dd 	bl	800c788 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	791b      	ldrb	r3, [r3, #4]
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f001 f9d7 	bl	800c788 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	701a      	strb	r2, [r3, #0]
      break;
 800b3e6:	e164      	b.n	800b6b2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b3e8:	2101      	movs	r1, #1
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fb02 	bl	800b9f4 <USBH_SetAddress>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b3f4:	7bbb      	ldrb	r3, [r7, #14]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d132      	bne.n	800b460 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b3fa:	2002      	movs	r0, #2
 800b3fc:	f008 fea0 	bl	8014140 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2201      	movs	r2, #1
 800b404:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2203      	movs	r2, #3
 800b40c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	7919      	ldrb	r1, [r3, #4]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b422:	b292      	uxth	r2, r2
 800b424:	9202      	str	r2, [sp, #8]
 800b426:	2200      	movs	r2, #0
 800b428:	9201      	str	r2, [sp, #4]
 800b42a:	9300      	str	r3, [sp, #0]
 800b42c:	4603      	mov	r3, r0
 800b42e:	2280      	movs	r2, #128	; 0x80
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f001 f959 	bl	800c6e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	7959      	ldrb	r1, [r3, #5]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b44a:	b292      	uxth	r2, r2
 800b44c:	9202      	str	r2, [sp, #8]
 800b44e:	2200      	movs	r2, #0
 800b450:	9201      	str	r2, [sp, #4]
 800b452:	9300      	str	r3, [sp, #0]
 800b454:	4603      	mov	r3, r0
 800b456:	2200      	movs	r2, #0
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f001 f945 	bl	800c6e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b45e:	e12a      	b.n	800b6b6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b460:	7bbb      	ldrb	r3, [r7, #14]
 800b462:	2b03      	cmp	r3, #3
 800b464:	f040 8127 	bne.w	800b6b6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	220d      	movs	r2, #13
 800b46c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	705a      	strb	r2, [r3, #1]
      break;
 800b474:	e11f      	b.n	800b6b6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b476:	2109      	movs	r1, #9
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 fa37 	bl	800b8ec <USBH_Get_CfgDesc>
 800b47e:	4603      	mov	r3, r0
 800b480:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b482:	7bbb      	ldrb	r3, [r7, #14]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d103      	bne.n	800b490 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2204      	movs	r2, #4
 800b48c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b48e:	e114      	b.n	800b6ba <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b490:	7bbb      	ldrb	r3, [r7, #14]
 800b492:	2b03      	cmp	r3, #3
 800b494:	f040 8111 	bne.w	800b6ba <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b49e:	3301      	adds	r3, #1
 800b4a0:	b2da      	uxtb	r2, r3
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b4ae:	2b03      	cmp	r3, #3
 800b4b0:	d903      	bls.n	800b4ba <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	220d      	movs	r2, #13
 800b4b6:	701a      	strb	r2, [r3, #0]
      break;
 800b4b8:	e0ff      	b.n	800b6ba <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	795b      	ldrb	r3, [r3, #5]
 800b4be:	4619      	mov	r1, r3
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f001 f961 	bl	800c788 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	791b      	ldrb	r3, [r3, #4]
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f001 f95b 	bl	800c788 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	701a      	strb	r2, [r3, #0]
      break;
 800b4de:	e0ec      	b.n	800b6ba <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 f9ff 	bl	800b8ec <USBH_Get_CfgDesc>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b4f2:	7bbb      	ldrb	r3, [r7, #14]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d103      	bne.n	800b500 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2205      	movs	r2, #5
 800b4fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b4fe:	e0de      	b.n	800b6be <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b500:	7bbb      	ldrb	r3, [r7, #14]
 800b502:	2b03      	cmp	r3, #3
 800b504:	f040 80db 	bne.w	800b6be <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b50e:	3301      	adds	r3, #1
 800b510:	b2da      	uxtb	r2, r3
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b51e:	2b03      	cmp	r3, #3
 800b520:	d903      	bls.n	800b52a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	220d      	movs	r2, #13
 800b526:	701a      	strb	r2, [r3, #0]
      break;
 800b528:	e0c9      	b.n	800b6be <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	795b      	ldrb	r3, [r3, #5]
 800b52e:	4619      	mov	r1, r3
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f001 f929 	bl	800c788 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	791b      	ldrb	r3, [r3, #4]
 800b53a:	4619      	mov	r1, r3
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f001 f923 	bl	800c788 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2200      	movs	r2, #0
 800b546:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2200      	movs	r2, #0
 800b54c:	701a      	strb	r2, [r3, #0]
      break;
 800b54e:	e0b6      	b.n	800b6be <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b556:	2b00      	cmp	r3, #0
 800b558:	d036      	beq.n	800b5c8 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b566:	23ff      	movs	r3, #255	; 0xff
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 f9e3 	bl	800b934 <USBH_Get_StringDesc>
 800b56e:	4603      	mov	r3, r0
 800b570:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b572:	7bbb      	ldrb	r3, [r7, #14]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d111      	bne.n	800b59c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2206      	movs	r2, #6
 800b57c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2205      	movs	r2, #5
 800b582:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b592:	2200      	movs	r2, #0
 800b594:	4619      	mov	r1, r3
 800b596:	f006 f8cf 	bl	8011738 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b59a:	e092      	b.n	800b6c2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b59c:	7bbb      	ldrb	r3, [r7, #14]
 800b59e:	2b03      	cmp	r3, #3
 800b5a0:	f040 808f 	bne.w	800b6c2 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2206      	movs	r2, #6
 800b5a8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2205      	movs	r2, #5
 800b5ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b5be:	2200      	movs	r2, #0
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	f006 f8b9 	bl	8011738 <osMessagePut>
      break;
 800b5c6:	e07c      	b.n	800b6c2 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2206      	movs	r2, #6
 800b5cc:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2205      	movs	r2, #5
 800b5d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	f006 f8a7 	bl	8011738 <osMessagePut>
      break;
 800b5ea:	e06a      	b.n	800b6c2 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d027      	beq.n	800b646 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b602:	23ff      	movs	r3, #255	; 0xff
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 f995 	bl	800b934 <USBH_Get_StringDesc>
 800b60a:	4603      	mov	r3, r0
 800b60c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b60e:	7bbb      	ldrb	r3, [r7, #14]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d103      	bne.n	800b61c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2207      	movs	r2, #7
 800b618:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b61a:	e054      	b.n	800b6c6 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b61c:	7bbb      	ldrb	r3, [r7, #14]
 800b61e:	2b03      	cmp	r3, #3
 800b620:	d151      	bne.n	800b6c6 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2207      	movs	r2, #7
 800b626:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2205      	movs	r2, #5
 800b62c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b63c:	2200      	movs	r2, #0
 800b63e:	4619      	mov	r1, r3
 800b640:	f006 f87a 	bl	8011738 <osMessagePut>
      break;
 800b644:	e03f      	b.n	800b6c6 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2207      	movs	r2, #7
 800b64a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2205      	movs	r2, #5
 800b650:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b660:	2200      	movs	r2, #0
 800b662:	4619      	mov	r1, r3
 800b664:	f006 f868 	bl	8011738 <osMessagePut>
      break;
 800b668:	e02d      	b.n	800b6c6 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b670:	2b00      	cmp	r3, #0
 800b672:	d017      	beq.n	800b6a4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b680:	23ff      	movs	r3, #255	; 0xff
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 f956 	bl	800b934 <USBH_Get_StringDesc>
 800b688:	4603      	mov	r3, r0
 800b68a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b68c:	7bbb      	ldrb	r3, [r7, #14]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d102      	bne.n	800b698 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b692:	2300      	movs	r3, #0
 800b694:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b696:	e018      	b.n	800b6ca <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b698:	7bbb      	ldrb	r3, [r7, #14]
 800b69a:	2b03      	cmp	r3, #3
 800b69c:	d115      	bne.n	800b6ca <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	73fb      	strb	r3, [r7, #15]
      break;
 800b6a2:	e012      	b.n	800b6ca <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	73fb      	strb	r3, [r7, #15]
      break;
 800b6a8:	e00f      	b.n	800b6ca <USBH_HandleEnum+0x44a>

    default:
      break;
 800b6aa:	bf00      	nop
 800b6ac:	e00e      	b.n	800b6cc <USBH_HandleEnum+0x44c>
      break;
 800b6ae:	bf00      	nop
 800b6b0:	e00c      	b.n	800b6cc <USBH_HandleEnum+0x44c>
      break;
 800b6b2:	bf00      	nop
 800b6b4:	e00a      	b.n	800b6cc <USBH_HandleEnum+0x44c>
      break;
 800b6b6:	bf00      	nop
 800b6b8:	e008      	b.n	800b6cc <USBH_HandleEnum+0x44c>
      break;
 800b6ba:	bf00      	nop
 800b6bc:	e006      	b.n	800b6cc <USBH_HandleEnum+0x44c>
      break;
 800b6be:	bf00      	nop
 800b6c0:	e004      	b.n	800b6cc <USBH_HandleEnum+0x44c>
      break;
 800b6c2:	bf00      	nop
 800b6c4:	e002      	b.n	800b6cc <USBH_HandleEnum+0x44c>
      break;
 800b6c6:	bf00      	nop
 800b6c8:	e000      	b.n	800b6cc <USBH_HandleEnum+0x44c>
      break;
 800b6ca:	bf00      	nop
  }
  return Status;
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop

0800b6d8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	683a      	ldr	r2, [r7, #0]
 800b6e6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b6ea:	bf00      	nop
 800b6ec:	370c      	adds	r7, #12
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr

0800b6f6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b082      	sub	sp, #8
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b704:	1c5a      	adds	r2, r3, #1
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 f804 	bl	800b71a <USBH_HandleSof>
}
 800b712:	bf00      	nop
 800b714:	3708      	adds	r7, #8
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}

0800b71a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b71a:	b580      	push	{r7, lr}
 800b71c:	b082      	sub	sp, #8
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	b2db      	uxtb	r3, r3
 800b728:	2b0b      	cmp	r3, #11
 800b72a:	d10a      	bne.n	800b742 <USBH_HandleSof+0x28>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b732:	2b00      	cmp	r3, #0
 800b734:	d005      	beq.n	800b742 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b73c:	699b      	ldr	r3, [r3, #24]
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	4798      	blx	r3
  }
}
 800b742:	bf00      	nop
 800b744:	3708      	adds	r7, #8
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b74a:	b580      	push	{r7, lr}
 800b74c:	b082      	sub	sp, #8
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2201      	movs	r2, #1
 800b756:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2201      	movs	r2, #1
 800b75e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b76e:	2200      	movs	r2, #0
 800b770:	4619      	mov	r1, r3
 800b772:	f005 ffe1 	bl	8011738 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b776:	bf00      	nop
}
 800b778:	3708      	adds	r7, #8
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b77e:	b480      	push	{r7}
 800b780:	b083      	sub	sp, #12
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b78e:	bf00      	nop
}
 800b790:	370c      	adds	r7, #12
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr

0800b79a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b082      	sub	sp, #8
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2201      	movs	r2, #1
 800b7be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	f005 ffb1 	bl	8011738 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b7d6:	2300      	movs	r3, #0
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3708      	adds	r7, #8
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f008 fb54 	bl	8013eae <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	791b      	ldrb	r3, [r3, #4]
 800b80a:	4619      	mov	r1, r3
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 ffbb 	bl	800c788 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	795b      	ldrb	r3, [r3, #5]
 800b816:	4619      	mov	r1, r3
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 ffb5 	bl	800c788 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2201      	movs	r2, #1
 800b822:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b832:	2200      	movs	r2, #0
 800b834:	4619      	mov	r1, r3
 800b836:	f005 ff7f 	bl	8011738 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b83a:	2300      	movs	r3, #0
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3708      	adds	r7, #8
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b086      	sub	sp, #24
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800b852:	f107 030c 	add.w	r3, r7, #12
 800b856:	f04f 32ff 	mov.w	r2, #4294967295
 800b85a:	4618      	mov	r0, r3
 800b85c:	f005 ffac 	bl	80117b8 <osMessageGet>
    if (event.status == osEventMessage)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2b10      	cmp	r3, #16
 800b864:	d1f2      	bne.n	800b84c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f7ff fa9e 	bl	800ada8 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800b86c:	e7ee      	b.n	800b84c <USBH_Process_OS+0x8>

0800b86e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b86e:	b580      	push	{r7, lr}
 800b870:	b082      	sub	sp, #8
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2201      	movs	r2, #1
 800b87a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b88a:	2200      	movs	r2, #0
 800b88c:	4619      	mov	r1, r3
 800b88e:	f005 ff53 	bl	8011738 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800b892:	2300      	movs	r3, #0
}
 800b894:	4618      	mov	r0, r3
 800b896:	3708      	adds	r7, #8
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b086      	sub	sp, #24
 800b8a0:	af02      	add	r7, sp, #8
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b8ae:	78fb      	ldrb	r3, [r7, #3]
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8ba:	2100      	movs	r1, #0
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f000 f864 	bl	800b98a <USBH_GetDescriptor>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800b8c6:	7bfb      	ldrb	r3, [r7, #15]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d10a      	bne.n	800b8e2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b8d8:	78fa      	ldrb	r2, [r7, #3]
 800b8da:	b292      	uxth	r2, r2
 800b8dc:	4619      	mov	r1, r3
 800b8de:	f000 f918 	bl	800bb12 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3710      	adds	r7, #16
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b086      	sub	sp, #24
 800b8f0:	af02      	add	r7, sp, #8
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	331c      	adds	r3, #28
 800b8fc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b8fe:	887b      	ldrh	r3, [r7, #2]
 800b900:	9300      	str	r3, [sp, #0]
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b908:	2100      	movs	r1, #0
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 f83d 	bl	800b98a <USBH_GetDescriptor>
 800b910:	4603      	mov	r3, r0
 800b912:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b914:	7bfb      	ldrb	r3, [r7, #15]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d107      	bne.n	800b92a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b91a:	887b      	ldrh	r3, [r7, #2]
 800b91c:	461a      	mov	r2, r3
 800b91e:	68b9      	ldr	r1, [r7, #8]
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 f987 	bl	800bc34 <USBH_ParseCfgDesc>
 800b926:	4603      	mov	r3, r0
 800b928:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b92a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3710      	adds	r7, #16
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b088      	sub	sp, #32
 800b938:	af02      	add	r7, sp, #8
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	607a      	str	r2, [r7, #4]
 800b93e:	461a      	mov	r2, r3
 800b940:	460b      	mov	r3, r1
 800b942:	72fb      	strb	r3, [r7, #11]
 800b944:	4613      	mov	r3, r2
 800b946:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800b948:	7afb      	ldrb	r3, [r7, #11]
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b950:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b958:	893b      	ldrh	r3, [r7, #8]
 800b95a:	9300      	str	r3, [sp, #0]
 800b95c:	460b      	mov	r3, r1
 800b95e:	2100      	movs	r1, #0
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f000 f812 	bl	800b98a <USBH_GetDescriptor>
 800b966:	4603      	mov	r3, r0
 800b968:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b96a:	7dfb      	ldrb	r3, [r7, #23]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d107      	bne.n	800b980 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b976:	893a      	ldrh	r2, [r7, #8]
 800b978:	6879      	ldr	r1, [r7, #4]
 800b97a:	4618      	mov	r0, r3
 800b97c:	f000 fb24 	bl	800bfc8 <USBH_ParseStringDesc>
  }

  return status;
 800b980:	7dfb      	ldrb	r3, [r7, #23]
}
 800b982:	4618      	mov	r0, r3
 800b984:	3718      	adds	r7, #24
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b084      	sub	sp, #16
 800b98e:	af00      	add	r7, sp, #0
 800b990:	60f8      	str	r0, [r7, #12]
 800b992:	607b      	str	r3, [r7, #4]
 800b994:	460b      	mov	r3, r1
 800b996:	72fb      	strb	r3, [r7, #11]
 800b998:	4613      	mov	r3, r2
 800b99a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	789b      	ldrb	r3, [r3, #2]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d11c      	bne.n	800b9de <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b9a4:	7afb      	ldrb	r3, [r7, #11]
 800b9a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b9aa:	b2da      	uxtb	r2, r3
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2206      	movs	r2, #6
 800b9b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	893a      	ldrh	r2, [r7, #8]
 800b9ba:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b9bc:	893b      	ldrh	r3, [r7, #8]
 800b9be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b9c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9c6:	d104      	bne.n	800b9d2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f240 4209 	movw	r2, #1033	; 0x409
 800b9ce:	829a      	strh	r2, [r3, #20]
 800b9d0:	e002      	b.n	800b9d8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	8b3a      	ldrh	r2, [r7, #24]
 800b9dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b9de:	8b3b      	ldrh	r3, [r7, #24]
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	6879      	ldr	r1, [r7, #4]
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f000 fb3d 	bl	800c064 <USBH_CtlReq>
 800b9ea:	4603      	mov	r3, r0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	789b      	ldrb	r3, [r3, #2]
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d10f      	bne.n	800ba28 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2205      	movs	r2, #5
 800ba12:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ba14:	78fb      	ldrb	r3, [r7, #3]
 800ba16:	b29a      	uxth	r2, r3
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ba28:	2200      	movs	r2, #0
 800ba2a:	2100      	movs	r1, #0
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 fb19 	bl	800c064 <USBH_CtlReq>
 800ba32:	4603      	mov	r3, r0
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3708      	adds	r7, #8
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	460b      	mov	r3, r1
 800ba46:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	789b      	ldrb	r3, [r3, #2]
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d10e      	bne.n	800ba6e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2209      	movs	r2, #9
 800ba5a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	887a      	ldrh	r2, [r7, #2]
 800ba60:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2200      	movs	r2, #0
 800ba66:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ba6e:	2200      	movs	r2, #0
 800ba70:	2100      	movs	r1, #0
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 faf6 	bl	800c064 <USBH_CtlReq>
 800ba78:	4603      	mov	r3, r0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3708      	adds	r7, #8
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b082      	sub	sp, #8
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	789b      	ldrb	r3, [r3, #2]
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d10f      	bne.n	800bab6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2203      	movs	r2, #3
 800baa0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800baa2:	78fb      	ldrb	r3, [r7, #3]
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bab6:	2200      	movs	r2, #0
 800bab8:	2100      	movs	r1, #0
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 fad2 	bl	800c064 <USBH_CtlReq>
 800bac0:	4603      	mov	r3, r0
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3708      	adds	r7, #8
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b082      	sub	sp, #8
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
 800bad2:	460b      	mov	r3, r1
 800bad4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	789b      	ldrb	r3, [r3, #2]
 800bada:	2b01      	cmp	r3, #1
 800badc:	d10f      	bne.n	800bafe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2202      	movs	r2, #2
 800bae2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2201      	movs	r2, #1
 800bae8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800baf0:	78fb      	ldrb	r3, [r7, #3]
 800baf2:	b29a      	uxth	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800bafe:	2200      	movs	r2, #0
 800bb00:	2100      	movs	r1, #0
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 faae 	bl	800c064 <USBH_CtlReq>
 800bb08:	4603      	mov	r3, r0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800bb12:	b480      	push	{r7}
 800bb14:	b085      	sub	sp, #20
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	60f8      	str	r0, [r7, #12]
 800bb1a:	60b9      	str	r1, [r7, #8]
 800bb1c:	4613      	mov	r3, r2
 800bb1e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	781a      	ldrb	r2, [r3, #0]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	785a      	ldrb	r2, [r3, #1]
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	3302      	adds	r3, #2
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	3303      	adds	r3, #3
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	b29b      	uxth	r3, r3
 800bb40:	021b      	lsls	r3, r3, #8
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	4313      	orrs	r3, r2
 800bb46:	b29a      	uxth	r2, r3
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	791a      	ldrb	r2, [r3, #4]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	795a      	ldrb	r2, [r3, #5]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	799a      	ldrb	r2, [r3, #6]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	79da      	ldrb	r2, [r3, #7]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	79db      	ldrb	r3, [r3, #7]
 800bb70:	2b20      	cmp	r3, #32
 800bb72:	dc11      	bgt.n	800bb98 <USBH_ParseDevDesc+0x86>
 800bb74:	2b08      	cmp	r3, #8
 800bb76:	db16      	blt.n	800bba6 <USBH_ParseDevDesc+0x94>
 800bb78:	3b08      	subs	r3, #8
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	fa02 f303 	lsl.w	r3, r2, r3
 800bb80:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800bb84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	bf14      	ite	ne
 800bb8c:	2301      	movne	r3, #1
 800bb8e:	2300      	moveq	r3, #0
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d102      	bne.n	800bb9c <USBH_ParseDevDesc+0x8a>
 800bb96:	e006      	b.n	800bba6 <USBH_ParseDevDesc+0x94>
 800bb98:	2b40      	cmp	r3, #64	; 0x40
 800bb9a:	d104      	bne.n	800bba6 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	79da      	ldrb	r2, [r3, #7]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	71da      	strb	r2, [r3, #7]
      break;
 800bba4:	e003      	b.n	800bbae <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2240      	movs	r2, #64	; 0x40
 800bbaa:	71da      	strb	r2, [r3, #7]
      break;
 800bbac:	bf00      	nop
  }

  if (length > 8U)
 800bbae:	88fb      	ldrh	r3, [r7, #6]
 800bbb0:	2b08      	cmp	r3, #8
 800bbb2:	d939      	bls.n	800bc28 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	3308      	adds	r3, #8
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	b29a      	uxth	r2, r3
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	3309      	adds	r3, #9
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	b29b      	uxth	r3, r3
 800bbc4:	021b      	lsls	r3, r3, #8
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	b29a      	uxth	r2, r3
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	330a      	adds	r3, #10
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	b29a      	uxth	r2, r3
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	330b      	adds	r3, #11
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	021b      	lsls	r3, r3, #8
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	b29a      	uxth	r2, r3
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	330c      	adds	r3, #12
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	330d      	adds	r3, #13
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	021b      	lsls	r3, r3, #8
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	4313      	orrs	r3, r2
 800bc02:	b29a      	uxth	r2, r3
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	7b9a      	ldrb	r2, [r3, #14]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	7bda      	ldrb	r2, [r3, #15]
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	7c1a      	ldrb	r2, [r3, #16]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	7c5a      	ldrb	r2, [r3, #17]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	745a      	strb	r2, [r3, #17]
  }
}
 800bc28:	bf00      	nop
 800bc2a:	3714      	adds	r7, #20
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b08c      	sub	sp, #48	; 0x30
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	4613      	mov	r3, r2
 800bc40:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bc48:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bc54:	2300      	movs	r3, #0
 800bc56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	781a      	ldrb	r2, [r3, #0]
 800bc68:	6a3b      	ldr	r3, [r7, #32]
 800bc6a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	785a      	ldrb	r2, [r3, #1]
 800bc70:	6a3b      	ldr	r3, [r7, #32]
 800bc72:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	3302      	adds	r3, #2
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	b29a      	uxth	r2, r3
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	3303      	adds	r3, #3
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	021b      	lsls	r3, r3, #8
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc90:	bf28      	it	cs
 800bc92:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800bc96:	b29a      	uxth	r2, r3
 800bc98:	6a3b      	ldr	r3, [r7, #32]
 800bc9a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	791a      	ldrb	r2, [r3, #4]
 800bca0:	6a3b      	ldr	r3, [r7, #32]
 800bca2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	795a      	ldrb	r2, [r3, #5]
 800bca8:	6a3b      	ldr	r3, [r7, #32]
 800bcaa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	799a      	ldrb	r2, [r3, #6]
 800bcb0:	6a3b      	ldr	r3, [r7, #32]
 800bcb2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	79da      	ldrb	r2, [r3, #7]
 800bcb8:	6a3b      	ldr	r3, [r7, #32]
 800bcba:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	7a1a      	ldrb	r2, [r3, #8]
 800bcc0:	6a3b      	ldr	r3, [r7, #32]
 800bcc2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800bcc4:	6a3b      	ldr	r3, [r7, #32]
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	2b09      	cmp	r3, #9
 800bcca:	d002      	beq.n	800bcd2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800bccc:	6a3b      	ldr	r3, [r7, #32]
 800bcce:	2209      	movs	r2, #9
 800bcd0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bcd2:	88fb      	ldrh	r3, [r7, #6]
 800bcd4:	2b09      	cmp	r3, #9
 800bcd6:	f240 809d 	bls.w	800be14 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800bcda:	2309      	movs	r3, #9
 800bcdc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bcde:	2300      	movs	r3, #0
 800bce0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bce2:	e081      	b.n	800bde8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bce4:	f107 0316 	add.w	r3, r7, #22
 800bce8:	4619      	mov	r1, r3
 800bcea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcec:	f000 f99f 	bl	800c02e <USBH_GetNextDesc>
 800bcf0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800bcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf4:	785b      	ldrb	r3, [r3, #1]
 800bcf6:	2b04      	cmp	r3, #4
 800bcf8:	d176      	bne.n	800bde8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800bcfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	2b09      	cmp	r3, #9
 800bd00:	d002      	beq.n	800bd08 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800bd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd04:	2209      	movs	r2, #9
 800bd06:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800bd08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd0c:	221a      	movs	r2, #26
 800bd0e:	fb02 f303 	mul.w	r3, r2, r3
 800bd12:	3308      	adds	r3, #8
 800bd14:	6a3a      	ldr	r2, [r7, #32]
 800bd16:	4413      	add	r3, r2
 800bd18:	3302      	adds	r3, #2
 800bd1a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bd1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd1e:	69f8      	ldr	r0, [r7, #28]
 800bd20:	f000 f87e 	bl	800be20 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bd24:	2300      	movs	r3, #0
 800bd26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bd2e:	e043      	b.n	800bdb8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bd30:	f107 0316 	add.w	r3, r7, #22
 800bd34:	4619      	mov	r1, r3
 800bd36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd38:	f000 f979 	bl	800c02e <USBH_GetNextDesc>
 800bd3c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd40:	785b      	ldrb	r3, [r3, #1]
 800bd42:	2b05      	cmp	r3, #5
 800bd44:	d138      	bne.n	800bdb8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	795b      	ldrb	r3, [r3, #5]
 800bd4a:	2b01      	cmp	r3, #1
 800bd4c:	d10f      	bne.n	800bd6e <USBH_ParseCfgDesc+0x13a>
 800bd4e:	69fb      	ldr	r3, [r7, #28]
 800bd50:	799b      	ldrb	r3, [r3, #6]
 800bd52:	2b02      	cmp	r3, #2
 800bd54:	d10b      	bne.n	800bd6e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	79db      	ldrb	r3, [r3, #7]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d10f      	bne.n	800bd7e <USBH_ParseCfgDesc+0x14a>
 800bd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	2b09      	cmp	r3, #9
 800bd64:	d00b      	beq.n	800bd7e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800bd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd68:	2209      	movs	r2, #9
 800bd6a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bd6c:	e007      	b.n	800bd7e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800bd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	2b07      	cmp	r3, #7
 800bd74:	d004      	beq.n	800bd80 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800bd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd78:	2207      	movs	r2, #7
 800bd7a:	701a      	strb	r2, [r3, #0]
 800bd7c:	e000      	b.n	800bd80 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bd7e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bd80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd84:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bd88:	3201      	adds	r2, #1
 800bd8a:	00d2      	lsls	r2, r2, #3
 800bd8c:	211a      	movs	r1, #26
 800bd8e:	fb01 f303 	mul.w	r3, r1, r3
 800bd92:	4413      	add	r3, r2
 800bd94:	3308      	adds	r3, #8
 800bd96:	6a3a      	ldr	r2, [r7, #32]
 800bd98:	4413      	add	r3, r2
 800bd9a:	3304      	adds	r3, #4
 800bd9c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800bd9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bda0:	69b9      	ldr	r1, [r7, #24]
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f000 f86b 	bl	800be7e <USBH_ParseEPDesc>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800bdae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	791b      	ldrb	r3, [r3, #4]
 800bdbc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d204      	bcs.n	800bdce <USBH_ParseCfgDesc+0x19a>
 800bdc4:	6a3b      	ldr	r3, [r7, #32]
 800bdc6:	885a      	ldrh	r2, [r3, #2]
 800bdc8:	8afb      	ldrh	r3, [r7, #22]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d8b0      	bhi.n	800bd30 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800bdce:	69fb      	ldr	r3, [r7, #28]
 800bdd0:	791b      	ldrb	r3, [r3, #4]
 800bdd2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d201      	bcs.n	800bdde <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800bdda:	2303      	movs	r3, #3
 800bddc:	e01c      	b.n	800be18 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800bdde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bde2:	3301      	adds	r3, #1
 800bde4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bde8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d805      	bhi.n	800bdfc <USBH_ParseCfgDesc+0x1c8>
 800bdf0:	6a3b      	ldr	r3, [r7, #32]
 800bdf2:	885a      	ldrh	r2, [r3, #2]
 800bdf4:	8afb      	ldrh	r3, [r7, #22]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	f63f af74 	bhi.w	800bce4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800bdfc:	6a3b      	ldr	r3, [r7, #32]
 800bdfe:	791b      	ldrb	r3, [r3, #4]
 800be00:	2b02      	cmp	r3, #2
 800be02:	bf28      	it	cs
 800be04:	2302      	movcs	r3, #2
 800be06:	b2db      	uxtb	r3, r3
 800be08:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d201      	bcs.n	800be14 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800be10:	2303      	movs	r3, #3
 800be12:	e001      	b.n	800be18 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800be14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3730      	adds	r7, #48	; 0x30
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	781a      	ldrb	r2, [r3, #0]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	785a      	ldrb	r2, [r3, #1]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	789a      	ldrb	r2, [r3, #2]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	78da      	ldrb	r2, [r3, #3]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	791a      	ldrb	r2, [r3, #4]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	795a      	ldrb	r2, [r3, #5]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	799a      	ldrb	r2, [r3, #6]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	79da      	ldrb	r2, [r3, #7]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	7a1a      	ldrb	r2, [r3, #8]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	721a      	strb	r2, [r3, #8]
}
 800be72:	bf00      	nop
 800be74:	370c      	adds	r7, #12
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr

0800be7e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800be7e:	b480      	push	{r7}
 800be80:	b087      	sub	sp, #28
 800be82:	af00      	add	r7, sp, #0
 800be84:	60f8      	str	r0, [r7, #12]
 800be86:	60b9      	str	r1, [r7, #8]
 800be88:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800be8a:	2300      	movs	r3, #0
 800be8c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	781a      	ldrb	r2, [r3, #0]
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	785a      	ldrb	r2, [r3, #1]
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	789a      	ldrb	r2, [r3, #2]
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	78da      	ldrb	r2, [r3, #3]
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	3304      	adds	r3, #4
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	b29a      	uxth	r2, r3
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	3305      	adds	r3, #5
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	021b      	lsls	r3, r3, #8
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	4313      	orrs	r3, r2
 800bec4:	b29a      	uxth	r2, r3
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	799a      	ldrb	r2, [r3, #6]
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	889b      	ldrh	r3, [r3, #4]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d102      	bne.n	800bee0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800beda:	2303      	movs	r3, #3
 800bedc:	75fb      	strb	r3, [r7, #23]
 800bede:	e033      	b.n	800bf48 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	889b      	ldrh	r3, [r3, #4]
 800bee4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bee8:	f023 0307 	bic.w	r3, r3, #7
 800beec:	b29a      	uxth	r2, r3
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	889b      	ldrh	r3, [r3, #4]
 800bef6:	b21a      	sxth	r2, r3
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	3304      	adds	r3, #4
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	b299      	uxth	r1, r3
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	3305      	adds	r3, #5
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	021b      	lsls	r3, r3, #8
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	430b      	orrs	r3, r1
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d110      	bne.n	800bf3a <USBH_ParseEPDesc+0xbc>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	3304      	adds	r3, #4
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	b299      	uxth	r1, r3
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	3305      	adds	r3, #5
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	021b      	lsls	r3, r3, #8
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	430b      	orrs	r3, r1
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	b21b      	sxth	r3, r3
 800bf32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf36:	b21b      	sxth	r3, r3
 800bf38:	e001      	b.n	800bf3e <USBH_ParseEPDesc+0xc0>
 800bf3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf3e:	4313      	orrs	r3, r2
 800bf40:	b21b      	sxth	r3, r3
 800bf42:	b29a      	uxth	r2, r3
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d116      	bne.n	800bf80 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	78db      	ldrb	r3, [r3, #3]
 800bf56:	f003 0303 	and.w	r3, r3, #3
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d005      	beq.n	800bf6a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	78db      	ldrb	r3, [r3, #3]
 800bf62:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bf66:	2b03      	cmp	r3, #3
 800bf68:	d127      	bne.n	800bfba <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	799b      	ldrb	r3, [r3, #6]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d003      	beq.n	800bf7a <USBH_ParseEPDesc+0xfc>
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	799b      	ldrb	r3, [r3, #6]
 800bf76:	2b10      	cmp	r3, #16
 800bf78:	d91f      	bls.n	800bfba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bf7a:	2303      	movs	r3, #3
 800bf7c:	75fb      	strb	r3, [r7, #23]
 800bf7e:	e01c      	b.n	800bfba <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	78db      	ldrb	r3, [r3, #3]
 800bf84:	f003 0303 	and.w	r3, r3, #3
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d10a      	bne.n	800bfa2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	799b      	ldrb	r3, [r3, #6]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d003      	beq.n	800bf9c <USBH_ParseEPDesc+0x11e>
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	799b      	ldrb	r3, [r3, #6]
 800bf98:	2b10      	cmp	r3, #16
 800bf9a:	d90e      	bls.n	800bfba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bf9c:	2303      	movs	r3, #3
 800bf9e:	75fb      	strb	r3, [r7, #23]
 800bfa0:	e00b      	b.n	800bfba <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	78db      	ldrb	r3, [r3, #3]
 800bfa6:	f003 0303 	and.w	r3, r3, #3
 800bfaa:	2b03      	cmp	r3, #3
 800bfac:	d105      	bne.n	800bfba <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	799b      	ldrb	r3, [r3, #6]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d101      	bne.n	800bfba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bfb6:	2303      	movs	r3, #3
 800bfb8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800bfba:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	371c      	adds	r7, #28
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b087      	sub	sp, #28
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	4613      	mov	r3, r2
 800bfd4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	2b03      	cmp	r3, #3
 800bfde:	d120      	bne.n	800c022 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	1e9a      	subs	r2, r3, #2
 800bfe6:	88fb      	ldrh	r3, [r7, #6]
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	bf28      	it	cs
 800bfec:	4613      	movcs	r3, r2
 800bfee:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	3302      	adds	r3, #2
 800bff4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bff6:	2300      	movs	r3, #0
 800bff8:	82fb      	strh	r3, [r7, #22]
 800bffa:	e00b      	b.n	800c014 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bffc:	8afb      	ldrh	r3, [r7, #22]
 800bffe:	68fa      	ldr	r2, [r7, #12]
 800c000:	4413      	add	r3, r2
 800c002:	781a      	ldrb	r2, [r3, #0]
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	3301      	adds	r3, #1
 800c00c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c00e:	8afb      	ldrh	r3, [r7, #22]
 800c010:	3302      	adds	r3, #2
 800c012:	82fb      	strh	r3, [r7, #22]
 800c014:	8afa      	ldrh	r2, [r7, #22]
 800c016:	8abb      	ldrh	r3, [r7, #20]
 800c018:	429a      	cmp	r2, r3
 800c01a:	d3ef      	bcc.n	800bffc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	2200      	movs	r2, #0
 800c020:	701a      	strb	r2, [r3, #0]
  }
}
 800c022:	bf00      	nop
 800c024:	371c      	adds	r7, #28
 800c026:	46bd      	mov	sp, r7
 800c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02c:	4770      	bx	lr

0800c02e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c02e:	b480      	push	{r7}
 800c030:	b085      	sub	sp, #20
 800c032:	af00      	add	r7, sp, #0
 800c034:	6078      	str	r0, [r7, #4]
 800c036:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	881a      	ldrh	r2, [r3, #0]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	b29b      	uxth	r3, r3
 800c042:	4413      	add	r3, r2
 800c044:	b29a      	uxth	r2, r3
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	4413      	add	r3, r2
 800c054:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c056:	68fb      	ldr	r3, [r7, #12]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3714      	adds	r7, #20
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	4613      	mov	r3, r2
 800c070:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c072:	2301      	movs	r3, #1
 800c074:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	789b      	ldrb	r3, [r3, #2]
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d002      	beq.n	800c084 <USBH_CtlReq+0x20>
 800c07e:	2b02      	cmp	r3, #2
 800c080:	d01d      	beq.n	800c0be <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800c082:	e043      	b.n	800c10c <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	68ba      	ldr	r2, [r7, #8]
 800c088:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	88fa      	ldrh	r2, [r7, #6]
 800c08e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2201      	movs	r2, #1
 800c094:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2202      	movs	r2, #2
 800c09a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c09c:	2301      	movs	r3, #1
 800c09e:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2203      	movs	r2, #3
 800c0a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	f005 fb3e 	bl	8011738 <osMessagePut>
      break;
 800c0bc:	e026      	b.n	800c10c <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	f000 f82a 	bl	800c118 <USBH_HandleControl>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c0c8:	7dfb      	ldrb	r3, [r7, #23]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d002      	beq.n	800c0d4 <USBH_CtlReq+0x70>
 800c0ce:	7dfb      	ldrb	r3, [r7, #23]
 800c0d0:	2b03      	cmp	r3, #3
 800c0d2:	d106      	bne.n	800c0e2 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	761a      	strb	r2, [r3, #24]
 800c0e0:	e005      	b.n	800c0ee <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800c0e2:	7dfb      	ldrb	r3, [r7, #23]
 800c0e4:	2b02      	cmp	r3, #2
 800c0e6:	d102      	bne.n	800c0ee <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2203      	movs	r2, #3
 800c0f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c102:	2200      	movs	r2, #0
 800c104:	4619      	mov	r1, r3
 800c106:	f005 fb17 	bl	8011738 <osMessagePut>
      break;
 800c10a:	bf00      	nop
  }
  return status;
 800c10c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3718      	adds	r7, #24
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
	...

0800c118 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b086      	sub	sp, #24
 800c11c:	af02      	add	r7, sp, #8
 800c11e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c120:	2301      	movs	r3, #1
 800c122:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c124:	2300      	movs	r3, #0
 800c126:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	7e1b      	ldrb	r3, [r3, #24]
 800c12c:	3b01      	subs	r3, #1
 800c12e:	2b0a      	cmp	r3, #10
 800c130:	f200 8229 	bhi.w	800c586 <USBH_HandleControl+0x46e>
 800c134:	a201      	add	r2, pc, #4	; (adr r2, 800c13c <USBH_HandleControl+0x24>)
 800c136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c13a:	bf00      	nop
 800c13c:	0800c169 	.word	0x0800c169
 800c140:	0800c183 	.word	0x0800c183
 800c144:	0800c225 	.word	0x0800c225
 800c148:	0800c24b 	.word	0x0800c24b
 800c14c:	0800c2d7 	.word	0x0800c2d7
 800c150:	0800c301 	.word	0x0800c301
 800c154:	0800c3c3 	.word	0x0800c3c3
 800c158:	0800c3e5 	.word	0x0800c3e5
 800c15c:	0800c477 	.word	0x0800c477
 800c160:	0800c49d 	.word	0x0800c49d
 800c164:	0800c52f 	.word	0x0800c52f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f103 0110 	add.w	r1, r3, #16
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	795b      	ldrb	r3, [r3, #5]
 800c172:	461a      	mov	r2, r3
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 fa17 	bl	800c5a8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2202      	movs	r2, #2
 800c17e:	761a      	strb	r2, [r3, #24]
      break;
 800c180:	e20c      	b.n	800c59c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	795b      	ldrb	r3, [r3, #5]
 800c186:	4619      	mov	r1, r3
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f007 ff7f 	bl	801408c <USBH_LL_GetURBState>
 800c18e:	4603      	mov	r3, r0
 800c190:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c192:	7bbb      	ldrb	r3, [r7, #14]
 800c194:	2b01      	cmp	r3, #1
 800c196:	d12c      	bne.n	800c1f2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	7c1b      	ldrb	r3, [r3, #16]
 800c19c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c1a0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	8adb      	ldrh	r3, [r3, #22]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d00a      	beq.n	800c1c0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c1aa:	7b7b      	ldrb	r3, [r7, #13]
 800c1ac:	2b80      	cmp	r3, #128	; 0x80
 800c1ae:	d103      	bne.n	800c1b8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2203      	movs	r2, #3
 800c1b4:	761a      	strb	r2, [r3, #24]
 800c1b6:	e00d      	b.n	800c1d4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2205      	movs	r2, #5
 800c1bc:	761a      	strb	r2, [r3, #24]
 800c1be:	e009      	b.n	800c1d4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800c1c0:	7b7b      	ldrb	r3, [r7, #13]
 800c1c2:	2b80      	cmp	r3, #128	; 0x80
 800c1c4:	d103      	bne.n	800c1ce <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2209      	movs	r2, #9
 800c1ca:	761a      	strb	r2, [r3, #24]
 800c1cc:	e002      	b.n	800c1d4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2207      	movs	r2, #7
 800c1d2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2203      	movs	r2, #3
 800c1d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	f005 faa4 	bl	8011738 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c1f0:	e1cb      	b.n	800c58a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c1f2:	7bbb      	ldrb	r3, [r7, #14]
 800c1f4:	2b04      	cmp	r3, #4
 800c1f6:	d003      	beq.n	800c200 <USBH_HandleControl+0xe8>
 800c1f8:	7bbb      	ldrb	r3, [r7, #14]
 800c1fa:	2b02      	cmp	r3, #2
 800c1fc:	f040 81c5 	bne.w	800c58a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	220b      	movs	r2, #11
 800c204:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2203      	movs	r2, #3
 800c20a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c21a:	2200      	movs	r2, #0
 800c21c:	4619      	mov	r1, r3
 800c21e:	f005 fa8b 	bl	8011738 <osMessagePut>
      break;
 800c222:	e1b2      	b.n	800c58a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c22a:	b29a      	uxth	r2, r3
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6899      	ldr	r1, [r3, #8]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	899a      	ldrh	r2, [r3, #12]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	791b      	ldrb	r3, [r3, #4]
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 f9f2 	bl	800c626 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2204      	movs	r2, #4
 800c246:	761a      	strb	r2, [r3, #24]
      break;
 800c248:	e1a8      	b.n	800c59c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	791b      	ldrb	r3, [r3, #4]
 800c24e:	4619      	mov	r1, r3
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f007 ff1b 	bl	801408c <USBH_LL_GetURBState>
 800c256:	4603      	mov	r3, r0
 800c258:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c25a:	7bbb      	ldrb	r3, [r7, #14]
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d110      	bne.n	800c282 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2209      	movs	r2, #9
 800c264:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2203      	movs	r2, #3
 800c26a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c27a:	2200      	movs	r2, #0
 800c27c:	4619      	mov	r1, r3
 800c27e:	f005 fa5b 	bl	8011738 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c282:	7bbb      	ldrb	r3, [r7, #14]
 800c284:	2b05      	cmp	r3, #5
 800c286:	d110      	bne.n	800c2aa <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c288:	2303      	movs	r3, #3
 800c28a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2203      	movs	r2, #3
 800c290:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	4619      	mov	r1, r3
 800c2a4:	f005 fa48 	bl	8011738 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c2a8:	e171      	b.n	800c58e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800c2aa:	7bbb      	ldrb	r3, [r7, #14]
 800c2ac:	2b04      	cmp	r3, #4
 800c2ae:	f040 816e 	bne.w	800c58e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	220b      	movs	r2, #11
 800c2b6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2203      	movs	r2, #3
 800c2bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	f005 fa32 	bl	8011738 <osMessagePut>
      break;
 800c2d4:	e15b      	b.n	800c58e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6899      	ldr	r1, [r3, #8]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	899a      	ldrh	r2, [r3, #12]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	795b      	ldrb	r3, [r3, #5]
 800c2e2:	2001      	movs	r0, #1
 800c2e4:	9000      	str	r0, [sp, #0]
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f000 f978 	bl	800c5dc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c2f2:	b29a      	uxth	r2, r3
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2206      	movs	r2, #6
 800c2fc:	761a      	strb	r2, [r3, #24]
      break;
 800c2fe:	e14d      	b.n	800c59c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	795b      	ldrb	r3, [r3, #5]
 800c304:	4619      	mov	r1, r3
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f007 fec0 	bl	801408c <USBH_LL_GetURBState>
 800c30c:	4603      	mov	r3, r0
 800c30e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c310:	7bbb      	ldrb	r3, [r7, #14]
 800c312:	2b01      	cmp	r3, #1
 800c314:	d111      	bne.n	800c33a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2207      	movs	r2, #7
 800c31a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2203      	movs	r2, #3
 800c320:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c330:	2200      	movs	r2, #0
 800c332:	4619      	mov	r1, r3
 800c334:	f005 fa00 	bl	8011738 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c338:	e12b      	b.n	800c592 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800c33a:	7bbb      	ldrb	r3, [r7, #14]
 800c33c:	2b05      	cmp	r3, #5
 800c33e:	d113      	bne.n	800c368 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	220c      	movs	r2, #12
 800c344:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c346:	2303      	movs	r3, #3
 800c348:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2203      	movs	r2, #3
 800c34e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c35e:	2200      	movs	r2, #0
 800c360:	4619      	mov	r1, r3
 800c362:	f005 f9e9 	bl	8011738 <osMessagePut>
      break;
 800c366:	e114      	b.n	800c592 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c368:	7bbb      	ldrb	r3, [r7, #14]
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	d111      	bne.n	800c392 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2205      	movs	r2, #5
 800c372:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2203      	movs	r2, #3
 800c378:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c388:	2200      	movs	r2, #0
 800c38a:	4619      	mov	r1, r3
 800c38c:	f005 f9d4 	bl	8011738 <osMessagePut>
      break;
 800c390:	e0ff      	b.n	800c592 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800c392:	7bbb      	ldrb	r3, [r7, #14]
 800c394:	2b04      	cmp	r3, #4
 800c396:	f040 80fc 	bne.w	800c592 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	220b      	movs	r2, #11
 800c39e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c3a0:	2302      	movs	r3, #2
 800c3a2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2203      	movs	r2, #3
 800c3a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	f005 f9bc 	bl	8011738 <osMessagePut>
      break;
 800c3c0:	e0e7      	b.n	800c592 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	791b      	ldrb	r3, [r3, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 f92b 	bl	800c626 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c3d6:	b29a      	uxth	r2, r3
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2208      	movs	r2, #8
 800c3e0:	761a      	strb	r2, [r3, #24]

      break;
 800c3e2:	e0db      	b.n	800c59c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	791b      	ldrb	r3, [r3, #4]
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f007 fe4e 	bl	801408c <USBH_LL_GetURBState>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c3f4:	7bbb      	ldrb	r3, [r7, #14]
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	d113      	bne.n	800c422 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	220d      	movs	r2, #13
 800c3fe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c400:	2300      	movs	r3, #0
 800c402:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2203      	movs	r2, #3
 800c408:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c418:	2200      	movs	r2, #0
 800c41a:	4619      	mov	r1, r3
 800c41c:	f005 f98c 	bl	8011738 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c420:	e0b9      	b.n	800c596 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800c422:	7bbb      	ldrb	r3, [r7, #14]
 800c424:	2b04      	cmp	r3, #4
 800c426:	d111      	bne.n	800c44c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	220b      	movs	r2, #11
 800c42c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2203      	movs	r2, #3
 800c432:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c442:	2200      	movs	r2, #0
 800c444:	4619      	mov	r1, r3
 800c446:	f005 f977 	bl	8011738 <osMessagePut>
      break;
 800c44a:	e0a4      	b.n	800c596 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800c44c:	7bbb      	ldrb	r3, [r7, #14]
 800c44e:	2b05      	cmp	r3, #5
 800c450:	f040 80a1 	bne.w	800c596 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800c454:	2303      	movs	r3, #3
 800c456:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2203      	movs	r2, #3
 800c45c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c46c:	2200      	movs	r2, #0
 800c46e:	4619      	mov	r1, r3
 800c470:	f005 f962 	bl	8011738 <osMessagePut>
      break;
 800c474:	e08f      	b.n	800c596 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	795b      	ldrb	r3, [r3, #5]
 800c47a:	2201      	movs	r2, #1
 800c47c:	9200      	str	r2, [sp, #0]
 800c47e:	2200      	movs	r2, #0
 800c480:	2100      	movs	r1, #0
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 f8aa 	bl	800c5dc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c48e:	b29a      	uxth	r2, r3
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	220a      	movs	r2, #10
 800c498:	761a      	strb	r2, [r3, #24]
      break;
 800c49a:	e07f      	b.n	800c59c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	795b      	ldrb	r3, [r3, #5]
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f007 fdf2 	bl	801408c <USBH_LL_GetURBState>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c4ac:	7bbb      	ldrb	r3, [r7, #14]
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	d113      	bne.n	800c4da <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	220d      	movs	r2, #13
 800c4ba:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2203      	movs	r2, #3
 800c4c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	f005 f930 	bl	8011738 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c4d8:	e05f      	b.n	800c59a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c4da:	7bbb      	ldrb	r3, [r7, #14]
 800c4dc:	2b02      	cmp	r3, #2
 800c4de:	d111      	bne.n	800c504 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2209      	movs	r2, #9
 800c4e4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2203      	movs	r2, #3
 800c4ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	f005 f91b 	bl	8011738 <osMessagePut>
      break;
 800c502:	e04a      	b.n	800c59a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800c504:	7bbb      	ldrb	r3, [r7, #14]
 800c506:	2b04      	cmp	r3, #4
 800c508:	d147      	bne.n	800c59a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	220b      	movs	r2, #11
 800c50e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2203      	movs	r2, #3
 800c514:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c524:	2200      	movs	r2, #0
 800c526:	4619      	mov	r1, r3
 800c528:	f005 f906 	bl	8011738 <osMessagePut>
      break;
 800c52c:	e035      	b.n	800c59a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	7e5b      	ldrb	r3, [r3, #25]
 800c532:	3301      	adds	r3, #1
 800c534:	b2da      	uxtb	r2, r3
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	765a      	strb	r2, [r3, #25]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	7e5b      	ldrb	r3, [r3, #25]
 800c53e:	2b02      	cmp	r3, #2
 800c540:	d806      	bhi.n	800c550 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2201      	movs	r2, #1
 800c546:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2201      	movs	r2, #1
 800c54c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c54e:	e025      	b.n	800c59c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c556:	2106      	movs	r1, #6
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	795b      	ldrb	r3, [r3, #5]
 800c566:	4619      	mov	r1, r3
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 f90d 	bl	800c788 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	791b      	ldrb	r3, [r3, #4]
 800c572:	4619      	mov	r1, r3
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 f907 	bl	800c788 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2200      	movs	r2, #0
 800c57e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c580:	2302      	movs	r3, #2
 800c582:	73fb      	strb	r3, [r7, #15]
      break;
 800c584:	e00a      	b.n	800c59c <USBH_HandleControl+0x484>

    default:
      break;
 800c586:	bf00      	nop
 800c588:	e008      	b.n	800c59c <USBH_HandleControl+0x484>
      break;
 800c58a:	bf00      	nop
 800c58c:	e006      	b.n	800c59c <USBH_HandleControl+0x484>
      break;
 800c58e:	bf00      	nop
 800c590:	e004      	b.n	800c59c <USBH_HandleControl+0x484>
      break;
 800c592:	bf00      	nop
 800c594:	e002      	b.n	800c59c <USBH_HandleControl+0x484>
      break;
 800c596:	bf00      	nop
 800c598:	e000      	b.n	800c59c <USBH_HandleControl+0x484>
      break;
 800c59a:	bf00      	nop
  }

  return status;
 800c59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop

0800c5a8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b088      	sub	sp, #32
 800c5ac:	af04      	add	r7, sp, #16
 800c5ae:	60f8      	str	r0, [r7, #12]
 800c5b0:	60b9      	str	r1, [r7, #8]
 800c5b2:	4613      	mov	r3, r2
 800c5b4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c5b6:	79f9      	ldrb	r1, [r7, #7]
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	9303      	str	r3, [sp, #12]
 800c5bc:	2308      	movs	r3, #8
 800c5be:	9302      	str	r3, [sp, #8]
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	9301      	str	r3, [sp, #4]
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	9300      	str	r3, [sp, #0]
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	68f8      	ldr	r0, [r7, #12]
 800c5ce:	f007 fd2c 	bl	801402a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3710      	adds	r7, #16
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b088      	sub	sp, #32
 800c5e0:	af04      	add	r7, sp, #16
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	60b9      	str	r1, [r7, #8]
 800c5e6:	4611      	mov	r1, r2
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	80fb      	strh	r3, [r7, #6]
 800c5ee:	4613      	mov	r3, r2
 800c5f0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d001      	beq.n	800c600 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c600:	7979      	ldrb	r1, [r7, #5]
 800c602:	7e3b      	ldrb	r3, [r7, #24]
 800c604:	9303      	str	r3, [sp, #12]
 800c606:	88fb      	ldrh	r3, [r7, #6]
 800c608:	9302      	str	r3, [sp, #8]
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	9301      	str	r3, [sp, #4]
 800c60e:	2301      	movs	r3, #1
 800c610:	9300      	str	r3, [sp, #0]
 800c612:	2300      	movs	r3, #0
 800c614:	2200      	movs	r2, #0
 800c616:	68f8      	ldr	r0, [r7, #12]
 800c618:	f007 fd07 	bl	801402a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c61c:	2300      	movs	r3, #0
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3710      	adds	r7, #16
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}

0800c626 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c626:	b580      	push	{r7, lr}
 800c628:	b088      	sub	sp, #32
 800c62a:	af04      	add	r7, sp, #16
 800c62c:	60f8      	str	r0, [r7, #12]
 800c62e:	60b9      	str	r1, [r7, #8]
 800c630:	4611      	mov	r1, r2
 800c632:	461a      	mov	r2, r3
 800c634:	460b      	mov	r3, r1
 800c636:	80fb      	strh	r3, [r7, #6]
 800c638:	4613      	mov	r3, r2
 800c63a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c63c:	7979      	ldrb	r1, [r7, #5]
 800c63e:	2300      	movs	r3, #0
 800c640:	9303      	str	r3, [sp, #12]
 800c642:	88fb      	ldrh	r3, [r7, #6]
 800c644:	9302      	str	r3, [sp, #8]
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	9301      	str	r3, [sp, #4]
 800c64a:	2301      	movs	r3, #1
 800c64c:	9300      	str	r3, [sp, #0]
 800c64e:	2300      	movs	r3, #0
 800c650:	2201      	movs	r2, #1
 800c652:	68f8      	ldr	r0, [r7, #12]
 800c654:	f007 fce9 	bl	801402a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c658:	2300      	movs	r3, #0

}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3710      	adds	r7, #16
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c662:	b580      	push	{r7, lr}
 800c664:	b088      	sub	sp, #32
 800c666:	af04      	add	r7, sp, #16
 800c668:	60f8      	str	r0, [r7, #12]
 800c66a:	60b9      	str	r1, [r7, #8]
 800c66c:	4611      	mov	r1, r2
 800c66e:	461a      	mov	r2, r3
 800c670:	460b      	mov	r3, r1
 800c672:	80fb      	strh	r3, [r7, #6]
 800c674:	4613      	mov	r3, r2
 800c676:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d001      	beq.n	800c686 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c682:	2300      	movs	r3, #0
 800c684:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c686:	7979      	ldrb	r1, [r7, #5]
 800c688:	7e3b      	ldrb	r3, [r7, #24]
 800c68a:	9303      	str	r3, [sp, #12]
 800c68c:	88fb      	ldrh	r3, [r7, #6]
 800c68e:	9302      	str	r3, [sp, #8]
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	9301      	str	r3, [sp, #4]
 800c694:	2301      	movs	r3, #1
 800c696:	9300      	str	r3, [sp, #0]
 800c698:	2302      	movs	r3, #2
 800c69a:	2200      	movs	r2, #0
 800c69c:	68f8      	ldr	r0, [r7, #12]
 800c69e:	f007 fcc4 	bl	801402a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c6a2:	2300      	movs	r3, #0
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3710      	adds	r7, #16
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b088      	sub	sp, #32
 800c6b0:	af04      	add	r7, sp, #16
 800c6b2:	60f8      	str	r0, [r7, #12]
 800c6b4:	60b9      	str	r1, [r7, #8]
 800c6b6:	4611      	mov	r1, r2
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	80fb      	strh	r3, [r7, #6]
 800c6be:	4613      	mov	r3, r2
 800c6c0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c6c2:	7979      	ldrb	r1, [r7, #5]
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	9303      	str	r3, [sp, #12]
 800c6c8:	88fb      	ldrh	r3, [r7, #6]
 800c6ca:	9302      	str	r3, [sp, #8]
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	9301      	str	r3, [sp, #4]
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	9300      	str	r3, [sp, #0]
 800c6d4:	2302      	movs	r3, #2
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	68f8      	ldr	r0, [r7, #12]
 800c6da:	f007 fca6 	bl	801402a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c6de:	2300      	movs	r3, #0
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3710      	adds	r7, #16
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b086      	sub	sp, #24
 800c6ec:	af04      	add	r7, sp, #16
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	4608      	mov	r0, r1
 800c6f2:	4611      	mov	r1, r2
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	70fb      	strb	r3, [r7, #3]
 800c6fa:	460b      	mov	r3, r1
 800c6fc:	70bb      	strb	r3, [r7, #2]
 800c6fe:	4613      	mov	r3, r2
 800c700:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c702:	7878      	ldrb	r0, [r7, #1]
 800c704:	78ba      	ldrb	r2, [r7, #2]
 800c706:	78f9      	ldrb	r1, [r7, #3]
 800c708:	8b3b      	ldrh	r3, [r7, #24]
 800c70a:	9302      	str	r3, [sp, #8]
 800c70c:	7d3b      	ldrb	r3, [r7, #20]
 800c70e:	9301      	str	r3, [sp, #4]
 800c710:	7c3b      	ldrb	r3, [r7, #16]
 800c712:	9300      	str	r3, [sp, #0]
 800c714:	4603      	mov	r3, r0
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f007 fc39 	bl	8013f8e <USBH_LL_OpenPipe>

  return USBH_OK;
 800c71c:	2300      	movs	r3, #0
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3708      	adds	r7, #8
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b082      	sub	sp, #8
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
 800c72e:	460b      	mov	r3, r1
 800c730:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c732:	78fb      	ldrb	r3, [r7, #3]
 800c734:	4619      	mov	r1, r3
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f007 fc58 	bl	8013fec <USBH_LL_ClosePipe>

  return USBH_OK;
 800c73c:	2300      	movs	r3, #0
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3708      	adds	r7, #8
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c746:	b580      	push	{r7, lr}
 800c748:	b084      	sub	sp, #16
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
 800c74e:	460b      	mov	r3, r1
 800c750:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 f836 	bl	800c7c4 <USBH_GetFreePipe>
 800c758:	4603      	mov	r3, r0
 800c75a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c75c:	89fb      	ldrh	r3, [r7, #14]
 800c75e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c762:	4293      	cmp	r3, r2
 800c764:	d00a      	beq.n	800c77c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c766:	78fa      	ldrb	r2, [r7, #3]
 800c768:	89fb      	ldrh	r3, [r7, #14]
 800c76a:	f003 030f 	and.w	r3, r3, #15
 800c76e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c772:	6879      	ldr	r1, [r7, #4]
 800c774:	33e0      	adds	r3, #224	; 0xe0
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	440b      	add	r3, r1
 800c77a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c77c:	89fb      	ldrh	r3, [r7, #14]
 800c77e:	b2db      	uxtb	r3, r3
}
 800c780:	4618      	mov	r0, r3
 800c782:	3710      	adds	r7, #16
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	460b      	mov	r3, r1
 800c792:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c794:	78fb      	ldrb	r3, [r7, #3]
 800c796:	2b0f      	cmp	r3, #15
 800c798:	d80d      	bhi.n	800c7b6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c79a:	78fb      	ldrb	r3, [r7, #3]
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	33e0      	adds	r3, #224	; 0xe0
 800c7a0:	009b      	lsls	r3, r3, #2
 800c7a2:	4413      	add	r3, r2
 800c7a4:	685a      	ldr	r2, [r3, #4]
 800c7a6:	78fb      	ldrb	r3, [r7, #3]
 800c7a8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c7ac:	6879      	ldr	r1, [r7, #4]
 800c7ae:	33e0      	adds	r3, #224	; 0xe0
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	440b      	add	r3, r1
 800c7b4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b085      	sub	sp, #20
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	73fb      	strb	r3, [r7, #15]
 800c7d4:	e00f      	b.n	800c7f6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c7d6:	7bfb      	ldrb	r3, [r7, #15]
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	33e0      	adds	r3, #224	; 0xe0
 800c7dc:	009b      	lsls	r3, r3, #2
 800c7de:	4413      	add	r3, r2
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d102      	bne.n	800c7f0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c7ea:	7bfb      	ldrb	r3, [r7, #15]
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	e007      	b.n	800c800 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c7f0:	7bfb      	ldrb	r3, [r7, #15]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	73fb      	strb	r3, [r7, #15]
 800c7f6:	7bfb      	ldrb	r3, [r7, #15]
 800c7f8:	2b0f      	cmp	r3, #15
 800c7fa:	d9ec      	bls.n	800c7d6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c7fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c800:	4618      	mov	r0, r3
 800c802:	3714      	adds	r7, #20
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr

0800c80c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b084      	sub	sp, #16
 800c810:	af00      	add	r7, sp, #0
 800c812:	4603      	mov	r3, r0
 800c814:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c816:	79fb      	ldrb	r3, [r7, #7]
 800c818:	4a08      	ldr	r2, [pc, #32]	; (800c83c <disk_status+0x30>)
 800c81a:	009b      	lsls	r3, r3, #2
 800c81c:	4413      	add	r3, r2
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	79fa      	ldrb	r2, [r7, #7]
 800c824:	4905      	ldr	r1, [pc, #20]	; (800c83c <disk_status+0x30>)
 800c826:	440a      	add	r2, r1
 800c828:	7d12      	ldrb	r2, [r2, #20]
 800c82a:	4610      	mov	r0, r2
 800c82c:	4798      	blx	r3
 800c82e:	4603      	mov	r3, r0
 800c830:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c832:	7bfb      	ldrb	r3, [r7, #15]
}
 800c834:	4618      	mov	r0, r3
 800c836:	3710      	adds	r7, #16
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	2000227c 	.word	0x2000227c

0800c840 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	4603      	mov	r3, r0
 800c848:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c84a:	2300      	movs	r3, #0
 800c84c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c84e:	79fb      	ldrb	r3, [r7, #7]
 800c850:	4a0d      	ldr	r2, [pc, #52]	; (800c888 <disk_initialize+0x48>)
 800c852:	5cd3      	ldrb	r3, [r2, r3]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d111      	bne.n	800c87c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c858:	79fb      	ldrb	r3, [r7, #7]
 800c85a:	4a0b      	ldr	r2, [pc, #44]	; (800c888 <disk_initialize+0x48>)
 800c85c:	2101      	movs	r1, #1
 800c85e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c860:	79fb      	ldrb	r3, [r7, #7]
 800c862:	4a09      	ldr	r2, [pc, #36]	; (800c888 <disk_initialize+0x48>)
 800c864:	009b      	lsls	r3, r3, #2
 800c866:	4413      	add	r3, r2
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	79fa      	ldrb	r2, [r7, #7]
 800c86e:	4906      	ldr	r1, [pc, #24]	; (800c888 <disk_initialize+0x48>)
 800c870:	440a      	add	r2, r1
 800c872:	7d12      	ldrb	r2, [r2, #20]
 800c874:	4610      	mov	r0, r2
 800c876:	4798      	blx	r3
 800c878:	4603      	mov	r3, r0
 800c87a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c87c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop
 800c888:	2000227c 	.word	0x2000227c

0800c88c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c88c:	b590      	push	{r4, r7, lr}
 800c88e:	b087      	sub	sp, #28
 800c890:	af00      	add	r7, sp, #0
 800c892:	60b9      	str	r1, [r7, #8]
 800c894:	607a      	str	r2, [r7, #4]
 800c896:	603b      	str	r3, [r7, #0]
 800c898:	4603      	mov	r3, r0
 800c89a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c89c:	7bfb      	ldrb	r3, [r7, #15]
 800c89e:	4a0a      	ldr	r2, [pc, #40]	; (800c8c8 <disk_read+0x3c>)
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	4413      	add	r3, r2
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	689c      	ldr	r4, [r3, #8]
 800c8a8:	7bfb      	ldrb	r3, [r7, #15]
 800c8aa:	4a07      	ldr	r2, [pc, #28]	; (800c8c8 <disk_read+0x3c>)
 800c8ac:	4413      	add	r3, r2
 800c8ae:	7d18      	ldrb	r0, [r3, #20]
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	68b9      	ldr	r1, [r7, #8]
 800c8b6:	47a0      	blx	r4
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	75fb      	strb	r3, [r7, #23]
  return res;
 800c8bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	371c      	adds	r7, #28
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd90      	pop	{r4, r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	2000227c 	.word	0x2000227c

0800c8cc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c8cc:	b590      	push	{r4, r7, lr}
 800c8ce:	b087      	sub	sp, #28
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60b9      	str	r1, [r7, #8]
 800c8d4:	607a      	str	r2, [r7, #4]
 800c8d6:	603b      	str	r3, [r7, #0]
 800c8d8:	4603      	mov	r3, r0
 800c8da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c8dc:	7bfb      	ldrb	r3, [r7, #15]
 800c8de:	4a0a      	ldr	r2, [pc, #40]	; (800c908 <disk_write+0x3c>)
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	4413      	add	r3, r2
 800c8e4:	685b      	ldr	r3, [r3, #4]
 800c8e6:	68dc      	ldr	r4, [r3, #12]
 800c8e8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ea:	4a07      	ldr	r2, [pc, #28]	; (800c908 <disk_write+0x3c>)
 800c8ec:	4413      	add	r3, r2
 800c8ee:	7d18      	ldrb	r0, [r3, #20]
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	68b9      	ldr	r1, [r7, #8]
 800c8f6:	47a0      	blx	r4
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	75fb      	strb	r3, [r7, #23]
  return res;
 800c8fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	371c      	adds	r7, #28
 800c902:	46bd      	mov	sp, r7
 800c904:	bd90      	pop	{r4, r7, pc}
 800c906:	bf00      	nop
 800c908:	2000227c 	.word	0x2000227c

0800c90c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	4603      	mov	r3, r0
 800c914:	603a      	str	r2, [r7, #0]
 800c916:	71fb      	strb	r3, [r7, #7]
 800c918:	460b      	mov	r3, r1
 800c91a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c91c:	79fb      	ldrb	r3, [r7, #7]
 800c91e:	4a09      	ldr	r2, [pc, #36]	; (800c944 <disk_ioctl+0x38>)
 800c920:	009b      	lsls	r3, r3, #2
 800c922:	4413      	add	r3, r2
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	691b      	ldr	r3, [r3, #16]
 800c928:	79fa      	ldrb	r2, [r7, #7]
 800c92a:	4906      	ldr	r1, [pc, #24]	; (800c944 <disk_ioctl+0x38>)
 800c92c:	440a      	add	r2, r1
 800c92e:	7d10      	ldrb	r0, [r2, #20]
 800c930:	79b9      	ldrb	r1, [r7, #6]
 800c932:	683a      	ldr	r2, [r7, #0]
 800c934:	4798      	blx	r3
 800c936:	4603      	mov	r3, r0
 800c938:	73fb      	strb	r3, [r7, #15]
  return res;
 800c93a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3710      	adds	r7, #16
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	2000227c 	.word	0x2000227c

0800c948 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c948:	b480      	push	{r7}
 800c94a:	b085      	sub	sp, #20
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	3301      	adds	r3, #1
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c958:	89fb      	ldrh	r3, [r7, #14]
 800c95a:	021b      	lsls	r3, r3, #8
 800c95c:	b21a      	sxth	r2, r3
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	b21b      	sxth	r3, r3
 800c964:	4313      	orrs	r3, r2
 800c966:	b21b      	sxth	r3, r3
 800c968:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c96a:	89fb      	ldrh	r3, [r7, #14]
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3714      	adds	r7, #20
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr

0800c978 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c978:	b480      	push	{r7}
 800c97a:	b085      	sub	sp, #20
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	3303      	adds	r3, #3
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	021b      	lsls	r3, r3, #8
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	3202      	adds	r2, #2
 800c990:	7812      	ldrb	r2, [r2, #0]
 800c992:	4313      	orrs	r3, r2
 800c994:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	021b      	lsls	r3, r3, #8
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	3201      	adds	r2, #1
 800c99e:	7812      	ldrb	r2, [r2, #0]
 800c9a0:	4313      	orrs	r3, r2
 800c9a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	021b      	lsls	r3, r3, #8
 800c9a8:	687a      	ldr	r2, [r7, #4]
 800c9aa:	7812      	ldrb	r2, [r2, #0]
 800c9ac:	4313      	orrs	r3, r2
 800c9ae:	60fb      	str	r3, [r7, #12]
	return rv;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3714      	adds	r7, #20
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9bc:	4770      	bx	lr

0800c9be <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800c9be:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c9c2:	b09d      	sub	sp, #116	; 0x74
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 800c9c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9ca:	3307      	adds	r3, #7
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	469a      	mov	sl, r3
 800c9d4:	4693      	mov	fp, r2
 800c9d6:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 800c9da:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c9de:	f04f 0000 	mov.w	r0, #0
 800c9e2:	f04f 0100 	mov.w	r1, #0
 800c9e6:	0219      	lsls	r1, r3, #8
 800c9e8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c9ec:	0210      	lsls	r0, r2, #8
 800c9ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9f0:	3306      	adds	r3, #6
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	461c      	mov	r4, r3
 800c9fa:	4615      	mov	r5, r2
 800c9fc:	ea40 0804 	orr.w	r8, r0, r4
 800ca00:	ea41 0905 	orr.w	r9, r1, r5
 800ca04:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 800ca08:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800ca0c:	f04f 0000 	mov.w	r0, #0
 800ca10:	f04f 0100 	mov.w	r1, #0
 800ca14:	0219      	lsls	r1, r3, #8
 800ca16:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800ca1a:	0210      	lsls	r0, r2, #8
 800ca1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca1e:	3305      	adds	r3, #5
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	2200      	movs	r2, #0
 800ca26:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca28:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ca2a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800ca2e:	4623      	mov	r3, r4
 800ca30:	4303      	orrs	r3, r0
 800ca32:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca34:	462b      	mov	r3, r5
 800ca36:	430b      	orrs	r3, r1
 800ca38:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca3a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800ca3e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 800ca42:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800ca46:	f04f 0000 	mov.w	r0, #0
 800ca4a:	f04f 0100 	mov.w	r1, #0
 800ca4e:	0219      	lsls	r1, r3, #8
 800ca50:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800ca54:	0210      	lsls	r0, r2, #8
 800ca56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca58:	3304      	adds	r3, #4
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	b2db      	uxtb	r3, r3
 800ca5e:	2200      	movs	r2, #0
 800ca60:	653b      	str	r3, [r7, #80]	; 0x50
 800ca62:	657a      	str	r2, [r7, #84]	; 0x54
 800ca64:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800ca68:	4623      	mov	r3, r4
 800ca6a:	4303      	orrs	r3, r0
 800ca6c:	623b      	str	r3, [r7, #32]
 800ca6e:	462b      	mov	r3, r5
 800ca70:	430b      	orrs	r3, r1
 800ca72:	627b      	str	r3, [r7, #36]	; 0x24
 800ca74:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800ca78:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 800ca7c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800ca80:	f04f 0000 	mov.w	r0, #0
 800ca84:	f04f 0100 	mov.w	r1, #0
 800ca88:	0219      	lsls	r1, r3, #8
 800ca8a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800ca8e:	0210      	lsls	r0, r2, #8
 800ca90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca92:	3303      	adds	r3, #3
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	2200      	movs	r2, #0
 800ca9a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca9c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ca9e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800caa2:	4623      	mov	r3, r4
 800caa4:	4303      	orrs	r3, r0
 800caa6:	61bb      	str	r3, [r7, #24]
 800caa8:	462b      	mov	r3, r5
 800caaa:	430b      	orrs	r3, r1
 800caac:	61fb      	str	r3, [r7, #28]
 800caae:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800cab2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 800cab6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800caba:	f04f 0000 	mov.w	r0, #0
 800cabe:	f04f 0100 	mov.w	r1, #0
 800cac2:	0219      	lsls	r1, r3, #8
 800cac4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800cac8:	0210      	lsls	r0, r2, #8
 800caca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cacc:	3302      	adds	r3, #2
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	2200      	movs	r2, #0
 800cad4:	643b      	str	r3, [r7, #64]	; 0x40
 800cad6:	647a      	str	r2, [r7, #68]	; 0x44
 800cad8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800cadc:	4623      	mov	r3, r4
 800cade:	4303      	orrs	r3, r0
 800cae0:	613b      	str	r3, [r7, #16]
 800cae2:	462b      	mov	r3, r5
 800cae4:	430b      	orrs	r3, r1
 800cae6:	617b      	str	r3, [r7, #20]
 800cae8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800caec:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 800caf0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800caf4:	f04f 0200 	mov.w	r2, #0
 800caf8:	f04f 0300 	mov.w	r3, #0
 800cafc:	020b      	lsls	r3, r1, #8
 800cafe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cb02:	0202      	lsls	r2, r0, #8
 800cb04:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cb06:	3101      	adds	r1, #1
 800cb08:	7809      	ldrb	r1, [r1, #0]
 800cb0a:	b2c9      	uxtb	r1, r1
 800cb0c:	2000      	movs	r0, #0
 800cb0e:	63b9      	str	r1, [r7, #56]	; 0x38
 800cb10:	63f8      	str	r0, [r7, #60]	; 0x3c
 800cb12:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800cb16:	4621      	mov	r1, r4
 800cb18:	4311      	orrs	r1, r2
 800cb1a:	60b9      	str	r1, [r7, #8]
 800cb1c:	4629      	mov	r1, r5
 800cb1e:	4319      	orrs	r1, r3
 800cb20:	60f9      	str	r1, [r7, #12]
 800cb22:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800cb26:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800cb2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cb2e:	f04f 0200 	mov.w	r2, #0
 800cb32:	f04f 0300 	mov.w	r3, #0
 800cb36:	020b      	lsls	r3, r1, #8
 800cb38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cb3c:	0202      	lsls	r2, r0, #8
 800cb3e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cb40:	7809      	ldrb	r1, [r1, #0]
 800cb42:	b2c9      	uxtb	r1, r1
 800cb44:	2000      	movs	r0, #0
 800cb46:	6339      	str	r1, [r7, #48]	; 0x30
 800cb48:	6378      	str	r0, [r7, #52]	; 0x34
 800cb4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800cb4e:	4621      	mov	r1, r4
 800cb50:	4311      	orrs	r1, r2
 800cb52:	6039      	str	r1, [r7, #0]
 800cb54:	4629      	mov	r1, r5
 800cb56:	4319      	orrs	r1, r3
 800cb58:	6079      	str	r1, [r7, #4]
 800cb5a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800cb5e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 800cb62:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 800cb66:	4610      	mov	r0, r2
 800cb68:	4619      	mov	r1, r3
 800cb6a:	3774      	adds	r7, #116	; 0x74
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800cb72:	4770      	bx	lr

0800cb74 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cb74:	b480      	push	{r7}
 800cb76:	b083      	sub	sp, #12
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	1c5a      	adds	r2, r3, #1
 800cb84:	607a      	str	r2, [r7, #4]
 800cb86:	887a      	ldrh	r2, [r7, #2]
 800cb88:	b2d2      	uxtb	r2, r2
 800cb8a:	701a      	strb	r2, [r3, #0]
 800cb8c:	887b      	ldrh	r3, [r7, #2]
 800cb8e:	0a1b      	lsrs	r3, r3, #8
 800cb90:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	1c5a      	adds	r2, r3, #1
 800cb96:	607a      	str	r2, [r7, #4]
 800cb98:	887a      	ldrh	r2, [r7, #2]
 800cb9a:	b2d2      	uxtb	r2, r2
 800cb9c:	701a      	strb	r2, [r3, #0]
}
 800cb9e:	bf00      	nop
 800cba0:	370c      	adds	r7, #12
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr

0800cbaa <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cbaa:	b480      	push	{r7}
 800cbac:	b083      	sub	sp, #12
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]
 800cbb2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	1c5a      	adds	r2, r3, #1
 800cbb8:	607a      	str	r2, [r7, #4]
 800cbba:	683a      	ldr	r2, [r7, #0]
 800cbbc:	b2d2      	uxtb	r2, r2
 800cbbe:	701a      	strb	r2, [r3, #0]
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	0a1b      	lsrs	r3, r3, #8
 800cbc4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	1c5a      	adds	r2, r3, #1
 800cbca:	607a      	str	r2, [r7, #4]
 800cbcc:	683a      	ldr	r2, [r7, #0]
 800cbce:	b2d2      	uxtb	r2, r2
 800cbd0:	701a      	strb	r2, [r3, #0]
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	0a1b      	lsrs	r3, r3, #8
 800cbd6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	1c5a      	adds	r2, r3, #1
 800cbdc:	607a      	str	r2, [r7, #4]
 800cbde:	683a      	ldr	r2, [r7, #0]
 800cbe0:	b2d2      	uxtb	r2, r2
 800cbe2:	701a      	strb	r2, [r3, #0]
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	0a1b      	lsrs	r3, r3, #8
 800cbe8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	1c5a      	adds	r2, r3, #1
 800cbee:	607a      	str	r2, [r7, #4]
 800cbf0:	683a      	ldr	r2, [r7, #0]
 800cbf2:	b2d2      	uxtb	r2, r2
 800cbf4:	701a      	strb	r2, [r3, #0]
}
 800cbf6:	bf00      	nop
 800cbf8:	370c      	adds	r7, #12
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr

0800cc02 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800cc02:	b480      	push	{r7}
 800cc04:	b085      	sub	sp, #20
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	60f8      	str	r0, [r7, #12]
 800cc0a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	1c5a      	adds	r2, r3, #1
 800cc12:	60fa      	str	r2, [r7, #12]
 800cc14:	783a      	ldrb	r2, [r7, #0]
 800cc16:	701a      	strb	r2, [r3, #0]
 800cc18:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc1c:	f04f 0200 	mov.w	r2, #0
 800cc20:	f04f 0300 	mov.w	r3, #0
 800cc24:	0a02      	lsrs	r2, r0, #8
 800cc26:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800cc2a:	0a0b      	lsrs	r3, r1, #8
 800cc2c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	1c5a      	adds	r2, r3, #1
 800cc34:	60fa      	str	r2, [r7, #12]
 800cc36:	783a      	ldrb	r2, [r7, #0]
 800cc38:	701a      	strb	r2, [r3, #0]
 800cc3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc3e:	f04f 0200 	mov.w	r2, #0
 800cc42:	f04f 0300 	mov.w	r3, #0
 800cc46:	0a02      	lsrs	r2, r0, #8
 800cc48:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800cc4c:	0a0b      	lsrs	r3, r1, #8
 800cc4e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	1c5a      	adds	r2, r3, #1
 800cc56:	60fa      	str	r2, [r7, #12]
 800cc58:	783a      	ldrb	r2, [r7, #0]
 800cc5a:	701a      	strb	r2, [r3, #0]
 800cc5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc60:	f04f 0200 	mov.w	r2, #0
 800cc64:	f04f 0300 	mov.w	r3, #0
 800cc68:	0a02      	lsrs	r2, r0, #8
 800cc6a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800cc6e:	0a0b      	lsrs	r3, r1, #8
 800cc70:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	1c5a      	adds	r2, r3, #1
 800cc78:	60fa      	str	r2, [r7, #12]
 800cc7a:	783a      	ldrb	r2, [r7, #0]
 800cc7c:	701a      	strb	r2, [r3, #0]
 800cc7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc82:	f04f 0200 	mov.w	r2, #0
 800cc86:	f04f 0300 	mov.w	r3, #0
 800cc8a:	0a02      	lsrs	r2, r0, #8
 800cc8c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800cc90:	0a0b      	lsrs	r3, r1, #8
 800cc92:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	1c5a      	adds	r2, r3, #1
 800cc9a:	60fa      	str	r2, [r7, #12]
 800cc9c:	783a      	ldrb	r2, [r7, #0]
 800cc9e:	701a      	strb	r2, [r3, #0]
 800cca0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cca4:	f04f 0200 	mov.w	r2, #0
 800cca8:	f04f 0300 	mov.w	r3, #0
 800ccac:	0a02      	lsrs	r2, r0, #8
 800ccae:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ccb2:	0a0b      	lsrs	r3, r1, #8
 800ccb4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	1c5a      	adds	r2, r3, #1
 800ccbc:	60fa      	str	r2, [r7, #12]
 800ccbe:	783a      	ldrb	r2, [r7, #0]
 800ccc0:	701a      	strb	r2, [r3, #0]
 800ccc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ccc6:	f04f 0200 	mov.w	r2, #0
 800ccca:	f04f 0300 	mov.w	r3, #0
 800ccce:	0a02      	lsrs	r2, r0, #8
 800ccd0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ccd4:	0a0b      	lsrs	r3, r1, #8
 800ccd6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	1c5a      	adds	r2, r3, #1
 800ccde:	60fa      	str	r2, [r7, #12]
 800cce0:	783a      	ldrb	r2, [r7, #0]
 800cce2:	701a      	strb	r2, [r3, #0]
 800cce4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cce8:	f04f 0200 	mov.w	r2, #0
 800ccec:	f04f 0300 	mov.w	r3, #0
 800ccf0:	0a02      	lsrs	r2, r0, #8
 800ccf2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ccf6:	0a0b      	lsrs	r3, r1, #8
 800ccf8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	1c5a      	adds	r2, r3, #1
 800cd00:	60fa      	str	r2, [r7, #12]
 800cd02:	783a      	ldrb	r2, [r7, #0]
 800cd04:	701a      	strb	r2, [r3, #0]
}
 800cd06:	bf00      	nop
 800cd08:	3714      	adds	r7, #20
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr

0800cd12 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cd12:	b480      	push	{r7}
 800cd14:	b087      	sub	sp, #28
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	60f8      	str	r0, [r7, #12]
 800cd1a:	60b9      	str	r1, [r7, #8]
 800cd1c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d00d      	beq.n	800cd48 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cd2c:	693a      	ldr	r2, [r7, #16]
 800cd2e:	1c53      	adds	r3, r2, #1
 800cd30:	613b      	str	r3, [r7, #16]
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	1c59      	adds	r1, r3, #1
 800cd36:	6179      	str	r1, [r7, #20]
 800cd38:	7812      	ldrb	r2, [r2, #0]
 800cd3a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	3b01      	subs	r3, #1
 800cd40:	607b      	str	r3, [r7, #4]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d1f1      	bne.n	800cd2c <mem_cpy+0x1a>
	}
}
 800cd48:	bf00      	nop
 800cd4a:	371c      	adds	r7, #28
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cd54:	b480      	push	{r7}
 800cd56:	b087      	sub	sp, #28
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	1c5a      	adds	r2, r3, #1
 800cd68:	617a      	str	r2, [r7, #20]
 800cd6a:	68ba      	ldr	r2, [r7, #8]
 800cd6c:	b2d2      	uxtb	r2, r2
 800cd6e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	3b01      	subs	r3, #1
 800cd74:	607b      	str	r3, [r7, #4]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d1f3      	bne.n	800cd64 <mem_set+0x10>
}
 800cd7c:	bf00      	nop
 800cd7e:	bf00      	nop
 800cd80:	371c      	adds	r7, #28
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr

0800cd8a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cd8a:	b480      	push	{r7}
 800cd8c:	b089      	sub	sp, #36	; 0x24
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	60f8      	str	r0, [r7, #12]
 800cd92:	60b9      	str	r1, [r7, #8]
 800cd94:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	61fb      	str	r3, [r7, #28]
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cda2:	69fb      	ldr	r3, [r7, #28]
 800cda4:	1c5a      	adds	r2, r3, #1
 800cda6:	61fa      	str	r2, [r7, #28]
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	4619      	mov	r1, r3
 800cdac:	69bb      	ldr	r3, [r7, #24]
 800cdae:	1c5a      	adds	r2, r3, #1
 800cdb0:	61ba      	str	r2, [r7, #24]
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	1acb      	subs	r3, r1, r3
 800cdb6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	3b01      	subs	r3, #1
 800cdbc:	607b      	str	r3, [r7, #4]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d002      	beq.n	800cdca <mem_cmp+0x40>
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d0eb      	beq.n	800cda2 <mem_cmp+0x18>

	return r;
 800cdca:	697b      	ldr	r3, [r7, #20]
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3724      	adds	r7, #36	; 0x24
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr

0800cdd8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cdd8:	b480      	push	{r7}
 800cdda:	b083      	sub	sp, #12
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cde2:	e002      	b.n	800cdea <chk_chr+0x12>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	3301      	adds	r3, #1
 800cde8:	607b      	str	r3, [r7, #4]
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d005      	beq.n	800cdfe <chk_chr+0x26>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d1f2      	bne.n	800cde4 <chk_chr+0xc>
	return *str;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	781b      	ldrb	r3, [r3, #0]
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	370c      	adds	r7, #12
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr
	...

0800ce10 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b085      	sub	sp, #20
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	60bb      	str	r3, [r7, #8]
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	60fb      	str	r3, [r7, #12]
 800ce22:	e029      	b.n	800ce78 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ce24:	4a27      	ldr	r2, [pc, #156]	; (800cec4 <chk_lock+0xb4>)
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	011b      	lsls	r3, r3, #4
 800ce2a:	4413      	add	r3, r2
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d01d      	beq.n	800ce6e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ce32:	4a24      	ldr	r2, [pc, #144]	; (800cec4 <chk_lock+0xb4>)
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	011b      	lsls	r3, r3, #4
 800ce38:	4413      	add	r3, r2
 800ce3a:	681a      	ldr	r2, [r3, #0]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d116      	bne.n	800ce72 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ce44:	4a1f      	ldr	r2, [pc, #124]	; (800cec4 <chk_lock+0xb4>)
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	011b      	lsls	r3, r3, #4
 800ce4a:	4413      	add	r3, r2
 800ce4c:	3304      	adds	r3, #4
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d10c      	bne.n	800ce72 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ce58:	4a1a      	ldr	r2, [pc, #104]	; (800cec4 <chk_lock+0xb4>)
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	011b      	lsls	r3, r3, #4
 800ce5e:	4413      	add	r3, r2
 800ce60:	3308      	adds	r3, #8
 800ce62:	681a      	ldr	r2, [r3, #0]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d102      	bne.n	800ce72 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ce6c:	e007      	b.n	800ce7e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ce6e:	2301      	movs	r3, #1
 800ce70:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	3301      	adds	r3, #1
 800ce76:	60fb      	str	r3, [r7, #12]
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d9d2      	bls.n	800ce24 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2b02      	cmp	r3, #2
 800ce82:	d109      	bne.n	800ce98 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d102      	bne.n	800ce90 <chk_lock+0x80>
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	2b02      	cmp	r3, #2
 800ce8e:	d101      	bne.n	800ce94 <chk_lock+0x84>
 800ce90:	2300      	movs	r3, #0
 800ce92:	e010      	b.n	800ceb6 <chk_lock+0xa6>
 800ce94:	2312      	movs	r3, #18
 800ce96:	e00e      	b.n	800ceb6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d108      	bne.n	800ceb0 <chk_lock+0xa0>
 800ce9e:	4a09      	ldr	r2, [pc, #36]	; (800cec4 <chk_lock+0xb4>)
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	011b      	lsls	r3, r3, #4
 800cea4:	4413      	add	r3, r2
 800cea6:	330c      	adds	r3, #12
 800cea8:	881b      	ldrh	r3, [r3, #0]
 800ceaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ceae:	d101      	bne.n	800ceb4 <chk_lock+0xa4>
 800ceb0:	2310      	movs	r3, #16
 800ceb2:	e000      	b.n	800ceb6 <chk_lock+0xa6>
 800ceb4:	2300      	movs	r3, #0
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3714      	adds	r7, #20
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr
 800cec2:	bf00      	nop
 800cec4:	20001dfc 	.word	0x20001dfc

0800cec8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cec8:	b480      	push	{r7}
 800ceca:	b083      	sub	sp, #12
 800cecc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cece:	2300      	movs	r3, #0
 800ced0:	607b      	str	r3, [r7, #4]
 800ced2:	e002      	b.n	800ceda <enq_lock+0x12>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	3301      	adds	r3, #1
 800ced8:	607b      	str	r3, [r7, #4]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d806      	bhi.n	800ceee <enq_lock+0x26>
 800cee0:	4a09      	ldr	r2, [pc, #36]	; (800cf08 <enq_lock+0x40>)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	011b      	lsls	r3, r3, #4
 800cee6:	4413      	add	r3, r2
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d1f2      	bne.n	800ced4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2b02      	cmp	r3, #2
 800cef2:	bf14      	ite	ne
 800cef4:	2301      	movne	r3, #1
 800cef6:	2300      	moveq	r3, #0
 800cef8:	b2db      	uxtb	r3, r3
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	370c      	adds	r7, #12
 800cefe:	46bd      	mov	sp, r7
 800cf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf04:	4770      	bx	lr
 800cf06:	bf00      	nop
 800cf08:	20001dfc 	.word	0x20001dfc

0800cf0c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b085      	sub	sp, #20
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cf16:	2300      	movs	r3, #0
 800cf18:	60fb      	str	r3, [r7, #12]
 800cf1a:	e01f      	b.n	800cf5c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cf1c:	4a41      	ldr	r2, [pc, #260]	; (800d024 <inc_lock+0x118>)
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	011b      	lsls	r3, r3, #4
 800cf22:	4413      	add	r3, r2
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d113      	bne.n	800cf56 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cf2e:	4a3d      	ldr	r2, [pc, #244]	; (800d024 <inc_lock+0x118>)
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	011b      	lsls	r3, r3, #4
 800cf34:	4413      	add	r3, r2
 800cf36:	3304      	adds	r3, #4
 800cf38:	681a      	ldr	r2, [r3, #0]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d109      	bne.n	800cf56 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cf42:	4a38      	ldr	r2, [pc, #224]	; (800d024 <inc_lock+0x118>)
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	011b      	lsls	r3, r3, #4
 800cf48:	4413      	add	r3, r2
 800cf4a:	3308      	adds	r3, #8
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d006      	beq.n	800cf64 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	3301      	adds	r3, #1
 800cf5a:	60fb      	str	r3, [r7, #12]
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	d9dc      	bls.n	800cf1c <inc_lock+0x10>
 800cf62:	e000      	b.n	800cf66 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cf64:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2b02      	cmp	r3, #2
 800cf6a:	d132      	bne.n	800cfd2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	60fb      	str	r3, [r7, #12]
 800cf70:	e002      	b.n	800cf78 <inc_lock+0x6c>
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	3301      	adds	r3, #1
 800cf76:	60fb      	str	r3, [r7, #12]
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d806      	bhi.n	800cf8c <inc_lock+0x80>
 800cf7e:	4a29      	ldr	r2, [pc, #164]	; (800d024 <inc_lock+0x118>)
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	011b      	lsls	r3, r3, #4
 800cf84:	4413      	add	r3, r2
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d1f2      	bne.n	800cf72 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	2b02      	cmp	r3, #2
 800cf90:	d101      	bne.n	800cf96 <inc_lock+0x8a>
 800cf92:	2300      	movs	r3, #0
 800cf94:	e040      	b.n	800d018 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	4922      	ldr	r1, [pc, #136]	; (800d024 <inc_lock+0x118>)
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	011b      	lsls	r3, r3, #4
 800cfa0:	440b      	add	r3, r1
 800cfa2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	689a      	ldr	r2, [r3, #8]
 800cfa8:	491e      	ldr	r1, [pc, #120]	; (800d024 <inc_lock+0x118>)
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	011b      	lsls	r3, r3, #4
 800cfae:	440b      	add	r3, r1
 800cfb0:	3304      	adds	r3, #4
 800cfb2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cfb8:	491a      	ldr	r1, [pc, #104]	; (800d024 <inc_lock+0x118>)
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	011b      	lsls	r3, r3, #4
 800cfbe:	440b      	add	r3, r1
 800cfc0:	3308      	adds	r3, #8
 800cfc2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cfc4:	4a17      	ldr	r2, [pc, #92]	; (800d024 <inc_lock+0x118>)
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	011b      	lsls	r3, r3, #4
 800cfca:	4413      	add	r3, r2
 800cfcc:	330c      	adds	r3, #12
 800cfce:	2200      	movs	r2, #0
 800cfd0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d009      	beq.n	800cfec <inc_lock+0xe0>
 800cfd8:	4a12      	ldr	r2, [pc, #72]	; (800d024 <inc_lock+0x118>)
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	011b      	lsls	r3, r3, #4
 800cfde:	4413      	add	r3, r2
 800cfe0:	330c      	adds	r3, #12
 800cfe2:	881b      	ldrh	r3, [r3, #0]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d001      	beq.n	800cfec <inc_lock+0xe0>
 800cfe8:	2300      	movs	r3, #0
 800cfea:	e015      	b.n	800d018 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d108      	bne.n	800d004 <inc_lock+0xf8>
 800cff2:	4a0c      	ldr	r2, [pc, #48]	; (800d024 <inc_lock+0x118>)
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	011b      	lsls	r3, r3, #4
 800cff8:	4413      	add	r3, r2
 800cffa:	330c      	adds	r3, #12
 800cffc:	881b      	ldrh	r3, [r3, #0]
 800cffe:	3301      	adds	r3, #1
 800d000:	b29a      	uxth	r2, r3
 800d002:	e001      	b.n	800d008 <inc_lock+0xfc>
 800d004:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d008:	4906      	ldr	r1, [pc, #24]	; (800d024 <inc_lock+0x118>)
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	011b      	lsls	r3, r3, #4
 800d00e:	440b      	add	r3, r1
 800d010:	330c      	adds	r3, #12
 800d012:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	3301      	adds	r3, #1
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3714      	adds	r7, #20
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr
 800d024:	20001dfc 	.word	0x20001dfc

0800d028 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d028:	b480      	push	{r7}
 800d02a:	b085      	sub	sp, #20
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	3b01      	subs	r3, #1
 800d034:	607b      	str	r3, [r7, #4]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d825      	bhi.n	800d088 <dec_lock+0x60>
		n = Files[i].ctr;
 800d03c:	4a17      	ldr	r2, [pc, #92]	; (800d09c <dec_lock+0x74>)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	011b      	lsls	r3, r3, #4
 800d042:	4413      	add	r3, r2
 800d044:	330c      	adds	r3, #12
 800d046:	881b      	ldrh	r3, [r3, #0]
 800d048:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d04a:	89fb      	ldrh	r3, [r7, #14]
 800d04c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d050:	d101      	bne.n	800d056 <dec_lock+0x2e>
 800d052:	2300      	movs	r3, #0
 800d054:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d056:	89fb      	ldrh	r3, [r7, #14]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d002      	beq.n	800d062 <dec_lock+0x3a>
 800d05c:	89fb      	ldrh	r3, [r7, #14]
 800d05e:	3b01      	subs	r3, #1
 800d060:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d062:	4a0e      	ldr	r2, [pc, #56]	; (800d09c <dec_lock+0x74>)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	011b      	lsls	r3, r3, #4
 800d068:	4413      	add	r3, r2
 800d06a:	330c      	adds	r3, #12
 800d06c:	89fa      	ldrh	r2, [r7, #14]
 800d06e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d070:	89fb      	ldrh	r3, [r7, #14]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d105      	bne.n	800d082 <dec_lock+0x5a>
 800d076:	4a09      	ldr	r2, [pc, #36]	; (800d09c <dec_lock+0x74>)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	011b      	lsls	r3, r3, #4
 800d07c:	4413      	add	r3, r2
 800d07e:	2200      	movs	r2, #0
 800d080:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d082:	2300      	movs	r3, #0
 800d084:	737b      	strb	r3, [r7, #13]
 800d086:	e001      	b.n	800d08c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d088:	2302      	movs	r3, #2
 800d08a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d08c:	7b7b      	ldrb	r3, [r7, #13]
}
 800d08e:	4618      	mov	r0, r3
 800d090:	3714      	adds	r7, #20
 800d092:	46bd      	mov	sp, r7
 800d094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d098:	4770      	bx	lr
 800d09a:	bf00      	nop
 800d09c:	20001dfc 	.word	0x20001dfc

0800d0a0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b085      	sub	sp, #20
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	60fb      	str	r3, [r7, #12]
 800d0ac:	e010      	b.n	800d0d0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d0ae:	4a0d      	ldr	r2, [pc, #52]	; (800d0e4 <clear_lock+0x44>)
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	011b      	lsls	r3, r3, #4
 800d0b4:	4413      	add	r3, r2
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d105      	bne.n	800d0ca <clear_lock+0x2a>
 800d0be:	4a09      	ldr	r2, [pc, #36]	; (800d0e4 <clear_lock+0x44>)
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	011b      	lsls	r3, r3, #4
 800d0c4:	4413      	add	r3, r2
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	60fb      	str	r3, [r7, #12]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2b01      	cmp	r3, #1
 800d0d4:	d9eb      	bls.n	800d0ae <clear_lock+0xe>
	}
}
 800d0d6:	bf00      	nop
 800d0d8:	bf00      	nop
 800d0da:	3714      	adds	r7, #20
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr
 800d0e4:	20001dfc 	.word	0x20001dfc

0800d0e8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b086      	sub	sp, #24
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	78db      	ldrb	r3, [r3, #3]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d034      	beq.n	800d166 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d100:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	7858      	ldrb	r0, [r3, #1]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d10c:	2301      	movs	r3, #1
 800d10e:	697a      	ldr	r2, [r7, #20]
 800d110:	f7ff fbdc 	bl	800c8cc <disk_write>
 800d114:	4603      	mov	r3, r0
 800d116:	2b00      	cmp	r3, #0
 800d118:	d002      	beq.n	800d120 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d11a:	2301      	movs	r3, #1
 800d11c:	73fb      	strb	r3, [r7, #15]
 800d11e:	e022      	b.n	800d166 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2200      	movs	r2, #0
 800d124:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d12a:	697a      	ldr	r2, [r7, #20]
 800d12c:	1ad2      	subs	r2, r2, r3
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6a1b      	ldr	r3, [r3, #32]
 800d132:	429a      	cmp	r2, r3
 800d134:	d217      	bcs.n	800d166 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	789b      	ldrb	r3, [r3, #2]
 800d13a:	613b      	str	r3, [r7, #16]
 800d13c:	e010      	b.n	800d160 <sync_window+0x78>
					wsect += fs->fsize;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6a1b      	ldr	r3, [r3, #32]
 800d142:	697a      	ldr	r2, [r7, #20]
 800d144:	4413      	add	r3, r2
 800d146:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	7858      	ldrb	r0, [r3, #1]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d152:	2301      	movs	r3, #1
 800d154:	697a      	ldr	r2, [r7, #20]
 800d156:	f7ff fbb9 	bl	800c8cc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	3b01      	subs	r3, #1
 800d15e:	613b      	str	r3, [r7, #16]
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	2b01      	cmp	r3, #1
 800d164:	d8eb      	bhi.n	800d13e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d166:	7bfb      	ldrb	r3, [r7, #15]
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3718      	adds	r7, #24
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d17a:	2300      	movs	r3, #0
 800d17c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d182:	683a      	ldr	r2, [r7, #0]
 800d184:	429a      	cmp	r2, r3
 800d186:	d01b      	beq.n	800d1c0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f7ff ffad 	bl	800d0e8 <sync_window>
 800d18e:	4603      	mov	r3, r0
 800d190:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d192:	7bfb      	ldrb	r3, [r7, #15]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d113      	bne.n	800d1c0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	7858      	ldrb	r0, [r3, #1]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	683a      	ldr	r2, [r7, #0]
 800d1a6:	f7ff fb71 	bl	800c88c <disk_read>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d004      	beq.n	800d1ba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d1b0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1b4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	683a      	ldr	r2, [r7, #0]
 800d1be:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800d1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3710      	adds	r7, #16
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
	...

0800d1cc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b084      	sub	sp, #16
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f7ff ff87 	bl	800d0e8 <sync_window>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d1de:	7bfb      	ldrb	r3, [r7, #15]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d158      	bne.n	800d296 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	2b03      	cmp	r3, #3
 800d1ea:	d148      	bne.n	800d27e <sync_fs+0xb2>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	791b      	ldrb	r3, [r3, #4]
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	d144      	bne.n	800d27e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	3338      	adds	r3, #56	; 0x38
 800d1f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1fc:	2100      	movs	r1, #0
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7ff fda8 	bl	800cd54 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	3338      	adds	r3, #56	; 0x38
 800d208:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d20c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d210:	4618      	mov	r0, r3
 800d212:	f7ff fcaf 	bl	800cb74 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	3338      	adds	r3, #56	; 0x38
 800d21a:	4921      	ldr	r1, [pc, #132]	; (800d2a0 <sync_fs+0xd4>)
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7ff fcc4 	bl	800cbaa <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	3338      	adds	r3, #56	; 0x38
 800d226:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d22a:	491e      	ldr	r1, [pc, #120]	; (800d2a4 <sync_fs+0xd8>)
 800d22c:	4618      	mov	r0, r3
 800d22e:	f7ff fcbc 	bl	800cbaa <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	3338      	adds	r3, #56	; 0x38
 800d236:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	699b      	ldr	r3, [r3, #24]
 800d23e:	4619      	mov	r1, r3
 800d240:	4610      	mov	r0, r2
 800d242:	f7ff fcb2 	bl	800cbaa <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	3338      	adds	r3, #56	; 0x38
 800d24a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	695b      	ldr	r3, [r3, #20]
 800d252:	4619      	mov	r1, r3
 800d254:	4610      	mov	r0, r2
 800d256:	f7ff fca8 	bl	800cbaa <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d25e:	1c5a      	adds	r2, r3, #1
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	7858      	ldrb	r0, [r3, #1]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d272:	2301      	movs	r3, #1
 800d274:	f7ff fb2a 	bl	800c8cc <disk_write>
			fs->fsi_flag = 0;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2200      	movs	r2, #0
 800d27c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	785b      	ldrb	r3, [r3, #1]
 800d282:	2200      	movs	r2, #0
 800d284:	2100      	movs	r1, #0
 800d286:	4618      	mov	r0, r3
 800d288:	f7ff fb40 	bl	800c90c <disk_ioctl>
 800d28c:	4603      	mov	r3, r0
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d001      	beq.n	800d296 <sync_fs+0xca>
 800d292:	2301      	movs	r3, #1
 800d294:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d296:	7bfb      	ldrb	r3, [r7, #15]
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3710      	adds	r7, #16
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	41615252 	.word	0x41615252
 800d2a4:	61417272 	.word	0x61417272

0800d2a8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	3b02      	subs	r3, #2
 800d2b6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	69db      	ldr	r3, [r3, #28]
 800d2bc:	3b02      	subs	r3, #2
 800d2be:	683a      	ldr	r2, [r7, #0]
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d301      	bcc.n	800d2c8 <clust2sect+0x20>
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	e008      	b.n	800d2da <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	895b      	ldrh	r3, [r3, #10]
 800d2cc:	461a      	mov	r2, r3
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	fb03 f202 	mul.w	r2, r3, r2
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2d8:	4413      	add	r3, r2
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	370c      	adds	r7, #12
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e4:	4770      	bx	lr
	...

0800d2e8 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b088      	sub	sp, #32
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d2f2:	6879      	ldr	r1, [r7, #4]
 800d2f4:	6809      	ldr	r1, [r1, #0]
 800d2f6:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d2f8:	6839      	ldr	r1, [r7, #0]
 800d2fa:	2901      	cmp	r1, #1
 800d2fc:	d904      	bls.n	800d308 <get_fat+0x20>
 800d2fe:	69b9      	ldr	r1, [r7, #24]
 800d300:	69c9      	ldr	r1, [r1, #28]
 800d302:	6838      	ldr	r0, [r7, #0]
 800d304:	4288      	cmp	r0, r1
 800d306:	d302      	bcc.n	800d30e <get_fat+0x26>
		val = 1;	/* Internal error */
 800d308:	2301      	movs	r3, #1
 800d30a:	61fb      	str	r3, [r7, #28]
 800d30c:	e101      	b.n	800d512 <get_fat+0x22a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d30e:	f04f 31ff 	mov.w	r1, #4294967295
 800d312:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800d314:	69b9      	ldr	r1, [r7, #24]
 800d316:	7809      	ldrb	r1, [r1, #0]
 800d318:	3901      	subs	r1, #1
 800d31a:	2903      	cmp	r1, #3
 800d31c:	f200 80ed 	bhi.w	800d4fa <get_fat+0x212>
 800d320:	a001      	add	r0, pc, #4	; (adr r0, 800d328 <get_fat+0x40>)
 800d322:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d326:	bf00      	nop
 800d328:	0800d339 	.word	0x0800d339
 800d32c:	0800d3c1 	.word	0x0800d3c1
 800d330:	0800d3f7 	.word	0x0800d3f7
 800d334:	0800d42f 	.word	0x0800d42f
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	60fb      	str	r3, [r7, #12]
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	085b      	lsrs	r3, r3, #1
 800d340:	68fa      	ldr	r2, [r7, #12]
 800d342:	4413      	add	r3, r2
 800d344:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d346:	69bb      	ldr	r3, [r7, #24]
 800d348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	0a5b      	lsrs	r3, r3, #9
 800d34e:	4413      	add	r3, r2
 800d350:	4619      	mov	r1, r3
 800d352:	69b8      	ldr	r0, [r7, #24]
 800d354:	f7ff ff0c 	bl	800d170 <move_window>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	f040 80d0 	bne.w	800d500 <get_fat+0x218>
			wc = fs->win[bc++ % SS(fs)];
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	1c5a      	adds	r2, r3, #1
 800d364:	60fa      	str	r2, [r7, #12]
 800d366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d36a:	69ba      	ldr	r2, [r7, #24]
 800d36c:	4413      	add	r3, r2
 800d36e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d372:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d374:	69bb      	ldr	r3, [r7, #24]
 800d376:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	0a5b      	lsrs	r3, r3, #9
 800d37c:	4413      	add	r3, r2
 800d37e:	4619      	mov	r1, r3
 800d380:	69b8      	ldr	r0, [r7, #24]
 800d382:	f7ff fef5 	bl	800d170 <move_window>
 800d386:	4603      	mov	r3, r0
 800d388:	2b00      	cmp	r3, #0
 800d38a:	f040 80bb 	bne.w	800d504 <get_fat+0x21c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d394:	69ba      	ldr	r2, [r7, #24]
 800d396:	4413      	add	r3, r2
 800d398:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d39c:	021b      	lsls	r3, r3, #8
 800d39e:	461a      	mov	r2, r3
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	f003 0301 	and.w	r3, r3, #1
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d002      	beq.n	800d3b6 <get_fat+0xce>
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	091b      	lsrs	r3, r3, #4
 800d3b4:	e002      	b.n	800d3bc <get_fat+0xd4>
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d3bc:	61fb      	str	r3, [r7, #28]
			break;
 800d3be:	e0a8      	b.n	800d512 <get_fat+0x22a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	0a1b      	lsrs	r3, r3, #8
 800d3c8:	4413      	add	r3, r2
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	69b8      	ldr	r0, [r7, #24]
 800d3ce:	f7ff fecf 	bl	800d170 <move_window>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	f040 8097 	bne.w	800d508 <get_fat+0x220>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d3da:	69bb      	ldr	r3, [r7, #24]
 800d3dc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	005b      	lsls	r3, r3, #1
 800d3e4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d3e8:	4413      	add	r3, r2
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7ff faac 	bl	800c948 <ld_word>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	61fb      	str	r3, [r7, #28]
			break;
 800d3f4:	e08d      	b.n	800d512 <get_fat+0x22a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	09db      	lsrs	r3, r3, #7
 800d3fe:	4413      	add	r3, r2
 800d400:	4619      	mov	r1, r3
 800d402:	69b8      	ldr	r0, [r7, #24]
 800d404:	f7ff feb4 	bl	800d170 <move_window>
 800d408:	4603      	mov	r3, r0
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d17e      	bne.n	800d50c <get_fat+0x224>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d40e:	69bb      	ldr	r3, [r7, #24]
 800d410:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	009b      	lsls	r3, r3, #2
 800d418:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d41c:	4413      	add	r3, r2
 800d41e:	4618      	mov	r0, r3
 800d420:	f7ff faaa 	bl	800c978 <ld_dword>
 800d424:	4603      	mov	r3, r0
 800d426:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d42a:	61fb      	str	r3, [r7, #28]
			break;
 800d42c:	e071      	b.n	800d512 <get_fat+0x22a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800d42e:	6879      	ldr	r1, [r7, #4]
 800d430:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800d434:	4301      	orrs	r1, r0
 800d436:	d060      	beq.n	800d4fa <get_fat+0x212>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800d438:	6879      	ldr	r1, [r7, #4]
 800d43a:	6889      	ldr	r1, [r1, #8]
 800d43c:	6838      	ldr	r0, [r7, #0]
 800d43e:	1a41      	subs	r1, r0, r1
 800d440:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800d442:	6879      	ldr	r1, [r7, #4]
 800d444:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800d448:	1e42      	subs	r2, r0, #1
 800d44a:	f141 33ff 	adc.w	r3, r1, #4294967295
 800d44e:	f04f 0000 	mov.w	r0, #0
 800d452:	f04f 0100 	mov.w	r1, #0
 800d456:	0a50      	lsrs	r0, r2, #9
 800d458:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800d45c:	0a59      	lsrs	r1, r3, #9
 800d45e:	4602      	mov	r2, r0
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	895b      	ldrh	r3, [r3, #10]
 800d464:	fbb2 f3f3 	udiv	r3, r2, r3
 800d468:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	79db      	ldrb	r3, [r3, #7]
 800d46e:	2b02      	cmp	r3, #2
 800d470:	d10e      	bne.n	800d490 <get_fat+0x1a8>
					if (cofs <= clen) {
 800d472:	697a      	ldr	r2, [r7, #20]
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	429a      	cmp	r2, r3
 800d478:	d80a      	bhi.n	800d490 <get_fat+0x1a8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800d47a:	697a      	ldr	r2, [r7, #20]
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d002      	beq.n	800d488 <get_fat+0x1a0>
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	3301      	adds	r3, #1
 800d486:	e001      	b.n	800d48c <get_fat+0x1a4>
 800d488:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d48c:	61fb      	str	r3, [r7, #28]
						break;
 800d48e:	e040      	b.n	800d512 <get_fat+0x22a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	79db      	ldrb	r3, [r3, #7]
 800d494:	2b03      	cmp	r3, #3
 800d496:	d108      	bne.n	800d4aa <get_fat+0x1c2>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	699b      	ldr	r3, [r3, #24]
 800d49c:	697a      	ldr	r2, [r7, #20]
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d203      	bcs.n	800d4aa <get_fat+0x1c2>
					val = clst + 1; 	/* Generate the value */
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	61fb      	str	r3, [r7, #28]
					break;
 800d4a8:	e033      	b.n	800d512 <get_fat+0x22a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	79db      	ldrb	r3, [r3, #7]
 800d4ae:	2b02      	cmp	r3, #2
 800d4b0:	d023      	beq.n	800d4fa <get_fat+0x212>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	69db      	ldr	r3, [r3, #28]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d003      	beq.n	800d4c2 <get_fat+0x1da>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800d4ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d4be:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800d4c0:	e027      	b.n	800d512 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d4c2:	69bb      	ldr	r3, [r7, #24]
 800d4c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	09db      	lsrs	r3, r3, #7
 800d4ca:	4413      	add	r3, r2
 800d4cc:	4619      	mov	r1, r3
 800d4ce:	69b8      	ldr	r0, [r7, #24]
 800d4d0:	f7ff fe4e 	bl	800d170 <move_window>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d11a      	bne.n	800d510 <get_fat+0x228>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800d4da:	69bb      	ldr	r3, [r7, #24]
 800d4dc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	009b      	lsls	r3, r3, #2
 800d4e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d4e8:	4413      	add	r3, r2
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7ff fa44 	bl	800c978 <ld_dword>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d4f6:	61fb      	str	r3, [r7, #28]
					break;
 800d4f8:	e00b      	b.n	800d512 <get_fat+0x22a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	61fb      	str	r3, [r7, #28]
 800d4fe:	e008      	b.n	800d512 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d500:	bf00      	nop
 800d502:	e006      	b.n	800d512 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d504:	bf00      	nop
 800d506:	e004      	b.n	800d512 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d508:	bf00      	nop
 800d50a:	e002      	b.n	800d512 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d50c:	bf00      	nop
 800d50e:	e000      	b.n	800d512 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d510:	bf00      	nop
		}
	}

	return val;
 800d512:	69fb      	ldr	r3, [r7, #28]
}
 800d514:	4618      	mov	r0, r3
 800d516:	3720      	adds	r7, #32
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d51c:	b590      	push	{r4, r7, lr}
 800d51e:	b089      	sub	sp, #36	; 0x24
 800d520:	af00      	add	r7, sp, #0
 800d522:	60f8      	str	r0, [r7, #12]
 800d524:	60b9      	str	r1, [r7, #8]
 800d526:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d528:	2302      	movs	r3, #2
 800d52a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	2b01      	cmp	r3, #1
 800d530:	f240 80d6 	bls.w	800d6e0 <put_fat+0x1c4>
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	69db      	ldr	r3, [r3, #28]
 800d538:	68ba      	ldr	r2, [r7, #8]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	f080 80d0 	bcs.w	800d6e0 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	2b04      	cmp	r3, #4
 800d546:	f300 80d4 	bgt.w	800d6f2 <put_fat+0x1d6>
 800d54a:	2b03      	cmp	r3, #3
 800d54c:	f280 8093 	bge.w	800d676 <put_fat+0x15a>
 800d550:	2b01      	cmp	r3, #1
 800d552:	d002      	beq.n	800d55a <put_fat+0x3e>
 800d554:	2b02      	cmp	r3, #2
 800d556:	d06e      	beq.n	800d636 <put_fat+0x11a>
 800d558:	e0cb      	b.n	800d6f2 <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	61bb      	str	r3, [r7, #24]
 800d55e:	69bb      	ldr	r3, [r7, #24]
 800d560:	085b      	lsrs	r3, r3, #1
 800d562:	69ba      	ldr	r2, [r7, #24]
 800d564:	4413      	add	r3, r2
 800d566:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d56c:	69bb      	ldr	r3, [r7, #24]
 800d56e:	0a5b      	lsrs	r3, r3, #9
 800d570:	4413      	add	r3, r2
 800d572:	4619      	mov	r1, r3
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f7ff fdfb 	bl	800d170 <move_window>
 800d57a:	4603      	mov	r3, r0
 800d57c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d57e:	7ffb      	ldrb	r3, [r7, #31]
 800d580:	2b00      	cmp	r3, #0
 800d582:	f040 80af 	bne.w	800d6e4 <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d58c:	69bb      	ldr	r3, [r7, #24]
 800d58e:	1c59      	adds	r1, r3, #1
 800d590:	61b9      	str	r1, [r7, #24]
 800d592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d596:	4413      	add	r3, r2
 800d598:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	f003 0301 	and.w	r3, r3, #1
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d00d      	beq.n	800d5c0 <put_fat+0xa4>
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	b25b      	sxtb	r3, r3
 800d5aa:	f003 030f 	and.w	r3, r3, #15
 800d5ae:	b25a      	sxtb	r2, r3
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	011b      	lsls	r3, r3, #4
 800d5b6:	b25b      	sxtb	r3, r3
 800d5b8:	4313      	orrs	r3, r2
 800d5ba:	b25b      	sxtb	r3, r3
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	e001      	b.n	800d5c4 <put_fat+0xa8>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	b2db      	uxtb	r3, r3
 800d5c4:	697a      	ldr	r2, [r7, #20]
 800d5c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d5d2:	69bb      	ldr	r3, [r7, #24]
 800d5d4:	0a5b      	lsrs	r3, r3, #9
 800d5d6:	4413      	add	r3, r2
 800d5d8:	4619      	mov	r1, r3
 800d5da:	68f8      	ldr	r0, [r7, #12]
 800d5dc:	f7ff fdc8 	bl	800d170 <move_window>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d5e4:	7ffb      	ldrb	r3, [r7, #31]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d17e      	bne.n	800d6e8 <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d5f0:	69bb      	ldr	r3, [r7, #24]
 800d5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5f6:	4413      	add	r3, r2
 800d5f8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	f003 0301 	and.w	r3, r3, #1
 800d600:	2b00      	cmp	r3, #0
 800d602:	d003      	beq.n	800d60c <put_fat+0xf0>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	091b      	lsrs	r3, r3, #4
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	e00e      	b.n	800d62a <put_fat+0x10e>
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	b25b      	sxtb	r3, r3
 800d612:	f023 030f 	bic.w	r3, r3, #15
 800d616:	b25a      	sxtb	r2, r3
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	0a1b      	lsrs	r3, r3, #8
 800d61c:	b25b      	sxtb	r3, r3
 800d61e:	f003 030f 	and.w	r3, r3, #15
 800d622:	b25b      	sxtb	r3, r3
 800d624:	4313      	orrs	r3, r2
 800d626:	b25b      	sxtb	r3, r3
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	697a      	ldr	r2, [r7, #20]
 800d62c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2201      	movs	r2, #1
 800d632:	70da      	strb	r2, [r3, #3]
			break;
 800d634:	e05d      	b.n	800d6f2 <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	0a1b      	lsrs	r3, r3, #8
 800d63e:	4413      	add	r3, r2
 800d640:	4619      	mov	r1, r3
 800d642:	68f8      	ldr	r0, [r7, #12]
 800d644:	f7ff fd94 	bl	800d170 <move_window>
 800d648:	4603      	mov	r3, r0
 800d64a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d64c:	7ffb      	ldrb	r3, [r7, #31]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d14c      	bne.n	800d6ec <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	005b      	lsls	r3, r3, #1
 800d65c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d660:	4413      	add	r3, r2
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	b292      	uxth	r2, r2
 800d666:	4611      	mov	r1, r2
 800d668:	4618      	mov	r0, r3
 800d66a:	f7ff fa83 	bl	800cb74 <st_word>
			fs->wflag = 1;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	2201      	movs	r2, #1
 800d672:	70da      	strb	r2, [r3, #3]
			break;
 800d674:	e03d      	b.n	800d6f2 <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	09db      	lsrs	r3, r3, #7
 800d67e:	4413      	add	r3, r2
 800d680:	4619      	mov	r1, r3
 800d682:	68f8      	ldr	r0, [r7, #12]
 800d684:	f7ff fd74 	bl	800d170 <move_window>
 800d688:	4603      	mov	r3, r0
 800d68a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d68c:	7ffb      	ldrb	r3, [r7, #31]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d12e      	bne.n	800d6f0 <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	2b04      	cmp	r3, #4
 800d698:	d012      	beq.n	800d6c0 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	009b      	lsls	r3, r3, #2
 800d6aa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d6ae:	4413      	add	r3, r2
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7ff f961 	bl	800c978 <ld_dword>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d6bc:	4323      	orrs	r3, r4
 800d6be:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d6ce:	4413      	add	r3, r2
 800d6d0:	6879      	ldr	r1, [r7, #4]
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7ff fa69 	bl	800cbaa <st_dword>
			fs->wflag = 1;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2201      	movs	r2, #1
 800d6dc:	70da      	strb	r2, [r3, #3]
			break;
 800d6de:	e008      	b.n	800d6f2 <put_fat+0x1d6>
		}
	}
 800d6e0:	bf00      	nop
 800d6e2:	e006      	b.n	800d6f2 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800d6e4:	bf00      	nop
 800d6e6:	e004      	b.n	800d6f2 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800d6e8:	bf00      	nop
 800d6ea:	e002      	b.n	800d6f2 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800d6ec:	bf00      	nop
 800d6ee:	e000      	b.n	800d6f2 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800d6f0:	bf00      	nop
	return res;
 800d6f2:	7ffb      	ldrb	r3, [r7, #31]
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3724      	adds	r7, #36	; 0x24
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd90      	pop	{r4, r7, pc}

0800d6fc <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b08a      	sub	sp, #40	; 0x28
 800d700:	af00      	add	r7, sp, #0
 800d702:	60f8      	str	r0, [r7, #12]
 800d704:	60b9      	str	r1, [r7, #8]
 800d706:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	3b02      	subs	r3, #2
 800d70c:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	69db      	ldr	r3, [r3, #28]
 800d712:	3b02      	subs	r3, #2
 800d714:	68ba      	ldr	r2, [r7, #8]
 800d716:	429a      	cmp	r2, r3
 800d718:	d301      	bcc.n	800d71e <find_bitmap+0x22>
 800d71a:	2300      	movs	r3, #0
 800d71c:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	61fb      	str	r3, [r7, #28]
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	61bb      	str	r3, [r7, #24]
 800d726:	2300      	movs	r3, #0
 800d728:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d72e:	69fb      	ldr	r3, [r7, #28]
 800d730:	0b1b      	lsrs	r3, r3, #12
 800d732:	4413      	add	r3, r2
 800d734:	4619      	mov	r1, r3
 800d736:	68f8      	ldr	r0, [r7, #12]
 800d738:	f7ff fd1a 	bl	800d170 <move_window>
 800d73c:	4603      	mov	r3, r0
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d002      	beq.n	800d748 <find_bitmap+0x4c>
 800d742:	f04f 33ff 	mov.w	r3, #4294967295
 800d746:	e051      	b.n	800d7ec <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800d748:	69fb      	ldr	r3, [r7, #28]
 800d74a:	08db      	lsrs	r3, r3, #3
 800d74c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d750:	623b      	str	r3, [r7, #32]
 800d752:	69fb      	ldr	r3, [r7, #28]
 800d754:	f003 0307 	and.w	r3, r3, #7
 800d758:	2201      	movs	r2, #1
 800d75a:	fa02 f303 	lsl.w	r3, r2, r3
 800d75e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800d762:	68fa      	ldr	r2, [r7, #12]
 800d764:	6a3b      	ldr	r3, [r7, #32]
 800d766:	4413      	add	r3, r2
 800d768:	3338      	adds	r3, #56	; 0x38
 800d76a:	781a      	ldrb	r2, [r3, #0]
 800d76c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d770:	4013      	ands	r3, r2
 800d772:	74fb      	strb	r3, [r7, #19]
 800d774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d778:	005b      	lsls	r3, r3, #1
 800d77a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800d77e:	69fb      	ldr	r3, [r7, #28]
 800d780:	3301      	adds	r3, #1
 800d782:	61fb      	str	r3, [r7, #28]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	69db      	ldr	r3, [r3, #28]
 800d788:	3b02      	subs	r3, #2
 800d78a:	69fa      	ldr	r2, [r7, #28]
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d307      	bcc.n	800d7a0 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800d790:	2300      	movs	r3, #0
 800d792:	61fb      	str	r3, [r7, #28]
 800d794:	2300      	movs	r3, #0
 800d796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d79a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d79e:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800d7a0:	7cfb      	ldrb	r3, [r7, #19]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d109      	bne.n	800d7ba <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	3301      	adds	r3, #1
 800d7aa:	617b      	str	r3, [r7, #20]
 800d7ac:	697a      	ldr	r2, [r7, #20]
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d106      	bne.n	800d7c2 <find_bitmap+0xc6>
 800d7b4:	69bb      	ldr	r3, [r7, #24]
 800d7b6:	3302      	adds	r3, #2
 800d7b8:	e018      	b.n	800d7ec <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	61bb      	str	r3, [r7, #24]
 800d7be:	2300      	movs	r3, #0
 800d7c0:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800d7c2:	69fa      	ldr	r2, [r7, #28]
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d101      	bne.n	800d7ce <find_bitmap+0xd2>
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	e00e      	b.n	800d7ec <find_bitmap+0xf0>
			} while (bm);
 800d7ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d1c5      	bne.n	800d762 <find_bitmap+0x66>
			bm = 1;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800d7dc:	6a3b      	ldr	r3, [r7, #32]
 800d7de:	3301      	adds	r3, #1
 800d7e0:	623b      	str	r3, [r7, #32]
 800d7e2:	6a3b      	ldr	r3, [r7, #32]
 800d7e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7e8:	d3bb      	bcc.n	800d762 <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800d7ea:	e79e      	b.n	800d72a <find_bitmap+0x2e>
	}
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3728      	adds	r7, #40	; 0x28
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}

0800d7f4 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b088      	sub	sp, #32
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	60f8      	str	r0, [r7, #12]
 800d7fc:	60b9      	str	r1, [r7, #8]
 800d7fe:	607a      	str	r2, [r7, #4]
 800d800:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	3b02      	subs	r3, #2
 800d806:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	0b1b      	lsrs	r3, r3, #12
 800d810:	4413      	add	r3, r2
 800d812:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	08db      	lsrs	r3, r3, #3
 800d818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d81c:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	f003 0307 	and.w	r3, r3, #7
 800d824:	2201      	movs	r2, #1
 800d826:	fa02 f303 	lsl.w	r3, r2, r3
 800d82a:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	1c5a      	adds	r2, r3, #1
 800d830:	617a      	str	r2, [r7, #20]
 800d832:	4619      	mov	r1, r3
 800d834:	68f8      	ldr	r0, [r7, #12]
 800d836:	f7ff fc9b 	bl	800d170 <move_window>
 800d83a:	4603      	mov	r3, r0
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d001      	beq.n	800d844 <change_bitmap+0x50>
 800d840:	2301      	movs	r3, #1
 800d842:	e03d      	b.n	800d8c0 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800d844:	68fa      	ldr	r2, [r7, #12]
 800d846:	69bb      	ldr	r3, [r7, #24]
 800d848:	4413      	add	r3, r2
 800d84a:	3338      	adds	r3, #56	; 0x38
 800d84c:	781a      	ldrb	r2, [r3, #0]
 800d84e:	7ffb      	ldrb	r3, [r7, #31]
 800d850:	4013      	ands	r3, r2
 800d852:	b2db      	uxtb	r3, r3
 800d854:	2b00      	cmp	r3, #0
 800d856:	bf14      	ite	ne
 800d858:	2301      	movne	r3, #1
 800d85a:	2300      	moveq	r3, #0
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	461a      	mov	r2, r3
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	4293      	cmp	r3, r2
 800d864:	d101      	bne.n	800d86a <change_bitmap+0x76>
 800d866:	2302      	movs	r3, #2
 800d868:	e02a      	b.n	800d8c0 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800d86a:	68fa      	ldr	r2, [r7, #12]
 800d86c:	69bb      	ldr	r3, [r7, #24]
 800d86e:	4413      	add	r3, r2
 800d870:	3338      	adds	r3, #56	; 0x38
 800d872:	781a      	ldrb	r2, [r3, #0]
 800d874:	7ffb      	ldrb	r3, [r7, #31]
 800d876:	4053      	eors	r3, r2
 800d878:	b2d9      	uxtb	r1, r3
 800d87a:	68fa      	ldr	r2, [r7, #12]
 800d87c:	69bb      	ldr	r3, [r7, #24]
 800d87e:	4413      	add	r3, r2
 800d880:	3338      	adds	r3, #56	; 0x38
 800d882:	460a      	mov	r2, r1
 800d884:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2201      	movs	r2, #1
 800d88a:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	3b01      	subs	r3, #1
 800d890:	607b      	str	r3, [r7, #4]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d101      	bne.n	800d89c <change_bitmap+0xa8>
 800d898:	2300      	movs	r3, #0
 800d89a:	e011      	b.n	800d8c0 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800d89c:	7ffb      	ldrb	r3, [r7, #31]
 800d89e:	005b      	lsls	r3, r3, #1
 800d8a0:	77fb      	strb	r3, [r7, #31]
 800d8a2:	7ffb      	ldrb	r3, [r7, #31]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d1cd      	bne.n	800d844 <change_bitmap+0x50>
			bm = 1;
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800d8ac:	69bb      	ldr	r3, [r7, #24]
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	61bb      	str	r3, [r7, #24]
 800d8b2:	69bb      	ldr	r3, [r7, #24]
 800d8b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d8b8:	d3c4      	bcc.n	800d844 <change_bitmap+0x50>
		i = 0;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800d8be:	e7b5      	b.n	800d82c <change_bitmap+0x38>
	}
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3720      	adds	r7, #32
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}

0800d8c8 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b086      	sub	sp, #24
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	79db      	ldrb	r3, [r3, #7]
 800d8d4:	2b03      	cmp	r3, #3
 800d8d6:	d121      	bne.n	800d91c <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	689b      	ldr	r3, [r3, #8]
 800d8dc:	617b      	str	r3, [r7, #20]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	699b      	ldr	r3, [r3, #24]
 800d8e2:	613b      	str	r3, [r7, #16]
 800d8e4:	e014      	b.n	800d910 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6818      	ldr	r0, [r3, #0]
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	461a      	mov	r2, r3
 800d8f0:	6979      	ldr	r1, [r7, #20]
 800d8f2:	f7ff fe13 	bl	800d51c <put_fat>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800d8fa:	7bfb      	ldrb	r3, [r7, #15]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d001      	beq.n	800d904 <fill_first_frag+0x3c>
 800d900:	7bfb      	ldrb	r3, [r7, #15]
 800d902:	e00c      	b.n	800d91e <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	3301      	adds	r3, #1
 800d908:	617b      	str	r3, [r7, #20]
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	3b01      	subs	r3, #1
 800d90e:	613b      	str	r3, [r7, #16]
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d1e7      	bne.n	800d8e6 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2200      	movs	r2, #0
 800d91a:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800d91c:	2300      	movs	r3, #0
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3718      	adds	r7, #24
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}

0800d926 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800d926:	b580      	push	{r7, lr}
 800d928:	b086      	sub	sp, #24
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	60f8      	str	r0, [r7, #12]
 800d92e:	60b9      	str	r1, [r7, #8]
 800d930:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800d932:	e020      	b.n	800d976 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	6818      	ldr	r0, [r3, #0]
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	69db      	ldr	r3, [r3, #28]
 800d93c:	68ba      	ldr	r2, [r7, #8]
 800d93e:	1ad3      	subs	r3, r2, r3
 800d940:	1c59      	adds	r1, r3, #1
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	69db      	ldr	r3, [r3, #28]
 800d946:	2b01      	cmp	r3, #1
 800d948:	d905      	bls.n	800d956 <fill_last_frag+0x30>
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	69db      	ldr	r3, [r3, #28]
 800d94e:	68ba      	ldr	r2, [r7, #8]
 800d950:	1ad3      	subs	r3, r2, r3
 800d952:	3302      	adds	r3, #2
 800d954:	e000      	b.n	800d958 <fill_last_frag+0x32>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	461a      	mov	r2, r3
 800d95a:	f7ff fddf 	bl	800d51c <put_fat>
 800d95e:	4603      	mov	r3, r0
 800d960:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800d962:	7dfb      	ldrb	r3, [r7, #23]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d001      	beq.n	800d96c <fill_last_frag+0x46>
 800d968:	7dfb      	ldrb	r3, [r7, #23]
 800d96a:	e009      	b.n	800d980 <fill_last_frag+0x5a>
		obj->n_frag--;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	69db      	ldr	r3, [r3, #28]
 800d970:	1e5a      	subs	r2, r3, #1
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	69db      	ldr	r3, [r3, #28]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d1da      	bne.n	800d934 <fill_last_frag+0xe>
	}
	return FR_OK;
 800d97e:	2300      	movs	r3, #0
}
 800d980:	4618      	mov	r0, r3
 800d982:	3718      	adds	r7, #24
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}

0800d988 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b08a      	sub	sp, #40	; 0x28
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	60f8      	str	r0, [r7, #12]
 800d990:	60b9      	str	r1, [r7, #8]
 800d992:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d994:	2300      	movs	r3, #0
 800d996:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	627b      	str	r3, [r7, #36]	; 0x24
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	d904      	bls.n	800d9b6 <remove_chain+0x2e>
 800d9ac:	69bb      	ldr	r3, [r7, #24]
 800d9ae:	69db      	ldr	r3, [r3, #28]
 800d9b0:	68ba      	ldr	r2, [r7, #8]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d301      	bcc.n	800d9ba <remove_chain+0x32>
 800d9b6:	2302      	movs	r3, #2
 800d9b8:	e096      	b.n	800dae8 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d014      	beq.n	800d9ea <remove_chain+0x62>
 800d9c0:	69bb      	ldr	r3, [r7, #24]
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	2b04      	cmp	r3, #4
 800d9c6:	d103      	bne.n	800d9d0 <remove_chain+0x48>
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	79db      	ldrb	r3, [r3, #7]
 800d9cc:	2b02      	cmp	r3, #2
 800d9ce:	d00c      	beq.n	800d9ea <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d9d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d9d4:	6879      	ldr	r1, [r7, #4]
 800d9d6:	69b8      	ldr	r0, [r7, #24]
 800d9d8:	f7ff fda0 	bl	800d51c <put_fat>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d9e0:	7ffb      	ldrb	r3, [r7, #31]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d001      	beq.n	800d9ea <remove_chain+0x62>
 800d9e6:	7ffb      	ldrb	r3, [r7, #31]
 800d9e8:	e07e      	b.n	800dae8 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d9ea:	68b9      	ldr	r1, [r7, #8]
 800d9ec:	68f8      	ldr	r0, [r7, #12]
 800d9ee:	f7ff fc7b 	bl	800d2e8 <get_fat>
 800d9f2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d055      	beq.n	800daa6 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d101      	bne.n	800da04 <remove_chain+0x7c>
 800da00:	2302      	movs	r3, #2
 800da02:	e071      	b.n	800dae8 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da0a:	d101      	bne.n	800da10 <remove_chain+0x88>
 800da0c:	2301      	movs	r3, #1
 800da0e:	e06b      	b.n	800dae8 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800da10:	69bb      	ldr	r3, [r7, #24]
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	2b04      	cmp	r3, #4
 800da16:	d00b      	beq.n	800da30 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800da18:	2200      	movs	r2, #0
 800da1a:	68b9      	ldr	r1, [r7, #8]
 800da1c:	69b8      	ldr	r0, [r7, #24]
 800da1e:	f7ff fd7d 	bl	800d51c <put_fat>
 800da22:	4603      	mov	r3, r0
 800da24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800da26:	7ffb      	ldrb	r3, [r7, #31]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d001      	beq.n	800da30 <remove_chain+0xa8>
 800da2c:	7ffb      	ldrb	r3, [r7, #31]
 800da2e:	e05b      	b.n	800dae8 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800da30:	69bb      	ldr	r3, [r7, #24]
 800da32:	699a      	ldr	r2, [r3, #24]
 800da34:	69bb      	ldr	r3, [r7, #24]
 800da36:	69db      	ldr	r3, [r3, #28]
 800da38:	3b02      	subs	r3, #2
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d20b      	bcs.n	800da56 <remove_chain+0xce>
			fs->free_clst++;
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	699b      	ldr	r3, [r3, #24]
 800da42:	1c5a      	adds	r2, r3, #1
 800da44:	69bb      	ldr	r3, [r7, #24]
 800da46:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	791b      	ldrb	r3, [r3, #4]
 800da4c:	f043 0301 	orr.w	r3, r3, #1
 800da50:	b2da      	uxtb	r2, r3
 800da52:	69bb      	ldr	r3, [r7, #24]
 800da54:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800da56:	6a3b      	ldr	r3, [r7, #32]
 800da58:	3301      	adds	r3, #1
 800da5a:	697a      	ldr	r2, [r7, #20]
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d102      	bne.n	800da66 <remove_chain+0xde>
			ecl = nxt;
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	623b      	str	r3, [r7, #32]
 800da64:	e017      	b.n	800da96 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800da66:	69bb      	ldr	r3, [r7, #24]
 800da68:	781b      	ldrb	r3, [r3, #0]
 800da6a:	2b04      	cmp	r3, #4
 800da6c:	d10f      	bne.n	800da8e <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800da6e:	6a3a      	ldr	r2, [r7, #32]
 800da70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da72:	1ad3      	subs	r3, r2, r3
 800da74:	1c5a      	adds	r2, r3, #1
 800da76:	2300      	movs	r3, #0
 800da78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da7a:	69b8      	ldr	r0, [r7, #24]
 800da7c:	f7ff feba 	bl	800d7f4 <change_bitmap>
 800da80:	4603      	mov	r3, r0
 800da82:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800da84:	7ffb      	ldrb	r3, [r7, #31]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d001      	beq.n	800da8e <remove_chain+0x106>
 800da8a:	7ffb      	ldrb	r3, [r7, #31]
 800da8c:	e02c      	b.n	800dae8 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	623b      	str	r3, [r7, #32]
 800da92:	6a3b      	ldr	r3, [r7, #32]
 800da94:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800da9a:	69bb      	ldr	r3, [r7, #24]
 800da9c:	69db      	ldr	r3, [r3, #28]
 800da9e:	68ba      	ldr	r2, [r7, #8]
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d3a2      	bcc.n	800d9ea <remove_chain+0x62>
 800daa4:	e000      	b.n	800daa8 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800daa6:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	2b04      	cmp	r3, #4
 800daae:	d11a      	bne.n	800dae6 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d103      	bne.n	800dabe <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2200      	movs	r2, #0
 800daba:	71da      	strb	r2, [r3, #7]
 800dabc:	e013      	b.n	800dae6 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	79db      	ldrb	r3, [r3, #7]
 800dac2:	2b03      	cmp	r3, #3
 800dac4:	d10f      	bne.n	800dae6 <remove_chain+0x15e>
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	689b      	ldr	r3, [r3, #8]
 800daca:	687a      	ldr	r2, [r7, #4]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d30a      	bcc.n	800dae6 <remove_chain+0x15e>
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	689a      	ldr	r2, [r3, #8]
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	699b      	ldr	r3, [r3, #24]
 800dad8:	4413      	add	r3, r2
 800dada:	687a      	ldr	r2, [r7, #4]
 800dadc:	429a      	cmp	r2, r3
 800dade:	d802      	bhi.n	800dae6 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2202      	movs	r2, #2
 800dae4:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800dae6:	2300      	movs	r3, #0
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3728      	adds	r7, #40	; 0x28
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}

0800daf0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b088      	sub	sp, #32
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d10d      	bne.n	800db22 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	695b      	ldr	r3, [r3, #20]
 800db0a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d004      	beq.n	800db1c <create_chain+0x2c>
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	69db      	ldr	r3, [r3, #28]
 800db16:	69ba      	ldr	r2, [r7, #24]
 800db18:	429a      	cmp	r2, r3
 800db1a:	d31b      	bcc.n	800db54 <create_chain+0x64>
 800db1c:	2301      	movs	r3, #1
 800db1e:	61bb      	str	r3, [r7, #24]
 800db20:	e018      	b.n	800db54 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800db22:	6839      	ldr	r1, [r7, #0]
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f7ff fbdf 	bl	800d2e8 <get_fat>
 800db2a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d801      	bhi.n	800db36 <create_chain+0x46>
 800db32:	2301      	movs	r3, #1
 800db34:	e0d9      	b.n	800dcea <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db3c:	d101      	bne.n	800db42 <create_chain+0x52>
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	e0d3      	b.n	800dcea <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	69db      	ldr	r3, [r3, #28]
 800db46:	68fa      	ldr	r2, [r7, #12]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d201      	bcs.n	800db50 <create_chain+0x60>
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	e0cc      	b.n	800dcea <create_chain+0x1fa>
		scl = clst;
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	2b04      	cmp	r3, #4
 800db5a:	d164      	bne.n	800dc26 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800db5c:	2201      	movs	r2, #1
 800db5e:	69b9      	ldr	r1, [r7, #24]
 800db60:	6938      	ldr	r0, [r7, #16]
 800db62:	f7ff fdcb 	bl	800d6fc <find_bitmap>
 800db66:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800db68:	69fb      	ldr	r3, [r7, #28]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d003      	beq.n	800db76 <create_chain+0x86>
 800db6e:	69fb      	ldr	r3, [r7, #28]
 800db70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db74:	d101      	bne.n	800db7a <create_chain+0x8a>
 800db76:	69fb      	ldr	r3, [r7, #28]
 800db78:	e0b7      	b.n	800dcea <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800db7a:	2301      	movs	r3, #1
 800db7c:	2201      	movs	r2, #1
 800db7e:	69f9      	ldr	r1, [r7, #28]
 800db80:	6938      	ldr	r0, [r7, #16]
 800db82:	f7ff fe37 	bl	800d7f4 <change_bitmap>
 800db86:	4603      	mov	r3, r0
 800db88:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800db8a:	7dfb      	ldrb	r3, [r7, #23]
 800db8c:	2b02      	cmp	r3, #2
 800db8e:	d101      	bne.n	800db94 <create_chain+0xa4>
 800db90:	2301      	movs	r3, #1
 800db92:	e0aa      	b.n	800dcea <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800db94:	7dfb      	ldrb	r3, [r7, #23]
 800db96:	2b01      	cmp	r3, #1
 800db98:	d102      	bne.n	800dba0 <create_chain+0xb0>
 800db9a:	f04f 33ff 	mov.w	r3, #4294967295
 800db9e:	e0a4      	b.n	800dcea <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d103      	bne.n	800dbae <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2202      	movs	r2, #2
 800dbaa:	71da      	strb	r2, [r3, #7]
 800dbac:	e011      	b.n	800dbd2 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	79db      	ldrb	r3, [r3, #7]
 800dbb2:	2b02      	cmp	r3, #2
 800dbb4:	d10d      	bne.n	800dbd2 <create_chain+0xe2>
 800dbb6:	69bb      	ldr	r3, [r7, #24]
 800dbb8:	3301      	adds	r3, #1
 800dbba:	69fa      	ldr	r2, [r7, #28]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d008      	beq.n	800dbd2 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	689b      	ldr	r3, [r3, #8]
 800dbc4:	69ba      	ldr	r2, [r7, #24]
 800dbc6:	1ad2      	subs	r2, r2, r3
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2203      	movs	r2, #3
 800dbd0:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	79db      	ldrb	r3, [r3, #7]
 800dbd6:	2b02      	cmp	r3, #2
 800dbd8:	d064      	beq.n	800dca4 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	3301      	adds	r3, #1
 800dbde:	69fa      	ldr	r2, [r7, #28]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d10b      	bne.n	800dbfc <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	69db      	ldr	r3, [r3, #28]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d003      	beq.n	800dbf4 <create_chain+0x104>
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	69db      	ldr	r3, [r3, #28]
 800dbf0:	3301      	adds	r3, #1
 800dbf2:	e000      	b.n	800dbf6 <create_chain+0x106>
 800dbf4:	2302      	movs	r3, #2
 800dbf6:	687a      	ldr	r2, [r7, #4]
 800dbf8:	61d3      	str	r3, [r2, #28]
 800dbfa:	e053      	b.n	800dca4 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	69db      	ldr	r3, [r3, #28]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d102      	bne.n	800dc0a <create_chain+0x11a>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2201      	movs	r2, #1
 800dc08:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800dc0a:	69fa      	ldr	r2, [r7, #28]
 800dc0c:	6839      	ldr	r1, [r7, #0]
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f7ff fe89 	bl	800d926 <fill_last_frag>
 800dc14:	4603      	mov	r3, r0
 800dc16:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800dc18:	7dfb      	ldrb	r3, [r7, #23]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d142      	bne.n	800dca4 <create_chain+0x1b4>
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2201      	movs	r2, #1
 800dc22:	61da      	str	r2, [r3, #28]
 800dc24:	e03e      	b.n	800dca4 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dc26:	69bb      	ldr	r3, [r7, #24]
 800dc28:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dc2a:	69fb      	ldr	r3, [r7, #28]
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	69db      	ldr	r3, [r3, #28]
 800dc34:	69fa      	ldr	r2, [r7, #28]
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d307      	bcc.n	800dc4a <create_chain+0x15a>
				ncl = 2;
 800dc3a:	2302      	movs	r3, #2
 800dc3c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dc3e:	69fa      	ldr	r2, [r7, #28]
 800dc40:	69bb      	ldr	r3, [r7, #24]
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d901      	bls.n	800dc4a <create_chain+0x15a>
 800dc46:	2300      	movs	r3, #0
 800dc48:	e04f      	b.n	800dcea <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dc4a:	69f9      	ldr	r1, [r7, #28]
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f7ff fb4b 	bl	800d2e8 <get_fat>
 800dc52:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d00e      	beq.n	800dc78 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d003      	beq.n	800dc68 <create_chain+0x178>
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc66:	d101      	bne.n	800dc6c <create_chain+0x17c>
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	e03e      	b.n	800dcea <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800dc6c:	69fa      	ldr	r2, [r7, #28]
 800dc6e:	69bb      	ldr	r3, [r7, #24]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d1da      	bne.n	800dc2a <create_chain+0x13a>
 800dc74:	2300      	movs	r3, #0
 800dc76:	e038      	b.n	800dcea <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800dc78:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dc7a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc7e:	69f9      	ldr	r1, [r7, #28]
 800dc80:	6938      	ldr	r0, [r7, #16]
 800dc82:	f7ff fc4b 	bl	800d51c <put_fat>
 800dc86:	4603      	mov	r3, r0
 800dc88:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dc8a:	7dfb      	ldrb	r3, [r7, #23]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d109      	bne.n	800dca4 <create_chain+0x1b4>
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d006      	beq.n	800dca4 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dc96:	69fa      	ldr	r2, [r7, #28]
 800dc98:	6839      	ldr	r1, [r7, #0]
 800dc9a:	6938      	ldr	r0, [r7, #16]
 800dc9c:	f7ff fc3e 	bl	800d51c <put_fat>
 800dca0:	4603      	mov	r3, r0
 800dca2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dca4:	7dfb      	ldrb	r3, [r7, #23]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d116      	bne.n	800dcd8 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	69fa      	ldr	r2, [r7, #28]
 800dcae:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	699a      	ldr	r2, [r3, #24]
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	69db      	ldr	r3, [r3, #28]
 800dcb8:	3b02      	subs	r3, #2
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d804      	bhi.n	800dcc8 <create_chain+0x1d8>
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	699b      	ldr	r3, [r3, #24]
 800dcc2:	1e5a      	subs	r2, r3, #1
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	791b      	ldrb	r3, [r3, #4]
 800dccc:	f043 0301 	orr.w	r3, r3, #1
 800dcd0:	b2da      	uxtb	r2, r3
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	711a      	strb	r2, [r3, #4]
 800dcd6:	e007      	b.n	800dce8 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dcd8:	7dfb      	ldrb	r3, [r7, #23]
 800dcda:	2b01      	cmp	r3, #1
 800dcdc:	d102      	bne.n	800dce4 <create_chain+0x1f4>
 800dcde:	f04f 33ff 	mov.w	r3, #4294967295
 800dce2:	e000      	b.n	800dce6 <create_chain+0x1f6>
 800dce4:	2301      	movs	r3, #1
 800dce6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dce8:	69fb      	ldr	r3, [r7, #28]
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3720      	adds	r7, #32
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}

0800dcf2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dcf2:	b5b0      	push	{r4, r5, r7, lr}
 800dcf4:	b088      	sub	sp, #32
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	60f8      	str	r0, [r7, #12]
 800dcfa:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd08:	3304      	adds	r3, #4
 800dd0a:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dd0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd10:	f04f 0000 	mov.w	r0, #0
 800dd14:	f04f 0100 	mov.w	r1, #0
 800dd18:	0a50      	lsrs	r0, r2, #9
 800dd1a:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800dd1e:	0a59      	lsrs	r1, r3, #9
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	895b      	ldrh	r3, [r3, #10]
 800dd24:	b29b      	uxth	r3, r3
 800dd26:	2200      	movs	r2, #0
 800dd28:	461c      	mov	r4, r3
 800dd2a:	4615      	mov	r5, r2
 800dd2c:	4622      	mov	r2, r4
 800dd2e:	462b      	mov	r3, r5
 800dd30:	f7f2 fab6 	bl	80002a0 <__aeabi_uldivmod>
 800dd34:	4602      	mov	r2, r0
 800dd36:	460b      	mov	r3, r1
 800dd38:	4613      	mov	r3, r2
 800dd3a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dd3c:	69bb      	ldr	r3, [r7, #24]
 800dd3e:	1d1a      	adds	r2, r3, #4
 800dd40:	61ba      	str	r2, [r7, #24]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d101      	bne.n	800dd50 <clmt_clust+0x5e>
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	e010      	b.n	800dd72 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800dd50:	69fa      	ldr	r2, [r7, #28]
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d307      	bcc.n	800dd68 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800dd58:	69fa      	ldr	r2, [r7, #28]
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	1ad3      	subs	r3, r2, r3
 800dd5e:	61fb      	str	r3, [r7, #28]
 800dd60:	69bb      	ldr	r3, [r7, #24]
 800dd62:	3304      	adds	r3, #4
 800dd64:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dd66:	e7e9      	b.n	800dd3c <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800dd68:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dd6a:	69bb      	ldr	r3, [r7, #24]
 800dd6c:	681a      	ldr	r2, [r3, #0]
 800dd6e:	69fb      	ldr	r3, [r7, #28]
 800dd70:	4413      	add	r3, r2
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3720      	adds	r7, #32
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bdb0      	pop	{r4, r5, r7, pc}

0800dd7a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dd7a:	b580      	push	{r7, lr}
 800dd7c:	b086      	sub	sp, #24
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
 800dd82:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dd8a:	693b      	ldr	r3, [r7, #16]
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	2b04      	cmp	r3, #4
 800dd90:	d102      	bne.n	800dd98 <dir_sdi+0x1e>
 800dd92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd96:	e001      	b.n	800dd9c <dir_sdi+0x22>
 800dd98:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d904      	bls.n	800ddac <dir_sdi+0x32>
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	f003 031f 	and.w	r3, r3, #31
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d001      	beq.n	800ddb0 <dir_sdi+0x36>
		return FR_INT_ERR;
 800ddac:	2302      	movs	r3, #2
 800ddae:	e066      	b.n	800de7e <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	683a      	ldr	r2, [r7, #0]
 800ddb4:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	689b      	ldr	r3, [r3, #8]
 800ddba:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d109      	bne.n	800ddd6 <dir_sdi+0x5c>
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	2b02      	cmp	r3, #2
 800ddc8:	d905      	bls.n	800ddd6 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddce:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d10c      	bne.n	800ddf6 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	095b      	lsrs	r3, r3, #5
 800dde0:	693a      	ldr	r2, [r7, #16]
 800dde2:	8912      	ldrh	r2, [r2, #8]
 800dde4:	4293      	cmp	r3, r2
 800dde6:	d301      	bcc.n	800ddec <dir_sdi+0x72>
 800dde8:	2302      	movs	r3, #2
 800ddea:	e048      	b.n	800de7e <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	639a      	str	r2, [r3, #56]	; 0x38
 800ddf4:	e029      	b.n	800de4a <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	895b      	ldrh	r3, [r3, #10]
 800ddfa:	025b      	lsls	r3, r3, #9
 800ddfc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ddfe:	e019      	b.n	800de34 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6979      	ldr	r1, [r7, #20]
 800de04:	4618      	mov	r0, r3
 800de06:	f7ff fa6f 	bl	800d2e8 <get_fat>
 800de0a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de12:	d101      	bne.n	800de18 <dir_sdi+0x9e>
 800de14:	2301      	movs	r3, #1
 800de16:	e032      	b.n	800de7e <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	2b01      	cmp	r3, #1
 800de1c:	d904      	bls.n	800de28 <dir_sdi+0xae>
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	69db      	ldr	r3, [r3, #28]
 800de22:	697a      	ldr	r2, [r7, #20]
 800de24:	429a      	cmp	r2, r3
 800de26:	d301      	bcc.n	800de2c <dir_sdi+0xb2>
 800de28:	2302      	movs	r3, #2
 800de2a:	e028      	b.n	800de7e <dir_sdi+0x104>
			ofs -= csz;
 800de2c:	683a      	ldr	r2, [r7, #0]
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	1ad3      	subs	r3, r2, r3
 800de32:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800de34:	683a      	ldr	r2, [r7, #0]
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	429a      	cmp	r2, r3
 800de3a:	d2e1      	bcs.n	800de00 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800de3c:	6979      	ldr	r1, [r7, #20]
 800de3e:	6938      	ldr	r0, [r7, #16]
 800de40:	f7ff fa32 	bl	800d2a8 <clust2sect>
 800de44:	4602      	mov	r2, r0
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	697a      	ldr	r2, [r7, #20]
 800de4e:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de54:	2b00      	cmp	r3, #0
 800de56:	d101      	bne.n	800de5c <dir_sdi+0xe2>
 800de58:	2302      	movs	r3, #2
 800de5a:	e010      	b.n	800de7e <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	0a5b      	lsrs	r3, r3, #9
 800de64:	441a      	add	r2, r3
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800de6a:	693b      	ldr	r3, [r7, #16]
 800de6c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de76:	441a      	add	r2, r3
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800de7c:	2300      	movs	r3, #0
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3718      	adds	r7, #24
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}

0800de86 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800de86:	b580      	push	{r7, lr}
 800de88:	b086      	sub	sp, #24
 800de8a:	af00      	add	r7, sp, #0
 800de8c:	6078      	str	r0, [r7, #4]
 800de8e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de9a:	3320      	adds	r3, #32
 800de9c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d00b      	beq.n	800debe <dir_next+0x38>
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	2b04      	cmp	r3, #4
 800deac:	d102      	bne.n	800deb4 <dir_next+0x2e>
 800deae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800deb2:	e001      	b.n	800deb8 <dir_next+0x32>
 800deb4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	429a      	cmp	r2, r3
 800debc:	d801      	bhi.n	800dec2 <dir_next+0x3c>
 800debe:	2304      	movs	r3, #4
 800dec0:	e0b2      	b.n	800e028 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dec8:	2b00      	cmp	r3, #0
 800deca:	f040 80a0 	bne.w	800e00e <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ded2:	1c5a      	adds	r2, r3, #1
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d10b      	bne.n	800def8 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	095b      	lsrs	r3, r3, #5
 800dee4:	68fa      	ldr	r2, [r7, #12]
 800dee6:	8912      	ldrh	r2, [r2, #8]
 800dee8:	4293      	cmp	r3, r2
 800deea:	f0c0 8090 	bcc.w	800e00e <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2200      	movs	r2, #0
 800def2:	639a      	str	r2, [r3, #56]	; 0x38
 800def4:	2304      	movs	r3, #4
 800def6:	e097      	b.n	800e028 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	0a5b      	lsrs	r3, r3, #9
 800defc:	68fa      	ldr	r2, [r7, #12]
 800defe:	8952      	ldrh	r2, [r2, #10]
 800df00:	3a01      	subs	r2, #1
 800df02:	4013      	ands	r3, r2
 800df04:	2b00      	cmp	r3, #0
 800df06:	f040 8082 	bne.w	800e00e <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800df0a:	687a      	ldr	r2, [r7, #4]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df10:	4619      	mov	r1, r3
 800df12:	4610      	mov	r0, r2
 800df14:	f7ff f9e8 	bl	800d2e8 <get_fat>
 800df18:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d801      	bhi.n	800df24 <dir_next+0x9e>
 800df20:	2302      	movs	r3, #2
 800df22:	e081      	b.n	800e028 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df2a:	d101      	bne.n	800df30 <dir_next+0xaa>
 800df2c:	2301      	movs	r3, #1
 800df2e:	e07b      	b.n	800e028 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	69db      	ldr	r3, [r3, #28]
 800df34:	697a      	ldr	r2, [r7, #20]
 800df36:	429a      	cmp	r2, r3
 800df38:	d35f      	bcc.n	800dffa <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d104      	bne.n	800df4a <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2200      	movs	r2, #0
 800df44:	639a      	str	r2, [r3, #56]	; 0x38
 800df46:	2304      	movs	r3, #4
 800df48:	e06e      	b.n	800e028 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800df4a:	687a      	ldr	r2, [r7, #4]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df50:	4619      	mov	r1, r3
 800df52:	4610      	mov	r0, r2
 800df54:	f7ff fdcc 	bl	800daf0 <create_chain>
 800df58:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d101      	bne.n	800df64 <dir_next+0xde>
 800df60:	2307      	movs	r3, #7
 800df62:	e061      	b.n	800e028 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	2b01      	cmp	r3, #1
 800df68:	d101      	bne.n	800df6e <dir_next+0xe8>
 800df6a:	2302      	movs	r3, #2
 800df6c:	e05c      	b.n	800e028 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df74:	d101      	bne.n	800df7a <dir_next+0xf4>
 800df76:	2301      	movs	r3, #1
 800df78:	e056      	b.n	800e028 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	79db      	ldrb	r3, [r3, #7]
 800df7e:	f043 0304 	orr.w	r3, r3, #4
 800df82:	b2da      	uxtb	r2, r3
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800df88:	68f8      	ldr	r0, [r7, #12]
 800df8a:	f7ff f8ad 	bl	800d0e8 <sync_window>
 800df8e:	4603      	mov	r3, r0
 800df90:	2b00      	cmp	r3, #0
 800df92:	d001      	beq.n	800df98 <dir_next+0x112>
 800df94:	2301      	movs	r3, #1
 800df96:	e047      	b.n	800e028 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	3338      	adds	r3, #56	; 0x38
 800df9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dfa0:	2100      	movs	r1, #0
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7fe fed6 	bl	800cd54 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	613b      	str	r3, [r7, #16]
 800dfac:	6979      	ldr	r1, [r7, #20]
 800dfae:	68f8      	ldr	r0, [r7, #12]
 800dfb0:	f7ff f97a 	bl	800d2a8 <clust2sect>
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	635a      	str	r2, [r3, #52]	; 0x34
 800dfba:	e012      	b.n	800dfe2 <dir_next+0x15c>
						fs->wflag = 1;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800dfc2:	68f8      	ldr	r0, [r7, #12]
 800dfc4:	f7ff f890 	bl	800d0e8 <sync_window>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d001      	beq.n	800dfd2 <dir_next+0x14c>
 800dfce:	2301      	movs	r3, #1
 800dfd0:	e02a      	b.n	800e028 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	613b      	str	r3, [r7, #16]
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfdc:	1c5a      	adds	r2, r3, #1
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	635a      	str	r2, [r3, #52]	; 0x34
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	895b      	ldrh	r3, [r3, #10]
 800dfe6:	461a      	mov	r2, r3
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	4293      	cmp	r3, r2
 800dfec:	d3e6      	bcc.n	800dfbc <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	1ad2      	subs	r2, r2, r3
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	697a      	ldr	r2, [r7, #20]
 800dffe:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800e000:	6979      	ldr	r1, [r7, #20]
 800e002:	68f8      	ldr	r0, [r7, #12]
 800e004:	f7ff f950 	bl	800d2a8 <clust2sect>
 800e008:	4602      	mov	r2, r0
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	68ba      	ldr	r2, [r7, #8]
 800e012:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e020:	441a      	add	r2, r3
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800e026:	2300      	movs	r3, #0
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3718      	adds	r7, #24
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b086      	sub	sp, #24
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e040:	2100      	movs	r1, #0
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f7ff fe99 	bl	800dd7a <dir_sdi>
 800e048:	4603      	mov	r3, r0
 800e04a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e04c:	7dfb      	ldrb	r3, [r7, #23]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d140      	bne.n	800e0d4 <dir_alloc+0xa4>
		n = 0;
 800e052:	2300      	movs	r3, #0
 800e054:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e05a:	4619      	mov	r1, r3
 800e05c:	68f8      	ldr	r0, [r7, #12]
 800e05e:	f7ff f887 	bl	800d170 <move_window>
 800e062:	4603      	mov	r3, r0
 800e064:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e066:	7dfb      	ldrb	r3, [r7, #23]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d132      	bne.n	800e0d2 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	2b04      	cmp	r3, #4
 800e072:	d108      	bne.n	800e086 <dir_alloc+0x56>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	b25b      	sxtb	r3, r3
 800e07c:	43db      	mvns	r3, r3
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	09db      	lsrs	r3, r3, #7
 800e082:	b2db      	uxtb	r3, r3
 800e084:	e00f      	b.n	800e0a6 <dir_alloc+0x76>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	2be5      	cmp	r3, #229	; 0xe5
 800e08e:	d004      	beq.n	800e09a <dir_alloc+0x6a>
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d101      	bne.n	800e09e <dir_alloc+0x6e>
 800e09a:	2301      	movs	r3, #1
 800e09c:	e000      	b.n	800e0a0 <dir_alloc+0x70>
 800e09e:	2300      	movs	r3, #0
 800e0a0:	f003 0301 	and.w	r3, r3, #1
 800e0a4:	b2db      	uxtb	r3, r3
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d007      	beq.n	800e0ba <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	613b      	str	r3, [r7, #16]
 800e0b0:	693a      	ldr	r2, [r7, #16]
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d102      	bne.n	800e0be <dir_alloc+0x8e>
 800e0b8:	e00c      	b.n	800e0d4 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e0be:	2101      	movs	r1, #1
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f7ff fee0 	bl	800de86 <dir_next>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e0ca:	7dfb      	ldrb	r3, [r7, #23]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d0c2      	beq.n	800e056 <dir_alloc+0x26>
 800e0d0:	e000      	b.n	800e0d4 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800e0d2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e0d4:	7dfb      	ldrb	r3, [r7, #23]
 800e0d6:	2b04      	cmp	r3, #4
 800e0d8:	d101      	bne.n	800e0de <dir_alloc+0xae>
 800e0da:	2307      	movs	r3, #7
 800e0dc:	75fb      	strb	r3, [r7, #23]
	return res;
 800e0de:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3718      	adds	r7, #24
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}

0800e0e8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b084      	sub	sp, #16
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	331a      	adds	r3, #26
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7fe fc26 	bl	800c948 <ld_word>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	781b      	ldrb	r3, [r3, #0]
 800e104:	2b03      	cmp	r3, #3
 800e106:	d109      	bne.n	800e11c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	3314      	adds	r3, #20
 800e10c:	4618      	mov	r0, r3
 800e10e:	f7fe fc1b 	bl	800c948 <ld_word>
 800e112:	4603      	mov	r3, r0
 800e114:	041b      	lsls	r3, r3, #16
 800e116:	68fa      	ldr	r2, [r7, #12]
 800e118:	4313      	orrs	r3, r2
 800e11a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e11c:	68fb      	ldr	r3, [r7, #12]
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3710      	adds	r7, #16
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}

0800e126 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e126:	b580      	push	{r7, lr}
 800e128:	b084      	sub	sp, #16
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	60f8      	str	r0, [r7, #12]
 800e12e:	60b9      	str	r1, [r7, #8]
 800e130:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	331a      	adds	r3, #26
 800e136:	687a      	ldr	r2, [r7, #4]
 800e138:	b292      	uxth	r2, r2
 800e13a:	4611      	mov	r1, r2
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7fe fd19 	bl	800cb74 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	2b03      	cmp	r3, #3
 800e148:	d109      	bne.n	800e15e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	f103 0214 	add.w	r2, r3, #20
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	0c1b      	lsrs	r3, r3, #16
 800e154:	b29b      	uxth	r3, r3
 800e156:	4619      	mov	r1, r3
 800e158:	4610      	mov	r0, r2
 800e15a:	f7fe fd0b 	bl	800cb74 <st_word>
	}
}
 800e15e:	bf00      	nop
 800e160:	3710      	adds	r7, #16
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
	...

0800e168 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e168:	b590      	push	{r4, r7, lr}
 800e16a:	b087      	sub	sp, #28
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	331a      	adds	r3, #26
 800e176:	4618      	mov	r0, r3
 800e178:	f7fe fbe6 	bl	800c948 <ld_word>
 800e17c:	4603      	mov	r3, r0
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d001      	beq.n	800e186 <cmp_lfn+0x1e>
 800e182:	2300      	movs	r3, #0
 800e184:	e059      	b.n	800e23a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e18e:	1e5a      	subs	r2, r3, #1
 800e190:	4613      	mov	r3, r2
 800e192:	005b      	lsls	r3, r3, #1
 800e194:	4413      	add	r3, r2
 800e196:	009b      	lsls	r3, r3, #2
 800e198:	4413      	add	r3, r2
 800e19a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e19c:	2301      	movs	r3, #1
 800e19e:	81fb      	strh	r3, [r7, #14]
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	613b      	str	r3, [r7, #16]
 800e1a4:	e033      	b.n	800e20e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e1a6:	4a27      	ldr	r2, [pc, #156]	; (800e244 <cmp_lfn+0xdc>)
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	4413      	add	r3, r2
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	4413      	add	r3, r2
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7fe fbc7 	bl	800c948 <ld_word>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e1be:	89fb      	ldrh	r3, [r7, #14]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d01a      	beq.n	800e1fa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	2bfe      	cmp	r3, #254	; 0xfe
 800e1c8:	d812      	bhi.n	800e1f0 <cmp_lfn+0x88>
 800e1ca:	89bb      	ldrh	r3, [r7, #12]
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f003 f96f 	bl	80114b0 <ff_wtoupper>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	461c      	mov	r4, r3
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	1c5a      	adds	r2, r3, #1
 800e1da:	617a      	str	r2, [r7, #20]
 800e1dc:	005b      	lsls	r3, r3, #1
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	4413      	add	r3, r2
 800e1e2:	881b      	ldrh	r3, [r3, #0]
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f003 f963 	bl	80114b0 <ff_wtoupper>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	429c      	cmp	r4, r3
 800e1ee:	d001      	beq.n	800e1f4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	e022      	b.n	800e23a <cmp_lfn+0xd2>
			}
			wc = uc;
 800e1f4:	89bb      	ldrh	r3, [r7, #12]
 800e1f6:	81fb      	strh	r3, [r7, #14]
 800e1f8:	e006      	b.n	800e208 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e1fa:	89bb      	ldrh	r3, [r7, #12]
 800e1fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e200:	4293      	cmp	r3, r2
 800e202:	d001      	beq.n	800e208 <cmp_lfn+0xa0>
 800e204:	2300      	movs	r3, #0
 800e206:	e018      	b.n	800e23a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	3301      	adds	r3, #1
 800e20c:	613b      	str	r3, [r7, #16]
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	2b0c      	cmp	r3, #12
 800e212:	d9c8      	bls.n	800e1a6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d00b      	beq.n	800e238 <cmp_lfn+0xd0>
 800e220:	89fb      	ldrh	r3, [r7, #14]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d008      	beq.n	800e238 <cmp_lfn+0xd0>
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	005b      	lsls	r3, r3, #1
 800e22a:	687a      	ldr	r2, [r7, #4]
 800e22c:	4413      	add	r3, r2
 800e22e:	881b      	ldrh	r3, [r3, #0]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d001      	beq.n	800e238 <cmp_lfn+0xd0>
 800e234:	2300      	movs	r3, #0
 800e236:	e000      	b.n	800e23a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e238:	2301      	movs	r3, #1
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	371c      	adds	r7, #28
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd90      	pop	{r4, r7, pc}
 800e242:	bf00      	nop
 800e244:	08017084 	.word	0x08017084

0800e248 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b086      	sub	sp, #24
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	331a      	adds	r3, #26
 800e256:	4618      	mov	r0, r3
 800e258:	f7fe fb76 	bl	800c948 <ld_word>
 800e25c:	4603      	mov	r3, r0
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d001      	beq.n	800e266 <pick_lfn+0x1e>
 800e262:	2300      	movs	r3, #0
 800e264:	e04d      	b.n	800e302 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	781b      	ldrb	r3, [r3, #0]
 800e26a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e26e:	1e5a      	subs	r2, r3, #1
 800e270:	4613      	mov	r3, r2
 800e272:	005b      	lsls	r3, r3, #1
 800e274:	4413      	add	r3, r2
 800e276:	009b      	lsls	r3, r3, #2
 800e278:	4413      	add	r3, r2
 800e27a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e27c:	2301      	movs	r3, #1
 800e27e:	81fb      	strh	r3, [r7, #14]
 800e280:	2300      	movs	r3, #0
 800e282:	613b      	str	r3, [r7, #16]
 800e284:	e028      	b.n	800e2d8 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e286:	4a21      	ldr	r2, [pc, #132]	; (800e30c <pick_lfn+0xc4>)
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	4413      	add	r3, r2
 800e28c:	781b      	ldrb	r3, [r3, #0]
 800e28e:	461a      	mov	r2, r3
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	4413      	add	r3, r2
 800e294:	4618      	mov	r0, r3
 800e296:	f7fe fb57 	bl	800c948 <ld_word>
 800e29a:	4603      	mov	r3, r0
 800e29c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e29e:	89fb      	ldrh	r3, [r7, #14]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d00f      	beq.n	800e2c4 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	2bfe      	cmp	r3, #254	; 0xfe
 800e2a8:	d901      	bls.n	800e2ae <pick_lfn+0x66>
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	e029      	b.n	800e302 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e2ae:	89bb      	ldrh	r3, [r7, #12]
 800e2b0:	81fb      	strh	r3, [r7, #14]
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	1c5a      	adds	r2, r3, #1
 800e2b6:	617a      	str	r2, [r7, #20]
 800e2b8:	005b      	lsls	r3, r3, #1
 800e2ba:	687a      	ldr	r2, [r7, #4]
 800e2bc:	4413      	add	r3, r2
 800e2be:	89fa      	ldrh	r2, [r7, #14]
 800e2c0:	801a      	strh	r2, [r3, #0]
 800e2c2:	e006      	b.n	800e2d2 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e2c4:	89bb      	ldrh	r3, [r7, #12]
 800e2c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d001      	beq.n	800e2d2 <pick_lfn+0x8a>
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	e017      	b.n	800e302 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	613b      	str	r3, [r7, #16]
 800e2d8:	693b      	ldr	r3, [r7, #16]
 800e2da:	2b0c      	cmp	r3, #12
 800e2dc:	d9d3      	bls.n	800e286 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	781b      	ldrb	r3, [r3, #0]
 800e2e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d00a      	beq.n	800e300 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	2bfe      	cmp	r3, #254	; 0xfe
 800e2ee:	d901      	bls.n	800e2f4 <pick_lfn+0xac>
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	e006      	b.n	800e302 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	005b      	lsls	r3, r3, #1
 800e2f8:	687a      	ldr	r2, [r7, #4]
 800e2fa:	4413      	add	r3, r2
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800e300:	2301      	movs	r3, #1
}
 800e302:	4618      	mov	r0, r3
 800e304:	3718      	adds	r7, #24
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}
 800e30a:	bf00      	nop
 800e30c:	08017084 	.word	0x08017084

0800e310 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b088      	sub	sp, #32
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	4611      	mov	r1, r2
 800e31c:	461a      	mov	r2, r3
 800e31e:	460b      	mov	r3, r1
 800e320:	71fb      	strb	r3, [r7, #7]
 800e322:	4613      	mov	r3, r2
 800e324:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	330d      	adds	r3, #13
 800e32a:	79ba      	ldrb	r2, [r7, #6]
 800e32c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	330b      	adds	r3, #11
 800e332:	220f      	movs	r2, #15
 800e334:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	330c      	adds	r3, #12
 800e33a:	2200      	movs	r2, #0
 800e33c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	331a      	adds	r3, #26
 800e342:	2100      	movs	r1, #0
 800e344:	4618      	mov	r0, r3
 800e346:	f7fe fc15 	bl	800cb74 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e34a:	79fb      	ldrb	r3, [r7, #7]
 800e34c:	1e5a      	subs	r2, r3, #1
 800e34e:	4613      	mov	r3, r2
 800e350:	005b      	lsls	r3, r3, #1
 800e352:	4413      	add	r3, r2
 800e354:	009b      	lsls	r3, r3, #2
 800e356:	4413      	add	r3, r2
 800e358:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e35a:	2300      	movs	r3, #0
 800e35c:	82fb      	strh	r3, [r7, #22]
 800e35e:	2300      	movs	r3, #0
 800e360:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e362:	8afb      	ldrh	r3, [r7, #22]
 800e364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e368:	4293      	cmp	r3, r2
 800e36a:	d007      	beq.n	800e37c <put_lfn+0x6c>
 800e36c:	69fb      	ldr	r3, [r7, #28]
 800e36e:	1c5a      	adds	r2, r3, #1
 800e370:	61fa      	str	r2, [r7, #28]
 800e372:	005b      	lsls	r3, r3, #1
 800e374:	68fa      	ldr	r2, [r7, #12]
 800e376:	4413      	add	r3, r2
 800e378:	881b      	ldrh	r3, [r3, #0]
 800e37a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e37c:	4a17      	ldr	r2, [pc, #92]	; (800e3dc <put_lfn+0xcc>)
 800e37e:	69bb      	ldr	r3, [r7, #24]
 800e380:	4413      	add	r3, r2
 800e382:	781b      	ldrb	r3, [r3, #0]
 800e384:	461a      	mov	r2, r3
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	4413      	add	r3, r2
 800e38a:	8afa      	ldrh	r2, [r7, #22]
 800e38c:	4611      	mov	r1, r2
 800e38e:	4618      	mov	r0, r3
 800e390:	f7fe fbf0 	bl	800cb74 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e394:	8afb      	ldrh	r3, [r7, #22]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d102      	bne.n	800e3a0 <put_lfn+0x90>
 800e39a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e39e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e3a0:	69bb      	ldr	r3, [r7, #24]
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	61bb      	str	r3, [r7, #24]
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	2b0c      	cmp	r3, #12
 800e3aa:	d9da      	bls.n	800e362 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e3ac:	8afb      	ldrh	r3, [r7, #22]
 800e3ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d006      	beq.n	800e3c4 <put_lfn+0xb4>
 800e3b6:	69fb      	ldr	r3, [r7, #28]
 800e3b8:	005b      	lsls	r3, r3, #1
 800e3ba:	68fa      	ldr	r2, [r7, #12]
 800e3bc:	4413      	add	r3, r2
 800e3be:	881b      	ldrh	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d103      	bne.n	800e3cc <put_lfn+0xbc>
 800e3c4:	79fb      	ldrb	r3, [r7, #7]
 800e3c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3ca:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e3cc:	68bb      	ldr	r3, [r7, #8]
 800e3ce:	79fa      	ldrb	r2, [r7, #7]
 800e3d0:	701a      	strb	r2, [r3, #0]
}
 800e3d2:	bf00      	nop
 800e3d4:	3720      	adds	r7, #32
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	08017084 	.word	0x08017084

0800e3e0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b08c      	sub	sp, #48	; 0x30
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	60f8      	str	r0, [r7, #12]
 800e3e8:	60b9      	str	r1, [r7, #8]
 800e3ea:	607a      	str	r2, [r7, #4]
 800e3ec:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e3ee:	220b      	movs	r2, #11
 800e3f0:	68b9      	ldr	r1, [r7, #8]
 800e3f2:	68f8      	ldr	r0, [r7, #12]
 800e3f4:	f7fe fc8d 	bl	800cd12 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	2b05      	cmp	r3, #5
 800e3fc:	d92b      	bls.n	800e456 <gen_numname+0x76>
		sr = seq;
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e402:	e022      	b.n	800e44a <gen_numname+0x6a>
			wc = *lfn++;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	1c9a      	adds	r2, r3, #2
 800e408:	607a      	str	r2, [r7, #4]
 800e40a:	881b      	ldrh	r3, [r3, #0]
 800e40c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e40e:	2300      	movs	r3, #0
 800e410:	62bb      	str	r3, [r7, #40]	; 0x28
 800e412:	e017      	b.n	800e444 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e414:	69fb      	ldr	r3, [r7, #28]
 800e416:	005a      	lsls	r2, r3, #1
 800e418:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e41a:	f003 0301 	and.w	r3, r3, #1
 800e41e:	4413      	add	r3, r2
 800e420:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e422:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e424:	085b      	lsrs	r3, r3, #1
 800e426:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e428:	69fb      	ldr	r3, [r7, #28]
 800e42a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d005      	beq.n	800e43e <gen_numname+0x5e>
 800e432:	69fb      	ldr	r3, [r7, #28]
 800e434:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e438:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e43c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e440:	3301      	adds	r3, #1
 800e442:	62bb      	str	r3, [r7, #40]	; 0x28
 800e444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e446:	2b0f      	cmp	r3, #15
 800e448:	d9e4      	bls.n	800e414 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	881b      	ldrh	r3, [r3, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d1d8      	bne.n	800e404 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e452:	69fb      	ldr	r3, [r7, #28]
 800e454:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e456:	2307      	movs	r3, #7
 800e458:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	f003 030f 	and.w	r3, r3, #15
 800e462:	b2db      	uxtb	r3, r3
 800e464:	3330      	adds	r3, #48	; 0x30
 800e466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e46a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e46e:	2b39      	cmp	r3, #57	; 0x39
 800e470:	d904      	bls.n	800e47c <gen_numname+0x9c>
 800e472:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e476:	3307      	adds	r3, #7
 800e478:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47e:	1e5a      	subs	r2, r3, #1
 800e480:	62ba      	str	r2, [r7, #40]	; 0x28
 800e482:	3330      	adds	r3, #48	; 0x30
 800e484:	443b      	add	r3, r7
 800e486:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e48a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	091b      	lsrs	r3, r3, #4
 800e492:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d1df      	bne.n	800e45a <gen_numname+0x7a>
	ns[i] = '~';
 800e49a:	f107 0214 	add.w	r2, r7, #20
 800e49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a0:	4413      	add	r3, r2
 800e4a2:	227e      	movs	r2, #126	; 0x7e
 800e4a4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	627b      	str	r3, [r7, #36]	; 0x24
 800e4aa:	e002      	b.n	800e4b2 <gen_numname+0xd2>
 800e4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	627b      	str	r3, [r7, #36]	; 0x24
 800e4b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d205      	bcs.n	800e4c6 <gen_numname+0xe6>
 800e4ba:	68fa      	ldr	r2, [r7, #12]
 800e4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4be:	4413      	add	r3, r2
 800e4c0:	781b      	ldrb	r3, [r3, #0]
 800e4c2:	2b20      	cmp	r3, #32
 800e4c4:	d1f2      	bne.n	800e4ac <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c8:	2b07      	cmp	r3, #7
 800e4ca:	d807      	bhi.n	800e4dc <gen_numname+0xfc>
 800e4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ce:	1c5a      	adds	r2, r3, #1
 800e4d0:	62ba      	str	r2, [r7, #40]	; 0x28
 800e4d2:	3330      	adds	r3, #48	; 0x30
 800e4d4:	443b      	add	r3, r7
 800e4d6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e4da:	e000      	b.n	800e4de <gen_numname+0xfe>
 800e4dc:	2120      	movs	r1, #32
 800e4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e0:	1c5a      	adds	r2, r3, #1
 800e4e2:	627a      	str	r2, [r7, #36]	; 0x24
 800e4e4:	68fa      	ldr	r2, [r7, #12]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	460a      	mov	r2, r1
 800e4ea:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ee:	2b07      	cmp	r3, #7
 800e4f0:	d9e9      	bls.n	800e4c6 <gen_numname+0xe6>
}
 800e4f2:	bf00      	nop
 800e4f4:	bf00      	nop
 800e4f6:	3730      	adds	r7, #48	; 0x30
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b085      	sub	sp, #20
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e504:	2300      	movs	r3, #0
 800e506:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e508:	230b      	movs	r3, #11
 800e50a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e50c:	7bfb      	ldrb	r3, [r7, #15]
 800e50e:	b2da      	uxtb	r2, r3
 800e510:	0852      	lsrs	r2, r2, #1
 800e512:	01db      	lsls	r3, r3, #7
 800e514:	4313      	orrs	r3, r2
 800e516:	b2da      	uxtb	r2, r3
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	1c59      	adds	r1, r3, #1
 800e51c:	6079      	str	r1, [r7, #4]
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	4413      	add	r3, r2
 800e522:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	3b01      	subs	r3, #1
 800e528:	60bb      	str	r3, [r7, #8]
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d1ed      	bne.n	800e50c <sum_sfn+0x10>
	return sum;
 800e530:	7bfb      	ldrb	r3, [r7, #15]
}
 800e532:	4618      	mov	r0, r3
 800e534:	3714      	adds	r7, #20
 800e536:	46bd      	mov	sp, r7
 800e538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53c:	4770      	bx	lr

0800e53e <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800e53e:	b480      	push	{r7}
 800e540:	b087      	sub	sp, #28
 800e542:	af00      	add	r7, sp, #0
 800e544:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	3301      	adds	r3, #1
 800e54a:	781b      	ldrb	r3, [r3, #0]
 800e54c:	3301      	adds	r3, #1
 800e54e:	015b      	lsls	r3, r3, #5
 800e550:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800e552:	2300      	movs	r3, #0
 800e554:	827b      	strh	r3, [r7, #18]
 800e556:	2300      	movs	r3, #0
 800e558:	617b      	str	r3, [r7, #20]
 800e55a:	e018      	b.n	800e58e <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	2b02      	cmp	r3, #2
 800e560:	d103      	bne.n	800e56a <xdir_sum+0x2c>
			i++;
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	3301      	adds	r3, #1
 800e566:	617b      	str	r3, [r7, #20]
 800e568:	e00e      	b.n	800e588 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800e56a:	8a7b      	ldrh	r3, [r7, #18]
 800e56c:	03db      	lsls	r3, r3, #15
 800e56e:	b29a      	uxth	r2, r3
 800e570:	8a7b      	ldrh	r3, [r7, #18]
 800e572:	085b      	lsrs	r3, r3, #1
 800e574:	b29b      	uxth	r3, r3
 800e576:	4413      	add	r3, r2
 800e578:	b29a      	uxth	r2, r3
 800e57a:	6879      	ldr	r1, [r7, #4]
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	440b      	add	r3, r1
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	b29b      	uxth	r3, r3
 800e584:	4413      	add	r3, r2
 800e586:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	3301      	adds	r3, #1
 800e58c:	617b      	str	r3, [r7, #20]
 800e58e:	697a      	ldr	r2, [r7, #20]
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	429a      	cmp	r2, r3
 800e594:	d3e2      	bcc.n	800e55c <xdir_sum+0x1e>
		}
	}
	return sum;
 800e596:	8a7b      	ldrh	r3, [r7, #18]
}
 800e598:	4618      	mov	r0, r3
 800e59a:	371c      	adds	r7, #28
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr

0800e5a4 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800e5b0:	e01f      	b.n	800e5f2 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800e5b2:	89bb      	ldrh	r3, [r7, #12]
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f002 ff7b 	bl	80114b0 <ff_wtoupper>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800e5be:	89fb      	ldrh	r3, [r7, #14]
 800e5c0:	03db      	lsls	r3, r3, #15
 800e5c2:	b29a      	uxth	r2, r3
 800e5c4:	89fb      	ldrh	r3, [r7, #14]
 800e5c6:	085b      	lsrs	r3, r3, #1
 800e5c8:	b29b      	uxth	r3, r3
 800e5ca:	4413      	add	r3, r2
 800e5cc:	b29a      	uxth	r2, r3
 800e5ce:	89bb      	ldrh	r3, [r7, #12]
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	4413      	add	r3, r2
 800e5d6:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800e5d8:	89fb      	ldrh	r3, [r7, #14]
 800e5da:	03db      	lsls	r3, r3, #15
 800e5dc:	b29a      	uxth	r2, r3
 800e5de:	89fb      	ldrh	r3, [r7, #14]
 800e5e0:	085b      	lsrs	r3, r3, #1
 800e5e2:	b29b      	uxth	r3, r3
 800e5e4:	4413      	add	r3, r2
 800e5e6:	b29a      	uxth	r2, r3
 800e5e8:	89bb      	ldrh	r3, [r7, #12]
 800e5ea:	0a1b      	lsrs	r3, r3, #8
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	4413      	add	r3, r2
 800e5f0:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	1c9a      	adds	r2, r3, #2
 800e5f6:	607a      	str	r2, [r7, #4]
 800e5f8:	881b      	ldrh	r3, [r3, #0]
 800e5fa:	81bb      	strh	r3, [r7, #12]
 800e5fc:	89bb      	ldrh	r3, [r7, #12]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d1d7      	bne.n	800e5b2 <xname_sum+0xe>
	}
	return sum;
 800e602:	89fb      	ldrh	r3, [r7, #14]
}
 800e604:	4618      	mov	r0, r3
 800e606:	3710      	adds	r7, #16
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}

0800e60c <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800e60c:	b590      	push	{r4, r7, lr}
 800e60e:	b087      	sub	sp, #28
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	691b      	ldr	r3, [r3, #16]
 800e61a:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681a      	ldr	r2, [r3, #0]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e624:	4619      	mov	r1, r3
 800e626:	4610      	mov	r0, r2
 800e628:	f7fe fda2 	bl	800d170 <move_window>
 800e62c:	4603      	mov	r3, r0
 800e62e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800e630:	7bfb      	ldrb	r3, [r7, #15]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d001      	beq.n	800e63a <load_xdir+0x2e>
 800e636:	7bfb      	ldrb	r3, [r7, #15]
 800e638:	e09f      	b.n	800e77a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e63e:	781b      	ldrb	r3, [r3, #0]
 800e640:	2b85      	cmp	r3, #133	; 0x85
 800e642:	d001      	beq.n	800e648 <load_xdir+0x3c>
 800e644:	2302      	movs	r3, #2
 800e646:	e098      	b.n	800e77a <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e64c:	2220      	movs	r2, #32
 800e64e:	4619      	mov	r1, r3
 800e650:	6938      	ldr	r0, [r7, #16]
 800e652:	f7fe fb5e 	bl	800cd12 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	3301      	adds	r3, #1
 800e65a:	781b      	ldrb	r3, [r3, #0]
 800e65c:	3301      	adds	r3, #1
 800e65e:	015b      	lsls	r3, r3, #5
 800e660:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	2b5f      	cmp	r3, #95	; 0x5f
 800e666:	d903      	bls.n	800e670 <load_xdir+0x64>
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800e66e:	d901      	bls.n	800e674 <load_xdir+0x68>
 800e670:	2302      	movs	r3, #2
 800e672:	e082      	b.n	800e77a <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800e674:	2100      	movs	r1, #0
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f7ff fc05 	bl	800de86 <dir_next>
 800e67c:	4603      	mov	r3, r0
 800e67e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800e680:	7bfb      	ldrb	r3, [r7, #15]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d001      	beq.n	800e68a <load_xdir+0x7e>
 800e686:	7bfb      	ldrb	r3, [r7, #15]
 800e688:	e077      	b.n	800e77a <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681a      	ldr	r2, [r3, #0]
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e692:	4619      	mov	r1, r3
 800e694:	4610      	mov	r0, r2
 800e696:	f7fe fd6b 	bl	800d170 <move_window>
 800e69a:	4603      	mov	r3, r0
 800e69c:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800e69e:	7bfb      	ldrb	r3, [r7, #15]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d001      	beq.n	800e6a8 <load_xdir+0x9c>
 800e6a4:	7bfb      	ldrb	r3, [r7, #15]
 800e6a6:	e068      	b.n	800e77a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6ac:	781b      	ldrb	r3, [r3, #0]
 800e6ae:	2bc0      	cmp	r3, #192	; 0xc0
 800e6b0:	d001      	beq.n	800e6b6 <load_xdir+0xaa>
 800e6b2:	2302      	movs	r3, #2
 800e6b4:	e061      	b.n	800e77a <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	f103 0020 	add.w	r0, r3, #32
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6c0:	2220      	movs	r2, #32
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	f7fe fb25 	bl	800cd12 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	3323      	adds	r3, #35	; 0x23
 800e6cc:	781b      	ldrb	r3, [r3, #0]
 800e6ce:	332c      	adds	r3, #44	; 0x2c
 800e6d0:	4a2c      	ldr	r2, [pc, #176]	; (800e784 <load_xdir+0x178>)
 800e6d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e6d6:	08db      	lsrs	r3, r3, #3
 800e6d8:	015b      	lsls	r3, r3, #5
 800e6da:	68ba      	ldr	r2, [r7, #8]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d201      	bcs.n	800e6e4 <load_xdir+0xd8>
 800e6e0:	2302      	movs	r3, #2
 800e6e2:	e04a      	b.n	800e77a <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800e6e4:	2340      	movs	r3, #64	; 0x40
 800e6e6:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800e6e8:	2100      	movs	r1, #0
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f7ff fbcb 	bl	800de86 <dir_next>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800e6f4:	7bfb      	ldrb	r3, [r7, #15]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d001      	beq.n	800e6fe <load_xdir+0xf2>
 800e6fa:	7bfb      	ldrb	r3, [r7, #15]
 800e6fc:	e03d      	b.n	800e77a <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681a      	ldr	r2, [r3, #0]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e706:	4619      	mov	r1, r3
 800e708:	4610      	mov	r0, r2
 800e70a:	f7fe fd31 	bl	800d170 <move_window>
 800e70e:	4603      	mov	r3, r0
 800e710:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800e712:	7bfb      	ldrb	r3, [r7, #15]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d001      	beq.n	800e71c <load_xdir+0x110>
 800e718:	7bfb      	ldrb	r3, [r7, #15]
 800e71a:	e02e      	b.n	800e77a <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e720:	781b      	ldrb	r3, [r3, #0]
 800e722:	2bc1      	cmp	r3, #193	; 0xc1
 800e724:	d001      	beq.n	800e72a <load_xdir+0x11e>
 800e726:	2302      	movs	r3, #2
 800e728:	e027      	b.n	800e77a <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800e730:	d208      	bcs.n	800e744 <load_xdir+0x138>
 800e732:	693a      	ldr	r2, [r7, #16]
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	18d0      	adds	r0, r2, r3
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e73c:	2220      	movs	r2, #32
 800e73e:	4619      	mov	r1, r3
 800e740:	f7fe fae7 	bl	800cd12 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	3320      	adds	r3, #32
 800e748:	617b      	str	r3, [r7, #20]
 800e74a:	697a      	ldr	r2, [r7, #20]
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	429a      	cmp	r2, r3
 800e750:	d3ca      	bcc.n	800e6e8 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800e758:	d80e      	bhi.n	800e778 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800e75a:	6938      	ldr	r0, [r7, #16]
 800e75c:	f7ff feef 	bl	800e53e <xdir_sum>
 800e760:	4603      	mov	r3, r0
 800e762:	461c      	mov	r4, r3
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	3302      	adds	r3, #2
 800e768:	4618      	mov	r0, r3
 800e76a:	f7fe f8ed 	bl	800c948 <ld_word>
 800e76e:	4603      	mov	r3, r0
 800e770:	429c      	cmp	r4, r3
 800e772:	d001      	beq.n	800e778 <load_xdir+0x16c>
 800e774:	2302      	movs	r3, #2
 800e776:	e000      	b.n	800e77a <load_xdir+0x16e>
	}
	return FR_OK;
 800e778:	2300      	movs	r3, #0
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	371c      	adds	r7, #28
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd90      	pop	{r4, r7, pc}
 800e782:	bf00      	nop
 800e784:	88888889 	.word	0x88888889

0800e788 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800e788:	b5b0      	push	{r4, r5, r7, lr}
 800e78a:	b084      	sub	sp, #16
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800e792:	6839      	ldr	r1, [r7, #0]
 800e794:	6808      	ldr	r0, [r1, #0]
 800e796:	6879      	ldr	r1, [r7, #4]
 800e798:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800e79a:	6839      	ldr	r1, [r7, #0]
 800e79c:	6a08      	ldr	r0, [r1, #32]
 800e79e:	6879      	ldr	r1, [r7, #4]
 800e7a0:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800e7a2:	6839      	ldr	r1, [r7, #0]
 800e7a4:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800e7a6:	b2c8      	uxtb	r0, r1
 800e7a8:	6879      	ldr	r1, [r7, #4]
 800e7aa:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800e7ac:	6839      	ldr	r1, [r7, #0]
 800e7ae:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800e7b0:	2000      	movs	r0, #0
 800e7b2:	460c      	mov	r4, r1
 800e7b4:	4605      	mov	r5, r0
 800e7b6:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	6879      	ldr	r1, [r7, #4]
 800e7be:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f7ff fad2 	bl	800dd7a <dir_sdi>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e7da:	7bfb      	ldrb	r3, [r7, #15]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d104      	bne.n	800e7ea <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f7ff ff13 	bl	800e60c <load_xdir>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800e7ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3710      	adds	r7, #16
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bdb0      	pop	{r4, r5, r7, pc}

0800e7f4 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800e7f4:	b590      	push	{r4, r7, lr}
 800e7f6:	b087      	sub	sp, #28
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	691b      	ldr	r3, [r3, #16]
 800e802:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	1c9c      	adds	r4, r3, #2
 800e808:	68f8      	ldr	r0, [r7, #12]
 800e80a:	f7ff fe98 	bl	800e53e <xdir_sum>
 800e80e:	4603      	mov	r3, r0
 800e810:	4619      	mov	r1, r3
 800e812:	4620      	mov	r0, r4
 800e814:	f7fe f9ae 	bl	800cb74 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	3301      	adds	r3, #1
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	3301      	adds	r3, #1
 800e820:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e826:	4619      	mov	r1, r3
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f7ff faa6 	bl	800dd7a <dir_sdi>
 800e82e:	4603      	mov	r3, r0
 800e830:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800e832:	e026      	b.n	800e882 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681a      	ldr	r2, [r3, #0]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e83c:	4619      	mov	r1, r3
 800e83e:	4610      	mov	r0, r2
 800e840:	f7fe fc96 	bl	800d170 <move_window>
 800e844:	4603      	mov	r3, r0
 800e846:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e848:	7dfb      	ldrb	r3, [r7, #23]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d11d      	bne.n	800e88a <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e852:	2220      	movs	r2, #32
 800e854:	68f9      	ldr	r1, [r7, #12]
 800e856:	4618      	mov	r0, r3
 800e858:	f7fe fa5b 	bl	800cd12 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	2201      	movs	r2, #1
 800e862:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	3b01      	subs	r3, #1
 800e868:	613b      	str	r3, [r7, #16]
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d00e      	beq.n	800e88e <store_xdir+0x9a>
		dirb += SZDIRE;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	3320      	adds	r3, #32
 800e874:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800e876:	2100      	movs	r1, #0
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f7ff fb04 	bl	800de86 <dir_next>
 800e87e:	4603      	mov	r3, r0
 800e880:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800e882:	7dfb      	ldrb	r3, [r7, #23]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d0d5      	beq.n	800e834 <store_xdir+0x40>
 800e888:	e002      	b.n	800e890 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800e88a:	bf00      	nop
 800e88c:	e000      	b.n	800e890 <store_xdir+0x9c>
		if (--nent == 0) break;
 800e88e:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800e890:	7dfb      	ldrb	r3, [r7, #23]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d002      	beq.n	800e89c <store_xdir+0xa8>
 800e896:	7dfb      	ldrb	r3, [r7, #23]
 800e898:	2b01      	cmp	r3, #1
 800e89a:	d101      	bne.n	800e8a0 <store_xdir+0xac>
 800e89c:	7dfb      	ldrb	r3, [r7, #23]
 800e89e:	e000      	b.n	800e8a2 <store_xdir+0xae>
 800e8a0:	2302      	movs	r3, #2
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	371c      	adds	r7, #28
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd90      	pop	{r4, r7, pc}

0800e8aa <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800e8aa:	b590      	push	{r4, r7, lr}
 800e8ac:	b085      	sub	sp, #20
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	6078      	str	r0, [r7, #4]
 800e8b2:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800e8b4:	2240      	movs	r2, #64	; 0x40
 800e8b6:	2100      	movs	r1, #0
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f7fe fa4b 	bl	800cd54 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2285      	movs	r2, #133	; 0x85
 800e8c2:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	3320      	adds	r3, #32
 800e8c8:	22c0      	movs	r2, #192	; 0xc0
 800e8ca:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	72bb      	strb	r3, [r7, #10]
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	72fb      	strb	r3, [r7, #11]
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	813b      	strh	r3, [r7, #8]
 800e8d8:	2340      	movs	r3, #64	; 0x40
 800e8da:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	1c5a      	adds	r2, r3, #1
 800e8e0:	60fa      	str	r2, [r7, #12]
 800e8e2:	687a      	ldr	r2, [r7, #4]
 800e8e4:	4413      	add	r3, r2
 800e8e6:	22c1      	movs	r2, #193	; 0xc1
 800e8e8:	701a      	strb	r2, [r3, #0]
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	1c5a      	adds	r2, r3, #1
 800e8ee:	60fa      	str	r2, [r7, #12]
 800e8f0:	687a      	ldr	r2, [r7, #4]
 800e8f2:	4413      	add	r3, r2
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800e8f8:	893b      	ldrh	r3, [r7, #8]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d00b      	beq.n	800e916 <create_xdir+0x6c>
 800e8fe:	7abb      	ldrb	r3, [r7, #10]
 800e900:	005b      	lsls	r3, r3, #1
 800e902:	683a      	ldr	r2, [r7, #0]
 800e904:	4413      	add	r3, r2
 800e906:	881b      	ldrh	r3, [r3, #0]
 800e908:	813b      	strh	r3, [r7, #8]
 800e90a:	893b      	ldrh	r3, [r7, #8]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d002      	beq.n	800e916 <create_xdir+0x6c>
 800e910:	7abb      	ldrb	r3, [r7, #10]
 800e912:	3301      	adds	r3, #1
 800e914:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800e916:	687a      	ldr	r2, [r7, #4]
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	4413      	add	r3, r2
 800e91c:	893a      	ldrh	r2, [r7, #8]
 800e91e:	4611      	mov	r1, r2
 800e920:	4618      	mov	r0, r3
 800e922:	f7fe f927 	bl	800cb74 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	3302      	adds	r3, #2
 800e92a:	60fb      	str	r3, [r7, #12]
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	f003 031f 	and.w	r3, r3, #31
 800e932:	2b00      	cmp	r3, #0
 800e934:	d1e0      	bne.n	800e8f8 <create_xdir+0x4e>
		nb++;
 800e936:	7afb      	ldrb	r3, [r7, #11]
 800e938:	3301      	adds	r3, #1
 800e93a:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800e93c:	7abb      	ldrb	r3, [r7, #10]
 800e93e:	005b      	lsls	r3, r3, #1
 800e940:	683a      	ldr	r2, [r7, #0]
 800e942:	4413      	add	r3, r2
 800e944:	881b      	ldrh	r3, [r3, #0]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d1c8      	bne.n	800e8dc <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	3323      	adds	r3, #35	; 0x23
 800e94e:	7aba      	ldrb	r2, [r7, #10]
 800e950:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	3301      	adds	r3, #1
 800e956:	7afa      	ldrb	r2, [r7, #11]
 800e958:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800e960:	6838      	ldr	r0, [r7, #0]
 800e962:	f7ff fe1f 	bl	800e5a4 <xname_sum>
 800e966:	4603      	mov	r3, r0
 800e968:	4619      	mov	r1, r3
 800e96a:	4620      	mov	r0, r4
 800e96c:	f7fe f902 	bl	800cb74 <st_word>
}
 800e970:	bf00      	nop
 800e972:	3714      	adds	r7, #20
 800e974:	46bd      	mov	sp, r7
 800e976:	bd90      	pop	{r4, r7, pc}

0800e978 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b086      	sub	sp, #24
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e982:	2304      	movs	r3, #4
 800e984:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e98c:	23ff      	movs	r3, #255	; 0xff
 800e98e:	757b      	strb	r3, [r7, #21]
 800e990:	23ff      	movs	r3, #255	; 0xff
 800e992:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e994:	e09f      	b.n	800ead6 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e99a:	4619      	mov	r1, r3
 800e99c:	6938      	ldr	r0, [r7, #16]
 800e99e:	f7fe fbe7 	bl	800d170 <move_window>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e9a6:	7dfb      	ldrb	r3, [r7, #23]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	f040 809a 	bne.w	800eae2 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9b2:	781b      	ldrb	r3, [r3, #0]
 800e9b4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e9b6:	7dbb      	ldrb	r3, [r7, #22]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d102      	bne.n	800e9c2 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e9bc:	2304      	movs	r3, #4
 800e9be:	75fb      	strb	r3, [r7, #23]
 800e9c0:	e096      	b.n	800eaf0 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	2b04      	cmp	r3, #4
 800e9c8:	d118      	bne.n	800e9fc <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800e9ca:	7dbb      	ldrb	r3, [r7, #22]
 800e9cc:	2b85      	cmp	r3, #133	; 0x85
 800e9ce:	d179      	bne.n	800eac4 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f7ff fe17 	bl	800e60c <load_xdir>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800e9e2:	7dfb      	ldrb	r3, [r7, #23]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d17e      	bne.n	800eae6 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	691b      	ldr	r3, [r3, #16]
 800e9ec:	3304      	adds	r3, #4
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e9f4:	b2da      	uxtb	r2, r3
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	719a      	strb	r2, [r3, #6]
					}
					break;
 800e9fa:	e074      	b.n	800eae6 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea00:	330b      	adds	r3, #11
 800ea02:	781b      	ldrb	r3, [r3, #0]
 800ea04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea08:	73fb      	strb	r3, [r7, #15]
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	7bfa      	ldrb	r2, [r7, #15]
 800ea0e:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800ea10:	7dbb      	ldrb	r3, [r7, #22]
 800ea12:	2be5      	cmp	r3, #229	; 0xe5
 800ea14:	d00e      	beq.n	800ea34 <dir_read+0xbc>
 800ea16:	7dbb      	ldrb	r3, [r7, #22]
 800ea18:	2b2e      	cmp	r3, #46	; 0x2e
 800ea1a:	d00b      	beq.n	800ea34 <dir_read+0xbc>
 800ea1c:	7bfb      	ldrb	r3, [r7, #15]
 800ea1e:	f023 0320 	bic.w	r3, r3, #32
 800ea22:	2b08      	cmp	r3, #8
 800ea24:	bf0c      	ite	eq
 800ea26:	2301      	moveq	r3, #1
 800ea28:	2300      	movne	r3, #0
 800ea2a:	b2db      	uxtb	r3, r3
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d002      	beq.n	800ea3a <dir_read+0xc2>
				ord = 0xFF;
 800ea34:	23ff      	movs	r3, #255	; 0xff
 800ea36:	757b      	strb	r3, [r7, #21]
 800ea38:	e044      	b.n	800eac4 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800ea3a:	7bfb      	ldrb	r3, [r7, #15]
 800ea3c:	2b0f      	cmp	r3, #15
 800ea3e:	d12f      	bne.n	800eaa0 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ea40:	7dbb      	ldrb	r3, [r7, #22]
 800ea42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d00d      	beq.n	800ea66 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea4e:	7b5b      	ldrb	r3, [r3, #13]
 800ea50:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800ea52:	7dbb      	ldrb	r3, [r7, #22]
 800ea54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea58:	75bb      	strb	r3, [r7, #22]
 800ea5a:	7dbb      	ldrb	r3, [r7, #22]
 800ea5c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ea66:	7dba      	ldrb	r2, [r7, #22]
 800ea68:	7d7b      	ldrb	r3, [r7, #21]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d115      	bne.n	800ea9a <dir_read+0x122>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea72:	330d      	adds	r3, #13
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	7d3a      	ldrb	r2, [r7, #20]
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d10e      	bne.n	800ea9a <dir_read+0x122>
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	68da      	ldr	r2, [r3, #12]
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea84:	4619      	mov	r1, r3
 800ea86:	4610      	mov	r0, r2
 800ea88:	f7ff fbde 	bl	800e248 <pick_lfn>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d003      	beq.n	800ea9a <dir_read+0x122>
 800ea92:	7d7b      	ldrb	r3, [r7, #21]
 800ea94:	3b01      	subs	r3, #1
 800ea96:	b2db      	uxtb	r3, r3
 800ea98:	e000      	b.n	800ea9c <dir_read+0x124>
 800ea9a:	23ff      	movs	r3, #255	; 0xff
 800ea9c:	757b      	strb	r3, [r7, #21]
 800ea9e:	e011      	b.n	800eac4 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800eaa0:	7d7b      	ldrb	r3, [r7, #21]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d109      	bne.n	800eaba <dir_read+0x142>
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7ff fd26 	bl	800e4fc <sum_sfn>
 800eab0:	4603      	mov	r3, r0
 800eab2:	461a      	mov	r2, r3
 800eab4:	7d3b      	ldrb	r3, [r7, #20]
 800eab6:	4293      	cmp	r3, r2
 800eab8:	d017      	beq.n	800eaea <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f04f 32ff 	mov.w	r2, #4294967295
 800eac0:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800eac2:	e012      	b.n	800eaea <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800eac4:	2100      	movs	r1, #0
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f7ff f9dd 	bl	800de86 <dir_next>
 800eacc:	4603      	mov	r3, r0
 800eace:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ead0:	7dfb      	ldrb	r3, [r7, #23]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d10b      	bne.n	800eaee <dir_read+0x176>
	while (dp->sect) {
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eada:	2b00      	cmp	r3, #0
 800eadc:	f47f af5b 	bne.w	800e996 <dir_read+0x1e>
 800eae0:	e006      	b.n	800eaf0 <dir_read+0x178>
		if (res != FR_OK) break;
 800eae2:	bf00      	nop
 800eae4:	e004      	b.n	800eaf0 <dir_read+0x178>
					break;
 800eae6:	bf00      	nop
 800eae8:	e002      	b.n	800eaf0 <dir_read+0x178>
					break;
 800eaea:	bf00      	nop
 800eaec:	e000      	b.n	800eaf0 <dir_read+0x178>
		if (res != FR_OK) break;
 800eaee:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800eaf0:	7dfb      	ldrb	r3, [r7, #23]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d002      	beq.n	800eafc <dir_read+0x184>
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800eafc:	7dfb      	ldrb	r3, [r7, #23]
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3718      	adds	r7, #24
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}

0800eb06 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800eb06:	b590      	push	{r4, r7, lr}
 800eb08:	b089      	sub	sp, #36	; 0x24
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800eb14:	2100      	movs	r1, #0
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f7ff f92f 	bl	800dd7a <dir_sdi>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800eb20:	7ffb      	ldrb	r3, [r7, #31]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d001      	beq.n	800eb2a <dir_find+0x24>
 800eb26:	7ffb      	ldrb	r3, [r7, #31]
 800eb28:	e112      	b.n	800ed50 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	2b04      	cmp	r3, #4
 800eb30:	d164      	bne.n	800ebfc <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	68db      	ldr	r3, [r3, #12]
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7ff fd34 	bl	800e5a4 <xname_sum>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800eb40:	e04f      	b.n	800ebe2 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	691b      	ldr	r3, [r3, #16]
 800eb46:	3324      	adds	r3, #36	; 0x24
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7fd fefd 	bl	800c948 <ld_word>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	461a      	mov	r2, r3
 800eb52:	893b      	ldrh	r3, [r7, #8]
 800eb54:	4293      	cmp	r3, r2
 800eb56:	d000      	beq.n	800eb5a <dir_find+0x54>
 800eb58:	e043      	b.n	800ebe2 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	691b      	ldr	r3, [r3, #16]
 800eb5e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800eb62:	76fb      	strb	r3, [r7, #27]
 800eb64:	2340      	movs	r3, #64	; 0x40
 800eb66:	617b      	str	r3, [r7, #20]
 800eb68:	2300      	movs	r3, #0
 800eb6a:	613b      	str	r3, [r7, #16]
 800eb6c:	e029      	b.n	800ebc2 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	f003 031f 	and.w	r3, r3, #31
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d102      	bne.n	800eb7e <dir_find+0x78>
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	3302      	adds	r3, #2
 800eb7c:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	691a      	ldr	r2, [r3, #16]
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	4413      	add	r3, r2
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7fd fede 	bl	800c948 <ld_word>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f002 fc8e 	bl	80114b0 <ff_wtoupper>
 800eb94:	4603      	mov	r3, r0
 800eb96:	461c      	mov	r4, r3
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	68da      	ldr	r2, [r3, #12]
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	005b      	lsls	r3, r3, #1
 800eba0:	4413      	add	r3, r2
 800eba2:	881b      	ldrh	r3, [r3, #0]
 800eba4:	4618      	mov	r0, r3
 800eba6:	f002 fc83 	bl	80114b0 <ff_wtoupper>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	429c      	cmp	r4, r3
 800ebae:	d10c      	bne.n	800ebca <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800ebb0:	7efb      	ldrb	r3, [r7, #27]
 800ebb2:	3b01      	subs	r3, #1
 800ebb4:	76fb      	strb	r3, [r7, #27]
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	3302      	adds	r3, #2
 800ebba:	617b      	str	r3, [r7, #20]
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	3301      	adds	r3, #1
 800ebc0:	613b      	str	r3, [r7, #16]
 800ebc2:	7efb      	ldrb	r3, [r7, #27]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d1d2      	bne.n	800eb6e <dir_find+0x68>
 800ebc8:	e000      	b.n	800ebcc <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800ebca:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800ebcc:	7efb      	ldrb	r3, [r7, #27]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d107      	bne.n	800ebe2 <dir_find+0xdc>
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	68da      	ldr	r2, [r3, #12]
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	005b      	lsls	r3, r3, #1
 800ebda:	4413      	add	r3, r2
 800ebdc:	881b      	ldrh	r3, [r3, #0]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d009      	beq.n	800ebf6 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800ebe2:	2100      	movs	r1, #0
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f7ff fec7 	bl	800e978 <dir_read>
 800ebea:	4603      	mov	r3, r0
 800ebec:	77fb      	strb	r3, [r7, #31]
 800ebee:	7ffb      	ldrb	r3, [r7, #31]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d0a6      	beq.n	800eb42 <dir_find+0x3c>
 800ebf4:	e000      	b.n	800ebf8 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800ebf6:	bf00      	nop
		}
		return res;
 800ebf8:	7ffb      	ldrb	r3, [r7, #31]
 800ebfa:	e0a9      	b.n	800ed50 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ebfc:	23ff      	movs	r3, #255	; 0xff
 800ebfe:	773b      	strb	r3, [r7, #28]
 800ec00:	7f3b      	ldrb	r3, [r7, #28]
 800ec02:	777b      	strb	r3, [r7, #29]
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f04f 32ff 	mov.w	r2, #4294967295
 800ec0a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec10:	4619      	mov	r1, r3
 800ec12:	68f8      	ldr	r0, [r7, #12]
 800ec14:	f7fe faac 	bl	800d170 <move_window>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800ec1c:	7ffb      	ldrb	r3, [r7, #31]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	f040 8090 	bne.w	800ed44 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec28:	781b      	ldrb	r3, [r3, #0]
 800ec2a:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ec2c:	7fbb      	ldrb	r3, [r7, #30]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d102      	bne.n	800ec38 <dir_find+0x132>
 800ec32:	2304      	movs	r3, #4
 800ec34:	77fb      	strb	r3, [r7, #31]
 800ec36:	e08a      	b.n	800ed4e <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec3c:	330b      	adds	r3, #11
 800ec3e:	781b      	ldrb	r3, [r3, #0]
 800ec40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ec44:	72fb      	strb	r3, [r7, #11]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	7afa      	ldrb	r2, [r7, #11]
 800ec4a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ec4c:	7fbb      	ldrb	r3, [r7, #30]
 800ec4e:	2be5      	cmp	r3, #229	; 0xe5
 800ec50:	d007      	beq.n	800ec62 <dir_find+0x15c>
 800ec52:	7afb      	ldrb	r3, [r7, #11]
 800ec54:	f003 0308 	and.w	r3, r3, #8
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d009      	beq.n	800ec70 <dir_find+0x16a>
 800ec5c:	7afb      	ldrb	r3, [r7, #11]
 800ec5e:	2b0f      	cmp	r3, #15
 800ec60:	d006      	beq.n	800ec70 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ec62:	23ff      	movs	r3, #255	; 0xff
 800ec64:	777b      	strb	r3, [r7, #29]
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f04f 32ff 	mov.w	r2, #4294967295
 800ec6c:	64da      	str	r2, [r3, #76]	; 0x4c
 800ec6e:	e05e      	b.n	800ed2e <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ec70:	7afb      	ldrb	r3, [r7, #11]
 800ec72:	2b0f      	cmp	r3, #15
 800ec74:	d136      	bne.n	800ece4 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ec7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d154      	bne.n	800ed2e <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ec84:	7fbb      	ldrb	r3, [r7, #30]
 800ec86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d00d      	beq.n	800ecaa <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec92:	7b5b      	ldrb	r3, [r3, #13]
 800ec94:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ec96:	7fbb      	ldrb	r3, [r7, #30]
 800ec98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec9c:	77bb      	strb	r3, [r7, #30]
 800ec9e:	7fbb      	ldrb	r3, [r7, #30]
 800eca0:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ecaa:	7fba      	ldrb	r2, [r7, #30]
 800ecac:	7f7b      	ldrb	r3, [r7, #29]
 800ecae:	429a      	cmp	r2, r3
 800ecb0:	d115      	bne.n	800ecde <dir_find+0x1d8>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecb6:	330d      	adds	r3, #13
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	7f3a      	ldrb	r2, [r7, #28]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d10e      	bne.n	800ecde <dir_find+0x1d8>
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	68da      	ldr	r2, [r3, #12]
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecc8:	4619      	mov	r1, r3
 800ecca:	4610      	mov	r0, r2
 800eccc:	f7ff fa4c 	bl	800e168 <cmp_lfn>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d003      	beq.n	800ecde <dir_find+0x1d8>
 800ecd6:	7f7b      	ldrb	r3, [r7, #29]
 800ecd8:	3b01      	subs	r3, #1
 800ecda:	b2db      	uxtb	r3, r3
 800ecdc:	e000      	b.n	800ece0 <dir_find+0x1da>
 800ecde:	23ff      	movs	r3, #255	; 0xff
 800ece0:	777b      	strb	r3, [r7, #29]
 800ece2:	e024      	b.n	800ed2e <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ece4:	7f7b      	ldrb	r3, [r7, #29]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d109      	bne.n	800ecfe <dir_find+0x1f8>
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f7ff fc04 	bl	800e4fc <sum_sfn>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	461a      	mov	r2, r3
 800ecf8:	7f3b      	ldrb	r3, [r7, #28]
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d024      	beq.n	800ed48 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ed04:	f003 0301 	and.w	r3, r3, #1
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d10a      	bne.n	800ed22 <dir_find+0x21c>
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	3340      	adds	r3, #64	; 0x40
 800ed14:	220b      	movs	r2, #11
 800ed16:	4619      	mov	r1, r3
 800ed18:	f7fe f837 	bl	800cd8a <mem_cmp>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d014      	beq.n	800ed4c <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ed22:	23ff      	movs	r3, #255	; 0xff
 800ed24:	777b      	strb	r3, [r7, #29]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f04f 32ff 	mov.w	r2, #4294967295
 800ed2c:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ed2e:	2100      	movs	r1, #0
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f7ff f8a8 	bl	800de86 <dir_next>
 800ed36:	4603      	mov	r3, r0
 800ed38:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800ed3a:	7ffb      	ldrb	r3, [r7, #31]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	f43f af65 	beq.w	800ec0c <dir_find+0x106>
 800ed42:	e004      	b.n	800ed4e <dir_find+0x248>
		if (res != FR_OK) break;
 800ed44:	bf00      	nop
 800ed46:	e002      	b.n	800ed4e <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ed48:	bf00      	nop
 800ed4a:	e000      	b.n	800ed4e <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ed4c:	bf00      	nop

	return res;
 800ed4e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	3724      	adds	r7, #36	; 0x24
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd90      	pop	{r4, r7, pc}

0800ed58 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ed58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ed5c:	b0a0      	sub	sp, #128	; 0x80
 800ed5e:	af00      	add	r7, sp, #0
 800ed60:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ed6e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d001      	beq.n	800ed7a <dir_register+0x22>
 800ed76:	2306      	movs	r3, #6
 800ed78:	e18e      	b.n	800f098 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	677b      	str	r3, [r7, #116]	; 0x74
 800ed7e:	e002      	b.n	800ed86 <dir_register+0x2e>
 800ed80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ed82:	3301      	adds	r3, #1
 800ed84:	677b      	str	r3, [r7, #116]	; 0x74
 800ed86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed88:	68da      	ldr	r2, [r3, #12]
 800ed8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ed8c:	005b      	lsls	r3, r3, #1
 800ed8e:	4413      	add	r3, r2
 800ed90:	881b      	ldrh	r3, [r3, #0]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d1f4      	bne.n	800ed80 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ed96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	2b04      	cmp	r3, #4
 800ed9c:	f040 809f 	bne.w	800eede <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800eda0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eda2:	330e      	adds	r3, #14
 800eda4:	4aa2      	ldr	r2, [pc, #648]	; (800f030 <dir_register+0x2d8>)
 800eda6:	fba2 2303 	umull	r2, r3, r2, r3
 800edaa:	08db      	lsrs	r3, r3, #3
 800edac:	3302      	adds	r3, #2
 800edae:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800edb0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f7ff f93c 	bl	800e030 <dir_alloc>
 800edb8:	4603      	mov	r3, r0
 800edba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800edbe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d002      	beq.n	800edcc <dir_register+0x74>
 800edc6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800edca:	e165      	b.n	800f098 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800edd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800edd2:	3b01      	subs	r3, #1
 800edd4:	015b      	lsls	r3, r3, #5
 800edd6:	1ad2      	subs	r2, r2, r3
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	689b      	ldr	r3, [r3, #8]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d072      	beq.n	800eeca <dir_register+0x172>
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	79db      	ldrb	r3, [r3, #7]
 800ede8:	f003 0304 	and.w	r3, r3, #4
 800edec:	2b00      	cmp	r3, #0
 800edee:	d06c      	beq.n	800eeca <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800edf6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800edf8:	8949      	ldrh	r1, [r1, #10]
 800edfa:	0249      	lsls	r1, r1, #9
 800edfc:	2000      	movs	r0, #0
 800edfe:	460c      	mov	r4, r1
 800ee00:	4605      	mov	r5, r0
 800ee02:	eb12 0804 	adds.w	r8, r2, r4
 800ee06:	eb43 0905 	adc.w	r9, r3, r5
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	4618      	mov	r0, r3
 800ee14:	f7fe fd58 	bl	800d8c8 <fill_first_frag>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ee1e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d002      	beq.n	800ee2c <dir_register+0xd4>
 800ee26:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ee2a:	e135      	b.n	800f098 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee32:	f04f 32ff 	mov.w	r2, #4294967295
 800ee36:	4619      	mov	r1, r3
 800ee38:	f7fe fd75 	bl	800d926 <fill_last_frag>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ee42:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d002      	beq.n	800ee50 <dir_register+0xf8>
 800ee4a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ee4e:	e123      	b.n	800f098 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800ee50:	687a      	ldr	r2, [r7, #4]
 800ee52:	f107 0308 	add.w	r3, r7, #8
 800ee56:	4611      	mov	r1, r2
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7ff fc95 	bl	800e788 <load_obj_dir>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ee64:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d002      	beq.n	800ee72 <dir_register+0x11a>
 800ee6c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ee70:	e112      	b.n	800f098 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800ee72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee74:	691b      	ldr	r3, [r3, #16]
 800ee76:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ee80:	4608      	mov	r0, r1
 800ee82:	f7fd febe 	bl	800cc02 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800ee86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee88:	691b      	ldr	r3, [r3, #16]
 800ee8a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ee94:	4608      	mov	r0, r1
 800ee96:	f7fd feb4 	bl	800cc02 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	79da      	ldrb	r2, [r3, #7]
 800ee9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eea0:	691b      	ldr	r3, [r3, #16]
 800eea2:	3321      	adds	r3, #33	; 0x21
 800eea4:	f042 0201 	orr.w	r2, r2, #1
 800eea8:	b2d2      	uxtb	r2, r2
 800eeaa:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800eeac:	f107 0308 	add.w	r3, r7, #8
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7ff fc9f 	bl	800e7f4 <store_xdir>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800eebc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d002      	beq.n	800eeca <dir_register+0x172>
 800eec4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eec8:	e0e6      	b.n	800f098 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800eeca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eecc:	691a      	ldr	r2, [r3, #16]
 800eece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eed0:	68db      	ldr	r3, [r3, #12]
 800eed2:	4619      	mov	r1, r3
 800eed4:	4610      	mov	r0, r2
 800eed6:	f7ff fce8 	bl	800e8aa <create_xdir>
		return FR_OK;
 800eeda:	2300      	movs	r3, #0
 800eedc:	e0dc      	b.n	800f098 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800eee4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800eee8:	220c      	movs	r2, #12
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7fd ff11 	bl	800cd12 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800eef0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eef4:	f003 0301 	and.w	r3, r3, #1
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d033      	beq.n	800ef64 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2240      	movs	r2, #64	; 0x40
 800ef00:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800ef04:	2301      	movs	r3, #1
 800ef06:	67bb      	str	r3, [r7, #120]	; 0x78
 800ef08:	e016      	b.n	800ef38 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800ef10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef12:	68da      	ldr	r2, [r3, #12]
 800ef14:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800ef18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef1a:	f7ff fa61 	bl	800e3e0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ef1e:	6878      	ldr	r0, [r7, #4]
 800ef20:	f7ff fdf1 	bl	800eb06 <dir_find>
 800ef24:	4603      	mov	r3, r0
 800ef26:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800ef2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d106      	bne.n	800ef40 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800ef32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef34:	3301      	adds	r3, #1
 800ef36:	67bb      	str	r3, [r7, #120]	; 0x78
 800ef38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef3a:	2b63      	cmp	r3, #99	; 0x63
 800ef3c:	d9e5      	bls.n	800ef0a <dir_register+0x1b2>
 800ef3e:	e000      	b.n	800ef42 <dir_register+0x1ea>
			if (res != FR_OK) break;
 800ef40:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ef42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef44:	2b64      	cmp	r3, #100	; 0x64
 800ef46:	d101      	bne.n	800ef4c <dir_register+0x1f4>
 800ef48:	2307      	movs	r3, #7
 800ef4a:	e0a5      	b.n	800f098 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ef4c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ef50:	2b04      	cmp	r3, #4
 800ef52:	d002      	beq.n	800ef5a <dir_register+0x202>
 800ef54:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ef58:	e09e      	b.n	800f098 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ef5a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ef64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ef68:	f003 0302 	and.w	r3, r3, #2
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d007      	beq.n	800ef80 <dir_register+0x228>
 800ef70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef72:	330c      	adds	r3, #12
 800ef74:	4a2f      	ldr	r2, [pc, #188]	; (800f034 <dir_register+0x2dc>)
 800ef76:	fba2 2303 	umull	r2, r3, r2, r3
 800ef7a:	089b      	lsrs	r3, r3, #2
 800ef7c:	3301      	adds	r3, #1
 800ef7e:	e000      	b.n	800ef82 <dir_register+0x22a>
 800ef80:	2301      	movs	r3, #1
 800ef82:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ef84:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	f7ff f852 	bl	800e030 <dir_alloc>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ef92:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d14f      	bne.n	800f03a <dir_register+0x2e2>
 800ef9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ef9c:	3b01      	subs	r3, #1
 800ef9e:	673b      	str	r3, [r7, #112]	; 0x70
 800efa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d049      	beq.n	800f03a <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800efaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800efac:	015b      	lsls	r3, r3, #5
 800efae:	1ad3      	subs	r3, r2, r3
 800efb0:	4619      	mov	r1, r3
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f7fe fee1 	bl	800dd7a <dir_sdi>
 800efb8:	4603      	mov	r3, r0
 800efba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800efbe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d139      	bne.n	800f03a <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	3340      	adds	r3, #64	; 0x40
 800efca:	4618      	mov	r0, r3
 800efcc:	f7ff fa96 	bl	800e4fc <sum_sfn>
 800efd0:	4603      	mov	r3, r0
 800efd2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efda:	4619      	mov	r1, r3
 800efdc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800efde:	f7fe f8c7 	bl	800d170 <move_window>
 800efe2:	4603      	mov	r3, r0
 800efe4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800efe8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800efec:	2b00      	cmp	r3, #0
 800efee:	d123      	bne.n	800f038 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800eff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eff2:	68d8      	ldr	r0, [r3, #12]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800eff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800effa:	b2da      	uxtb	r2, r3
 800effc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f000:	f7ff f986 	bl	800e310 <put_lfn>
				fs->wflag = 1;
 800f004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f006:	2201      	movs	r2, #1
 800f008:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f00a:	2100      	movs	r1, #0
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f7fe ff3a 	bl	800de86 <dir_next>
 800f012:	4603      	mov	r3, r0
 800f014:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800f018:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d10c      	bne.n	800f03a <dir_register+0x2e2>
 800f020:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f022:	3b01      	subs	r3, #1
 800f024:	673b      	str	r3, [r7, #112]	; 0x70
 800f026:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d1d4      	bne.n	800efd6 <dir_register+0x27e>
 800f02c:	e005      	b.n	800f03a <dir_register+0x2e2>
 800f02e:	bf00      	nop
 800f030:	88888889 	.word	0x88888889
 800f034:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800f038:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f03a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d128      	bne.n	800f094 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f046:	4619      	mov	r1, r3
 800f048:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f04a:	f7fe f891 	bl	800d170 <move_window>
 800f04e:	4603      	mov	r3, r0
 800f050:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800f054:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d11b      	bne.n	800f094 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f060:	2220      	movs	r2, #32
 800f062:	2100      	movs	r1, #0
 800f064:	4618      	mov	r0, r3
 800f066:	f7fd fe75 	bl	800cd54 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	3340      	adds	r3, #64	; 0x40
 800f072:	220b      	movs	r2, #11
 800f074:	4619      	mov	r1, r3
 800f076:	f7fd fe4c 	bl	800cd12 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f084:	330c      	adds	r3, #12
 800f086:	f002 0218 	and.w	r2, r2, #24
 800f08a:	b2d2      	uxtb	r2, r2
 800f08c:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f08e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f090:	2201      	movs	r2, #1
 800f092:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f094:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3780      	adds	r7, #128	; 0x80
 800f09c:	46bd      	mov	sp, r7
 800f09e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800f0a2:	bf00      	nop

0800f0a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b08a      	sub	sp, #40	; 0x28
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	613b      	str	r3, [r7, #16]
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	68db      	ldr	r3, [r3, #12]
 800f0ba:	60fb      	str	r3, [r7, #12]
 800f0bc:	2300      	movs	r3, #0
 800f0be:	617b      	str	r3, [r7, #20]
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f0c4:	69bb      	ldr	r3, [r7, #24]
 800f0c6:	1c5a      	adds	r2, r3, #1
 800f0c8:	61ba      	str	r2, [r7, #24]
 800f0ca:	693a      	ldr	r2, [r7, #16]
 800f0cc:	4413      	add	r3, r2
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f0d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0d4:	2b1f      	cmp	r3, #31
 800f0d6:	d940      	bls.n	800f15a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f0d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0da:	2b2f      	cmp	r3, #47	; 0x2f
 800f0dc:	d006      	beq.n	800f0ec <create_name+0x48>
 800f0de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0e0:	2b5c      	cmp	r3, #92	; 0x5c
 800f0e2:	d110      	bne.n	800f106 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f0e4:	e002      	b.n	800f0ec <create_name+0x48>
 800f0e6:	69bb      	ldr	r3, [r7, #24]
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	61bb      	str	r3, [r7, #24]
 800f0ec:	693a      	ldr	r2, [r7, #16]
 800f0ee:	69bb      	ldr	r3, [r7, #24]
 800f0f0:	4413      	add	r3, r2
 800f0f2:	781b      	ldrb	r3, [r3, #0]
 800f0f4:	2b2f      	cmp	r3, #47	; 0x2f
 800f0f6:	d0f6      	beq.n	800f0e6 <create_name+0x42>
 800f0f8:	693a      	ldr	r2, [r7, #16]
 800f0fa:	69bb      	ldr	r3, [r7, #24]
 800f0fc:	4413      	add	r3, r2
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	2b5c      	cmp	r3, #92	; 0x5c
 800f102:	d0f0      	beq.n	800f0e6 <create_name+0x42>
			break;
 800f104:	e02a      	b.n	800f15c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	2bfe      	cmp	r3, #254	; 0xfe
 800f10a:	d901      	bls.n	800f110 <create_name+0x6c>
 800f10c:	2306      	movs	r3, #6
 800f10e:	e17d      	b.n	800f40c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f110:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f112:	b2db      	uxtb	r3, r3
 800f114:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f116:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f118:	2101      	movs	r1, #1
 800f11a:	4618      	mov	r0, r3
 800f11c:	f002 f98c 	bl	8011438 <ff_convert>
 800f120:	4603      	mov	r3, r0
 800f122:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f124:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f126:	2b00      	cmp	r3, #0
 800f128:	d101      	bne.n	800f12e <create_name+0x8a>
 800f12a:	2306      	movs	r3, #6
 800f12c:	e16e      	b.n	800f40c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f12e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f130:	2b7f      	cmp	r3, #127	; 0x7f
 800f132:	d809      	bhi.n	800f148 <create_name+0xa4>
 800f134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f136:	4619      	mov	r1, r3
 800f138:	488d      	ldr	r0, [pc, #564]	; (800f370 <create_name+0x2cc>)
 800f13a:	f7fd fe4d 	bl	800cdd8 <chk_chr>
 800f13e:	4603      	mov	r3, r0
 800f140:	2b00      	cmp	r3, #0
 800f142:	d001      	beq.n	800f148 <create_name+0xa4>
 800f144:	2306      	movs	r3, #6
 800f146:	e161      	b.n	800f40c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	1c5a      	adds	r2, r3, #1
 800f14c:	617a      	str	r2, [r7, #20]
 800f14e:	005b      	lsls	r3, r3, #1
 800f150:	68fa      	ldr	r2, [r7, #12]
 800f152:	4413      	add	r3, r2
 800f154:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f156:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f158:	e7b4      	b.n	800f0c4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f15a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f15c:	693a      	ldr	r2, [r7, #16]
 800f15e:	69bb      	ldr	r3, [r7, #24]
 800f160:	441a      	add	r2, r3
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f166:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f168:	2b1f      	cmp	r3, #31
 800f16a:	d801      	bhi.n	800f170 <create_name+0xcc>
 800f16c:	2304      	movs	r3, #4
 800f16e:	e000      	b.n	800f172 <create_name+0xce>
 800f170:	2300      	movs	r3, #0
 800f172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f176:	e011      	b.n	800f19c <create_name+0xf8>
		w = lfn[di - 1];
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f17e:	3b01      	subs	r3, #1
 800f180:	005b      	lsls	r3, r3, #1
 800f182:	68fa      	ldr	r2, [r7, #12]
 800f184:	4413      	add	r3, r2
 800f186:	881b      	ldrh	r3, [r3, #0]
 800f188:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f18a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f18c:	2b20      	cmp	r3, #32
 800f18e:	d002      	beq.n	800f196 <create_name+0xf2>
 800f190:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f192:	2b2e      	cmp	r3, #46	; 0x2e
 800f194:	d106      	bne.n	800f1a4 <create_name+0x100>
		di--;
 800f196:	697b      	ldr	r3, [r7, #20]
 800f198:	3b01      	subs	r3, #1
 800f19a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d1ea      	bne.n	800f178 <create_name+0xd4>
 800f1a2:	e000      	b.n	800f1a6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800f1a4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	005b      	lsls	r3, r3, #1
 800f1aa:	68fa      	ldr	r2, [r7, #12]
 800f1ac:	4413      	add	r3, r2
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d101      	bne.n	800f1bc <create_name+0x118>
 800f1b8:	2306      	movs	r3, #6
 800f1ba:	e127      	b.n	800f40c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	3340      	adds	r3, #64	; 0x40
 800f1c0:	220b      	movs	r2, #11
 800f1c2:	2120      	movs	r1, #32
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f7fd fdc5 	bl	800cd54 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	61bb      	str	r3, [r7, #24]
 800f1ce:	e002      	b.n	800f1d6 <create_name+0x132>
 800f1d0:	69bb      	ldr	r3, [r7, #24]
 800f1d2:	3301      	adds	r3, #1
 800f1d4:	61bb      	str	r3, [r7, #24]
 800f1d6:	69bb      	ldr	r3, [r7, #24]
 800f1d8:	005b      	lsls	r3, r3, #1
 800f1da:	68fa      	ldr	r2, [r7, #12]
 800f1dc:	4413      	add	r3, r2
 800f1de:	881b      	ldrh	r3, [r3, #0]
 800f1e0:	2b20      	cmp	r3, #32
 800f1e2:	d0f5      	beq.n	800f1d0 <create_name+0x12c>
 800f1e4:	69bb      	ldr	r3, [r7, #24]
 800f1e6:	005b      	lsls	r3, r3, #1
 800f1e8:	68fa      	ldr	r2, [r7, #12]
 800f1ea:	4413      	add	r3, r2
 800f1ec:	881b      	ldrh	r3, [r3, #0]
 800f1ee:	2b2e      	cmp	r3, #46	; 0x2e
 800f1f0:	d0ee      	beq.n	800f1d0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f1f2:	69bb      	ldr	r3, [r7, #24]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d009      	beq.n	800f20c <create_name+0x168>
 800f1f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1fc:	f043 0303 	orr.w	r3, r3, #3
 800f200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f204:	e002      	b.n	800f20c <create_name+0x168>
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	3b01      	subs	r3, #1
 800f20a:	617b      	str	r3, [r7, #20]
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d009      	beq.n	800f226 <create_name+0x182>
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f218:	3b01      	subs	r3, #1
 800f21a:	005b      	lsls	r3, r3, #1
 800f21c:	68fa      	ldr	r2, [r7, #12]
 800f21e:	4413      	add	r3, r2
 800f220:	881b      	ldrh	r3, [r3, #0]
 800f222:	2b2e      	cmp	r3, #46	; 0x2e
 800f224:	d1ef      	bne.n	800f206 <create_name+0x162>

	i = b = 0; ni = 8;
 800f226:	2300      	movs	r3, #0
 800f228:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f22c:	2300      	movs	r3, #0
 800f22e:	623b      	str	r3, [r7, #32]
 800f230:	2308      	movs	r3, #8
 800f232:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f234:	69bb      	ldr	r3, [r7, #24]
 800f236:	1c5a      	adds	r2, r3, #1
 800f238:	61ba      	str	r2, [r7, #24]
 800f23a:	005b      	lsls	r3, r3, #1
 800f23c:	68fa      	ldr	r2, [r7, #12]
 800f23e:	4413      	add	r3, r2
 800f240:	881b      	ldrh	r3, [r3, #0]
 800f242:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f244:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f246:	2b00      	cmp	r3, #0
 800f248:	f000 8090 	beq.w	800f36c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f24c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f24e:	2b20      	cmp	r3, #32
 800f250:	d006      	beq.n	800f260 <create_name+0x1bc>
 800f252:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f254:	2b2e      	cmp	r3, #46	; 0x2e
 800f256:	d10a      	bne.n	800f26e <create_name+0x1ca>
 800f258:	69ba      	ldr	r2, [r7, #24]
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d006      	beq.n	800f26e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f264:	f043 0303 	orr.w	r3, r3, #3
 800f268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f26c:	e07d      	b.n	800f36a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f26e:	6a3a      	ldr	r2, [r7, #32]
 800f270:	69fb      	ldr	r3, [r7, #28]
 800f272:	429a      	cmp	r2, r3
 800f274:	d203      	bcs.n	800f27e <create_name+0x1da>
 800f276:	69ba      	ldr	r2, [r7, #24]
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d123      	bne.n	800f2c6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f27e:	69fb      	ldr	r3, [r7, #28]
 800f280:	2b0b      	cmp	r3, #11
 800f282:	d106      	bne.n	800f292 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f288:	f043 0303 	orr.w	r3, r3, #3
 800f28c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f290:	e075      	b.n	800f37e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f292:	69ba      	ldr	r2, [r7, #24]
 800f294:	697b      	ldr	r3, [r7, #20]
 800f296:	429a      	cmp	r2, r3
 800f298:	d005      	beq.n	800f2a6 <create_name+0x202>
 800f29a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f29e:	f043 0303 	orr.w	r3, r3, #3
 800f2a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f2a6:	69ba      	ldr	r2, [r7, #24]
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d866      	bhi.n	800f37c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	61bb      	str	r3, [r7, #24]
 800f2b2:	2308      	movs	r3, #8
 800f2b4:	623b      	str	r3, [r7, #32]
 800f2b6:	230b      	movs	r3, #11
 800f2b8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f2ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2be:	009b      	lsls	r3, r3, #2
 800f2c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f2c4:	e051      	b.n	800f36a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f2c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2c8:	2b7f      	cmp	r3, #127	; 0x7f
 800f2ca:	d914      	bls.n	800f2f6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f2cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2ce:	2100      	movs	r1, #0
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f002 f8b1 	bl	8011438 <ff_convert>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f2da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d004      	beq.n	800f2ea <create_name+0x246>
 800f2e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2e2:	3b80      	subs	r3, #128	; 0x80
 800f2e4:	4a23      	ldr	r2, [pc, #140]	; (800f374 <create_name+0x2d0>)
 800f2e6:	5cd3      	ldrb	r3, [r2, r3]
 800f2e8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f2ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2ee:	f043 0302 	orr.w	r3, r3, #2
 800f2f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f2f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d007      	beq.n	800f30c <create_name+0x268>
 800f2fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2fe:	4619      	mov	r1, r3
 800f300:	481d      	ldr	r0, [pc, #116]	; (800f378 <create_name+0x2d4>)
 800f302:	f7fd fd69 	bl	800cdd8 <chk_chr>
 800f306:	4603      	mov	r3, r0
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d008      	beq.n	800f31e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f30c:	235f      	movs	r3, #95	; 0x5f
 800f30e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f314:	f043 0303 	orr.w	r3, r3, #3
 800f318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f31c:	e01b      	b.n	800f356 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f31e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f320:	2b40      	cmp	r3, #64	; 0x40
 800f322:	d909      	bls.n	800f338 <create_name+0x294>
 800f324:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f326:	2b5a      	cmp	r3, #90	; 0x5a
 800f328:	d806      	bhi.n	800f338 <create_name+0x294>
					b |= 2;
 800f32a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f32e:	f043 0302 	orr.w	r3, r3, #2
 800f332:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f336:	e00e      	b.n	800f356 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f338:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f33a:	2b60      	cmp	r3, #96	; 0x60
 800f33c:	d90b      	bls.n	800f356 <create_name+0x2b2>
 800f33e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f340:	2b7a      	cmp	r3, #122	; 0x7a
 800f342:	d808      	bhi.n	800f356 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f344:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f348:	f043 0301 	orr.w	r3, r3, #1
 800f34c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f350:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f352:	3b20      	subs	r3, #32
 800f354:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f356:	6a3b      	ldr	r3, [r7, #32]
 800f358:	1c5a      	adds	r2, r3, #1
 800f35a:	623a      	str	r2, [r7, #32]
 800f35c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f35e:	b2d1      	uxtb	r1, r2
 800f360:	687a      	ldr	r2, [r7, #4]
 800f362:	4413      	add	r3, r2
 800f364:	460a      	mov	r2, r1
 800f366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800f36a:	e763      	b.n	800f234 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f36c:	bf00      	nop
 800f36e:	e006      	b.n	800f37e <create_name+0x2da>
 800f370:	08016f7c 	.word	0x08016f7c
 800f374:	08017004 	.word	0x08017004
 800f378:	08016f88 	.word	0x08016f88
			if (si > di) break;			/* No extension */
 800f37c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f384:	2be5      	cmp	r3, #229	; 0xe5
 800f386:	d103      	bne.n	800f390 <create_name+0x2ec>
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2205      	movs	r2, #5
 800f38c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800f390:	69fb      	ldr	r3, [r7, #28]
 800f392:	2b08      	cmp	r3, #8
 800f394:	d104      	bne.n	800f3a0 <create_name+0x2fc>
 800f396:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f39a:	009b      	lsls	r3, r3, #2
 800f39c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f3a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f3a4:	f003 030c 	and.w	r3, r3, #12
 800f3a8:	2b0c      	cmp	r3, #12
 800f3aa:	d005      	beq.n	800f3b8 <create_name+0x314>
 800f3ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f3b0:	f003 0303 	and.w	r3, r3, #3
 800f3b4:	2b03      	cmp	r3, #3
 800f3b6:	d105      	bne.n	800f3c4 <create_name+0x320>
 800f3b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3bc:	f043 0302 	orr.w	r3, r3, #2
 800f3c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f3c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3c8:	f003 0302 	and.w	r3, r3, #2
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d117      	bne.n	800f400 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f3d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f3d4:	f003 0303 	and.w	r3, r3, #3
 800f3d8:	2b01      	cmp	r3, #1
 800f3da:	d105      	bne.n	800f3e8 <create_name+0x344>
 800f3dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3e0:	f043 0310 	orr.w	r3, r3, #16
 800f3e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f3e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f3ec:	f003 030c 	and.w	r3, r3, #12
 800f3f0:	2b04      	cmp	r3, #4
 800f3f2:	d105      	bne.n	800f400 <create_name+0x35c>
 800f3f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3f8:	f043 0308 	orr.w	r3, r3, #8
 800f3fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f406:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800f40a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	3728      	adds	r7, #40	; 0x28
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}

0800f414 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b086      	sub	sp, #24
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f422:	693b      	ldr	r3, [r7, #16]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f428:	e002      	b.n	800f430 <follow_path+0x1c>
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	3301      	adds	r3, #1
 800f42e:	603b      	str	r3, [r7, #0]
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	781b      	ldrb	r3, [r3, #0]
 800f434:	2b2f      	cmp	r3, #47	; 0x2f
 800f436:	d0f8      	beq.n	800f42a <follow_path+0x16>
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	2b5c      	cmp	r3, #92	; 0x5c
 800f43e:	d0f4      	beq.n	800f42a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f440:	693b      	ldr	r3, [r7, #16]
 800f442:	2200      	movs	r2, #0
 800f444:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800f446:	693b      	ldr	r3, [r7, #16]
 800f448:	2200      	movs	r2, #0
 800f44a:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	781b      	ldrb	r3, [r3, #0]
 800f450:	2b1f      	cmp	r3, #31
 800f452:	d80a      	bhi.n	800f46a <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2280      	movs	r2, #128	; 0x80
 800f458:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800f45c:	2100      	movs	r1, #0
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f7fe fc8b 	bl	800dd7a <dir_sdi>
 800f464:	4603      	mov	r3, r0
 800f466:	75fb      	strb	r3, [r7, #23]
 800f468:	e078      	b.n	800f55c <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f46a:	463b      	mov	r3, r7
 800f46c:	4619      	mov	r1, r3
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f7ff fe18 	bl	800f0a4 <create_name>
 800f474:	4603      	mov	r3, r0
 800f476:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f478:	7dfb      	ldrb	r3, [r7, #23]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d169      	bne.n	800f552 <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f7ff fb41 	bl	800eb06 <dir_find>
 800f484:	4603      	mov	r3, r0
 800f486:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f48e:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f490:	7dfb      	ldrb	r3, [r7, #23]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d00a      	beq.n	800f4ac <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f496:	7dfb      	ldrb	r3, [r7, #23]
 800f498:	2b04      	cmp	r3, #4
 800f49a:	d15c      	bne.n	800f556 <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f49c:	7afb      	ldrb	r3, [r7, #11]
 800f49e:	f003 0304 	and.w	r3, r3, #4
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d157      	bne.n	800f556 <follow_path+0x142>
 800f4a6:	2305      	movs	r3, #5
 800f4a8:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f4aa:	e054      	b.n	800f556 <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f4ac:	7afb      	ldrb	r3, [r7, #11]
 800f4ae:	f003 0304 	and.w	r3, r3, #4
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d151      	bne.n	800f55a <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	799b      	ldrb	r3, [r3, #6]
 800f4ba:	f003 0310 	and.w	r3, r3, #16
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d102      	bne.n	800f4c8 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800f4c2:	2305      	movs	r3, #5
 800f4c4:	75fb      	strb	r3, [r7, #23]
 800f4c6:	e049      	b.n	800f55c <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	781b      	ldrb	r3, [r3, #0]
 800f4cc:	2b04      	cmp	r3, #4
 800f4ce:	d130      	bne.n	800f532 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	689a      	ldr	r2, [r3, #8]
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f4de:	4613      	mov	r3, r2
 800f4e0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f4e4:	693a      	ldr	r2, [r7, #16]
 800f4e6:	79d2      	ldrb	r2, [r2, #7]
 800f4e8:	431a      	orrs	r2, r3
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f4f2:	693b      	ldr	r3, [r7, #16]
 800f4f4:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	691b      	ldr	r3, [r3, #16]
 800f4fa:	3334      	adds	r3, #52	; 0x34
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f7fd fa3b 	bl	800c978 <ld_dword>
 800f502:	4602      	mov	r2, r0
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	691b      	ldr	r3, [r3, #16]
 800f50c:	3321      	adds	r3, #33	; 0x21
 800f50e:	781b      	ldrb	r3, [r3, #0]
 800f510:	f003 0302 	and.w	r3, r3, #2
 800f514:	b2da      	uxtb	r2, r3
 800f516:	693b      	ldr	r3, [r7, #16]
 800f518:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	691b      	ldr	r3, [r3, #16]
 800f51e:	3338      	adds	r3, #56	; 0x38
 800f520:	4618      	mov	r0, r3
 800f522:	f7fd fa4c 	bl	800c9be <ld_qword>
 800f526:	4602      	mov	r2, r0
 800f528:	460b      	mov	r3, r1
 800f52a:	6939      	ldr	r1, [r7, #16]
 800f52c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800f530:	e79b      	b.n	800f46a <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f53c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f540:	4413      	add	r3, r2
 800f542:	4619      	mov	r1, r3
 800f544:	68f8      	ldr	r0, [r7, #12]
 800f546:	f7fe fdcf 	bl	800e0e8 <ld_clust>
 800f54a:	4602      	mov	r2, r0
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f550:	e78b      	b.n	800f46a <follow_path+0x56>
			if (res != FR_OK) break;
 800f552:	bf00      	nop
 800f554:	e002      	b.n	800f55c <follow_path+0x148>
				break;
 800f556:	bf00      	nop
 800f558:	e000      	b.n	800f55c <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f55a:	bf00      	nop
			}
		}
	}

	return res;
 800f55c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3718      	adds	r7, #24
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}

0800f566 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f566:	b480      	push	{r7}
 800f568:	b087      	sub	sp, #28
 800f56a:	af00      	add	r7, sp, #0
 800f56c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f56e:	f04f 33ff 	mov.w	r3, #4294967295
 800f572:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d031      	beq.n	800f5e0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	617b      	str	r3, [r7, #20]
 800f582:	e002      	b.n	800f58a <get_ldnumber+0x24>
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	3301      	adds	r3, #1
 800f588:	617b      	str	r3, [r7, #20]
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	781b      	ldrb	r3, [r3, #0]
 800f58e:	2b1f      	cmp	r3, #31
 800f590:	d903      	bls.n	800f59a <get_ldnumber+0x34>
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	781b      	ldrb	r3, [r3, #0]
 800f596:	2b3a      	cmp	r3, #58	; 0x3a
 800f598:	d1f4      	bne.n	800f584 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	781b      	ldrb	r3, [r3, #0]
 800f59e:	2b3a      	cmp	r3, #58	; 0x3a
 800f5a0:	d11c      	bne.n	800f5dc <get_ldnumber+0x76>
			tp = *path;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	1c5a      	adds	r2, r3, #1
 800f5ac:	60fa      	str	r2, [r7, #12]
 800f5ae:	781b      	ldrb	r3, [r3, #0]
 800f5b0:	3b30      	subs	r3, #48	; 0x30
 800f5b2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	2b09      	cmp	r3, #9
 800f5b8:	d80e      	bhi.n	800f5d8 <get_ldnumber+0x72>
 800f5ba:	68fa      	ldr	r2, [r7, #12]
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	429a      	cmp	r2, r3
 800f5c0:	d10a      	bne.n	800f5d8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	2b03      	cmp	r3, #3
 800f5c6:	d807      	bhi.n	800f5d8 <get_ldnumber+0x72>
					vol = (int)i;
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	617b      	str	r3, [r7, #20]
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	697a      	ldr	r2, [r7, #20]
 800f5d6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	e002      	b.n	800f5e2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f5dc:	2300      	movs	r3, #0
 800f5de:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f5e0:	693b      	ldr	r3, [r7, #16]
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	371c      	adds	r7, #28
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ec:	4770      	bx	lr
	...

0800f5f0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b082      	sub	sp, #8
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
 800f5f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	70da      	strb	r2, [r3, #3]
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f04f 32ff 	mov.w	r2, #4294967295
 800f606:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f608:	6839      	ldr	r1, [r7, #0]
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	f7fd fdb0 	bl	800d170 <move_window>
 800f610:	4603      	mov	r3, r0
 800f612:	2b00      	cmp	r3, #0
 800f614:	d001      	beq.n	800f61a <check_fs+0x2a>
 800f616:	2304      	movs	r3, #4
 800f618:	e044      	b.n	800f6a4 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	3338      	adds	r3, #56	; 0x38
 800f61e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f622:	4618      	mov	r0, r3
 800f624:	f7fd f990 	bl	800c948 <ld_word>
 800f628:	4603      	mov	r3, r0
 800f62a:	461a      	mov	r2, r3
 800f62c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f630:	429a      	cmp	r2, r3
 800f632:	d001      	beq.n	800f638 <check_fs+0x48>
 800f634:	2303      	movs	r3, #3
 800f636:	e035      	b.n	800f6a4 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f63e:	2be9      	cmp	r3, #233	; 0xe9
 800f640:	d009      	beq.n	800f656 <check_fs+0x66>
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f648:	2beb      	cmp	r3, #235	; 0xeb
 800f64a:	d11e      	bne.n	800f68a <check_fs+0x9a>
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f652:	2b90      	cmp	r3, #144	; 0x90
 800f654:	d119      	bne.n	800f68a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	3338      	adds	r3, #56	; 0x38
 800f65a:	3336      	adds	r3, #54	; 0x36
 800f65c:	4618      	mov	r0, r3
 800f65e:	f7fd f98b 	bl	800c978 <ld_dword>
 800f662:	4603      	mov	r3, r0
 800f664:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f668:	4a10      	ldr	r2, [pc, #64]	; (800f6ac <check_fs+0xbc>)
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d101      	bne.n	800f672 <check_fs+0x82>
 800f66e:	2300      	movs	r3, #0
 800f670:	e018      	b.n	800f6a4 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	3338      	adds	r3, #56	; 0x38
 800f676:	3352      	adds	r3, #82	; 0x52
 800f678:	4618      	mov	r0, r3
 800f67a:	f7fd f97d 	bl	800c978 <ld_dword>
 800f67e:	4603      	mov	r3, r0
 800f680:	4a0b      	ldr	r2, [pc, #44]	; (800f6b0 <check_fs+0xc0>)
 800f682:	4293      	cmp	r3, r2
 800f684:	d101      	bne.n	800f68a <check_fs+0x9a>
 800f686:	2300      	movs	r3, #0
 800f688:	e00c      	b.n	800f6a4 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	3338      	adds	r3, #56	; 0x38
 800f68e:	220b      	movs	r2, #11
 800f690:	4908      	ldr	r1, [pc, #32]	; (800f6b4 <check_fs+0xc4>)
 800f692:	4618      	mov	r0, r3
 800f694:	f7fd fb79 	bl	800cd8a <mem_cmp>
 800f698:	4603      	mov	r3, r0
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d101      	bne.n	800f6a2 <check_fs+0xb2>
 800f69e:	2301      	movs	r3, #1
 800f6a0:	e000      	b.n	800f6a4 <check_fs+0xb4>
#endif
	return 2;
 800f6a2:	2302      	movs	r3, #2
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3708      	adds	r7, #8
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	00544146 	.word	0x00544146
 800f6b0:	33544146 	.word	0x33544146
 800f6b4:	08016f90 	.word	0x08016f90

0800f6b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f6b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f6bc:	b09c      	sub	sp, #112	; 0x70
 800f6be:	af00      	add	r7, sp, #0
 800f6c0:	61f8      	str	r0, [r7, #28]
 800f6c2:	61b9      	str	r1, [r7, #24]
 800f6c4:	4613      	mov	r3, r2
 800f6c6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f6c8:	69bb      	ldr	r3, [r7, #24]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f6ce:	69f8      	ldr	r0, [r7, #28]
 800f6d0:	f7ff ff49 	bl	800f566 <get_ldnumber>
 800f6d4:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800f6d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	da01      	bge.n	800f6e0 <find_volume+0x28>
 800f6dc:	230b      	movs	r3, #11
 800f6de:	e337      	b.n	800fd50 <find_volume+0x698>


	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f6e0:	4a99      	ldr	r2, [pc, #612]	; (800f948 <find_volume+0x290>)
 800f6e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6e8:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f6ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d101      	bne.n	800f6f4 <find_volume+0x3c>
 800f6f0:	230c      	movs	r3, #12
 800f6f2:	e32d      	b.n	800fd50 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f6f4:	69bb      	ldr	r3, [r7, #24]
 800f6f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f6f8:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f6fa:	7dfb      	ldrb	r3, [r7, #23]
 800f6fc:	f023 0301 	bic.w	r3, r3, #1
 800f700:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d01a      	beq.n	800f740 <find_volume+0x88>

		stat = disk_status(fs->drv);
 800f70a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f70c:	785b      	ldrb	r3, [r3, #1]
 800f70e:	4618      	mov	r0, r3
 800f710:	f7fd f87c 	bl	800c80c <disk_status>
 800f714:	4603      	mov	r3, r0
 800f716:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f71a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f71e:	f003 0301 	and.w	r3, r3, #1
 800f722:	2b00      	cmp	r3, #0
 800f724:	d10c      	bne.n	800f740 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f726:	7dfb      	ldrb	r3, [r7, #23]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d007      	beq.n	800f73c <find_volume+0x84>
 800f72c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f730:	f003 0304 	and.w	r3, r3, #4
 800f734:	2b00      	cmp	r3, #0
 800f736:	d001      	beq.n	800f73c <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800f738:	230a      	movs	r3, #10
 800f73a:	e309      	b.n	800fd50 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 800f73c:	2300      	movs	r3, #0
 800f73e:	e307      	b.n	800fd50 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f742:	2200      	movs	r2, #0
 800f744:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f748:	b2da      	uxtb	r2, r3
 800f74a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f74c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f74e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f750:	785b      	ldrb	r3, [r3, #1]
 800f752:	4618      	mov	r0, r3
 800f754:	f7fd f874 	bl	800c840 <disk_initialize>
 800f758:	4603      	mov	r3, r0
 800f75a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f75e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f762:	f003 0301 	and.w	r3, r3, #1
 800f766:	2b00      	cmp	r3, #0
 800f768:	d001      	beq.n	800f76e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f76a:	2303      	movs	r3, #3
 800f76c:	e2f0      	b.n	800fd50 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f76e:	7dfb      	ldrb	r3, [r7, #23]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d007      	beq.n	800f784 <find_volume+0xcc>
 800f774:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f778:	f003 0304 	and.w	r3, r3, #4
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d001      	beq.n	800f784 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800f780:	230a      	movs	r3, #10
 800f782:	e2e5      	b.n	800fd50 <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f784:	2300      	movs	r3, #0
 800f786:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f788:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f78a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f78c:	f7ff ff30 	bl	800f5f0 <check_fs>
 800f790:	4603      	mov	r3, r0
 800f792:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f796:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f79a:	2b02      	cmp	r3, #2
 800f79c:	d14d      	bne.n	800f83a <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f79e:	2300      	movs	r3, #0
 800f7a0:	65bb      	str	r3, [r7, #88]	; 0x58
 800f7a2:	e020      	b.n	800f7e6 <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f7a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7a6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f7aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f7ac:	011b      	lsls	r3, r3, #4
 800f7ae:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f7b2:	4413      	add	r3, r2
 800f7b4:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f7b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7b8:	3304      	adds	r3, #4
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d006      	beq.n	800f7ce <find_volume+0x116>
 800f7c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7c2:	3308      	adds	r3, #8
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f7fd f8d7 	bl	800c978 <ld_dword>
 800f7ca:	4602      	mov	r2, r0
 800f7cc:	e000      	b.n	800f7d0 <find_volume+0x118>
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f7d2:	009b      	lsls	r3, r3, #2
 800f7d4:	3360      	adds	r3, #96	; 0x60
 800f7d6:	f107 0110 	add.w	r1, r7, #16
 800f7da:	440b      	add	r3, r1
 800f7dc:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f7e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	65bb      	str	r3, [r7, #88]	; 0x58
 800f7e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f7e8:	2b03      	cmp	r3, #3
 800f7ea:	d9db      	bls.n	800f7a4 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800f7f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d002      	beq.n	800f7fc <find_volume+0x144>
 800f7f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f7f8:	3b01      	subs	r3, #1
 800f7fa:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f7fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f7fe:	009b      	lsls	r3, r3, #2
 800f800:	3360      	adds	r3, #96	; 0x60
 800f802:	f107 0210 	add.w	r2, r7, #16
 800f806:	4413      	add	r3, r2
 800f808:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800f80c:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f80e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f810:	2b00      	cmp	r3, #0
 800f812:	d005      	beq.n	800f820 <find_volume+0x168>
 800f814:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f816:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f818:	f7ff feea 	bl	800f5f0 <check_fs>
 800f81c:	4603      	mov	r3, r0
 800f81e:	e000      	b.n	800f822 <find_volume+0x16a>
 800f820:	2303      	movs	r3, #3
 800f822:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f826:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f82a:	2b01      	cmp	r3, #1
 800f82c:	d905      	bls.n	800f83a <find_volume+0x182>
 800f82e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f830:	3301      	adds	r3, #1
 800f832:	65bb      	str	r3, [r7, #88]	; 0x58
 800f834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f836:	2b03      	cmp	r3, #3
 800f838:	d9e0      	bls.n	800f7fc <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f83a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f83e:	2b04      	cmp	r3, #4
 800f840:	d101      	bne.n	800f846 <find_volume+0x18e>
 800f842:	2301      	movs	r3, #1
 800f844:	e284      	b.n	800fd50 <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f846:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f84a:	2b01      	cmp	r3, #1
 800f84c:	d901      	bls.n	800f852 <find_volume+0x19a>
 800f84e:	230d      	movs	r3, #13
 800f850:	e27e      	b.n	800fd50 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800f852:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f856:	2b01      	cmp	r3, #1
 800f858:	f040 80fa 	bne.w	800fa50 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800f85c:	230b      	movs	r3, #11
 800f85e:	65bb      	str	r3, [r7, #88]	; 0x58
 800f860:	e002      	b.n	800f868 <find_volume+0x1b0>
 800f862:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f864:	3301      	adds	r3, #1
 800f866:	65bb      	str	r3, [r7, #88]	; 0x58
 800f868:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f86a:	2b3f      	cmp	r3, #63	; 0x3f
 800f86c:	d806      	bhi.n	800f87c <find_volume+0x1c4>
 800f86e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f872:	4413      	add	r3, r2
 800f874:	3338      	adds	r3, #56	; 0x38
 800f876:	781b      	ldrb	r3, [r3, #0]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d0f2      	beq.n	800f862 <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800f87c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f87e:	2b3f      	cmp	r3, #63	; 0x3f
 800f880:	d801      	bhi.n	800f886 <find_volume+0x1ce>
 800f882:	230d      	movs	r3, #13
 800f884:	e264      	b.n	800fd50 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800f886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f888:	3338      	adds	r3, #56	; 0x38
 800f88a:	3368      	adds	r3, #104	; 0x68
 800f88c:	4618      	mov	r0, r3
 800f88e:	f7fd f85b 	bl	800c948 <ld_word>
 800f892:	4603      	mov	r3, r0
 800f894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f898:	d001      	beq.n	800f89e <find_volume+0x1e6>
 800f89a:	230d      	movs	r3, #13
 800f89c:	e258      	b.n	800fd50 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800f89e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8a0:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800f8a4:	2b09      	cmp	r3, #9
 800f8a6:	d001      	beq.n	800f8ac <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800f8a8:	230d      	movs	r3, #13
 800f8aa:	e251      	b.n	800fd50 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800f8ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8ae:	3338      	adds	r3, #56	; 0x38
 800f8b0:	3348      	adds	r3, #72	; 0x48
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f7fd f883 	bl	800c9be <ld_qword>
 800f8b8:	4602      	mov	r2, r0
 800f8ba:	460b      	mov	r3, r1
 800f8bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f8be:	2000      	movs	r0, #0
 800f8c0:	60b9      	str	r1, [r7, #8]
 800f8c2:	60f8      	str	r0, [r7, #12]
 800f8c4:	68b9      	ldr	r1, [r7, #8]
 800f8c6:	1851      	adds	r1, r2, r1
 800f8c8:	6039      	str	r1, [r7, #0]
 800f8ca:	68f9      	ldr	r1, [r7, #12]
 800f8cc:	eb43 0101 	adc.w	r1, r3, r1
 800f8d0:	6079      	str	r1, [r7, #4]
 800f8d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800f8da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f8de:	2b01      	cmp	r3, #1
 800f8e0:	d301      	bcc.n	800f8e6 <find_volume+0x22e>
 800f8e2:	230d      	movs	r3, #13
 800f8e4:	e234      	b.n	800fd50 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800f8e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8e8:	3338      	adds	r3, #56	; 0x38
 800f8ea:	3354      	adds	r3, #84	; 0x54
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f7fd f843 	bl	800c978 <ld_dword>
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8f6:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800f8f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8fa:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 800f8fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f900:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800f902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f904:	789b      	ldrb	r3, [r3, #2]
 800f906:	2b01      	cmp	r3, #1
 800f908:	d001      	beq.n	800f90e <find_volume+0x256>
 800f90a:	230d      	movs	r3, #13
 800f90c:	e220      	b.n	800fd50 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800f90e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f910:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f914:	461a      	mov	r2, r3
 800f916:	2301      	movs	r3, #1
 800f918:	4093      	lsls	r3, r2
 800f91a:	b29a      	uxth	r2, r3
 800f91c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f91e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800f920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f922:	895b      	ldrh	r3, [r3, #10]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d101      	bne.n	800f92c <find_volume+0x274>
 800f928:	230d      	movs	r3, #13
 800f92a:	e211      	b.n	800fd50 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800f92c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f92e:	3338      	adds	r3, #56	; 0x38
 800f930:	335c      	adds	r3, #92	; 0x5c
 800f932:	4618      	mov	r0, r3
 800f934:	f7fd f820 	bl	800c978 <ld_dword>
 800f938:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800f93a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f93c:	4a03      	ldr	r2, [pc, #12]	; (800f94c <find_volume+0x294>)
 800f93e:	4293      	cmp	r3, r2
 800f940:	d906      	bls.n	800f950 <find_volume+0x298>
 800f942:	230d      	movs	r3, #13
 800f944:	e204      	b.n	800fd50 <find_volume+0x698>
 800f946:	bf00      	nop
 800f948:	20001de8 	.word	0x20001de8
 800f94c:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800f950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f952:	1c9a      	adds	r2, r3, #2
 800f954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f956:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800f958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f95a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f95c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800f95e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f960:	3338      	adds	r3, #56	; 0x38
 800f962:	3358      	adds	r3, #88	; 0x58
 800f964:	4618      	mov	r0, r3
 800f966:	f7fd f807 	bl	800c978 <ld_dword>
 800f96a:	4602      	mov	r2, r0
 800f96c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f96e:	441a      	add	r2, r3
 800f970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f972:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800f974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f976:	3338      	adds	r3, #56	; 0x38
 800f978:	3350      	adds	r3, #80	; 0x50
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7fc fffc 	bl	800c978 <ld_dword>
 800f980:	4602      	mov	r2, r0
 800f982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f984:	441a      	add	r2, r3
 800f986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f988:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800f98a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f98c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f98e:	2200      	movs	r2, #0
 800f990:	469a      	mov	sl, r3
 800f992:	4693      	mov	fp, r2
 800f994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f996:	895b      	ldrh	r3, [r3, #10]
 800f998:	461a      	mov	r2, r3
 800f99a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f99c:	fb02 f303 	mul.w	r3, r2, r3
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	4698      	mov	r8, r3
 800f9a4:	4691      	mov	r9, r2
 800f9a6:	eb1a 0408 	adds.w	r4, sl, r8
 800f9aa:	eb4b 0509 	adc.w	r5, fp, r9
 800f9ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f9b2:	42a2      	cmp	r2, r4
 800f9b4:	41ab      	sbcs	r3, r5
 800f9b6:	d201      	bcs.n	800f9bc <find_volume+0x304>
 800f9b8:	230d      	movs	r3, #13
 800f9ba:	e1c9      	b.n	800fd50 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800f9bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9be:	3338      	adds	r3, #56	; 0x38
 800f9c0:	3360      	adds	r3, #96	; 0x60
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f7fc ffd8 	bl	800c978 <ld_dword>
 800f9c8:	4602      	mov	r2, r0
 800f9ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9cc:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800f9ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9d2:	4619      	mov	r1, r3
 800f9d4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f9d6:	f7fd fc67 	bl	800d2a8 <clust2sect>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	4619      	mov	r1, r3
 800f9de:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f9e0:	f7fd fbc6 	bl	800d170 <move_window>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d001      	beq.n	800f9ee <find_volume+0x336>
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	e1b0      	b.n	800fd50 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	65bb      	str	r3, [r7, #88]	; 0x58
 800f9f2:	e015      	b.n	800fa20 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800f9f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f9f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f9f8:	4413      	add	r3, r2
 800f9fa:	3338      	adds	r3, #56	; 0x38
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	2b81      	cmp	r3, #129	; 0x81
 800fa00:	d10b      	bne.n	800fa1a <find_volume+0x362>
 800fa02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa04:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800fa08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa0a:	3314      	adds	r3, #20
 800fa0c:	4413      	add	r3, r2
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f7fc ffb2 	bl	800c978 <ld_dword>
 800fa14:	4603      	mov	r3, r0
 800fa16:	2b02      	cmp	r3, #2
 800fa18:	d007      	beq.n	800fa2a <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800fa1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa1c:	3320      	adds	r3, #32
 800fa1e:	65bb      	str	r3, [r7, #88]	; 0x58
 800fa20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa26:	d3e5      	bcc.n	800f9f4 <find_volume+0x33c>
 800fa28:	e000      	b.n	800fa2c <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800fa2a:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800fa2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa32:	d101      	bne.n	800fa38 <find_volume+0x380>
 800fa34:	230d      	movs	r3, #13
 800fa36:	e18b      	b.n	800fd50 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fa38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa3a:	f04f 32ff 	mov.w	r2, #4294967295
 800fa3e:	619a      	str	r2, [r3, #24]
 800fa40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa42:	699a      	ldr	r2, [r3, #24]
 800fa44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa46:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800fa48:	2304      	movs	r3, #4
 800fa4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800fa4e:	e167      	b.n	800fd20 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fa50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa52:	3338      	adds	r3, #56	; 0x38
 800fa54:	330b      	adds	r3, #11
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7fc ff76 	bl	800c948 <ld_word>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa62:	d001      	beq.n	800fa68 <find_volume+0x3b0>
 800fa64:	230d      	movs	r3, #13
 800fa66:	e173      	b.n	800fd50 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fa68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa6a:	3338      	adds	r3, #56	; 0x38
 800fa6c:	3316      	adds	r3, #22
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f7fc ff6a 	bl	800c948 <ld_word>
 800fa74:	4603      	mov	r3, r0
 800fa76:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fa78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d106      	bne.n	800fa8c <find_volume+0x3d4>
 800fa7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa80:	3338      	adds	r3, #56	; 0x38
 800fa82:	3324      	adds	r3, #36	; 0x24
 800fa84:	4618      	mov	r0, r3
 800fa86:	f7fc ff77 	bl	800c978 <ld_dword>
 800fa8a:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 800fa8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fa90:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fa92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa94:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fa98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa9a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fa9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa9e:	789b      	ldrb	r3, [r3, #2]
 800faa0:	2b01      	cmp	r3, #1
 800faa2:	d005      	beq.n	800fab0 <find_volume+0x3f8>
 800faa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800faa6:	789b      	ldrb	r3, [r3, #2]
 800faa8:	2b02      	cmp	r3, #2
 800faaa:	d001      	beq.n	800fab0 <find_volume+0x3f8>
 800faac:	230d      	movs	r3, #13
 800faae:	e14f      	b.n	800fd50 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fab2:	789b      	ldrb	r3, [r3, #2]
 800fab4:	461a      	mov	r2, r3
 800fab6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fab8:	fb02 f303 	mul.w	r3, r2, r3
 800fabc:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fabe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fac0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fac4:	b29a      	uxth	r2, r3
 800fac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fac8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800faca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800facc:	895b      	ldrh	r3, [r3, #10]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d008      	beq.n	800fae4 <find_volume+0x42c>
 800fad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fad4:	895b      	ldrh	r3, [r3, #10]
 800fad6:	461a      	mov	r2, r3
 800fad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fada:	895b      	ldrh	r3, [r3, #10]
 800fadc:	3b01      	subs	r3, #1
 800fade:	4013      	ands	r3, r2
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d001      	beq.n	800fae8 <find_volume+0x430>
 800fae4:	230d      	movs	r3, #13
 800fae6:	e133      	b.n	800fd50 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800faea:	3338      	adds	r3, #56	; 0x38
 800faec:	3311      	adds	r3, #17
 800faee:	4618      	mov	r0, r3
 800faf0:	f7fc ff2a 	bl	800c948 <ld_word>
 800faf4:	4603      	mov	r3, r0
 800faf6:	461a      	mov	r2, r3
 800faf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fafa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fafc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fafe:	891b      	ldrh	r3, [r3, #8]
 800fb00:	f003 030f 	and.w	r3, r3, #15
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d001      	beq.n	800fb0e <find_volume+0x456>
 800fb0a:	230d      	movs	r3, #13
 800fb0c:	e120      	b.n	800fd50 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fb0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb10:	3338      	adds	r3, #56	; 0x38
 800fb12:	3313      	adds	r3, #19
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7fc ff17 	bl	800c948 <ld_word>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fb1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d106      	bne.n	800fb32 <find_volume+0x47a>
 800fb24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb26:	3338      	adds	r3, #56	; 0x38
 800fb28:	3320      	adds	r3, #32
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f7fc ff24 	bl	800c978 <ld_dword>
 800fb30:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fb32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb34:	3338      	adds	r3, #56	; 0x38
 800fb36:	330e      	adds	r3, #14
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7fc ff05 	bl	800c948 <ld_word>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fb44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d101      	bne.n	800fb50 <find_volume+0x498>
 800fb4c:	230d      	movs	r3, #13
 800fb4e:	e0ff      	b.n	800fd50 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fb50:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800fb54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb56:	4413      	add	r3, r2
 800fb58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb5a:	8912      	ldrh	r2, [r2, #8]
 800fb5c:	0912      	lsrs	r2, r2, #4
 800fb5e:	b292      	uxth	r2, r2
 800fb60:	4413      	add	r3, r2
 800fb62:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fb64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fb66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d201      	bcs.n	800fb70 <find_volume+0x4b8>
 800fb6c:	230d      	movs	r3, #13
 800fb6e:	e0ef      	b.n	800fd50 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fb70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fb72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb74:	1ad3      	subs	r3, r2, r3
 800fb76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb78:	8952      	ldrh	r2, [r2, #10]
 800fb7a:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb7e:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fb80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d101      	bne.n	800fb8a <find_volume+0x4d2>
 800fb86:	230d      	movs	r3, #13
 800fb88:	e0e2      	b.n	800fd50 <find_volume+0x698>
		fmt = FS_FAT32;
 800fb8a:	2303      	movs	r3, #3
 800fb8c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fb90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb92:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fb96:	4293      	cmp	r3, r2
 800fb98:	d802      	bhi.n	800fba0 <find_volume+0x4e8>
 800fb9a:	2302      	movs	r3, #2
 800fb9c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fba2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fba6:	4293      	cmp	r3, r2
 800fba8:	d802      	bhi.n	800fbb0 <find_volume+0x4f8>
 800fbaa:	2301      	movs	r3, #1
 800fbac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fbb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbb2:	1c9a      	adds	r2, r3, #2
 800fbb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbb6:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800fbb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fbbc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fbbe:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800fbc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbc4:	441a      	add	r2, r3
 800fbc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbc8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800fbca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fbcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbce:	441a      	add	r2, r3
 800fbd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbd2:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800fbd4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800fbd8:	2b03      	cmp	r3, #3
 800fbda:	d11e      	bne.n	800fc1a <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fbdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbde:	3338      	adds	r3, #56	; 0x38
 800fbe0:	332a      	adds	r3, #42	; 0x2a
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	f7fc feb0 	bl	800c948 <ld_word>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d001      	beq.n	800fbf2 <find_volume+0x53a>
 800fbee:	230d      	movs	r3, #13
 800fbf0:	e0ae      	b.n	800fd50 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fbf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbf4:	891b      	ldrh	r3, [r3, #8]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d001      	beq.n	800fbfe <find_volume+0x546>
 800fbfa:	230d      	movs	r3, #13
 800fbfc:	e0a8      	b.n	800fd50 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fbfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc00:	3338      	adds	r3, #56	; 0x38
 800fc02:	332c      	adds	r3, #44	; 0x2c
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7fc feb7 	bl	800c978 <ld_dword>
 800fc0a:	4602      	mov	r2, r0
 800fc0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc0e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fc10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc12:	69db      	ldr	r3, [r3, #28]
 800fc14:	009b      	lsls	r3, r3, #2
 800fc16:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc18:	e01f      	b.n	800fc5a <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fc1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc1c:	891b      	ldrh	r3, [r3, #8]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d101      	bne.n	800fc26 <find_volume+0x56e>
 800fc22:	230d      	movs	r3, #13
 800fc24:	e094      	b.n	800fd50 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fc26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fc2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc2c:	441a      	add	r2, r3
 800fc2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc30:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fc32:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800fc36:	2b02      	cmp	r3, #2
 800fc38:	d103      	bne.n	800fc42 <find_volume+0x58a>
 800fc3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc3c:	69db      	ldr	r3, [r3, #28]
 800fc3e:	005b      	lsls	r3, r3, #1
 800fc40:	e00a      	b.n	800fc58 <find_volume+0x5a0>
 800fc42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc44:	69da      	ldr	r2, [r3, #28]
 800fc46:	4613      	mov	r3, r2
 800fc48:	005b      	lsls	r3, r3, #1
 800fc4a:	4413      	add	r3, r2
 800fc4c:	085a      	lsrs	r2, r3, #1
 800fc4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc50:	69db      	ldr	r3, [r3, #28]
 800fc52:	f003 0301 	and.w	r3, r3, #1
 800fc56:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fc58:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fc5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc5c:	6a1a      	ldr	r2, [r3, #32]
 800fc5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc60:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800fc64:	0a5b      	lsrs	r3, r3, #9
 800fc66:	429a      	cmp	r2, r3
 800fc68:	d201      	bcs.n	800fc6e <find_volume+0x5b6>
 800fc6a:	230d      	movs	r3, #13
 800fc6c:	e070      	b.n	800fd50 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fc6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc70:	f04f 32ff 	mov.w	r2, #4294967295
 800fc74:	619a      	str	r2, [r3, #24]
 800fc76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc78:	699a      	ldr	r2, [r3, #24]
 800fc7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc7c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800fc7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc80:	2280      	movs	r2, #128	; 0x80
 800fc82:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fc84:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800fc88:	2b03      	cmp	r3, #3
 800fc8a:	d149      	bne.n	800fd20 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fc8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc8e:	3338      	adds	r3, #56	; 0x38
 800fc90:	3330      	adds	r3, #48	; 0x30
 800fc92:	4618      	mov	r0, r3
 800fc94:	f7fc fe58 	bl	800c948 <ld_word>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	2b01      	cmp	r3, #1
 800fc9c:	d140      	bne.n	800fd20 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fc9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fca0:	3301      	adds	r3, #1
 800fca2:	4619      	mov	r1, r3
 800fca4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fca6:	f7fd fa63 	bl	800d170 <move_window>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d137      	bne.n	800fd20 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 800fcb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fcb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcb8:	3338      	adds	r3, #56	; 0x38
 800fcba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f7fc fe42 	bl	800c948 <ld_word>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	461a      	mov	r2, r3
 800fcc8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d127      	bne.n	800fd20 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fcd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcd2:	3338      	adds	r3, #56	; 0x38
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f7fc fe4f 	bl	800c978 <ld_dword>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	4a1f      	ldr	r2, [pc, #124]	; (800fd5c <find_volume+0x6a4>)
 800fcde:	4293      	cmp	r3, r2
 800fce0:	d11e      	bne.n	800fd20 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fce4:	3338      	adds	r3, #56	; 0x38
 800fce6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7fc fe44 	bl	800c978 <ld_dword>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	4a1b      	ldr	r2, [pc, #108]	; (800fd60 <find_volume+0x6a8>)
 800fcf4:	4293      	cmp	r3, r2
 800fcf6:	d113      	bne.n	800fd20 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fcf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcfa:	3338      	adds	r3, #56	; 0x38
 800fcfc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800fd00:	4618      	mov	r0, r3
 800fd02:	f7fc fe39 	bl	800c978 <ld_dword>
 800fd06:	4602      	mov	r2, r0
 800fd08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd0a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fd0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd0e:	3338      	adds	r3, #56	; 0x38
 800fd10:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fd14:	4618      	mov	r0, r3
 800fd16:	f7fc fe2f 	bl	800c978 <ld_dword>
 800fd1a:	4602      	mov	r2, r0
 800fd1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd1e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fd20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd22:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800fd26:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fd28:	4b0e      	ldr	r3, [pc, #56]	; (800fd64 <find_volume+0x6ac>)
 800fd2a:	881b      	ldrh	r3, [r3, #0]
 800fd2c:	3301      	adds	r3, #1
 800fd2e:	b29a      	uxth	r2, r3
 800fd30:	4b0c      	ldr	r3, [pc, #48]	; (800fd64 <find_volume+0x6ac>)
 800fd32:	801a      	strh	r2, [r3, #0]
 800fd34:	4b0b      	ldr	r3, [pc, #44]	; (800fd64 <find_volume+0x6ac>)
 800fd36:	881a      	ldrh	r2, [r3, #0]
 800fd38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd3a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800fd3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd3e:	4a0a      	ldr	r2, [pc, #40]	; (800fd68 <find_volume+0x6b0>)
 800fd40:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800fd42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd44:	4a09      	ldr	r2, [pc, #36]	; (800fd6c <find_volume+0x6b4>)
 800fd46:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fd48:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fd4a:	f7fd f9a9 	bl	800d0a0 <clear_lock>
#endif
	return FR_OK;
 800fd4e:	2300      	movs	r3, #0
}
 800fd50:	4618      	mov	r0, r3
 800fd52:	3770      	adds	r7, #112	; 0x70
 800fd54:	46bd      	mov	sp, r7
 800fd56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fd5a:	bf00      	nop
 800fd5c:	41615252 	.word	0x41615252
 800fd60:	61417272 	.word	0x61417272
 800fd64:	20001df8 	.word	0x20001df8
 800fd68:	2000207c 	.word	0x2000207c
 800fd6c:	20001e1c 	.word	0x20001e1c

0800fd70 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b084      	sub	sp, #16
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fd7a:	2309      	movs	r3, #9
 800fd7c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d01c      	beq.n	800fdbe <validate+0x4e>
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d018      	beq.n	800fdbe <validate+0x4e>
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	781b      	ldrb	r3, [r3, #0]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d013      	beq.n	800fdbe <validate+0x4e>
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	889a      	ldrh	r2, [r3, #4]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	88db      	ldrh	r3, [r3, #6]
 800fda0:	429a      	cmp	r2, r3
 800fda2:	d10c      	bne.n	800fdbe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	785b      	ldrb	r3, [r3, #1]
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f7fc fd2e 	bl	800c80c <disk_status>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	f003 0301 	and.w	r3, r3, #1
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d101      	bne.n	800fdbe <validate+0x4e>
			res = FR_OK;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fdbe:	7bfb      	ldrb	r3, [r7, #15]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d102      	bne.n	800fdca <validate+0x5a>
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	e000      	b.n	800fdcc <validate+0x5c>
 800fdca:	2300      	movs	r3, #0
 800fdcc:	683a      	ldr	r2, [r7, #0]
 800fdce:	6013      	str	r3, [r2, #0]
	return res;
 800fdd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	3710      	adds	r7, #16
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}
	...

0800fddc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b088      	sub	sp, #32
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	60f8      	str	r0, [r7, #12]
 800fde4:	60b9      	str	r1, [r7, #8]
 800fde6:	4613      	mov	r3, r2
 800fde8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fdee:	f107 0310 	add.w	r3, r7, #16
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f7ff fbb7 	bl	800f566 <get_ldnumber>
 800fdf8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fdfa:	69fb      	ldr	r3, [r7, #28]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	da01      	bge.n	800fe04 <f_mount+0x28>
 800fe00:	230b      	movs	r3, #11
 800fe02:	e02b      	b.n	800fe5c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fe04:	4a17      	ldr	r2, [pc, #92]	; (800fe64 <f_mount+0x88>)
 800fe06:	69fb      	ldr	r3, [r7, #28]
 800fe08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe0c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fe0e:	69bb      	ldr	r3, [r7, #24]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d005      	beq.n	800fe20 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fe14:	69b8      	ldr	r0, [r7, #24]
 800fe16:	f7fd f943 	bl	800d0a0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fe1a:	69bb      	ldr	r3, [r7, #24]
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d002      	beq.n	800fe2c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fe2c:	68fa      	ldr	r2, [r7, #12]
 800fe2e:	490d      	ldr	r1, [pc, #52]	; (800fe64 <f_mount+0x88>)
 800fe30:	69fb      	ldr	r3, [r7, #28]
 800fe32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d002      	beq.n	800fe42 <f_mount+0x66>
 800fe3c:	79fb      	ldrb	r3, [r7, #7]
 800fe3e:	2b01      	cmp	r3, #1
 800fe40:	d001      	beq.n	800fe46 <f_mount+0x6a>
 800fe42:	2300      	movs	r3, #0
 800fe44:	e00a      	b.n	800fe5c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fe46:	f107 010c 	add.w	r1, r7, #12
 800fe4a:	f107 0308 	add.w	r3, r7, #8
 800fe4e:	2200      	movs	r2, #0
 800fe50:	4618      	mov	r0, r3
 800fe52:	f7ff fc31 	bl	800f6b8 <find_volume>
 800fe56:	4603      	mov	r3, r0
 800fe58:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fe5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	3720      	adds	r7, #32
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}
 800fe64:	20001de8 	.word	0x20001de8

0800fe68 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fe68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fe6c:	b0a6      	sub	sp, #152	; 0x98
 800fe6e:	af00      	add	r7, sp, #0
 800fe70:	61f8      	str	r0, [r7, #28]
 800fe72:	61b9      	str	r1, [r7, #24]
 800fe74:	4613      	mov	r3, r2
 800fe76:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fe78:	69fb      	ldr	r3, [r7, #28]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d101      	bne.n	800fe82 <f_open+0x1a>
 800fe7e:	2309      	movs	r3, #9
 800fe80:	e2ae      	b.n	80103e0 <f_open+0x578>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fe82:	7dfb      	ldrb	r3, [r7, #23]
 800fe84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fe88:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 800fe8a:	7dfa      	ldrb	r2, [r7, #23]
 800fe8c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800fe90:	f107 0318 	add.w	r3, r7, #24
 800fe94:	4618      	mov	r0, r3
 800fe96:	f7ff fc0f 	bl	800f6b8 <find_volume>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (res == FR_OK) {
 800fea0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	f040 8292 	bne.w	80103ce <f_open+0x566>
		dj.obj.fs = fs;
 800feaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feac:	62bb      	str	r3, [r7, #40]	; 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800feae:	69ba      	ldr	r2, [r7, #24]
 800feb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800feb4:	4611      	mov	r1, r2
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7ff faac 	bl	800f414 <follow_path>
 800febc:	4603      	mov	r3, r0
 800febe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fec2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d11a      	bne.n	800ff00 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800feca:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800fece:	b25b      	sxtb	r3, r3
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	da03      	bge.n	800fedc <f_open+0x74>
				res = FR_INVALID_NAME;
 800fed4:	2306      	movs	r3, #6
 800fed6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800feda:	e011      	b.n	800ff00 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fedc:	7dfb      	ldrb	r3, [r7, #23]
 800fede:	f023 0301 	bic.w	r3, r3, #1
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	bf14      	ite	ne
 800fee6:	2301      	movne	r3, #1
 800fee8:	2300      	moveq	r3, #0
 800feea:	b2db      	uxtb	r3, r3
 800feec:	461a      	mov	r2, r3
 800feee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fef2:	4611      	mov	r1, r2
 800fef4:	4618      	mov	r0, r3
 800fef6:	f7fc ff8b 	bl	800ce10 <chk_lock>
 800fefa:	4603      	mov	r3, r0
 800fefc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ff00:	7dfb      	ldrb	r3, [r7, #23]
 800ff02:	f003 031c 	and.w	r3, r3, #28
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	f000 8115 	beq.w	8010136 <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 800ff0c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d017      	beq.n	800ff44 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ff14:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ff18:	2b04      	cmp	r3, #4
 800ff1a:	d10e      	bne.n	800ff3a <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ff1c:	f7fc ffd4 	bl	800cec8 <enq_lock>
 800ff20:	4603      	mov	r3, r0
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d006      	beq.n	800ff34 <f_open+0xcc>
 800ff26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f7fe ff14 	bl	800ed58 <dir_register>
 800ff30:	4603      	mov	r3, r0
 800ff32:	e000      	b.n	800ff36 <f_open+0xce>
 800ff34:	2312      	movs	r3, #18
 800ff36:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ff3a:	7dfb      	ldrb	r3, [r7, #23]
 800ff3c:	f043 0308 	orr.w	r3, r3, #8
 800ff40:	75fb      	strb	r3, [r7, #23]
 800ff42:	e011      	b.n	800ff68 <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ff44:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ff48:	f003 0311 	and.w	r3, r3, #17
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d003      	beq.n	800ff58 <f_open+0xf0>
					res = FR_DENIED;
 800ff50:	2307      	movs	r3, #7
 800ff52:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ff56:	e007      	b.n	800ff68 <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ff58:	7dfb      	ldrb	r3, [r7, #23]
 800ff5a:	f003 0304 	and.w	r3, r3, #4
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d002      	beq.n	800ff68 <f_open+0x100>
 800ff62:	2308      	movs	r3, #8
 800ff64:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ff68:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	f040 80fe 	bne.w	801016e <f_open+0x306>
 800ff72:	7dfb      	ldrb	r3, [r7, #23]
 800ff74:	f003 0308 	and.w	r3, r3, #8
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	f000 80f8 	beq.w	801016e <f_open+0x306>
				dw = GET_FATTIME();
 800ff7e:	f7f9 fe49 	bl	8009c14 <get_fattime>
 800ff82:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800ff86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff88:	781b      	ldrb	r3, [r3, #0]
 800ff8a:	2b04      	cmp	r3, #4
 800ff8c:	f040 8084 	bne.w	8010098 <f_open+0x230>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800ff90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff92:	69fb      	ldr	r3, [r7, #28]
 800ff94:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800ff96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff98:	691b      	ldr	r3, [r3, #16]
 800ff9a:	3334      	adds	r3, #52	; 0x34
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f7fc fceb 	bl	800c978 <ld_dword>
 800ffa2:	4602      	mov	r2, r0
 800ffa4:	69fb      	ldr	r3, [r7, #28]
 800ffa6:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800ffa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffaa:	691b      	ldr	r3, [r3, #16]
 800ffac:	3338      	adds	r3, #56	; 0x38
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7fc fd05 	bl	800c9be <ld_qword>
 800ffb4:	4602      	mov	r2, r0
 800ffb6:	460b      	mov	r3, r1
 800ffb8:	69f9      	ldr	r1, [r7, #28]
 800ffba:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800ffbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc0:	691b      	ldr	r3, [r3, #16]
 800ffc2:	3321      	adds	r3, #33	; 0x21
 800ffc4:	781b      	ldrb	r3, [r3, #0]
 800ffc6:	f003 0302 	and.w	r3, r3, #2
 800ffca:	b2da      	uxtb	r2, r3
 800ffcc:	69fb      	ldr	r3, [r7, #28]
 800ffce:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800ffd0:	69fb      	ldr	r3, [r7, #28]
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800ffd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd8:	691b      	ldr	r3, [r3, #16]
 800ffda:	3308      	adds	r3, #8
 800ffdc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7fc fde2 	bl	800cbaa <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800ffe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe8:	691b      	ldr	r3, [r3, #16]
 800ffea:	3314      	adds	r3, #20
 800ffec:	2200      	movs	r2, #0
 800ffee:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800fff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff2:	691b      	ldr	r3, [r3, #16]
 800fff4:	330c      	adds	r3, #12
 800fff6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7fc fdd5 	bl	800cbaa <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8010000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010002:	691b      	ldr	r3, [r3, #16]
 8010004:	3315      	adds	r3, #21
 8010006:	2200      	movs	r2, #0
 8010008:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 801000a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801000c:	691b      	ldr	r3, [r3, #16]
 801000e:	3304      	adds	r3, #4
 8010010:	2220      	movs	r2, #32
 8010012:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8010014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010016:	691b      	ldr	r3, [r3, #16]
 8010018:	3334      	adds	r3, #52	; 0x34
 801001a:	2100      	movs	r1, #0
 801001c:	4618      	mov	r0, r3
 801001e:	f7fc fdc4 	bl	800cbaa <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8010022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010024:	691b      	ldr	r3, [r3, #16]
 8010026:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801002a:	f04f 0200 	mov.w	r2, #0
 801002e:	f04f 0300 	mov.w	r3, #0
 8010032:	4608      	mov	r0, r1
 8010034:	f7fc fde5 	bl	800cc02 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8010038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801003a:	691b      	ldr	r3, [r3, #16]
 801003c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8010040:	f04f 0200 	mov.w	r2, #0
 8010044:	f04f 0300 	mov.w	r3, #0
 8010048:	4608      	mov	r0, r1
 801004a:	f7fc fdda 	bl	800cc02 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 801004e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010050:	691b      	ldr	r3, [r3, #16]
 8010052:	3321      	adds	r3, #33	; 0x21
 8010054:	2201      	movs	r2, #1
 8010056:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8010058:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801005c:	4618      	mov	r0, r3
 801005e:	f7fe fbc9 	bl	800e7f4 <store_xdir>
 8010062:	4603      	mov	r3, r0
 8010064:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8010068:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801006c:	2b00      	cmp	r3, #0
 801006e:	d17e      	bne.n	801016e <f_open+0x306>
 8010070:	69fb      	ldr	r3, [r7, #28]
 8010072:	689b      	ldr	r3, [r3, #8]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d07a      	beq.n	801016e <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8010078:	69f8      	ldr	r0, [r7, #28]
 801007a:	69fb      	ldr	r3, [r7, #28]
 801007c:	689b      	ldr	r3, [r3, #8]
 801007e:	2200      	movs	r2, #0
 8010080:	4619      	mov	r1, r3
 8010082:	f7fd fc81 	bl	800d988 <remove_chain>
 8010086:	4603      	mov	r3, r0
 8010088:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 801008c:	69fb      	ldr	r3, [r7, #28]
 801008e:	689a      	ldr	r2, [r3, #8]
 8010090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010092:	3a01      	subs	r2, #1
 8010094:	615a      	str	r2, [r3, #20]
 8010096:	e06a      	b.n	801016e <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801009a:	330e      	adds	r3, #14
 801009c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80100a0:	4618      	mov	r0, r3
 80100a2:	f7fc fd82 	bl	800cbaa <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80100a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80100a8:	3316      	adds	r3, #22
 80100aa:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80100ae:	4618      	mov	r0, r3
 80100b0:	f7fc fd7b 	bl	800cbaa <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80100b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80100b6:	330b      	adds	r3, #11
 80100b8:	2220      	movs	r2, #32
 80100ba:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80100bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80100c0:	4611      	mov	r1, r2
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7fe f810 	bl	800e0e8 <ld_clust>
 80100c8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80100cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ce:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80100d0:	2200      	movs	r2, #0
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7fe f827 	bl	800e126 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80100d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80100da:	331c      	adds	r3, #28
 80100dc:	2100      	movs	r1, #0
 80100de:	4618      	mov	r0, r3
 80100e0:	f7fc fd63 	bl	800cbaa <st_dword>
					fs->wflag = 1;
 80100e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e6:	2201      	movs	r2, #1
 80100e8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80100ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d03d      	beq.n	801016e <f_open+0x306>
						dw = fs->winsect;
 80100f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80100f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						res = remove_chain(&dj.obj, cl, 0);
 80100fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80100fe:	2200      	movs	r2, #0
 8010100:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8010104:	4618      	mov	r0, r3
 8010106:	f7fd fc3f 	bl	800d988 <remove_chain>
 801010a:	4603      	mov	r3, r0
 801010c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						if (res == FR_OK) {
 8010110:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010114:	2b00      	cmp	r3, #0
 8010116:	d12a      	bne.n	801016e <f_open+0x306>
							res = move_window(fs, dw);
 8010118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801011a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801011e:	4618      	mov	r0, r3
 8010120:	f7fd f826 	bl	800d170 <move_window>
 8010124:	4603      	mov	r3, r0
 8010126:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801012a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801012c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010130:	3a01      	subs	r2, #1
 8010132:	615a      	str	r2, [r3, #20]
 8010134:	e01b      	b.n	801016e <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010136:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801013a:	2b00      	cmp	r3, #0
 801013c:	d117      	bne.n	801016e <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801013e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010142:	f003 0310 	and.w	r3, r3, #16
 8010146:	2b00      	cmp	r3, #0
 8010148:	d003      	beq.n	8010152 <f_open+0x2ea>
					res = FR_NO_FILE;
 801014a:	2304      	movs	r3, #4
 801014c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010150:	e00d      	b.n	801016e <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010152:	7dfb      	ldrb	r3, [r7, #23]
 8010154:	f003 0302 	and.w	r3, r3, #2
 8010158:	2b00      	cmp	r3, #0
 801015a:	d008      	beq.n	801016e <f_open+0x306>
 801015c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010160:	f003 0301 	and.w	r3, r3, #1
 8010164:	2b00      	cmp	r3, #0
 8010166:	d002      	beq.n	801016e <f_open+0x306>
						res = FR_DENIED;
 8010168:	2307      	movs	r3, #7
 801016a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 801016e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010172:	2b00      	cmp	r3, #0
 8010174:	d128      	bne.n	80101c8 <f_open+0x360>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010176:	7dfb      	ldrb	r3, [r7, #23]
 8010178:	f003 0308 	and.w	r3, r3, #8
 801017c:	2b00      	cmp	r3, #0
 801017e:	d003      	beq.n	8010188 <f_open+0x320>
				mode |= FA_MODIFIED;
 8010180:	7dfb      	ldrb	r3, [r7, #23]
 8010182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010186:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801018a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801018c:	69fb      	ldr	r3, [r7, #28]
 801018e:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8010190:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010192:	69fb      	ldr	r3, [r7, #28]
 8010194:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010196:	7dfb      	ldrb	r3, [r7, #23]
 8010198:	f023 0301 	bic.w	r3, r3, #1
 801019c:	2b00      	cmp	r3, #0
 801019e:	bf14      	ite	ne
 80101a0:	2301      	movne	r3, #1
 80101a2:	2300      	moveq	r3, #0
 80101a4:	b2db      	uxtb	r3, r3
 80101a6:	461a      	mov	r2, r3
 80101a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80101ac:	4611      	mov	r1, r2
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7fc feac 	bl	800cf0c <inc_lock>
 80101b4:	4602      	mov	r2, r0
 80101b6:	69fb      	ldr	r3, [r7, #28]
 80101b8:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80101ba:	69fb      	ldr	r3, [r7, #28]
 80101bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d102      	bne.n	80101c8 <f_open+0x360>
 80101c2:	2302      	movs	r3, #2
 80101c4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 80101c8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	f040 80fe 	bne.w	80103ce <f_open+0x566>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80101d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	2b04      	cmp	r3, #4
 80101d8:	d12d      	bne.n	8010236 <f_open+0x3ce>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80101da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101dc:	69fb      	ldr	r3, [r7, #28]
 80101de:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80101e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80101e4:	4613      	mov	r3, r2
 80101e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80101ea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80101ee:	431a      	orrs	r2, r3
 80101f0:	69fb      	ldr	r3, [r7, #28]
 80101f2:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80101f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80101f6:	69fb      	ldr	r3, [r7, #28]
 80101f8:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80101fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101fc:	691b      	ldr	r3, [r3, #16]
 80101fe:	3334      	adds	r3, #52	; 0x34
 8010200:	4618      	mov	r0, r3
 8010202:	f7fc fbb9 	bl	800c978 <ld_dword>
 8010206:	4602      	mov	r2, r0
 8010208:	69fb      	ldr	r3, [r7, #28]
 801020a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 801020c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801020e:	691b      	ldr	r3, [r3, #16]
 8010210:	3338      	adds	r3, #56	; 0x38
 8010212:	4618      	mov	r0, r3
 8010214:	f7fc fbd3 	bl	800c9be <ld_qword>
 8010218:	4602      	mov	r2, r0
 801021a:	460b      	mov	r3, r1
 801021c:	69f9      	ldr	r1, [r7, #28]
 801021e:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8010222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010224:	691b      	ldr	r3, [r3, #16]
 8010226:	3321      	adds	r3, #33	; 0x21
 8010228:	781b      	ldrb	r3, [r3, #0]
 801022a:	f003 0302 	and.w	r3, r3, #2
 801022e:	b2da      	uxtb	r2, r3
 8010230:	69fb      	ldr	r3, [r7, #28]
 8010232:	71da      	strb	r2, [r3, #7]
 8010234:	e016      	b.n	8010264 <f_open+0x3fc>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010238:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801023a:	4611      	mov	r1, r2
 801023c:	4618      	mov	r0, r3
 801023e:	f7fd ff53 	bl	800e0e8 <ld_clust>
 8010242:	4602      	mov	r2, r0
 8010244:	69fb      	ldr	r3, [r7, #28]
 8010246:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801024a:	331c      	adds	r3, #28
 801024c:	4618      	mov	r0, r3
 801024e:	f7fc fb93 	bl	800c978 <ld_dword>
 8010252:	4603      	mov	r3, r0
 8010254:	2200      	movs	r2, #0
 8010256:	60bb      	str	r3, [r7, #8]
 8010258:	60fa      	str	r2, [r7, #12]
 801025a:	69fb      	ldr	r3, [r7, #28]
 801025c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010260:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010264:	69fb      	ldr	r3, [r7, #28]
 8010266:	2200      	movs	r2, #0
 8010268:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801026a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801026c:	69fb      	ldr	r3, [r7, #28]
 801026e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010272:	88da      	ldrh	r2, [r3, #6]
 8010274:	69fb      	ldr	r3, [r7, #28]
 8010276:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010278:	69fb      	ldr	r3, [r7, #28]
 801027a:	7dfa      	ldrb	r2, [r7, #23]
 801027c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 8010280:	69fb      	ldr	r3, [r7, #28]
 8010282:	2200      	movs	r2, #0
 8010284:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8010288:	69fb      	ldr	r3, [r7, #28]
 801028a:	2200      	movs	r2, #0
 801028c:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 801028e:	69f9      	ldr	r1, [r7, #28]
 8010290:	f04f 0200 	mov.w	r2, #0
 8010294:	f04f 0300 	mov.w	r3, #0
 8010298:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801029c:	69fb      	ldr	r3, [r7, #28]
 801029e:	3354      	adds	r3, #84	; 0x54
 80102a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80102a4:	2100      	movs	r1, #0
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7fc fd54 	bl	800cd54 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80102ac:	7dfb      	ldrb	r3, [r7, #23]
 80102ae:	f003 0320 	and.w	r3, r3, #32
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	f000 808b 	beq.w	80103ce <f_open+0x566>
 80102b8:	69fb      	ldr	r3, [r7, #28]
 80102ba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80102be:	4313      	orrs	r3, r2
 80102c0:	f000 8085 	beq.w	80103ce <f_open+0x566>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80102c4:	69fb      	ldr	r3, [r7, #28]
 80102c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80102ca:	69f9      	ldr	r1, [r7, #28]
 80102cc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80102d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d2:	895b      	ldrh	r3, [r3, #10]
 80102d4:	025b      	lsls	r3, r3, #9
 80102d6:	67fb      	str	r3, [r7, #124]	; 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80102d8:	69fb      	ldr	r3, [r7, #28]
 80102da:	689b      	ldr	r3, [r3, #8]
 80102dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80102e0:	69fb      	ldr	r3, [r7, #28]
 80102e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80102e6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 80102ea:	e026      	b.n	801033a <f_open+0x4d2>
					clst = get_fat(&fp->obj, clst);
 80102ec:	69fb      	ldr	r3, [r7, #28]
 80102ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80102f2:	4618      	mov	r0, r3
 80102f4:	f7fc fff8 	bl	800d2e8 <get_fat>
 80102f8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
					if (clst <= 1) res = FR_INT_ERR;
 80102fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010300:	2b01      	cmp	r3, #1
 8010302:	d802      	bhi.n	801030a <f_open+0x4a2>
 8010304:	2302      	movs	r3, #2
 8010306:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801030a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801030e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010312:	d102      	bne.n	801031a <f_open+0x4b2>
 8010314:	2301      	movs	r3, #1
 8010316:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801031a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801031c:	2200      	movs	r2, #0
 801031e:	469a      	mov	sl, r3
 8010320:	4693      	mov	fp, r2
 8010322:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010326:	ebb2 010a 	subs.w	r1, r2, sl
 801032a:	6039      	str	r1, [r7, #0]
 801032c:	eb63 030b 	sbc.w	r3, r3, fp
 8010330:	607b      	str	r3, [r7, #4]
 8010332:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010336:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 801033a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801033e:	2b00      	cmp	r3, #0
 8010340:	d109      	bne.n	8010356 <f_open+0x4ee>
 8010342:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010344:	2200      	movs	r2, #0
 8010346:	4698      	mov	r8, r3
 8010348:	4691      	mov	r9, r2
 801034a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801034e:	4590      	cmp	r8, r2
 8010350:	eb79 0303 	sbcs.w	r3, r9, r3
 8010354:	d3ca      	bcc.n	80102ec <f_open+0x484>
				}
				fp->clust = clst;
 8010356:	69fb      	ldr	r3, [r7, #28]
 8010358:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801035c:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801035e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010362:	2b00      	cmp	r3, #0
 8010364:	d133      	bne.n	80103ce <f_open+0x566>
 8010366:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801036a:	f3c2 0408 	ubfx	r4, r2, #0, #9
 801036e:	2500      	movs	r5, #0
 8010370:	ea54 0305 	orrs.w	r3, r4, r5
 8010374:	d02b      	beq.n	80103ce <f_open+0x566>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010378:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801037c:	4618      	mov	r0, r3
 801037e:	f7fc ff93 	bl	800d2a8 <clust2sect>
 8010382:	67b8      	str	r0, [r7, #120]	; 0x78
 8010384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010386:	2b00      	cmp	r3, #0
 8010388:	d103      	bne.n	8010392 <f_open+0x52a>
						res = FR_INT_ERR;
 801038a:	2302      	movs	r3, #2
 801038c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010390:	e01d      	b.n	80103ce <f_open+0x566>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010392:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8010396:	f04f 0200 	mov.w	r2, #0
 801039a:	f04f 0300 	mov.w	r3, #0
 801039e:	0a42      	lsrs	r2, r0, #9
 80103a0:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 80103a4:	0a4b      	lsrs	r3, r1, #9
 80103a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80103a8:	441a      	add	r2, r3
 80103aa:	69fb      	ldr	r3, [r7, #28]
 80103ac:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80103ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b0:	7858      	ldrb	r0, [r3, #1]
 80103b2:	69fb      	ldr	r3, [r7, #28]
 80103b4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80103b8:	69fb      	ldr	r3, [r7, #28]
 80103ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80103bc:	2301      	movs	r3, #1
 80103be:	f7fc fa65 	bl	800c88c <disk_read>
 80103c2:	4603      	mov	r3, r0
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d002      	beq.n	80103ce <f_open+0x566>
 80103c8:	2301      	movs	r3, #1
 80103ca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80103ce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d002      	beq.n	80103dc <f_open+0x574>
 80103d6:	69fb      	ldr	r3, [r7, #28]
 80103d8:	2200      	movs	r2, #0
 80103da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80103dc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3798      	adds	r7, #152	; 0x98
 80103e4:	46bd      	mov	sp, r7
 80103e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080103ea <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80103ea:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80103ee:	b08c      	sub	sp, #48	; 0x30
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	60f8      	str	r0, [r7, #12]
 80103f4:	60b9      	str	r1, [r7, #8]
 80103f6:	607a      	str	r2, [r7, #4]
 80103f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80103fa:	68bb      	ldr	r3, [r7, #8]
 80103fc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	2200      	movs	r2, #0
 8010402:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	f107 0210 	add.w	r2, r7, #16
 801040a:	4611      	mov	r1, r2
 801040c:	4618      	mov	r0, r3
 801040e:	f7ff fcaf 	bl	800fd70 <validate>
 8010412:	4603      	mov	r3, r0
 8010414:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010418:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801041c:	2b00      	cmp	r3, #0
 801041e:	d108      	bne.n	8010432 <f_write+0x48>
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010426:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801042a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801042e:	2b00      	cmp	r3, #0
 8010430:	d002      	beq.n	8010438 <f_write+0x4e>
 8010432:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010436:	e187      	b.n	8010748 <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801043e:	f003 0302 	and.w	r3, r3, #2
 8010442:	2b00      	cmp	r3, #0
 8010444:	d101      	bne.n	801044a <f_write+0x60>
 8010446:	2307      	movs	r3, #7
 8010448:	e17e      	b.n	8010748 <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	781b      	ldrb	r3, [r3, #0]
 801044e:	2b04      	cmp	r3, #4
 8010450:	f000 816a 	beq.w	8010728 <f_write+0x33e>
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	18d1      	adds	r1, r2, r3
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010464:	4613      	mov	r3, r2
 8010466:	4299      	cmp	r1, r3
 8010468:	f080 815e 	bcs.w	8010728 <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010472:	4613      	mov	r3, r2
 8010474:	43db      	mvns	r3, r3
 8010476:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010478:	e156      	b.n	8010728 <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010480:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8010484:	2500      	movs	r5, #0
 8010486:	ea54 0305 	orrs.w	r3, r4, r5
 801048a:	f040 80fb 	bne.w	8010684 <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010494:	f04f 0200 	mov.w	r2, #0
 8010498:	f04f 0300 	mov.w	r3, #0
 801049c:	0a42      	lsrs	r2, r0, #9
 801049e:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 80104a2:	0a4b      	lsrs	r3, r1, #9
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	895b      	ldrh	r3, [r3, #10]
 80104a8:	3b01      	subs	r3, #1
 80104aa:	4013      	ands	r3, r2
 80104ac:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80104ae:	69bb      	ldr	r3, [r7, #24]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d146      	bne.n	8010542 <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80104ba:	4313      	orrs	r3, r2
 80104bc:	d10c      	bne.n	80104d8 <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	689b      	ldr	r3, [r3, #8]
 80104c2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80104c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d11a      	bne.n	8010500 <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	2100      	movs	r1, #0
 80104ce:	4618      	mov	r0, r3
 80104d0:	f7fd fb0e 	bl	800daf0 <create_chain>
 80104d4:	62b8      	str	r0, [r7, #40]	; 0x28
 80104d6:	e013      	b.n	8010500 <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d007      	beq.n	80104f0 <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80104e6:	68f8      	ldr	r0, [r7, #12]
 80104e8:	f7fd fc03 	bl	800dcf2 <clmt_clust>
 80104ec:	62b8      	str	r0, [r7, #40]	; 0x28
 80104ee:	e007      	b.n	8010500 <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80104f0:	68fa      	ldr	r2, [r7, #12]
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104f6:	4619      	mov	r1, r3
 80104f8:	4610      	mov	r0, r2
 80104fa:	f7fd faf9 	bl	800daf0 <create_chain>
 80104fe:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010502:	2b00      	cmp	r3, #0
 8010504:	f000 8115 	beq.w	8010732 <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801050a:	2b01      	cmp	r3, #1
 801050c:	d105      	bne.n	801051a <f_write+0x130>
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	2202      	movs	r2, #2
 8010512:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010516:	2302      	movs	r3, #2
 8010518:	e116      	b.n	8010748 <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801051a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801051c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010520:	d105      	bne.n	801052e <f_write+0x144>
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	2201      	movs	r2, #1
 8010526:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801052a:	2301      	movs	r3, #1
 801052c:	e10c      	b.n	8010748 <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010532:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	689b      	ldr	r3, [r3, #8]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d102      	bne.n	8010542 <f_write+0x158>
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010540:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010548:	b25b      	sxtb	r3, r3
 801054a:	2b00      	cmp	r3, #0
 801054c:	da1b      	bge.n	8010586 <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801054e:	693b      	ldr	r3, [r7, #16]
 8010550:	7858      	ldrb	r0, [r3, #1]
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801055c:	2301      	movs	r3, #1
 801055e:	f7fc f9b5 	bl	800c8cc <disk_write>
 8010562:	4603      	mov	r3, r0
 8010564:	2b00      	cmp	r3, #0
 8010566:	d005      	beq.n	8010574 <f_write+0x18a>
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	2201      	movs	r2, #1
 801056c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010570:	2301      	movs	r3, #1
 8010572:	e0e9      	b.n	8010748 <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801057a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801057e:	b2da      	uxtb	r2, r3
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010586:	693a      	ldr	r2, [r7, #16]
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801058c:	4619      	mov	r1, r3
 801058e:	4610      	mov	r0, r2
 8010590:	f7fc fe8a 	bl	800d2a8 <clust2sect>
 8010594:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010596:	697b      	ldr	r3, [r7, #20]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d105      	bne.n	80105a8 <f_write+0x1be>
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	2202      	movs	r2, #2
 80105a0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80105a4:	2302      	movs	r3, #2
 80105a6:	e0cf      	b.n	8010748 <f_write+0x35e>
			sect += csect;
 80105a8:	697a      	ldr	r2, [r7, #20]
 80105aa:	69bb      	ldr	r3, [r7, #24]
 80105ac:	4413      	add	r3, r2
 80105ae:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	0a5b      	lsrs	r3, r3, #9
 80105b4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80105b6:	6a3b      	ldr	r3, [r7, #32]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d03f      	beq.n	801063c <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80105bc:	69ba      	ldr	r2, [r7, #24]
 80105be:	6a3b      	ldr	r3, [r7, #32]
 80105c0:	4413      	add	r3, r2
 80105c2:	693a      	ldr	r2, [r7, #16]
 80105c4:	8952      	ldrh	r2, [r2, #10]
 80105c6:	4293      	cmp	r3, r2
 80105c8:	d905      	bls.n	80105d6 <f_write+0x1ec>
					cc = fs->csize - csect;
 80105ca:	693b      	ldr	r3, [r7, #16]
 80105cc:	895b      	ldrh	r3, [r3, #10]
 80105ce:	461a      	mov	r2, r3
 80105d0:	69bb      	ldr	r3, [r7, #24]
 80105d2:	1ad3      	subs	r3, r2, r3
 80105d4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80105d6:	693b      	ldr	r3, [r7, #16]
 80105d8:	7858      	ldrb	r0, [r3, #1]
 80105da:	6a3b      	ldr	r3, [r7, #32]
 80105dc:	697a      	ldr	r2, [r7, #20]
 80105de:	69f9      	ldr	r1, [r7, #28]
 80105e0:	f7fc f974 	bl	800c8cc <disk_write>
 80105e4:	4603      	mov	r3, r0
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d005      	beq.n	80105f6 <f_write+0x20c>
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	2201      	movs	r2, #1
 80105ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80105f2:	2301      	movs	r3, #1
 80105f4:	e0a8      	b.n	8010748 <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80105fa:	697b      	ldr	r3, [r7, #20]
 80105fc:	1ad3      	subs	r3, r2, r3
 80105fe:	6a3a      	ldr	r2, [r7, #32]
 8010600:	429a      	cmp	r2, r3
 8010602:	d917      	bls.n	8010634 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	f103 0054 	add.w	r0, r3, #84	; 0x54
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801060e:	697b      	ldr	r3, [r7, #20]
 8010610:	1ad3      	subs	r3, r2, r3
 8010612:	025b      	lsls	r3, r3, #9
 8010614:	69fa      	ldr	r2, [r7, #28]
 8010616:	4413      	add	r3, r2
 8010618:	f44f 7200 	mov.w	r2, #512	; 0x200
 801061c:	4619      	mov	r1, r3
 801061e:	f7fc fb78 	bl	800cd12 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801062c:	b2da      	uxtb	r2, r3
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010634:	6a3b      	ldr	r3, [r7, #32]
 8010636:	025b      	lsls	r3, r3, #9
 8010638:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801063a:	e04a      	b.n	80106d2 <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010640:	697a      	ldr	r2, [r7, #20]
 8010642:	429a      	cmp	r2, r3
 8010644:	d01b      	beq.n	801067e <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010652:	4290      	cmp	r0, r2
 8010654:	eb71 0303 	sbcs.w	r3, r1, r3
 8010658:	d211      	bcs.n	801067e <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	7858      	ldrb	r0, [r3, #1]
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010664:	2301      	movs	r3, #1
 8010666:	697a      	ldr	r2, [r7, #20]
 8010668:	f7fc f910 	bl	800c88c <disk_read>
 801066c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801066e:	2b00      	cmp	r3, #0
 8010670:	d005      	beq.n	801067e <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	2201      	movs	r2, #1
 8010676:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801067a:	2301      	movs	r3, #1
 801067c:	e064      	b.n	8010748 <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	697a      	ldr	r2, [r7, #20]
 8010682:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801068a:	4613      	mov	r3, r2
 801068c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010690:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010694:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	429a      	cmp	r2, r3
 801069c:	d901      	bls.n	80106a2 <f_write+0x2b8>
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80106ae:	4613      	mov	r3, r2
 80106b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106b4:	440b      	add	r3, r1
 80106b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106b8:	69f9      	ldr	r1, [r7, #28]
 80106ba:	4618      	mov	r0, r3
 80106bc:	f7fc fb29 	bl	800cd12 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80106c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80106ca:	b2da      	uxtb	r2, r3
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80106d2:	69fa      	ldr	r2, [r7, #28]
 80106d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d6:	4413      	add	r3, r2
 80106d8:	61fb      	str	r3, [r7, #28]
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80106e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80106e2:	2000      	movs	r0, #0
 80106e4:	4688      	mov	r8, r1
 80106e6:	4681      	mov	r9, r0
 80106e8:	eb12 0a08 	adds.w	sl, r2, r8
 80106ec:	eb43 0b09 	adc.w	fp, r3, r9
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80106fc:	68f9      	ldr	r1, [r7, #12]
 80106fe:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 8010702:	4282      	cmp	r2, r0
 8010704:	eb73 0c01 	sbcs.w	ip, r3, r1
 8010708:	d201      	bcs.n	801070e <f_write+0x324>
 801070a:	4602      	mov	r2, r0
 801070c:	460b      	mov	r3, r1
 801070e:	68f9      	ldr	r1, [r7, #12]
 8010710:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	681a      	ldr	r2, [r3, #0]
 8010718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071a:	441a      	add	r2, r3
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	601a      	str	r2, [r3, #0]
 8010720:	687a      	ldr	r2, [r7, #4]
 8010722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010724:	1ad3      	subs	r3, r2, r3
 8010726:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	2b00      	cmp	r3, #0
 801072c:	f47f aea5 	bne.w	801047a <f_write+0x90>
 8010730:	e000      	b.n	8010734 <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010732:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801073a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801073e:	b2da      	uxtb	r2, r3
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8010746:	2300      	movs	r3, #0
}
 8010748:	4618      	mov	r0, r3
 801074a:	3730      	adds	r7, #48	; 0x30
 801074c:	46bd      	mov	sp, r7
 801074e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010752 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010752:	b580      	push	{r7, lr}
 8010754:	b09a      	sub	sp, #104	; 0x68
 8010756:	af00      	add	r7, sp, #0
 8010758:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010760:	4611      	mov	r1, r2
 8010762:	4618      	mov	r0, r3
 8010764:	f7ff fb04 	bl	800fd70 <validate>
 8010768:	4603      	mov	r3, r0
 801076a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801076e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010772:	2b00      	cmp	r3, #0
 8010774:	f040 8105 	bne.w	8010982 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801077e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010782:	2b00      	cmp	r3, #0
 8010784:	f000 80fd 	beq.w	8010982 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801078e:	b25b      	sxtb	r3, r3
 8010790:	2b00      	cmp	r3, #0
 8010792:	da17      	bge.n	80107c4 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010794:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010796:	7858      	ldrb	r0, [r3, #1]
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80107a2:	2301      	movs	r3, #1
 80107a4:	f7fc f892 	bl	800c8cc <disk_write>
 80107a8:	4603      	mov	r3, r0
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d001      	beq.n	80107b2 <f_sync+0x60>
 80107ae:	2301      	movs	r3, #1
 80107b0:	e0e9      	b.n	8010986 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80107b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107bc:	b2da      	uxtb	r2, r3
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80107c4:	f7f9 fa26 	bl	8009c14 <get_fattime>
 80107c8:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80107ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107cc:	781b      	ldrb	r3, [r3, #0]
 80107ce:	2b04      	cmp	r3, #4
 80107d0:	f040 808c 	bne.w	80108ec <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	4618      	mov	r0, r3
 80107d8:	f7fd f876 	bl	800d8c8 <fill_first_frag>
 80107dc:	4603      	mov	r3, r0
 80107de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 80107e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d10a      	bne.n	8010800 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107f0:	f04f 32ff 	mov.w	r2, #4294967295
 80107f4:	4619      	mov	r1, r3
 80107f6:	f7fd f896 	bl	800d926 <fill_last_frag>
 80107fa:	4603      	mov	r3, r0
 80107fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 8010800:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010804:	2b00      	cmp	r3, #0
 8010806:	f040 80bc 	bne.w	8010982 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 801080a:	687a      	ldr	r2, [r7, #4]
 801080c:	f107 0308 	add.w	r3, r7, #8
 8010810:	4611      	mov	r1, r2
 8010812:	4618      	mov	r0, r3
 8010814:	f7fd ffb8 	bl	800e788 <load_obj_dir>
 8010818:	4603      	mov	r3, r0
 801081a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 801081e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010822:	2b00      	cmp	r3, #0
 8010824:	f040 80ad 	bne.w	8010982 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8010828:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801082a:	691b      	ldr	r3, [r3, #16]
 801082c:	3304      	adds	r3, #4
 801082e:	781a      	ldrb	r2, [r3, #0]
 8010830:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010832:	691b      	ldr	r3, [r3, #16]
 8010834:	3304      	adds	r3, #4
 8010836:	f042 0220 	orr.w	r2, r2, #32
 801083a:	b2d2      	uxtb	r2, r2
 801083c:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	79da      	ldrb	r2, [r3, #7]
 8010842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010844:	691b      	ldr	r3, [r3, #16]
 8010846:	3321      	adds	r3, #33	; 0x21
 8010848:	f042 0201 	orr.w	r2, r2, #1
 801084c:	b2d2      	uxtb	r2, r2
 801084e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8010850:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010852:	691b      	ldr	r3, [r3, #16]
 8010854:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	689b      	ldr	r3, [r3, #8]
 801085c:	4619      	mov	r1, r3
 801085e:	4610      	mov	r0, r2
 8010860:	f7fc f9a3 	bl	800cbaa <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8010864:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010866:	691b      	ldr	r3, [r3, #16]
 8010868:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010872:	4608      	mov	r0, r1
 8010874:	f7fc f9c5 	bl	800cc02 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8010878:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801087a:	691b      	ldr	r3, [r3, #16]
 801087c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010886:	4608      	mov	r0, r1
 8010888:	f7fc f9bb 	bl	800cc02 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 801088c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801088e:	691b      	ldr	r3, [r3, #16]
 8010890:	330c      	adds	r3, #12
 8010892:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010894:	4618      	mov	r0, r3
 8010896:	f7fc f988 	bl	800cbaa <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 801089a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801089c:	691b      	ldr	r3, [r3, #16]
 801089e:	3315      	adds	r3, #21
 80108a0:	2200      	movs	r2, #0
 80108a2:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 80108a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80108a6:	691b      	ldr	r3, [r3, #16]
 80108a8:	3310      	adds	r3, #16
 80108aa:	2100      	movs	r1, #0
 80108ac:	4618      	mov	r0, r3
 80108ae:	f7fc f97c 	bl	800cbaa <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 80108b2:	f107 0308 	add.w	r3, r7, #8
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7fd ff9c 	bl	800e7f4 <store_xdir>
 80108bc:	4603      	mov	r3, r0
 80108be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80108c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d15b      	bne.n	8010982 <f_sync+0x230>
							res = sync_fs(fs);
 80108ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7fc fc7d 	bl	800d1cc <sync_fs>
 80108d2:	4603      	mov	r3, r0
 80108d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80108de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80108e2:	b2da      	uxtb	r2, r3
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80108ea:	e04a      	b.n	8010982 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80108ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108f2:	4619      	mov	r1, r3
 80108f4:	4610      	mov	r0, r2
 80108f6:	f7fc fc3b 	bl	800d170 <move_window>
 80108fa:	4603      	mov	r3, r0
 80108fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8010900:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010904:	2b00      	cmp	r3, #0
 8010906:	d13c      	bne.n	8010982 <f_sync+0x230>
					dir = fp->dir_ptr;
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801090c:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801090e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010910:	330b      	adds	r3, #11
 8010912:	781a      	ldrb	r2, [r3, #0]
 8010914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010916:	330b      	adds	r3, #11
 8010918:	f042 0220 	orr.w	r2, r2, #32
 801091c:	b2d2      	uxtb	r2, r2
 801091e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	6818      	ldr	r0, [r3, #0]
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	689b      	ldr	r3, [r3, #8]
 8010928:	461a      	mov	r2, r3
 801092a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801092c:	f7fd fbfb 	bl	800e126 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010932:	f103 001c 	add.w	r0, r3, #28
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801093c:	4613      	mov	r3, r2
 801093e:	4619      	mov	r1, r3
 8010940:	f7fc f933 	bl	800cbaa <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010946:	3316      	adds	r3, #22
 8010948:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801094a:	4618      	mov	r0, r3
 801094c:	f7fc f92d 	bl	800cbaa <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010952:	3312      	adds	r3, #18
 8010954:	2100      	movs	r1, #0
 8010956:	4618      	mov	r0, r3
 8010958:	f7fc f90c 	bl	800cb74 <st_word>
					fs->wflag = 1;
 801095c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801095e:	2201      	movs	r2, #1
 8010960:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010962:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010964:	4618      	mov	r0, r3
 8010966:	f7fc fc31 	bl	800d1cc <sync_fs>
 801096a:	4603      	mov	r3, r0
 801096c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801097a:	b2da      	uxtb	r2, r3
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010982:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010986:	4618      	mov	r0, r3
 8010988:	3768      	adds	r7, #104	; 0x68
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}

0801098e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801098e:	b580      	push	{r7, lr}
 8010990:	b084      	sub	sp, #16
 8010992:	af00      	add	r7, sp, #0
 8010994:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f7ff fedb 	bl	8010752 <f_sync>
 801099c:	4603      	mov	r3, r0
 801099e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80109a0:	7bfb      	ldrb	r3, [r7, #15]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d118      	bne.n	80109d8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f107 0208 	add.w	r2, r7, #8
 80109ac:	4611      	mov	r1, r2
 80109ae:	4618      	mov	r0, r3
 80109b0:	f7ff f9de 	bl	800fd70 <validate>
 80109b4:	4603      	mov	r3, r0
 80109b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80109b8:	7bfb      	ldrb	r3, [r7, #15]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d10c      	bne.n	80109d8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109c2:	4618      	mov	r0, r3
 80109c4:	f7fc fb30 	bl	800d028 <dec_lock>
 80109c8:	4603      	mov	r3, r0
 80109ca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80109cc:	7bfb      	ldrb	r3, [r7, #15]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d102      	bne.n	80109d8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2200      	movs	r2, #0
 80109d6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80109d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3710      	adds	r7, #16
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}

080109e2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80109e2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80109e6:	b0b6      	sub	sp, #216	; 0xd8
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80109ee:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80109f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80109f6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80109fa:	4619      	mov	r1, r3
 80109fc:	4610      	mov	r0, r2
 80109fe:	f7ff f9b7 	bl	800fd70 <validate>
 8010a02:	4603      	mov	r3, r0
 8010a04:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010a08:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d105      	bne.n	8010a1c <f_lseek+0x3a>
 8010a10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a14:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010a18:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 8010a1c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d111      	bne.n	8010a48 <f_lseek+0x66>
 8010a24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010a28:	781b      	ldrb	r3, [r3, #0]
 8010a2a:	2b04      	cmp	r3, #4
 8010a2c:	d10c      	bne.n	8010a48 <f_lseek+0x66>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8010a2e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8010a32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a38:	f04f 32ff 	mov.w	r2, #4294967295
 8010a3c:	4619      	mov	r1, r3
 8010a3e:	f7fc ff72 	bl	800d926 <fill_last_frag>
 8010a42:	4603      	mov	r3, r0
 8010a44:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010a48:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d002      	beq.n	8010a56 <f_lseek+0x74>
 8010a50:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8010a54:	e38c      	b.n	8011170 <f_lseek+0x78e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010a56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	f000 8141 	beq.w	8010ce4 <f_lseek+0x302>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010a62:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a6a:	bf08      	it	eq
 8010a6c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8010a70:	f040 8087 	bne.w	8010b82 <f_lseek+0x1a0>
			tbl = fp->cltbl;
 8010a74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010a7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010a82:	1d1a      	adds	r2, r3, #4
 8010a84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010a8e:	2302      	movs	r3, #2
 8010a90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010a94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a98:	689b      	ldr	r3, [r3, #8]
 8010a9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			if (cl) {
 8010a9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d058      	beq.n	8010b58 <f_lseek+0x176>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010aa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010aae:	2300      	movs	r3, #0
 8010ab0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010ab4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010ab8:	3302      	adds	r3, #2
 8010aba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					do {
						pcl = cl; ncl++;
 8010abe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010ac2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010ac6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010aca:	3301      	adds	r3, #1
 8010acc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
						cl = get_fat(&fp->obj, cl);
 8010ad0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010ad4:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f7fc fc05 	bl	800d2e8 <get_fat>
 8010ade:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010ae2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010ae6:	2b01      	cmp	r3, #1
 8010ae8:	d806      	bhi.n	8010af8 <f_lseek+0x116>
 8010aea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010aee:	2202      	movs	r2, #2
 8010af0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010af4:	2302      	movs	r3, #2
 8010af6:	e33b      	b.n	8011170 <f_lseek+0x78e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010af8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b00:	d106      	bne.n	8010b10 <f_lseek+0x12e>
 8010b02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b06:	2201      	movs	r2, #1
 8010b08:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010b0c:	2301      	movs	r3, #1
 8010b0e:	e32f      	b.n	8011170 <f_lseek+0x78e>
					} while (cl == pcl + 1);
 8010b10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010b14:	3301      	adds	r3, #1
 8010b16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	d0cf      	beq.n	8010abe <f_lseek+0xdc>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010b1e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010b22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010b26:	429a      	cmp	r2, r3
 8010b28:	d80f      	bhi.n	8010b4a <f_lseek+0x168>
						*tbl++ = ncl; *tbl++ = tcl;
 8010b2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010b2e:	1d1a      	adds	r2, r3, #4
 8010b30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010b34:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010b38:	601a      	str	r2, [r3, #0]
 8010b3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010b3e:	1d1a      	adds	r2, r3, #4
 8010b40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010b44:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8010b48:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010b4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010b4e:	69db      	ldr	r3, [r3, #28]
 8010b50:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d3a6      	bcc.n	8010aa6 <f_lseek+0xc4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010b58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b5e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010b62:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010b64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010b68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	d804      	bhi.n	8010b7a <f_lseek+0x198>
				*tbl = 0;		/* Terminate table */
 8010b70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010b74:	2200      	movs	r2, #0
 8010b76:	601a      	str	r2, [r3, #0]
 8010b78:	e2f8      	b.n	801116c <f_lseek+0x78a>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010b7a:	2311      	movs	r3, #17
 8010b7c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8010b80:	e2f4      	b.n	801116c <f_lseek+0x78a>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010b82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b86:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8010b8a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010b8e:	4290      	cmp	r0, r2
 8010b90:	eb71 0303 	sbcs.w	r3, r1, r3
 8010b94:	d205      	bcs.n	8010ba2 <f_lseek+0x1c0>
 8010b96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b9a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010b9e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			fp->fptr = ofs;				/* Set file pointer */
 8010ba2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8010ba6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010baa:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			if (ofs) {
 8010bae:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010bb2:	4313      	orrs	r3, r2
 8010bb4:	f000 82da 	beq.w	801116c <f_lseek+0x78a>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010bb8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010bbc:	f112 3aff 	adds.w	sl, r2, #4294967295
 8010bc0:	f143 3bff 	adc.w	fp, r3, #4294967295
 8010bc4:	4652      	mov	r2, sl
 8010bc6:	465b      	mov	r3, fp
 8010bc8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8010bcc:	f7fd f891 	bl	800dcf2 <clmt_clust>
 8010bd0:	4602      	mov	r2, r0
 8010bd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010bd6:	641a      	str	r2, [r3, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 8010bd8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010bdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010be2:	4619      	mov	r1, r3
 8010be4:	4610      	mov	r0, r2
 8010be6:	f7fc fb5f 	bl	800d2a8 <clust2sect>
 8010bea:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010bee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d106      	bne.n	8010c04 <f_lseek+0x222>
 8010bf6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010bfa:	2202      	movs	r2, #2
 8010bfc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010c00:	2302      	movs	r3, #2
 8010c02:	e2b5      	b.n	8011170 <f_lseek+0x78e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010c04:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010c08:	1e54      	subs	r4, r2, #1
 8010c0a:	f143 35ff 	adc.w	r5, r3, #4294967295
 8010c0e:	f04f 0200 	mov.w	r2, #0
 8010c12:	f04f 0300 	mov.w	r3, #0
 8010c16:	0a62      	lsrs	r2, r4, #9
 8010c18:	ea42 52c5 	orr.w	r2, r2, r5, lsl #23
 8010c1c:	0a6b      	lsrs	r3, r5, #9
 8010c1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010c22:	895b      	ldrh	r3, [r3, #10]
 8010c24:	3b01      	subs	r3, #1
 8010c26:	4013      	ands	r3, r2
 8010c28:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010c2c:	4413      	add	r3, r2
 8010c2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010c32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c36:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010c3a:	f3c2 0808 	ubfx	r8, r2, #0, #9
 8010c3e:	f04f 0900 	mov.w	r9, #0
 8010c42:	ea58 0309 	orrs.w	r3, r8, r9
 8010c46:	f000 8291 	beq.w	801116c <f_lseek+0x78a>
 8010c4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c50:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010c54:	429a      	cmp	r2, r3
 8010c56:	f000 8289 	beq.w	801116c <f_lseek+0x78a>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010c5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c62:	b25b      	sxtb	r3, r3
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	da21      	bge.n	8010cac <f_lseek+0x2ca>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010c68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010c6c:	7858      	ldrb	r0, [r3, #1]
 8010c6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c72:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010c76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010c7c:	2301      	movs	r3, #1
 8010c7e:	f7fb fe25 	bl	800c8cc <disk_write>
 8010c82:	4603      	mov	r3, r0
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d006      	beq.n	8010c96 <f_lseek+0x2b4>
 8010c88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c8c:	2201      	movs	r2, #1
 8010c8e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010c92:	2301      	movs	r3, #1
 8010c94:	e26c      	b.n	8011170 <f_lseek+0x78e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010c96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ca2:	b2da      	uxtb	r2, r3
 8010ca4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010ca8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010cac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010cb0:	7858      	ldrb	r0, [r3, #1]
 8010cb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010cb6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010cba:	2301      	movs	r3, #1
 8010cbc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010cc0:	f7fb fde4 	bl	800c88c <disk_read>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d006      	beq.n	8010cd8 <f_lseek+0x2f6>
 8010cca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010cce:	2201      	movs	r2, #1
 8010cd0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	e24b      	b.n	8011170 <f_lseek+0x78e>
#endif
					fp->sect = dsc;
 8010cd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010cdc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010ce0:	645a      	str	r2, [r3, #68]	; 0x44
 8010ce2:	e243      	b.n	801116c <f_lseek+0x78a>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 8010ce4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010ce8:	781b      	ldrb	r3, [r3, #0]
 8010cea:	2b04      	cmp	r3, #4
 8010cec:	d009      	beq.n	8010d02 <f_lseek+0x320>
 8010cee:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010cf2:	2b01      	cmp	r3, #1
 8010cf4:	d305      	bcc.n	8010d02 <f_lseek+0x320>
 8010cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8010cfa:	f04f 0300 	mov.w	r3, #0
 8010cfe:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010d02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010d06:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8010d0a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010d0e:	4290      	cmp	r0, r2
 8010d10:	eb71 0303 	sbcs.w	r3, r1, r3
 8010d14:	d20d      	bcs.n	8010d32 <f_lseek+0x350>
 8010d16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010d1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d1e:	f003 0302 	and.w	r3, r3, #2
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d105      	bne.n	8010d32 <f_lseek+0x350>
			ofs = fp->obj.objsize;
 8010d26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010d2a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010d2e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		}
		ifptr = fp->fptr;
 8010d32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010d36:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010d3a:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
		fp->fptr = nsect = 0;
 8010d3e:	2300      	movs	r3, #0
 8010d40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010d44:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8010d48:	f04f 0200 	mov.w	r2, #0
 8010d4c:	f04f 0300 	mov.w	r3, #0
 8010d50:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if (ofs) {
 8010d54:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010d58:	4313      	orrs	r3, r2
 8010d5a:	f000 818f 	beq.w	801107c <f_lseek+0x69a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010d5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010d62:	895b      	ldrh	r3, [r3, #10]
 8010d64:	025b      	lsls	r3, r3, #9
 8010d66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			if (ifptr > 0 &&
 8010d6a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8010d6e:	4313      	orrs	r3, r2
 8010d70:	d06b      	beq.n	8010e4a <f_lseek+0x468>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010d72:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010d76:	1e51      	subs	r1, r2, #1
 8010d78:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8010d7c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8010d80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010d84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010d88:	2200      	movs	r2, #0
 8010d8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8010d8c:	67fa      	str	r2, [r7, #124]	; 0x7c
 8010d8e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8010d92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8010d96:	f7ef fa83 	bl	80002a0 <__aeabi_uldivmod>
 8010d9a:	4602      	mov	r2, r0
 8010d9c:	460b      	mov	r3, r1
 8010d9e:	4614      	mov	r4, r2
 8010da0:	461d      	mov	r5, r3
 8010da2:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8010da6:	1e51      	subs	r1, r2, #1
 8010da8:	6739      	str	r1, [r7, #112]	; 0x70
 8010daa:	f143 33ff 	adc.w	r3, r3, #4294967295
 8010dae:	677b      	str	r3, [r7, #116]	; 0x74
 8010db0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010db4:	2200      	movs	r2, #0
 8010db6:	66bb      	str	r3, [r7, #104]	; 0x68
 8010db8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010dba:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010dbe:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010dc2:	f7ef fa6d 	bl	80002a0 <__aeabi_uldivmod>
 8010dc6:	4602      	mov	r2, r0
 8010dc8:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 8010dca:	4294      	cmp	r4, r2
 8010dcc:	eb75 0303 	sbcs.w	r3, r5, r3
 8010dd0:	d33b      	bcc.n	8010e4a <f_lseek+0x468>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010dd2:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8010dd6:	1e51      	subs	r1, r2, #1
 8010dd8:	6639      	str	r1, [r7, #96]	; 0x60
 8010dda:	f143 33ff 	adc.w	r3, r3, #4294967295
 8010dde:	667b      	str	r3, [r7, #100]	; 0x64
 8010de0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010de4:	3b01      	subs	r3, #1
 8010de6:	2200      	movs	r2, #0
 8010de8:	65bb      	str	r3, [r7, #88]	; 0x58
 8010dea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8010dec:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8010df0:	460b      	mov	r3, r1
 8010df2:	43db      	mvns	r3, r3
 8010df4:	653b      	str	r3, [r7, #80]	; 0x50
 8010df6:	4613      	mov	r3, r2
 8010df8:	43db      	mvns	r3, r3
 8010dfa:	657b      	str	r3, [r7, #84]	; 0x54
 8010dfc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8010e00:	4623      	mov	r3, r4
 8010e02:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010e06:	4602      	mov	r2, r0
 8010e08:	4013      	ands	r3, r2
 8010e0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8010e0c:	462b      	mov	r3, r5
 8010e0e:	460a      	mov	r2, r1
 8010e10:	4013      	ands	r3, r2
 8010e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010e14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e18:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8010e1c:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				ofs -= fp->fptr;
 8010e20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e24:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010e28:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010e2c:	1a14      	subs	r4, r2, r0
 8010e2e:	60bc      	str	r4, [r7, #8]
 8010e30:	eb63 0301 	sbc.w	r3, r3, r1
 8010e34:	60fb      	str	r3, [r7, #12]
 8010e36:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010e3a:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				clst = fp->clust;
 8010e3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010e48:	e031      	b.n	8010eae <f_lseek+0x4cc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010e4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e4e:	689b      	ldr	r3, [r3, #8]
 8010e50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010e54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d123      	bne.n	8010ea4 <f_lseek+0x4c2>
					clst = create_chain(&fp->obj, 0);
 8010e5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e60:	2100      	movs	r1, #0
 8010e62:	4618      	mov	r0, r3
 8010e64:	f7fc fe44 	bl	800daf0 <create_chain>
 8010e68:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010e6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010e70:	2b01      	cmp	r3, #1
 8010e72:	d106      	bne.n	8010e82 <f_lseek+0x4a0>
 8010e74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e78:	2202      	movs	r2, #2
 8010e7a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010e7e:	2302      	movs	r3, #2
 8010e80:	e176      	b.n	8011170 <f_lseek+0x78e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010e82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e8a:	d106      	bne.n	8010e9a <f_lseek+0x4b8>
 8010e8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e90:	2201      	movs	r2, #1
 8010e92:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010e96:	2301      	movs	r3, #1
 8010e98:	e16a      	b.n	8011170 <f_lseek+0x78e>
					fp->obj.sclust = clst;
 8010e9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010e9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010ea2:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 8010ea4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010ea8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010eac:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (clst != 0) {
 8010eae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	f000 80e2 	beq.w	801107c <f_lseek+0x69a>
				while (ofs > bcs) {						/* Cluster following loop */
 8010eb8:	e090      	b.n	8010fdc <f_lseek+0x5fa>
					ofs -= bcs; fp->fptr += bcs;
 8010eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	643b      	str	r3, [r7, #64]	; 0x40
 8010ec2:	647a      	str	r2, [r7, #68]	; 0x44
 8010ec4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010ec8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8010ecc:	4621      	mov	r1, r4
 8010ece:	1a51      	subs	r1, r2, r1
 8010ed0:	6039      	str	r1, [r7, #0]
 8010ed2:	4629      	mov	r1, r5
 8010ed4:	eb63 0301 	sbc.w	r3, r3, r1
 8010ed8:	607b      	str	r3, [r7, #4]
 8010eda:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010ede:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
 8010ee2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010ee6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010eea:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8010eee:	2000      	movs	r0, #0
 8010ef0:	63b9      	str	r1, [r7, #56]	; 0x38
 8010ef2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8010ef4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8010ef8:	4621      	mov	r1, r4
 8010efa:	1851      	adds	r1, r2, r1
 8010efc:	6339      	str	r1, [r7, #48]	; 0x30
 8010efe:	4629      	mov	r1, r5
 8010f00:	414b      	adcs	r3, r1
 8010f02:	637b      	str	r3, [r7, #52]	; 0x34
 8010f04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f08:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8010f0c:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010f10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010f18:	f003 0302 	and.w	r3, r3, #2
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d031      	beq.n	8010f84 <f_lseek+0x5a2>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 8010f20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f24:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010f28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f2c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010f30:	4282      	cmp	r2, r0
 8010f32:	418b      	sbcs	r3, r1
 8010f34:	d212      	bcs.n	8010f5c <f_lseek+0x57a>
							fp->obj.objsize = fp->fptr;
 8010f36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f3a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010f3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f42:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 8010f46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010f4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f52:	b2db      	uxtb	r3, r3
 8010f54:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010f58:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010f5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f60:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8010f64:	4618      	mov	r0, r3
 8010f66:	f7fc fdc3 	bl	800daf0 <create_chain>
 8010f6a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010f6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d10f      	bne.n	8010f96 <f_lseek+0x5b4>
							ofs = 0; break;
 8010f76:	f04f 0200 	mov.w	r2, #0
 8010f7a:	f04f 0300 	mov.w	r3, #0
 8010f7e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8010f82:	e03b      	b.n	8010ffc <f_lseek+0x61a>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010f84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f88:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f7fc f9ab 	bl	800d2e8 <get_fat>
 8010f92:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010f96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f9e:	d106      	bne.n	8010fae <f_lseek+0x5cc>
 8010fa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010fa4:	2201      	movs	r2, #1
 8010fa6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010faa:	2301      	movs	r3, #1
 8010fac:	e0e0      	b.n	8011170 <f_lseek+0x78e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010fae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010fb2:	2b01      	cmp	r3, #1
 8010fb4:	d906      	bls.n	8010fc4 <f_lseek+0x5e2>
 8010fb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010fba:	69da      	ldr	r2, [r3, #28]
 8010fbc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010fc0:	4293      	cmp	r3, r2
 8010fc2:	d306      	bcc.n	8010fd2 <f_lseek+0x5f0>
 8010fc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010fc8:	2202      	movs	r2, #2
 8010fca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010fce:	2302      	movs	r3, #2
 8010fd0:	e0ce      	b.n	8011170 <f_lseek+0x78e>
					fp->clust = clst;
 8010fd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010fd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010fda:	6413      	str	r3, [r2, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 8010fdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	62bb      	str	r3, [r7, #40]	; 0x28
 8010fe4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010fe6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010fea:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8010fee:	4621      	mov	r1, r4
 8010ff0:	4291      	cmp	r1, r2
 8010ff2:	4629      	mov	r1, r5
 8010ff4:	eb71 0303 	sbcs.w	r3, r1, r3
 8010ff8:	f4ff af5f 	bcc.w	8010eba <f_lseek+0x4d8>
				}
				fp->fptr += ofs;
 8010ffc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011000:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8011004:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011008:	1884      	adds	r4, r0, r2
 801100a:	623c      	str	r4, [r7, #32]
 801100c:	eb41 0303 	adc.w	r3, r1, r3
 8011010:	627b      	str	r3, [r7, #36]	; 0x24
 8011012:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011016:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801101a:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				if (ofs % SS(fs)) {
 801101e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011022:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8011026:	61bb      	str	r3, [r7, #24]
 8011028:	2300      	movs	r3, #0
 801102a:	61fb      	str	r3, [r7, #28]
 801102c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8011030:	460b      	mov	r3, r1
 8011032:	4313      	orrs	r3, r2
 8011034:	d022      	beq.n	801107c <f_lseek+0x69a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011036:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801103a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 801103e:	4618      	mov	r0, r3
 8011040:	f7fc f932 	bl	800d2a8 <clust2sect>
 8011044:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011048:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801104c:	2b00      	cmp	r3, #0
 801104e:	d106      	bne.n	801105e <f_lseek+0x67c>
 8011050:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011054:	2202      	movs	r2, #2
 8011056:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801105a:	2302      	movs	r3, #2
 801105c:	e088      	b.n	8011170 <f_lseek+0x78e>
					nsect += (DWORD)(ofs / SS(fs));
 801105e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8011062:	f04f 0200 	mov.w	r2, #0
 8011066:	f04f 0300 	mov.w	r3, #0
 801106a:	0a42      	lsrs	r2, r0, #9
 801106c:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8011070:	0a4b      	lsrs	r3, r1, #9
 8011072:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011076:	4413      	add	r3, r2
 8011078:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801107c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011080:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011084:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8011088:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 801108c:	4290      	cmp	r0, r2
 801108e:	eb71 0303 	sbcs.w	r3, r1, r3
 8011092:	d212      	bcs.n	80110ba <f_lseek+0x6d8>
			fp->obj.objsize = fp->fptr;
 8011094:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011098:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801109c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80110a0:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 80110a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80110ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110b0:	b2da      	uxtb	r2, r3
 80110b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80110ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80110c2:	f3c2 0308 	ubfx	r3, r2, #0, #9
 80110c6:	613b      	str	r3, [r7, #16]
 80110c8:	2300      	movs	r3, #0
 80110ca:	617b      	str	r3, [r7, #20]
 80110cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80110d0:	460b      	mov	r3, r1
 80110d2:	4313      	orrs	r3, r2
 80110d4:	d04a      	beq.n	801116c <f_lseek+0x78a>
 80110d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110dc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80110e0:	429a      	cmp	r2, r3
 80110e2:	d043      	beq.n	801116c <f_lseek+0x78a>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80110e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80110ec:	b25b      	sxtb	r3, r3
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	da21      	bge.n	8011136 <f_lseek+0x754>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80110f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80110f6:	7858      	ldrb	r0, [r3, #1]
 80110f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110fc:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8011100:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011106:	2301      	movs	r3, #1
 8011108:	f7fb fbe0 	bl	800c8cc <disk_write>
 801110c:	4603      	mov	r3, r0
 801110e:	2b00      	cmp	r3, #0
 8011110:	d006      	beq.n	8011120 <f_lseek+0x73e>
 8011112:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011116:	2201      	movs	r2, #1
 8011118:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801111c:	2301      	movs	r3, #1
 801111e:	e027      	b.n	8011170 <f_lseek+0x78e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011120:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011124:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801112c:	b2da      	uxtb	r2, r3
 801112e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011132:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011136:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801113a:	7858      	ldrb	r0, [r3, #1]
 801113c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011140:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8011144:	2301      	movs	r3, #1
 8011146:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801114a:	f7fb fb9f 	bl	800c88c <disk_read>
 801114e:	4603      	mov	r3, r0
 8011150:	2b00      	cmp	r3, #0
 8011152:	d006      	beq.n	8011162 <f_lseek+0x780>
 8011154:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011158:	2201      	movs	r2, #1
 801115a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801115e:	2301      	movs	r3, #1
 8011160:	e006      	b.n	8011170 <f_lseek+0x78e>
#endif
			fp->sect = nsect;
 8011162:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011166:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801116a:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 801116c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8011170:	4618      	mov	r0, r3
 8011172:	37d8      	adds	r7, #216	; 0xd8
 8011174:	46bd      	mov	sp, r7
 8011176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801117a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 801117a:	b580      	push	{r7, lr}
 801117c:	b09a      	sub	sp, #104	; 0x68
 801117e:	af00      	add	r7, sp, #0
 8011180:	60f8      	str	r0, [r7, #12]
 8011182:	60b9      	str	r1, [r7, #8]
 8011184:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8011186:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801118a:	f107 030c 	add.w	r3, r7, #12
 801118e:	2200      	movs	r2, #0
 8011190:	4618      	mov	r0, r3
 8011192:	f7fe fa91 	bl	800f6b8 <find_volume>
 8011196:	4603      	mov	r3, r0
 8011198:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801119c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	f040 80e6 	bne.w	8011372 <f_getfree+0x1f8>
		*fatfs = fs;				/* Return ptr to the fs object */
 80111a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80111ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111ae:	699a      	ldr	r2, [r3, #24]
 80111b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111b2:	69db      	ldr	r3, [r3, #28]
 80111b4:	3b02      	subs	r3, #2
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d804      	bhi.n	80111c4 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80111ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111bc:	699a      	ldr	r2, [r3, #24]
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	601a      	str	r2, [r3, #0]
 80111c2:	e0d6      	b.n	8011372 <f_getfree+0x1f8>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80111c4:	2300      	movs	r3, #0
 80111c6:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80111c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	2b01      	cmp	r3, #1
 80111ce:	d128      	bne.n	8011222 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80111d0:	2302      	movs	r3, #2
 80111d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80111d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111d6:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 80111d8:	f107 0310 	add.w	r3, r7, #16
 80111dc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80111de:	4618      	mov	r0, r3
 80111e0:	f7fc f882 	bl	800d2e8 <get_fat>
 80111e4:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80111e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111ec:	d103      	bne.n	80111f6 <f_getfree+0x7c>
 80111ee:	2301      	movs	r3, #1
 80111f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80111f4:	e0b0      	b.n	8011358 <f_getfree+0x1de>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80111f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111f8:	2b01      	cmp	r3, #1
 80111fa:	d103      	bne.n	8011204 <f_getfree+0x8a>
 80111fc:	2302      	movs	r3, #2
 80111fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011202:	e0a9      	b.n	8011358 <f_getfree+0x1de>
					if (stat == 0) nfree++;
 8011204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011206:	2b00      	cmp	r3, #0
 8011208:	d102      	bne.n	8011210 <f_getfree+0x96>
 801120a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801120c:	3301      	adds	r3, #1
 801120e:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 8011210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011212:	3301      	adds	r3, #1
 8011214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011218:	69db      	ldr	r3, [r3, #28]
 801121a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801121c:	429a      	cmp	r2, r3
 801121e:	d3db      	bcc.n	80111d8 <f_getfree+0x5e>
 8011220:	e09a      	b.n	8011358 <f_getfree+0x1de>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 8011222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011224:	781b      	ldrb	r3, [r3, #0]
 8011226:	2b04      	cmp	r3, #4
 8011228:	d146      	bne.n	80112b8 <f_getfree+0x13e>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 801122a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801122c:	69db      	ldr	r3, [r3, #28]
 801122e:	3b02      	subs	r3, #2
 8011230:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 8011232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011236:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 8011238:	2300      	movs	r3, #0
 801123a:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 801123c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801123e:	2b00      	cmp	r3, #0
 8011240:	d10d      	bne.n	801125e <f_getfree+0xe4>
 8011242:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8011244:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011246:	1c5a      	adds	r2, r3, #1
 8011248:	65ba      	str	r2, [r7, #88]	; 0x58
 801124a:	4619      	mov	r1, r3
 801124c:	f7fb ff90 	bl	800d170 <move_window>
 8011250:	4603      	mov	r3, r0
 8011252:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011256:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801125a:	2b00      	cmp	r3, #0
 801125c:	d179      	bne.n	8011352 <f_getfree+0x1d8>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 801125e:	2308      	movs	r3, #8
 8011260:	64bb      	str	r3, [r7, #72]	; 0x48
 8011262:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011266:	4413      	add	r3, r2
 8011268:	3338      	adds	r3, #56	; 0x38
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8011270:	e013      	b.n	801129a <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 8011272:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011276:	f003 0301 	and.w	r3, r3, #1
 801127a:	2b00      	cmp	r3, #0
 801127c:	d102      	bne.n	8011284 <f_getfree+0x10a>
 801127e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011280:	3301      	adds	r3, #1
 8011282:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 8011284:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011288:	085b      	lsrs	r3, r3, #1
 801128a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 801128e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011290:	3b01      	subs	r3, #1
 8011292:	64bb      	str	r3, [r7, #72]	; 0x48
 8011294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011296:	3b01      	subs	r3, #1
 8011298:	65fb      	str	r3, [r7, #92]	; 0x5c
 801129a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801129c:	2b00      	cmp	r3, #0
 801129e:	d002      	beq.n	80112a6 <f_getfree+0x12c>
 80112a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d1e5      	bne.n	8011272 <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 80112a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80112a8:	3301      	adds	r3, #1
 80112aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112ae:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 80112b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d1c2      	bne.n	801123c <f_getfree+0xc2>
 80112b6:	e04f      	b.n	8011358 <f_getfree+0x1de>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80112b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80112ba:	69db      	ldr	r3, [r3, #28]
 80112bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80112be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80112c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112c2:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 80112c4:	2300      	movs	r3, #0
 80112c6:	657b      	str	r3, [r7, #84]	; 0x54
 80112c8:	2300      	movs	r3, #0
 80112ca:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 80112cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d113      	bne.n	80112fa <f_getfree+0x180>
							res = move_window(fs, sect++);
 80112d2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80112d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80112d6:	1c5a      	adds	r2, r3, #1
 80112d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80112da:	4619      	mov	r1, r3
 80112dc:	f7fb ff48 	bl	800d170 <move_window>
 80112e0:	4603      	mov	r3, r0
 80112e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 80112e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d133      	bne.n	8011356 <f_getfree+0x1dc>
							p = fs->win;
 80112ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80112f0:	3338      	adds	r3, #56	; 0x38
 80112f2:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 80112f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80112f8:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 80112fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80112fc:	781b      	ldrb	r3, [r3, #0]
 80112fe:	2b02      	cmp	r3, #2
 8011300:	d10f      	bne.n	8011322 <f_getfree+0x1a8>
							if (ld_word(p) == 0) nfree++;
 8011302:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8011304:	f7fb fb20 	bl	800c948 <ld_word>
 8011308:	4603      	mov	r3, r0
 801130a:	2b00      	cmp	r3, #0
 801130c:	d102      	bne.n	8011314 <f_getfree+0x19a>
 801130e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011310:	3301      	adds	r3, #1
 8011312:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 8011314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011316:	3302      	adds	r3, #2
 8011318:	653b      	str	r3, [r7, #80]	; 0x50
 801131a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801131c:	3b02      	subs	r3, #2
 801131e:	657b      	str	r3, [r7, #84]	; 0x54
 8011320:	e010      	b.n	8011344 <f_getfree+0x1ca>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8011322:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8011324:	f7fb fb28 	bl	800c978 <ld_dword>
 8011328:	4603      	mov	r3, r0
 801132a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801132e:	2b00      	cmp	r3, #0
 8011330:	d102      	bne.n	8011338 <f_getfree+0x1be>
 8011332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011334:	3301      	adds	r3, #1
 8011336:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 8011338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801133a:	3304      	adds	r3, #4
 801133c:	653b      	str	r3, [r7, #80]	; 0x50
 801133e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011340:	3b04      	subs	r3, #4
 8011342:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 8011344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011346:	3b01      	subs	r3, #1
 8011348:	65fb      	str	r3, [r7, #92]	; 0x5c
 801134a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801134c:	2b00      	cmp	r3, #0
 801134e:	d1bd      	bne.n	80112cc <f_getfree+0x152>
 8011350:	e002      	b.n	8011358 <f_getfree+0x1de>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 8011352:	bf00      	nop
 8011354:	e000      	b.n	8011358 <f_getfree+0x1de>
							if (res != FR_OK) break;
 8011356:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801135c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 801135e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011360:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011362:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8011364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011366:	791a      	ldrb	r2, [r3, #4]
 8011368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801136a:	f042 0201 	orr.w	r2, r2, #1
 801136e:	b2d2      	uxtb	r2, r2
 8011370:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8011372:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8011376:	4618      	mov	r0, r3
 8011378:	3768      	adds	r7, #104	; 0x68
 801137a:	46bd      	mov	sp, r7
 801137c:	bd80      	pop	{r7, pc}
	...

08011380 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011380:	b480      	push	{r7}
 8011382:	b087      	sub	sp, #28
 8011384:	af00      	add	r7, sp, #0
 8011386:	60f8      	str	r0, [r7, #12]
 8011388:	60b9      	str	r1, [r7, #8]
 801138a:	4613      	mov	r3, r2
 801138c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801138e:	2301      	movs	r3, #1
 8011390:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011392:	2300      	movs	r3, #0
 8011394:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011396:	4b1f      	ldr	r3, [pc, #124]	; (8011414 <FATFS_LinkDriverEx+0x94>)
 8011398:	7e1b      	ldrb	r3, [r3, #24]
 801139a:	b2db      	uxtb	r3, r3
 801139c:	2b03      	cmp	r3, #3
 801139e:	d831      	bhi.n	8011404 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80113a0:	4b1c      	ldr	r3, [pc, #112]	; (8011414 <FATFS_LinkDriverEx+0x94>)
 80113a2:	7e1b      	ldrb	r3, [r3, #24]
 80113a4:	b2db      	uxtb	r3, r3
 80113a6:	461a      	mov	r2, r3
 80113a8:	4b1a      	ldr	r3, [pc, #104]	; (8011414 <FATFS_LinkDriverEx+0x94>)
 80113aa:	2100      	movs	r1, #0
 80113ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80113ae:	4b19      	ldr	r3, [pc, #100]	; (8011414 <FATFS_LinkDriverEx+0x94>)
 80113b0:	7e1b      	ldrb	r3, [r3, #24]
 80113b2:	b2db      	uxtb	r3, r3
 80113b4:	4a17      	ldr	r2, [pc, #92]	; (8011414 <FATFS_LinkDriverEx+0x94>)
 80113b6:	009b      	lsls	r3, r3, #2
 80113b8:	4413      	add	r3, r2
 80113ba:	68fa      	ldr	r2, [r7, #12]
 80113bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80113be:	4b15      	ldr	r3, [pc, #84]	; (8011414 <FATFS_LinkDriverEx+0x94>)
 80113c0:	7e1b      	ldrb	r3, [r3, #24]
 80113c2:	b2db      	uxtb	r3, r3
 80113c4:	461a      	mov	r2, r3
 80113c6:	4b13      	ldr	r3, [pc, #76]	; (8011414 <FATFS_LinkDriverEx+0x94>)
 80113c8:	4413      	add	r3, r2
 80113ca:	79fa      	ldrb	r2, [r7, #7]
 80113cc:	751a      	strb	r2, [r3, #20]
    DiskNum = disk.nbr++;
 80113ce:	4b11      	ldr	r3, [pc, #68]	; (8011414 <FATFS_LinkDriverEx+0x94>)
 80113d0:	7e1b      	ldrb	r3, [r3, #24]
 80113d2:	b2db      	uxtb	r3, r3
 80113d4:	1c5a      	adds	r2, r3, #1
 80113d6:	b2d1      	uxtb	r1, r2
 80113d8:	4a0e      	ldr	r2, [pc, #56]	; (8011414 <FATFS_LinkDriverEx+0x94>)
 80113da:	7611      	strb	r1, [r2, #24]
 80113dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80113de:	7dbb      	ldrb	r3, [r7, #22]
 80113e0:	3330      	adds	r3, #48	; 0x30
 80113e2:	b2da      	uxtb	r2, r3
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	3301      	adds	r3, #1
 80113ec:	223a      	movs	r2, #58	; 0x3a
 80113ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	3302      	adds	r3, #2
 80113f4:	222f      	movs	r2, #47	; 0x2f
 80113f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	3303      	adds	r3, #3
 80113fc:	2200      	movs	r2, #0
 80113fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011400:	2300      	movs	r3, #0
 8011402:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011404:	7dfb      	ldrb	r3, [r7, #23]
}
 8011406:	4618      	mov	r0, r3
 8011408:	371c      	adds	r7, #28
 801140a:	46bd      	mov	sp, r7
 801140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011410:	4770      	bx	lr
 8011412:	bf00      	nop
 8011414:	2000227c 	.word	0x2000227c

08011418 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b082      	sub	sp, #8
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
 8011420:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011422:	2200      	movs	r2, #0
 8011424:	6839      	ldr	r1, [r7, #0]
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f7ff ffaa 	bl	8011380 <FATFS_LinkDriverEx>
 801142c:	4603      	mov	r3, r0
}
 801142e:	4618      	mov	r0, r3
 8011430:	3708      	adds	r7, #8
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}
	...

08011438 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8011438:	b480      	push	{r7}
 801143a:	b085      	sub	sp, #20
 801143c:	af00      	add	r7, sp, #0
 801143e:	4603      	mov	r3, r0
 8011440:	6039      	str	r1, [r7, #0]
 8011442:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011444:	88fb      	ldrh	r3, [r7, #6]
 8011446:	2b7f      	cmp	r3, #127	; 0x7f
 8011448:	d802      	bhi.n	8011450 <ff_convert+0x18>
		c = chr;
 801144a:	88fb      	ldrh	r3, [r7, #6]
 801144c:	81fb      	strh	r3, [r7, #14]
 801144e:	e025      	b.n	801149c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8011450:	683b      	ldr	r3, [r7, #0]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d00b      	beq.n	801146e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8011456:	88fb      	ldrh	r3, [r7, #6]
 8011458:	2bff      	cmp	r3, #255	; 0xff
 801145a:	d805      	bhi.n	8011468 <ff_convert+0x30>
 801145c:	88fb      	ldrh	r3, [r7, #6]
 801145e:	3b80      	subs	r3, #128	; 0x80
 8011460:	4a12      	ldr	r2, [pc, #72]	; (80114ac <ff_convert+0x74>)
 8011462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011466:	e000      	b.n	801146a <ff_convert+0x32>
 8011468:	2300      	movs	r3, #0
 801146a:	81fb      	strh	r3, [r7, #14]
 801146c:	e016      	b.n	801149c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801146e:	2300      	movs	r3, #0
 8011470:	81fb      	strh	r3, [r7, #14]
 8011472:	e009      	b.n	8011488 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011474:	89fb      	ldrh	r3, [r7, #14]
 8011476:	4a0d      	ldr	r2, [pc, #52]	; (80114ac <ff_convert+0x74>)
 8011478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801147c:	88fa      	ldrh	r2, [r7, #6]
 801147e:	429a      	cmp	r2, r3
 8011480:	d006      	beq.n	8011490 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8011482:	89fb      	ldrh	r3, [r7, #14]
 8011484:	3301      	adds	r3, #1
 8011486:	81fb      	strh	r3, [r7, #14]
 8011488:	89fb      	ldrh	r3, [r7, #14]
 801148a:	2b7f      	cmp	r3, #127	; 0x7f
 801148c:	d9f2      	bls.n	8011474 <ff_convert+0x3c>
 801148e:	e000      	b.n	8011492 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011490:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011492:	89fb      	ldrh	r3, [r7, #14]
 8011494:	3380      	adds	r3, #128	; 0x80
 8011496:	b29b      	uxth	r3, r3
 8011498:	b2db      	uxtb	r3, r3
 801149a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801149c:	89fb      	ldrh	r3, [r7, #14]
}
 801149e:	4618      	mov	r0, r3
 80114a0:	3714      	adds	r7, #20
 80114a2:	46bd      	mov	sp, r7
 80114a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a8:	4770      	bx	lr
 80114aa:	bf00      	nop
 80114ac:	08017094 	.word	0x08017094

080114b0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80114b0:	b480      	push	{r7}
 80114b2:	b087      	sub	sp, #28
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	4603      	mov	r3, r0
 80114b8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80114ba:	88fb      	ldrh	r3, [r7, #6]
 80114bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80114c0:	d201      	bcs.n	80114c6 <ff_wtoupper+0x16>
 80114c2:	4b3e      	ldr	r3, [pc, #248]	; (80115bc <ff_wtoupper+0x10c>)
 80114c4:	e000      	b.n	80114c8 <ff_wtoupper+0x18>
 80114c6:	4b3e      	ldr	r3, [pc, #248]	; (80115c0 <ff_wtoupper+0x110>)
 80114c8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80114ca:	697b      	ldr	r3, [r7, #20]
 80114cc:	1c9a      	adds	r2, r3, #2
 80114ce:	617a      	str	r2, [r7, #20]
 80114d0:	881b      	ldrh	r3, [r3, #0]
 80114d2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80114d4:	8a7b      	ldrh	r3, [r7, #18]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d068      	beq.n	80115ac <ff_wtoupper+0xfc>
 80114da:	88fa      	ldrh	r2, [r7, #6]
 80114dc:	8a7b      	ldrh	r3, [r7, #18]
 80114de:	429a      	cmp	r2, r3
 80114e0:	d364      	bcc.n	80115ac <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	1c9a      	adds	r2, r3, #2
 80114e6:	617a      	str	r2, [r7, #20]
 80114e8:	881b      	ldrh	r3, [r3, #0]
 80114ea:	823b      	strh	r3, [r7, #16]
 80114ec:	8a3b      	ldrh	r3, [r7, #16]
 80114ee:	0a1b      	lsrs	r3, r3, #8
 80114f0:	81fb      	strh	r3, [r7, #14]
 80114f2:	8a3b      	ldrh	r3, [r7, #16]
 80114f4:	b2db      	uxtb	r3, r3
 80114f6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80114f8:	88fa      	ldrh	r2, [r7, #6]
 80114fa:	8a79      	ldrh	r1, [r7, #18]
 80114fc:	8a3b      	ldrh	r3, [r7, #16]
 80114fe:	440b      	add	r3, r1
 8011500:	429a      	cmp	r2, r3
 8011502:	da49      	bge.n	8011598 <ff_wtoupper+0xe8>
			switch (cmd) {
 8011504:	89fb      	ldrh	r3, [r7, #14]
 8011506:	2b08      	cmp	r3, #8
 8011508:	d84f      	bhi.n	80115aa <ff_wtoupper+0xfa>
 801150a:	a201      	add	r2, pc, #4	; (adr r2, 8011510 <ff_wtoupper+0x60>)
 801150c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011510:	08011535 	.word	0x08011535
 8011514:	08011547 	.word	0x08011547
 8011518:	0801155d 	.word	0x0801155d
 801151c:	08011565 	.word	0x08011565
 8011520:	0801156d 	.word	0x0801156d
 8011524:	08011575 	.word	0x08011575
 8011528:	0801157d 	.word	0x0801157d
 801152c:	08011585 	.word	0x08011585
 8011530:	0801158d 	.word	0x0801158d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8011534:	88fa      	ldrh	r2, [r7, #6]
 8011536:	8a7b      	ldrh	r3, [r7, #18]
 8011538:	1ad3      	subs	r3, r2, r3
 801153a:	005b      	lsls	r3, r3, #1
 801153c:	697a      	ldr	r2, [r7, #20]
 801153e:	4413      	add	r3, r2
 8011540:	881b      	ldrh	r3, [r3, #0]
 8011542:	80fb      	strh	r3, [r7, #6]
 8011544:	e027      	b.n	8011596 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8011546:	88fa      	ldrh	r2, [r7, #6]
 8011548:	8a7b      	ldrh	r3, [r7, #18]
 801154a:	1ad3      	subs	r3, r2, r3
 801154c:	b29b      	uxth	r3, r3
 801154e:	f003 0301 	and.w	r3, r3, #1
 8011552:	b29b      	uxth	r3, r3
 8011554:	88fa      	ldrh	r2, [r7, #6]
 8011556:	1ad3      	subs	r3, r2, r3
 8011558:	80fb      	strh	r3, [r7, #6]
 801155a:	e01c      	b.n	8011596 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801155c:	88fb      	ldrh	r3, [r7, #6]
 801155e:	3b10      	subs	r3, #16
 8011560:	80fb      	strh	r3, [r7, #6]
 8011562:	e018      	b.n	8011596 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011564:	88fb      	ldrh	r3, [r7, #6]
 8011566:	3b20      	subs	r3, #32
 8011568:	80fb      	strh	r3, [r7, #6]
 801156a:	e014      	b.n	8011596 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801156c:	88fb      	ldrh	r3, [r7, #6]
 801156e:	3b30      	subs	r3, #48	; 0x30
 8011570:	80fb      	strh	r3, [r7, #6]
 8011572:	e010      	b.n	8011596 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011574:	88fb      	ldrh	r3, [r7, #6]
 8011576:	3b1a      	subs	r3, #26
 8011578:	80fb      	strh	r3, [r7, #6]
 801157a:	e00c      	b.n	8011596 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801157c:	88fb      	ldrh	r3, [r7, #6]
 801157e:	3308      	adds	r3, #8
 8011580:	80fb      	strh	r3, [r7, #6]
 8011582:	e008      	b.n	8011596 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011584:	88fb      	ldrh	r3, [r7, #6]
 8011586:	3b50      	subs	r3, #80	; 0x50
 8011588:	80fb      	strh	r3, [r7, #6]
 801158a:	e004      	b.n	8011596 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801158c:	88fb      	ldrh	r3, [r7, #6]
 801158e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8011592:	80fb      	strh	r3, [r7, #6]
 8011594:	bf00      	nop
			}
			break;
 8011596:	e008      	b.n	80115aa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011598:	89fb      	ldrh	r3, [r7, #14]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d195      	bne.n	80114ca <ff_wtoupper+0x1a>
 801159e:	8a3b      	ldrh	r3, [r7, #16]
 80115a0:	005b      	lsls	r3, r3, #1
 80115a2:	697a      	ldr	r2, [r7, #20]
 80115a4:	4413      	add	r3, r2
 80115a6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80115a8:	e78f      	b.n	80114ca <ff_wtoupper+0x1a>
			break;
 80115aa:	bf00      	nop
	}

	return chr;
 80115ac:	88fb      	ldrh	r3, [r7, #6]
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	371c      	adds	r7, #28
 80115b2:	46bd      	mov	sp, r7
 80115b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b8:	4770      	bx	lr
 80115ba:	bf00      	nop
 80115bc:	08017194 	.word	0x08017194
 80115c0:	08017388 	.word	0x08017388

080115c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80115c4:	b480      	push	{r7}
 80115c6:	b085      	sub	sp, #20
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	4603      	mov	r3, r0
 80115cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80115ce:	2300      	movs	r3, #0
 80115d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80115d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80115d6:	2b84      	cmp	r3, #132	; 0x84
 80115d8:	d005      	beq.n	80115e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80115da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	4413      	add	r3, r2
 80115e2:	3303      	adds	r3, #3
 80115e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80115e6:	68fb      	ldr	r3, [r7, #12]
}
 80115e8:	4618      	mov	r0, r3
 80115ea:	3714      	adds	r7, #20
 80115ec:	46bd      	mov	sp, r7
 80115ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f2:	4770      	bx	lr

080115f4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80115f4:	b480      	push	{r7}
 80115f6:	b083      	sub	sp, #12
 80115f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80115fa:	f3ef 8305 	mrs	r3, IPSR
 80115fe:	607b      	str	r3, [r7, #4]
  return(result);
 8011600:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011602:	2b00      	cmp	r3, #0
 8011604:	bf14      	ite	ne
 8011606:	2301      	movne	r3, #1
 8011608:	2300      	moveq	r3, #0
 801160a:	b2db      	uxtb	r3, r3
}
 801160c:	4618      	mov	r0, r3
 801160e:	370c      	adds	r7, #12
 8011610:	46bd      	mov	sp, r7
 8011612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011616:	4770      	bx	lr

08011618 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801161c:	f001 f916 	bl	801284c <vTaskStartScheduler>
  
  return osOK;
 8011620:	2300      	movs	r3, #0
}
 8011622:	4618      	mov	r0, r3
 8011624:	bd80      	pop	{r7, pc}

08011626 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011626:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011628:	b089      	sub	sp, #36	; 0x24
 801162a:	af04      	add	r7, sp, #16
 801162c:	6078      	str	r0, [r7, #4]
 801162e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	695b      	ldr	r3, [r3, #20]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d020      	beq.n	801167a <osThreadCreate+0x54>
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	699b      	ldr	r3, [r3, #24]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d01c      	beq.n	801167a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	685c      	ldr	r4, [r3, #4]
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681d      	ldr	r5, [r3, #0]
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	691e      	ldr	r6, [r3, #16]
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011652:	4618      	mov	r0, r3
 8011654:	f7ff ffb6 	bl	80115c4 <makeFreeRtosPriority>
 8011658:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	695b      	ldr	r3, [r3, #20]
 801165e:	687a      	ldr	r2, [r7, #4]
 8011660:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011662:	9202      	str	r2, [sp, #8]
 8011664:	9301      	str	r3, [sp, #4]
 8011666:	9100      	str	r1, [sp, #0]
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	4632      	mov	r2, r6
 801166c:	4629      	mov	r1, r5
 801166e:	4620      	mov	r0, r4
 8011670:	f000 ff0e 	bl	8012490 <xTaskCreateStatic>
 8011674:	4603      	mov	r3, r0
 8011676:	60fb      	str	r3, [r7, #12]
 8011678:	e01c      	b.n	80116b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	685c      	ldr	r4, [r3, #4]
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011686:	b29e      	uxth	r6, r3
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801168e:	4618      	mov	r0, r3
 8011690:	f7ff ff98 	bl	80115c4 <makeFreeRtosPriority>
 8011694:	4602      	mov	r2, r0
 8011696:	f107 030c 	add.w	r3, r7, #12
 801169a:	9301      	str	r3, [sp, #4]
 801169c:	9200      	str	r2, [sp, #0]
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	4632      	mov	r2, r6
 80116a2:	4629      	mov	r1, r5
 80116a4:	4620      	mov	r0, r4
 80116a6:	f000 ff50 	bl	801254a <xTaskCreate>
 80116aa:	4603      	mov	r3, r0
 80116ac:	2b01      	cmp	r3, #1
 80116ae:	d001      	beq.n	80116b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80116b0:	2300      	movs	r3, #0
 80116b2:	e000      	b.n	80116b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80116b4:	68fb      	ldr	r3, [r7, #12]
}
 80116b6:	4618      	mov	r0, r3
 80116b8:	3714      	adds	r7, #20
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080116be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80116be:	b580      	push	{r7, lr}
 80116c0:	b084      	sub	sp, #16
 80116c2:	af00      	add	r7, sp, #0
 80116c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d001      	beq.n	80116d4 <osDelay+0x16>
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	e000      	b.n	80116d6 <osDelay+0x18>
 80116d4:	2301      	movs	r3, #1
 80116d6:	4618      	mov	r0, r3
 80116d8:	f001 f884 	bl	80127e4 <vTaskDelay>
  
  return osOK;
 80116dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3710      	adds	r7, #16
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}

080116e6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80116e6:	b590      	push	{r4, r7, lr}
 80116e8:	b085      	sub	sp, #20
 80116ea:	af02      	add	r7, sp, #8
 80116ec:	6078      	str	r0, [r7, #4]
 80116ee:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	689b      	ldr	r3, [r3, #8]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d011      	beq.n	801171c <osMessageCreate+0x36>
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	68db      	ldr	r3, [r3, #12]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d00d      	beq.n	801171c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	6818      	ldr	r0, [r3, #0]
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	6859      	ldr	r1, [r3, #4]
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	689a      	ldr	r2, [r3, #8]
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	68db      	ldr	r3, [r3, #12]
 8011710:	2400      	movs	r4, #0
 8011712:	9400      	str	r4, [sp, #0]
 8011714:	f000 f9e0 	bl	8011ad8 <xQueueGenericCreateStatic>
 8011718:	4603      	mov	r3, r0
 801171a:	e008      	b.n	801172e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	6818      	ldr	r0, [r3, #0]
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	685b      	ldr	r3, [r3, #4]
 8011724:	2200      	movs	r2, #0
 8011726:	4619      	mov	r1, r3
 8011728:	f000 fa4e 	bl	8011bc8 <xQueueGenericCreate>
 801172c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 801172e:	4618      	mov	r0, r3
 8011730:	370c      	adds	r7, #12
 8011732:	46bd      	mov	sp, r7
 8011734:	bd90      	pop	{r4, r7, pc}
	...

08011738 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b086      	sub	sp, #24
 801173c:	af00      	add	r7, sp, #0
 801173e:	60f8      	str	r0, [r7, #12]
 8011740:	60b9      	str	r1, [r7, #8]
 8011742:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8011744:	2300      	movs	r3, #0
 8011746:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 801174c:	697b      	ldr	r3, [r7, #20]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d101      	bne.n	8011756 <osMessagePut+0x1e>
    ticks = 1;
 8011752:	2301      	movs	r3, #1
 8011754:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8011756:	f7ff ff4d 	bl	80115f4 <inHandlerMode>
 801175a:	4603      	mov	r3, r0
 801175c:	2b00      	cmp	r3, #0
 801175e:	d018      	beq.n	8011792 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8011760:	f107 0210 	add.w	r2, r7, #16
 8011764:	f107 0108 	add.w	r1, r7, #8
 8011768:	2300      	movs	r3, #0
 801176a:	68f8      	ldr	r0, [r7, #12]
 801176c:	f000 fb84 	bl	8011e78 <xQueueGenericSendFromISR>
 8011770:	4603      	mov	r3, r0
 8011772:	2b01      	cmp	r3, #1
 8011774:	d001      	beq.n	801177a <osMessagePut+0x42>
      return osErrorOS;
 8011776:	23ff      	movs	r3, #255	; 0xff
 8011778:	e018      	b.n	80117ac <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d014      	beq.n	80117aa <osMessagePut+0x72>
 8011780:	4b0c      	ldr	r3, [pc, #48]	; (80117b4 <osMessagePut+0x7c>)
 8011782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011786:	601a      	str	r2, [r3, #0]
 8011788:	f3bf 8f4f 	dsb	sy
 801178c:	f3bf 8f6f 	isb	sy
 8011790:	e00b      	b.n	80117aa <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8011792:	f107 0108 	add.w	r1, r7, #8
 8011796:	2300      	movs	r3, #0
 8011798:	697a      	ldr	r2, [r7, #20]
 801179a:	68f8      	ldr	r0, [r7, #12]
 801179c:	f000 fa6e 	bl	8011c7c <xQueueGenericSend>
 80117a0:	4603      	mov	r3, r0
 80117a2:	2b01      	cmp	r3, #1
 80117a4:	d001      	beq.n	80117aa <osMessagePut+0x72>
      return osErrorOS;
 80117a6:	23ff      	movs	r3, #255	; 0xff
 80117a8:	e000      	b.n	80117ac <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80117aa:	2300      	movs	r3, #0
}
 80117ac:	4618      	mov	r0, r3
 80117ae:	3718      	adds	r7, #24
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}
 80117b4:	e000ed04 	.word	0xe000ed04

080117b8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80117b8:	b590      	push	{r4, r7, lr}
 80117ba:	b08b      	sub	sp, #44	; 0x2c
 80117bc:	af00      	add	r7, sp, #0
 80117be:	60f8      	str	r0, [r7, #12]
 80117c0:	60b9      	str	r1, [r7, #8]
 80117c2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80117c4:	68bb      	ldr	r3, [r7, #8]
 80117c6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80117c8:	2300      	movs	r3, #0
 80117ca:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80117cc:	68bb      	ldr	r3, [r7, #8]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d10a      	bne.n	80117e8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80117d2:	2380      	movs	r3, #128	; 0x80
 80117d4:	617b      	str	r3, [r7, #20]
    return event;
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	461c      	mov	r4, r3
 80117da:	f107 0314 	add.w	r3, r7, #20
 80117de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80117e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80117e6:	e054      	b.n	8011892 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80117e8:	2300      	movs	r3, #0
 80117ea:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80117ec:	2300      	movs	r3, #0
 80117ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117f6:	d103      	bne.n	8011800 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80117f8:	f04f 33ff 	mov.w	r3, #4294967295
 80117fc:	627b      	str	r3, [r7, #36]	; 0x24
 80117fe:	e009      	b.n	8011814 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d006      	beq.n	8011814 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801180c:	2b00      	cmp	r3, #0
 801180e:	d101      	bne.n	8011814 <osMessageGet+0x5c>
      ticks = 1;
 8011810:	2301      	movs	r3, #1
 8011812:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8011814:	f7ff feee 	bl	80115f4 <inHandlerMode>
 8011818:	4603      	mov	r3, r0
 801181a:	2b00      	cmp	r3, #0
 801181c:	d01c      	beq.n	8011858 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801181e:	f107 0220 	add.w	r2, r7, #32
 8011822:	f107 0314 	add.w	r3, r7, #20
 8011826:	3304      	adds	r3, #4
 8011828:	4619      	mov	r1, r3
 801182a:	68b8      	ldr	r0, [r7, #8]
 801182c:	f000 fca0 	bl	8012170 <xQueueReceiveFromISR>
 8011830:	4603      	mov	r3, r0
 8011832:	2b01      	cmp	r3, #1
 8011834:	d102      	bne.n	801183c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8011836:	2310      	movs	r3, #16
 8011838:	617b      	str	r3, [r7, #20]
 801183a:	e001      	b.n	8011840 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 801183c:	2300      	movs	r3, #0
 801183e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011840:	6a3b      	ldr	r3, [r7, #32]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d01d      	beq.n	8011882 <osMessageGet+0xca>
 8011846:	4b15      	ldr	r3, [pc, #84]	; (801189c <osMessageGet+0xe4>)
 8011848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801184c:	601a      	str	r2, [r3, #0]
 801184e:	f3bf 8f4f 	dsb	sy
 8011852:	f3bf 8f6f 	isb	sy
 8011856:	e014      	b.n	8011882 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8011858:	f107 0314 	add.w	r3, r7, #20
 801185c:	3304      	adds	r3, #4
 801185e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011860:	4619      	mov	r1, r3
 8011862:	68b8      	ldr	r0, [r7, #8]
 8011864:	f000 fba4 	bl	8011fb0 <xQueueReceive>
 8011868:	4603      	mov	r3, r0
 801186a:	2b01      	cmp	r3, #1
 801186c:	d102      	bne.n	8011874 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801186e:	2310      	movs	r3, #16
 8011870:	617b      	str	r3, [r7, #20]
 8011872:	e006      	b.n	8011882 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011876:	2b00      	cmp	r3, #0
 8011878:	d101      	bne.n	801187e <osMessageGet+0xc6>
 801187a:	2300      	movs	r3, #0
 801187c:	e000      	b.n	8011880 <osMessageGet+0xc8>
 801187e:	2340      	movs	r3, #64	; 0x40
 8011880:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	461c      	mov	r4, r3
 8011886:	f107 0314 	add.w	r3, r7, #20
 801188a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801188e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011892:	68f8      	ldr	r0, [r7, #12]
 8011894:	372c      	adds	r7, #44	; 0x2c
 8011896:	46bd      	mov	sp, r7
 8011898:	bd90      	pop	{r4, r7, pc}
 801189a:	bf00      	nop
 801189c:	e000ed04 	.word	0xe000ed04

080118a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80118a0:	b480      	push	{r7}
 80118a2:	b083      	sub	sp, #12
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	f103 0208 	add.w	r2, r3, #8
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f04f 32ff 	mov.w	r2, #4294967295
 80118b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	f103 0208 	add.w	r2, r3, #8
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	f103 0208 	add.w	r2, r3, #8
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	2200      	movs	r2, #0
 80118d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80118d4:	bf00      	nop
 80118d6:	370c      	adds	r7, #12
 80118d8:	46bd      	mov	sp, r7
 80118da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118de:	4770      	bx	lr

080118e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80118e0:	b480      	push	{r7}
 80118e2:	b083      	sub	sp, #12
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2200      	movs	r2, #0
 80118ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80118ee:	bf00      	nop
 80118f0:	370c      	adds	r7, #12
 80118f2:	46bd      	mov	sp, r7
 80118f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f8:	4770      	bx	lr

080118fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80118fa:	b480      	push	{r7}
 80118fc:	b085      	sub	sp, #20
 80118fe:	af00      	add	r7, sp, #0
 8011900:	6078      	str	r0, [r7, #4]
 8011902:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	685b      	ldr	r3, [r3, #4]
 8011908:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	68fa      	ldr	r2, [r7, #12]
 801190e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	689a      	ldr	r2, [r3, #8]
 8011914:	683b      	ldr	r3, [r7, #0]
 8011916:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	689b      	ldr	r3, [r3, #8]
 801191c:	683a      	ldr	r2, [r7, #0]
 801191e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	683a      	ldr	r2, [r7, #0]
 8011924:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011926:	683b      	ldr	r3, [r7, #0]
 8011928:	687a      	ldr	r2, [r7, #4]
 801192a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	1c5a      	adds	r2, r3, #1
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	601a      	str	r2, [r3, #0]
}
 8011936:	bf00      	nop
 8011938:	3714      	adds	r7, #20
 801193a:	46bd      	mov	sp, r7
 801193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011940:	4770      	bx	lr

08011942 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011942:	b480      	push	{r7}
 8011944:	b085      	sub	sp, #20
 8011946:	af00      	add	r7, sp, #0
 8011948:	6078      	str	r0, [r7, #4]
 801194a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011952:	68bb      	ldr	r3, [r7, #8]
 8011954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011958:	d103      	bne.n	8011962 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	691b      	ldr	r3, [r3, #16]
 801195e:	60fb      	str	r3, [r7, #12]
 8011960:	e00c      	b.n	801197c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	3308      	adds	r3, #8
 8011966:	60fb      	str	r3, [r7, #12]
 8011968:	e002      	b.n	8011970 <vListInsert+0x2e>
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	685b      	ldr	r3, [r3, #4]
 801196e:	60fb      	str	r3, [r7, #12]
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	685b      	ldr	r3, [r3, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	68ba      	ldr	r2, [r7, #8]
 8011978:	429a      	cmp	r2, r3
 801197a:	d2f6      	bcs.n	801196a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	685a      	ldr	r2, [r3, #4]
 8011980:	683b      	ldr	r3, [r7, #0]
 8011982:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011984:	683b      	ldr	r3, [r7, #0]
 8011986:	685b      	ldr	r3, [r3, #4]
 8011988:	683a      	ldr	r2, [r7, #0]
 801198a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	68fa      	ldr	r2, [r7, #12]
 8011990:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	683a      	ldr	r2, [r7, #0]
 8011996:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	687a      	ldr	r2, [r7, #4]
 801199c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	1c5a      	adds	r2, r3, #1
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	601a      	str	r2, [r3, #0]
}
 80119a8:	bf00      	nop
 80119aa:	3714      	adds	r7, #20
 80119ac:	46bd      	mov	sp, r7
 80119ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b2:	4770      	bx	lr

080119b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80119b4:	b480      	push	{r7}
 80119b6:	b085      	sub	sp, #20
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	691b      	ldr	r3, [r3, #16]
 80119c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	685b      	ldr	r3, [r3, #4]
 80119c6:	687a      	ldr	r2, [r7, #4]
 80119c8:	6892      	ldr	r2, [r2, #8]
 80119ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	689b      	ldr	r3, [r3, #8]
 80119d0:	687a      	ldr	r2, [r7, #4]
 80119d2:	6852      	ldr	r2, [r2, #4]
 80119d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	685b      	ldr	r3, [r3, #4]
 80119da:	687a      	ldr	r2, [r7, #4]
 80119dc:	429a      	cmp	r2, r3
 80119de:	d103      	bne.n	80119e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	689a      	ldr	r2, [r3, #8]
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	2200      	movs	r2, #0
 80119ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	1e5a      	subs	r2, r3, #1
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	681b      	ldr	r3, [r3, #0]
}
 80119fc:	4618      	mov	r0, r3
 80119fe:	3714      	adds	r7, #20
 8011a00:	46bd      	mov	sp, r7
 8011a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a06:	4770      	bx	lr

08011a08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b084      	sub	sp, #16
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d10a      	bne.n	8011a32 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a20:	f383 8811 	msr	BASEPRI, r3
 8011a24:	f3bf 8f6f 	isb	sy
 8011a28:	f3bf 8f4f 	dsb	sy
 8011a2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011a2e:	bf00      	nop
 8011a30:	e7fe      	b.n	8011a30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011a32:	f001 fd67 	bl	8013504 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	681a      	ldr	r2, [r3, #0]
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a3e:	68f9      	ldr	r1, [r7, #12]
 8011a40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011a42:	fb01 f303 	mul.w	r3, r1, r3
 8011a46:	441a      	add	r2, r3
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	2200      	movs	r2, #0
 8011a50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	681a      	ldr	r2, [r3, #0]
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	681a      	ldr	r2, [r3, #0]
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a62:	3b01      	subs	r3, #1
 8011a64:	68f9      	ldr	r1, [r7, #12]
 8011a66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011a68:	fb01 f303 	mul.w	r3, r1, r3
 8011a6c:	441a      	add	r2, r3
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	22ff      	movs	r2, #255	; 0xff
 8011a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	22ff      	movs	r2, #255	; 0xff
 8011a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d114      	bne.n	8011ab2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	691b      	ldr	r3, [r3, #16]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d01a      	beq.n	8011ac6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	3310      	adds	r3, #16
 8011a94:	4618      	mov	r0, r3
 8011a96:	f001 f93b 	bl	8012d10 <xTaskRemoveFromEventList>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d012      	beq.n	8011ac6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011aa0:	4b0c      	ldr	r3, [pc, #48]	; (8011ad4 <xQueueGenericReset+0xcc>)
 8011aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011aa6:	601a      	str	r2, [r3, #0]
 8011aa8:	f3bf 8f4f 	dsb	sy
 8011aac:	f3bf 8f6f 	isb	sy
 8011ab0:	e009      	b.n	8011ac6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	3310      	adds	r3, #16
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f7ff fef2 	bl	80118a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	3324      	adds	r3, #36	; 0x24
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f7ff feed 	bl	80118a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011ac6:	f001 fd4d 	bl	8013564 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011aca:	2301      	movs	r3, #1
}
 8011acc:	4618      	mov	r0, r3
 8011ace:	3710      	adds	r7, #16
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	bd80      	pop	{r7, pc}
 8011ad4:	e000ed04 	.word	0xe000ed04

08011ad8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b08e      	sub	sp, #56	; 0x38
 8011adc:	af02      	add	r7, sp, #8
 8011ade:	60f8      	str	r0, [r7, #12]
 8011ae0:	60b9      	str	r1, [r7, #8]
 8011ae2:	607a      	str	r2, [r7, #4]
 8011ae4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d10a      	bne.n	8011b02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8011aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011af0:	f383 8811 	msr	BASEPRI, r3
 8011af4:	f3bf 8f6f 	isb	sy
 8011af8:	f3bf 8f4f 	dsb	sy
 8011afc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011afe:	bf00      	nop
 8011b00:	e7fe      	b.n	8011b00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011b02:	683b      	ldr	r3, [r7, #0]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d10a      	bne.n	8011b1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b0c:	f383 8811 	msr	BASEPRI, r3
 8011b10:	f3bf 8f6f 	isb	sy
 8011b14:	f3bf 8f4f 	dsb	sy
 8011b18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011b1a:	bf00      	nop
 8011b1c:	e7fe      	b.n	8011b1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d002      	beq.n	8011b2a <xQueueGenericCreateStatic+0x52>
 8011b24:	68bb      	ldr	r3, [r7, #8]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d001      	beq.n	8011b2e <xQueueGenericCreateStatic+0x56>
 8011b2a:	2301      	movs	r3, #1
 8011b2c:	e000      	b.n	8011b30 <xQueueGenericCreateStatic+0x58>
 8011b2e:	2300      	movs	r3, #0
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d10a      	bne.n	8011b4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8011b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b38:	f383 8811 	msr	BASEPRI, r3
 8011b3c:	f3bf 8f6f 	isb	sy
 8011b40:	f3bf 8f4f 	dsb	sy
 8011b44:	623b      	str	r3, [r7, #32]
}
 8011b46:	bf00      	nop
 8011b48:	e7fe      	b.n	8011b48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d102      	bne.n	8011b56 <xQueueGenericCreateStatic+0x7e>
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d101      	bne.n	8011b5a <xQueueGenericCreateStatic+0x82>
 8011b56:	2301      	movs	r3, #1
 8011b58:	e000      	b.n	8011b5c <xQueueGenericCreateStatic+0x84>
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d10a      	bne.n	8011b76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8011b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b64:	f383 8811 	msr	BASEPRI, r3
 8011b68:	f3bf 8f6f 	isb	sy
 8011b6c:	f3bf 8f4f 	dsb	sy
 8011b70:	61fb      	str	r3, [r7, #28]
}
 8011b72:	bf00      	nop
 8011b74:	e7fe      	b.n	8011b74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011b76:	2348      	movs	r3, #72	; 0x48
 8011b78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011b7a:	697b      	ldr	r3, [r7, #20]
 8011b7c:	2b48      	cmp	r3, #72	; 0x48
 8011b7e:	d00a      	beq.n	8011b96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8011b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b84:	f383 8811 	msr	BASEPRI, r3
 8011b88:	f3bf 8f6f 	isb	sy
 8011b8c:	f3bf 8f4f 	dsb	sy
 8011b90:	61bb      	str	r3, [r7, #24]
}
 8011b92:	bf00      	nop
 8011b94:	e7fe      	b.n	8011b94 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011b96:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011b98:	683b      	ldr	r3, [r7, #0]
 8011b9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d00d      	beq.n	8011bbe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba4:	2201      	movs	r2, #1
 8011ba6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011baa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb0:	9300      	str	r3, [sp, #0]
 8011bb2:	4613      	mov	r3, r2
 8011bb4:	687a      	ldr	r2, [r7, #4]
 8011bb6:	68b9      	ldr	r1, [r7, #8]
 8011bb8:	68f8      	ldr	r0, [r7, #12]
 8011bba:	f000 f83f 	bl	8011c3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	3730      	adds	r7, #48	; 0x30
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd80      	pop	{r7, pc}

08011bc8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b08a      	sub	sp, #40	; 0x28
 8011bcc:	af02      	add	r7, sp, #8
 8011bce:	60f8      	str	r0, [r7, #12]
 8011bd0:	60b9      	str	r1, [r7, #8]
 8011bd2:	4613      	mov	r3, r2
 8011bd4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d10a      	bne.n	8011bf2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8011bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011be0:	f383 8811 	msr	BASEPRI, r3
 8011be4:	f3bf 8f6f 	isb	sy
 8011be8:	f3bf 8f4f 	dsb	sy
 8011bec:	613b      	str	r3, [r7, #16]
}
 8011bee:	bf00      	nop
 8011bf0:	e7fe      	b.n	8011bf0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	68ba      	ldr	r2, [r7, #8]
 8011bf6:	fb02 f303 	mul.w	r3, r2, r3
 8011bfa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011bfc:	69fb      	ldr	r3, [r7, #28]
 8011bfe:	3348      	adds	r3, #72	; 0x48
 8011c00:	4618      	mov	r0, r3
 8011c02:	f001 fda1 	bl	8013748 <pvPortMalloc>
 8011c06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011c08:	69bb      	ldr	r3, [r7, #24]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d011      	beq.n	8011c32 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011c0e:	69bb      	ldr	r3, [r7, #24]
 8011c10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011c12:	697b      	ldr	r3, [r7, #20]
 8011c14:	3348      	adds	r3, #72	; 0x48
 8011c16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011c18:	69bb      	ldr	r3, [r7, #24]
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011c20:	79fa      	ldrb	r2, [r7, #7]
 8011c22:	69bb      	ldr	r3, [r7, #24]
 8011c24:	9300      	str	r3, [sp, #0]
 8011c26:	4613      	mov	r3, r2
 8011c28:	697a      	ldr	r2, [r7, #20]
 8011c2a:	68b9      	ldr	r1, [r7, #8]
 8011c2c:	68f8      	ldr	r0, [r7, #12]
 8011c2e:	f000 f805 	bl	8011c3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011c32:	69bb      	ldr	r3, [r7, #24]
	}
 8011c34:	4618      	mov	r0, r3
 8011c36:	3720      	adds	r7, #32
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bd80      	pop	{r7, pc}

08011c3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b084      	sub	sp, #16
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	60f8      	str	r0, [r7, #12]
 8011c44:	60b9      	str	r1, [r7, #8]
 8011c46:	607a      	str	r2, [r7, #4]
 8011c48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011c4a:	68bb      	ldr	r3, [r7, #8]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d103      	bne.n	8011c58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011c50:	69bb      	ldr	r3, [r7, #24]
 8011c52:	69ba      	ldr	r2, [r7, #24]
 8011c54:	601a      	str	r2, [r3, #0]
 8011c56:	e002      	b.n	8011c5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011c58:	69bb      	ldr	r3, [r7, #24]
 8011c5a:	687a      	ldr	r2, [r7, #4]
 8011c5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011c5e:	69bb      	ldr	r3, [r7, #24]
 8011c60:	68fa      	ldr	r2, [r7, #12]
 8011c62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011c64:	69bb      	ldr	r3, [r7, #24]
 8011c66:	68ba      	ldr	r2, [r7, #8]
 8011c68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011c6a:	2101      	movs	r1, #1
 8011c6c:	69b8      	ldr	r0, [r7, #24]
 8011c6e:	f7ff fecb 	bl	8011a08 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011c72:	bf00      	nop
 8011c74:	3710      	adds	r7, #16
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}
	...

08011c7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b08e      	sub	sp, #56	; 0x38
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	60f8      	str	r0, [r7, #12]
 8011c84:	60b9      	str	r1, [r7, #8]
 8011c86:	607a      	str	r2, [r7, #4]
 8011c88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d10a      	bne.n	8011cae <xQueueGenericSend+0x32>
	__asm volatile
 8011c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c9c:	f383 8811 	msr	BASEPRI, r3
 8011ca0:	f3bf 8f6f 	isb	sy
 8011ca4:	f3bf 8f4f 	dsb	sy
 8011ca8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011caa:	bf00      	nop
 8011cac:	e7fe      	b.n	8011cac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011cae:	68bb      	ldr	r3, [r7, #8]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d103      	bne.n	8011cbc <xQueueGenericSend+0x40>
 8011cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d101      	bne.n	8011cc0 <xQueueGenericSend+0x44>
 8011cbc:	2301      	movs	r3, #1
 8011cbe:	e000      	b.n	8011cc2 <xQueueGenericSend+0x46>
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d10a      	bne.n	8011cdc <xQueueGenericSend+0x60>
	__asm volatile
 8011cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cca:	f383 8811 	msr	BASEPRI, r3
 8011cce:	f3bf 8f6f 	isb	sy
 8011cd2:	f3bf 8f4f 	dsb	sy
 8011cd6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011cd8:	bf00      	nop
 8011cda:	e7fe      	b.n	8011cda <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	2b02      	cmp	r3, #2
 8011ce0:	d103      	bne.n	8011cea <xQueueGenericSend+0x6e>
 8011ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ce6:	2b01      	cmp	r3, #1
 8011ce8:	d101      	bne.n	8011cee <xQueueGenericSend+0x72>
 8011cea:	2301      	movs	r3, #1
 8011cec:	e000      	b.n	8011cf0 <xQueueGenericSend+0x74>
 8011cee:	2300      	movs	r3, #0
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d10a      	bne.n	8011d0a <xQueueGenericSend+0x8e>
	__asm volatile
 8011cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cf8:	f383 8811 	msr	BASEPRI, r3
 8011cfc:	f3bf 8f6f 	isb	sy
 8011d00:	f3bf 8f4f 	dsb	sy
 8011d04:	623b      	str	r3, [r7, #32]
}
 8011d06:	bf00      	nop
 8011d08:	e7fe      	b.n	8011d08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011d0a:	f001 f9c1 	bl	8013090 <xTaskGetSchedulerState>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d102      	bne.n	8011d1a <xQueueGenericSend+0x9e>
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d101      	bne.n	8011d1e <xQueueGenericSend+0xa2>
 8011d1a:	2301      	movs	r3, #1
 8011d1c:	e000      	b.n	8011d20 <xQueueGenericSend+0xa4>
 8011d1e:	2300      	movs	r3, #0
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d10a      	bne.n	8011d3a <xQueueGenericSend+0xbe>
	__asm volatile
 8011d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d28:	f383 8811 	msr	BASEPRI, r3
 8011d2c:	f3bf 8f6f 	isb	sy
 8011d30:	f3bf 8f4f 	dsb	sy
 8011d34:	61fb      	str	r3, [r7, #28]
}
 8011d36:	bf00      	nop
 8011d38:	e7fe      	b.n	8011d38 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011d3a:	f001 fbe3 	bl	8013504 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d302      	bcc.n	8011d50 <xQueueGenericSend+0xd4>
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	2b02      	cmp	r3, #2
 8011d4e:	d129      	bne.n	8011da4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011d50:	683a      	ldr	r2, [r7, #0]
 8011d52:	68b9      	ldr	r1, [r7, #8]
 8011d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d56:	f000 fa8b 	bl	8012270 <prvCopyDataToQueue>
 8011d5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d010      	beq.n	8011d86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d66:	3324      	adds	r3, #36	; 0x24
 8011d68:	4618      	mov	r0, r3
 8011d6a:	f000 ffd1 	bl	8012d10 <xTaskRemoveFromEventList>
 8011d6e:	4603      	mov	r3, r0
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d013      	beq.n	8011d9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011d74:	4b3f      	ldr	r3, [pc, #252]	; (8011e74 <xQueueGenericSend+0x1f8>)
 8011d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d7a:	601a      	str	r2, [r3, #0]
 8011d7c:	f3bf 8f4f 	dsb	sy
 8011d80:	f3bf 8f6f 	isb	sy
 8011d84:	e00a      	b.n	8011d9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d007      	beq.n	8011d9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011d8c:	4b39      	ldr	r3, [pc, #228]	; (8011e74 <xQueueGenericSend+0x1f8>)
 8011d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d92:	601a      	str	r2, [r3, #0]
 8011d94:	f3bf 8f4f 	dsb	sy
 8011d98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011d9c:	f001 fbe2 	bl	8013564 <vPortExitCritical>
				return pdPASS;
 8011da0:	2301      	movs	r3, #1
 8011da2:	e063      	b.n	8011e6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d103      	bne.n	8011db2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011daa:	f001 fbdb 	bl	8013564 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011dae:	2300      	movs	r3, #0
 8011db0:	e05c      	b.n	8011e6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d106      	bne.n	8011dc6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011db8:	f107 0314 	add.w	r3, r7, #20
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f001 f809 	bl	8012dd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011dc2:	2301      	movs	r3, #1
 8011dc4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011dc6:	f001 fbcd 	bl	8013564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011dca:	f000 fda9 	bl	8012920 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011dce:	f001 fb99 	bl	8013504 <vPortEnterCritical>
 8011dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011dd8:	b25b      	sxtb	r3, r3
 8011dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dde:	d103      	bne.n	8011de8 <xQueueGenericSend+0x16c>
 8011de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de2:	2200      	movs	r2, #0
 8011de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011dee:	b25b      	sxtb	r3, r3
 8011df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011df4:	d103      	bne.n	8011dfe <xQueueGenericSend+0x182>
 8011df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011df8:	2200      	movs	r2, #0
 8011dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011dfe:	f001 fbb1 	bl	8013564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011e02:	1d3a      	adds	r2, r7, #4
 8011e04:	f107 0314 	add.w	r3, r7, #20
 8011e08:	4611      	mov	r1, r2
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f000 fff8 	bl	8012e00 <xTaskCheckForTimeOut>
 8011e10:	4603      	mov	r3, r0
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d124      	bne.n	8011e60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011e16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e18:	f000 fb22 	bl	8012460 <prvIsQueueFull>
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d018      	beq.n	8011e54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e24:	3310      	adds	r3, #16
 8011e26:	687a      	ldr	r2, [r7, #4]
 8011e28:	4611      	mov	r1, r2
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f000 ff4c 	bl	8012cc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e32:	f000 faad 	bl	8012390 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011e36:	f000 fd81 	bl	801293c <xTaskResumeAll>
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	f47f af7c 	bne.w	8011d3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011e42:	4b0c      	ldr	r3, [pc, #48]	; (8011e74 <xQueueGenericSend+0x1f8>)
 8011e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e48:	601a      	str	r2, [r3, #0]
 8011e4a:	f3bf 8f4f 	dsb	sy
 8011e4e:	f3bf 8f6f 	isb	sy
 8011e52:	e772      	b.n	8011d3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e56:	f000 fa9b 	bl	8012390 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011e5a:	f000 fd6f 	bl	801293c <xTaskResumeAll>
 8011e5e:	e76c      	b.n	8011d3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e62:	f000 fa95 	bl	8012390 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011e66:	f000 fd69 	bl	801293c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011e6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	3738      	adds	r7, #56	; 0x38
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}
 8011e74:	e000ed04 	.word	0xe000ed04

08011e78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b090      	sub	sp, #64	; 0x40
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	60f8      	str	r0, [r7, #12]
 8011e80:	60b9      	str	r1, [r7, #8]
 8011e82:	607a      	str	r2, [r7, #4]
 8011e84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8011e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d10a      	bne.n	8011ea6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e94:	f383 8811 	msr	BASEPRI, r3
 8011e98:	f3bf 8f6f 	isb	sy
 8011e9c:	f3bf 8f4f 	dsb	sy
 8011ea0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011ea2:	bf00      	nop
 8011ea4:	e7fe      	b.n	8011ea4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011ea6:	68bb      	ldr	r3, [r7, #8]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d103      	bne.n	8011eb4 <xQueueGenericSendFromISR+0x3c>
 8011eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d101      	bne.n	8011eb8 <xQueueGenericSendFromISR+0x40>
 8011eb4:	2301      	movs	r3, #1
 8011eb6:	e000      	b.n	8011eba <xQueueGenericSendFromISR+0x42>
 8011eb8:	2300      	movs	r3, #0
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d10a      	bne.n	8011ed4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8011ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ec2:	f383 8811 	msr	BASEPRI, r3
 8011ec6:	f3bf 8f6f 	isb	sy
 8011eca:	f3bf 8f4f 	dsb	sy
 8011ece:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011ed0:	bf00      	nop
 8011ed2:	e7fe      	b.n	8011ed2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	2b02      	cmp	r3, #2
 8011ed8:	d103      	bne.n	8011ee2 <xQueueGenericSendFromISR+0x6a>
 8011eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ede:	2b01      	cmp	r3, #1
 8011ee0:	d101      	bne.n	8011ee6 <xQueueGenericSendFromISR+0x6e>
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	e000      	b.n	8011ee8 <xQueueGenericSendFromISR+0x70>
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d10a      	bne.n	8011f02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8011eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ef0:	f383 8811 	msr	BASEPRI, r3
 8011ef4:	f3bf 8f6f 	isb	sy
 8011ef8:	f3bf 8f4f 	dsb	sy
 8011efc:	623b      	str	r3, [r7, #32]
}
 8011efe:	bf00      	nop
 8011f00:	e7fe      	b.n	8011f00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011f02:	f001 fbe1 	bl	80136c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011f06:	f3ef 8211 	mrs	r2, BASEPRI
 8011f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f0e:	f383 8811 	msr	BASEPRI, r3
 8011f12:	f3bf 8f6f 	isb	sy
 8011f16:	f3bf 8f4f 	dsb	sy
 8011f1a:	61fa      	str	r2, [r7, #28]
 8011f1c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011f1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011f20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f2a:	429a      	cmp	r2, r3
 8011f2c:	d302      	bcc.n	8011f34 <xQueueGenericSendFromISR+0xbc>
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	2b02      	cmp	r3, #2
 8011f32:	d12f      	bne.n	8011f94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011f44:	683a      	ldr	r2, [r7, #0]
 8011f46:	68b9      	ldr	r1, [r7, #8]
 8011f48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011f4a:	f000 f991 	bl	8012270 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011f4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8011f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f56:	d112      	bne.n	8011f7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d016      	beq.n	8011f8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f62:	3324      	adds	r3, #36	; 0x24
 8011f64:	4618      	mov	r0, r3
 8011f66:	f000 fed3 	bl	8012d10 <xTaskRemoveFromEventList>
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d00e      	beq.n	8011f8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d00b      	beq.n	8011f8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	2201      	movs	r2, #1
 8011f7a:	601a      	str	r2, [r3, #0]
 8011f7c:	e007      	b.n	8011f8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011f7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011f82:	3301      	adds	r3, #1
 8011f84:	b2db      	uxtb	r3, r3
 8011f86:	b25a      	sxtb	r2, r3
 8011f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011f8e:	2301      	movs	r3, #1
 8011f90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8011f92:	e001      	b.n	8011f98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011f94:	2300      	movs	r3, #0
 8011f96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f9a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011f9c:	697b      	ldr	r3, [r7, #20]
 8011f9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011fa2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	3740      	adds	r7, #64	; 0x40
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bd80      	pop	{r7, pc}
	...

08011fb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b08c      	sub	sp, #48	; 0x30
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	60f8      	str	r0, [r7, #12]
 8011fb8:	60b9      	str	r1, [r7, #8]
 8011fba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d10a      	bne.n	8011fe0 <xQueueReceive+0x30>
	__asm volatile
 8011fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fce:	f383 8811 	msr	BASEPRI, r3
 8011fd2:	f3bf 8f6f 	isb	sy
 8011fd6:	f3bf 8f4f 	dsb	sy
 8011fda:	623b      	str	r3, [r7, #32]
}
 8011fdc:	bf00      	nop
 8011fde:	e7fe      	b.n	8011fde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011fe0:	68bb      	ldr	r3, [r7, #8]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d103      	bne.n	8011fee <xQueueReceive+0x3e>
 8011fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d101      	bne.n	8011ff2 <xQueueReceive+0x42>
 8011fee:	2301      	movs	r3, #1
 8011ff0:	e000      	b.n	8011ff4 <xQueueReceive+0x44>
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d10a      	bne.n	801200e <xQueueReceive+0x5e>
	__asm volatile
 8011ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ffc:	f383 8811 	msr	BASEPRI, r3
 8012000:	f3bf 8f6f 	isb	sy
 8012004:	f3bf 8f4f 	dsb	sy
 8012008:	61fb      	str	r3, [r7, #28]
}
 801200a:	bf00      	nop
 801200c:	e7fe      	b.n	801200c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801200e:	f001 f83f 	bl	8013090 <xTaskGetSchedulerState>
 8012012:	4603      	mov	r3, r0
 8012014:	2b00      	cmp	r3, #0
 8012016:	d102      	bne.n	801201e <xQueueReceive+0x6e>
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d101      	bne.n	8012022 <xQueueReceive+0x72>
 801201e:	2301      	movs	r3, #1
 8012020:	e000      	b.n	8012024 <xQueueReceive+0x74>
 8012022:	2300      	movs	r3, #0
 8012024:	2b00      	cmp	r3, #0
 8012026:	d10a      	bne.n	801203e <xQueueReceive+0x8e>
	__asm volatile
 8012028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801202c:	f383 8811 	msr	BASEPRI, r3
 8012030:	f3bf 8f6f 	isb	sy
 8012034:	f3bf 8f4f 	dsb	sy
 8012038:	61bb      	str	r3, [r7, #24]
}
 801203a:	bf00      	nop
 801203c:	e7fe      	b.n	801203c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801203e:	f001 fa61 	bl	8013504 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012046:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801204a:	2b00      	cmp	r3, #0
 801204c:	d01f      	beq.n	801208e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801204e:	68b9      	ldr	r1, [r7, #8]
 8012050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012052:	f000 f977 	bl	8012344 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012058:	1e5a      	subs	r2, r3, #1
 801205a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801205c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801205e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012060:	691b      	ldr	r3, [r3, #16]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d00f      	beq.n	8012086 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012068:	3310      	adds	r3, #16
 801206a:	4618      	mov	r0, r3
 801206c:	f000 fe50 	bl	8012d10 <xTaskRemoveFromEventList>
 8012070:	4603      	mov	r3, r0
 8012072:	2b00      	cmp	r3, #0
 8012074:	d007      	beq.n	8012086 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012076:	4b3d      	ldr	r3, [pc, #244]	; (801216c <xQueueReceive+0x1bc>)
 8012078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801207c:	601a      	str	r2, [r3, #0]
 801207e:	f3bf 8f4f 	dsb	sy
 8012082:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012086:	f001 fa6d 	bl	8013564 <vPortExitCritical>
				return pdPASS;
 801208a:	2301      	movs	r3, #1
 801208c:	e069      	b.n	8012162 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d103      	bne.n	801209c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012094:	f001 fa66 	bl	8013564 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012098:	2300      	movs	r3, #0
 801209a:	e062      	b.n	8012162 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801209c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d106      	bne.n	80120b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80120a2:	f107 0310 	add.w	r3, r7, #16
 80120a6:	4618      	mov	r0, r3
 80120a8:	f000 fe94 	bl	8012dd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80120ac:	2301      	movs	r3, #1
 80120ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80120b0:	f001 fa58 	bl	8013564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80120b4:	f000 fc34 	bl	8012920 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80120b8:	f001 fa24 	bl	8013504 <vPortEnterCritical>
 80120bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80120c2:	b25b      	sxtb	r3, r3
 80120c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120c8:	d103      	bne.n	80120d2 <xQueueReceive+0x122>
 80120ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120cc:	2200      	movs	r2, #0
 80120ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80120d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80120d8:	b25b      	sxtb	r3, r3
 80120da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120de:	d103      	bne.n	80120e8 <xQueueReceive+0x138>
 80120e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120e2:	2200      	movs	r2, #0
 80120e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80120e8:	f001 fa3c 	bl	8013564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80120ec:	1d3a      	adds	r2, r7, #4
 80120ee:	f107 0310 	add.w	r3, r7, #16
 80120f2:	4611      	mov	r1, r2
 80120f4:	4618      	mov	r0, r3
 80120f6:	f000 fe83 	bl	8012e00 <xTaskCheckForTimeOut>
 80120fa:	4603      	mov	r3, r0
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d123      	bne.n	8012148 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012102:	f000 f997 	bl	8012434 <prvIsQueueEmpty>
 8012106:	4603      	mov	r3, r0
 8012108:	2b00      	cmp	r3, #0
 801210a:	d017      	beq.n	801213c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801210e:	3324      	adds	r3, #36	; 0x24
 8012110:	687a      	ldr	r2, [r7, #4]
 8012112:	4611      	mov	r1, r2
 8012114:	4618      	mov	r0, r3
 8012116:	f000 fdd7 	bl	8012cc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801211a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801211c:	f000 f938 	bl	8012390 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012120:	f000 fc0c 	bl	801293c <xTaskResumeAll>
 8012124:	4603      	mov	r3, r0
 8012126:	2b00      	cmp	r3, #0
 8012128:	d189      	bne.n	801203e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801212a:	4b10      	ldr	r3, [pc, #64]	; (801216c <xQueueReceive+0x1bc>)
 801212c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012130:	601a      	str	r2, [r3, #0]
 8012132:	f3bf 8f4f 	dsb	sy
 8012136:	f3bf 8f6f 	isb	sy
 801213a:	e780      	b.n	801203e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801213c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801213e:	f000 f927 	bl	8012390 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012142:	f000 fbfb 	bl	801293c <xTaskResumeAll>
 8012146:	e77a      	b.n	801203e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801214a:	f000 f921 	bl	8012390 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801214e:	f000 fbf5 	bl	801293c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012154:	f000 f96e 	bl	8012434 <prvIsQueueEmpty>
 8012158:	4603      	mov	r3, r0
 801215a:	2b00      	cmp	r3, #0
 801215c:	f43f af6f 	beq.w	801203e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012160:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012162:	4618      	mov	r0, r3
 8012164:	3730      	adds	r7, #48	; 0x30
 8012166:	46bd      	mov	sp, r7
 8012168:	bd80      	pop	{r7, pc}
 801216a:	bf00      	nop
 801216c:	e000ed04 	.word	0xe000ed04

08012170 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b08e      	sub	sp, #56	; 0x38
 8012174:	af00      	add	r7, sp, #0
 8012176:	60f8      	str	r0, [r7, #12]
 8012178:	60b9      	str	r1, [r7, #8]
 801217a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012182:	2b00      	cmp	r3, #0
 8012184:	d10a      	bne.n	801219c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801218a:	f383 8811 	msr	BASEPRI, r3
 801218e:	f3bf 8f6f 	isb	sy
 8012192:	f3bf 8f4f 	dsb	sy
 8012196:	623b      	str	r3, [r7, #32]
}
 8012198:	bf00      	nop
 801219a:	e7fe      	b.n	801219a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d103      	bne.n	80121aa <xQueueReceiveFromISR+0x3a>
 80121a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d101      	bne.n	80121ae <xQueueReceiveFromISR+0x3e>
 80121aa:	2301      	movs	r3, #1
 80121ac:	e000      	b.n	80121b0 <xQueueReceiveFromISR+0x40>
 80121ae:	2300      	movs	r3, #0
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d10a      	bne.n	80121ca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80121b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121b8:	f383 8811 	msr	BASEPRI, r3
 80121bc:	f3bf 8f6f 	isb	sy
 80121c0:	f3bf 8f4f 	dsb	sy
 80121c4:	61fb      	str	r3, [r7, #28]
}
 80121c6:	bf00      	nop
 80121c8:	e7fe      	b.n	80121c8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80121ca:	f001 fa7d 	bl	80136c8 <vPortValidateInterruptPriority>
	__asm volatile
 80121ce:	f3ef 8211 	mrs	r2, BASEPRI
 80121d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d6:	f383 8811 	msr	BASEPRI, r3
 80121da:	f3bf 8f6f 	isb	sy
 80121de:	f3bf 8f4f 	dsb	sy
 80121e2:	61ba      	str	r2, [r7, #24]
 80121e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80121e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80121e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80121ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80121f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d02f      	beq.n	8012256 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80121f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80121fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012200:	68b9      	ldr	r1, [r7, #8]
 8012202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012204:	f000 f89e 	bl	8012344 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801220a:	1e5a      	subs	r2, r3, #1
 801220c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801220e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012210:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012218:	d112      	bne.n	8012240 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801221a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801221c:	691b      	ldr	r3, [r3, #16]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d016      	beq.n	8012250 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012224:	3310      	adds	r3, #16
 8012226:	4618      	mov	r0, r3
 8012228:	f000 fd72 	bl	8012d10 <xTaskRemoveFromEventList>
 801222c:	4603      	mov	r3, r0
 801222e:	2b00      	cmp	r3, #0
 8012230:	d00e      	beq.n	8012250 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d00b      	beq.n	8012250 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2201      	movs	r2, #1
 801223c:	601a      	str	r2, [r3, #0]
 801223e:	e007      	b.n	8012250 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012244:	3301      	adds	r3, #1
 8012246:	b2db      	uxtb	r3, r3
 8012248:	b25a      	sxtb	r2, r3
 801224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801224c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012250:	2301      	movs	r3, #1
 8012252:	637b      	str	r3, [r7, #52]	; 0x34
 8012254:	e001      	b.n	801225a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8012256:	2300      	movs	r3, #0
 8012258:	637b      	str	r3, [r7, #52]	; 0x34
 801225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801225c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801225e:	693b      	ldr	r3, [r7, #16]
 8012260:	f383 8811 	msr	BASEPRI, r3
}
 8012264:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012268:	4618      	mov	r0, r3
 801226a:	3738      	adds	r7, #56	; 0x38
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}

08012270 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b086      	sub	sp, #24
 8012274:	af00      	add	r7, sp, #0
 8012276:	60f8      	str	r0, [r7, #12]
 8012278:	60b9      	str	r1, [r7, #8]
 801227a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801227c:	2300      	movs	r3, #0
 801227e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012284:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801228a:	2b00      	cmp	r3, #0
 801228c:	d10d      	bne.n	80122aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d14d      	bne.n	8012332 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	689b      	ldr	r3, [r3, #8]
 801229a:	4618      	mov	r0, r3
 801229c:	f000 ff16 	bl	80130cc <xTaskPriorityDisinherit>
 80122a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	2200      	movs	r2, #0
 80122a6:	609a      	str	r2, [r3, #8]
 80122a8:	e043      	b.n	8012332 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d119      	bne.n	80122e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	6858      	ldr	r0, [r3, #4]
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122b8:	461a      	mov	r2, r3
 80122ba:	68b9      	ldr	r1, [r7, #8]
 80122bc:	f002 f8ce 	bl	801445c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	685a      	ldr	r2, [r3, #4]
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122c8:	441a      	add	r2, r3
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	685a      	ldr	r2, [r3, #4]
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	689b      	ldr	r3, [r3, #8]
 80122d6:	429a      	cmp	r2, r3
 80122d8:	d32b      	bcc.n	8012332 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	681a      	ldr	r2, [r3, #0]
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	605a      	str	r2, [r3, #4]
 80122e2:	e026      	b.n	8012332 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	68d8      	ldr	r0, [r3, #12]
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122ec:	461a      	mov	r2, r3
 80122ee:	68b9      	ldr	r1, [r7, #8]
 80122f0:	f002 f8b4 	bl	801445c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	68da      	ldr	r2, [r3, #12]
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122fc:	425b      	negs	r3, r3
 80122fe:	441a      	add	r2, r3
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	68da      	ldr	r2, [r3, #12]
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	429a      	cmp	r2, r3
 801230e:	d207      	bcs.n	8012320 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	689a      	ldr	r2, [r3, #8]
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012318:	425b      	negs	r3, r3
 801231a:	441a      	add	r2, r3
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2b02      	cmp	r3, #2
 8012324:	d105      	bne.n	8012332 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012326:	693b      	ldr	r3, [r7, #16]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d002      	beq.n	8012332 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801232c:	693b      	ldr	r3, [r7, #16]
 801232e:	3b01      	subs	r3, #1
 8012330:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012332:	693b      	ldr	r3, [r7, #16]
 8012334:	1c5a      	adds	r2, r3, #1
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801233a:	697b      	ldr	r3, [r7, #20]
}
 801233c:	4618      	mov	r0, r3
 801233e:	3718      	adds	r7, #24
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}

08012344 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b082      	sub	sp, #8
 8012348:	af00      	add	r7, sp, #0
 801234a:	6078      	str	r0, [r7, #4]
 801234c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012352:	2b00      	cmp	r3, #0
 8012354:	d018      	beq.n	8012388 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	68da      	ldr	r2, [r3, #12]
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801235e:	441a      	add	r2, r3
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	68da      	ldr	r2, [r3, #12]
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	689b      	ldr	r3, [r3, #8]
 801236c:	429a      	cmp	r2, r3
 801236e:	d303      	bcc.n	8012378 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	681a      	ldr	r2, [r3, #0]
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	68d9      	ldr	r1, [r3, #12]
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012380:	461a      	mov	r2, r3
 8012382:	6838      	ldr	r0, [r7, #0]
 8012384:	f002 f86a 	bl	801445c <memcpy>
	}
}
 8012388:	bf00      	nop
 801238a:	3708      	adds	r7, #8
 801238c:	46bd      	mov	sp, r7
 801238e:	bd80      	pop	{r7, pc}

08012390 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b084      	sub	sp, #16
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012398:	f001 f8b4 	bl	8013504 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80123a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80123a4:	e011      	b.n	80123ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d012      	beq.n	80123d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	3324      	adds	r3, #36	; 0x24
 80123b2:	4618      	mov	r0, r3
 80123b4:	f000 fcac 	bl	8012d10 <xTaskRemoveFromEventList>
 80123b8:	4603      	mov	r3, r0
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d001      	beq.n	80123c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80123be:	f000 fd81 	bl	8012ec4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80123c2:	7bfb      	ldrb	r3, [r7, #15]
 80123c4:	3b01      	subs	r3, #1
 80123c6:	b2db      	uxtb	r3, r3
 80123c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80123ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	dce9      	bgt.n	80123a6 <prvUnlockQueue+0x16>
 80123d2:	e000      	b.n	80123d6 <prvUnlockQueue+0x46>
					break;
 80123d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	22ff      	movs	r2, #255	; 0xff
 80123da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80123de:	f001 f8c1 	bl	8013564 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80123e2:	f001 f88f 	bl	8013504 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80123ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80123ee:	e011      	b.n	8012414 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	691b      	ldr	r3, [r3, #16]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d012      	beq.n	801241e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	3310      	adds	r3, #16
 80123fc:	4618      	mov	r0, r3
 80123fe:	f000 fc87 	bl	8012d10 <xTaskRemoveFromEventList>
 8012402:	4603      	mov	r3, r0
 8012404:	2b00      	cmp	r3, #0
 8012406:	d001      	beq.n	801240c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012408:	f000 fd5c 	bl	8012ec4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801240c:	7bbb      	ldrb	r3, [r7, #14]
 801240e:	3b01      	subs	r3, #1
 8012410:	b2db      	uxtb	r3, r3
 8012412:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012414:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012418:	2b00      	cmp	r3, #0
 801241a:	dce9      	bgt.n	80123f0 <prvUnlockQueue+0x60>
 801241c:	e000      	b.n	8012420 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801241e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	22ff      	movs	r2, #255	; 0xff
 8012424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012428:	f001 f89c 	bl	8013564 <vPortExitCritical>
}
 801242c:	bf00      	nop
 801242e:	3710      	adds	r7, #16
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}

08012434 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b084      	sub	sp, #16
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801243c:	f001 f862 	bl	8013504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012444:	2b00      	cmp	r3, #0
 8012446:	d102      	bne.n	801244e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012448:	2301      	movs	r3, #1
 801244a:	60fb      	str	r3, [r7, #12]
 801244c:	e001      	b.n	8012452 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801244e:	2300      	movs	r3, #0
 8012450:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012452:	f001 f887 	bl	8013564 <vPortExitCritical>

	return xReturn;
 8012456:	68fb      	ldr	r3, [r7, #12]
}
 8012458:	4618      	mov	r0, r3
 801245a:	3710      	adds	r7, #16
 801245c:	46bd      	mov	sp, r7
 801245e:	bd80      	pop	{r7, pc}

08012460 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b084      	sub	sp, #16
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012468:	f001 f84c 	bl	8013504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012474:	429a      	cmp	r2, r3
 8012476:	d102      	bne.n	801247e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012478:	2301      	movs	r3, #1
 801247a:	60fb      	str	r3, [r7, #12]
 801247c:	e001      	b.n	8012482 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801247e:	2300      	movs	r3, #0
 8012480:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012482:	f001 f86f 	bl	8013564 <vPortExitCritical>

	return xReturn;
 8012486:	68fb      	ldr	r3, [r7, #12]
}
 8012488:	4618      	mov	r0, r3
 801248a:	3710      	adds	r7, #16
 801248c:	46bd      	mov	sp, r7
 801248e:	bd80      	pop	{r7, pc}

08012490 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012490:	b580      	push	{r7, lr}
 8012492:	b08e      	sub	sp, #56	; 0x38
 8012494:	af04      	add	r7, sp, #16
 8012496:	60f8      	str	r0, [r7, #12]
 8012498:	60b9      	str	r1, [r7, #8]
 801249a:	607a      	str	r2, [r7, #4]
 801249c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801249e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d10a      	bne.n	80124ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80124a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124a8:	f383 8811 	msr	BASEPRI, r3
 80124ac:	f3bf 8f6f 	isb	sy
 80124b0:	f3bf 8f4f 	dsb	sy
 80124b4:	623b      	str	r3, [r7, #32]
}
 80124b6:	bf00      	nop
 80124b8:	e7fe      	b.n	80124b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80124ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d10a      	bne.n	80124d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80124c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124c4:	f383 8811 	msr	BASEPRI, r3
 80124c8:	f3bf 8f6f 	isb	sy
 80124cc:	f3bf 8f4f 	dsb	sy
 80124d0:	61fb      	str	r3, [r7, #28]
}
 80124d2:	bf00      	nop
 80124d4:	e7fe      	b.n	80124d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80124d6:	23b4      	movs	r3, #180	; 0xb4
 80124d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80124da:	693b      	ldr	r3, [r7, #16]
 80124dc:	2bb4      	cmp	r3, #180	; 0xb4
 80124de:	d00a      	beq.n	80124f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80124e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124e4:	f383 8811 	msr	BASEPRI, r3
 80124e8:	f3bf 8f6f 	isb	sy
 80124ec:	f3bf 8f4f 	dsb	sy
 80124f0:	61bb      	str	r3, [r7, #24]
}
 80124f2:	bf00      	nop
 80124f4:	e7fe      	b.n	80124f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80124f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80124f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d01e      	beq.n	801253c <xTaskCreateStatic+0xac>
 80124fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012500:	2b00      	cmp	r3, #0
 8012502:	d01b      	beq.n	801253c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012506:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801250a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801250c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012510:	2202      	movs	r2, #2
 8012512:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012516:	2300      	movs	r3, #0
 8012518:	9303      	str	r3, [sp, #12]
 801251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801251c:	9302      	str	r3, [sp, #8]
 801251e:	f107 0314 	add.w	r3, r7, #20
 8012522:	9301      	str	r3, [sp, #4]
 8012524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012526:	9300      	str	r3, [sp, #0]
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	687a      	ldr	r2, [r7, #4]
 801252c:	68b9      	ldr	r1, [r7, #8]
 801252e:	68f8      	ldr	r0, [r7, #12]
 8012530:	f000 f850 	bl	80125d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012534:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012536:	f000 f8eb 	bl	8012710 <prvAddNewTaskToReadyList>
 801253a:	e001      	b.n	8012540 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801253c:	2300      	movs	r3, #0
 801253e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012540:	697b      	ldr	r3, [r7, #20]
	}
 8012542:	4618      	mov	r0, r3
 8012544:	3728      	adds	r7, #40	; 0x28
 8012546:	46bd      	mov	sp, r7
 8012548:	bd80      	pop	{r7, pc}

0801254a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801254a:	b580      	push	{r7, lr}
 801254c:	b08c      	sub	sp, #48	; 0x30
 801254e:	af04      	add	r7, sp, #16
 8012550:	60f8      	str	r0, [r7, #12]
 8012552:	60b9      	str	r1, [r7, #8]
 8012554:	603b      	str	r3, [r7, #0]
 8012556:	4613      	mov	r3, r2
 8012558:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801255a:	88fb      	ldrh	r3, [r7, #6]
 801255c:	009b      	lsls	r3, r3, #2
 801255e:	4618      	mov	r0, r3
 8012560:	f001 f8f2 	bl	8013748 <pvPortMalloc>
 8012564:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012566:	697b      	ldr	r3, [r7, #20]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d00e      	beq.n	801258a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801256c:	20b4      	movs	r0, #180	; 0xb4
 801256e:	f001 f8eb 	bl	8013748 <pvPortMalloc>
 8012572:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012574:	69fb      	ldr	r3, [r7, #28]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d003      	beq.n	8012582 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801257a:	69fb      	ldr	r3, [r7, #28]
 801257c:	697a      	ldr	r2, [r7, #20]
 801257e:	631a      	str	r2, [r3, #48]	; 0x30
 8012580:	e005      	b.n	801258e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012582:	6978      	ldr	r0, [r7, #20]
 8012584:	f001 f9ac 	bl	80138e0 <vPortFree>
 8012588:	e001      	b.n	801258e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801258a:	2300      	movs	r3, #0
 801258c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801258e:	69fb      	ldr	r3, [r7, #28]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d017      	beq.n	80125c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012594:	69fb      	ldr	r3, [r7, #28]
 8012596:	2200      	movs	r2, #0
 8012598:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801259c:	88fa      	ldrh	r2, [r7, #6]
 801259e:	2300      	movs	r3, #0
 80125a0:	9303      	str	r3, [sp, #12]
 80125a2:	69fb      	ldr	r3, [r7, #28]
 80125a4:	9302      	str	r3, [sp, #8]
 80125a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125a8:	9301      	str	r3, [sp, #4]
 80125aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125ac:	9300      	str	r3, [sp, #0]
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	68b9      	ldr	r1, [r7, #8]
 80125b2:	68f8      	ldr	r0, [r7, #12]
 80125b4:	f000 f80e 	bl	80125d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80125b8:	69f8      	ldr	r0, [r7, #28]
 80125ba:	f000 f8a9 	bl	8012710 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80125be:	2301      	movs	r3, #1
 80125c0:	61bb      	str	r3, [r7, #24]
 80125c2:	e002      	b.n	80125ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80125c4:	f04f 33ff 	mov.w	r3, #4294967295
 80125c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80125ca:	69bb      	ldr	r3, [r7, #24]
	}
 80125cc:	4618      	mov	r0, r3
 80125ce:	3720      	adds	r7, #32
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bd80      	pop	{r7, pc}

080125d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b088      	sub	sp, #32
 80125d8:	af00      	add	r7, sp, #0
 80125da:	60f8      	str	r0, [r7, #12]
 80125dc:	60b9      	str	r1, [r7, #8]
 80125de:	607a      	str	r2, [r7, #4]
 80125e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80125e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80125ec:	3b01      	subs	r3, #1
 80125ee:	009b      	lsls	r3, r3, #2
 80125f0:	4413      	add	r3, r2
 80125f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80125f4:	69bb      	ldr	r3, [r7, #24]
 80125f6:	f023 0307 	bic.w	r3, r3, #7
 80125fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80125fc:	69bb      	ldr	r3, [r7, #24]
 80125fe:	f003 0307 	and.w	r3, r3, #7
 8012602:	2b00      	cmp	r3, #0
 8012604:	d00a      	beq.n	801261c <prvInitialiseNewTask+0x48>
	__asm volatile
 8012606:	f04f 0350 	mov.w	r3, #80	; 0x50
 801260a:	f383 8811 	msr	BASEPRI, r3
 801260e:	f3bf 8f6f 	isb	sy
 8012612:	f3bf 8f4f 	dsb	sy
 8012616:	617b      	str	r3, [r7, #20]
}
 8012618:	bf00      	nop
 801261a:	e7fe      	b.n	801261a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801261c:	68bb      	ldr	r3, [r7, #8]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d01f      	beq.n	8012662 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012622:	2300      	movs	r3, #0
 8012624:	61fb      	str	r3, [r7, #28]
 8012626:	e012      	b.n	801264e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012628:	68ba      	ldr	r2, [r7, #8]
 801262a:	69fb      	ldr	r3, [r7, #28]
 801262c:	4413      	add	r3, r2
 801262e:	7819      	ldrb	r1, [r3, #0]
 8012630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012632:	69fb      	ldr	r3, [r7, #28]
 8012634:	4413      	add	r3, r2
 8012636:	3334      	adds	r3, #52	; 0x34
 8012638:	460a      	mov	r2, r1
 801263a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801263c:	68ba      	ldr	r2, [r7, #8]
 801263e:	69fb      	ldr	r3, [r7, #28]
 8012640:	4413      	add	r3, r2
 8012642:	781b      	ldrb	r3, [r3, #0]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d006      	beq.n	8012656 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012648:	69fb      	ldr	r3, [r7, #28]
 801264a:	3301      	adds	r3, #1
 801264c:	61fb      	str	r3, [r7, #28]
 801264e:	69fb      	ldr	r3, [r7, #28]
 8012650:	2b0f      	cmp	r3, #15
 8012652:	d9e9      	bls.n	8012628 <prvInitialiseNewTask+0x54>
 8012654:	e000      	b.n	8012658 <prvInitialiseNewTask+0x84>
			{
				break;
 8012656:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801265a:	2200      	movs	r2, #0
 801265c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012660:	e003      	b.n	801266a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012664:	2200      	movs	r2, #0
 8012666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801266c:	2b06      	cmp	r3, #6
 801266e:	d901      	bls.n	8012674 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012670:	2306      	movs	r3, #6
 8012672:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012678:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801267a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801267c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801267e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012682:	2200      	movs	r2, #0
 8012684:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012688:	3304      	adds	r3, #4
 801268a:	4618      	mov	r0, r3
 801268c:	f7ff f928 	bl	80118e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012692:	3318      	adds	r3, #24
 8012694:	4618      	mov	r0, r3
 8012696:	f7ff f923 	bl	80118e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801269a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801269c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801269e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80126a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126a2:	f1c3 0207 	rsb	r2, r3, #7
 80126a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80126aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80126ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80126b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126b2:	2200      	movs	r2, #0
 80126b4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80126b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ba:	2200      	movs	r2, #0
 80126bc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80126c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c2:	334c      	adds	r3, #76	; 0x4c
 80126c4:	2260      	movs	r2, #96	; 0x60
 80126c6:	2100      	movs	r1, #0
 80126c8:	4618      	mov	r0, r3
 80126ca:	f001 fed5 	bl	8014478 <memset>
 80126ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126d0:	4a0c      	ldr	r2, [pc, #48]	; (8012704 <prvInitialiseNewTask+0x130>)
 80126d2:	651a      	str	r2, [r3, #80]	; 0x50
 80126d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126d6:	4a0c      	ldr	r2, [pc, #48]	; (8012708 <prvInitialiseNewTask+0x134>)
 80126d8:	655a      	str	r2, [r3, #84]	; 0x54
 80126da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126dc:	4a0b      	ldr	r2, [pc, #44]	; (801270c <prvInitialiseNewTask+0x138>)
 80126de:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80126e0:	683a      	ldr	r2, [r7, #0]
 80126e2:	68f9      	ldr	r1, [r7, #12]
 80126e4:	69b8      	ldr	r0, [r7, #24]
 80126e6:	f000 fddd 	bl	80132a4 <pxPortInitialiseStack>
 80126ea:	4602      	mov	r2, r0
 80126ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80126f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d002      	beq.n	80126fc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80126f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80126fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80126fc:	bf00      	nop
 80126fe:	3720      	adds	r7, #32
 8012700:	46bd      	mov	sp, r7
 8012702:	bd80      	pop	{r7, pc}
 8012704:	08017464 	.word	0x08017464
 8012708:	08017484 	.word	0x08017484
 801270c:	08017444 	.word	0x08017444

08012710 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b082      	sub	sp, #8
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012718:	f000 fef4 	bl	8013504 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801271c:	4b2a      	ldr	r3, [pc, #168]	; (80127c8 <prvAddNewTaskToReadyList+0xb8>)
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	3301      	adds	r3, #1
 8012722:	4a29      	ldr	r2, [pc, #164]	; (80127c8 <prvAddNewTaskToReadyList+0xb8>)
 8012724:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012726:	4b29      	ldr	r3, [pc, #164]	; (80127cc <prvAddNewTaskToReadyList+0xbc>)
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d109      	bne.n	8012742 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801272e:	4a27      	ldr	r2, [pc, #156]	; (80127cc <prvAddNewTaskToReadyList+0xbc>)
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012734:	4b24      	ldr	r3, [pc, #144]	; (80127c8 <prvAddNewTaskToReadyList+0xb8>)
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	2b01      	cmp	r3, #1
 801273a:	d110      	bne.n	801275e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801273c:	f000 fbe6 	bl	8012f0c <prvInitialiseTaskLists>
 8012740:	e00d      	b.n	801275e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012742:	4b23      	ldr	r3, [pc, #140]	; (80127d0 <prvAddNewTaskToReadyList+0xc0>)
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d109      	bne.n	801275e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801274a:	4b20      	ldr	r3, [pc, #128]	; (80127cc <prvAddNewTaskToReadyList+0xbc>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012754:	429a      	cmp	r2, r3
 8012756:	d802      	bhi.n	801275e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012758:	4a1c      	ldr	r2, [pc, #112]	; (80127cc <prvAddNewTaskToReadyList+0xbc>)
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801275e:	4b1d      	ldr	r3, [pc, #116]	; (80127d4 <prvAddNewTaskToReadyList+0xc4>)
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	3301      	adds	r3, #1
 8012764:	4a1b      	ldr	r2, [pc, #108]	; (80127d4 <prvAddNewTaskToReadyList+0xc4>)
 8012766:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801276c:	2201      	movs	r2, #1
 801276e:	409a      	lsls	r2, r3
 8012770:	4b19      	ldr	r3, [pc, #100]	; (80127d8 <prvAddNewTaskToReadyList+0xc8>)
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	4313      	orrs	r3, r2
 8012776:	4a18      	ldr	r2, [pc, #96]	; (80127d8 <prvAddNewTaskToReadyList+0xc8>)
 8012778:	6013      	str	r3, [r2, #0]
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801277e:	4613      	mov	r3, r2
 8012780:	009b      	lsls	r3, r3, #2
 8012782:	4413      	add	r3, r2
 8012784:	009b      	lsls	r3, r3, #2
 8012786:	4a15      	ldr	r2, [pc, #84]	; (80127dc <prvAddNewTaskToReadyList+0xcc>)
 8012788:	441a      	add	r2, r3
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	3304      	adds	r3, #4
 801278e:	4619      	mov	r1, r3
 8012790:	4610      	mov	r0, r2
 8012792:	f7ff f8b2 	bl	80118fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012796:	f000 fee5 	bl	8013564 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801279a:	4b0d      	ldr	r3, [pc, #52]	; (80127d0 <prvAddNewTaskToReadyList+0xc0>)
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d00e      	beq.n	80127c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80127a2:	4b0a      	ldr	r3, [pc, #40]	; (80127cc <prvAddNewTaskToReadyList+0xbc>)
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127ac:	429a      	cmp	r2, r3
 80127ae:	d207      	bcs.n	80127c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80127b0:	4b0b      	ldr	r3, [pc, #44]	; (80127e0 <prvAddNewTaskToReadyList+0xd0>)
 80127b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127b6:	601a      	str	r2, [r3, #0]
 80127b8:	f3bf 8f4f 	dsb	sy
 80127bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80127c0:	bf00      	nop
 80127c2:	3708      	adds	r7, #8
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}
 80127c8:	20002398 	.word	0x20002398
 80127cc:	20002298 	.word	0x20002298
 80127d0:	200023a4 	.word	0x200023a4
 80127d4:	200023b4 	.word	0x200023b4
 80127d8:	200023a0 	.word	0x200023a0
 80127dc:	2000229c 	.word	0x2000229c
 80127e0:	e000ed04 	.word	0xe000ed04

080127e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b084      	sub	sp, #16
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80127ec:	2300      	movs	r3, #0
 80127ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d017      	beq.n	8012826 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80127f6:	4b13      	ldr	r3, [pc, #76]	; (8012844 <vTaskDelay+0x60>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d00a      	beq.n	8012814 <vTaskDelay+0x30>
	__asm volatile
 80127fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012802:	f383 8811 	msr	BASEPRI, r3
 8012806:	f3bf 8f6f 	isb	sy
 801280a:	f3bf 8f4f 	dsb	sy
 801280e:	60bb      	str	r3, [r7, #8]
}
 8012810:	bf00      	nop
 8012812:	e7fe      	b.n	8012812 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012814:	f000 f884 	bl	8012920 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012818:	2100      	movs	r1, #0
 801281a:	6878      	ldr	r0, [r7, #4]
 801281c:	f000 fcdc 	bl	80131d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012820:	f000 f88c 	bl	801293c <xTaskResumeAll>
 8012824:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d107      	bne.n	801283c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801282c:	4b06      	ldr	r3, [pc, #24]	; (8012848 <vTaskDelay+0x64>)
 801282e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012832:	601a      	str	r2, [r3, #0]
 8012834:	f3bf 8f4f 	dsb	sy
 8012838:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801283c:	bf00      	nop
 801283e:	3710      	adds	r7, #16
 8012840:	46bd      	mov	sp, r7
 8012842:	bd80      	pop	{r7, pc}
 8012844:	200023c0 	.word	0x200023c0
 8012848:	e000ed04 	.word	0xe000ed04

0801284c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b08a      	sub	sp, #40	; 0x28
 8012850:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012852:	2300      	movs	r3, #0
 8012854:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012856:	2300      	movs	r3, #0
 8012858:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801285a:	463a      	mov	r2, r7
 801285c:	1d39      	adds	r1, r7, #4
 801285e:	f107 0308 	add.w	r3, r7, #8
 8012862:	4618      	mov	r0, r3
 8012864:	f7ee fbaa 	bl	8000fbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012868:	6839      	ldr	r1, [r7, #0]
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	68ba      	ldr	r2, [r7, #8]
 801286e:	9202      	str	r2, [sp, #8]
 8012870:	9301      	str	r3, [sp, #4]
 8012872:	2300      	movs	r3, #0
 8012874:	9300      	str	r3, [sp, #0]
 8012876:	2300      	movs	r3, #0
 8012878:	460a      	mov	r2, r1
 801287a:	4921      	ldr	r1, [pc, #132]	; (8012900 <vTaskStartScheduler+0xb4>)
 801287c:	4821      	ldr	r0, [pc, #132]	; (8012904 <vTaskStartScheduler+0xb8>)
 801287e:	f7ff fe07 	bl	8012490 <xTaskCreateStatic>
 8012882:	4603      	mov	r3, r0
 8012884:	4a20      	ldr	r2, [pc, #128]	; (8012908 <vTaskStartScheduler+0xbc>)
 8012886:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012888:	4b1f      	ldr	r3, [pc, #124]	; (8012908 <vTaskStartScheduler+0xbc>)
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d002      	beq.n	8012896 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012890:	2301      	movs	r3, #1
 8012892:	617b      	str	r3, [r7, #20]
 8012894:	e001      	b.n	801289a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012896:	2300      	movs	r3, #0
 8012898:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801289a:	697b      	ldr	r3, [r7, #20]
 801289c:	2b01      	cmp	r3, #1
 801289e:	d11b      	bne.n	80128d8 <vTaskStartScheduler+0x8c>
	__asm volatile
 80128a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128a4:	f383 8811 	msr	BASEPRI, r3
 80128a8:	f3bf 8f6f 	isb	sy
 80128ac:	f3bf 8f4f 	dsb	sy
 80128b0:	613b      	str	r3, [r7, #16]
}
 80128b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80128b4:	4b15      	ldr	r3, [pc, #84]	; (801290c <vTaskStartScheduler+0xc0>)
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	334c      	adds	r3, #76	; 0x4c
 80128ba:	4a15      	ldr	r2, [pc, #84]	; (8012910 <vTaskStartScheduler+0xc4>)
 80128bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80128be:	4b15      	ldr	r3, [pc, #84]	; (8012914 <vTaskStartScheduler+0xc8>)
 80128c0:	f04f 32ff 	mov.w	r2, #4294967295
 80128c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80128c6:	4b14      	ldr	r3, [pc, #80]	; (8012918 <vTaskStartScheduler+0xcc>)
 80128c8:	2201      	movs	r2, #1
 80128ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80128cc:	4b13      	ldr	r3, [pc, #76]	; (801291c <vTaskStartScheduler+0xd0>)
 80128ce:	2200      	movs	r2, #0
 80128d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80128d2:	f000 fd75 	bl	80133c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80128d6:	e00e      	b.n	80128f6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80128d8:	697b      	ldr	r3, [r7, #20]
 80128da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128de:	d10a      	bne.n	80128f6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80128e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128e4:	f383 8811 	msr	BASEPRI, r3
 80128e8:	f3bf 8f6f 	isb	sy
 80128ec:	f3bf 8f4f 	dsb	sy
 80128f0:	60fb      	str	r3, [r7, #12]
}
 80128f2:	bf00      	nop
 80128f4:	e7fe      	b.n	80128f4 <vTaskStartScheduler+0xa8>
}
 80128f6:	bf00      	nop
 80128f8:	3718      	adds	r7, #24
 80128fa:	46bd      	mov	sp, r7
 80128fc:	bd80      	pop	{r7, pc}
 80128fe:	bf00      	nop
 8012900:	08016fd0 	.word	0x08016fd0
 8012904:	08012edd 	.word	0x08012edd
 8012908:	200023bc 	.word	0x200023bc
 801290c:	20002298 	.word	0x20002298
 8012910:	200002b4 	.word	0x200002b4
 8012914:	200023b8 	.word	0x200023b8
 8012918:	200023a4 	.word	0x200023a4
 801291c:	2000239c 	.word	0x2000239c

08012920 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012920:	b480      	push	{r7}
 8012922:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012924:	4b04      	ldr	r3, [pc, #16]	; (8012938 <vTaskSuspendAll+0x18>)
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	3301      	adds	r3, #1
 801292a:	4a03      	ldr	r2, [pc, #12]	; (8012938 <vTaskSuspendAll+0x18>)
 801292c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801292e:	bf00      	nop
 8012930:	46bd      	mov	sp, r7
 8012932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012936:	4770      	bx	lr
 8012938:	200023c0 	.word	0x200023c0

0801293c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b084      	sub	sp, #16
 8012940:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012942:	2300      	movs	r3, #0
 8012944:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012946:	2300      	movs	r3, #0
 8012948:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801294a:	4b41      	ldr	r3, [pc, #260]	; (8012a50 <xTaskResumeAll+0x114>)
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d10a      	bne.n	8012968 <xTaskResumeAll+0x2c>
	__asm volatile
 8012952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012956:	f383 8811 	msr	BASEPRI, r3
 801295a:	f3bf 8f6f 	isb	sy
 801295e:	f3bf 8f4f 	dsb	sy
 8012962:	603b      	str	r3, [r7, #0]
}
 8012964:	bf00      	nop
 8012966:	e7fe      	b.n	8012966 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012968:	f000 fdcc 	bl	8013504 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801296c:	4b38      	ldr	r3, [pc, #224]	; (8012a50 <xTaskResumeAll+0x114>)
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	3b01      	subs	r3, #1
 8012972:	4a37      	ldr	r2, [pc, #220]	; (8012a50 <xTaskResumeAll+0x114>)
 8012974:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012976:	4b36      	ldr	r3, [pc, #216]	; (8012a50 <xTaskResumeAll+0x114>)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d161      	bne.n	8012a42 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801297e:	4b35      	ldr	r3, [pc, #212]	; (8012a54 <xTaskResumeAll+0x118>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d05d      	beq.n	8012a42 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012986:	e02e      	b.n	80129e6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012988:	4b33      	ldr	r3, [pc, #204]	; (8012a58 <xTaskResumeAll+0x11c>)
 801298a:	68db      	ldr	r3, [r3, #12]
 801298c:	68db      	ldr	r3, [r3, #12]
 801298e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	3318      	adds	r3, #24
 8012994:	4618      	mov	r0, r3
 8012996:	f7ff f80d 	bl	80119b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	3304      	adds	r3, #4
 801299e:	4618      	mov	r0, r3
 80129a0:	f7ff f808 	bl	80119b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129a8:	2201      	movs	r2, #1
 80129aa:	409a      	lsls	r2, r3
 80129ac:	4b2b      	ldr	r3, [pc, #172]	; (8012a5c <xTaskResumeAll+0x120>)
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	4313      	orrs	r3, r2
 80129b2:	4a2a      	ldr	r2, [pc, #168]	; (8012a5c <xTaskResumeAll+0x120>)
 80129b4:	6013      	str	r3, [r2, #0]
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129ba:	4613      	mov	r3, r2
 80129bc:	009b      	lsls	r3, r3, #2
 80129be:	4413      	add	r3, r2
 80129c0:	009b      	lsls	r3, r3, #2
 80129c2:	4a27      	ldr	r2, [pc, #156]	; (8012a60 <xTaskResumeAll+0x124>)
 80129c4:	441a      	add	r2, r3
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	3304      	adds	r3, #4
 80129ca:	4619      	mov	r1, r3
 80129cc:	4610      	mov	r0, r2
 80129ce:	f7fe ff94 	bl	80118fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129d6:	4b23      	ldr	r3, [pc, #140]	; (8012a64 <xTaskResumeAll+0x128>)
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129dc:	429a      	cmp	r2, r3
 80129de:	d302      	bcc.n	80129e6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80129e0:	4b21      	ldr	r3, [pc, #132]	; (8012a68 <xTaskResumeAll+0x12c>)
 80129e2:	2201      	movs	r2, #1
 80129e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80129e6:	4b1c      	ldr	r3, [pc, #112]	; (8012a58 <xTaskResumeAll+0x11c>)
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d1cc      	bne.n	8012988 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d001      	beq.n	80129f8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80129f4:	f000 fb2c 	bl	8013050 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80129f8:	4b1c      	ldr	r3, [pc, #112]	; (8012a6c <xTaskResumeAll+0x130>)
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d010      	beq.n	8012a26 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012a04:	f000 f846 	bl	8012a94 <xTaskIncrementTick>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d002      	beq.n	8012a14 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8012a0e:	4b16      	ldr	r3, [pc, #88]	; (8012a68 <xTaskResumeAll+0x12c>)
 8012a10:	2201      	movs	r2, #1
 8012a12:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	3b01      	subs	r3, #1
 8012a18:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d1f1      	bne.n	8012a04 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8012a20:	4b12      	ldr	r3, [pc, #72]	; (8012a6c <xTaskResumeAll+0x130>)
 8012a22:	2200      	movs	r2, #0
 8012a24:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012a26:	4b10      	ldr	r3, [pc, #64]	; (8012a68 <xTaskResumeAll+0x12c>)
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d009      	beq.n	8012a42 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012a2e:	2301      	movs	r3, #1
 8012a30:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012a32:	4b0f      	ldr	r3, [pc, #60]	; (8012a70 <xTaskResumeAll+0x134>)
 8012a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a38:	601a      	str	r2, [r3, #0]
 8012a3a:	f3bf 8f4f 	dsb	sy
 8012a3e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012a42:	f000 fd8f 	bl	8013564 <vPortExitCritical>

	return xAlreadyYielded;
 8012a46:	68bb      	ldr	r3, [r7, #8]
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	3710      	adds	r7, #16
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}
 8012a50:	200023c0 	.word	0x200023c0
 8012a54:	20002398 	.word	0x20002398
 8012a58:	20002358 	.word	0x20002358
 8012a5c:	200023a0 	.word	0x200023a0
 8012a60:	2000229c 	.word	0x2000229c
 8012a64:	20002298 	.word	0x20002298
 8012a68:	200023ac 	.word	0x200023ac
 8012a6c:	200023a8 	.word	0x200023a8
 8012a70:	e000ed04 	.word	0xe000ed04

08012a74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012a74:	b480      	push	{r7}
 8012a76:	b083      	sub	sp, #12
 8012a78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012a7a:	4b05      	ldr	r3, [pc, #20]	; (8012a90 <xTaskGetTickCount+0x1c>)
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012a80:	687b      	ldr	r3, [r7, #4]
}
 8012a82:	4618      	mov	r0, r3
 8012a84:	370c      	adds	r7, #12
 8012a86:	46bd      	mov	sp, r7
 8012a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8c:	4770      	bx	lr
 8012a8e:	bf00      	nop
 8012a90:	2000239c 	.word	0x2000239c

08012a94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b086      	sub	sp, #24
 8012a98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012a9e:	4b4e      	ldr	r3, [pc, #312]	; (8012bd8 <xTaskIncrementTick+0x144>)
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	f040 808e 	bne.w	8012bc4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012aa8:	4b4c      	ldr	r3, [pc, #304]	; (8012bdc <xTaskIncrementTick+0x148>)
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	3301      	adds	r3, #1
 8012aae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012ab0:	4a4a      	ldr	r2, [pc, #296]	; (8012bdc <xTaskIncrementTick+0x148>)
 8012ab2:	693b      	ldr	r3, [r7, #16]
 8012ab4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012ab6:	693b      	ldr	r3, [r7, #16]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d120      	bne.n	8012afe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012abc:	4b48      	ldr	r3, [pc, #288]	; (8012be0 <xTaskIncrementTick+0x14c>)
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d00a      	beq.n	8012adc <xTaskIncrementTick+0x48>
	__asm volatile
 8012ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aca:	f383 8811 	msr	BASEPRI, r3
 8012ace:	f3bf 8f6f 	isb	sy
 8012ad2:	f3bf 8f4f 	dsb	sy
 8012ad6:	603b      	str	r3, [r7, #0]
}
 8012ad8:	bf00      	nop
 8012ada:	e7fe      	b.n	8012ada <xTaskIncrementTick+0x46>
 8012adc:	4b40      	ldr	r3, [pc, #256]	; (8012be0 <xTaskIncrementTick+0x14c>)
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	60fb      	str	r3, [r7, #12]
 8012ae2:	4b40      	ldr	r3, [pc, #256]	; (8012be4 <xTaskIncrementTick+0x150>)
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	4a3e      	ldr	r2, [pc, #248]	; (8012be0 <xTaskIncrementTick+0x14c>)
 8012ae8:	6013      	str	r3, [r2, #0]
 8012aea:	4a3e      	ldr	r2, [pc, #248]	; (8012be4 <xTaskIncrementTick+0x150>)
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	6013      	str	r3, [r2, #0]
 8012af0:	4b3d      	ldr	r3, [pc, #244]	; (8012be8 <xTaskIncrementTick+0x154>)
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	3301      	adds	r3, #1
 8012af6:	4a3c      	ldr	r2, [pc, #240]	; (8012be8 <xTaskIncrementTick+0x154>)
 8012af8:	6013      	str	r3, [r2, #0]
 8012afa:	f000 faa9 	bl	8013050 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012afe:	4b3b      	ldr	r3, [pc, #236]	; (8012bec <xTaskIncrementTick+0x158>)
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	693a      	ldr	r2, [r7, #16]
 8012b04:	429a      	cmp	r2, r3
 8012b06:	d348      	bcc.n	8012b9a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012b08:	4b35      	ldr	r3, [pc, #212]	; (8012be0 <xTaskIncrementTick+0x14c>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d104      	bne.n	8012b1c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b12:	4b36      	ldr	r3, [pc, #216]	; (8012bec <xTaskIncrementTick+0x158>)
 8012b14:	f04f 32ff 	mov.w	r2, #4294967295
 8012b18:	601a      	str	r2, [r3, #0]
					break;
 8012b1a:	e03e      	b.n	8012b9a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012b1c:	4b30      	ldr	r3, [pc, #192]	; (8012be0 <xTaskIncrementTick+0x14c>)
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	68db      	ldr	r3, [r3, #12]
 8012b22:	68db      	ldr	r3, [r3, #12]
 8012b24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012b26:	68bb      	ldr	r3, [r7, #8]
 8012b28:	685b      	ldr	r3, [r3, #4]
 8012b2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012b2c:	693a      	ldr	r2, [r7, #16]
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	429a      	cmp	r2, r3
 8012b32:	d203      	bcs.n	8012b3c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012b34:	4a2d      	ldr	r2, [pc, #180]	; (8012bec <xTaskIncrementTick+0x158>)
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012b3a:	e02e      	b.n	8012b9a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012b3c:	68bb      	ldr	r3, [r7, #8]
 8012b3e:	3304      	adds	r3, #4
 8012b40:	4618      	mov	r0, r3
 8012b42:	f7fe ff37 	bl	80119b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012b46:	68bb      	ldr	r3, [r7, #8]
 8012b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d004      	beq.n	8012b58 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012b4e:	68bb      	ldr	r3, [r7, #8]
 8012b50:	3318      	adds	r3, #24
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7fe ff2e 	bl	80119b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012b58:	68bb      	ldr	r3, [r7, #8]
 8012b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b5c:	2201      	movs	r2, #1
 8012b5e:	409a      	lsls	r2, r3
 8012b60:	4b23      	ldr	r3, [pc, #140]	; (8012bf0 <xTaskIncrementTick+0x15c>)
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	4313      	orrs	r3, r2
 8012b66:	4a22      	ldr	r2, [pc, #136]	; (8012bf0 <xTaskIncrementTick+0x15c>)
 8012b68:	6013      	str	r3, [r2, #0]
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b6e:	4613      	mov	r3, r2
 8012b70:	009b      	lsls	r3, r3, #2
 8012b72:	4413      	add	r3, r2
 8012b74:	009b      	lsls	r3, r3, #2
 8012b76:	4a1f      	ldr	r2, [pc, #124]	; (8012bf4 <xTaskIncrementTick+0x160>)
 8012b78:	441a      	add	r2, r3
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	3304      	adds	r3, #4
 8012b7e:	4619      	mov	r1, r3
 8012b80:	4610      	mov	r0, r2
 8012b82:	f7fe feba 	bl	80118fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012b86:	68bb      	ldr	r3, [r7, #8]
 8012b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b8a:	4b1b      	ldr	r3, [pc, #108]	; (8012bf8 <xTaskIncrementTick+0x164>)
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b90:	429a      	cmp	r2, r3
 8012b92:	d3b9      	bcc.n	8012b08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8012b94:	2301      	movs	r3, #1
 8012b96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012b98:	e7b6      	b.n	8012b08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012b9a:	4b17      	ldr	r3, [pc, #92]	; (8012bf8 <xTaskIncrementTick+0x164>)
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ba0:	4914      	ldr	r1, [pc, #80]	; (8012bf4 <xTaskIncrementTick+0x160>)
 8012ba2:	4613      	mov	r3, r2
 8012ba4:	009b      	lsls	r3, r3, #2
 8012ba6:	4413      	add	r3, r2
 8012ba8:	009b      	lsls	r3, r3, #2
 8012baa:	440b      	add	r3, r1
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	2b01      	cmp	r3, #1
 8012bb0:	d901      	bls.n	8012bb6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8012bb2:	2301      	movs	r3, #1
 8012bb4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012bb6:	4b11      	ldr	r3, [pc, #68]	; (8012bfc <xTaskIncrementTick+0x168>)
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d007      	beq.n	8012bce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8012bbe:	2301      	movs	r3, #1
 8012bc0:	617b      	str	r3, [r7, #20]
 8012bc2:	e004      	b.n	8012bce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012bc4:	4b0e      	ldr	r3, [pc, #56]	; (8012c00 <xTaskIncrementTick+0x16c>)
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	3301      	adds	r3, #1
 8012bca:	4a0d      	ldr	r2, [pc, #52]	; (8012c00 <xTaskIncrementTick+0x16c>)
 8012bcc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012bce:	697b      	ldr	r3, [r7, #20]
}
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	3718      	adds	r7, #24
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd80      	pop	{r7, pc}
 8012bd8:	200023c0 	.word	0x200023c0
 8012bdc:	2000239c 	.word	0x2000239c
 8012be0:	20002350 	.word	0x20002350
 8012be4:	20002354 	.word	0x20002354
 8012be8:	200023b0 	.word	0x200023b0
 8012bec:	200023b8 	.word	0x200023b8
 8012bf0:	200023a0 	.word	0x200023a0
 8012bf4:	2000229c 	.word	0x2000229c
 8012bf8:	20002298 	.word	0x20002298
 8012bfc:	200023ac 	.word	0x200023ac
 8012c00:	200023a8 	.word	0x200023a8

08012c04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012c04:	b480      	push	{r7}
 8012c06:	b087      	sub	sp, #28
 8012c08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012c0a:	4b29      	ldr	r3, [pc, #164]	; (8012cb0 <vTaskSwitchContext+0xac>)
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d003      	beq.n	8012c1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012c12:	4b28      	ldr	r3, [pc, #160]	; (8012cb4 <vTaskSwitchContext+0xb0>)
 8012c14:	2201      	movs	r2, #1
 8012c16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012c18:	e044      	b.n	8012ca4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8012c1a:	4b26      	ldr	r3, [pc, #152]	; (8012cb4 <vTaskSwitchContext+0xb0>)
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012c20:	4b25      	ldr	r3, [pc, #148]	; (8012cb8 <vTaskSwitchContext+0xb4>)
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	fab3 f383 	clz	r3, r3
 8012c2c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012c2e:	7afb      	ldrb	r3, [r7, #11]
 8012c30:	f1c3 031f 	rsb	r3, r3, #31
 8012c34:	617b      	str	r3, [r7, #20]
 8012c36:	4921      	ldr	r1, [pc, #132]	; (8012cbc <vTaskSwitchContext+0xb8>)
 8012c38:	697a      	ldr	r2, [r7, #20]
 8012c3a:	4613      	mov	r3, r2
 8012c3c:	009b      	lsls	r3, r3, #2
 8012c3e:	4413      	add	r3, r2
 8012c40:	009b      	lsls	r3, r3, #2
 8012c42:	440b      	add	r3, r1
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d10a      	bne.n	8012c60 <vTaskSwitchContext+0x5c>
	__asm volatile
 8012c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c4e:	f383 8811 	msr	BASEPRI, r3
 8012c52:	f3bf 8f6f 	isb	sy
 8012c56:	f3bf 8f4f 	dsb	sy
 8012c5a:	607b      	str	r3, [r7, #4]
}
 8012c5c:	bf00      	nop
 8012c5e:	e7fe      	b.n	8012c5e <vTaskSwitchContext+0x5a>
 8012c60:	697a      	ldr	r2, [r7, #20]
 8012c62:	4613      	mov	r3, r2
 8012c64:	009b      	lsls	r3, r3, #2
 8012c66:	4413      	add	r3, r2
 8012c68:	009b      	lsls	r3, r3, #2
 8012c6a:	4a14      	ldr	r2, [pc, #80]	; (8012cbc <vTaskSwitchContext+0xb8>)
 8012c6c:	4413      	add	r3, r2
 8012c6e:	613b      	str	r3, [r7, #16]
 8012c70:	693b      	ldr	r3, [r7, #16]
 8012c72:	685b      	ldr	r3, [r3, #4]
 8012c74:	685a      	ldr	r2, [r3, #4]
 8012c76:	693b      	ldr	r3, [r7, #16]
 8012c78:	605a      	str	r2, [r3, #4]
 8012c7a:	693b      	ldr	r3, [r7, #16]
 8012c7c:	685a      	ldr	r2, [r3, #4]
 8012c7e:	693b      	ldr	r3, [r7, #16]
 8012c80:	3308      	adds	r3, #8
 8012c82:	429a      	cmp	r2, r3
 8012c84:	d104      	bne.n	8012c90 <vTaskSwitchContext+0x8c>
 8012c86:	693b      	ldr	r3, [r7, #16]
 8012c88:	685b      	ldr	r3, [r3, #4]
 8012c8a:	685a      	ldr	r2, [r3, #4]
 8012c8c:	693b      	ldr	r3, [r7, #16]
 8012c8e:	605a      	str	r2, [r3, #4]
 8012c90:	693b      	ldr	r3, [r7, #16]
 8012c92:	685b      	ldr	r3, [r3, #4]
 8012c94:	68db      	ldr	r3, [r3, #12]
 8012c96:	4a0a      	ldr	r2, [pc, #40]	; (8012cc0 <vTaskSwitchContext+0xbc>)
 8012c98:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012c9a:	4b09      	ldr	r3, [pc, #36]	; (8012cc0 <vTaskSwitchContext+0xbc>)
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	334c      	adds	r3, #76	; 0x4c
 8012ca0:	4a08      	ldr	r2, [pc, #32]	; (8012cc4 <vTaskSwitchContext+0xc0>)
 8012ca2:	6013      	str	r3, [r2, #0]
}
 8012ca4:	bf00      	nop
 8012ca6:	371c      	adds	r7, #28
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cae:	4770      	bx	lr
 8012cb0:	200023c0 	.word	0x200023c0
 8012cb4:	200023ac 	.word	0x200023ac
 8012cb8:	200023a0 	.word	0x200023a0
 8012cbc:	2000229c 	.word	0x2000229c
 8012cc0:	20002298 	.word	0x20002298
 8012cc4:	200002b4 	.word	0x200002b4

08012cc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b084      	sub	sp, #16
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
 8012cd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d10a      	bne.n	8012cee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8012cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cdc:	f383 8811 	msr	BASEPRI, r3
 8012ce0:	f3bf 8f6f 	isb	sy
 8012ce4:	f3bf 8f4f 	dsb	sy
 8012ce8:	60fb      	str	r3, [r7, #12]
}
 8012cea:	bf00      	nop
 8012cec:	e7fe      	b.n	8012cec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012cee:	4b07      	ldr	r3, [pc, #28]	; (8012d0c <vTaskPlaceOnEventList+0x44>)
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	3318      	adds	r3, #24
 8012cf4:	4619      	mov	r1, r3
 8012cf6:	6878      	ldr	r0, [r7, #4]
 8012cf8:	f7fe fe23 	bl	8011942 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012cfc:	2101      	movs	r1, #1
 8012cfe:	6838      	ldr	r0, [r7, #0]
 8012d00:	f000 fa6a 	bl	80131d8 <prvAddCurrentTaskToDelayedList>
}
 8012d04:	bf00      	nop
 8012d06:	3710      	adds	r7, #16
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	bd80      	pop	{r7, pc}
 8012d0c:	20002298 	.word	0x20002298

08012d10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b086      	sub	sp, #24
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	68db      	ldr	r3, [r3, #12]
 8012d1c:	68db      	ldr	r3, [r3, #12]
 8012d1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012d20:	693b      	ldr	r3, [r7, #16]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d10a      	bne.n	8012d3c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8012d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d2a:	f383 8811 	msr	BASEPRI, r3
 8012d2e:	f3bf 8f6f 	isb	sy
 8012d32:	f3bf 8f4f 	dsb	sy
 8012d36:	60fb      	str	r3, [r7, #12]
}
 8012d38:	bf00      	nop
 8012d3a:	e7fe      	b.n	8012d3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012d3c:	693b      	ldr	r3, [r7, #16]
 8012d3e:	3318      	adds	r3, #24
 8012d40:	4618      	mov	r0, r3
 8012d42:	f7fe fe37 	bl	80119b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012d46:	4b1d      	ldr	r3, [pc, #116]	; (8012dbc <xTaskRemoveFromEventList+0xac>)
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d11c      	bne.n	8012d88 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012d4e:	693b      	ldr	r3, [r7, #16]
 8012d50:	3304      	adds	r3, #4
 8012d52:	4618      	mov	r0, r3
 8012d54:	f7fe fe2e 	bl	80119b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012d58:	693b      	ldr	r3, [r7, #16]
 8012d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d5c:	2201      	movs	r2, #1
 8012d5e:	409a      	lsls	r2, r3
 8012d60:	4b17      	ldr	r3, [pc, #92]	; (8012dc0 <xTaskRemoveFromEventList+0xb0>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	4313      	orrs	r3, r2
 8012d66:	4a16      	ldr	r2, [pc, #88]	; (8012dc0 <xTaskRemoveFromEventList+0xb0>)
 8012d68:	6013      	str	r3, [r2, #0]
 8012d6a:	693b      	ldr	r3, [r7, #16]
 8012d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d6e:	4613      	mov	r3, r2
 8012d70:	009b      	lsls	r3, r3, #2
 8012d72:	4413      	add	r3, r2
 8012d74:	009b      	lsls	r3, r3, #2
 8012d76:	4a13      	ldr	r2, [pc, #76]	; (8012dc4 <xTaskRemoveFromEventList+0xb4>)
 8012d78:	441a      	add	r2, r3
 8012d7a:	693b      	ldr	r3, [r7, #16]
 8012d7c:	3304      	adds	r3, #4
 8012d7e:	4619      	mov	r1, r3
 8012d80:	4610      	mov	r0, r2
 8012d82:	f7fe fdba 	bl	80118fa <vListInsertEnd>
 8012d86:	e005      	b.n	8012d94 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012d88:	693b      	ldr	r3, [r7, #16]
 8012d8a:	3318      	adds	r3, #24
 8012d8c:	4619      	mov	r1, r3
 8012d8e:	480e      	ldr	r0, [pc, #56]	; (8012dc8 <xTaskRemoveFromEventList+0xb8>)
 8012d90:	f7fe fdb3 	bl	80118fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012d94:	693b      	ldr	r3, [r7, #16]
 8012d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d98:	4b0c      	ldr	r3, [pc, #48]	; (8012dcc <xTaskRemoveFromEventList+0xbc>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d9e:	429a      	cmp	r2, r3
 8012da0:	d905      	bls.n	8012dae <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012da2:	2301      	movs	r3, #1
 8012da4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012da6:	4b0a      	ldr	r3, [pc, #40]	; (8012dd0 <xTaskRemoveFromEventList+0xc0>)
 8012da8:	2201      	movs	r2, #1
 8012daa:	601a      	str	r2, [r3, #0]
 8012dac:	e001      	b.n	8012db2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8012dae:	2300      	movs	r3, #0
 8012db0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012db2:	697b      	ldr	r3, [r7, #20]
}
 8012db4:	4618      	mov	r0, r3
 8012db6:	3718      	adds	r7, #24
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bd80      	pop	{r7, pc}
 8012dbc:	200023c0 	.word	0x200023c0
 8012dc0:	200023a0 	.word	0x200023a0
 8012dc4:	2000229c 	.word	0x2000229c
 8012dc8:	20002358 	.word	0x20002358
 8012dcc:	20002298 	.word	0x20002298
 8012dd0:	200023ac 	.word	0x200023ac

08012dd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012dd4:	b480      	push	{r7}
 8012dd6:	b083      	sub	sp, #12
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012ddc:	4b06      	ldr	r3, [pc, #24]	; (8012df8 <vTaskInternalSetTimeOutState+0x24>)
 8012dde:	681a      	ldr	r2, [r3, #0]
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012de4:	4b05      	ldr	r3, [pc, #20]	; (8012dfc <vTaskInternalSetTimeOutState+0x28>)
 8012de6:	681a      	ldr	r2, [r3, #0]
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	605a      	str	r2, [r3, #4]
}
 8012dec:	bf00      	nop
 8012dee:	370c      	adds	r7, #12
 8012df0:	46bd      	mov	sp, r7
 8012df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df6:	4770      	bx	lr
 8012df8:	200023b0 	.word	0x200023b0
 8012dfc:	2000239c 	.word	0x2000239c

08012e00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b088      	sub	sp, #32
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
 8012e08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d10a      	bne.n	8012e26 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e14:	f383 8811 	msr	BASEPRI, r3
 8012e18:	f3bf 8f6f 	isb	sy
 8012e1c:	f3bf 8f4f 	dsb	sy
 8012e20:	613b      	str	r3, [r7, #16]
}
 8012e22:	bf00      	nop
 8012e24:	e7fe      	b.n	8012e24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d10a      	bne.n	8012e42 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e30:	f383 8811 	msr	BASEPRI, r3
 8012e34:	f3bf 8f6f 	isb	sy
 8012e38:	f3bf 8f4f 	dsb	sy
 8012e3c:	60fb      	str	r3, [r7, #12]
}
 8012e3e:	bf00      	nop
 8012e40:	e7fe      	b.n	8012e40 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012e42:	f000 fb5f 	bl	8013504 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012e46:	4b1d      	ldr	r3, [pc, #116]	; (8012ebc <xTaskCheckForTimeOut+0xbc>)
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	685b      	ldr	r3, [r3, #4]
 8012e50:	69ba      	ldr	r2, [r7, #24]
 8012e52:	1ad3      	subs	r3, r2, r3
 8012e54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e5e:	d102      	bne.n	8012e66 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012e60:	2300      	movs	r3, #0
 8012e62:	61fb      	str	r3, [r7, #28]
 8012e64:	e023      	b.n	8012eae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681a      	ldr	r2, [r3, #0]
 8012e6a:	4b15      	ldr	r3, [pc, #84]	; (8012ec0 <xTaskCheckForTimeOut+0xc0>)
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d007      	beq.n	8012e82 <xTaskCheckForTimeOut+0x82>
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	685b      	ldr	r3, [r3, #4]
 8012e76:	69ba      	ldr	r2, [r7, #24]
 8012e78:	429a      	cmp	r2, r3
 8012e7a:	d302      	bcc.n	8012e82 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012e7c:	2301      	movs	r3, #1
 8012e7e:	61fb      	str	r3, [r7, #28]
 8012e80:	e015      	b.n	8012eae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	697a      	ldr	r2, [r7, #20]
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	d20b      	bcs.n	8012ea4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012e8c:	683b      	ldr	r3, [r7, #0]
 8012e8e:	681a      	ldr	r2, [r3, #0]
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	1ad2      	subs	r2, r2, r3
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012e98:	6878      	ldr	r0, [r7, #4]
 8012e9a:	f7ff ff9b 	bl	8012dd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	61fb      	str	r3, [r7, #28]
 8012ea2:	e004      	b.n	8012eae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012ea4:	683b      	ldr	r3, [r7, #0]
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012eaa:	2301      	movs	r3, #1
 8012eac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012eae:	f000 fb59 	bl	8013564 <vPortExitCritical>

	return xReturn;
 8012eb2:	69fb      	ldr	r3, [r7, #28]
}
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	3720      	adds	r7, #32
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}
 8012ebc:	2000239c 	.word	0x2000239c
 8012ec0:	200023b0 	.word	0x200023b0

08012ec4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012ec4:	b480      	push	{r7}
 8012ec6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012ec8:	4b03      	ldr	r3, [pc, #12]	; (8012ed8 <vTaskMissedYield+0x14>)
 8012eca:	2201      	movs	r2, #1
 8012ecc:	601a      	str	r2, [r3, #0]
}
 8012ece:	bf00      	nop
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed6:	4770      	bx	lr
 8012ed8:	200023ac 	.word	0x200023ac

08012edc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b082      	sub	sp, #8
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012ee4:	f000 f852 	bl	8012f8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012ee8:	4b06      	ldr	r3, [pc, #24]	; (8012f04 <prvIdleTask+0x28>)
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	2b01      	cmp	r3, #1
 8012eee:	d9f9      	bls.n	8012ee4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012ef0:	4b05      	ldr	r3, [pc, #20]	; (8012f08 <prvIdleTask+0x2c>)
 8012ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ef6:	601a      	str	r2, [r3, #0]
 8012ef8:	f3bf 8f4f 	dsb	sy
 8012efc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012f00:	e7f0      	b.n	8012ee4 <prvIdleTask+0x8>
 8012f02:	bf00      	nop
 8012f04:	2000229c 	.word	0x2000229c
 8012f08:	e000ed04 	.word	0xe000ed04

08012f0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b082      	sub	sp, #8
 8012f10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012f12:	2300      	movs	r3, #0
 8012f14:	607b      	str	r3, [r7, #4]
 8012f16:	e00c      	b.n	8012f32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012f18:	687a      	ldr	r2, [r7, #4]
 8012f1a:	4613      	mov	r3, r2
 8012f1c:	009b      	lsls	r3, r3, #2
 8012f1e:	4413      	add	r3, r2
 8012f20:	009b      	lsls	r3, r3, #2
 8012f22:	4a12      	ldr	r2, [pc, #72]	; (8012f6c <prvInitialiseTaskLists+0x60>)
 8012f24:	4413      	add	r3, r2
 8012f26:	4618      	mov	r0, r3
 8012f28:	f7fe fcba 	bl	80118a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	3301      	adds	r3, #1
 8012f30:	607b      	str	r3, [r7, #4]
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	2b06      	cmp	r3, #6
 8012f36:	d9ef      	bls.n	8012f18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012f38:	480d      	ldr	r0, [pc, #52]	; (8012f70 <prvInitialiseTaskLists+0x64>)
 8012f3a:	f7fe fcb1 	bl	80118a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012f3e:	480d      	ldr	r0, [pc, #52]	; (8012f74 <prvInitialiseTaskLists+0x68>)
 8012f40:	f7fe fcae 	bl	80118a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012f44:	480c      	ldr	r0, [pc, #48]	; (8012f78 <prvInitialiseTaskLists+0x6c>)
 8012f46:	f7fe fcab 	bl	80118a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012f4a:	480c      	ldr	r0, [pc, #48]	; (8012f7c <prvInitialiseTaskLists+0x70>)
 8012f4c:	f7fe fca8 	bl	80118a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012f50:	480b      	ldr	r0, [pc, #44]	; (8012f80 <prvInitialiseTaskLists+0x74>)
 8012f52:	f7fe fca5 	bl	80118a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012f56:	4b0b      	ldr	r3, [pc, #44]	; (8012f84 <prvInitialiseTaskLists+0x78>)
 8012f58:	4a05      	ldr	r2, [pc, #20]	; (8012f70 <prvInitialiseTaskLists+0x64>)
 8012f5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012f5c:	4b0a      	ldr	r3, [pc, #40]	; (8012f88 <prvInitialiseTaskLists+0x7c>)
 8012f5e:	4a05      	ldr	r2, [pc, #20]	; (8012f74 <prvInitialiseTaskLists+0x68>)
 8012f60:	601a      	str	r2, [r3, #0]
}
 8012f62:	bf00      	nop
 8012f64:	3708      	adds	r7, #8
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}
 8012f6a:	bf00      	nop
 8012f6c:	2000229c 	.word	0x2000229c
 8012f70:	20002328 	.word	0x20002328
 8012f74:	2000233c 	.word	0x2000233c
 8012f78:	20002358 	.word	0x20002358
 8012f7c:	2000236c 	.word	0x2000236c
 8012f80:	20002384 	.word	0x20002384
 8012f84:	20002350 	.word	0x20002350
 8012f88:	20002354 	.word	0x20002354

08012f8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b082      	sub	sp, #8
 8012f90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012f92:	e019      	b.n	8012fc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012f94:	f000 fab6 	bl	8013504 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f98:	4b10      	ldr	r3, [pc, #64]	; (8012fdc <prvCheckTasksWaitingTermination+0x50>)
 8012f9a:	68db      	ldr	r3, [r3, #12]
 8012f9c:	68db      	ldr	r3, [r3, #12]
 8012f9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	3304      	adds	r3, #4
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f7fe fd05 	bl	80119b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012faa:	4b0d      	ldr	r3, [pc, #52]	; (8012fe0 <prvCheckTasksWaitingTermination+0x54>)
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	3b01      	subs	r3, #1
 8012fb0:	4a0b      	ldr	r2, [pc, #44]	; (8012fe0 <prvCheckTasksWaitingTermination+0x54>)
 8012fb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012fb4:	4b0b      	ldr	r3, [pc, #44]	; (8012fe4 <prvCheckTasksWaitingTermination+0x58>)
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	3b01      	subs	r3, #1
 8012fba:	4a0a      	ldr	r2, [pc, #40]	; (8012fe4 <prvCheckTasksWaitingTermination+0x58>)
 8012fbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012fbe:	f000 fad1 	bl	8013564 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012fc2:	6878      	ldr	r0, [r7, #4]
 8012fc4:	f000 f810 	bl	8012fe8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012fc8:	4b06      	ldr	r3, [pc, #24]	; (8012fe4 <prvCheckTasksWaitingTermination+0x58>)
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d1e1      	bne.n	8012f94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012fd0:	bf00      	nop
 8012fd2:	bf00      	nop
 8012fd4:	3708      	adds	r7, #8
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	bd80      	pop	{r7, pc}
 8012fda:	bf00      	nop
 8012fdc:	2000236c 	.word	0x2000236c
 8012fe0:	20002398 	.word	0x20002398
 8012fe4:	20002380 	.word	0x20002380

08012fe8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b084      	sub	sp, #16
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	334c      	adds	r3, #76	; 0x4c
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f001 fda7 	bl	8014b48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8013000:	2b00      	cmp	r3, #0
 8013002:	d108      	bne.n	8013016 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013008:	4618      	mov	r0, r3
 801300a:	f000 fc69 	bl	80138e0 <vPortFree>
				vPortFree( pxTCB );
 801300e:	6878      	ldr	r0, [r7, #4]
 8013010:	f000 fc66 	bl	80138e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013014:	e018      	b.n	8013048 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801301c:	2b01      	cmp	r3, #1
 801301e:	d103      	bne.n	8013028 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013020:	6878      	ldr	r0, [r7, #4]
 8013022:	f000 fc5d 	bl	80138e0 <vPortFree>
	}
 8013026:	e00f      	b.n	8013048 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801302e:	2b02      	cmp	r3, #2
 8013030:	d00a      	beq.n	8013048 <prvDeleteTCB+0x60>
	__asm volatile
 8013032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013036:	f383 8811 	msr	BASEPRI, r3
 801303a:	f3bf 8f6f 	isb	sy
 801303e:	f3bf 8f4f 	dsb	sy
 8013042:	60fb      	str	r3, [r7, #12]
}
 8013044:	bf00      	nop
 8013046:	e7fe      	b.n	8013046 <prvDeleteTCB+0x5e>
	}
 8013048:	bf00      	nop
 801304a:	3710      	adds	r7, #16
 801304c:	46bd      	mov	sp, r7
 801304e:	bd80      	pop	{r7, pc}

08013050 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013050:	b480      	push	{r7}
 8013052:	b083      	sub	sp, #12
 8013054:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013056:	4b0c      	ldr	r3, [pc, #48]	; (8013088 <prvResetNextTaskUnblockTime+0x38>)
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d104      	bne.n	801306a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013060:	4b0a      	ldr	r3, [pc, #40]	; (801308c <prvResetNextTaskUnblockTime+0x3c>)
 8013062:	f04f 32ff 	mov.w	r2, #4294967295
 8013066:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013068:	e008      	b.n	801307c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801306a:	4b07      	ldr	r3, [pc, #28]	; (8013088 <prvResetNextTaskUnblockTime+0x38>)
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	68db      	ldr	r3, [r3, #12]
 8013070:	68db      	ldr	r3, [r3, #12]
 8013072:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	685b      	ldr	r3, [r3, #4]
 8013078:	4a04      	ldr	r2, [pc, #16]	; (801308c <prvResetNextTaskUnblockTime+0x3c>)
 801307a:	6013      	str	r3, [r2, #0]
}
 801307c:	bf00      	nop
 801307e:	370c      	adds	r7, #12
 8013080:	46bd      	mov	sp, r7
 8013082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013086:	4770      	bx	lr
 8013088:	20002350 	.word	0x20002350
 801308c:	200023b8 	.word	0x200023b8

08013090 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013090:	b480      	push	{r7}
 8013092:	b083      	sub	sp, #12
 8013094:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013096:	4b0b      	ldr	r3, [pc, #44]	; (80130c4 <xTaskGetSchedulerState+0x34>)
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d102      	bne.n	80130a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801309e:	2301      	movs	r3, #1
 80130a0:	607b      	str	r3, [r7, #4]
 80130a2:	e008      	b.n	80130b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80130a4:	4b08      	ldr	r3, [pc, #32]	; (80130c8 <xTaskGetSchedulerState+0x38>)
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d102      	bne.n	80130b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80130ac:	2302      	movs	r3, #2
 80130ae:	607b      	str	r3, [r7, #4]
 80130b0:	e001      	b.n	80130b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80130b2:	2300      	movs	r3, #0
 80130b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80130b6:	687b      	ldr	r3, [r7, #4]
	}
 80130b8:	4618      	mov	r0, r3
 80130ba:	370c      	adds	r7, #12
 80130bc:	46bd      	mov	sp, r7
 80130be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c2:	4770      	bx	lr
 80130c4:	200023a4 	.word	0x200023a4
 80130c8:	200023c0 	.word	0x200023c0

080130cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b086      	sub	sp, #24
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80130d8:	2300      	movs	r3, #0
 80130da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d06e      	beq.n	80131c0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80130e2:	4b3a      	ldr	r3, [pc, #232]	; (80131cc <xTaskPriorityDisinherit+0x100>)
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	693a      	ldr	r2, [r7, #16]
 80130e8:	429a      	cmp	r2, r3
 80130ea:	d00a      	beq.n	8013102 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80130ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130f0:	f383 8811 	msr	BASEPRI, r3
 80130f4:	f3bf 8f6f 	isb	sy
 80130f8:	f3bf 8f4f 	dsb	sy
 80130fc:	60fb      	str	r3, [r7, #12]
}
 80130fe:	bf00      	nop
 8013100:	e7fe      	b.n	8013100 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013102:	693b      	ldr	r3, [r7, #16]
 8013104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013106:	2b00      	cmp	r3, #0
 8013108:	d10a      	bne.n	8013120 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801310a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801310e:	f383 8811 	msr	BASEPRI, r3
 8013112:	f3bf 8f6f 	isb	sy
 8013116:	f3bf 8f4f 	dsb	sy
 801311a:	60bb      	str	r3, [r7, #8]
}
 801311c:	bf00      	nop
 801311e:	e7fe      	b.n	801311e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013120:	693b      	ldr	r3, [r7, #16]
 8013122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013124:	1e5a      	subs	r2, r3, #1
 8013126:	693b      	ldr	r3, [r7, #16]
 8013128:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801312a:	693b      	ldr	r3, [r7, #16]
 801312c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801312e:	693b      	ldr	r3, [r7, #16]
 8013130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013132:	429a      	cmp	r2, r3
 8013134:	d044      	beq.n	80131c0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013136:	693b      	ldr	r3, [r7, #16]
 8013138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801313a:	2b00      	cmp	r3, #0
 801313c:	d140      	bne.n	80131c0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801313e:	693b      	ldr	r3, [r7, #16]
 8013140:	3304      	adds	r3, #4
 8013142:	4618      	mov	r0, r3
 8013144:	f7fe fc36 	bl	80119b4 <uxListRemove>
 8013148:	4603      	mov	r3, r0
 801314a:	2b00      	cmp	r3, #0
 801314c:	d115      	bne.n	801317a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801314e:	693b      	ldr	r3, [r7, #16]
 8013150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013152:	491f      	ldr	r1, [pc, #124]	; (80131d0 <xTaskPriorityDisinherit+0x104>)
 8013154:	4613      	mov	r3, r2
 8013156:	009b      	lsls	r3, r3, #2
 8013158:	4413      	add	r3, r2
 801315a:	009b      	lsls	r3, r3, #2
 801315c:	440b      	add	r3, r1
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d10a      	bne.n	801317a <xTaskPriorityDisinherit+0xae>
 8013164:	693b      	ldr	r3, [r7, #16]
 8013166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013168:	2201      	movs	r2, #1
 801316a:	fa02 f303 	lsl.w	r3, r2, r3
 801316e:	43da      	mvns	r2, r3
 8013170:	4b18      	ldr	r3, [pc, #96]	; (80131d4 <xTaskPriorityDisinherit+0x108>)
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	4013      	ands	r3, r2
 8013176:	4a17      	ldr	r2, [pc, #92]	; (80131d4 <xTaskPriorityDisinherit+0x108>)
 8013178:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801317a:	693b      	ldr	r3, [r7, #16]
 801317c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801317e:	693b      	ldr	r3, [r7, #16]
 8013180:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013182:	693b      	ldr	r3, [r7, #16]
 8013184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013186:	f1c3 0207 	rsb	r2, r3, #7
 801318a:	693b      	ldr	r3, [r7, #16]
 801318c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801318e:	693b      	ldr	r3, [r7, #16]
 8013190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013192:	2201      	movs	r2, #1
 8013194:	409a      	lsls	r2, r3
 8013196:	4b0f      	ldr	r3, [pc, #60]	; (80131d4 <xTaskPriorityDisinherit+0x108>)
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	4313      	orrs	r3, r2
 801319c:	4a0d      	ldr	r2, [pc, #52]	; (80131d4 <xTaskPriorityDisinherit+0x108>)
 801319e:	6013      	str	r3, [r2, #0]
 80131a0:	693b      	ldr	r3, [r7, #16]
 80131a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131a4:	4613      	mov	r3, r2
 80131a6:	009b      	lsls	r3, r3, #2
 80131a8:	4413      	add	r3, r2
 80131aa:	009b      	lsls	r3, r3, #2
 80131ac:	4a08      	ldr	r2, [pc, #32]	; (80131d0 <xTaskPriorityDisinherit+0x104>)
 80131ae:	441a      	add	r2, r3
 80131b0:	693b      	ldr	r3, [r7, #16]
 80131b2:	3304      	adds	r3, #4
 80131b4:	4619      	mov	r1, r3
 80131b6:	4610      	mov	r0, r2
 80131b8:	f7fe fb9f 	bl	80118fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80131bc:	2301      	movs	r3, #1
 80131be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80131c0:	697b      	ldr	r3, [r7, #20]
	}
 80131c2:	4618      	mov	r0, r3
 80131c4:	3718      	adds	r7, #24
 80131c6:	46bd      	mov	sp, r7
 80131c8:	bd80      	pop	{r7, pc}
 80131ca:	bf00      	nop
 80131cc:	20002298 	.word	0x20002298
 80131d0:	2000229c 	.word	0x2000229c
 80131d4:	200023a0 	.word	0x200023a0

080131d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b084      	sub	sp, #16
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
 80131e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80131e2:	4b29      	ldr	r3, [pc, #164]	; (8013288 <prvAddCurrentTaskToDelayedList+0xb0>)
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80131e8:	4b28      	ldr	r3, [pc, #160]	; (801328c <prvAddCurrentTaskToDelayedList+0xb4>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	3304      	adds	r3, #4
 80131ee:	4618      	mov	r0, r3
 80131f0:	f7fe fbe0 	bl	80119b4 <uxListRemove>
 80131f4:	4603      	mov	r3, r0
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d10b      	bne.n	8013212 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80131fa:	4b24      	ldr	r3, [pc, #144]	; (801328c <prvAddCurrentTaskToDelayedList+0xb4>)
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013200:	2201      	movs	r2, #1
 8013202:	fa02 f303 	lsl.w	r3, r2, r3
 8013206:	43da      	mvns	r2, r3
 8013208:	4b21      	ldr	r3, [pc, #132]	; (8013290 <prvAddCurrentTaskToDelayedList+0xb8>)
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	4013      	ands	r3, r2
 801320e:	4a20      	ldr	r2, [pc, #128]	; (8013290 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013210:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013218:	d10a      	bne.n	8013230 <prvAddCurrentTaskToDelayedList+0x58>
 801321a:	683b      	ldr	r3, [r7, #0]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d007      	beq.n	8013230 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013220:	4b1a      	ldr	r3, [pc, #104]	; (801328c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	3304      	adds	r3, #4
 8013226:	4619      	mov	r1, r3
 8013228:	481a      	ldr	r0, [pc, #104]	; (8013294 <prvAddCurrentTaskToDelayedList+0xbc>)
 801322a:	f7fe fb66 	bl	80118fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801322e:	e026      	b.n	801327e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013230:	68fa      	ldr	r2, [r7, #12]
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	4413      	add	r3, r2
 8013236:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013238:	4b14      	ldr	r3, [pc, #80]	; (801328c <prvAddCurrentTaskToDelayedList+0xb4>)
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	68ba      	ldr	r2, [r7, #8]
 801323e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013240:	68ba      	ldr	r2, [r7, #8]
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	429a      	cmp	r2, r3
 8013246:	d209      	bcs.n	801325c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013248:	4b13      	ldr	r3, [pc, #76]	; (8013298 <prvAddCurrentTaskToDelayedList+0xc0>)
 801324a:	681a      	ldr	r2, [r3, #0]
 801324c:	4b0f      	ldr	r3, [pc, #60]	; (801328c <prvAddCurrentTaskToDelayedList+0xb4>)
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	3304      	adds	r3, #4
 8013252:	4619      	mov	r1, r3
 8013254:	4610      	mov	r0, r2
 8013256:	f7fe fb74 	bl	8011942 <vListInsert>
}
 801325a:	e010      	b.n	801327e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801325c:	4b0f      	ldr	r3, [pc, #60]	; (801329c <prvAddCurrentTaskToDelayedList+0xc4>)
 801325e:	681a      	ldr	r2, [r3, #0]
 8013260:	4b0a      	ldr	r3, [pc, #40]	; (801328c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	3304      	adds	r3, #4
 8013266:	4619      	mov	r1, r3
 8013268:	4610      	mov	r0, r2
 801326a:	f7fe fb6a 	bl	8011942 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801326e:	4b0c      	ldr	r3, [pc, #48]	; (80132a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	68ba      	ldr	r2, [r7, #8]
 8013274:	429a      	cmp	r2, r3
 8013276:	d202      	bcs.n	801327e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013278:	4a09      	ldr	r2, [pc, #36]	; (80132a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 801327a:	68bb      	ldr	r3, [r7, #8]
 801327c:	6013      	str	r3, [r2, #0]
}
 801327e:	bf00      	nop
 8013280:	3710      	adds	r7, #16
 8013282:	46bd      	mov	sp, r7
 8013284:	bd80      	pop	{r7, pc}
 8013286:	bf00      	nop
 8013288:	2000239c 	.word	0x2000239c
 801328c:	20002298 	.word	0x20002298
 8013290:	200023a0 	.word	0x200023a0
 8013294:	20002384 	.word	0x20002384
 8013298:	20002354 	.word	0x20002354
 801329c:	20002350 	.word	0x20002350
 80132a0:	200023b8 	.word	0x200023b8

080132a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80132a4:	b480      	push	{r7}
 80132a6:	b085      	sub	sp, #20
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	60f8      	str	r0, [r7, #12]
 80132ac:	60b9      	str	r1, [r7, #8]
 80132ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	3b04      	subs	r3, #4
 80132b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80132bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	3b04      	subs	r3, #4
 80132c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80132c4:	68bb      	ldr	r3, [r7, #8]
 80132c6:	f023 0201 	bic.w	r2, r3, #1
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	3b04      	subs	r3, #4
 80132d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80132d4:	4a0c      	ldr	r2, [pc, #48]	; (8013308 <pxPortInitialiseStack+0x64>)
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	3b14      	subs	r3, #20
 80132de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80132e0:	687a      	ldr	r2, [r7, #4]
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	3b04      	subs	r3, #4
 80132ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	f06f 0202 	mvn.w	r2, #2
 80132f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	3b20      	subs	r3, #32
 80132f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80132fa:	68fb      	ldr	r3, [r7, #12]
}
 80132fc:	4618      	mov	r0, r3
 80132fe:	3714      	adds	r7, #20
 8013300:	46bd      	mov	sp, r7
 8013302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013306:	4770      	bx	lr
 8013308:	0801330d 	.word	0x0801330d

0801330c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801330c:	b480      	push	{r7}
 801330e:	b085      	sub	sp, #20
 8013310:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013312:	2300      	movs	r3, #0
 8013314:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013316:	4b12      	ldr	r3, [pc, #72]	; (8013360 <prvTaskExitError+0x54>)
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801331e:	d00a      	beq.n	8013336 <prvTaskExitError+0x2a>
	__asm volatile
 8013320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013324:	f383 8811 	msr	BASEPRI, r3
 8013328:	f3bf 8f6f 	isb	sy
 801332c:	f3bf 8f4f 	dsb	sy
 8013330:	60fb      	str	r3, [r7, #12]
}
 8013332:	bf00      	nop
 8013334:	e7fe      	b.n	8013334 <prvTaskExitError+0x28>
	__asm volatile
 8013336:	f04f 0350 	mov.w	r3, #80	; 0x50
 801333a:	f383 8811 	msr	BASEPRI, r3
 801333e:	f3bf 8f6f 	isb	sy
 8013342:	f3bf 8f4f 	dsb	sy
 8013346:	60bb      	str	r3, [r7, #8]
}
 8013348:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801334a:	bf00      	nop
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d0fc      	beq.n	801334c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013352:	bf00      	nop
 8013354:	bf00      	nop
 8013356:	3714      	adds	r7, #20
 8013358:	46bd      	mov	sp, r7
 801335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335e:	4770      	bx	lr
 8013360:	200002b0 	.word	0x200002b0
	...

08013370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013370:	4b07      	ldr	r3, [pc, #28]	; (8013390 <pxCurrentTCBConst2>)
 8013372:	6819      	ldr	r1, [r3, #0]
 8013374:	6808      	ldr	r0, [r1, #0]
 8013376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801337a:	f380 8809 	msr	PSP, r0
 801337e:	f3bf 8f6f 	isb	sy
 8013382:	f04f 0000 	mov.w	r0, #0
 8013386:	f380 8811 	msr	BASEPRI, r0
 801338a:	4770      	bx	lr
 801338c:	f3af 8000 	nop.w

08013390 <pxCurrentTCBConst2>:
 8013390:	20002298 	.word	0x20002298
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013394:	bf00      	nop
 8013396:	bf00      	nop

08013398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013398:	4808      	ldr	r0, [pc, #32]	; (80133bc <prvPortStartFirstTask+0x24>)
 801339a:	6800      	ldr	r0, [r0, #0]
 801339c:	6800      	ldr	r0, [r0, #0]
 801339e:	f380 8808 	msr	MSP, r0
 80133a2:	f04f 0000 	mov.w	r0, #0
 80133a6:	f380 8814 	msr	CONTROL, r0
 80133aa:	b662      	cpsie	i
 80133ac:	b661      	cpsie	f
 80133ae:	f3bf 8f4f 	dsb	sy
 80133b2:	f3bf 8f6f 	isb	sy
 80133b6:	df00      	svc	0
 80133b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80133ba:	bf00      	nop
 80133bc:	e000ed08 	.word	0xe000ed08

080133c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b086      	sub	sp, #24
 80133c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80133c6:	4b46      	ldr	r3, [pc, #280]	; (80134e0 <xPortStartScheduler+0x120>)
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	4a46      	ldr	r2, [pc, #280]	; (80134e4 <xPortStartScheduler+0x124>)
 80133cc:	4293      	cmp	r3, r2
 80133ce:	d10a      	bne.n	80133e6 <xPortStartScheduler+0x26>
	__asm volatile
 80133d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133d4:	f383 8811 	msr	BASEPRI, r3
 80133d8:	f3bf 8f6f 	isb	sy
 80133dc:	f3bf 8f4f 	dsb	sy
 80133e0:	613b      	str	r3, [r7, #16]
}
 80133e2:	bf00      	nop
 80133e4:	e7fe      	b.n	80133e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80133e6:	4b3e      	ldr	r3, [pc, #248]	; (80134e0 <xPortStartScheduler+0x120>)
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	4a3f      	ldr	r2, [pc, #252]	; (80134e8 <xPortStartScheduler+0x128>)
 80133ec:	4293      	cmp	r3, r2
 80133ee:	d10a      	bne.n	8013406 <xPortStartScheduler+0x46>
	__asm volatile
 80133f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133f4:	f383 8811 	msr	BASEPRI, r3
 80133f8:	f3bf 8f6f 	isb	sy
 80133fc:	f3bf 8f4f 	dsb	sy
 8013400:	60fb      	str	r3, [r7, #12]
}
 8013402:	bf00      	nop
 8013404:	e7fe      	b.n	8013404 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013406:	4b39      	ldr	r3, [pc, #228]	; (80134ec <xPortStartScheduler+0x12c>)
 8013408:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801340a:	697b      	ldr	r3, [r7, #20]
 801340c:	781b      	ldrb	r3, [r3, #0]
 801340e:	b2db      	uxtb	r3, r3
 8013410:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013412:	697b      	ldr	r3, [r7, #20]
 8013414:	22ff      	movs	r2, #255	; 0xff
 8013416:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013418:	697b      	ldr	r3, [r7, #20]
 801341a:	781b      	ldrb	r3, [r3, #0]
 801341c:	b2db      	uxtb	r3, r3
 801341e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013420:	78fb      	ldrb	r3, [r7, #3]
 8013422:	b2db      	uxtb	r3, r3
 8013424:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013428:	b2da      	uxtb	r2, r3
 801342a:	4b31      	ldr	r3, [pc, #196]	; (80134f0 <xPortStartScheduler+0x130>)
 801342c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801342e:	4b31      	ldr	r3, [pc, #196]	; (80134f4 <xPortStartScheduler+0x134>)
 8013430:	2207      	movs	r2, #7
 8013432:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013434:	e009      	b.n	801344a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8013436:	4b2f      	ldr	r3, [pc, #188]	; (80134f4 <xPortStartScheduler+0x134>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	3b01      	subs	r3, #1
 801343c:	4a2d      	ldr	r2, [pc, #180]	; (80134f4 <xPortStartScheduler+0x134>)
 801343e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013440:	78fb      	ldrb	r3, [r7, #3]
 8013442:	b2db      	uxtb	r3, r3
 8013444:	005b      	lsls	r3, r3, #1
 8013446:	b2db      	uxtb	r3, r3
 8013448:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801344a:	78fb      	ldrb	r3, [r7, #3]
 801344c:	b2db      	uxtb	r3, r3
 801344e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013452:	2b80      	cmp	r3, #128	; 0x80
 8013454:	d0ef      	beq.n	8013436 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013456:	4b27      	ldr	r3, [pc, #156]	; (80134f4 <xPortStartScheduler+0x134>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	f1c3 0307 	rsb	r3, r3, #7
 801345e:	2b04      	cmp	r3, #4
 8013460:	d00a      	beq.n	8013478 <xPortStartScheduler+0xb8>
	__asm volatile
 8013462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013466:	f383 8811 	msr	BASEPRI, r3
 801346a:	f3bf 8f6f 	isb	sy
 801346e:	f3bf 8f4f 	dsb	sy
 8013472:	60bb      	str	r3, [r7, #8]
}
 8013474:	bf00      	nop
 8013476:	e7fe      	b.n	8013476 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013478:	4b1e      	ldr	r3, [pc, #120]	; (80134f4 <xPortStartScheduler+0x134>)
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	021b      	lsls	r3, r3, #8
 801347e:	4a1d      	ldr	r2, [pc, #116]	; (80134f4 <xPortStartScheduler+0x134>)
 8013480:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013482:	4b1c      	ldr	r3, [pc, #112]	; (80134f4 <xPortStartScheduler+0x134>)
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801348a:	4a1a      	ldr	r2, [pc, #104]	; (80134f4 <xPortStartScheduler+0x134>)
 801348c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	b2da      	uxtb	r2, r3
 8013492:	697b      	ldr	r3, [r7, #20]
 8013494:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013496:	4b18      	ldr	r3, [pc, #96]	; (80134f8 <xPortStartScheduler+0x138>)
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	4a17      	ldr	r2, [pc, #92]	; (80134f8 <xPortStartScheduler+0x138>)
 801349c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80134a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80134a2:	4b15      	ldr	r3, [pc, #84]	; (80134f8 <xPortStartScheduler+0x138>)
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	4a14      	ldr	r2, [pc, #80]	; (80134f8 <xPortStartScheduler+0x138>)
 80134a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80134ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80134ae:	f000 f8dd 	bl	801366c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80134b2:	4b12      	ldr	r3, [pc, #72]	; (80134fc <xPortStartScheduler+0x13c>)
 80134b4:	2200      	movs	r2, #0
 80134b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80134b8:	f000 f8fc 	bl	80136b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80134bc:	4b10      	ldr	r3, [pc, #64]	; (8013500 <xPortStartScheduler+0x140>)
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	4a0f      	ldr	r2, [pc, #60]	; (8013500 <xPortStartScheduler+0x140>)
 80134c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80134c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80134c8:	f7ff ff66 	bl	8013398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80134cc:	f7ff fb9a 	bl	8012c04 <vTaskSwitchContext>
	prvTaskExitError();
 80134d0:	f7ff ff1c 	bl	801330c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80134d4:	2300      	movs	r3, #0
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	3718      	adds	r7, #24
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}
 80134de:	bf00      	nop
 80134e0:	e000ed00 	.word	0xe000ed00
 80134e4:	410fc271 	.word	0x410fc271
 80134e8:	410fc270 	.word	0x410fc270
 80134ec:	e000e400 	.word	0xe000e400
 80134f0:	200023c4 	.word	0x200023c4
 80134f4:	200023c8 	.word	0x200023c8
 80134f8:	e000ed20 	.word	0xe000ed20
 80134fc:	200002b0 	.word	0x200002b0
 8013500:	e000ef34 	.word	0xe000ef34

08013504 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013504:	b480      	push	{r7}
 8013506:	b083      	sub	sp, #12
 8013508:	af00      	add	r7, sp, #0
	__asm volatile
 801350a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801350e:	f383 8811 	msr	BASEPRI, r3
 8013512:	f3bf 8f6f 	isb	sy
 8013516:	f3bf 8f4f 	dsb	sy
 801351a:	607b      	str	r3, [r7, #4]
}
 801351c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801351e:	4b0f      	ldr	r3, [pc, #60]	; (801355c <vPortEnterCritical+0x58>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	3301      	adds	r3, #1
 8013524:	4a0d      	ldr	r2, [pc, #52]	; (801355c <vPortEnterCritical+0x58>)
 8013526:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013528:	4b0c      	ldr	r3, [pc, #48]	; (801355c <vPortEnterCritical+0x58>)
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	2b01      	cmp	r3, #1
 801352e:	d10f      	bne.n	8013550 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013530:	4b0b      	ldr	r3, [pc, #44]	; (8013560 <vPortEnterCritical+0x5c>)
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	b2db      	uxtb	r3, r3
 8013536:	2b00      	cmp	r3, #0
 8013538:	d00a      	beq.n	8013550 <vPortEnterCritical+0x4c>
	__asm volatile
 801353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801353e:	f383 8811 	msr	BASEPRI, r3
 8013542:	f3bf 8f6f 	isb	sy
 8013546:	f3bf 8f4f 	dsb	sy
 801354a:	603b      	str	r3, [r7, #0]
}
 801354c:	bf00      	nop
 801354e:	e7fe      	b.n	801354e <vPortEnterCritical+0x4a>
	}
}
 8013550:	bf00      	nop
 8013552:	370c      	adds	r7, #12
 8013554:	46bd      	mov	sp, r7
 8013556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355a:	4770      	bx	lr
 801355c:	200002b0 	.word	0x200002b0
 8013560:	e000ed04 	.word	0xe000ed04

08013564 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013564:	b480      	push	{r7}
 8013566:	b083      	sub	sp, #12
 8013568:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801356a:	4b12      	ldr	r3, [pc, #72]	; (80135b4 <vPortExitCritical+0x50>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d10a      	bne.n	8013588 <vPortExitCritical+0x24>
	__asm volatile
 8013572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013576:	f383 8811 	msr	BASEPRI, r3
 801357a:	f3bf 8f6f 	isb	sy
 801357e:	f3bf 8f4f 	dsb	sy
 8013582:	607b      	str	r3, [r7, #4]
}
 8013584:	bf00      	nop
 8013586:	e7fe      	b.n	8013586 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013588:	4b0a      	ldr	r3, [pc, #40]	; (80135b4 <vPortExitCritical+0x50>)
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	3b01      	subs	r3, #1
 801358e:	4a09      	ldr	r2, [pc, #36]	; (80135b4 <vPortExitCritical+0x50>)
 8013590:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013592:	4b08      	ldr	r3, [pc, #32]	; (80135b4 <vPortExitCritical+0x50>)
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d105      	bne.n	80135a6 <vPortExitCritical+0x42>
 801359a:	2300      	movs	r3, #0
 801359c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801359e:	683b      	ldr	r3, [r7, #0]
 80135a0:	f383 8811 	msr	BASEPRI, r3
}
 80135a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80135a6:	bf00      	nop
 80135a8:	370c      	adds	r7, #12
 80135aa:	46bd      	mov	sp, r7
 80135ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b0:	4770      	bx	lr
 80135b2:	bf00      	nop
 80135b4:	200002b0 	.word	0x200002b0
	...

080135c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80135c0:	f3ef 8009 	mrs	r0, PSP
 80135c4:	f3bf 8f6f 	isb	sy
 80135c8:	4b15      	ldr	r3, [pc, #84]	; (8013620 <pxCurrentTCBConst>)
 80135ca:	681a      	ldr	r2, [r3, #0]
 80135cc:	f01e 0f10 	tst.w	lr, #16
 80135d0:	bf08      	it	eq
 80135d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80135d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135da:	6010      	str	r0, [r2, #0]
 80135dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80135e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80135e4:	f380 8811 	msr	BASEPRI, r0
 80135e8:	f3bf 8f4f 	dsb	sy
 80135ec:	f3bf 8f6f 	isb	sy
 80135f0:	f7ff fb08 	bl	8012c04 <vTaskSwitchContext>
 80135f4:	f04f 0000 	mov.w	r0, #0
 80135f8:	f380 8811 	msr	BASEPRI, r0
 80135fc:	bc09      	pop	{r0, r3}
 80135fe:	6819      	ldr	r1, [r3, #0]
 8013600:	6808      	ldr	r0, [r1, #0]
 8013602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013606:	f01e 0f10 	tst.w	lr, #16
 801360a:	bf08      	it	eq
 801360c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013610:	f380 8809 	msr	PSP, r0
 8013614:	f3bf 8f6f 	isb	sy
 8013618:	4770      	bx	lr
 801361a:	bf00      	nop
 801361c:	f3af 8000 	nop.w

08013620 <pxCurrentTCBConst>:
 8013620:	20002298 	.word	0x20002298
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013624:	bf00      	nop
 8013626:	bf00      	nop

08013628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b082      	sub	sp, #8
 801362c:	af00      	add	r7, sp, #0
	__asm volatile
 801362e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013632:	f383 8811 	msr	BASEPRI, r3
 8013636:	f3bf 8f6f 	isb	sy
 801363a:	f3bf 8f4f 	dsb	sy
 801363e:	607b      	str	r3, [r7, #4]
}
 8013640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013642:	f7ff fa27 	bl	8012a94 <xTaskIncrementTick>
 8013646:	4603      	mov	r3, r0
 8013648:	2b00      	cmp	r3, #0
 801364a:	d003      	beq.n	8013654 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801364c:	4b06      	ldr	r3, [pc, #24]	; (8013668 <SysTick_Handler+0x40>)
 801364e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013652:	601a      	str	r2, [r3, #0]
 8013654:	2300      	movs	r3, #0
 8013656:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013658:	683b      	ldr	r3, [r7, #0]
 801365a:	f383 8811 	msr	BASEPRI, r3
}
 801365e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013660:	bf00      	nop
 8013662:	3708      	adds	r7, #8
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}
 8013668:	e000ed04 	.word	0xe000ed04

0801366c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801366c:	b480      	push	{r7}
 801366e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013670:	4b0b      	ldr	r3, [pc, #44]	; (80136a0 <vPortSetupTimerInterrupt+0x34>)
 8013672:	2200      	movs	r2, #0
 8013674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013676:	4b0b      	ldr	r3, [pc, #44]	; (80136a4 <vPortSetupTimerInterrupt+0x38>)
 8013678:	2200      	movs	r2, #0
 801367a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801367c:	4b0a      	ldr	r3, [pc, #40]	; (80136a8 <vPortSetupTimerInterrupt+0x3c>)
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	4a0a      	ldr	r2, [pc, #40]	; (80136ac <vPortSetupTimerInterrupt+0x40>)
 8013682:	fba2 2303 	umull	r2, r3, r2, r3
 8013686:	099b      	lsrs	r3, r3, #6
 8013688:	4a09      	ldr	r2, [pc, #36]	; (80136b0 <vPortSetupTimerInterrupt+0x44>)
 801368a:	3b01      	subs	r3, #1
 801368c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801368e:	4b04      	ldr	r3, [pc, #16]	; (80136a0 <vPortSetupTimerInterrupt+0x34>)
 8013690:	2207      	movs	r2, #7
 8013692:	601a      	str	r2, [r3, #0]
}
 8013694:	bf00      	nop
 8013696:	46bd      	mov	sp, r7
 8013698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369c:	4770      	bx	lr
 801369e:	bf00      	nop
 80136a0:	e000e010 	.word	0xe000e010
 80136a4:	e000e018 	.word	0xe000e018
 80136a8:	20000234 	.word	0x20000234
 80136ac:	10624dd3 	.word	0x10624dd3
 80136b0:	e000e014 	.word	0xe000e014

080136b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80136b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80136c4 <vPortEnableVFP+0x10>
 80136b8:	6801      	ldr	r1, [r0, #0]
 80136ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80136be:	6001      	str	r1, [r0, #0]
 80136c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80136c2:	bf00      	nop
 80136c4:	e000ed88 	.word	0xe000ed88

080136c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80136c8:	b480      	push	{r7}
 80136ca:	b085      	sub	sp, #20
 80136cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80136ce:	f3ef 8305 	mrs	r3, IPSR
 80136d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	2b0f      	cmp	r3, #15
 80136d8:	d914      	bls.n	8013704 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80136da:	4a17      	ldr	r2, [pc, #92]	; (8013738 <vPortValidateInterruptPriority+0x70>)
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	4413      	add	r3, r2
 80136e0:	781b      	ldrb	r3, [r3, #0]
 80136e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80136e4:	4b15      	ldr	r3, [pc, #84]	; (801373c <vPortValidateInterruptPriority+0x74>)
 80136e6:	781b      	ldrb	r3, [r3, #0]
 80136e8:	7afa      	ldrb	r2, [r7, #11]
 80136ea:	429a      	cmp	r2, r3
 80136ec:	d20a      	bcs.n	8013704 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80136ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136f2:	f383 8811 	msr	BASEPRI, r3
 80136f6:	f3bf 8f6f 	isb	sy
 80136fa:	f3bf 8f4f 	dsb	sy
 80136fe:	607b      	str	r3, [r7, #4]
}
 8013700:	bf00      	nop
 8013702:	e7fe      	b.n	8013702 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013704:	4b0e      	ldr	r3, [pc, #56]	; (8013740 <vPortValidateInterruptPriority+0x78>)
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801370c:	4b0d      	ldr	r3, [pc, #52]	; (8013744 <vPortValidateInterruptPriority+0x7c>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	429a      	cmp	r2, r3
 8013712:	d90a      	bls.n	801372a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013718:	f383 8811 	msr	BASEPRI, r3
 801371c:	f3bf 8f6f 	isb	sy
 8013720:	f3bf 8f4f 	dsb	sy
 8013724:	603b      	str	r3, [r7, #0]
}
 8013726:	bf00      	nop
 8013728:	e7fe      	b.n	8013728 <vPortValidateInterruptPriority+0x60>
	}
 801372a:	bf00      	nop
 801372c:	3714      	adds	r7, #20
 801372e:	46bd      	mov	sp, r7
 8013730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013734:	4770      	bx	lr
 8013736:	bf00      	nop
 8013738:	e000e3f0 	.word	0xe000e3f0
 801373c:	200023c4 	.word	0x200023c4
 8013740:	e000ed0c 	.word	0xe000ed0c
 8013744:	200023c8 	.word	0x200023c8

08013748 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013748:	b580      	push	{r7, lr}
 801374a:	b08a      	sub	sp, #40	; 0x28
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013750:	2300      	movs	r3, #0
 8013752:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013754:	f7ff f8e4 	bl	8012920 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013758:	4b5b      	ldr	r3, [pc, #364]	; (80138c8 <pvPortMalloc+0x180>)
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d101      	bne.n	8013764 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013760:	f000 f920 	bl	80139a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013764:	4b59      	ldr	r3, [pc, #356]	; (80138cc <pvPortMalloc+0x184>)
 8013766:	681a      	ldr	r2, [r3, #0]
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	4013      	ands	r3, r2
 801376c:	2b00      	cmp	r3, #0
 801376e:	f040 8093 	bne.w	8013898 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d01d      	beq.n	80137b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013778:	2208      	movs	r2, #8
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	4413      	add	r3, r2
 801377e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	f003 0307 	and.w	r3, r3, #7
 8013786:	2b00      	cmp	r3, #0
 8013788:	d014      	beq.n	80137b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	f023 0307 	bic.w	r3, r3, #7
 8013790:	3308      	adds	r3, #8
 8013792:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f003 0307 	and.w	r3, r3, #7
 801379a:	2b00      	cmp	r3, #0
 801379c:	d00a      	beq.n	80137b4 <pvPortMalloc+0x6c>
	__asm volatile
 801379e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137a2:	f383 8811 	msr	BASEPRI, r3
 80137a6:	f3bf 8f6f 	isb	sy
 80137aa:	f3bf 8f4f 	dsb	sy
 80137ae:	617b      	str	r3, [r7, #20]
}
 80137b0:	bf00      	nop
 80137b2:	e7fe      	b.n	80137b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d06e      	beq.n	8013898 <pvPortMalloc+0x150>
 80137ba:	4b45      	ldr	r3, [pc, #276]	; (80138d0 <pvPortMalloc+0x188>)
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	687a      	ldr	r2, [r7, #4]
 80137c0:	429a      	cmp	r2, r3
 80137c2:	d869      	bhi.n	8013898 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80137c4:	4b43      	ldr	r3, [pc, #268]	; (80138d4 <pvPortMalloc+0x18c>)
 80137c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80137c8:	4b42      	ldr	r3, [pc, #264]	; (80138d4 <pvPortMalloc+0x18c>)
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80137ce:	e004      	b.n	80137da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80137d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80137d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80137da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137dc:	685b      	ldr	r3, [r3, #4]
 80137de:	687a      	ldr	r2, [r7, #4]
 80137e0:	429a      	cmp	r2, r3
 80137e2:	d903      	bls.n	80137ec <pvPortMalloc+0xa4>
 80137e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d1f1      	bne.n	80137d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80137ec:	4b36      	ldr	r3, [pc, #216]	; (80138c8 <pvPortMalloc+0x180>)
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137f2:	429a      	cmp	r2, r3
 80137f4:	d050      	beq.n	8013898 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80137f6:	6a3b      	ldr	r3, [r7, #32]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	2208      	movs	r2, #8
 80137fc:	4413      	add	r3, r2
 80137fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013802:	681a      	ldr	r2, [r3, #0]
 8013804:	6a3b      	ldr	r3, [r7, #32]
 8013806:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801380a:	685a      	ldr	r2, [r3, #4]
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	1ad2      	subs	r2, r2, r3
 8013810:	2308      	movs	r3, #8
 8013812:	005b      	lsls	r3, r3, #1
 8013814:	429a      	cmp	r2, r3
 8013816:	d91f      	bls.n	8013858 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	4413      	add	r3, r2
 801381e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013820:	69bb      	ldr	r3, [r7, #24]
 8013822:	f003 0307 	and.w	r3, r3, #7
 8013826:	2b00      	cmp	r3, #0
 8013828:	d00a      	beq.n	8013840 <pvPortMalloc+0xf8>
	__asm volatile
 801382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801382e:	f383 8811 	msr	BASEPRI, r3
 8013832:	f3bf 8f6f 	isb	sy
 8013836:	f3bf 8f4f 	dsb	sy
 801383a:	613b      	str	r3, [r7, #16]
}
 801383c:	bf00      	nop
 801383e:	e7fe      	b.n	801383e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013842:	685a      	ldr	r2, [r3, #4]
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	1ad2      	subs	r2, r2, r3
 8013848:	69bb      	ldr	r3, [r7, #24]
 801384a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801384e:	687a      	ldr	r2, [r7, #4]
 8013850:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013852:	69b8      	ldr	r0, [r7, #24]
 8013854:	f000 f908 	bl	8013a68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013858:	4b1d      	ldr	r3, [pc, #116]	; (80138d0 <pvPortMalloc+0x188>)
 801385a:	681a      	ldr	r2, [r3, #0]
 801385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801385e:	685b      	ldr	r3, [r3, #4]
 8013860:	1ad3      	subs	r3, r2, r3
 8013862:	4a1b      	ldr	r2, [pc, #108]	; (80138d0 <pvPortMalloc+0x188>)
 8013864:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013866:	4b1a      	ldr	r3, [pc, #104]	; (80138d0 <pvPortMalloc+0x188>)
 8013868:	681a      	ldr	r2, [r3, #0]
 801386a:	4b1b      	ldr	r3, [pc, #108]	; (80138d8 <pvPortMalloc+0x190>)
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	429a      	cmp	r2, r3
 8013870:	d203      	bcs.n	801387a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013872:	4b17      	ldr	r3, [pc, #92]	; (80138d0 <pvPortMalloc+0x188>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	4a18      	ldr	r2, [pc, #96]	; (80138d8 <pvPortMalloc+0x190>)
 8013878:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801387c:	685a      	ldr	r2, [r3, #4]
 801387e:	4b13      	ldr	r3, [pc, #76]	; (80138cc <pvPortMalloc+0x184>)
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	431a      	orrs	r2, r3
 8013884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013886:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801388a:	2200      	movs	r2, #0
 801388c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801388e:	4b13      	ldr	r3, [pc, #76]	; (80138dc <pvPortMalloc+0x194>)
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	3301      	adds	r3, #1
 8013894:	4a11      	ldr	r2, [pc, #68]	; (80138dc <pvPortMalloc+0x194>)
 8013896:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013898:	f7ff f850 	bl	801293c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801389c:	69fb      	ldr	r3, [r7, #28]
 801389e:	f003 0307 	and.w	r3, r3, #7
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d00a      	beq.n	80138bc <pvPortMalloc+0x174>
	__asm volatile
 80138a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138aa:	f383 8811 	msr	BASEPRI, r3
 80138ae:	f3bf 8f6f 	isb	sy
 80138b2:	f3bf 8f4f 	dsb	sy
 80138b6:	60fb      	str	r3, [r7, #12]
}
 80138b8:	bf00      	nop
 80138ba:	e7fe      	b.n	80138ba <pvPortMalloc+0x172>
	return pvReturn;
 80138bc:	69fb      	ldr	r3, [r7, #28]
}
 80138be:	4618      	mov	r0, r3
 80138c0:	3728      	adds	r7, #40	; 0x28
 80138c2:	46bd      	mov	sp, r7
 80138c4:	bd80      	pop	{r7, pc}
 80138c6:	bf00      	nop
 80138c8:	20008194 	.word	0x20008194
 80138cc:	200081a8 	.word	0x200081a8
 80138d0:	20008198 	.word	0x20008198
 80138d4:	2000818c 	.word	0x2000818c
 80138d8:	2000819c 	.word	0x2000819c
 80138dc:	200081a0 	.word	0x200081a0

080138e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b086      	sub	sp, #24
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d04d      	beq.n	801398e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80138f2:	2308      	movs	r3, #8
 80138f4:	425b      	negs	r3, r3
 80138f6:	697a      	ldr	r2, [r7, #20]
 80138f8:	4413      	add	r3, r2
 80138fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80138fc:	697b      	ldr	r3, [r7, #20]
 80138fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013900:	693b      	ldr	r3, [r7, #16]
 8013902:	685a      	ldr	r2, [r3, #4]
 8013904:	4b24      	ldr	r3, [pc, #144]	; (8013998 <vPortFree+0xb8>)
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	4013      	ands	r3, r2
 801390a:	2b00      	cmp	r3, #0
 801390c:	d10a      	bne.n	8013924 <vPortFree+0x44>
	__asm volatile
 801390e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013912:	f383 8811 	msr	BASEPRI, r3
 8013916:	f3bf 8f6f 	isb	sy
 801391a:	f3bf 8f4f 	dsb	sy
 801391e:	60fb      	str	r3, [r7, #12]
}
 8013920:	bf00      	nop
 8013922:	e7fe      	b.n	8013922 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013924:	693b      	ldr	r3, [r7, #16]
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d00a      	beq.n	8013942 <vPortFree+0x62>
	__asm volatile
 801392c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013930:	f383 8811 	msr	BASEPRI, r3
 8013934:	f3bf 8f6f 	isb	sy
 8013938:	f3bf 8f4f 	dsb	sy
 801393c:	60bb      	str	r3, [r7, #8]
}
 801393e:	bf00      	nop
 8013940:	e7fe      	b.n	8013940 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013942:	693b      	ldr	r3, [r7, #16]
 8013944:	685a      	ldr	r2, [r3, #4]
 8013946:	4b14      	ldr	r3, [pc, #80]	; (8013998 <vPortFree+0xb8>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	4013      	ands	r3, r2
 801394c:	2b00      	cmp	r3, #0
 801394e:	d01e      	beq.n	801398e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013950:	693b      	ldr	r3, [r7, #16]
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d11a      	bne.n	801398e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013958:	693b      	ldr	r3, [r7, #16]
 801395a:	685a      	ldr	r2, [r3, #4]
 801395c:	4b0e      	ldr	r3, [pc, #56]	; (8013998 <vPortFree+0xb8>)
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	43db      	mvns	r3, r3
 8013962:	401a      	ands	r2, r3
 8013964:	693b      	ldr	r3, [r7, #16]
 8013966:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013968:	f7fe ffda 	bl	8012920 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801396c:	693b      	ldr	r3, [r7, #16]
 801396e:	685a      	ldr	r2, [r3, #4]
 8013970:	4b0a      	ldr	r3, [pc, #40]	; (801399c <vPortFree+0xbc>)
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	4413      	add	r3, r2
 8013976:	4a09      	ldr	r2, [pc, #36]	; (801399c <vPortFree+0xbc>)
 8013978:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801397a:	6938      	ldr	r0, [r7, #16]
 801397c:	f000 f874 	bl	8013a68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013980:	4b07      	ldr	r3, [pc, #28]	; (80139a0 <vPortFree+0xc0>)
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	3301      	adds	r3, #1
 8013986:	4a06      	ldr	r2, [pc, #24]	; (80139a0 <vPortFree+0xc0>)
 8013988:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801398a:	f7fe ffd7 	bl	801293c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801398e:	bf00      	nop
 8013990:	3718      	adds	r7, #24
 8013992:	46bd      	mov	sp, r7
 8013994:	bd80      	pop	{r7, pc}
 8013996:	bf00      	nop
 8013998:	200081a8 	.word	0x200081a8
 801399c:	20008198 	.word	0x20008198
 80139a0:	200081a4 	.word	0x200081a4

080139a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80139a4:	b480      	push	{r7}
 80139a6:	b085      	sub	sp, #20
 80139a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80139aa:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 80139ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80139b0:	4b27      	ldr	r3, [pc, #156]	; (8013a50 <prvHeapInit+0xac>)
 80139b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	f003 0307 	and.w	r3, r3, #7
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d00c      	beq.n	80139d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	3307      	adds	r3, #7
 80139c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	f023 0307 	bic.w	r3, r3, #7
 80139ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80139cc:	68ba      	ldr	r2, [r7, #8]
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	1ad3      	subs	r3, r2, r3
 80139d2:	4a1f      	ldr	r2, [pc, #124]	; (8013a50 <prvHeapInit+0xac>)
 80139d4:	4413      	add	r3, r2
 80139d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80139dc:	4a1d      	ldr	r2, [pc, #116]	; (8013a54 <prvHeapInit+0xb0>)
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80139e2:	4b1c      	ldr	r3, [pc, #112]	; (8013a54 <prvHeapInit+0xb0>)
 80139e4:	2200      	movs	r2, #0
 80139e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	68ba      	ldr	r2, [r7, #8]
 80139ec:	4413      	add	r3, r2
 80139ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80139f0:	2208      	movs	r2, #8
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	1a9b      	subs	r3, r3, r2
 80139f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	f023 0307 	bic.w	r3, r3, #7
 80139fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	4a15      	ldr	r2, [pc, #84]	; (8013a58 <prvHeapInit+0xb4>)
 8013a04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013a06:	4b14      	ldr	r3, [pc, #80]	; (8013a58 <prvHeapInit+0xb4>)
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013a0e:	4b12      	ldr	r3, [pc, #72]	; (8013a58 <prvHeapInit+0xb4>)
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	2200      	movs	r2, #0
 8013a14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013a1a:	683b      	ldr	r3, [r7, #0]
 8013a1c:	68fa      	ldr	r2, [r7, #12]
 8013a1e:	1ad2      	subs	r2, r2, r3
 8013a20:	683b      	ldr	r3, [r7, #0]
 8013a22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013a24:	4b0c      	ldr	r3, [pc, #48]	; (8013a58 <prvHeapInit+0xb4>)
 8013a26:	681a      	ldr	r2, [r3, #0]
 8013a28:	683b      	ldr	r3, [r7, #0]
 8013a2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013a2c:	683b      	ldr	r3, [r7, #0]
 8013a2e:	685b      	ldr	r3, [r3, #4]
 8013a30:	4a0a      	ldr	r2, [pc, #40]	; (8013a5c <prvHeapInit+0xb8>)
 8013a32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013a34:	683b      	ldr	r3, [r7, #0]
 8013a36:	685b      	ldr	r3, [r3, #4]
 8013a38:	4a09      	ldr	r2, [pc, #36]	; (8013a60 <prvHeapInit+0xbc>)
 8013a3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013a3c:	4b09      	ldr	r3, [pc, #36]	; (8013a64 <prvHeapInit+0xc0>)
 8013a3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013a42:	601a      	str	r2, [r3, #0]
}
 8013a44:	bf00      	nop
 8013a46:	3714      	adds	r7, #20
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4e:	4770      	bx	lr
 8013a50:	200023cc 	.word	0x200023cc
 8013a54:	2000818c 	.word	0x2000818c
 8013a58:	20008194 	.word	0x20008194
 8013a5c:	2000819c 	.word	0x2000819c
 8013a60:	20008198 	.word	0x20008198
 8013a64:	200081a8 	.word	0x200081a8

08013a68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013a68:	b480      	push	{r7}
 8013a6a:	b085      	sub	sp, #20
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013a70:	4b28      	ldr	r3, [pc, #160]	; (8013b14 <prvInsertBlockIntoFreeList+0xac>)
 8013a72:	60fb      	str	r3, [r7, #12]
 8013a74:	e002      	b.n	8013a7c <prvInsertBlockIntoFreeList+0x14>
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	60fb      	str	r3, [r7, #12]
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	687a      	ldr	r2, [r7, #4]
 8013a82:	429a      	cmp	r2, r3
 8013a84:	d8f7      	bhi.n	8013a76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	685b      	ldr	r3, [r3, #4]
 8013a8e:	68ba      	ldr	r2, [r7, #8]
 8013a90:	4413      	add	r3, r2
 8013a92:	687a      	ldr	r2, [r7, #4]
 8013a94:	429a      	cmp	r2, r3
 8013a96:	d108      	bne.n	8013aaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	685a      	ldr	r2, [r3, #4]
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	685b      	ldr	r3, [r3, #4]
 8013aa0:	441a      	add	r2, r3
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	685b      	ldr	r3, [r3, #4]
 8013ab2:	68ba      	ldr	r2, [r7, #8]
 8013ab4:	441a      	add	r2, r3
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	429a      	cmp	r2, r3
 8013abc:	d118      	bne.n	8013af0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	681a      	ldr	r2, [r3, #0]
 8013ac2:	4b15      	ldr	r3, [pc, #84]	; (8013b18 <prvInsertBlockIntoFreeList+0xb0>)
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	429a      	cmp	r2, r3
 8013ac8:	d00d      	beq.n	8013ae6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	685a      	ldr	r2, [r3, #4]
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	685b      	ldr	r3, [r3, #4]
 8013ad4:	441a      	add	r2, r3
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	681a      	ldr	r2, [r3, #0]
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	601a      	str	r2, [r3, #0]
 8013ae4:	e008      	b.n	8013af8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013ae6:	4b0c      	ldr	r3, [pc, #48]	; (8013b18 <prvInsertBlockIntoFreeList+0xb0>)
 8013ae8:	681a      	ldr	r2, [r3, #0]
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	601a      	str	r2, [r3, #0]
 8013aee:	e003      	b.n	8013af8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	681a      	ldr	r2, [r3, #0]
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013af8:	68fa      	ldr	r2, [r7, #12]
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	429a      	cmp	r2, r3
 8013afe:	d002      	beq.n	8013b06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	687a      	ldr	r2, [r7, #4]
 8013b04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013b06:	bf00      	nop
 8013b08:	3714      	adds	r7, #20
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b10:	4770      	bx	lr
 8013b12:	bf00      	nop
 8013b14:	2000818c 	.word	0x2000818c
 8013b18:	20008194 	.word	0x20008194

08013b1c <USB_transmit_msg>:

/*
 * -- Insert your variables declaration here --
 */
/* USER CODE BEGIN 0 */
void USB_transmit_msg(uint8_t* data,uint32_t size){
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b082      	sub	sp, #8
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
 8013b24:	6039      	str	r1, [r7, #0]
  USBH_CDC_Stop(&hUsbHostFS);
 8013b26:	4806      	ldr	r0, [pc, #24]	; (8013b40 <USB_transmit_msg+0x24>)
 8013b28:	f7f6 fd9d 	bl	800a666 <USBH_CDC_Stop>
  USBH_CDC_Transmit(&hUsbHostFS,data, size);
 8013b2c:	683a      	ldr	r2, [r7, #0]
 8013b2e:	6879      	ldr	r1, [r7, #4]
 8013b30:	4803      	ldr	r0, [pc, #12]	; (8013b40 <USB_transmit_msg+0x24>)
 8013b32:	f7f6 fe28 	bl	800a786 <USBH_CDC_Transmit>
}
 8013b36:	bf00      	nop
 8013b38:	3708      	adds	r7, #8
 8013b3a:	46bd      	mov	sp, r7
 8013b3c:	bd80      	pop	{r7, pc}
 8013b3e:	bf00      	nop
 8013b40:	2000d3c0 	.word	0x2000d3c0

08013b44 <USB_receive_msg>:

void USB_receive_msg(){
 8013b44:	b580      	push	{r7, lr}
 8013b46:	af00      	add	r7, sp, #0
  USBH_CDC_Stop(&hUsbHostFS);
 8013b48:	4809      	ldr	r0, [pc, #36]	; (8013b70 <USB_receive_msg+0x2c>)
 8013b4a:	f7f6 fd8c 	bl	800a666 <USBH_CDC_Stop>
  USBH_CDC_Receive(&hUsbHostFS,usb_rx_buff[usb_rx_buff_active],USB_RX_BUFF_SIZE);
 8013b4e:	4b09      	ldr	r3, [pc, #36]	; (8013b74 <USB_receive_msg+0x30>)
 8013b50:	781b      	ldrb	r3, [r3, #0]
 8013b52:	461a      	mov	r2, r3
 8013b54:	f640 53ac 	movw	r3, #3500	; 0xdac
 8013b58:	fb02 f303 	mul.w	r3, r2, r3
 8013b5c:	4a06      	ldr	r2, [pc, #24]	; (8013b78 <USB_receive_msg+0x34>)
 8013b5e:	4413      	add	r3, r2
 8013b60:	f640 52ac 	movw	r2, #3500	; 0xdac
 8013b64:	4619      	mov	r1, r3
 8013b66:	4802      	ldr	r0, [pc, #8]	; (8013b70 <USB_receive_msg+0x2c>)
 8013b68:	f7f6 fe48 	bl	800a7fc <USBH_CDC_Receive>
}
 8013b6c:	bf00      	nop
 8013b6e:	bd80      	pop	{r7, pc}
 8013b70:	2000d3c0 	.word	0x2000d3c0
 8013b74:	2000d3bc 	.word	0x2000d3bc
 8013b78:	200081b4 	.word	0x200081b4

08013b7c <USB_set_line_coding>:


void USB_set_line_coding(){
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	af00      	add	r7, sp, #0
	FrameFormat.b.dwDTERate = 1250000;
 8013b80:	4b08      	ldr	r3, [pc, #32]	; (8013ba4 <USB_set_line_coding+0x28>)
 8013b82:	4a09      	ldr	r2, [pc, #36]	; (8013ba8 <USB_set_line_coding+0x2c>)
 8013b84:	601a      	str	r2, [r3, #0]
	FrameFormat.b.bCharFormat = 0;
 8013b86:	4b07      	ldr	r3, [pc, #28]	; (8013ba4 <USB_set_line_coding+0x28>)
 8013b88:	2200      	movs	r2, #0
 8013b8a:	711a      	strb	r2, [r3, #4]
	FrameFormat.b.bDataBits = 8;
 8013b8c:	4b05      	ldr	r3, [pc, #20]	; (8013ba4 <USB_set_line_coding+0x28>)
 8013b8e:	2208      	movs	r2, #8
 8013b90:	719a      	strb	r2, [r3, #6]
	FrameFormat.b.bParityType = 0;
 8013b92:	4b04      	ldr	r3, [pc, #16]	; (8013ba4 <USB_set_line_coding+0x28>)
 8013b94:	2200      	movs	r2, #0
 8013b96:	715a      	strb	r2, [r3, #5]

	USBH_CDC_SetLineCoding(&hUsbHostFS, &FrameFormat);
 8013b98:	4902      	ldr	r1, [pc, #8]	; (8013ba4 <USB_set_line_coding+0x28>)
 8013b9a:	4804      	ldr	r0, [pc, #16]	; (8013bac <USB_set_line_coding+0x30>)
 8013b9c:	f7f6 fdca 	bl	800a734 <USBH_CDC_SetLineCoding>
}
 8013ba0:	bf00      	nop
 8013ba2:	bd80      	pop	{r7, pc}
 8013ba4:	200081ac 	.word	0x200081ac
 8013ba8:	001312d0 	.word	0x001312d0
 8013bac:	2000d3c0 	.word	0x2000d3c0

08013bb0 <USBH_CDC_TransmitCallback>:
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */

void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b082      	sub	sp, #8
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
  USB_receive_msg();
 8013bb8:	f7ff ffc4 	bl	8013b44 <USB_receive_msg>
}
 8013bbc:	bf00      	nop
 8013bbe:	3708      	adds	r7, #8
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}

08013bc4 <USBH_CDC_ReceiveCallback>:


void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8013bc4:	b480      	push	{r7}
 8013bc6:	b083      	sub	sp, #12
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
}
 8013bcc:	bf00      	nop
 8013bce:	370c      	adds	r7, #12
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd6:	4770      	bx	lr

08013bd8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	af00      	add	r7, sp, #0


  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8013bdc:	2201      	movs	r2, #1
 8013bde:	490e      	ldr	r1, [pc, #56]	; (8013c18 <MX_USB_HOST_Init+0x40>)
 8013be0:	480e      	ldr	r0, [pc, #56]	; (8013c1c <MX_USB_HOST_Init+0x44>)
 8013be2:	f7f6 ff8f 	bl	800ab04 <USBH_Init>
 8013be6:	4603      	mov	r3, r0
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d001      	beq.n	8013bf0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8013bec:	f7ee f958 	bl	8001ea0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8013bf0:	490b      	ldr	r1, [pc, #44]	; (8013c20 <MX_USB_HOST_Init+0x48>)
 8013bf2:	480a      	ldr	r0, [pc, #40]	; (8013c1c <MX_USB_HOST_Init+0x44>)
 8013bf4:	f7f7 f83c 	bl	800ac70 <USBH_RegisterClass>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d001      	beq.n	8013c02 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8013bfe:	f7ee f94f 	bl	8001ea0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8013c02:	4806      	ldr	r0, [pc, #24]	; (8013c1c <MX_USB_HOST_Init+0x44>)
 8013c04:	f7f7 f8c0 	bl	800ad88 <USBH_Start>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d001      	beq.n	8013c12 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8013c0e:	f7ee f947 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8013c12:	bf00      	nop
 8013c14:	bd80      	pop	{r7, pc}
 8013c16:	bf00      	nop
 8013c18:	08013c25 	.word	0x08013c25
 8013c1c:	2000d3c0 	.word	0x2000d3c0
 8013c20:	20000290 	.word	0x20000290

08013c24 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b082      	sub	sp, #8
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
 8013c2c:	460b      	mov	r3, r1
 8013c2e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8013c30:	78fb      	ldrb	r3, [r7, #3]
 8013c32:	3b01      	subs	r3, #1
 8013c34:	2b04      	cmp	r3, #4
 8013c36:	d82e      	bhi.n	8013c96 <USBH_UserProcess+0x72>
 8013c38:	a201      	add	r2, pc, #4	; (adr r2, 8013c40 <USBH_UserProcess+0x1c>)
 8013c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c3e:	bf00      	nop
 8013c40:	08013c97 	.word	0x08013c97
 8013c44:	08013c6b 	.word	0x08013c6b
 8013c48:	08013c97 	.word	0x08013c97
 8013c4c:	08013c81 	.word	0x08013c81
 8013c50:	08013c55 	.word	0x08013c55
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8013c54:	4b12      	ldr	r3, [pc, #72]	; (8013ca0 <USBH_UserProcess+0x7c>)
 8013c56:	2203      	movs	r2, #3
 8013c58:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_DISCONNECT, 0);
 8013c5a:	4b12      	ldr	r3, [pc, #72]	; (8013ca4 <USBH_UserProcess+0x80>)
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	2200      	movs	r2, #0
 8013c60:	2103      	movs	r1, #3
 8013c62:	4618      	mov	r0, r3
 8013c64:	f7fd fd68 	bl	8011738 <osMessagePut>
  break;
 8013c68:	e016      	b.n	8013c98 <USBH_UserProcess+0x74>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8013c6a:	4b0d      	ldr	r3, [pc, #52]	; (8013ca0 <USBH_UserProcess+0x7c>)
 8013c6c:	2202      	movs	r2, #2
 8013c6e:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_READY, 0);
 8013c70:	4b0c      	ldr	r3, [pc, #48]	; (8013ca4 <USBH_UserProcess+0x80>)
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	2200      	movs	r2, #0
 8013c76:	2102      	movs	r1, #2
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f7fd fd5d 	bl	8011738 <osMessagePut>
  break;
 8013c7e:	e00b      	b.n	8013c98 <USBH_UserProcess+0x74>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8013c80:	4b07      	ldr	r3, [pc, #28]	; (8013ca0 <USBH_UserProcess+0x7c>)
 8013c82:	2201      	movs	r2, #1
 8013c84:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_START, 0);
 8013c86:	4b07      	ldr	r3, [pc, #28]	; (8013ca4 <USBH_UserProcess+0x80>)
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	2101      	movs	r1, #1
 8013c8e:	4618      	mov	r0, r3
 8013c90:	f7fd fd52 	bl	8011738 <osMessagePut>
  break;
 8013c94:	e000      	b.n	8013c98 <USBH_UserProcess+0x74>

  default:
  break;
 8013c96:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8013c98:	bf00      	nop
 8013c9a:	3708      	adds	r7, #8
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	bd80      	pop	{r7, pc}
 8013ca0:	2000d7a4 	.word	0x2000d7a4
 8013ca4:	200009a0 	.word	0x200009a0

08013ca8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b08a      	sub	sp, #40	; 0x28
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013cb0:	f107 0314 	add.w	r3, r7, #20
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	601a      	str	r2, [r3, #0]
 8013cb8:	605a      	str	r2, [r3, #4]
 8013cba:	609a      	str	r2, [r3, #8]
 8013cbc:	60da      	str	r2, [r3, #12]
 8013cbe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013cc8:	d13a      	bne.n	8013d40 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013cca:	2300      	movs	r3, #0
 8013ccc:	613b      	str	r3, [r7, #16]
 8013cce:	4b1e      	ldr	r3, [pc, #120]	; (8013d48 <HAL_HCD_MspInit+0xa0>)
 8013cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013cd2:	4a1d      	ldr	r2, [pc, #116]	; (8013d48 <HAL_HCD_MspInit+0xa0>)
 8013cd4:	f043 0301 	orr.w	r3, r3, #1
 8013cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8013cda:	4b1b      	ldr	r3, [pc, #108]	; (8013d48 <HAL_HCD_MspInit+0xa0>)
 8013cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013cde:	f003 0301 	and.w	r3, r3, #1
 8013ce2:	613b      	str	r3, [r7, #16]
 8013ce4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013ce6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013cec:	2302      	movs	r3, #2
 8013cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013cf4:	2303      	movs	r3, #3
 8013cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013cf8:	230a      	movs	r3, #10
 8013cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013cfc:	f107 0314 	add.w	r3, r7, #20
 8013d00:	4619      	mov	r1, r3
 8013d02:	4812      	ldr	r0, [pc, #72]	; (8013d4c <HAL_HCD_MspInit+0xa4>)
 8013d04:	f7f0 f80a 	bl	8003d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013d08:	4b0f      	ldr	r3, [pc, #60]	; (8013d48 <HAL_HCD_MspInit+0xa0>)
 8013d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d0c:	4a0e      	ldr	r2, [pc, #56]	; (8013d48 <HAL_HCD_MspInit+0xa0>)
 8013d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d12:	6353      	str	r3, [r2, #52]	; 0x34
 8013d14:	2300      	movs	r3, #0
 8013d16:	60fb      	str	r3, [r7, #12]
 8013d18:	4b0b      	ldr	r3, [pc, #44]	; (8013d48 <HAL_HCD_MspInit+0xa0>)
 8013d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d1c:	4a0a      	ldr	r2, [pc, #40]	; (8013d48 <HAL_HCD_MspInit+0xa0>)
 8013d1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013d22:	6453      	str	r3, [r2, #68]	; 0x44
 8013d24:	4b08      	ldr	r3, [pc, #32]	; (8013d48 <HAL_HCD_MspInit+0xa0>)
 8013d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013d2c:	60fb      	str	r3, [r7, #12]
 8013d2e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013d30:	2200      	movs	r2, #0
 8013d32:	2105      	movs	r1, #5
 8013d34:	2043      	movs	r0, #67	; 0x43
 8013d36:	f7ef f973 	bl	8003020 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013d3a:	2043      	movs	r0, #67	; 0x43
 8013d3c:	f7ef f98c 	bl	8003058 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013d40:	bf00      	nop
 8013d42:	3728      	adds	r7, #40	; 0x28
 8013d44:	46bd      	mov	sp, r7
 8013d46:	bd80      	pop	{r7, pc}
 8013d48:	40023800 	.word	0x40023800
 8013d4c:	40020000 	.word	0x40020000

08013d50 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b082      	sub	sp, #8
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f7f7 fcc9 	bl	800b6f6 <USBH_LL_IncTimer>
}
 8013d64:	bf00      	nop
 8013d66:	3708      	adds	r7, #8
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}

08013d6c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b082      	sub	sp, #8
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	f7f7 fd0d 	bl	800b79a <USBH_LL_Connect>
}
 8013d80:	bf00      	nop
 8013d82:	3708      	adds	r7, #8
 8013d84:	46bd      	mov	sp, r7
 8013d86:	bd80      	pop	{r7, pc}

08013d88 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b082      	sub	sp, #8
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013d96:	4618      	mov	r0, r3
 8013d98:	f7f7 fd22 	bl	800b7e0 <USBH_LL_Disconnect>
}
 8013d9c:	bf00      	nop
 8013d9e:	3708      	adds	r7, #8
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}

08013da4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b082      	sub	sp, #8
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
 8013dac:	460b      	mov	r3, r1
 8013dae:	70fb      	strb	r3, [r7, #3]
 8013db0:	4613      	mov	r3, r2
 8013db2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013dba:	4618      	mov	r0, r3
 8013dbc:	f7f7 fd57 	bl	800b86e <USBH_LL_NotifyURBChange>
#endif
}
 8013dc0:	bf00      	nop
 8013dc2:	3708      	adds	r7, #8
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	bd80      	pop	{r7, pc}

08013dc8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b082      	sub	sp, #8
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	f7f7 fcb7 	bl	800b74a <USBH_LL_PortEnabled>
}
 8013ddc:	bf00      	nop
 8013dde:	3708      	adds	r7, #8
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bd80      	pop	{r7, pc}

08013de4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b082      	sub	sp, #8
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013df2:	4618      	mov	r0, r3
 8013df4:	f7f7 fcc3 	bl	800b77e <USBH_LL_PortDisabled>
}
 8013df8:	bf00      	nop
 8013dfa:	3708      	adds	r7, #8
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bd80      	pop	{r7, pc}

08013e00 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b082      	sub	sp, #8
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8013e0e:	2b01      	cmp	r3, #1
 8013e10:	d12a      	bne.n	8013e68 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8013e12:	4a18      	ldr	r2, [pc, #96]	; (8013e74 <USBH_LL_Init+0x74>)
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	4a15      	ldr	r2, [pc, #84]	; (8013e74 <USBH_LL_Init+0x74>)
 8013e1e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013e22:	4b14      	ldr	r3, [pc, #80]	; (8013e74 <USBH_LL_Init+0x74>)
 8013e24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013e28:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8013e2a:	4b12      	ldr	r3, [pc, #72]	; (8013e74 <USBH_LL_Init+0x74>)
 8013e2c:	2208      	movs	r2, #8
 8013e2e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8013e30:	4b10      	ldr	r3, [pc, #64]	; (8013e74 <USBH_LL_Init+0x74>)
 8013e32:	2201      	movs	r2, #1
 8013e34:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013e36:	4b0f      	ldr	r3, [pc, #60]	; (8013e74 <USBH_LL_Init+0x74>)
 8013e38:	2200      	movs	r2, #0
 8013e3a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8013e3c:	4b0d      	ldr	r3, [pc, #52]	; (8013e74 <USBH_LL_Init+0x74>)
 8013e3e:	2202      	movs	r2, #2
 8013e40:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013e42:	4b0c      	ldr	r3, [pc, #48]	; (8013e74 <USBH_LL_Init+0x74>)
 8013e44:	2200      	movs	r2, #0
 8013e46:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8013e48:	480a      	ldr	r0, [pc, #40]	; (8013e74 <USBH_LL_Init+0x74>)
 8013e4a:	f7f0 f91c 	bl	8004086 <HAL_HCD_Init>
 8013e4e:	4603      	mov	r3, r0
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d001      	beq.n	8013e58 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8013e54:	f7ee f824 	bl	8001ea0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8013e58:	4806      	ldr	r0, [pc, #24]	; (8013e74 <USBH_LL_Init+0x74>)
 8013e5a:	f7f0 fd00 	bl	800485e <HAL_HCD_GetCurrentFrame>
 8013e5e:	4603      	mov	r3, r0
 8013e60:	4619      	mov	r1, r3
 8013e62:	6878      	ldr	r0, [r7, #4]
 8013e64:	f7f7 fc38 	bl	800b6d8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8013e68:	2300      	movs	r3, #0
}
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	3708      	adds	r7, #8
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	bd80      	pop	{r7, pc}
 8013e72:	bf00      	nop
 8013e74:	2000d7a8 	.word	0x2000d7a8

08013e78 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b084      	sub	sp, #16
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013e80:	2300      	movs	r3, #0
 8013e82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013e84:	2300      	movs	r3, #0
 8013e86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013e8e:	4618      	mov	r0, r3
 8013e90:	f7f0 fc6f 	bl	8004772 <HAL_HCD_Start>
 8013e94:	4603      	mov	r3, r0
 8013e96:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013e98:	7bfb      	ldrb	r3, [r7, #15]
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	f000 f95c 	bl	8014158 <USBH_Get_USB_Status>
 8013ea0:	4603      	mov	r3, r0
 8013ea2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013ea4:	7bbb      	ldrb	r3, [r7, #14]
}
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	3710      	adds	r7, #16
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	bd80      	pop	{r7, pc}

08013eae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8013eae:	b580      	push	{r7, lr}
 8013eb0:	b084      	sub	sp, #16
 8013eb2:	af00      	add	r7, sp, #0
 8013eb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013eba:	2300      	movs	r3, #0
 8013ebc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	f7f0 fc77 	bl	80047b8 <HAL_HCD_Stop>
 8013eca:	4603      	mov	r3, r0
 8013ecc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013ece:	7bfb      	ldrb	r3, [r7, #15]
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f000 f941 	bl	8014158 <USBH_Get_USB_Status>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013eda:	7bbb      	ldrb	r3, [r7, #14]
}
 8013edc:	4618      	mov	r0, r3
 8013ede:	3710      	adds	r7, #16
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	bd80      	pop	{r7, pc}

08013ee4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b084      	sub	sp, #16
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8013eec:	2301      	movs	r3, #1
 8013eee:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	f7f0 fcbf 	bl	800487a <HAL_HCD_GetCurrentSpeed>
 8013efc:	4603      	mov	r3, r0
 8013efe:	2b02      	cmp	r3, #2
 8013f00:	d00c      	beq.n	8013f1c <USBH_LL_GetSpeed+0x38>
 8013f02:	2b02      	cmp	r3, #2
 8013f04:	d80d      	bhi.n	8013f22 <USBH_LL_GetSpeed+0x3e>
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d002      	beq.n	8013f10 <USBH_LL_GetSpeed+0x2c>
 8013f0a:	2b01      	cmp	r3, #1
 8013f0c:	d003      	beq.n	8013f16 <USBH_LL_GetSpeed+0x32>
 8013f0e:	e008      	b.n	8013f22 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8013f10:	2300      	movs	r3, #0
 8013f12:	73fb      	strb	r3, [r7, #15]
    break;
 8013f14:	e008      	b.n	8013f28 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8013f16:	2301      	movs	r3, #1
 8013f18:	73fb      	strb	r3, [r7, #15]
    break;
 8013f1a:	e005      	b.n	8013f28 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8013f1c:	2302      	movs	r3, #2
 8013f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8013f20:	e002      	b.n	8013f28 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8013f22:	2301      	movs	r3, #1
 8013f24:	73fb      	strb	r3, [r7, #15]
    break;
 8013f26:	bf00      	nop
  }
  return  speed;
 8013f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	3710      	adds	r7, #16
 8013f2e:	46bd      	mov	sp, r7
 8013f30:	bd80      	pop	{r7, pc}

08013f32 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8013f32:	b580      	push	{r7, lr}
 8013f34:	b084      	sub	sp, #16
 8013f36:	af00      	add	r7, sp, #0
 8013f38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013f3e:	2300      	movs	r3, #0
 8013f40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013f48:	4618      	mov	r0, r3
 8013f4a:	f7f0 fc52 	bl	80047f2 <HAL_HCD_ResetPort>
 8013f4e:	4603      	mov	r3, r0
 8013f50:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013f52:	7bfb      	ldrb	r3, [r7, #15]
 8013f54:	4618      	mov	r0, r3
 8013f56:	f000 f8ff 	bl	8014158 <USBH_Get_USB_Status>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013f5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013f60:	4618      	mov	r0, r3
 8013f62:	3710      	adds	r7, #16
 8013f64:	46bd      	mov	sp, r7
 8013f66:	bd80      	pop	{r7, pc}

08013f68 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b082      	sub	sp, #8
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
 8013f70:	460b      	mov	r3, r1
 8013f72:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013f7a:	78fa      	ldrb	r2, [r7, #3]
 8013f7c:	4611      	mov	r1, r2
 8013f7e:	4618      	mov	r0, r3
 8013f80:	f7f0 fc59 	bl	8004836 <HAL_HCD_HC_GetXferCount>
 8013f84:	4603      	mov	r3, r0
}
 8013f86:	4618      	mov	r0, r3
 8013f88:	3708      	adds	r7, #8
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bd80      	pop	{r7, pc}

08013f8e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8013f8e:	b590      	push	{r4, r7, lr}
 8013f90:	b089      	sub	sp, #36	; 0x24
 8013f92:	af04      	add	r7, sp, #16
 8013f94:	6078      	str	r0, [r7, #4]
 8013f96:	4608      	mov	r0, r1
 8013f98:	4611      	mov	r1, r2
 8013f9a:	461a      	mov	r2, r3
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	70fb      	strb	r3, [r7, #3]
 8013fa0:	460b      	mov	r3, r1
 8013fa2:	70bb      	strb	r3, [r7, #2]
 8013fa4:	4613      	mov	r3, r2
 8013fa6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013fa8:	2300      	movs	r3, #0
 8013faa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013fac:	2300      	movs	r3, #0
 8013fae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8013fb6:	787c      	ldrb	r4, [r7, #1]
 8013fb8:	78ba      	ldrb	r2, [r7, #2]
 8013fba:	78f9      	ldrb	r1, [r7, #3]
 8013fbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013fbe:	9302      	str	r3, [sp, #8]
 8013fc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013fc4:	9301      	str	r3, [sp, #4]
 8013fc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013fca:	9300      	str	r3, [sp, #0]
 8013fcc:	4623      	mov	r3, r4
 8013fce:	f7f0 f8bc 	bl	800414a <HAL_HCD_HC_Init>
 8013fd2:	4603      	mov	r3, r0
 8013fd4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8013fd6:	7bfb      	ldrb	r3, [r7, #15]
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f000 f8bd 	bl	8014158 <USBH_Get_USB_Status>
 8013fde:	4603      	mov	r3, r0
 8013fe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013fe2:	7bbb      	ldrb	r3, [r7, #14]
}
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	3714      	adds	r7, #20
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	bd90      	pop	{r4, r7, pc}

08013fec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013fec:	b580      	push	{r7, lr}
 8013fee:	b084      	sub	sp, #16
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
 8013ff4:	460b      	mov	r3, r1
 8013ff6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014006:	78fa      	ldrb	r2, [r7, #3]
 8014008:	4611      	mov	r1, r2
 801400a:	4618      	mov	r0, r3
 801400c:	f7f0 f92c 	bl	8004268 <HAL_HCD_HC_Halt>
 8014010:	4603      	mov	r3, r0
 8014012:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014014:	7bfb      	ldrb	r3, [r7, #15]
 8014016:	4618      	mov	r0, r3
 8014018:	f000 f89e 	bl	8014158 <USBH_Get_USB_Status>
 801401c:	4603      	mov	r3, r0
 801401e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014020:	7bbb      	ldrb	r3, [r7, #14]
}
 8014022:	4618      	mov	r0, r3
 8014024:	3710      	adds	r7, #16
 8014026:	46bd      	mov	sp, r7
 8014028:	bd80      	pop	{r7, pc}

0801402a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801402a:	b590      	push	{r4, r7, lr}
 801402c:	b089      	sub	sp, #36	; 0x24
 801402e:	af04      	add	r7, sp, #16
 8014030:	6078      	str	r0, [r7, #4]
 8014032:	4608      	mov	r0, r1
 8014034:	4611      	mov	r1, r2
 8014036:	461a      	mov	r2, r3
 8014038:	4603      	mov	r3, r0
 801403a:	70fb      	strb	r3, [r7, #3]
 801403c:	460b      	mov	r3, r1
 801403e:	70bb      	strb	r3, [r7, #2]
 8014040:	4613      	mov	r3, r2
 8014042:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014044:	2300      	movs	r3, #0
 8014046:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014048:	2300      	movs	r3, #0
 801404a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8014052:	787c      	ldrb	r4, [r7, #1]
 8014054:	78ba      	ldrb	r2, [r7, #2]
 8014056:	78f9      	ldrb	r1, [r7, #3]
 8014058:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801405c:	9303      	str	r3, [sp, #12]
 801405e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014060:	9302      	str	r3, [sp, #8]
 8014062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014064:	9301      	str	r3, [sp, #4]
 8014066:	f897 3020 	ldrb.w	r3, [r7, #32]
 801406a:	9300      	str	r3, [sp, #0]
 801406c:	4623      	mov	r3, r4
 801406e:	f7f0 f91f 	bl	80042b0 <HAL_HCD_HC_SubmitRequest>
 8014072:	4603      	mov	r3, r0
 8014074:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8014076:	7bfb      	ldrb	r3, [r7, #15]
 8014078:	4618      	mov	r0, r3
 801407a:	f000 f86d 	bl	8014158 <USBH_Get_USB_Status>
 801407e:	4603      	mov	r3, r0
 8014080:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014082:	7bbb      	ldrb	r3, [r7, #14]
}
 8014084:	4618      	mov	r0, r3
 8014086:	3714      	adds	r7, #20
 8014088:	46bd      	mov	sp, r7
 801408a:	bd90      	pop	{r4, r7, pc}

0801408c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b082      	sub	sp, #8
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
 8014094:	460b      	mov	r3, r1
 8014096:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801409e:	78fa      	ldrb	r2, [r7, #3]
 80140a0:	4611      	mov	r1, r2
 80140a2:	4618      	mov	r0, r3
 80140a4:	f7f0 fbb3 	bl	800480e <HAL_HCD_HC_GetURBState>
 80140a8:	4603      	mov	r3, r0
}
 80140aa:	4618      	mov	r0, r3
 80140ac:	3708      	adds	r7, #8
 80140ae:	46bd      	mov	sp, r7
 80140b0:	bd80      	pop	{r7, pc}

080140b2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80140b2:	b580      	push	{r7, lr}
 80140b4:	b082      	sub	sp, #8
 80140b6:	af00      	add	r7, sp, #0
 80140b8:	6078      	str	r0, [r7, #4]
 80140ba:	460b      	mov	r3, r1
 80140bc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80140c4:	2b01      	cmp	r3, #1
 80140c6:	d103      	bne.n	80140d0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80140c8:	78fb      	ldrb	r3, [r7, #3]
 80140ca:	4618      	mov	r0, r3
 80140cc:	f000 f870 	bl	80141b0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80140d0:	20c8      	movs	r0, #200	; 0xc8
 80140d2:	f7ee fec9 	bl	8002e68 <HAL_Delay>
  return USBH_OK;
 80140d6:	2300      	movs	r3, #0
}
 80140d8:	4618      	mov	r0, r3
 80140da:	3708      	adds	r7, #8
 80140dc:	46bd      	mov	sp, r7
 80140de:	bd80      	pop	{r7, pc}

080140e0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80140e0:	b480      	push	{r7}
 80140e2:	b085      	sub	sp, #20
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
 80140e8:	460b      	mov	r3, r1
 80140ea:	70fb      	strb	r3, [r7, #3]
 80140ec:	4613      	mov	r3, r2
 80140ee:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80140f6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80140f8:	78fb      	ldrb	r3, [r7, #3]
 80140fa:	68fa      	ldr	r2, [r7, #12]
 80140fc:	212c      	movs	r1, #44	; 0x2c
 80140fe:	fb01 f303 	mul.w	r3, r1, r3
 8014102:	4413      	add	r3, r2
 8014104:	333b      	adds	r3, #59	; 0x3b
 8014106:	781b      	ldrb	r3, [r3, #0]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d009      	beq.n	8014120 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801410c:	78fb      	ldrb	r3, [r7, #3]
 801410e:	68fa      	ldr	r2, [r7, #12]
 8014110:	212c      	movs	r1, #44	; 0x2c
 8014112:	fb01 f303 	mul.w	r3, r1, r3
 8014116:	4413      	add	r3, r2
 8014118:	3354      	adds	r3, #84	; 0x54
 801411a:	78ba      	ldrb	r2, [r7, #2]
 801411c:	701a      	strb	r2, [r3, #0]
 801411e:	e008      	b.n	8014132 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8014120:	78fb      	ldrb	r3, [r7, #3]
 8014122:	68fa      	ldr	r2, [r7, #12]
 8014124:	212c      	movs	r1, #44	; 0x2c
 8014126:	fb01 f303 	mul.w	r3, r1, r3
 801412a:	4413      	add	r3, r2
 801412c:	3355      	adds	r3, #85	; 0x55
 801412e:	78ba      	ldrb	r2, [r7, #2]
 8014130:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8014132:	2300      	movs	r3, #0
}
 8014134:	4618      	mov	r0, r3
 8014136:	3714      	adds	r7, #20
 8014138:	46bd      	mov	sp, r7
 801413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413e:	4770      	bx	lr

08014140 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b082      	sub	sp, #8
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8014148:	6878      	ldr	r0, [r7, #4]
 801414a:	f7ee fe8d 	bl	8002e68 <HAL_Delay>
}
 801414e:	bf00      	nop
 8014150:	3708      	adds	r7, #8
 8014152:	46bd      	mov	sp, r7
 8014154:	bd80      	pop	{r7, pc}
	...

08014158 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014158:	b480      	push	{r7}
 801415a:	b085      	sub	sp, #20
 801415c:	af00      	add	r7, sp, #0
 801415e:	4603      	mov	r3, r0
 8014160:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014162:	2300      	movs	r3, #0
 8014164:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014166:	79fb      	ldrb	r3, [r7, #7]
 8014168:	2b03      	cmp	r3, #3
 801416a:	d817      	bhi.n	801419c <USBH_Get_USB_Status+0x44>
 801416c:	a201      	add	r2, pc, #4	; (adr r2, 8014174 <USBH_Get_USB_Status+0x1c>)
 801416e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014172:	bf00      	nop
 8014174:	08014185 	.word	0x08014185
 8014178:	0801418b 	.word	0x0801418b
 801417c:	08014191 	.word	0x08014191
 8014180:	08014197 	.word	0x08014197
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8014184:	2300      	movs	r3, #0
 8014186:	73fb      	strb	r3, [r7, #15]
    break;
 8014188:	e00b      	b.n	80141a2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801418a:	2302      	movs	r3, #2
 801418c:	73fb      	strb	r3, [r7, #15]
    break;
 801418e:	e008      	b.n	80141a2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8014190:	2301      	movs	r3, #1
 8014192:	73fb      	strb	r3, [r7, #15]
    break;
 8014194:	e005      	b.n	80141a2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8014196:	2302      	movs	r3, #2
 8014198:	73fb      	strb	r3, [r7, #15]
    break;
 801419a:	e002      	b.n	80141a2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801419c:	2302      	movs	r3, #2
 801419e:	73fb      	strb	r3, [r7, #15]
    break;
 80141a0:	bf00      	nop
  }
  return usb_status;
 80141a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80141a4:	4618      	mov	r0, r3
 80141a6:	3714      	adds	r7, #20
 80141a8:	46bd      	mov	sp, r7
 80141aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ae:	4770      	bx	lr

080141b0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b084      	sub	sp, #16
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	4603      	mov	r3, r0
 80141b8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80141ba:	79fb      	ldrb	r3, [r7, #7]
 80141bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80141be:	79fb      	ldrb	r3, [r7, #7]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d102      	bne.n	80141ca <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80141c4:	2301      	movs	r3, #1
 80141c6:	73fb      	strb	r3, [r7, #15]
 80141c8:	e001      	b.n	80141ce <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80141ca:	2300      	movs	r3, #0
 80141cc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,(GPIO_PinState)data);
 80141ce:	7bfb      	ldrb	r3, [r7, #15]
 80141d0:	461a      	mov	r2, r3
 80141d2:	2101      	movs	r1, #1
 80141d4:	4803      	ldr	r0, [pc, #12]	; (80141e4 <MX_DriverVbusFS+0x34>)
 80141d6:	f7ef ff3d 	bl	8004054 <HAL_GPIO_WritePin>
}
 80141da:	bf00      	nop
 80141dc:	3710      	adds	r7, #16
 80141de:	46bd      	mov	sp, r7
 80141e0:	bd80      	pop	{r7, pc}
 80141e2:	bf00      	nop
 80141e4:	40020400 	.word	0x40020400

080141e8 <atol>:
 80141e8:	220a      	movs	r2, #10
 80141ea:	2100      	movs	r1, #0
 80141ec:	f000 be5e 	b.w	8014eac <strtol>

080141f0 <__errno>:
 80141f0:	4b01      	ldr	r3, [pc, #4]	; (80141f8 <__errno+0x8>)
 80141f2:	6818      	ldr	r0, [r3, #0]
 80141f4:	4770      	bx	lr
 80141f6:	bf00      	nop
 80141f8:	200002b4 	.word	0x200002b4

080141fc <std>:
 80141fc:	2300      	movs	r3, #0
 80141fe:	b510      	push	{r4, lr}
 8014200:	4604      	mov	r4, r0
 8014202:	e9c0 3300 	strd	r3, r3, [r0]
 8014206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801420a:	6083      	str	r3, [r0, #8]
 801420c:	8181      	strh	r1, [r0, #12]
 801420e:	6643      	str	r3, [r0, #100]	; 0x64
 8014210:	81c2      	strh	r2, [r0, #14]
 8014212:	6183      	str	r3, [r0, #24]
 8014214:	4619      	mov	r1, r3
 8014216:	2208      	movs	r2, #8
 8014218:	305c      	adds	r0, #92	; 0x5c
 801421a:	f000 f92d 	bl	8014478 <memset>
 801421e:	4b05      	ldr	r3, [pc, #20]	; (8014234 <std+0x38>)
 8014220:	6263      	str	r3, [r4, #36]	; 0x24
 8014222:	4b05      	ldr	r3, [pc, #20]	; (8014238 <std+0x3c>)
 8014224:	62a3      	str	r3, [r4, #40]	; 0x28
 8014226:	4b05      	ldr	r3, [pc, #20]	; (801423c <std+0x40>)
 8014228:	62e3      	str	r3, [r4, #44]	; 0x2c
 801422a:	4b05      	ldr	r3, [pc, #20]	; (8014240 <std+0x44>)
 801422c:	6224      	str	r4, [r4, #32]
 801422e:	6323      	str	r3, [r4, #48]	; 0x30
 8014230:	bd10      	pop	{r4, pc}
 8014232:	bf00      	nop
 8014234:	08014c61 	.word	0x08014c61
 8014238:	08014c87 	.word	0x08014c87
 801423c:	08014cbf 	.word	0x08014cbf
 8014240:	08014ce3 	.word	0x08014ce3

08014244 <_cleanup_r>:
 8014244:	4901      	ldr	r1, [pc, #4]	; (801424c <_cleanup_r+0x8>)
 8014246:	f000 b8af 	b.w	80143a8 <_fwalk_reent>
 801424a:	bf00      	nop
 801424c:	080154ed 	.word	0x080154ed

08014250 <__sfmoreglue>:
 8014250:	b570      	push	{r4, r5, r6, lr}
 8014252:	2268      	movs	r2, #104	; 0x68
 8014254:	1e4d      	subs	r5, r1, #1
 8014256:	4355      	muls	r5, r2
 8014258:	460e      	mov	r6, r1
 801425a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801425e:	f000 fbf1 	bl	8014a44 <_malloc_r>
 8014262:	4604      	mov	r4, r0
 8014264:	b140      	cbz	r0, 8014278 <__sfmoreglue+0x28>
 8014266:	2100      	movs	r1, #0
 8014268:	e9c0 1600 	strd	r1, r6, [r0]
 801426c:	300c      	adds	r0, #12
 801426e:	60a0      	str	r0, [r4, #8]
 8014270:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014274:	f000 f900 	bl	8014478 <memset>
 8014278:	4620      	mov	r0, r4
 801427a:	bd70      	pop	{r4, r5, r6, pc}

0801427c <__sfp_lock_acquire>:
 801427c:	4801      	ldr	r0, [pc, #4]	; (8014284 <__sfp_lock_acquire+0x8>)
 801427e:	f000 b8d9 	b.w	8014434 <__retarget_lock_acquire_recursive>
 8014282:	bf00      	nop
 8014284:	2000daae 	.word	0x2000daae

08014288 <__sfp_lock_release>:
 8014288:	4801      	ldr	r0, [pc, #4]	; (8014290 <__sfp_lock_release+0x8>)
 801428a:	f000 b8d5 	b.w	8014438 <__retarget_lock_release_recursive>
 801428e:	bf00      	nop
 8014290:	2000daae 	.word	0x2000daae

08014294 <__sinit_lock_acquire>:
 8014294:	4801      	ldr	r0, [pc, #4]	; (801429c <__sinit_lock_acquire+0x8>)
 8014296:	f000 b8cd 	b.w	8014434 <__retarget_lock_acquire_recursive>
 801429a:	bf00      	nop
 801429c:	2000daaf 	.word	0x2000daaf

080142a0 <__sinit_lock_release>:
 80142a0:	4801      	ldr	r0, [pc, #4]	; (80142a8 <__sinit_lock_release+0x8>)
 80142a2:	f000 b8c9 	b.w	8014438 <__retarget_lock_release_recursive>
 80142a6:	bf00      	nop
 80142a8:	2000daaf 	.word	0x2000daaf

080142ac <__sinit>:
 80142ac:	b510      	push	{r4, lr}
 80142ae:	4604      	mov	r4, r0
 80142b0:	f7ff fff0 	bl	8014294 <__sinit_lock_acquire>
 80142b4:	69a3      	ldr	r3, [r4, #24]
 80142b6:	b11b      	cbz	r3, 80142c0 <__sinit+0x14>
 80142b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142bc:	f7ff bff0 	b.w	80142a0 <__sinit_lock_release>
 80142c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80142c4:	6523      	str	r3, [r4, #80]	; 0x50
 80142c6:	4b13      	ldr	r3, [pc, #76]	; (8014314 <__sinit+0x68>)
 80142c8:	4a13      	ldr	r2, [pc, #76]	; (8014318 <__sinit+0x6c>)
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80142ce:	42a3      	cmp	r3, r4
 80142d0:	bf04      	itt	eq
 80142d2:	2301      	moveq	r3, #1
 80142d4:	61a3      	streq	r3, [r4, #24]
 80142d6:	4620      	mov	r0, r4
 80142d8:	f000 f820 	bl	801431c <__sfp>
 80142dc:	6060      	str	r0, [r4, #4]
 80142de:	4620      	mov	r0, r4
 80142e0:	f000 f81c 	bl	801431c <__sfp>
 80142e4:	60a0      	str	r0, [r4, #8]
 80142e6:	4620      	mov	r0, r4
 80142e8:	f000 f818 	bl	801431c <__sfp>
 80142ec:	2200      	movs	r2, #0
 80142ee:	60e0      	str	r0, [r4, #12]
 80142f0:	2104      	movs	r1, #4
 80142f2:	6860      	ldr	r0, [r4, #4]
 80142f4:	f7ff ff82 	bl	80141fc <std>
 80142f8:	68a0      	ldr	r0, [r4, #8]
 80142fa:	2201      	movs	r2, #1
 80142fc:	2109      	movs	r1, #9
 80142fe:	f7ff ff7d 	bl	80141fc <std>
 8014302:	68e0      	ldr	r0, [r4, #12]
 8014304:	2202      	movs	r2, #2
 8014306:	2112      	movs	r1, #18
 8014308:	f7ff ff78 	bl	80141fc <std>
 801430c:	2301      	movs	r3, #1
 801430e:	61a3      	str	r3, [r4, #24]
 8014310:	e7d2      	b.n	80142b8 <__sinit+0xc>
 8014312:	bf00      	nop
 8014314:	080174a4 	.word	0x080174a4
 8014318:	08014245 	.word	0x08014245

0801431c <__sfp>:
 801431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801431e:	4607      	mov	r7, r0
 8014320:	f7ff ffac 	bl	801427c <__sfp_lock_acquire>
 8014324:	4b1e      	ldr	r3, [pc, #120]	; (80143a0 <__sfp+0x84>)
 8014326:	681e      	ldr	r6, [r3, #0]
 8014328:	69b3      	ldr	r3, [r6, #24]
 801432a:	b913      	cbnz	r3, 8014332 <__sfp+0x16>
 801432c:	4630      	mov	r0, r6
 801432e:	f7ff ffbd 	bl	80142ac <__sinit>
 8014332:	3648      	adds	r6, #72	; 0x48
 8014334:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014338:	3b01      	subs	r3, #1
 801433a:	d503      	bpl.n	8014344 <__sfp+0x28>
 801433c:	6833      	ldr	r3, [r6, #0]
 801433e:	b30b      	cbz	r3, 8014384 <__sfp+0x68>
 8014340:	6836      	ldr	r6, [r6, #0]
 8014342:	e7f7      	b.n	8014334 <__sfp+0x18>
 8014344:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014348:	b9d5      	cbnz	r5, 8014380 <__sfp+0x64>
 801434a:	4b16      	ldr	r3, [pc, #88]	; (80143a4 <__sfp+0x88>)
 801434c:	60e3      	str	r3, [r4, #12]
 801434e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014352:	6665      	str	r5, [r4, #100]	; 0x64
 8014354:	f000 f86c 	bl	8014430 <__retarget_lock_init_recursive>
 8014358:	f7ff ff96 	bl	8014288 <__sfp_lock_release>
 801435c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014360:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014364:	6025      	str	r5, [r4, #0]
 8014366:	61a5      	str	r5, [r4, #24]
 8014368:	2208      	movs	r2, #8
 801436a:	4629      	mov	r1, r5
 801436c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014370:	f000 f882 	bl	8014478 <memset>
 8014374:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014378:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801437c:	4620      	mov	r0, r4
 801437e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014380:	3468      	adds	r4, #104	; 0x68
 8014382:	e7d9      	b.n	8014338 <__sfp+0x1c>
 8014384:	2104      	movs	r1, #4
 8014386:	4638      	mov	r0, r7
 8014388:	f7ff ff62 	bl	8014250 <__sfmoreglue>
 801438c:	4604      	mov	r4, r0
 801438e:	6030      	str	r0, [r6, #0]
 8014390:	2800      	cmp	r0, #0
 8014392:	d1d5      	bne.n	8014340 <__sfp+0x24>
 8014394:	f7ff ff78 	bl	8014288 <__sfp_lock_release>
 8014398:	230c      	movs	r3, #12
 801439a:	603b      	str	r3, [r7, #0]
 801439c:	e7ee      	b.n	801437c <__sfp+0x60>
 801439e:	bf00      	nop
 80143a0:	080174a4 	.word	0x080174a4
 80143a4:	ffff0001 	.word	0xffff0001

080143a8 <_fwalk_reent>:
 80143a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143ac:	4606      	mov	r6, r0
 80143ae:	4688      	mov	r8, r1
 80143b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80143b4:	2700      	movs	r7, #0
 80143b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80143ba:	f1b9 0901 	subs.w	r9, r9, #1
 80143be:	d505      	bpl.n	80143cc <_fwalk_reent+0x24>
 80143c0:	6824      	ldr	r4, [r4, #0]
 80143c2:	2c00      	cmp	r4, #0
 80143c4:	d1f7      	bne.n	80143b6 <_fwalk_reent+0xe>
 80143c6:	4638      	mov	r0, r7
 80143c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143cc:	89ab      	ldrh	r3, [r5, #12]
 80143ce:	2b01      	cmp	r3, #1
 80143d0:	d907      	bls.n	80143e2 <_fwalk_reent+0x3a>
 80143d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80143d6:	3301      	adds	r3, #1
 80143d8:	d003      	beq.n	80143e2 <_fwalk_reent+0x3a>
 80143da:	4629      	mov	r1, r5
 80143dc:	4630      	mov	r0, r6
 80143de:	47c0      	blx	r8
 80143e0:	4307      	orrs	r7, r0
 80143e2:	3568      	adds	r5, #104	; 0x68
 80143e4:	e7e9      	b.n	80143ba <_fwalk_reent+0x12>
	...

080143e8 <__libc_init_array>:
 80143e8:	b570      	push	{r4, r5, r6, lr}
 80143ea:	4d0d      	ldr	r5, [pc, #52]	; (8014420 <__libc_init_array+0x38>)
 80143ec:	4c0d      	ldr	r4, [pc, #52]	; (8014424 <__libc_init_array+0x3c>)
 80143ee:	1b64      	subs	r4, r4, r5
 80143f0:	10a4      	asrs	r4, r4, #2
 80143f2:	2600      	movs	r6, #0
 80143f4:	42a6      	cmp	r6, r4
 80143f6:	d109      	bne.n	801440c <__libc_init_array+0x24>
 80143f8:	4d0b      	ldr	r5, [pc, #44]	; (8014428 <__libc_init_array+0x40>)
 80143fa:	4c0c      	ldr	r4, [pc, #48]	; (801442c <__libc_init_array+0x44>)
 80143fc:	f002 fbd4 	bl	8016ba8 <_init>
 8014400:	1b64      	subs	r4, r4, r5
 8014402:	10a4      	asrs	r4, r4, #2
 8014404:	2600      	movs	r6, #0
 8014406:	42a6      	cmp	r6, r4
 8014408:	d105      	bne.n	8014416 <__libc_init_array+0x2e>
 801440a:	bd70      	pop	{r4, r5, r6, pc}
 801440c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014410:	4798      	blx	r3
 8014412:	3601      	adds	r6, #1
 8014414:	e7ee      	b.n	80143f4 <__libc_init_array+0xc>
 8014416:	f855 3b04 	ldr.w	r3, [r5], #4
 801441a:	4798      	blx	r3
 801441c:	3601      	adds	r6, #1
 801441e:	e7f2      	b.n	8014406 <__libc_init_array+0x1e>
 8014420:	080177b0 	.word	0x080177b0
 8014424:	080177b0 	.word	0x080177b0
 8014428:	080177b0 	.word	0x080177b0
 801442c:	080177b4 	.word	0x080177b4

08014430 <__retarget_lock_init_recursive>:
 8014430:	4770      	bx	lr

08014432 <__retarget_lock_acquire>:
 8014432:	4770      	bx	lr

08014434 <__retarget_lock_acquire_recursive>:
 8014434:	4770      	bx	lr

08014436 <__retarget_lock_release>:
 8014436:	4770      	bx	lr

08014438 <__retarget_lock_release_recursive>:
 8014438:	4770      	bx	lr
	...

0801443c <malloc>:
 801443c:	4b02      	ldr	r3, [pc, #8]	; (8014448 <malloc+0xc>)
 801443e:	4601      	mov	r1, r0
 8014440:	6818      	ldr	r0, [r3, #0]
 8014442:	f000 baff 	b.w	8014a44 <_malloc_r>
 8014446:	bf00      	nop
 8014448:	200002b4 	.word	0x200002b4

0801444c <free>:
 801444c:	4b02      	ldr	r3, [pc, #8]	; (8014458 <free+0xc>)
 801444e:	4601      	mov	r1, r0
 8014450:	6818      	ldr	r0, [r3, #0]
 8014452:	f000 ba8b 	b.w	801496c <_free_r>
 8014456:	bf00      	nop
 8014458:	200002b4 	.word	0x200002b4

0801445c <memcpy>:
 801445c:	440a      	add	r2, r1
 801445e:	4291      	cmp	r1, r2
 8014460:	f100 33ff 	add.w	r3, r0, #4294967295
 8014464:	d100      	bne.n	8014468 <memcpy+0xc>
 8014466:	4770      	bx	lr
 8014468:	b510      	push	{r4, lr}
 801446a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801446e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014472:	4291      	cmp	r1, r2
 8014474:	d1f9      	bne.n	801446a <memcpy+0xe>
 8014476:	bd10      	pop	{r4, pc}

08014478 <memset>:
 8014478:	4402      	add	r2, r0
 801447a:	4603      	mov	r3, r0
 801447c:	4293      	cmp	r3, r2
 801447e:	d100      	bne.n	8014482 <memset+0xa>
 8014480:	4770      	bx	lr
 8014482:	f803 1b01 	strb.w	r1, [r3], #1
 8014486:	e7f9      	b.n	801447c <memset+0x4>

08014488 <validate_structure>:
 8014488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801448a:	6801      	ldr	r1, [r0, #0]
 801448c:	293b      	cmp	r1, #59	; 0x3b
 801448e:	4604      	mov	r4, r0
 8014490:	d911      	bls.n	80144b6 <validate_structure+0x2e>
 8014492:	223c      	movs	r2, #60	; 0x3c
 8014494:	4668      	mov	r0, sp
 8014496:	f000 ff8f 	bl	80153b8 <div>
 801449a:	9a01      	ldr	r2, [sp, #4]
 801449c:	6863      	ldr	r3, [r4, #4]
 801449e:	9900      	ldr	r1, [sp, #0]
 80144a0:	2a00      	cmp	r2, #0
 80144a2:	440b      	add	r3, r1
 80144a4:	6063      	str	r3, [r4, #4]
 80144a6:	bfbb      	ittet	lt
 80144a8:	323c      	addlt	r2, #60	; 0x3c
 80144aa:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80144ae:	6022      	strge	r2, [r4, #0]
 80144b0:	6022      	strlt	r2, [r4, #0]
 80144b2:	bfb8      	it	lt
 80144b4:	6063      	strlt	r3, [r4, #4]
 80144b6:	6861      	ldr	r1, [r4, #4]
 80144b8:	293b      	cmp	r1, #59	; 0x3b
 80144ba:	d911      	bls.n	80144e0 <validate_structure+0x58>
 80144bc:	223c      	movs	r2, #60	; 0x3c
 80144be:	4668      	mov	r0, sp
 80144c0:	f000 ff7a 	bl	80153b8 <div>
 80144c4:	9a01      	ldr	r2, [sp, #4]
 80144c6:	68a3      	ldr	r3, [r4, #8]
 80144c8:	9900      	ldr	r1, [sp, #0]
 80144ca:	2a00      	cmp	r2, #0
 80144cc:	440b      	add	r3, r1
 80144ce:	60a3      	str	r3, [r4, #8]
 80144d0:	bfbb      	ittet	lt
 80144d2:	323c      	addlt	r2, #60	; 0x3c
 80144d4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80144d8:	6062      	strge	r2, [r4, #4]
 80144da:	6062      	strlt	r2, [r4, #4]
 80144dc:	bfb8      	it	lt
 80144de:	60a3      	strlt	r3, [r4, #8]
 80144e0:	68a1      	ldr	r1, [r4, #8]
 80144e2:	2917      	cmp	r1, #23
 80144e4:	d911      	bls.n	801450a <validate_structure+0x82>
 80144e6:	2218      	movs	r2, #24
 80144e8:	4668      	mov	r0, sp
 80144ea:	f000 ff65 	bl	80153b8 <div>
 80144ee:	9a01      	ldr	r2, [sp, #4]
 80144f0:	68e3      	ldr	r3, [r4, #12]
 80144f2:	9900      	ldr	r1, [sp, #0]
 80144f4:	2a00      	cmp	r2, #0
 80144f6:	440b      	add	r3, r1
 80144f8:	60e3      	str	r3, [r4, #12]
 80144fa:	bfbb      	ittet	lt
 80144fc:	3218      	addlt	r2, #24
 80144fe:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014502:	60a2      	strge	r2, [r4, #8]
 8014504:	60a2      	strlt	r2, [r4, #8]
 8014506:	bfb8      	it	lt
 8014508:	60e3      	strlt	r3, [r4, #12]
 801450a:	6921      	ldr	r1, [r4, #16]
 801450c:	290b      	cmp	r1, #11
 801450e:	d911      	bls.n	8014534 <validate_structure+0xac>
 8014510:	220c      	movs	r2, #12
 8014512:	4668      	mov	r0, sp
 8014514:	f000 ff50 	bl	80153b8 <div>
 8014518:	9a01      	ldr	r2, [sp, #4]
 801451a:	6963      	ldr	r3, [r4, #20]
 801451c:	9900      	ldr	r1, [sp, #0]
 801451e:	2a00      	cmp	r2, #0
 8014520:	440b      	add	r3, r1
 8014522:	6163      	str	r3, [r4, #20]
 8014524:	bfbb      	ittet	lt
 8014526:	320c      	addlt	r2, #12
 8014528:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801452c:	6122      	strge	r2, [r4, #16]
 801452e:	6122      	strlt	r2, [r4, #16]
 8014530:	bfb8      	it	lt
 8014532:	6163      	strlt	r3, [r4, #20]
 8014534:	6963      	ldr	r3, [r4, #20]
 8014536:	0798      	lsls	r0, r3, #30
 8014538:	d120      	bne.n	801457c <validate_structure+0xf4>
 801453a:	2164      	movs	r1, #100	; 0x64
 801453c:	fb93 f2f1 	sdiv	r2, r3, r1
 8014540:	fb01 3212 	mls	r2, r1, r2, r3
 8014544:	b9e2      	cbnz	r2, 8014580 <validate_structure+0xf8>
 8014546:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801454a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801454e:	fb93 f1f2 	sdiv	r1, r3, r2
 8014552:	fb02 3311 	mls	r3, r2, r1, r3
 8014556:	2b00      	cmp	r3, #0
 8014558:	bf14      	ite	ne
 801455a:	231c      	movne	r3, #28
 801455c:	231d      	moveq	r3, #29
 801455e:	68e2      	ldr	r2, [r4, #12]
 8014560:	2a00      	cmp	r2, #0
 8014562:	dc0f      	bgt.n	8014584 <validate_structure+0xfc>
 8014564:	4f33      	ldr	r7, [pc, #204]	; (8014634 <validate_structure+0x1ac>)
 8014566:	260b      	movs	r6, #11
 8014568:	2064      	movs	r0, #100	; 0x64
 801456a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801456e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8014572:	f1bc 0f00 	cmp.w	ip, #0
 8014576:	dd31      	ble.n	80145dc <validate_structure+0x154>
 8014578:	b003      	add	sp, #12
 801457a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801457c:	231c      	movs	r3, #28
 801457e:	e7ee      	b.n	801455e <validate_structure+0xd6>
 8014580:	231d      	movs	r3, #29
 8014582:	e7ec      	b.n	801455e <validate_structure+0xd6>
 8014584:	4e2b      	ldr	r6, [pc, #172]	; (8014634 <validate_structure+0x1ac>)
 8014586:	2700      	movs	r7, #0
 8014588:	2064      	movs	r0, #100	; 0x64
 801458a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801458e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8014592:	2a01      	cmp	r2, #1
 8014594:	bf14      	ite	ne
 8014596:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 801459a:	469c      	moveq	ip, r3
 801459c:	4561      	cmp	r1, ip
 801459e:	ddeb      	ble.n	8014578 <validate_structure+0xf0>
 80145a0:	3201      	adds	r2, #1
 80145a2:	eba1 010c 	sub.w	r1, r1, ip
 80145a6:	2a0c      	cmp	r2, #12
 80145a8:	60e1      	str	r1, [r4, #12]
 80145aa:	6122      	str	r2, [r4, #16]
 80145ac:	d1ef      	bne.n	801458e <validate_structure+0x106>
 80145ae:	6963      	ldr	r3, [r4, #20]
 80145b0:	1c5a      	adds	r2, r3, #1
 80145b2:	0791      	lsls	r1, r2, #30
 80145b4:	e9c4 7204 	strd	r7, r2, [r4, #16]
 80145b8:	d137      	bne.n	801462a <validate_structure+0x1a2>
 80145ba:	fb92 f1f0 	sdiv	r1, r2, r0
 80145be:	fb00 2211 	mls	r2, r0, r1, r2
 80145c2:	2a00      	cmp	r2, #0
 80145c4:	d133      	bne.n	801462e <validate_structure+0x1a6>
 80145c6:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80145ca:	fb93 f2f5 	sdiv	r2, r3, r5
 80145ce:	fb05 3312 	mls	r3, r5, r2, r3
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	bf14      	ite	ne
 80145d6:	231c      	movne	r3, #28
 80145d8:	231d      	moveq	r3, #29
 80145da:	e7d8      	b.n	801458e <validate_structure+0x106>
 80145dc:	6921      	ldr	r1, [r4, #16]
 80145de:	3901      	subs	r1, #1
 80145e0:	6121      	str	r1, [r4, #16]
 80145e2:	3101      	adds	r1, #1
 80145e4:	d114      	bne.n	8014610 <validate_structure+0x188>
 80145e6:	6963      	ldr	r3, [r4, #20]
 80145e8:	1e5a      	subs	r2, r3, #1
 80145ea:	0791      	lsls	r1, r2, #30
 80145ec:	e9c4 6204 	strd	r6, r2, [r4, #16]
 80145f0:	d117      	bne.n	8014622 <validate_structure+0x19a>
 80145f2:	fb92 f1f0 	sdiv	r1, r2, r0
 80145f6:	fb00 2211 	mls	r2, r0, r1, r2
 80145fa:	b9a2      	cbnz	r2, 8014626 <validate_structure+0x19e>
 80145fc:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8014600:	fb93 f2f5 	sdiv	r2, r3, r5
 8014604:	fb05 3312 	mls	r3, r5, r2, r3
 8014608:	2b00      	cmp	r3, #0
 801460a:	bf14      	ite	ne
 801460c:	231c      	movne	r3, #28
 801460e:	231d      	moveq	r3, #29
 8014610:	6922      	ldr	r2, [r4, #16]
 8014612:	2a01      	cmp	r2, #1
 8014614:	bf14      	ite	ne
 8014616:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801461a:	461a      	moveq	r2, r3
 801461c:	4462      	add	r2, ip
 801461e:	60e2      	str	r2, [r4, #12]
 8014620:	e7a5      	b.n	801456e <validate_structure+0xe6>
 8014622:	231c      	movs	r3, #28
 8014624:	e7f4      	b.n	8014610 <validate_structure+0x188>
 8014626:	231d      	movs	r3, #29
 8014628:	e7f2      	b.n	8014610 <validate_structure+0x188>
 801462a:	231c      	movs	r3, #28
 801462c:	e7af      	b.n	801458e <validate_structure+0x106>
 801462e:	231d      	movs	r3, #29
 8014630:	e7ad      	b.n	801458e <validate_structure+0x106>
 8014632:	bf00      	nop
 8014634:	080174a8 	.word	0x080174a8

08014638 <mktime>:
 8014638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801463c:	b085      	sub	sp, #20
 801463e:	4607      	mov	r7, r0
 8014640:	f000 ffe6 	bl	8015610 <__gettzinfo>
 8014644:	4681      	mov	r9, r0
 8014646:	4638      	mov	r0, r7
 8014648:	f7ff ff1e 	bl	8014488 <validate_structure>
 801464c:	e9d7 4000 	ldrd	r4, r0, [r7]
 8014650:	233c      	movs	r3, #60	; 0x3c
 8014652:	fb03 4400 	mla	r4, r3, r0, r4
 8014656:	68b8      	ldr	r0, [r7, #8]
 8014658:	4abc      	ldr	r2, [pc, #752]	; (801494c <mktime+0x314>)
 801465a:	697e      	ldr	r6, [r7, #20]
 801465c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8014660:	fb03 4400 	mla	r4, r3, r0, r4
 8014664:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8014668:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801466c:	3d01      	subs	r5, #1
 801466e:	2b01      	cmp	r3, #1
 8014670:	4415      	add	r5, r2
 8014672:	dd11      	ble.n	8014698 <mktime+0x60>
 8014674:	07b1      	lsls	r1, r6, #30
 8014676:	d10f      	bne.n	8014698 <mktime+0x60>
 8014678:	2264      	movs	r2, #100	; 0x64
 801467a:	fb96 f3f2 	sdiv	r3, r6, r2
 801467e:	fb02 6313 	mls	r3, r2, r3, r6
 8014682:	b943      	cbnz	r3, 8014696 <mktime+0x5e>
 8014684:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8014688:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801468c:	fb93 f1f2 	sdiv	r1, r3, r2
 8014690:	fb02 3311 	mls	r3, r2, r1, r3
 8014694:	b903      	cbnz	r3, 8014698 <mktime+0x60>
 8014696:	3501      	adds	r5, #1
 8014698:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 801469c:	3310      	adds	r3, #16
 801469e:	f644 6220 	movw	r2, #20000	; 0x4e20
 80146a2:	4293      	cmp	r3, r2
 80146a4:	61fd      	str	r5, [r7, #28]
 80146a6:	f200 815d 	bhi.w	8014964 <mktime+0x32c>
 80146aa:	2e46      	cmp	r6, #70	; 0x46
 80146ac:	dd71      	ble.n	8014792 <mktime+0x15a>
 80146ae:	2346      	movs	r3, #70	; 0x46
 80146b0:	f240 1c6d 	movw	ip, #365	; 0x16d
 80146b4:	2164      	movs	r1, #100	; 0x64
 80146b6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80146ba:	079a      	lsls	r2, r3, #30
 80146bc:	d163      	bne.n	8014786 <mktime+0x14e>
 80146be:	fb93 f2f1 	sdiv	r2, r3, r1
 80146c2:	fb01 3212 	mls	r2, r1, r2, r3
 80146c6:	2a00      	cmp	r2, #0
 80146c8:	d160      	bne.n	801478c <mktime+0x154>
 80146ca:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80146ce:	fb92 fef0 	sdiv	lr, r2, r0
 80146d2:	fb00 221e 	mls	r2, r0, lr, r2
 80146d6:	2a00      	cmp	r2, #0
 80146d8:	bf14      	ite	ne
 80146da:	4662      	movne	r2, ip
 80146dc:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80146e0:	3301      	adds	r3, #1
 80146e2:	429e      	cmp	r6, r3
 80146e4:	4415      	add	r5, r2
 80146e6:	d1e8      	bne.n	80146ba <mktime+0x82>
 80146e8:	4b99      	ldr	r3, [pc, #612]	; (8014950 <mktime+0x318>)
 80146ea:	ea4f 78e4 	mov.w	r8, r4, asr #31
 80146ee:	fbc5 4803 	smlal	r4, r8, r5, r3
 80146f2:	f000 fc8f 	bl	8015014 <__tz_lock>
 80146f6:	f000 fc99 	bl	801502c <_tzset_unlocked>
 80146fa:	4b96      	ldr	r3, [pc, #600]	; (8014954 <mktime+0x31c>)
 80146fc:	f8d3 b000 	ldr.w	fp, [r3]
 8014700:	f1bb 0f00 	cmp.w	fp, #0
 8014704:	d039      	beq.n	801477a <mktime+0x142>
 8014706:	f8d7 b020 	ldr.w	fp, [r7, #32]
 801470a:	6978      	ldr	r0, [r7, #20]
 801470c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014710:	f1bb 0f01 	cmp.w	fp, #1
 8014714:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8014718:	46da      	mov	sl, fp
 801471a:	bfa8      	it	ge
 801471c:	f04f 0a01 	movge.w	sl, #1
 8014720:	4283      	cmp	r3, r0
 8014722:	d178      	bne.n	8014816 <mktime+0x1de>
 8014724:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8014728:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 801472c:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8014730:	1a5b      	subs	r3, r3, r1
 8014732:	9302      	str	r3, [sp, #8]
 8014734:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8014738:	9303      	str	r3, [sp, #12]
 801473a:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 801473e:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8014742:	9301      	str	r3, [sp, #4]
 8014744:	ebb3 0c02 	subs.w	ip, r3, r2
 8014748:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 801474c:	4564      	cmp	r4, ip
 801474e:	eb78 0300 	sbcs.w	r3, r8, r0
 8014752:	da66      	bge.n	8014822 <mktime+0x1ea>
 8014754:	f8d9 3000 	ldr.w	r3, [r9]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d06f      	beq.n	801483c <mktime+0x204>
 801475c:	9b02      	ldr	r3, [sp, #8]
 801475e:	429c      	cmp	r4, r3
 8014760:	9b03      	ldr	r3, [sp, #12]
 8014762:	eb78 0303 	sbcs.w	r3, r8, r3
 8014766:	db03      	blt.n	8014770 <mktime+0x138>
 8014768:	4564      	cmp	r4, ip
 801476a:	eb78 0300 	sbcs.w	r3, r8, r0
 801476e:	db6b      	blt.n	8014848 <mktime+0x210>
 8014770:	f1bb 0f00 	cmp.w	fp, #0
 8014774:	f04f 0b00 	mov.w	fp, #0
 8014778:	da6b      	bge.n	8014852 <mktime+0x21a>
 801477a:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 801477e:	190c      	adds	r4, r1, r4
 8014780:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8014784:	e0a9      	b.n	80148da <mktime+0x2a2>
 8014786:	f240 126d 	movw	r2, #365	; 0x16d
 801478a:	e7a9      	b.n	80146e0 <mktime+0xa8>
 801478c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014790:	e7a6      	b.n	80146e0 <mktime+0xa8>
 8014792:	d0a9      	beq.n	80146e8 <mktime+0xb0>
 8014794:	2345      	movs	r3, #69	; 0x45
 8014796:	f240 1c6d 	movw	ip, #365	; 0x16d
 801479a:	2164      	movs	r1, #100	; 0x64
 801479c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80147a0:	e012      	b.n	80147c8 <mktime+0x190>
 80147a2:	bb62      	cbnz	r2, 80147fe <mktime+0x1c6>
 80147a4:	fb93 f2f1 	sdiv	r2, r3, r1
 80147a8:	fb01 3212 	mls	r2, r1, r2, r3
 80147ac:	bb52      	cbnz	r2, 8014804 <mktime+0x1cc>
 80147ae:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80147b2:	fb92 fef0 	sdiv	lr, r2, r0
 80147b6:	fb00 221e 	mls	r2, r0, lr, r2
 80147ba:	2a00      	cmp	r2, #0
 80147bc:	bf14      	ite	ne
 80147be:	4662      	movne	r2, ip
 80147c0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80147c4:	1aad      	subs	r5, r5, r2
 80147c6:	3b01      	subs	r3, #1
 80147c8:	429e      	cmp	r6, r3
 80147ca:	f003 0203 	and.w	r2, r3, #3
 80147ce:	dbe8      	blt.n	80147a2 <mktime+0x16a>
 80147d0:	b9da      	cbnz	r2, 801480a <mktime+0x1d2>
 80147d2:	2264      	movs	r2, #100	; 0x64
 80147d4:	fb96 f3f2 	sdiv	r3, r6, r2
 80147d8:	fb02 6313 	mls	r3, r2, r3, r6
 80147dc:	b9c3      	cbnz	r3, 8014810 <mktime+0x1d8>
 80147de:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 80147e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80147e6:	fb93 f1f2 	sdiv	r1, r3, r2
 80147ea:	fb02 3311 	mls	r3, r2, r1, r3
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	f240 136d 	movw	r3, #365	; 0x16d
 80147f4:	bf08      	it	eq
 80147f6:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80147fa:	1aed      	subs	r5, r5, r3
 80147fc:	e774      	b.n	80146e8 <mktime+0xb0>
 80147fe:	f240 126d 	movw	r2, #365	; 0x16d
 8014802:	e7df      	b.n	80147c4 <mktime+0x18c>
 8014804:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014808:	e7dc      	b.n	80147c4 <mktime+0x18c>
 801480a:	f240 136d 	movw	r3, #365	; 0x16d
 801480e:	e7f4      	b.n	80147fa <mktime+0x1c2>
 8014810:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8014814:	e7f1      	b.n	80147fa <mktime+0x1c2>
 8014816:	f000 fb53 	bl	8014ec0 <__tzcalc_limits>
 801481a:	2800      	cmp	r0, #0
 801481c:	d182      	bne.n	8014724 <mktime+0xec>
 801481e:	46d3      	mov	fp, sl
 8014820:	e050      	b.n	80148c4 <mktime+0x28c>
 8014822:	9b01      	ldr	r3, [sp, #4]
 8014824:	1a5b      	subs	r3, r3, r1
 8014826:	9301      	str	r3, [sp, #4]
 8014828:	ea4f 73e1 	mov.w	r3, r1, asr #31
 801482c:	eb6e 0e03 	sbc.w	lr, lr, r3
 8014830:	9b01      	ldr	r3, [sp, #4]
 8014832:	429c      	cmp	r4, r3
 8014834:	eb78 030e 	sbcs.w	r3, r8, lr
 8014838:	dbf1      	blt.n	801481e <mktime+0x1e6>
 801483a:	e78b      	b.n	8014754 <mktime+0x11c>
 801483c:	9b02      	ldr	r3, [sp, #8]
 801483e:	429c      	cmp	r4, r3
 8014840:	9b03      	ldr	r3, [sp, #12]
 8014842:	eb78 0303 	sbcs.w	r3, r8, r3
 8014846:	db8f      	blt.n	8014768 <mktime+0x130>
 8014848:	f1bb 0f00 	cmp.w	fp, #0
 801484c:	db3e      	blt.n	80148cc <mktime+0x294>
 801484e:	f04f 0b01 	mov.w	fp, #1
 8014852:	ea8a 0a0b 	eor.w	sl, sl, fp
 8014856:	f1ba 0f01 	cmp.w	sl, #1
 801485a:	d133      	bne.n	80148c4 <mktime+0x28c>
 801485c:	f1bb 0f00 	cmp.w	fp, #0
 8014860:	d04e      	beq.n	8014900 <mktime+0x2c8>
 8014862:	1a52      	subs	r2, r2, r1
 8014864:	683b      	ldr	r3, [r7, #0]
 8014866:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 801486a:	4413      	add	r3, r2
 801486c:	1914      	adds	r4, r2, r4
 801486e:	603b      	str	r3, [r7, #0]
 8014870:	4638      	mov	r0, r7
 8014872:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8014876:	f7ff fe07 	bl	8014488 <validate_structure>
 801487a:	68fa      	ldr	r2, [r7, #12]
 801487c:	ebb2 020a 	subs.w	r2, r2, sl
 8014880:	d020      	beq.n	80148c4 <mktime+0x28c>
 8014882:	2a01      	cmp	r2, #1
 8014884:	dc3e      	bgt.n	8014904 <mktime+0x2cc>
 8014886:	1c90      	adds	r0, r2, #2
 8014888:	bfd8      	it	le
 801488a:	2201      	movle	r2, #1
 801488c:	69fb      	ldr	r3, [r7, #28]
 801488e:	18d3      	adds	r3, r2, r3
 8014890:	4415      	add	r5, r2
 8014892:	d540      	bpl.n	8014916 <mktime+0x2de>
 8014894:	1e73      	subs	r3, r6, #1
 8014896:	0799      	lsls	r1, r3, #30
 8014898:	d137      	bne.n	801490a <mktime+0x2d2>
 801489a:	2264      	movs	r2, #100	; 0x64
 801489c:	fb93 f1f2 	sdiv	r1, r3, r2
 80148a0:	fb02 3311 	mls	r3, r2, r1, r3
 80148a4:	bba3      	cbnz	r3, 8014910 <mktime+0x2d8>
 80148a6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80148aa:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 80148ae:	fb96 f2f3 	sdiv	r2, r6, r3
 80148b2:	fb03 6612 	mls	r6, r3, r2, r6
 80148b6:	2e00      	cmp	r6, #0
 80148b8:	f240 136d 	movw	r3, #365	; 0x16d
 80148bc:	bf18      	it	ne
 80148be:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80148c2:	61fb      	str	r3, [r7, #28]
 80148c4:	f1bb 0f01 	cmp.w	fp, #1
 80148c8:	f47f af57 	bne.w	801477a <mktime+0x142>
 80148cc:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80148d0:	190c      	adds	r4, r1, r4
 80148d2:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 80148d6:	f04f 0b01 	mov.w	fp, #1
 80148da:	f000 fba1 	bl	8015020 <__tz_unlock>
 80148de:	3504      	adds	r5, #4
 80148e0:	2307      	movs	r3, #7
 80148e2:	fb95 f3f3 	sdiv	r3, r5, r3
 80148e6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80148ea:	1aed      	subs	r5, r5, r3
 80148ec:	bf48      	it	mi
 80148ee:	3507      	addmi	r5, #7
 80148f0:	f8c7 b020 	str.w	fp, [r7, #32]
 80148f4:	61bd      	str	r5, [r7, #24]
 80148f6:	4620      	mov	r0, r4
 80148f8:	4641      	mov	r1, r8
 80148fa:	b005      	add	sp, #20
 80148fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014900:	1a8a      	subs	r2, r1, r2
 8014902:	e7af      	b.n	8014864 <mktime+0x22c>
 8014904:	f04f 32ff 	mov.w	r2, #4294967295
 8014908:	e7c0      	b.n	801488c <mktime+0x254>
 801490a:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 801490e:	e7d8      	b.n	80148c2 <mktime+0x28a>
 8014910:	f240 136d 	movw	r3, #365	; 0x16d
 8014914:	e7d5      	b.n	80148c2 <mktime+0x28a>
 8014916:	07b2      	lsls	r2, r6, #30
 8014918:	d11e      	bne.n	8014958 <mktime+0x320>
 801491a:	2164      	movs	r1, #100	; 0x64
 801491c:	fb96 f2f1 	sdiv	r2, r6, r1
 8014920:	fb01 6212 	mls	r2, r1, r2, r6
 8014924:	b9da      	cbnz	r2, 801495e <mktime+0x326>
 8014926:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801492a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801492e:	fb96 f1f2 	sdiv	r1, r6, r2
 8014932:	fb02 6611 	mls	r6, r2, r1, r6
 8014936:	2e00      	cmp	r6, #0
 8014938:	f240 126d 	movw	r2, #365	; 0x16d
 801493c:	bf08      	it	eq
 801493e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8014942:	4293      	cmp	r3, r2
 8014944:	bfa8      	it	ge
 8014946:	1a9b      	subge	r3, r3, r2
 8014948:	e7bb      	b.n	80148c2 <mktime+0x28a>
 801494a:	bf00      	nop
 801494c:	080174d8 	.word	0x080174d8
 8014950:	00015180 	.word	0x00015180
 8014954:	2000dadc 	.word	0x2000dadc
 8014958:	f240 126d 	movw	r2, #365	; 0x16d
 801495c:	e7f1      	b.n	8014942 <mktime+0x30a>
 801495e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014962:	e7ee      	b.n	8014942 <mktime+0x30a>
 8014964:	f04f 34ff 	mov.w	r4, #4294967295
 8014968:	46a0      	mov	r8, r4
 801496a:	e7c4      	b.n	80148f6 <mktime+0x2be>

0801496c <_free_r>:
 801496c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801496e:	2900      	cmp	r1, #0
 8014970:	d044      	beq.n	80149fc <_free_r+0x90>
 8014972:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014976:	9001      	str	r0, [sp, #4]
 8014978:	2b00      	cmp	r3, #0
 801497a:	f1a1 0404 	sub.w	r4, r1, #4
 801497e:	bfb8      	it	lt
 8014980:	18e4      	addlt	r4, r4, r3
 8014982:	f000 fe5b 	bl	801563c <__malloc_lock>
 8014986:	4a1e      	ldr	r2, [pc, #120]	; (8014a00 <_free_r+0x94>)
 8014988:	9801      	ldr	r0, [sp, #4]
 801498a:	6813      	ldr	r3, [r2, #0]
 801498c:	b933      	cbnz	r3, 801499c <_free_r+0x30>
 801498e:	6063      	str	r3, [r4, #4]
 8014990:	6014      	str	r4, [r2, #0]
 8014992:	b003      	add	sp, #12
 8014994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014998:	f000 be56 	b.w	8015648 <__malloc_unlock>
 801499c:	42a3      	cmp	r3, r4
 801499e:	d908      	bls.n	80149b2 <_free_r+0x46>
 80149a0:	6825      	ldr	r5, [r4, #0]
 80149a2:	1961      	adds	r1, r4, r5
 80149a4:	428b      	cmp	r3, r1
 80149a6:	bf01      	itttt	eq
 80149a8:	6819      	ldreq	r1, [r3, #0]
 80149aa:	685b      	ldreq	r3, [r3, #4]
 80149ac:	1949      	addeq	r1, r1, r5
 80149ae:	6021      	streq	r1, [r4, #0]
 80149b0:	e7ed      	b.n	801498e <_free_r+0x22>
 80149b2:	461a      	mov	r2, r3
 80149b4:	685b      	ldr	r3, [r3, #4]
 80149b6:	b10b      	cbz	r3, 80149bc <_free_r+0x50>
 80149b8:	42a3      	cmp	r3, r4
 80149ba:	d9fa      	bls.n	80149b2 <_free_r+0x46>
 80149bc:	6811      	ldr	r1, [r2, #0]
 80149be:	1855      	adds	r5, r2, r1
 80149c0:	42a5      	cmp	r5, r4
 80149c2:	d10b      	bne.n	80149dc <_free_r+0x70>
 80149c4:	6824      	ldr	r4, [r4, #0]
 80149c6:	4421      	add	r1, r4
 80149c8:	1854      	adds	r4, r2, r1
 80149ca:	42a3      	cmp	r3, r4
 80149cc:	6011      	str	r1, [r2, #0]
 80149ce:	d1e0      	bne.n	8014992 <_free_r+0x26>
 80149d0:	681c      	ldr	r4, [r3, #0]
 80149d2:	685b      	ldr	r3, [r3, #4]
 80149d4:	6053      	str	r3, [r2, #4]
 80149d6:	4421      	add	r1, r4
 80149d8:	6011      	str	r1, [r2, #0]
 80149da:	e7da      	b.n	8014992 <_free_r+0x26>
 80149dc:	d902      	bls.n	80149e4 <_free_r+0x78>
 80149de:	230c      	movs	r3, #12
 80149e0:	6003      	str	r3, [r0, #0]
 80149e2:	e7d6      	b.n	8014992 <_free_r+0x26>
 80149e4:	6825      	ldr	r5, [r4, #0]
 80149e6:	1961      	adds	r1, r4, r5
 80149e8:	428b      	cmp	r3, r1
 80149ea:	bf04      	itt	eq
 80149ec:	6819      	ldreq	r1, [r3, #0]
 80149ee:	685b      	ldreq	r3, [r3, #4]
 80149f0:	6063      	str	r3, [r4, #4]
 80149f2:	bf04      	itt	eq
 80149f4:	1949      	addeq	r1, r1, r5
 80149f6:	6021      	streq	r1, [r4, #0]
 80149f8:	6054      	str	r4, [r2, #4]
 80149fa:	e7ca      	b.n	8014992 <_free_r+0x26>
 80149fc:	b003      	add	sp, #12
 80149fe:	bd30      	pop	{r4, r5, pc}
 8014a00:	2000dab4 	.word	0x2000dab4

08014a04 <sbrk_aligned>:
 8014a04:	b570      	push	{r4, r5, r6, lr}
 8014a06:	4e0e      	ldr	r6, [pc, #56]	; (8014a40 <sbrk_aligned+0x3c>)
 8014a08:	460c      	mov	r4, r1
 8014a0a:	6831      	ldr	r1, [r6, #0]
 8014a0c:	4605      	mov	r5, r0
 8014a0e:	b911      	cbnz	r1, 8014a16 <sbrk_aligned+0x12>
 8014a10:	f000 f8f6 	bl	8014c00 <_sbrk_r>
 8014a14:	6030      	str	r0, [r6, #0]
 8014a16:	4621      	mov	r1, r4
 8014a18:	4628      	mov	r0, r5
 8014a1a:	f000 f8f1 	bl	8014c00 <_sbrk_r>
 8014a1e:	1c43      	adds	r3, r0, #1
 8014a20:	d00a      	beq.n	8014a38 <sbrk_aligned+0x34>
 8014a22:	1cc4      	adds	r4, r0, #3
 8014a24:	f024 0403 	bic.w	r4, r4, #3
 8014a28:	42a0      	cmp	r0, r4
 8014a2a:	d007      	beq.n	8014a3c <sbrk_aligned+0x38>
 8014a2c:	1a21      	subs	r1, r4, r0
 8014a2e:	4628      	mov	r0, r5
 8014a30:	f000 f8e6 	bl	8014c00 <_sbrk_r>
 8014a34:	3001      	adds	r0, #1
 8014a36:	d101      	bne.n	8014a3c <sbrk_aligned+0x38>
 8014a38:	f04f 34ff 	mov.w	r4, #4294967295
 8014a3c:	4620      	mov	r0, r4
 8014a3e:	bd70      	pop	{r4, r5, r6, pc}
 8014a40:	2000dab8 	.word	0x2000dab8

08014a44 <_malloc_r>:
 8014a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a48:	1ccd      	adds	r5, r1, #3
 8014a4a:	f025 0503 	bic.w	r5, r5, #3
 8014a4e:	3508      	adds	r5, #8
 8014a50:	2d0c      	cmp	r5, #12
 8014a52:	bf38      	it	cc
 8014a54:	250c      	movcc	r5, #12
 8014a56:	2d00      	cmp	r5, #0
 8014a58:	4607      	mov	r7, r0
 8014a5a:	db01      	blt.n	8014a60 <_malloc_r+0x1c>
 8014a5c:	42a9      	cmp	r1, r5
 8014a5e:	d905      	bls.n	8014a6c <_malloc_r+0x28>
 8014a60:	230c      	movs	r3, #12
 8014a62:	603b      	str	r3, [r7, #0]
 8014a64:	2600      	movs	r6, #0
 8014a66:	4630      	mov	r0, r6
 8014a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a6c:	4e2e      	ldr	r6, [pc, #184]	; (8014b28 <_malloc_r+0xe4>)
 8014a6e:	f000 fde5 	bl	801563c <__malloc_lock>
 8014a72:	6833      	ldr	r3, [r6, #0]
 8014a74:	461c      	mov	r4, r3
 8014a76:	bb34      	cbnz	r4, 8014ac6 <_malloc_r+0x82>
 8014a78:	4629      	mov	r1, r5
 8014a7a:	4638      	mov	r0, r7
 8014a7c:	f7ff ffc2 	bl	8014a04 <sbrk_aligned>
 8014a80:	1c43      	adds	r3, r0, #1
 8014a82:	4604      	mov	r4, r0
 8014a84:	d14d      	bne.n	8014b22 <_malloc_r+0xde>
 8014a86:	6834      	ldr	r4, [r6, #0]
 8014a88:	4626      	mov	r6, r4
 8014a8a:	2e00      	cmp	r6, #0
 8014a8c:	d140      	bne.n	8014b10 <_malloc_r+0xcc>
 8014a8e:	6823      	ldr	r3, [r4, #0]
 8014a90:	4631      	mov	r1, r6
 8014a92:	4638      	mov	r0, r7
 8014a94:	eb04 0803 	add.w	r8, r4, r3
 8014a98:	f000 f8b2 	bl	8014c00 <_sbrk_r>
 8014a9c:	4580      	cmp	r8, r0
 8014a9e:	d13a      	bne.n	8014b16 <_malloc_r+0xd2>
 8014aa0:	6821      	ldr	r1, [r4, #0]
 8014aa2:	3503      	adds	r5, #3
 8014aa4:	1a6d      	subs	r5, r5, r1
 8014aa6:	f025 0503 	bic.w	r5, r5, #3
 8014aaa:	3508      	adds	r5, #8
 8014aac:	2d0c      	cmp	r5, #12
 8014aae:	bf38      	it	cc
 8014ab0:	250c      	movcc	r5, #12
 8014ab2:	4629      	mov	r1, r5
 8014ab4:	4638      	mov	r0, r7
 8014ab6:	f7ff ffa5 	bl	8014a04 <sbrk_aligned>
 8014aba:	3001      	adds	r0, #1
 8014abc:	d02b      	beq.n	8014b16 <_malloc_r+0xd2>
 8014abe:	6823      	ldr	r3, [r4, #0]
 8014ac0:	442b      	add	r3, r5
 8014ac2:	6023      	str	r3, [r4, #0]
 8014ac4:	e00e      	b.n	8014ae4 <_malloc_r+0xa0>
 8014ac6:	6822      	ldr	r2, [r4, #0]
 8014ac8:	1b52      	subs	r2, r2, r5
 8014aca:	d41e      	bmi.n	8014b0a <_malloc_r+0xc6>
 8014acc:	2a0b      	cmp	r2, #11
 8014ace:	d916      	bls.n	8014afe <_malloc_r+0xba>
 8014ad0:	1961      	adds	r1, r4, r5
 8014ad2:	42a3      	cmp	r3, r4
 8014ad4:	6025      	str	r5, [r4, #0]
 8014ad6:	bf18      	it	ne
 8014ad8:	6059      	strne	r1, [r3, #4]
 8014ada:	6863      	ldr	r3, [r4, #4]
 8014adc:	bf08      	it	eq
 8014ade:	6031      	streq	r1, [r6, #0]
 8014ae0:	5162      	str	r2, [r4, r5]
 8014ae2:	604b      	str	r3, [r1, #4]
 8014ae4:	4638      	mov	r0, r7
 8014ae6:	f104 060b 	add.w	r6, r4, #11
 8014aea:	f000 fdad 	bl	8015648 <__malloc_unlock>
 8014aee:	f026 0607 	bic.w	r6, r6, #7
 8014af2:	1d23      	adds	r3, r4, #4
 8014af4:	1af2      	subs	r2, r6, r3
 8014af6:	d0b6      	beq.n	8014a66 <_malloc_r+0x22>
 8014af8:	1b9b      	subs	r3, r3, r6
 8014afa:	50a3      	str	r3, [r4, r2]
 8014afc:	e7b3      	b.n	8014a66 <_malloc_r+0x22>
 8014afe:	6862      	ldr	r2, [r4, #4]
 8014b00:	42a3      	cmp	r3, r4
 8014b02:	bf0c      	ite	eq
 8014b04:	6032      	streq	r2, [r6, #0]
 8014b06:	605a      	strne	r2, [r3, #4]
 8014b08:	e7ec      	b.n	8014ae4 <_malloc_r+0xa0>
 8014b0a:	4623      	mov	r3, r4
 8014b0c:	6864      	ldr	r4, [r4, #4]
 8014b0e:	e7b2      	b.n	8014a76 <_malloc_r+0x32>
 8014b10:	4634      	mov	r4, r6
 8014b12:	6876      	ldr	r6, [r6, #4]
 8014b14:	e7b9      	b.n	8014a8a <_malloc_r+0x46>
 8014b16:	230c      	movs	r3, #12
 8014b18:	603b      	str	r3, [r7, #0]
 8014b1a:	4638      	mov	r0, r7
 8014b1c:	f000 fd94 	bl	8015648 <__malloc_unlock>
 8014b20:	e7a1      	b.n	8014a66 <_malloc_r+0x22>
 8014b22:	6025      	str	r5, [r4, #0]
 8014b24:	e7de      	b.n	8014ae4 <_malloc_r+0xa0>
 8014b26:	bf00      	nop
 8014b28:	2000dab4 	.word	0x2000dab4

08014b2c <cleanup_glue>:
 8014b2c:	b538      	push	{r3, r4, r5, lr}
 8014b2e:	460c      	mov	r4, r1
 8014b30:	6809      	ldr	r1, [r1, #0]
 8014b32:	4605      	mov	r5, r0
 8014b34:	b109      	cbz	r1, 8014b3a <cleanup_glue+0xe>
 8014b36:	f7ff fff9 	bl	8014b2c <cleanup_glue>
 8014b3a:	4621      	mov	r1, r4
 8014b3c:	4628      	mov	r0, r5
 8014b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b42:	f7ff bf13 	b.w	801496c <_free_r>
	...

08014b48 <_reclaim_reent>:
 8014b48:	4b2c      	ldr	r3, [pc, #176]	; (8014bfc <_reclaim_reent+0xb4>)
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	4283      	cmp	r3, r0
 8014b4e:	b570      	push	{r4, r5, r6, lr}
 8014b50:	4604      	mov	r4, r0
 8014b52:	d051      	beq.n	8014bf8 <_reclaim_reent+0xb0>
 8014b54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014b56:	b143      	cbz	r3, 8014b6a <_reclaim_reent+0x22>
 8014b58:	68db      	ldr	r3, [r3, #12]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d14a      	bne.n	8014bf4 <_reclaim_reent+0xac>
 8014b5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b60:	6819      	ldr	r1, [r3, #0]
 8014b62:	b111      	cbz	r1, 8014b6a <_reclaim_reent+0x22>
 8014b64:	4620      	mov	r0, r4
 8014b66:	f7ff ff01 	bl	801496c <_free_r>
 8014b6a:	6961      	ldr	r1, [r4, #20]
 8014b6c:	b111      	cbz	r1, 8014b74 <_reclaim_reent+0x2c>
 8014b6e:	4620      	mov	r0, r4
 8014b70:	f7ff fefc 	bl	801496c <_free_r>
 8014b74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014b76:	b111      	cbz	r1, 8014b7e <_reclaim_reent+0x36>
 8014b78:	4620      	mov	r0, r4
 8014b7a:	f7ff fef7 	bl	801496c <_free_r>
 8014b7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014b80:	b111      	cbz	r1, 8014b88 <_reclaim_reent+0x40>
 8014b82:	4620      	mov	r0, r4
 8014b84:	f7ff fef2 	bl	801496c <_free_r>
 8014b88:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014b8a:	b111      	cbz	r1, 8014b92 <_reclaim_reent+0x4a>
 8014b8c:	4620      	mov	r0, r4
 8014b8e:	f7ff feed 	bl	801496c <_free_r>
 8014b92:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014b94:	b111      	cbz	r1, 8014b9c <_reclaim_reent+0x54>
 8014b96:	4620      	mov	r0, r4
 8014b98:	f7ff fee8 	bl	801496c <_free_r>
 8014b9c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8014b9e:	b111      	cbz	r1, 8014ba6 <_reclaim_reent+0x5e>
 8014ba0:	4620      	mov	r0, r4
 8014ba2:	f7ff fee3 	bl	801496c <_free_r>
 8014ba6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014ba8:	b111      	cbz	r1, 8014bb0 <_reclaim_reent+0x68>
 8014baa:	4620      	mov	r0, r4
 8014bac:	f7ff fede 	bl	801496c <_free_r>
 8014bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014bb2:	b111      	cbz	r1, 8014bba <_reclaim_reent+0x72>
 8014bb4:	4620      	mov	r0, r4
 8014bb6:	f7ff fed9 	bl	801496c <_free_r>
 8014bba:	69a3      	ldr	r3, [r4, #24]
 8014bbc:	b1e3      	cbz	r3, 8014bf8 <_reclaim_reent+0xb0>
 8014bbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014bc0:	4620      	mov	r0, r4
 8014bc2:	4798      	blx	r3
 8014bc4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014bc6:	b1b9      	cbz	r1, 8014bf8 <_reclaim_reent+0xb0>
 8014bc8:	4620      	mov	r0, r4
 8014bca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014bce:	f7ff bfad 	b.w	8014b2c <cleanup_glue>
 8014bd2:	5949      	ldr	r1, [r1, r5]
 8014bd4:	b941      	cbnz	r1, 8014be8 <_reclaim_reent+0xa0>
 8014bd6:	3504      	adds	r5, #4
 8014bd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014bda:	2d80      	cmp	r5, #128	; 0x80
 8014bdc:	68d9      	ldr	r1, [r3, #12]
 8014bde:	d1f8      	bne.n	8014bd2 <_reclaim_reent+0x8a>
 8014be0:	4620      	mov	r0, r4
 8014be2:	f7ff fec3 	bl	801496c <_free_r>
 8014be6:	e7ba      	b.n	8014b5e <_reclaim_reent+0x16>
 8014be8:	680e      	ldr	r6, [r1, #0]
 8014bea:	4620      	mov	r0, r4
 8014bec:	f7ff febe 	bl	801496c <_free_r>
 8014bf0:	4631      	mov	r1, r6
 8014bf2:	e7ef      	b.n	8014bd4 <_reclaim_reent+0x8c>
 8014bf4:	2500      	movs	r5, #0
 8014bf6:	e7ef      	b.n	8014bd8 <_reclaim_reent+0x90>
 8014bf8:	bd70      	pop	{r4, r5, r6, pc}
 8014bfa:	bf00      	nop
 8014bfc:	200002b4 	.word	0x200002b4

08014c00 <_sbrk_r>:
 8014c00:	b538      	push	{r3, r4, r5, lr}
 8014c02:	4d06      	ldr	r5, [pc, #24]	; (8014c1c <_sbrk_r+0x1c>)
 8014c04:	2300      	movs	r3, #0
 8014c06:	4604      	mov	r4, r0
 8014c08:	4608      	mov	r0, r1
 8014c0a:	602b      	str	r3, [r5, #0]
 8014c0c:	f7ed ffa0 	bl	8002b50 <_sbrk>
 8014c10:	1c43      	adds	r3, r0, #1
 8014c12:	d102      	bne.n	8014c1a <_sbrk_r+0x1a>
 8014c14:	682b      	ldr	r3, [r5, #0]
 8014c16:	b103      	cbz	r3, 8014c1a <_sbrk_r+0x1a>
 8014c18:	6023      	str	r3, [r4, #0]
 8014c1a:	bd38      	pop	{r3, r4, r5, pc}
 8014c1c:	2000dabc 	.word	0x2000dabc

08014c20 <siprintf>:
 8014c20:	b40e      	push	{r1, r2, r3}
 8014c22:	b500      	push	{lr}
 8014c24:	b09c      	sub	sp, #112	; 0x70
 8014c26:	ab1d      	add	r3, sp, #116	; 0x74
 8014c28:	9002      	str	r0, [sp, #8]
 8014c2a:	9006      	str	r0, [sp, #24]
 8014c2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014c30:	4809      	ldr	r0, [pc, #36]	; (8014c58 <siprintf+0x38>)
 8014c32:	9107      	str	r1, [sp, #28]
 8014c34:	9104      	str	r1, [sp, #16]
 8014c36:	4909      	ldr	r1, [pc, #36]	; (8014c5c <siprintf+0x3c>)
 8014c38:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c3c:	9105      	str	r1, [sp, #20]
 8014c3e:	6800      	ldr	r0, [r0, #0]
 8014c40:	9301      	str	r3, [sp, #4]
 8014c42:	a902      	add	r1, sp, #8
 8014c44:	f000 fd62 	bl	801570c <_svfiprintf_r>
 8014c48:	9b02      	ldr	r3, [sp, #8]
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	701a      	strb	r2, [r3, #0]
 8014c4e:	b01c      	add	sp, #112	; 0x70
 8014c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8014c54:	b003      	add	sp, #12
 8014c56:	4770      	bx	lr
 8014c58:	200002b4 	.word	0x200002b4
 8014c5c:	ffff0208 	.word	0xffff0208

08014c60 <__sread>:
 8014c60:	b510      	push	{r4, lr}
 8014c62:	460c      	mov	r4, r1
 8014c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c68:	f001 f93e 	bl	8015ee8 <_read_r>
 8014c6c:	2800      	cmp	r0, #0
 8014c6e:	bfab      	itete	ge
 8014c70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014c72:	89a3      	ldrhlt	r3, [r4, #12]
 8014c74:	181b      	addge	r3, r3, r0
 8014c76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014c7a:	bfac      	ite	ge
 8014c7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8014c7e:	81a3      	strhlt	r3, [r4, #12]
 8014c80:	bd10      	pop	{r4, pc}

08014c82 <__seofread>:
 8014c82:	2000      	movs	r0, #0
 8014c84:	4770      	bx	lr

08014c86 <__swrite>:
 8014c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c8a:	461f      	mov	r7, r3
 8014c8c:	898b      	ldrh	r3, [r1, #12]
 8014c8e:	05db      	lsls	r3, r3, #23
 8014c90:	4605      	mov	r5, r0
 8014c92:	460c      	mov	r4, r1
 8014c94:	4616      	mov	r6, r2
 8014c96:	d505      	bpl.n	8014ca4 <__swrite+0x1e>
 8014c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c9c:	2302      	movs	r3, #2
 8014c9e:	2200      	movs	r2, #0
 8014ca0:	f000 fcba 	bl	8015618 <_lseek_r>
 8014ca4:	89a3      	ldrh	r3, [r4, #12]
 8014ca6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014caa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014cae:	81a3      	strh	r3, [r4, #12]
 8014cb0:	4632      	mov	r2, r6
 8014cb2:	463b      	mov	r3, r7
 8014cb4:	4628      	mov	r0, r5
 8014cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014cba:	f000 bb3d 	b.w	8015338 <_write_r>

08014cbe <__sseek>:
 8014cbe:	b510      	push	{r4, lr}
 8014cc0:	460c      	mov	r4, r1
 8014cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cc6:	f000 fca7 	bl	8015618 <_lseek_r>
 8014cca:	1c43      	adds	r3, r0, #1
 8014ccc:	89a3      	ldrh	r3, [r4, #12]
 8014cce:	bf15      	itete	ne
 8014cd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8014cd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014cd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014cda:	81a3      	strheq	r3, [r4, #12]
 8014cdc:	bf18      	it	ne
 8014cde:	81a3      	strhne	r3, [r4, #12]
 8014ce0:	bd10      	pop	{r4, pc}

08014ce2 <__sclose>:
 8014ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ce6:	f000 bb57 	b.w	8015398 <_close_r>
	...

08014cec <strtok>:
 8014cec:	4b16      	ldr	r3, [pc, #88]	; (8014d48 <strtok+0x5c>)
 8014cee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014cf0:	681e      	ldr	r6, [r3, #0]
 8014cf2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8014cf4:	4605      	mov	r5, r0
 8014cf6:	b9fc      	cbnz	r4, 8014d38 <strtok+0x4c>
 8014cf8:	2050      	movs	r0, #80	; 0x50
 8014cfa:	9101      	str	r1, [sp, #4]
 8014cfc:	f7ff fb9e 	bl	801443c <malloc>
 8014d00:	9901      	ldr	r1, [sp, #4]
 8014d02:	65b0      	str	r0, [r6, #88]	; 0x58
 8014d04:	4602      	mov	r2, r0
 8014d06:	b920      	cbnz	r0, 8014d12 <strtok+0x26>
 8014d08:	4b10      	ldr	r3, [pc, #64]	; (8014d4c <strtok+0x60>)
 8014d0a:	4811      	ldr	r0, [pc, #68]	; (8014d50 <strtok+0x64>)
 8014d0c:	2157      	movs	r1, #87	; 0x57
 8014d0e:	f000 fb25 	bl	801535c <__assert_func>
 8014d12:	e9c0 4400 	strd	r4, r4, [r0]
 8014d16:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8014d1a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8014d1e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8014d22:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8014d26:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8014d2a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8014d2e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8014d32:	6184      	str	r4, [r0, #24]
 8014d34:	7704      	strb	r4, [r0, #28]
 8014d36:	6244      	str	r4, [r0, #36]	; 0x24
 8014d38:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8014d3a:	2301      	movs	r3, #1
 8014d3c:	4628      	mov	r0, r5
 8014d3e:	b002      	add	sp, #8
 8014d40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d44:	f000 b806 	b.w	8014d54 <__strtok_r>
 8014d48:	200002b4 	.word	0x200002b4
 8014d4c:	08017508 	.word	0x08017508
 8014d50:	0801751f 	.word	0x0801751f

08014d54 <__strtok_r>:
 8014d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d56:	b908      	cbnz	r0, 8014d5c <__strtok_r+0x8>
 8014d58:	6810      	ldr	r0, [r2, #0]
 8014d5a:	b188      	cbz	r0, 8014d80 <__strtok_r+0x2c>
 8014d5c:	4604      	mov	r4, r0
 8014d5e:	4620      	mov	r0, r4
 8014d60:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014d64:	460f      	mov	r7, r1
 8014d66:	f817 6b01 	ldrb.w	r6, [r7], #1
 8014d6a:	b91e      	cbnz	r6, 8014d74 <__strtok_r+0x20>
 8014d6c:	b965      	cbnz	r5, 8014d88 <__strtok_r+0x34>
 8014d6e:	6015      	str	r5, [r2, #0]
 8014d70:	4628      	mov	r0, r5
 8014d72:	e005      	b.n	8014d80 <__strtok_r+0x2c>
 8014d74:	42b5      	cmp	r5, r6
 8014d76:	d1f6      	bne.n	8014d66 <__strtok_r+0x12>
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d1f0      	bne.n	8014d5e <__strtok_r+0xa>
 8014d7c:	6014      	str	r4, [r2, #0]
 8014d7e:	7003      	strb	r3, [r0, #0]
 8014d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d82:	461c      	mov	r4, r3
 8014d84:	e00c      	b.n	8014da0 <__strtok_r+0x4c>
 8014d86:	b915      	cbnz	r5, 8014d8e <__strtok_r+0x3a>
 8014d88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014d8c:	460e      	mov	r6, r1
 8014d8e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014d92:	42ab      	cmp	r3, r5
 8014d94:	d1f7      	bne.n	8014d86 <__strtok_r+0x32>
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d0f3      	beq.n	8014d82 <__strtok_r+0x2e>
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8014da0:	6014      	str	r4, [r2, #0]
 8014da2:	e7ed      	b.n	8014d80 <__strtok_r+0x2c>

08014da4 <_strtol_l.constprop.0>:
 8014da4:	2b01      	cmp	r3, #1
 8014da6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014daa:	d001      	beq.n	8014db0 <_strtol_l.constprop.0+0xc>
 8014dac:	2b24      	cmp	r3, #36	; 0x24
 8014dae:	d906      	bls.n	8014dbe <_strtol_l.constprop.0+0x1a>
 8014db0:	f7ff fa1e 	bl	80141f0 <__errno>
 8014db4:	2316      	movs	r3, #22
 8014db6:	6003      	str	r3, [r0, #0]
 8014db8:	2000      	movs	r0, #0
 8014dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014dbe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014ea4 <_strtol_l.constprop.0+0x100>
 8014dc2:	460d      	mov	r5, r1
 8014dc4:	462e      	mov	r6, r5
 8014dc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014dca:	f814 700c 	ldrb.w	r7, [r4, ip]
 8014dce:	f017 0708 	ands.w	r7, r7, #8
 8014dd2:	d1f7      	bne.n	8014dc4 <_strtol_l.constprop.0+0x20>
 8014dd4:	2c2d      	cmp	r4, #45	; 0x2d
 8014dd6:	d132      	bne.n	8014e3e <_strtol_l.constprop.0+0x9a>
 8014dd8:	782c      	ldrb	r4, [r5, #0]
 8014dda:	2701      	movs	r7, #1
 8014ddc:	1cb5      	adds	r5, r6, #2
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d05b      	beq.n	8014e9a <_strtol_l.constprop.0+0xf6>
 8014de2:	2b10      	cmp	r3, #16
 8014de4:	d109      	bne.n	8014dfa <_strtol_l.constprop.0+0x56>
 8014de6:	2c30      	cmp	r4, #48	; 0x30
 8014de8:	d107      	bne.n	8014dfa <_strtol_l.constprop.0+0x56>
 8014dea:	782c      	ldrb	r4, [r5, #0]
 8014dec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014df0:	2c58      	cmp	r4, #88	; 0x58
 8014df2:	d14d      	bne.n	8014e90 <_strtol_l.constprop.0+0xec>
 8014df4:	786c      	ldrb	r4, [r5, #1]
 8014df6:	2310      	movs	r3, #16
 8014df8:	3502      	adds	r5, #2
 8014dfa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014dfe:	f108 38ff 	add.w	r8, r8, #4294967295
 8014e02:	f04f 0c00 	mov.w	ip, #0
 8014e06:	fbb8 f9f3 	udiv	r9, r8, r3
 8014e0a:	4666      	mov	r6, ip
 8014e0c:	fb03 8a19 	mls	sl, r3, r9, r8
 8014e10:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014e14:	f1be 0f09 	cmp.w	lr, #9
 8014e18:	d816      	bhi.n	8014e48 <_strtol_l.constprop.0+0xa4>
 8014e1a:	4674      	mov	r4, lr
 8014e1c:	42a3      	cmp	r3, r4
 8014e1e:	dd24      	ble.n	8014e6a <_strtol_l.constprop.0+0xc6>
 8014e20:	f1bc 0f00 	cmp.w	ip, #0
 8014e24:	db1e      	blt.n	8014e64 <_strtol_l.constprop.0+0xc0>
 8014e26:	45b1      	cmp	r9, r6
 8014e28:	d31c      	bcc.n	8014e64 <_strtol_l.constprop.0+0xc0>
 8014e2a:	d101      	bne.n	8014e30 <_strtol_l.constprop.0+0x8c>
 8014e2c:	45a2      	cmp	sl, r4
 8014e2e:	db19      	blt.n	8014e64 <_strtol_l.constprop.0+0xc0>
 8014e30:	fb06 4603 	mla	r6, r6, r3, r4
 8014e34:	f04f 0c01 	mov.w	ip, #1
 8014e38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014e3c:	e7e8      	b.n	8014e10 <_strtol_l.constprop.0+0x6c>
 8014e3e:	2c2b      	cmp	r4, #43	; 0x2b
 8014e40:	bf04      	itt	eq
 8014e42:	782c      	ldrbeq	r4, [r5, #0]
 8014e44:	1cb5      	addeq	r5, r6, #2
 8014e46:	e7ca      	b.n	8014dde <_strtol_l.constprop.0+0x3a>
 8014e48:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014e4c:	f1be 0f19 	cmp.w	lr, #25
 8014e50:	d801      	bhi.n	8014e56 <_strtol_l.constprop.0+0xb2>
 8014e52:	3c37      	subs	r4, #55	; 0x37
 8014e54:	e7e2      	b.n	8014e1c <_strtol_l.constprop.0+0x78>
 8014e56:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8014e5a:	f1be 0f19 	cmp.w	lr, #25
 8014e5e:	d804      	bhi.n	8014e6a <_strtol_l.constprop.0+0xc6>
 8014e60:	3c57      	subs	r4, #87	; 0x57
 8014e62:	e7db      	b.n	8014e1c <_strtol_l.constprop.0+0x78>
 8014e64:	f04f 3cff 	mov.w	ip, #4294967295
 8014e68:	e7e6      	b.n	8014e38 <_strtol_l.constprop.0+0x94>
 8014e6a:	f1bc 0f00 	cmp.w	ip, #0
 8014e6e:	da05      	bge.n	8014e7c <_strtol_l.constprop.0+0xd8>
 8014e70:	2322      	movs	r3, #34	; 0x22
 8014e72:	6003      	str	r3, [r0, #0]
 8014e74:	4646      	mov	r6, r8
 8014e76:	b942      	cbnz	r2, 8014e8a <_strtol_l.constprop.0+0xe6>
 8014e78:	4630      	mov	r0, r6
 8014e7a:	e79e      	b.n	8014dba <_strtol_l.constprop.0+0x16>
 8014e7c:	b107      	cbz	r7, 8014e80 <_strtol_l.constprop.0+0xdc>
 8014e7e:	4276      	negs	r6, r6
 8014e80:	2a00      	cmp	r2, #0
 8014e82:	d0f9      	beq.n	8014e78 <_strtol_l.constprop.0+0xd4>
 8014e84:	f1bc 0f00 	cmp.w	ip, #0
 8014e88:	d000      	beq.n	8014e8c <_strtol_l.constprop.0+0xe8>
 8014e8a:	1e69      	subs	r1, r5, #1
 8014e8c:	6011      	str	r1, [r2, #0]
 8014e8e:	e7f3      	b.n	8014e78 <_strtol_l.constprop.0+0xd4>
 8014e90:	2430      	movs	r4, #48	; 0x30
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d1b1      	bne.n	8014dfa <_strtol_l.constprop.0+0x56>
 8014e96:	2308      	movs	r3, #8
 8014e98:	e7af      	b.n	8014dfa <_strtol_l.constprop.0+0x56>
 8014e9a:	2c30      	cmp	r4, #48	; 0x30
 8014e9c:	d0a5      	beq.n	8014dea <_strtol_l.constprop.0+0x46>
 8014e9e:	230a      	movs	r3, #10
 8014ea0:	e7ab      	b.n	8014dfa <_strtol_l.constprop.0+0x56>
 8014ea2:	bf00      	nop
 8014ea4:	080175f5 	.word	0x080175f5

08014ea8 <_strtol_r>:
 8014ea8:	f7ff bf7c 	b.w	8014da4 <_strtol_l.constprop.0>

08014eac <strtol>:
 8014eac:	4613      	mov	r3, r2
 8014eae:	460a      	mov	r2, r1
 8014eb0:	4601      	mov	r1, r0
 8014eb2:	4802      	ldr	r0, [pc, #8]	; (8014ebc <strtol+0x10>)
 8014eb4:	6800      	ldr	r0, [r0, #0]
 8014eb6:	f7ff bf75 	b.w	8014da4 <_strtol_l.constprop.0>
 8014eba:	bf00      	nop
 8014ebc:	200002b4 	.word	0x200002b4

08014ec0 <__tzcalc_limits>:
 8014ec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ec4:	4605      	mov	r5, r0
 8014ec6:	f000 fba3 	bl	8015610 <__gettzinfo>
 8014eca:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8014ece:	429d      	cmp	r5, r3
 8014ed0:	f340 8099 	ble.w	8015006 <__tzcalc_limits+0x146>
 8014ed4:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8014ed8:	18ac      	adds	r4, r5, r2
 8014eda:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8014ede:	f240 126d 	movw	r2, #365	; 0x16d
 8014ee2:	10a4      	asrs	r4, r4, #2
 8014ee4:	fb02 4403 	mla	r4, r2, r3, r4
 8014ee8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8014eec:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8014ef0:	fb93 f3f2 	sdiv	r3, r3, r2
 8014ef4:	441c      	add	r4, r3
 8014ef6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8014efa:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8014efe:	fb95 fcf3 	sdiv	ip, r5, r3
 8014f02:	fb03 5c1c 	mls	ip, r3, ip, r5
 8014f06:	186a      	adds	r2, r5, r1
 8014f08:	fabc f68c 	clz	r6, ip
 8014f0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8014f10:	f005 0303 	and.w	r3, r5, #3
 8014f14:	4414      	add	r4, r2
 8014f16:	2264      	movs	r2, #100	; 0x64
 8014f18:	6045      	str	r5, [r0, #4]
 8014f1a:	fb95 f7f2 	sdiv	r7, r5, r2
 8014f1e:	0976      	lsrs	r6, r6, #5
 8014f20:	fb02 5717 	mls	r7, r2, r7, r5
 8014f24:	4601      	mov	r1, r0
 8014f26:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8014f2a:	9300      	str	r3, [sp, #0]
 8014f2c:	f04f 0a07 	mov.w	sl, #7
 8014f30:	7a0d      	ldrb	r5, [r1, #8]
 8014f32:	694b      	ldr	r3, [r1, #20]
 8014f34:	2d4a      	cmp	r5, #74	; 0x4a
 8014f36:	d12d      	bne.n	8014f94 <__tzcalc_limits+0xd4>
 8014f38:	9a00      	ldr	r2, [sp, #0]
 8014f3a:	eb04 0e03 	add.w	lr, r4, r3
 8014f3e:	b902      	cbnz	r2, 8014f42 <__tzcalc_limits+0x82>
 8014f40:	b917      	cbnz	r7, 8014f48 <__tzcalc_limits+0x88>
 8014f42:	f1bc 0f00 	cmp.w	ip, #0
 8014f46:	d123      	bne.n	8014f90 <__tzcalc_limits+0xd0>
 8014f48:	2b3b      	cmp	r3, #59	; 0x3b
 8014f4a:	bfd4      	ite	le
 8014f4c:	2300      	movle	r3, #0
 8014f4e:	2301      	movgt	r3, #1
 8014f50:	4473      	add	r3, lr
 8014f52:	3b01      	subs	r3, #1
 8014f54:	698d      	ldr	r5, [r1, #24]
 8014f56:	4a2d      	ldr	r2, [pc, #180]	; (801500c <__tzcalc_limits+0x14c>)
 8014f58:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8014f5c:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8014f60:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8014f62:	18ed      	adds	r5, r5, r3
 8014f64:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8014f68:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8014f6c:	3128      	adds	r1, #40	; 0x28
 8014f6e:	458b      	cmp	fp, r1
 8014f70:	d1de      	bne.n	8014f30 <__tzcalc_limits+0x70>
 8014f72:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8014f76:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8014f7a:	428c      	cmp	r4, r1
 8014f7c:	eb72 0303 	sbcs.w	r3, r2, r3
 8014f80:	bfb4      	ite	lt
 8014f82:	2301      	movlt	r3, #1
 8014f84:	2300      	movge	r3, #0
 8014f86:	6003      	str	r3, [r0, #0]
 8014f88:	2001      	movs	r0, #1
 8014f8a:	b003      	add	sp, #12
 8014f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f90:	2300      	movs	r3, #0
 8014f92:	e7dd      	b.n	8014f50 <__tzcalc_limits+0x90>
 8014f94:	2d44      	cmp	r5, #68	; 0x44
 8014f96:	d101      	bne.n	8014f9c <__tzcalc_limits+0xdc>
 8014f98:	4423      	add	r3, r4
 8014f9a:	e7db      	b.n	8014f54 <__tzcalc_limits+0x94>
 8014f9c:	9a00      	ldr	r2, [sp, #0]
 8014f9e:	bb62      	cbnz	r2, 8014ffa <__tzcalc_limits+0x13a>
 8014fa0:	2f00      	cmp	r7, #0
 8014fa2:	bf0c      	ite	eq
 8014fa4:	4635      	moveq	r5, r6
 8014fa6:	2501      	movne	r5, #1
 8014fa8:	68ca      	ldr	r2, [r1, #12]
 8014faa:	9201      	str	r2, [sp, #4]
 8014fac:	4a18      	ldr	r2, [pc, #96]	; (8015010 <__tzcalc_limits+0x150>)
 8014fae:	f04f 0930 	mov.w	r9, #48	; 0x30
 8014fb2:	fb09 2505 	mla	r5, r9, r5, r2
 8014fb6:	46a6      	mov	lr, r4
 8014fb8:	f04f 0800 	mov.w	r8, #0
 8014fbc:	3d04      	subs	r5, #4
 8014fbe:	9a01      	ldr	r2, [sp, #4]
 8014fc0:	f108 0801 	add.w	r8, r8, #1
 8014fc4:	4542      	cmp	r2, r8
 8014fc6:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8014fca:	dc18      	bgt.n	8014ffe <__tzcalc_limits+0x13e>
 8014fcc:	f10e 0504 	add.w	r5, lr, #4
 8014fd0:	fb95 f8fa 	sdiv	r8, r5, sl
 8014fd4:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8014fd8:	eba5 0808 	sub.w	r8, r5, r8
 8014fdc:	ebb3 0808 	subs.w	r8, r3, r8
 8014fe0:	690b      	ldr	r3, [r1, #16]
 8014fe2:	f103 33ff 	add.w	r3, r3, #4294967295
 8014fe6:	bf48      	it	mi
 8014fe8:	f108 0807 	addmi.w	r8, r8, #7
 8014fec:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8014ff0:	4443      	add	r3, r8
 8014ff2:	454b      	cmp	r3, r9
 8014ff4:	da05      	bge.n	8015002 <__tzcalc_limits+0x142>
 8014ff6:	4473      	add	r3, lr
 8014ff8:	e7ac      	b.n	8014f54 <__tzcalc_limits+0x94>
 8014ffa:	4635      	mov	r5, r6
 8014ffc:	e7d4      	b.n	8014fa8 <__tzcalc_limits+0xe8>
 8014ffe:	44ce      	add	lr, r9
 8015000:	e7dd      	b.n	8014fbe <__tzcalc_limits+0xfe>
 8015002:	3b07      	subs	r3, #7
 8015004:	e7f5      	b.n	8014ff2 <__tzcalc_limits+0x132>
 8015006:	2000      	movs	r0, #0
 8015008:	e7bf      	b.n	8014f8a <__tzcalc_limits+0xca>
 801500a:	bf00      	nop
 801500c:	00015180 	.word	0x00015180
 8015010:	080176f8 	.word	0x080176f8

08015014 <__tz_lock>:
 8015014:	4801      	ldr	r0, [pc, #4]	; (801501c <__tz_lock+0x8>)
 8015016:	f7ff ba0c 	b.w	8014432 <__retarget_lock_acquire>
 801501a:	bf00      	nop
 801501c:	2000dab0 	.word	0x2000dab0

08015020 <__tz_unlock>:
 8015020:	4801      	ldr	r0, [pc, #4]	; (8015028 <__tz_unlock+0x8>)
 8015022:	f7ff ba08 	b.w	8014436 <__retarget_lock_release>
 8015026:	bf00      	nop
 8015028:	2000dab0 	.word	0x2000dab0

0801502c <_tzset_unlocked>:
 801502c:	4b01      	ldr	r3, [pc, #4]	; (8015034 <_tzset_unlocked+0x8>)
 801502e:	6818      	ldr	r0, [r3, #0]
 8015030:	f000 b802 	b.w	8015038 <_tzset_unlocked_r>
 8015034:	200002b4 	.word	0x200002b4

08015038 <_tzset_unlocked_r>:
 8015038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801503c:	b08d      	sub	sp, #52	; 0x34
 801503e:	4607      	mov	r7, r0
 8015040:	f000 fae6 	bl	8015610 <__gettzinfo>
 8015044:	49b0      	ldr	r1, [pc, #704]	; (8015308 <_tzset_unlocked_r+0x2d0>)
 8015046:	4eb1      	ldr	r6, [pc, #708]	; (801530c <_tzset_unlocked_r+0x2d4>)
 8015048:	4605      	mov	r5, r0
 801504a:	4638      	mov	r0, r7
 801504c:	f000 fad8 	bl	8015600 <_getenv_r>
 8015050:	4604      	mov	r4, r0
 8015052:	b970      	cbnz	r0, 8015072 <_tzset_unlocked_r+0x3a>
 8015054:	4bae      	ldr	r3, [pc, #696]	; (8015310 <_tzset_unlocked_r+0x2d8>)
 8015056:	4aaf      	ldr	r2, [pc, #700]	; (8015314 <_tzset_unlocked_r+0x2dc>)
 8015058:	6018      	str	r0, [r3, #0]
 801505a:	4baf      	ldr	r3, [pc, #700]	; (8015318 <_tzset_unlocked_r+0x2e0>)
 801505c:	6018      	str	r0, [r3, #0]
 801505e:	4baf      	ldr	r3, [pc, #700]	; (801531c <_tzset_unlocked_r+0x2e4>)
 8015060:	6830      	ldr	r0, [r6, #0]
 8015062:	e9c3 2200 	strd	r2, r2, [r3]
 8015066:	f7ff f9f1 	bl	801444c <free>
 801506a:	6034      	str	r4, [r6, #0]
 801506c:	b00d      	add	sp, #52	; 0x34
 801506e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015072:	6831      	ldr	r1, [r6, #0]
 8015074:	2900      	cmp	r1, #0
 8015076:	d162      	bne.n	801513e <_tzset_unlocked_r+0x106>
 8015078:	6830      	ldr	r0, [r6, #0]
 801507a:	f7ff f9e7 	bl	801444c <free>
 801507e:	4620      	mov	r0, r4
 8015080:	f7eb f8b0 	bl	80001e4 <strlen>
 8015084:	1c41      	adds	r1, r0, #1
 8015086:	4638      	mov	r0, r7
 8015088:	f7ff fcdc 	bl	8014a44 <_malloc_r>
 801508c:	6030      	str	r0, [r6, #0]
 801508e:	2800      	cmp	r0, #0
 8015090:	d15a      	bne.n	8015148 <_tzset_unlocked_r+0x110>
 8015092:	7823      	ldrb	r3, [r4, #0]
 8015094:	4aa2      	ldr	r2, [pc, #648]	; (8015320 <_tzset_unlocked_r+0x2e8>)
 8015096:	49a3      	ldr	r1, [pc, #652]	; (8015324 <_tzset_unlocked_r+0x2ec>)
 8015098:	2b3a      	cmp	r3, #58	; 0x3a
 801509a:	bf08      	it	eq
 801509c:	3401      	addeq	r4, #1
 801509e:	ae0a      	add	r6, sp, #40	; 0x28
 80150a0:	4633      	mov	r3, r6
 80150a2:	4620      	mov	r0, r4
 80150a4:	f000 ff32 	bl	8015f0c <siscanf>
 80150a8:	2800      	cmp	r0, #0
 80150aa:	dddf      	ble.n	801506c <_tzset_unlocked_r+0x34>
 80150ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150ae:	18e7      	adds	r7, r4, r3
 80150b0:	5ce3      	ldrb	r3, [r4, r3]
 80150b2:	2b2d      	cmp	r3, #45	; 0x2d
 80150b4:	d14c      	bne.n	8015150 <_tzset_unlocked_r+0x118>
 80150b6:	3701      	adds	r7, #1
 80150b8:	f04f 38ff 	mov.w	r8, #4294967295
 80150bc:	f10d 0a20 	add.w	sl, sp, #32
 80150c0:	f10d 0b1e 	add.w	fp, sp, #30
 80150c4:	2400      	movs	r4, #0
 80150c6:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80150ca:	4997      	ldr	r1, [pc, #604]	; (8015328 <_tzset_unlocked_r+0x2f0>)
 80150cc:	9603      	str	r6, [sp, #12]
 80150ce:	f8cd b000 	str.w	fp, [sp]
 80150d2:	4633      	mov	r3, r6
 80150d4:	aa07      	add	r2, sp, #28
 80150d6:	4638      	mov	r0, r7
 80150d8:	f8ad 401e 	strh.w	r4, [sp, #30]
 80150dc:	f8ad 4020 	strh.w	r4, [sp, #32]
 80150e0:	f000 ff14 	bl	8015f0c <siscanf>
 80150e4:	42a0      	cmp	r0, r4
 80150e6:	ddc1      	ble.n	801506c <_tzset_unlocked_r+0x34>
 80150e8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80150ec:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80150f0:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8015334 <_tzset_unlocked_r+0x2fc>
 80150f4:	213c      	movs	r1, #60	; 0x3c
 80150f6:	fb01 3302 	mla	r3, r1, r2, r3
 80150fa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80150fe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8015102:	fb01 3302 	mla	r3, r1, r2, r3
 8015106:	fb08 f303 	mul.w	r3, r8, r3
 801510a:	f8df 8210 	ldr.w	r8, [pc, #528]	; 801531c <_tzset_unlocked_r+0x2e4>
 801510e:	62ab      	str	r3, [r5, #40]	; 0x28
 8015110:	4b83      	ldr	r3, [pc, #524]	; (8015320 <_tzset_unlocked_r+0x2e8>)
 8015112:	f8c8 3000 	str.w	r3, [r8]
 8015116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015118:	4982      	ldr	r1, [pc, #520]	; (8015324 <_tzset_unlocked_r+0x2ec>)
 801511a:	441f      	add	r7, r3
 801511c:	464a      	mov	r2, r9
 801511e:	4633      	mov	r3, r6
 8015120:	4638      	mov	r0, r7
 8015122:	f000 fef3 	bl	8015f0c <siscanf>
 8015126:	42a0      	cmp	r0, r4
 8015128:	dc18      	bgt.n	801515c <_tzset_unlocked_r+0x124>
 801512a:	f8d8 3000 	ldr.w	r3, [r8]
 801512e:	f8c8 3004 	str.w	r3, [r8, #4]
 8015132:	4b77      	ldr	r3, [pc, #476]	; (8015310 <_tzset_unlocked_r+0x2d8>)
 8015134:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8015136:	601a      	str	r2, [r3, #0]
 8015138:	4b77      	ldr	r3, [pc, #476]	; (8015318 <_tzset_unlocked_r+0x2e0>)
 801513a:	601c      	str	r4, [r3, #0]
 801513c:	e796      	b.n	801506c <_tzset_unlocked_r+0x34>
 801513e:	f7eb f847 	bl	80001d0 <strcmp>
 8015142:	2800      	cmp	r0, #0
 8015144:	d198      	bne.n	8015078 <_tzset_unlocked_r+0x40>
 8015146:	e791      	b.n	801506c <_tzset_unlocked_r+0x34>
 8015148:	4621      	mov	r1, r4
 801514a:	f000 ff0b 	bl	8015f64 <strcpy>
 801514e:	e7a0      	b.n	8015092 <_tzset_unlocked_r+0x5a>
 8015150:	2b2b      	cmp	r3, #43	; 0x2b
 8015152:	bf08      	it	eq
 8015154:	3701      	addeq	r7, #1
 8015156:	f04f 0801 	mov.w	r8, #1
 801515a:	e7af      	b.n	80150bc <_tzset_unlocked_r+0x84>
 801515c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801515e:	f8c8 9004 	str.w	r9, [r8, #4]
 8015162:	18fc      	adds	r4, r7, r3
 8015164:	5cfb      	ldrb	r3, [r7, r3]
 8015166:	2b2d      	cmp	r3, #45	; 0x2d
 8015168:	f040 808b 	bne.w	8015282 <_tzset_unlocked_r+0x24a>
 801516c:	3401      	adds	r4, #1
 801516e:	f04f 37ff 	mov.w	r7, #4294967295
 8015172:	2300      	movs	r3, #0
 8015174:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015178:	f8ad 301e 	strh.w	r3, [sp, #30]
 801517c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015180:	930a      	str	r3, [sp, #40]	; 0x28
 8015182:	e9cd a602 	strd	sl, r6, [sp, #8]
 8015186:	e9cd b600 	strd	fp, r6, [sp]
 801518a:	4967      	ldr	r1, [pc, #412]	; (8015328 <_tzset_unlocked_r+0x2f0>)
 801518c:	4633      	mov	r3, r6
 801518e:	aa07      	add	r2, sp, #28
 8015190:	4620      	mov	r0, r4
 8015192:	f000 febb 	bl	8015f0c <siscanf>
 8015196:	2800      	cmp	r0, #0
 8015198:	dc78      	bgt.n	801528c <_tzset_unlocked_r+0x254>
 801519a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801519c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80151a0:	652b      	str	r3, [r5, #80]	; 0x50
 80151a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151a4:	462f      	mov	r7, r5
 80151a6:	441c      	add	r4, r3
 80151a8:	f04f 0900 	mov.w	r9, #0
 80151ac:	7823      	ldrb	r3, [r4, #0]
 80151ae:	2b2c      	cmp	r3, #44	; 0x2c
 80151b0:	bf08      	it	eq
 80151b2:	3401      	addeq	r4, #1
 80151b4:	f894 8000 	ldrb.w	r8, [r4]
 80151b8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80151bc:	d178      	bne.n	80152b0 <_tzset_unlocked_r+0x278>
 80151be:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80151c2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80151c6:	ab09      	add	r3, sp, #36	; 0x24
 80151c8:	9300      	str	r3, [sp, #0]
 80151ca:	4958      	ldr	r1, [pc, #352]	; (801532c <_tzset_unlocked_r+0x2f4>)
 80151cc:	9603      	str	r6, [sp, #12]
 80151ce:	4633      	mov	r3, r6
 80151d0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80151d4:	4620      	mov	r0, r4
 80151d6:	f000 fe99 	bl	8015f0c <siscanf>
 80151da:	2803      	cmp	r0, #3
 80151dc:	f47f af46 	bne.w	801506c <_tzset_unlocked_r+0x34>
 80151e0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80151e4:	1e4b      	subs	r3, r1, #1
 80151e6:	2b0b      	cmp	r3, #11
 80151e8:	f63f af40 	bhi.w	801506c <_tzset_unlocked_r+0x34>
 80151ec:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80151f0:	1e53      	subs	r3, r2, #1
 80151f2:	2b04      	cmp	r3, #4
 80151f4:	f63f af3a 	bhi.w	801506c <_tzset_unlocked_r+0x34>
 80151f8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80151fc:	2b06      	cmp	r3, #6
 80151fe:	f63f af35 	bhi.w	801506c <_tzset_unlocked_r+0x34>
 8015202:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8015206:	f887 8008 	strb.w	r8, [r7, #8]
 801520a:	617b      	str	r3, [r7, #20]
 801520c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801520e:	eb04 0803 	add.w	r8, r4, r3
 8015212:	2302      	movs	r3, #2
 8015214:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015218:	2300      	movs	r3, #0
 801521a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801521e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015222:	930a      	str	r3, [sp, #40]	; 0x28
 8015224:	f898 3000 	ldrb.w	r3, [r8]
 8015228:	2b2f      	cmp	r3, #47	; 0x2f
 801522a:	d109      	bne.n	8015240 <_tzset_unlocked_r+0x208>
 801522c:	e9cd a602 	strd	sl, r6, [sp, #8]
 8015230:	e9cd b600 	strd	fp, r6, [sp]
 8015234:	493e      	ldr	r1, [pc, #248]	; (8015330 <_tzset_unlocked_r+0x2f8>)
 8015236:	4633      	mov	r3, r6
 8015238:	aa07      	add	r2, sp, #28
 801523a:	4640      	mov	r0, r8
 801523c:	f000 fe66 	bl	8015f0c <siscanf>
 8015240:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8015244:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015248:	213c      	movs	r1, #60	; 0x3c
 801524a:	fb01 3302 	mla	r3, r1, r2, r3
 801524e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8015252:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8015256:	fb01 3302 	mla	r3, r1, r2, r3
 801525a:	61bb      	str	r3, [r7, #24]
 801525c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801525e:	3728      	adds	r7, #40	; 0x28
 8015260:	4444      	add	r4, r8
 8015262:	f1b9 0f00 	cmp.w	r9, #0
 8015266:	d020      	beq.n	80152aa <_tzset_unlocked_r+0x272>
 8015268:	6868      	ldr	r0, [r5, #4]
 801526a:	f7ff fe29 	bl	8014ec0 <__tzcalc_limits>
 801526e:	4b28      	ldr	r3, [pc, #160]	; (8015310 <_tzset_unlocked_r+0x2d8>)
 8015270:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8015272:	601a      	str	r2, [r3, #0]
 8015274:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8015276:	1a9b      	subs	r3, r3, r2
 8015278:	4a27      	ldr	r2, [pc, #156]	; (8015318 <_tzset_unlocked_r+0x2e0>)
 801527a:	bf18      	it	ne
 801527c:	2301      	movne	r3, #1
 801527e:	6013      	str	r3, [r2, #0]
 8015280:	e6f4      	b.n	801506c <_tzset_unlocked_r+0x34>
 8015282:	2b2b      	cmp	r3, #43	; 0x2b
 8015284:	bf08      	it	eq
 8015286:	3401      	addeq	r4, #1
 8015288:	2701      	movs	r7, #1
 801528a:	e772      	b.n	8015172 <_tzset_unlocked_r+0x13a>
 801528c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8015290:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015294:	213c      	movs	r1, #60	; 0x3c
 8015296:	fb01 3302 	mla	r3, r1, r2, r3
 801529a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801529e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80152a2:	fb01 3302 	mla	r3, r1, r2, r3
 80152a6:	437b      	muls	r3, r7
 80152a8:	e77a      	b.n	80151a0 <_tzset_unlocked_r+0x168>
 80152aa:	f04f 0901 	mov.w	r9, #1
 80152ae:	e77d      	b.n	80151ac <_tzset_unlocked_r+0x174>
 80152b0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80152b4:	bf06      	itte	eq
 80152b6:	3401      	addeq	r4, #1
 80152b8:	4643      	moveq	r3, r8
 80152ba:	2344      	movne	r3, #68	; 0x44
 80152bc:	220a      	movs	r2, #10
 80152be:	a90b      	add	r1, sp, #44	; 0x2c
 80152c0:	4620      	mov	r0, r4
 80152c2:	9305      	str	r3, [sp, #20]
 80152c4:	f000 fede 	bl	8016084 <strtoul>
 80152c8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80152cc:	9b05      	ldr	r3, [sp, #20]
 80152ce:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80152d2:	45a0      	cmp	r8, r4
 80152d4:	d114      	bne.n	8015300 <_tzset_unlocked_r+0x2c8>
 80152d6:	234d      	movs	r3, #77	; 0x4d
 80152d8:	f1b9 0f00 	cmp.w	r9, #0
 80152dc:	d107      	bne.n	80152ee <_tzset_unlocked_r+0x2b6>
 80152de:	722b      	strb	r3, [r5, #8]
 80152e0:	2103      	movs	r1, #3
 80152e2:	2302      	movs	r3, #2
 80152e4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80152e8:	f8c5 9014 	str.w	r9, [r5, #20]
 80152ec:	e791      	b.n	8015212 <_tzset_unlocked_r+0x1da>
 80152ee:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80152f2:	220b      	movs	r2, #11
 80152f4:	2301      	movs	r3, #1
 80152f6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80152fa:	2300      	movs	r3, #0
 80152fc:	63eb      	str	r3, [r5, #60]	; 0x3c
 80152fe:	e788      	b.n	8015212 <_tzset_unlocked_r+0x1da>
 8015300:	b280      	uxth	r0, r0
 8015302:	723b      	strb	r3, [r7, #8]
 8015304:	6178      	str	r0, [r7, #20]
 8015306:	e784      	b.n	8015212 <_tzset_unlocked_r+0x1da>
 8015308:	0801757c 	.word	0x0801757c
 801530c:	2000dad8 	.word	0x2000dad8
 8015310:	2000dae0 	.word	0x2000dae0
 8015314:	0801757f 	.word	0x0801757f
 8015318:	2000dadc 	.word	0x2000dadc
 801531c:	20000318 	.word	0x20000318
 8015320:	2000dacb 	.word	0x2000dacb
 8015324:	08017583 	.word	0x08017583
 8015328:	080175a6 	.word	0x080175a6
 801532c:	08017592 	.word	0x08017592
 8015330:	080175a5 	.word	0x080175a5
 8015334:	2000dac0 	.word	0x2000dac0

08015338 <_write_r>:
 8015338:	b538      	push	{r3, r4, r5, lr}
 801533a:	4d07      	ldr	r5, [pc, #28]	; (8015358 <_write_r+0x20>)
 801533c:	4604      	mov	r4, r0
 801533e:	4608      	mov	r0, r1
 8015340:	4611      	mov	r1, r2
 8015342:	2200      	movs	r2, #0
 8015344:	602a      	str	r2, [r5, #0]
 8015346:	461a      	mov	r2, r3
 8015348:	f7ed fbb1 	bl	8002aae <_write>
 801534c:	1c43      	adds	r3, r0, #1
 801534e:	d102      	bne.n	8015356 <_write_r+0x1e>
 8015350:	682b      	ldr	r3, [r5, #0]
 8015352:	b103      	cbz	r3, 8015356 <_write_r+0x1e>
 8015354:	6023      	str	r3, [r4, #0]
 8015356:	bd38      	pop	{r3, r4, r5, pc}
 8015358:	2000dabc 	.word	0x2000dabc

0801535c <__assert_func>:
 801535c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801535e:	4614      	mov	r4, r2
 8015360:	461a      	mov	r2, r3
 8015362:	4b09      	ldr	r3, [pc, #36]	; (8015388 <__assert_func+0x2c>)
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	4605      	mov	r5, r0
 8015368:	68d8      	ldr	r0, [r3, #12]
 801536a:	b14c      	cbz	r4, 8015380 <__assert_func+0x24>
 801536c:	4b07      	ldr	r3, [pc, #28]	; (801538c <__assert_func+0x30>)
 801536e:	9100      	str	r1, [sp, #0]
 8015370:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015374:	4906      	ldr	r1, [pc, #24]	; (8015390 <__assert_func+0x34>)
 8015376:	462b      	mov	r3, r5
 8015378:	f000 f8f4 	bl	8015564 <fiprintf>
 801537c:	f000 ff4c 	bl	8016218 <abort>
 8015380:	4b04      	ldr	r3, [pc, #16]	; (8015394 <__assert_func+0x38>)
 8015382:	461c      	mov	r4, r3
 8015384:	e7f3      	b.n	801536e <__assert_func+0x12>
 8015386:	bf00      	nop
 8015388:	200002b4 	.word	0x200002b4
 801538c:	080175b8 	.word	0x080175b8
 8015390:	080175c5 	.word	0x080175c5
 8015394:	080175f3 	.word	0x080175f3

08015398 <_close_r>:
 8015398:	b538      	push	{r3, r4, r5, lr}
 801539a:	4d06      	ldr	r5, [pc, #24]	; (80153b4 <_close_r+0x1c>)
 801539c:	2300      	movs	r3, #0
 801539e:	4604      	mov	r4, r0
 80153a0:	4608      	mov	r0, r1
 80153a2:	602b      	str	r3, [r5, #0]
 80153a4:	f7ed fb9f 	bl	8002ae6 <_close>
 80153a8:	1c43      	adds	r3, r0, #1
 80153aa:	d102      	bne.n	80153b2 <_close_r+0x1a>
 80153ac:	682b      	ldr	r3, [r5, #0]
 80153ae:	b103      	cbz	r3, 80153b2 <_close_r+0x1a>
 80153b0:	6023      	str	r3, [r4, #0]
 80153b2:	bd38      	pop	{r3, r4, r5, pc}
 80153b4:	2000dabc 	.word	0x2000dabc

080153b8 <div>:
 80153b8:	2900      	cmp	r1, #0
 80153ba:	b510      	push	{r4, lr}
 80153bc:	fb91 f4f2 	sdiv	r4, r1, r2
 80153c0:	fb02 1314 	mls	r3, r2, r4, r1
 80153c4:	db06      	blt.n	80153d4 <div+0x1c>
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	da01      	bge.n	80153ce <div+0x16>
 80153ca:	3401      	adds	r4, #1
 80153cc:	1a9b      	subs	r3, r3, r2
 80153ce:	e9c0 4300 	strd	r4, r3, [r0]
 80153d2:	bd10      	pop	{r4, pc}
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	bfc4      	itt	gt
 80153d8:	f104 34ff 	addgt.w	r4, r4, #4294967295
 80153dc:	189b      	addgt	r3, r3, r2
 80153de:	e7f6      	b.n	80153ce <div+0x16>

080153e0 <__sflush_r>:
 80153e0:	898a      	ldrh	r2, [r1, #12]
 80153e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153e6:	4605      	mov	r5, r0
 80153e8:	0710      	lsls	r0, r2, #28
 80153ea:	460c      	mov	r4, r1
 80153ec:	d458      	bmi.n	80154a0 <__sflush_r+0xc0>
 80153ee:	684b      	ldr	r3, [r1, #4]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	dc05      	bgt.n	8015400 <__sflush_r+0x20>
 80153f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	dc02      	bgt.n	8015400 <__sflush_r+0x20>
 80153fa:	2000      	movs	r0, #0
 80153fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015400:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015402:	2e00      	cmp	r6, #0
 8015404:	d0f9      	beq.n	80153fa <__sflush_r+0x1a>
 8015406:	2300      	movs	r3, #0
 8015408:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801540c:	682f      	ldr	r7, [r5, #0]
 801540e:	602b      	str	r3, [r5, #0]
 8015410:	d032      	beq.n	8015478 <__sflush_r+0x98>
 8015412:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015414:	89a3      	ldrh	r3, [r4, #12]
 8015416:	075a      	lsls	r2, r3, #29
 8015418:	d505      	bpl.n	8015426 <__sflush_r+0x46>
 801541a:	6863      	ldr	r3, [r4, #4]
 801541c:	1ac0      	subs	r0, r0, r3
 801541e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015420:	b10b      	cbz	r3, 8015426 <__sflush_r+0x46>
 8015422:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015424:	1ac0      	subs	r0, r0, r3
 8015426:	2300      	movs	r3, #0
 8015428:	4602      	mov	r2, r0
 801542a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801542c:	6a21      	ldr	r1, [r4, #32]
 801542e:	4628      	mov	r0, r5
 8015430:	47b0      	blx	r6
 8015432:	1c43      	adds	r3, r0, #1
 8015434:	89a3      	ldrh	r3, [r4, #12]
 8015436:	d106      	bne.n	8015446 <__sflush_r+0x66>
 8015438:	6829      	ldr	r1, [r5, #0]
 801543a:	291d      	cmp	r1, #29
 801543c:	d82c      	bhi.n	8015498 <__sflush_r+0xb8>
 801543e:	4a2a      	ldr	r2, [pc, #168]	; (80154e8 <__sflush_r+0x108>)
 8015440:	40ca      	lsrs	r2, r1
 8015442:	07d6      	lsls	r6, r2, #31
 8015444:	d528      	bpl.n	8015498 <__sflush_r+0xb8>
 8015446:	2200      	movs	r2, #0
 8015448:	6062      	str	r2, [r4, #4]
 801544a:	04d9      	lsls	r1, r3, #19
 801544c:	6922      	ldr	r2, [r4, #16]
 801544e:	6022      	str	r2, [r4, #0]
 8015450:	d504      	bpl.n	801545c <__sflush_r+0x7c>
 8015452:	1c42      	adds	r2, r0, #1
 8015454:	d101      	bne.n	801545a <__sflush_r+0x7a>
 8015456:	682b      	ldr	r3, [r5, #0]
 8015458:	b903      	cbnz	r3, 801545c <__sflush_r+0x7c>
 801545a:	6560      	str	r0, [r4, #84]	; 0x54
 801545c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801545e:	602f      	str	r7, [r5, #0]
 8015460:	2900      	cmp	r1, #0
 8015462:	d0ca      	beq.n	80153fa <__sflush_r+0x1a>
 8015464:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015468:	4299      	cmp	r1, r3
 801546a:	d002      	beq.n	8015472 <__sflush_r+0x92>
 801546c:	4628      	mov	r0, r5
 801546e:	f7ff fa7d 	bl	801496c <_free_r>
 8015472:	2000      	movs	r0, #0
 8015474:	6360      	str	r0, [r4, #52]	; 0x34
 8015476:	e7c1      	b.n	80153fc <__sflush_r+0x1c>
 8015478:	6a21      	ldr	r1, [r4, #32]
 801547a:	2301      	movs	r3, #1
 801547c:	4628      	mov	r0, r5
 801547e:	47b0      	blx	r6
 8015480:	1c41      	adds	r1, r0, #1
 8015482:	d1c7      	bne.n	8015414 <__sflush_r+0x34>
 8015484:	682b      	ldr	r3, [r5, #0]
 8015486:	2b00      	cmp	r3, #0
 8015488:	d0c4      	beq.n	8015414 <__sflush_r+0x34>
 801548a:	2b1d      	cmp	r3, #29
 801548c:	d001      	beq.n	8015492 <__sflush_r+0xb2>
 801548e:	2b16      	cmp	r3, #22
 8015490:	d101      	bne.n	8015496 <__sflush_r+0xb6>
 8015492:	602f      	str	r7, [r5, #0]
 8015494:	e7b1      	b.n	80153fa <__sflush_r+0x1a>
 8015496:	89a3      	ldrh	r3, [r4, #12]
 8015498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801549c:	81a3      	strh	r3, [r4, #12]
 801549e:	e7ad      	b.n	80153fc <__sflush_r+0x1c>
 80154a0:	690f      	ldr	r7, [r1, #16]
 80154a2:	2f00      	cmp	r7, #0
 80154a4:	d0a9      	beq.n	80153fa <__sflush_r+0x1a>
 80154a6:	0793      	lsls	r3, r2, #30
 80154a8:	680e      	ldr	r6, [r1, #0]
 80154aa:	bf08      	it	eq
 80154ac:	694b      	ldreq	r3, [r1, #20]
 80154ae:	600f      	str	r7, [r1, #0]
 80154b0:	bf18      	it	ne
 80154b2:	2300      	movne	r3, #0
 80154b4:	eba6 0807 	sub.w	r8, r6, r7
 80154b8:	608b      	str	r3, [r1, #8]
 80154ba:	f1b8 0f00 	cmp.w	r8, #0
 80154be:	dd9c      	ble.n	80153fa <__sflush_r+0x1a>
 80154c0:	6a21      	ldr	r1, [r4, #32]
 80154c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80154c4:	4643      	mov	r3, r8
 80154c6:	463a      	mov	r2, r7
 80154c8:	4628      	mov	r0, r5
 80154ca:	47b0      	blx	r6
 80154cc:	2800      	cmp	r0, #0
 80154ce:	dc06      	bgt.n	80154de <__sflush_r+0xfe>
 80154d0:	89a3      	ldrh	r3, [r4, #12]
 80154d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80154d6:	81a3      	strh	r3, [r4, #12]
 80154d8:	f04f 30ff 	mov.w	r0, #4294967295
 80154dc:	e78e      	b.n	80153fc <__sflush_r+0x1c>
 80154de:	4407      	add	r7, r0
 80154e0:	eba8 0800 	sub.w	r8, r8, r0
 80154e4:	e7e9      	b.n	80154ba <__sflush_r+0xda>
 80154e6:	bf00      	nop
 80154e8:	20400001 	.word	0x20400001

080154ec <_fflush_r>:
 80154ec:	b538      	push	{r3, r4, r5, lr}
 80154ee:	690b      	ldr	r3, [r1, #16]
 80154f0:	4605      	mov	r5, r0
 80154f2:	460c      	mov	r4, r1
 80154f4:	b913      	cbnz	r3, 80154fc <_fflush_r+0x10>
 80154f6:	2500      	movs	r5, #0
 80154f8:	4628      	mov	r0, r5
 80154fa:	bd38      	pop	{r3, r4, r5, pc}
 80154fc:	b118      	cbz	r0, 8015506 <_fflush_r+0x1a>
 80154fe:	6983      	ldr	r3, [r0, #24]
 8015500:	b90b      	cbnz	r3, 8015506 <_fflush_r+0x1a>
 8015502:	f7fe fed3 	bl	80142ac <__sinit>
 8015506:	4b14      	ldr	r3, [pc, #80]	; (8015558 <_fflush_r+0x6c>)
 8015508:	429c      	cmp	r4, r3
 801550a:	d11b      	bne.n	8015544 <_fflush_r+0x58>
 801550c:	686c      	ldr	r4, [r5, #4]
 801550e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d0ef      	beq.n	80154f6 <_fflush_r+0xa>
 8015516:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015518:	07d0      	lsls	r0, r2, #31
 801551a:	d404      	bmi.n	8015526 <_fflush_r+0x3a>
 801551c:	0599      	lsls	r1, r3, #22
 801551e:	d402      	bmi.n	8015526 <_fflush_r+0x3a>
 8015520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015522:	f7fe ff87 	bl	8014434 <__retarget_lock_acquire_recursive>
 8015526:	4628      	mov	r0, r5
 8015528:	4621      	mov	r1, r4
 801552a:	f7ff ff59 	bl	80153e0 <__sflush_r>
 801552e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015530:	07da      	lsls	r2, r3, #31
 8015532:	4605      	mov	r5, r0
 8015534:	d4e0      	bmi.n	80154f8 <_fflush_r+0xc>
 8015536:	89a3      	ldrh	r3, [r4, #12]
 8015538:	059b      	lsls	r3, r3, #22
 801553a:	d4dd      	bmi.n	80154f8 <_fflush_r+0xc>
 801553c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801553e:	f7fe ff7b 	bl	8014438 <__retarget_lock_release_recursive>
 8015542:	e7d9      	b.n	80154f8 <_fflush_r+0xc>
 8015544:	4b05      	ldr	r3, [pc, #20]	; (801555c <_fflush_r+0x70>)
 8015546:	429c      	cmp	r4, r3
 8015548:	d101      	bne.n	801554e <_fflush_r+0x62>
 801554a:	68ac      	ldr	r4, [r5, #8]
 801554c:	e7df      	b.n	801550e <_fflush_r+0x22>
 801554e:	4b04      	ldr	r3, [pc, #16]	; (8015560 <_fflush_r+0x74>)
 8015550:	429c      	cmp	r4, r3
 8015552:	bf08      	it	eq
 8015554:	68ec      	ldreq	r4, [r5, #12]
 8015556:	e7da      	b.n	801550e <_fflush_r+0x22>
 8015558:	08017464 	.word	0x08017464
 801555c:	08017484 	.word	0x08017484
 8015560:	08017444 	.word	0x08017444

08015564 <fiprintf>:
 8015564:	b40e      	push	{r1, r2, r3}
 8015566:	b503      	push	{r0, r1, lr}
 8015568:	4601      	mov	r1, r0
 801556a:	ab03      	add	r3, sp, #12
 801556c:	4805      	ldr	r0, [pc, #20]	; (8015584 <fiprintf+0x20>)
 801556e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015572:	6800      	ldr	r0, [r0, #0]
 8015574:	9301      	str	r3, [sp, #4]
 8015576:	f000 f9f3 	bl	8015960 <_vfiprintf_r>
 801557a:	b002      	add	sp, #8
 801557c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015580:	b003      	add	sp, #12
 8015582:	4770      	bx	lr
 8015584:	200002b4 	.word	0x200002b4

08015588 <_findenv_r>:
 8015588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801558c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80155fc <_findenv_r+0x74>
 8015590:	4607      	mov	r7, r0
 8015592:	4689      	mov	r9, r1
 8015594:	4616      	mov	r6, r2
 8015596:	f000 fe47 	bl	8016228 <__env_lock>
 801559a:	f8da 4000 	ldr.w	r4, [sl]
 801559e:	b134      	cbz	r4, 80155ae <_findenv_r+0x26>
 80155a0:	464b      	mov	r3, r9
 80155a2:	4698      	mov	r8, r3
 80155a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80155a8:	b13a      	cbz	r2, 80155ba <_findenv_r+0x32>
 80155aa:	2a3d      	cmp	r2, #61	; 0x3d
 80155ac:	d1f9      	bne.n	80155a2 <_findenv_r+0x1a>
 80155ae:	4638      	mov	r0, r7
 80155b0:	f000 fe40 	bl	8016234 <__env_unlock>
 80155b4:	2000      	movs	r0, #0
 80155b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155ba:	eba8 0809 	sub.w	r8, r8, r9
 80155be:	46a3      	mov	fp, r4
 80155c0:	f854 0b04 	ldr.w	r0, [r4], #4
 80155c4:	2800      	cmp	r0, #0
 80155c6:	d0f2      	beq.n	80155ae <_findenv_r+0x26>
 80155c8:	4642      	mov	r2, r8
 80155ca:	4649      	mov	r1, r9
 80155cc:	f000 fcd2 	bl	8015f74 <strncmp>
 80155d0:	2800      	cmp	r0, #0
 80155d2:	d1f4      	bne.n	80155be <_findenv_r+0x36>
 80155d4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80155d8:	eb03 0508 	add.w	r5, r3, r8
 80155dc:	f813 3008 	ldrb.w	r3, [r3, r8]
 80155e0:	2b3d      	cmp	r3, #61	; 0x3d
 80155e2:	d1ec      	bne.n	80155be <_findenv_r+0x36>
 80155e4:	f8da 3000 	ldr.w	r3, [sl]
 80155e8:	ebab 0303 	sub.w	r3, fp, r3
 80155ec:	109b      	asrs	r3, r3, #2
 80155ee:	4638      	mov	r0, r7
 80155f0:	6033      	str	r3, [r6, #0]
 80155f2:	f000 fe1f 	bl	8016234 <__env_unlock>
 80155f6:	1c68      	adds	r0, r5, #1
 80155f8:	e7dd      	b.n	80155b6 <_findenv_r+0x2e>
 80155fa:	bf00      	nop
 80155fc:	20000230 	.word	0x20000230

08015600 <_getenv_r>:
 8015600:	b507      	push	{r0, r1, r2, lr}
 8015602:	aa01      	add	r2, sp, #4
 8015604:	f7ff ffc0 	bl	8015588 <_findenv_r>
 8015608:	b003      	add	sp, #12
 801560a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015610 <__gettzinfo>:
 8015610:	4800      	ldr	r0, [pc, #0]	; (8015614 <__gettzinfo+0x4>)
 8015612:	4770      	bx	lr
 8015614:	20000320 	.word	0x20000320

08015618 <_lseek_r>:
 8015618:	b538      	push	{r3, r4, r5, lr}
 801561a:	4d07      	ldr	r5, [pc, #28]	; (8015638 <_lseek_r+0x20>)
 801561c:	4604      	mov	r4, r0
 801561e:	4608      	mov	r0, r1
 8015620:	4611      	mov	r1, r2
 8015622:	2200      	movs	r2, #0
 8015624:	602a      	str	r2, [r5, #0]
 8015626:	461a      	mov	r2, r3
 8015628:	f7ed fa84 	bl	8002b34 <_lseek>
 801562c:	1c43      	adds	r3, r0, #1
 801562e:	d102      	bne.n	8015636 <_lseek_r+0x1e>
 8015630:	682b      	ldr	r3, [r5, #0]
 8015632:	b103      	cbz	r3, 8015636 <_lseek_r+0x1e>
 8015634:	6023      	str	r3, [r4, #0]
 8015636:	bd38      	pop	{r3, r4, r5, pc}
 8015638:	2000dabc 	.word	0x2000dabc

0801563c <__malloc_lock>:
 801563c:	4801      	ldr	r0, [pc, #4]	; (8015644 <__malloc_lock+0x8>)
 801563e:	f7fe bef9 	b.w	8014434 <__retarget_lock_acquire_recursive>
 8015642:	bf00      	nop
 8015644:	2000daad 	.word	0x2000daad

08015648 <__malloc_unlock>:
 8015648:	4801      	ldr	r0, [pc, #4]	; (8015650 <__malloc_unlock+0x8>)
 801564a:	f7fe bef5 	b.w	8014438 <__retarget_lock_release_recursive>
 801564e:	bf00      	nop
 8015650:	2000daad 	.word	0x2000daad

08015654 <__ssputs_r>:
 8015654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015658:	688e      	ldr	r6, [r1, #8]
 801565a:	429e      	cmp	r6, r3
 801565c:	4682      	mov	sl, r0
 801565e:	460c      	mov	r4, r1
 8015660:	4690      	mov	r8, r2
 8015662:	461f      	mov	r7, r3
 8015664:	d838      	bhi.n	80156d8 <__ssputs_r+0x84>
 8015666:	898a      	ldrh	r2, [r1, #12]
 8015668:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801566c:	d032      	beq.n	80156d4 <__ssputs_r+0x80>
 801566e:	6825      	ldr	r5, [r4, #0]
 8015670:	6909      	ldr	r1, [r1, #16]
 8015672:	eba5 0901 	sub.w	r9, r5, r1
 8015676:	6965      	ldr	r5, [r4, #20]
 8015678:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801567c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015680:	3301      	adds	r3, #1
 8015682:	444b      	add	r3, r9
 8015684:	106d      	asrs	r5, r5, #1
 8015686:	429d      	cmp	r5, r3
 8015688:	bf38      	it	cc
 801568a:	461d      	movcc	r5, r3
 801568c:	0553      	lsls	r3, r2, #21
 801568e:	d531      	bpl.n	80156f4 <__ssputs_r+0xa0>
 8015690:	4629      	mov	r1, r5
 8015692:	f7ff f9d7 	bl	8014a44 <_malloc_r>
 8015696:	4606      	mov	r6, r0
 8015698:	b950      	cbnz	r0, 80156b0 <__ssputs_r+0x5c>
 801569a:	230c      	movs	r3, #12
 801569c:	f8ca 3000 	str.w	r3, [sl]
 80156a0:	89a3      	ldrh	r3, [r4, #12]
 80156a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80156a6:	81a3      	strh	r3, [r4, #12]
 80156a8:	f04f 30ff 	mov.w	r0, #4294967295
 80156ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156b0:	6921      	ldr	r1, [r4, #16]
 80156b2:	464a      	mov	r2, r9
 80156b4:	f7fe fed2 	bl	801445c <memcpy>
 80156b8:	89a3      	ldrh	r3, [r4, #12]
 80156ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80156be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80156c2:	81a3      	strh	r3, [r4, #12]
 80156c4:	6126      	str	r6, [r4, #16]
 80156c6:	6165      	str	r5, [r4, #20]
 80156c8:	444e      	add	r6, r9
 80156ca:	eba5 0509 	sub.w	r5, r5, r9
 80156ce:	6026      	str	r6, [r4, #0]
 80156d0:	60a5      	str	r5, [r4, #8]
 80156d2:	463e      	mov	r6, r7
 80156d4:	42be      	cmp	r6, r7
 80156d6:	d900      	bls.n	80156da <__ssputs_r+0x86>
 80156d8:	463e      	mov	r6, r7
 80156da:	6820      	ldr	r0, [r4, #0]
 80156dc:	4632      	mov	r2, r6
 80156de:	4641      	mov	r1, r8
 80156e0:	f000 fe14 	bl	801630c <memmove>
 80156e4:	68a3      	ldr	r3, [r4, #8]
 80156e6:	1b9b      	subs	r3, r3, r6
 80156e8:	60a3      	str	r3, [r4, #8]
 80156ea:	6823      	ldr	r3, [r4, #0]
 80156ec:	4433      	add	r3, r6
 80156ee:	6023      	str	r3, [r4, #0]
 80156f0:	2000      	movs	r0, #0
 80156f2:	e7db      	b.n	80156ac <__ssputs_r+0x58>
 80156f4:	462a      	mov	r2, r5
 80156f6:	f000 fe23 	bl	8016340 <_realloc_r>
 80156fa:	4606      	mov	r6, r0
 80156fc:	2800      	cmp	r0, #0
 80156fe:	d1e1      	bne.n	80156c4 <__ssputs_r+0x70>
 8015700:	6921      	ldr	r1, [r4, #16]
 8015702:	4650      	mov	r0, sl
 8015704:	f7ff f932 	bl	801496c <_free_r>
 8015708:	e7c7      	b.n	801569a <__ssputs_r+0x46>
	...

0801570c <_svfiprintf_r>:
 801570c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015710:	4698      	mov	r8, r3
 8015712:	898b      	ldrh	r3, [r1, #12]
 8015714:	061b      	lsls	r3, r3, #24
 8015716:	b09d      	sub	sp, #116	; 0x74
 8015718:	4607      	mov	r7, r0
 801571a:	460d      	mov	r5, r1
 801571c:	4614      	mov	r4, r2
 801571e:	d50e      	bpl.n	801573e <_svfiprintf_r+0x32>
 8015720:	690b      	ldr	r3, [r1, #16]
 8015722:	b963      	cbnz	r3, 801573e <_svfiprintf_r+0x32>
 8015724:	2140      	movs	r1, #64	; 0x40
 8015726:	f7ff f98d 	bl	8014a44 <_malloc_r>
 801572a:	6028      	str	r0, [r5, #0]
 801572c:	6128      	str	r0, [r5, #16]
 801572e:	b920      	cbnz	r0, 801573a <_svfiprintf_r+0x2e>
 8015730:	230c      	movs	r3, #12
 8015732:	603b      	str	r3, [r7, #0]
 8015734:	f04f 30ff 	mov.w	r0, #4294967295
 8015738:	e0d1      	b.n	80158de <_svfiprintf_r+0x1d2>
 801573a:	2340      	movs	r3, #64	; 0x40
 801573c:	616b      	str	r3, [r5, #20]
 801573e:	2300      	movs	r3, #0
 8015740:	9309      	str	r3, [sp, #36]	; 0x24
 8015742:	2320      	movs	r3, #32
 8015744:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015748:	f8cd 800c 	str.w	r8, [sp, #12]
 801574c:	2330      	movs	r3, #48	; 0x30
 801574e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80158f8 <_svfiprintf_r+0x1ec>
 8015752:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015756:	f04f 0901 	mov.w	r9, #1
 801575a:	4623      	mov	r3, r4
 801575c:	469a      	mov	sl, r3
 801575e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015762:	b10a      	cbz	r2, 8015768 <_svfiprintf_r+0x5c>
 8015764:	2a25      	cmp	r2, #37	; 0x25
 8015766:	d1f9      	bne.n	801575c <_svfiprintf_r+0x50>
 8015768:	ebba 0b04 	subs.w	fp, sl, r4
 801576c:	d00b      	beq.n	8015786 <_svfiprintf_r+0x7a>
 801576e:	465b      	mov	r3, fp
 8015770:	4622      	mov	r2, r4
 8015772:	4629      	mov	r1, r5
 8015774:	4638      	mov	r0, r7
 8015776:	f7ff ff6d 	bl	8015654 <__ssputs_r>
 801577a:	3001      	adds	r0, #1
 801577c:	f000 80aa 	beq.w	80158d4 <_svfiprintf_r+0x1c8>
 8015780:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015782:	445a      	add	r2, fp
 8015784:	9209      	str	r2, [sp, #36]	; 0x24
 8015786:	f89a 3000 	ldrb.w	r3, [sl]
 801578a:	2b00      	cmp	r3, #0
 801578c:	f000 80a2 	beq.w	80158d4 <_svfiprintf_r+0x1c8>
 8015790:	2300      	movs	r3, #0
 8015792:	f04f 32ff 	mov.w	r2, #4294967295
 8015796:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801579a:	f10a 0a01 	add.w	sl, sl, #1
 801579e:	9304      	str	r3, [sp, #16]
 80157a0:	9307      	str	r3, [sp, #28]
 80157a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80157a6:	931a      	str	r3, [sp, #104]	; 0x68
 80157a8:	4654      	mov	r4, sl
 80157aa:	2205      	movs	r2, #5
 80157ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157b0:	4851      	ldr	r0, [pc, #324]	; (80158f8 <_svfiprintf_r+0x1ec>)
 80157b2:	f7ea fd25 	bl	8000200 <memchr>
 80157b6:	9a04      	ldr	r2, [sp, #16]
 80157b8:	b9d8      	cbnz	r0, 80157f2 <_svfiprintf_r+0xe6>
 80157ba:	06d0      	lsls	r0, r2, #27
 80157bc:	bf44      	itt	mi
 80157be:	2320      	movmi	r3, #32
 80157c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80157c4:	0711      	lsls	r1, r2, #28
 80157c6:	bf44      	itt	mi
 80157c8:	232b      	movmi	r3, #43	; 0x2b
 80157ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80157ce:	f89a 3000 	ldrb.w	r3, [sl]
 80157d2:	2b2a      	cmp	r3, #42	; 0x2a
 80157d4:	d015      	beq.n	8015802 <_svfiprintf_r+0xf6>
 80157d6:	9a07      	ldr	r2, [sp, #28]
 80157d8:	4654      	mov	r4, sl
 80157da:	2000      	movs	r0, #0
 80157dc:	f04f 0c0a 	mov.w	ip, #10
 80157e0:	4621      	mov	r1, r4
 80157e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80157e6:	3b30      	subs	r3, #48	; 0x30
 80157e8:	2b09      	cmp	r3, #9
 80157ea:	d94e      	bls.n	801588a <_svfiprintf_r+0x17e>
 80157ec:	b1b0      	cbz	r0, 801581c <_svfiprintf_r+0x110>
 80157ee:	9207      	str	r2, [sp, #28]
 80157f0:	e014      	b.n	801581c <_svfiprintf_r+0x110>
 80157f2:	eba0 0308 	sub.w	r3, r0, r8
 80157f6:	fa09 f303 	lsl.w	r3, r9, r3
 80157fa:	4313      	orrs	r3, r2
 80157fc:	9304      	str	r3, [sp, #16]
 80157fe:	46a2      	mov	sl, r4
 8015800:	e7d2      	b.n	80157a8 <_svfiprintf_r+0x9c>
 8015802:	9b03      	ldr	r3, [sp, #12]
 8015804:	1d19      	adds	r1, r3, #4
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	9103      	str	r1, [sp, #12]
 801580a:	2b00      	cmp	r3, #0
 801580c:	bfbb      	ittet	lt
 801580e:	425b      	neglt	r3, r3
 8015810:	f042 0202 	orrlt.w	r2, r2, #2
 8015814:	9307      	strge	r3, [sp, #28]
 8015816:	9307      	strlt	r3, [sp, #28]
 8015818:	bfb8      	it	lt
 801581a:	9204      	strlt	r2, [sp, #16]
 801581c:	7823      	ldrb	r3, [r4, #0]
 801581e:	2b2e      	cmp	r3, #46	; 0x2e
 8015820:	d10c      	bne.n	801583c <_svfiprintf_r+0x130>
 8015822:	7863      	ldrb	r3, [r4, #1]
 8015824:	2b2a      	cmp	r3, #42	; 0x2a
 8015826:	d135      	bne.n	8015894 <_svfiprintf_r+0x188>
 8015828:	9b03      	ldr	r3, [sp, #12]
 801582a:	1d1a      	adds	r2, r3, #4
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	9203      	str	r2, [sp, #12]
 8015830:	2b00      	cmp	r3, #0
 8015832:	bfb8      	it	lt
 8015834:	f04f 33ff 	movlt.w	r3, #4294967295
 8015838:	3402      	adds	r4, #2
 801583a:	9305      	str	r3, [sp, #20]
 801583c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015908 <_svfiprintf_r+0x1fc>
 8015840:	7821      	ldrb	r1, [r4, #0]
 8015842:	2203      	movs	r2, #3
 8015844:	4650      	mov	r0, sl
 8015846:	f7ea fcdb 	bl	8000200 <memchr>
 801584a:	b140      	cbz	r0, 801585e <_svfiprintf_r+0x152>
 801584c:	2340      	movs	r3, #64	; 0x40
 801584e:	eba0 000a 	sub.w	r0, r0, sl
 8015852:	fa03 f000 	lsl.w	r0, r3, r0
 8015856:	9b04      	ldr	r3, [sp, #16]
 8015858:	4303      	orrs	r3, r0
 801585a:	3401      	adds	r4, #1
 801585c:	9304      	str	r3, [sp, #16]
 801585e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015862:	4826      	ldr	r0, [pc, #152]	; (80158fc <_svfiprintf_r+0x1f0>)
 8015864:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015868:	2206      	movs	r2, #6
 801586a:	f7ea fcc9 	bl	8000200 <memchr>
 801586e:	2800      	cmp	r0, #0
 8015870:	d038      	beq.n	80158e4 <_svfiprintf_r+0x1d8>
 8015872:	4b23      	ldr	r3, [pc, #140]	; (8015900 <_svfiprintf_r+0x1f4>)
 8015874:	bb1b      	cbnz	r3, 80158be <_svfiprintf_r+0x1b2>
 8015876:	9b03      	ldr	r3, [sp, #12]
 8015878:	3307      	adds	r3, #7
 801587a:	f023 0307 	bic.w	r3, r3, #7
 801587e:	3308      	adds	r3, #8
 8015880:	9303      	str	r3, [sp, #12]
 8015882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015884:	4433      	add	r3, r6
 8015886:	9309      	str	r3, [sp, #36]	; 0x24
 8015888:	e767      	b.n	801575a <_svfiprintf_r+0x4e>
 801588a:	fb0c 3202 	mla	r2, ip, r2, r3
 801588e:	460c      	mov	r4, r1
 8015890:	2001      	movs	r0, #1
 8015892:	e7a5      	b.n	80157e0 <_svfiprintf_r+0xd4>
 8015894:	2300      	movs	r3, #0
 8015896:	3401      	adds	r4, #1
 8015898:	9305      	str	r3, [sp, #20]
 801589a:	4619      	mov	r1, r3
 801589c:	f04f 0c0a 	mov.w	ip, #10
 80158a0:	4620      	mov	r0, r4
 80158a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80158a6:	3a30      	subs	r2, #48	; 0x30
 80158a8:	2a09      	cmp	r2, #9
 80158aa:	d903      	bls.n	80158b4 <_svfiprintf_r+0x1a8>
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d0c5      	beq.n	801583c <_svfiprintf_r+0x130>
 80158b0:	9105      	str	r1, [sp, #20]
 80158b2:	e7c3      	b.n	801583c <_svfiprintf_r+0x130>
 80158b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80158b8:	4604      	mov	r4, r0
 80158ba:	2301      	movs	r3, #1
 80158bc:	e7f0      	b.n	80158a0 <_svfiprintf_r+0x194>
 80158be:	ab03      	add	r3, sp, #12
 80158c0:	9300      	str	r3, [sp, #0]
 80158c2:	462a      	mov	r2, r5
 80158c4:	4b0f      	ldr	r3, [pc, #60]	; (8015904 <_svfiprintf_r+0x1f8>)
 80158c6:	a904      	add	r1, sp, #16
 80158c8:	4638      	mov	r0, r7
 80158ca:	f3af 8000 	nop.w
 80158ce:	1c42      	adds	r2, r0, #1
 80158d0:	4606      	mov	r6, r0
 80158d2:	d1d6      	bne.n	8015882 <_svfiprintf_r+0x176>
 80158d4:	89ab      	ldrh	r3, [r5, #12]
 80158d6:	065b      	lsls	r3, r3, #25
 80158d8:	f53f af2c 	bmi.w	8015734 <_svfiprintf_r+0x28>
 80158dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80158de:	b01d      	add	sp, #116	; 0x74
 80158e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158e4:	ab03      	add	r3, sp, #12
 80158e6:	9300      	str	r3, [sp, #0]
 80158e8:	462a      	mov	r2, r5
 80158ea:	4b06      	ldr	r3, [pc, #24]	; (8015904 <_svfiprintf_r+0x1f8>)
 80158ec:	a904      	add	r1, sp, #16
 80158ee:	4638      	mov	r0, r7
 80158f0:	f000 f9d4 	bl	8015c9c <_printf_i>
 80158f4:	e7eb      	b.n	80158ce <_svfiprintf_r+0x1c2>
 80158f6:	bf00      	nop
 80158f8:	08017758 	.word	0x08017758
 80158fc:	08017762 	.word	0x08017762
 8015900:	00000000 	.word	0x00000000
 8015904:	08015655 	.word	0x08015655
 8015908:	0801775e 	.word	0x0801775e

0801590c <__sfputc_r>:
 801590c:	6893      	ldr	r3, [r2, #8]
 801590e:	3b01      	subs	r3, #1
 8015910:	2b00      	cmp	r3, #0
 8015912:	b410      	push	{r4}
 8015914:	6093      	str	r3, [r2, #8]
 8015916:	da08      	bge.n	801592a <__sfputc_r+0x1e>
 8015918:	6994      	ldr	r4, [r2, #24]
 801591a:	42a3      	cmp	r3, r4
 801591c:	db01      	blt.n	8015922 <__sfputc_r+0x16>
 801591e:	290a      	cmp	r1, #10
 8015920:	d103      	bne.n	801592a <__sfputc_r+0x1e>
 8015922:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015926:	f000 bbb7 	b.w	8016098 <__swbuf_r>
 801592a:	6813      	ldr	r3, [r2, #0]
 801592c:	1c58      	adds	r0, r3, #1
 801592e:	6010      	str	r0, [r2, #0]
 8015930:	7019      	strb	r1, [r3, #0]
 8015932:	4608      	mov	r0, r1
 8015934:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015938:	4770      	bx	lr

0801593a <__sfputs_r>:
 801593a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801593c:	4606      	mov	r6, r0
 801593e:	460f      	mov	r7, r1
 8015940:	4614      	mov	r4, r2
 8015942:	18d5      	adds	r5, r2, r3
 8015944:	42ac      	cmp	r4, r5
 8015946:	d101      	bne.n	801594c <__sfputs_r+0x12>
 8015948:	2000      	movs	r0, #0
 801594a:	e007      	b.n	801595c <__sfputs_r+0x22>
 801594c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015950:	463a      	mov	r2, r7
 8015952:	4630      	mov	r0, r6
 8015954:	f7ff ffda 	bl	801590c <__sfputc_r>
 8015958:	1c43      	adds	r3, r0, #1
 801595a:	d1f3      	bne.n	8015944 <__sfputs_r+0xa>
 801595c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015960 <_vfiprintf_r>:
 8015960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015964:	460d      	mov	r5, r1
 8015966:	b09d      	sub	sp, #116	; 0x74
 8015968:	4614      	mov	r4, r2
 801596a:	4698      	mov	r8, r3
 801596c:	4606      	mov	r6, r0
 801596e:	b118      	cbz	r0, 8015978 <_vfiprintf_r+0x18>
 8015970:	6983      	ldr	r3, [r0, #24]
 8015972:	b90b      	cbnz	r3, 8015978 <_vfiprintf_r+0x18>
 8015974:	f7fe fc9a 	bl	80142ac <__sinit>
 8015978:	4b89      	ldr	r3, [pc, #548]	; (8015ba0 <_vfiprintf_r+0x240>)
 801597a:	429d      	cmp	r5, r3
 801597c:	d11b      	bne.n	80159b6 <_vfiprintf_r+0x56>
 801597e:	6875      	ldr	r5, [r6, #4]
 8015980:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015982:	07d9      	lsls	r1, r3, #31
 8015984:	d405      	bmi.n	8015992 <_vfiprintf_r+0x32>
 8015986:	89ab      	ldrh	r3, [r5, #12]
 8015988:	059a      	lsls	r2, r3, #22
 801598a:	d402      	bmi.n	8015992 <_vfiprintf_r+0x32>
 801598c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801598e:	f7fe fd51 	bl	8014434 <__retarget_lock_acquire_recursive>
 8015992:	89ab      	ldrh	r3, [r5, #12]
 8015994:	071b      	lsls	r3, r3, #28
 8015996:	d501      	bpl.n	801599c <_vfiprintf_r+0x3c>
 8015998:	692b      	ldr	r3, [r5, #16]
 801599a:	b9eb      	cbnz	r3, 80159d8 <_vfiprintf_r+0x78>
 801599c:	4629      	mov	r1, r5
 801599e:	4630      	mov	r0, r6
 80159a0:	f000 fbcc 	bl	801613c <__swsetup_r>
 80159a4:	b1c0      	cbz	r0, 80159d8 <_vfiprintf_r+0x78>
 80159a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80159a8:	07dc      	lsls	r4, r3, #31
 80159aa:	d50e      	bpl.n	80159ca <_vfiprintf_r+0x6a>
 80159ac:	f04f 30ff 	mov.w	r0, #4294967295
 80159b0:	b01d      	add	sp, #116	; 0x74
 80159b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159b6:	4b7b      	ldr	r3, [pc, #492]	; (8015ba4 <_vfiprintf_r+0x244>)
 80159b8:	429d      	cmp	r5, r3
 80159ba:	d101      	bne.n	80159c0 <_vfiprintf_r+0x60>
 80159bc:	68b5      	ldr	r5, [r6, #8]
 80159be:	e7df      	b.n	8015980 <_vfiprintf_r+0x20>
 80159c0:	4b79      	ldr	r3, [pc, #484]	; (8015ba8 <_vfiprintf_r+0x248>)
 80159c2:	429d      	cmp	r5, r3
 80159c4:	bf08      	it	eq
 80159c6:	68f5      	ldreq	r5, [r6, #12]
 80159c8:	e7da      	b.n	8015980 <_vfiprintf_r+0x20>
 80159ca:	89ab      	ldrh	r3, [r5, #12]
 80159cc:	0598      	lsls	r0, r3, #22
 80159ce:	d4ed      	bmi.n	80159ac <_vfiprintf_r+0x4c>
 80159d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80159d2:	f7fe fd31 	bl	8014438 <__retarget_lock_release_recursive>
 80159d6:	e7e9      	b.n	80159ac <_vfiprintf_r+0x4c>
 80159d8:	2300      	movs	r3, #0
 80159da:	9309      	str	r3, [sp, #36]	; 0x24
 80159dc:	2320      	movs	r3, #32
 80159de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80159e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80159e6:	2330      	movs	r3, #48	; 0x30
 80159e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015bac <_vfiprintf_r+0x24c>
 80159ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80159f0:	f04f 0901 	mov.w	r9, #1
 80159f4:	4623      	mov	r3, r4
 80159f6:	469a      	mov	sl, r3
 80159f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80159fc:	b10a      	cbz	r2, 8015a02 <_vfiprintf_r+0xa2>
 80159fe:	2a25      	cmp	r2, #37	; 0x25
 8015a00:	d1f9      	bne.n	80159f6 <_vfiprintf_r+0x96>
 8015a02:	ebba 0b04 	subs.w	fp, sl, r4
 8015a06:	d00b      	beq.n	8015a20 <_vfiprintf_r+0xc0>
 8015a08:	465b      	mov	r3, fp
 8015a0a:	4622      	mov	r2, r4
 8015a0c:	4629      	mov	r1, r5
 8015a0e:	4630      	mov	r0, r6
 8015a10:	f7ff ff93 	bl	801593a <__sfputs_r>
 8015a14:	3001      	adds	r0, #1
 8015a16:	f000 80aa 	beq.w	8015b6e <_vfiprintf_r+0x20e>
 8015a1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015a1c:	445a      	add	r2, fp
 8015a1e:	9209      	str	r2, [sp, #36]	; 0x24
 8015a20:	f89a 3000 	ldrb.w	r3, [sl]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	f000 80a2 	beq.w	8015b6e <_vfiprintf_r+0x20e>
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8015a30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015a34:	f10a 0a01 	add.w	sl, sl, #1
 8015a38:	9304      	str	r3, [sp, #16]
 8015a3a:	9307      	str	r3, [sp, #28]
 8015a3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015a40:	931a      	str	r3, [sp, #104]	; 0x68
 8015a42:	4654      	mov	r4, sl
 8015a44:	2205      	movs	r2, #5
 8015a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a4a:	4858      	ldr	r0, [pc, #352]	; (8015bac <_vfiprintf_r+0x24c>)
 8015a4c:	f7ea fbd8 	bl	8000200 <memchr>
 8015a50:	9a04      	ldr	r2, [sp, #16]
 8015a52:	b9d8      	cbnz	r0, 8015a8c <_vfiprintf_r+0x12c>
 8015a54:	06d1      	lsls	r1, r2, #27
 8015a56:	bf44      	itt	mi
 8015a58:	2320      	movmi	r3, #32
 8015a5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015a5e:	0713      	lsls	r3, r2, #28
 8015a60:	bf44      	itt	mi
 8015a62:	232b      	movmi	r3, #43	; 0x2b
 8015a64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015a68:	f89a 3000 	ldrb.w	r3, [sl]
 8015a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8015a6e:	d015      	beq.n	8015a9c <_vfiprintf_r+0x13c>
 8015a70:	9a07      	ldr	r2, [sp, #28]
 8015a72:	4654      	mov	r4, sl
 8015a74:	2000      	movs	r0, #0
 8015a76:	f04f 0c0a 	mov.w	ip, #10
 8015a7a:	4621      	mov	r1, r4
 8015a7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015a80:	3b30      	subs	r3, #48	; 0x30
 8015a82:	2b09      	cmp	r3, #9
 8015a84:	d94e      	bls.n	8015b24 <_vfiprintf_r+0x1c4>
 8015a86:	b1b0      	cbz	r0, 8015ab6 <_vfiprintf_r+0x156>
 8015a88:	9207      	str	r2, [sp, #28]
 8015a8a:	e014      	b.n	8015ab6 <_vfiprintf_r+0x156>
 8015a8c:	eba0 0308 	sub.w	r3, r0, r8
 8015a90:	fa09 f303 	lsl.w	r3, r9, r3
 8015a94:	4313      	orrs	r3, r2
 8015a96:	9304      	str	r3, [sp, #16]
 8015a98:	46a2      	mov	sl, r4
 8015a9a:	e7d2      	b.n	8015a42 <_vfiprintf_r+0xe2>
 8015a9c:	9b03      	ldr	r3, [sp, #12]
 8015a9e:	1d19      	adds	r1, r3, #4
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	9103      	str	r1, [sp, #12]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	bfbb      	ittet	lt
 8015aa8:	425b      	neglt	r3, r3
 8015aaa:	f042 0202 	orrlt.w	r2, r2, #2
 8015aae:	9307      	strge	r3, [sp, #28]
 8015ab0:	9307      	strlt	r3, [sp, #28]
 8015ab2:	bfb8      	it	lt
 8015ab4:	9204      	strlt	r2, [sp, #16]
 8015ab6:	7823      	ldrb	r3, [r4, #0]
 8015ab8:	2b2e      	cmp	r3, #46	; 0x2e
 8015aba:	d10c      	bne.n	8015ad6 <_vfiprintf_r+0x176>
 8015abc:	7863      	ldrb	r3, [r4, #1]
 8015abe:	2b2a      	cmp	r3, #42	; 0x2a
 8015ac0:	d135      	bne.n	8015b2e <_vfiprintf_r+0x1ce>
 8015ac2:	9b03      	ldr	r3, [sp, #12]
 8015ac4:	1d1a      	adds	r2, r3, #4
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	9203      	str	r2, [sp, #12]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	bfb8      	it	lt
 8015ace:	f04f 33ff 	movlt.w	r3, #4294967295
 8015ad2:	3402      	adds	r4, #2
 8015ad4:	9305      	str	r3, [sp, #20]
 8015ad6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015bbc <_vfiprintf_r+0x25c>
 8015ada:	7821      	ldrb	r1, [r4, #0]
 8015adc:	2203      	movs	r2, #3
 8015ade:	4650      	mov	r0, sl
 8015ae0:	f7ea fb8e 	bl	8000200 <memchr>
 8015ae4:	b140      	cbz	r0, 8015af8 <_vfiprintf_r+0x198>
 8015ae6:	2340      	movs	r3, #64	; 0x40
 8015ae8:	eba0 000a 	sub.w	r0, r0, sl
 8015aec:	fa03 f000 	lsl.w	r0, r3, r0
 8015af0:	9b04      	ldr	r3, [sp, #16]
 8015af2:	4303      	orrs	r3, r0
 8015af4:	3401      	adds	r4, #1
 8015af6:	9304      	str	r3, [sp, #16]
 8015af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015afc:	482c      	ldr	r0, [pc, #176]	; (8015bb0 <_vfiprintf_r+0x250>)
 8015afe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015b02:	2206      	movs	r2, #6
 8015b04:	f7ea fb7c 	bl	8000200 <memchr>
 8015b08:	2800      	cmp	r0, #0
 8015b0a:	d03f      	beq.n	8015b8c <_vfiprintf_r+0x22c>
 8015b0c:	4b29      	ldr	r3, [pc, #164]	; (8015bb4 <_vfiprintf_r+0x254>)
 8015b0e:	bb1b      	cbnz	r3, 8015b58 <_vfiprintf_r+0x1f8>
 8015b10:	9b03      	ldr	r3, [sp, #12]
 8015b12:	3307      	adds	r3, #7
 8015b14:	f023 0307 	bic.w	r3, r3, #7
 8015b18:	3308      	adds	r3, #8
 8015b1a:	9303      	str	r3, [sp, #12]
 8015b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b1e:	443b      	add	r3, r7
 8015b20:	9309      	str	r3, [sp, #36]	; 0x24
 8015b22:	e767      	b.n	80159f4 <_vfiprintf_r+0x94>
 8015b24:	fb0c 3202 	mla	r2, ip, r2, r3
 8015b28:	460c      	mov	r4, r1
 8015b2a:	2001      	movs	r0, #1
 8015b2c:	e7a5      	b.n	8015a7a <_vfiprintf_r+0x11a>
 8015b2e:	2300      	movs	r3, #0
 8015b30:	3401      	adds	r4, #1
 8015b32:	9305      	str	r3, [sp, #20]
 8015b34:	4619      	mov	r1, r3
 8015b36:	f04f 0c0a 	mov.w	ip, #10
 8015b3a:	4620      	mov	r0, r4
 8015b3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015b40:	3a30      	subs	r2, #48	; 0x30
 8015b42:	2a09      	cmp	r2, #9
 8015b44:	d903      	bls.n	8015b4e <_vfiprintf_r+0x1ee>
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d0c5      	beq.n	8015ad6 <_vfiprintf_r+0x176>
 8015b4a:	9105      	str	r1, [sp, #20]
 8015b4c:	e7c3      	b.n	8015ad6 <_vfiprintf_r+0x176>
 8015b4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015b52:	4604      	mov	r4, r0
 8015b54:	2301      	movs	r3, #1
 8015b56:	e7f0      	b.n	8015b3a <_vfiprintf_r+0x1da>
 8015b58:	ab03      	add	r3, sp, #12
 8015b5a:	9300      	str	r3, [sp, #0]
 8015b5c:	462a      	mov	r2, r5
 8015b5e:	4b16      	ldr	r3, [pc, #88]	; (8015bb8 <_vfiprintf_r+0x258>)
 8015b60:	a904      	add	r1, sp, #16
 8015b62:	4630      	mov	r0, r6
 8015b64:	f3af 8000 	nop.w
 8015b68:	4607      	mov	r7, r0
 8015b6a:	1c78      	adds	r0, r7, #1
 8015b6c:	d1d6      	bne.n	8015b1c <_vfiprintf_r+0x1bc>
 8015b6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015b70:	07d9      	lsls	r1, r3, #31
 8015b72:	d405      	bmi.n	8015b80 <_vfiprintf_r+0x220>
 8015b74:	89ab      	ldrh	r3, [r5, #12]
 8015b76:	059a      	lsls	r2, r3, #22
 8015b78:	d402      	bmi.n	8015b80 <_vfiprintf_r+0x220>
 8015b7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015b7c:	f7fe fc5c 	bl	8014438 <__retarget_lock_release_recursive>
 8015b80:	89ab      	ldrh	r3, [r5, #12]
 8015b82:	065b      	lsls	r3, r3, #25
 8015b84:	f53f af12 	bmi.w	80159ac <_vfiprintf_r+0x4c>
 8015b88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015b8a:	e711      	b.n	80159b0 <_vfiprintf_r+0x50>
 8015b8c:	ab03      	add	r3, sp, #12
 8015b8e:	9300      	str	r3, [sp, #0]
 8015b90:	462a      	mov	r2, r5
 8015b92:	4b09      	ldr	r3, [pc, #36]	; (8015bb8 <_vfiprintf_r+0x258>)
 8015b94:	a904      	add	r1, sp, #16
 8015b96:	4630      	mov	r0, r6
 8015b98:	f000 f880 	bl	8015c9c <_printf_i>
 8015b9c:	e7e4      	b.n	8015b68 <_vfiprintf_r+0x208>
 8015b9e:	bf00      	nop
 8015ba0:	08017464 	.word	0x08017464
 8015ba4:	08017484 	.word	0x08017484
 8015ba8:	08017444 	.word	0x08017444
 8015bac:	08017758 	.word	0x08017758
 8015bb0:	08017762 	.word	0x08017762
 8015bb4:	00000000 	.word	0x00000000
 8015bb8:	0801593b 	.word	0x0801593b
 8015bbc:	0801775e 	.word	0x0801775e

08015bc0 <_printf_common>:
 8015bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015bc4:	4616      	mov	r6, r2
 8015bc6:	4699      	mov	r9, r3
 8015bc8:	688a      	ldr	r2, [r1, #8]
 8015bca:	690b      	ldr	r3, [r1, #16]
 8015bcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015bd0:	4293      	cmp	r3, r2
 8015bd2:	bfb8      	it	lt
 8015bd4:	4613      	movlt	r3, r2
 8015bd6:	6033      	str	r3, [r6, #0]
 8015bd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015bdc:	4607      	mov	r7, r0
 8015bde:	460c      	mov	r4, r1
 8015be0:	b10a      	cbz	r2, 8015be6 <_printf_common+0x26>
 8015be2:	3301      	adds	r3, #1
 8015be4:	6033      	str	r3, [r6, #0]
 8015be6:	6823      	ldr	r3, [r4, #0]
 8015be8:	0699      	lsls	r1, r3, #26
 8015bea:	bf42      	ittt	mi
 8015bec:	6833      	ldrmi	r3, [r6, #0]
 8015bee:	3302      	addmi	r3, #2
 8015bf0:	6033      	strmi	r3, [r6, #0]
 8015bf2:	6825      	ldr	r5, [r4, #0]
 8015bf4:	f015 0506 	ands.w	r5, r5, #6
 8015bf8:	d106      	bne.n	8015c08 <_printf_common+0x48>
 8015bfa:	f104 0a19 	add.w	sl, r4, #25
 8015bfe:	68e3      	ldr	r3, [r4, #12]
 8015c00:	6832      	ldr	r2, [r6, #0]
 8015c02:	1a9b      	subs	r3, r3, r2
 8015c04:	42ab      	cmp	r3, r5
 8015c06:	dc26      	bgt.n	8015c56 <_printf_common+0x96>
 8015c08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015c0c:	1e13      	subs	r3, r2, #0
 8015c0e:	6822      	ldr	r2, [r4, #0]
 8015c10:	bf18      	it	ne
 8015c12:	2301      	movne	r3, #1
 8015c14:	0692      	lsls	r2, r2, #26
 8015c16:	d42b      	bmi.n	8015c70 <_printf_common+0xb0>
 8015c18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015c1c:	4649      	mov	r1, r9
 8015c1e:	4638      	mov	r0, r7
 8015c20:	47c0      	blx	r8
 8015c22:	3001      	adds	r0, #1
 8015c24:	d01e      	beq.n	8015c64 <_printf_common+0xa4>
 8015c26:	6823      	ldr	r3, [r4, #0]
 8015c28:	68e5      	ldr	r5, [r4, #12]
 8015c2a:	6832      	ldr	r2, [r6, #0]
 8015c2c:	f003 0306 	and.w	r3, r3, #6
 8015c30:	2b04      	cmp	r3, #4
 8015c32:	bf08      	it	eq
 8015c34:	1aad      	subeq	r5, r5, r2
 8015c36:	68a3      	ldr	r3, [r4, #8]
 8015c38:	6922      	ldr	r2, [r4, #16]
 8015c3a:	bf0c      	ite	eq
 8015c3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015c40:	2500      	movne	r5, #0
 8015c42:	4293      	cmp	r3, r2
 8015c44:	bfc4      	itt	gt
 8015c46:	1a9b      	subgt	r3, r3, r2
 8015c48:	18ed      	addgt	r5, r5, r3
 8015c4a:	2600      	movs	r6, #0
 8015c4c:	341a      	adds	r4, #26
 8015c4e:	42b5      	cmp	r5, r6
 8015c50:	d11a      	bne.n	8015c88 <_printf_common+0xc8>
 8015c52:	2000      	movs	r0, #0
 8015c54:	e008      	b.n	8015c68 <_printf_common+0xa8>
 8015c56:	2301      	movs	r3, #1
 8015c58:	4652      	mov	r2, sl
 8015c5a:	4649      	mov	r1, r9
 8015c5c:	4638      	mov	r0, r7
 8015c5e:	47c0      	blx	r8
 8015c60:	3001      	adds	r0, #1
 8015c62:	d103      	bne.n	8015c6c <_printf_common+0xac>
 8015c64:	f04f 30ff 	mov.w	r0, #4294967295
 8015c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c6c:	3501      	adds	r5, #1
 8015c6e:	e7c6      	b.n	8015bfe <_printf_common+0x3e>
 8015c70:	18e1      	adds	r1, r4, r3
 8015c72:	1c5a      	adds	r2, r3, #1
 8015c74:	2030      	movs	r0, #48	; 0x30
 8015c76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015c7a:	4422      	add	r2, r4
 8015c7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015c80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015c84:	3302      	adds	r3, #2
 8015c86:	e7c7      	b.n	8015c18 <_printf_common+0x58>
 8015c88:	2301      	movs	r3, #1
 8015c8a:	4622      	mov	r2, r4
 8015c8c:	4649      	mov	r1, r9
 8015c8e:	4638      	mov	r0, r7
 8015c90:	47c0      	blx	r8
 8015c92:	3001      	adds	r0, #1
 8015c94:	d0e6      	beq.n	8015c64 <_printf_common+0xa4>
 8015c96:	3601      	adds	r6, #1
 8015c98:	e7d9      	b.n	8015c4e <_printf_common+0x8e>
	...

08015c9c <_printf_i>:
 8015c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015ca0:	7e0f      	ldrb	r7, [r1, #24]
 8015ca2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015ca4:	2f78      	cmp	r7, #120	; 0x78
 8015ca6:	4691      	mov	r9, r2
 8015ca8:	4680      	mov	r8, r0
 8015caa:	460c      	mov	r4, r1
 8015cac:	469a      	mov	sl, r3
 8015cae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015cb2:	d807      	bhi.n	8015cc4 <_printf_i+0x28>
 8015cb4:	2f62      	cmp	r7, #98	; 0x62
 8015cb6:	d80a      	bhi.n	8015cce <_printf_i+0x32>
 8015cb8:	2f00      	cmp	r7, #0
 8015cba:	f000 80d8 	beq.w	8015e6e <_printf_i+0x1d2>
 8015cbe:	2f58      	cmp	r7, #88	; 0x58
 8015cc0:	f000 80a3 	beq.w	8015e0a <_printf_i+0x16e>
 8015cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015cc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015ccc:	e03a      	b.n	8015d44 <_printf_i+0xa8>
 8015cce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015cd2:	2b15      	cmp	r3, #21
 8015cd4:	d8f6      	bhi.n	8015cc4 <_printf_i+0x28>
 8015cd6:	a101      	add	r1, pc, #4	; (adr r1, 8015cdc <_printf_i+0x40>)
 8015cd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015cdc:	08015d35 	.word	0x08015d35
 8015ce0:	08015d49 	.word	0x08015d49
 8015ce4:	08015cc5 	.word	0x08015cc5
 8015ce8:	08015cc5 	.word	0x08015cc5
 8015cec:	08015cc5 	.word	0x08015cc5
 8015cf0:	08015cc5 	.word	0x08015cc5
 8015cf4:	08015d49 	.word	0x08015d49
 8015cf8:	08015cc5 	.word	0x08015cc5
 8015cfc:	08015cc5 	.word	0x08015cc5
 8015d00:	08015cc5 	.word	0x08015cc5
 8015d04:	08015cc5 	.word	0x08015cc5
 8015d08:	08015e55 	.word	0x08015e55
 8015d0c:	08015d79 	.word	0x08015d79
 8015d10:	08015e37 	.word	0x08015e37
 8015d14:	08015cc5 	.word	0x08015cc5
 8015d18:	08015cc5 	.word	0x08015cc5
 8015d1c:	08015e77 	.word	0x08015e77
 8015d20:	08015cc5 	.word	0x08015cc5
 8015d24:	08015d79 	.word	0x08015d79
 8015d28:	08015cc5 	.word	0x08015cc5
 8015d2c:	08015cc5 	.word	0x08015cc5
 8015d30:	08015e3f 	.word	0x08015e3f
 8015d34:	682b      	ldr	r3, [r5, #0]
 8015d36:	1d1a      	adds	r2, r3, #4
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	602a      	str	r2, [r5, #0]
 8015d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015d44:	2301      	movs	r3, #1
 8015d46:	e0a3      	b.n	8015e90 <_printf_i+0x1f4>
 8015d48:	6820      	ldr	r0, [r4, #0]
 8015d4a:	6829      	ldr	r1, [r5, #0]
 8015d4c:	0606      	lsls	r6, r0, #24
 8015d4e:	f101 0304 	add.w	r3, r1, #4
 8015d52:	d50a      	bpl.n	8015d6a <_printf_i+0xce>
 8015d54:	680e      	ldr	r6, [r1, #0]
 8015d56:	602b      	str	r3, [r5, #0]
 8015d58:	2e00      	cmp	r6, #0
 8015d5a:	da03      	bge.n	8015d64 <_printf_i+0xc8>
 8015d5c:	232d      	movs	r3, #45	; 0x2d
 8015d5e:	4276      	negs	r6, r6
 8015d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015d64:	485e      	ldr	r0, [pc, #376]	; (8015ee0 <_printf_i+0x244>)
 8015d66:	230a      	movs	r3, #10
 8015d68:	e019      	b.n	8015d9e <_printf_i+0x102>
 8015d6a:	680e      	ldr	r6, [r1, #0]
 8015d6c:	602b      	str	r3, [r5, #0]
 8015d6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015d72:	bf18      	it	ne
 8015d74:	b236      	sxthne	r6, r6
 8015d76:	e7ef      	b.n	8015d58 <_printf_i+0xbc>
 8015d78:	682b      	ldr	r3, [r5, #0]
 8015d7a:	6820      	ldr	r0, [r4, #0]
 8015d7c:	1d19      	adds	r1, r3, #4
 8015d7e:	6029      	str	r1, [r5, #0]
 8015d80:	0601      	lsls	r1, r0, #24
 8015d82:	d501      	bpl.n	8015d88 <_printf_i+0xec>
 8015d84:	681e      	ldr	r6, [r3, #0]
 8015d86:	e002      	b.n	8015d8e <_printf_i+0xf2>
 8015d88:	0646      	lsls	r6, r0, #25
 8015d8a:	d5fb      	bpl.n	8015d84 <_printf_i+0xe8>
 8015d8c:	881e      	ldrh	r6, [r3, #0]
 8015d8e:	4854      	ldr	r0, [pc, #336]	; (8015ee0 <_printf_i+0x244>)
 8015d90:	2f6f      	cmp	r7, #111	; 0x6f
 8015d92:	bf0c      	ite	eq
 8015d94:	2308      	moveq	r3, #8
 8015d96:	230a      	movne	r3, #10
 8015d98:	2100      	movs	r1, #0
 8015d9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015d9e:	6865      	ldr	r5, [r4, #4]
 8015da0:	60a5      	str	r5, [r4, #8]
 8015da2:	2d00      	cmp	r5, #0
 8015da4:	bfa2      	ittt	ge
 8015da6:	6821      	ldrge	r1, [r4, #0]
 8015da8:	f021 0104 	bicge.w	r1, r1, #4
 8015dac:	6021      	strge	r1, [r4, #0]
 8015dae:	b90e      	cbnz	r6, 8015db4 <_printf_i+0x118>
 8015db0:	2d00      	cmp	r5, #0
 8015db2:	d04d      	beq.n	8015e50 <_printf_i+0x1b4>
 8015db4:	4615      	mov	r5, r2
 8015db6:	fbb6 f1f3 	udiv	r1, r6, r3
 8015dba:	fb03 6711 	mls	r7, r3, r1, r6
 8015dbe:	5dc7      	ldrb	r7, [r0, r7]
 8015dc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015dc4:	4637      	mov	r7, r6
 8015dc6:	42bb      	cmp	r3, r7
 8015dc8:	460e      	mov	r6, r1
 8015dca:	d9f4      	bls.n	8015db6 <_printf_i+0x11a>
 8015dcc:	2b08      	cmp	r3, #8
 8015dce:	d10b      	bne.n	8015de8 <_printf_i+0x14c>
 8015dd0:	6823      	ldr	r3, [r4, #0]
 8015dd2:	07de      	lsls	r6, r3, #31
 8015dd4:	d508      	bpl.n	8015de8 <_printf_i+0x14c>
 8015dd6:	6923      	ldr	r3, [r4, #16]
 8015dd8:	6861      	ldr	r1, [r4, #4]
 8015dda:	4299      	cmp	r1, r3
 8015ddc:	bfde      	ittt	le
 8015dde:	2330      	movle	r3, #48	; 0x30
 8015de0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015de4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015de8:	1b52      	subs	r2, r2, r5
 8015dea:	6122      	str	r2, [r4, #16]
 8015dec:	f8cd a000 	str.w	sl, [sp]
 8015df0:	464b      	mov	r3, r9
 8015df2:	aa03      	add	r2, sp, #12
 8015df4:	4621      	mov	r1, r4
 8015df6:	4640      	mov	r0, r8
 8015df8:	f7ff fee2 	bl	8015bc0 <_printf_common>
 8015dfc:	3001      	adds	r0, #1
 8015dfe:	d14c      	bne.n	8015e9a <_printf_i+0x1fe>
 8015e00:	f04f 30ff 	mov.w	r0, #4294967295
 8015e04:	b004      	add	sp, #16
 8015e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e0a:	4835      	ldr	r0, [pc, #212]	; (8015ee0 <_printf_i+0x244>)
 8015e0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015e10:	6829      	ldr	r1, [r5, #0]
 8015e12:	6823      	ldr	r3, [r4, #0]
 8015e14:	f851 6b04 	ldr.w	r6, [r1], #4
 8015e18:	6029      	str	r1, [r5, #0]
 8015e1a:	061d      	lsls	r5, r3, #24
 8015e1c:	d514      	bpl.n	8015e48 <_printf_i+0x1ac>
 8015e1e:	07df      	lsls	r7, r3, #31
 8015e20:	bf44      	itt	mi
 8015e22:	f043 0320 	orrmi.w	r3, r3, #32
 8015e26:	6023      	strmi	r3, [r4, #0]
 8015e28:	b91e      	cbnz	r6, 8015e32 <_printf_i+0x196>
 8015e2a:	6823      	ldr	r3, [r4, #0]
 8015e2c:	f023 0320 	bic.w	r3, r3, #32
 8015e30:	6023      	str	r3, [r4, #0]
 8015e32:	2310      	movs	r3, #16
 8015e34:	e7b0      	b.n	8015d98 <_printf_i+0xfc>
 8015e36:	6823      	ldr	r3, [r4, #0]
 8015e38:	f043 0320 	orr.w	r3, r3, #32
 8015e3c:	6023      	str	r3, [r4, #0]
 8015e3e:	2378      	movs	r3, #120	; 0x78
 8015e40:	4828      	ldr	r0, [pc, #160]	; (8015ee4 <_printf_i+0x248>)
 8015e42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015e46:	e7e3      	b.n	8015e10 <_printf_i+0x174>
 8015e48:	0659      	lsls	r1, r3, #25
 8015e4a:	bf48      	it	mi
 8015e4c:	b2b6      	uxthmi	r6, r6
 8015e4e:	e7e6      	b.n	8015e1e <_printf_i+0x182>
 8015e50:	4615      	mov	r5, r2
 8015e52:	e7bb      	b.n	8015dcc <_printf_i+0x130>
 8015e54:	682b      	ldr	r3, [r5, #0]
 8015e56:	6826      	ldr	r6, [r4, #0]
 8015e58:	6961      	ldr	r1, [r4, #20]
 8015e5a:	1d18      	adds	r0, r3, #4
 8015e5c:	6028      	str	r0, [r5, #0]
 8015e5e:	0635      	lsls	r5, r6, #24
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	d501      	bpl.n	8015e68 <_printf_i+0x1cc>
 8015e64:	6019      	str	r1, [r3, #0]
 8015e66:	e002      	b.n	8015e6e <_printf_i+0x1d2>
 8015e68:	0670      	lsls	r0, r6, #25
 8015e6a:	d5fb      	bpl.n	8015e64 <_printf_i+0x1c8>
 8015e6c:	8019      	strh	r1, [r3, #0]
 8015e6e:	2300      	movs	r3, #0
 8015e70:	6123      	str	r3, [r4, #16]
 8015e72:	4615      	mov	r5, r2
 8015e74:	e7ba      	b.n	8015dec <_printf_i+0x150>
 8015e76:	682b      	ldr	r3, [r5, #0]
 8015e78:	1d1a      	adds	r2, r3, #4
 8015e7a:	602a      	str	r2, [r5, #0]
 8015e7c:	681d      	ldr	r5, [r3, #0]
 8015e7e:	6862      	ldr	r2, [r4, #4]
 8015e80:	2100      	movs	r1, #0
 8015e82:	4628      	mov	r0, r5
 8015e84:	f7ea f9bc 	bl	8000200 <memchr>
 8015e88:	b108      	cbz	r0, 8015e8e <_printf_i+0x1f2>
 8015e8a:	1b40      	subs	r0, r0, r5
 8015e8c:	6060      	str	r0, [r4, #4]
 8015e8e:	6863      	ldr	r3, [r4, #4]
 8015e90:	6123      	str	r3, [r4, #16]
 8015e92:	2300      	movs	r3, #0
 8015e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e98:	e7a8      	b.n	8015dec <_printf_i+0x150>
 8015e9a:	6923      	ldr	r3, [r4, #16]
 8015e9c:	462a      	mov	r2, r5
 8015e9e:	4649      	mov	r1, r9
 8015ea0:	4640      	mov	r0, r8
 8015ea2:	47d0      	blx	sl
 8015ea4:	3001      	adds	r0, #1
 8015ea6:	d0ab      	beq.n	8015e00 <_printf_i+0x164>
 8015ea8:	6823      	ldr	r3, [r4, #0]
 8015eaa:	079b      	lsls	r3, r3, #30
 8015eac:	d413      	bmi.n	8015ed6 <_printf_i+0x23a>
 8015eae:	68e0      	ldr	r0, [r4, #12]
 8015eb0:	9b03      	ldr	r3, [sp, #12]
 8015eb2:	4298      	cmp	r0, r3
 8015eb4:	bfb8      	it	lt
 8015eb6:	4618      	movlt	r0, r3
 8015eb8:	e7a4      	b.n	8015e04 <_printf_i+0x168>
 8015eba:	2301      	movs	r3, #1
 8015ebc:	4632      	mov	r2, r6
 8015ebe:	4649      	mov	r1, r9
 8015ec0:	4640      	mov	r0, r8
 8015ec2:	47d0      	blx	sl
 8015ec4:	3001      	adds	r0, #1
 8015ec6:	d09b      	beq.n	8015e00 <_printf_i+0x164>
 8015ec8:	3501      	adds	r5, #1
 8015eca:	68e3      	ldr	r3, [r4, #12]
 8015ecc:	9903      	ldr	r1, [sp, #12]
 8015ece:	1a5b      	subs	r3, r3, r1
 8015ed0:	42ab      	cmp	r3, r5
 8015ed2:	dcf2      	bgt.n	8015eba <_printf_i+0x21e>
 8015ed4:	e7eb      	b.n	8015eae <_printf_i+0x212>
 8015ed6:	2500      	movs	r5, #0
 8015ed8:	f104 0619 	add.w	r6, r4, #25
 8015edc:	e7f5      	b.n	8015eca <_printf_i+0x22e>
 8015ede:	bf00      	nop
 8015ee0:	08017769 	.word	0x08017769
 8015ee4:	0801777a 	.word	0x0801777a

08015ee8 <_read_r>:
 8015ee8:	b538      	push	{r3, r4, r5, lr}
 8015eea:	4d07      	ldr	r5, [pc, #28]	; (8015f08 <_read_r+0x20>)
 8015eec:	4604      	mov	r4, r0
 8015eee:	4608      	mov	r0, r1
 8015ef0:	4611      	mov	r1, r2
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	602a      	str	r2, [r5, #0]
 8015ef6:	461a      	mov	r2, r3
 8015ef8:	f7ec fdbc 	bl	8002a74 <_read>
 8015efc:	1c43      	adds	r3, r0, #1
 8015efe:	d102      	bne.n	8015f06 <_read_r+0x1e>
 8015f00:	682b      	ldr	r3, [r5, #0]
 8015f02:	b103      	cbz	r3, 8015f06 <_read_r+0x1e>
 8015f04:	6023      	str	r3, [r4, #0]
 8015f06:	bd38      	pop	{r3, r4, r5, pc}
 8015f08:	2000dabc 	.word	0x2000dabc

08015f0c <siscanf>:
 8015f0c:	b40e      	push	{r1, r2, r3}
 8015f0e:	b510      	push	{r4, lr}
 8015f10:	b09f      	sub	sp, #124	; 0x7c
 8015f12:	ac21      	add	r4, sp, #132	; 0x84
 8015f14:	f44f 7101 	mov.w	r1, #516	; 0x204
 8015f18:	f854 2b04 	ldr.w	r2, [r4], #4
 8015f1c:	9201      	str	r2, [sp, #4]
 8015f1e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015f22:	9004      	str	r0, [sp, #16]
 8015f24:	9008      	str	r0, [sp, #32]
 8015f26:	f7ea f95d 	bl	80001e4 <strlen>
 8015f2a:	4b0c      	ldr	r3, [pc, #48]	; (8015f5c <siscanf+0x50>)
 8015f2c:	9005      	str	r0, [sp, #20]
 8015f2e:	9009      	str	r0, [sp, #36]	; 0x24
 8015f30:	930d      	str	r3, [sp, #52]	; 0x34
 8015f32:	480b      	ldr	r0, [pc, #44]	; (8015f60 <siscanf+0x54>)
 8015f34:	9a01      	ldr	r2, [sp, #4]
 8015f36:	6800      	ldr	r0, [r0, #0]
 8015f38:	9403      	str	r4, [sp, #12]
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	9311      	str	r3, [sp, #68]	; 0x44
 8015f3e:	9316      	str	r3, [sp, #88]	; 0x58
 8015f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f44:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015f48:	a904      	add	r1, sp, #16
 8015f4a:	4623      	mov	r3, r4
 8015f4c:	f000 fa82 	bl	8016454 <__ssvfiscanf_r>
 8015f50:	b01f      	add	sp, #124	; 0x7c
 8015f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f56:	b003      	add	sp, #12
 8015f58:	4770      	bx	lr
 8015f5a:	bf00      	nop
 8015f5c:	08014c83 	.word	0x08014c83
 8015f60:	200002b4 	.word	0x200002b4

08015f64 <strcpy>:
 8015f64:	4603      	mov	r3, r0
 8015f66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015f6a:	f803 2b01 	strb.w	r2, [r3], #1
 8015f6e:	2a00      	cmp	r2, #0
 8015f70:	d1f9      	bne.n	8015f66 <strcpy+0x2>
 8015f72:	4770      	bx	lr

08015f74 <strncmp>:
 8015f74:	b510      	push	{r4, lr}
 8015f76:	b17a      	cbz	r2, 8015f98 <strncmp+0x24>
 8015f78:	4603      	mov	r3, r0
 8015f7a:	3901      	subs	r1, #1
 8015f7c:	1884      	adds	r4, r0, r2
 8015f7e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015f82:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015f86:	4290      	cmp	r0, r2
 8015f88:	d101      	bne.n	8015f8e <strncmp+0x1a>
 8015f8a:	42a3      	cmp	r3, r4
 8015f8c:	d101      	bne.n	8015f92 <strncmp+0x1e>
 8015f8e:	1a80      	subs	r0, r0, r2
 8015f90:	bd10      	pop	{r4, pc}
 8015f92:	2800      	cmp	r0, #0
 8015f94:	d1f3      	bne.n	8015f7e <strncmp+0xa>
 8015f96:	e7fa      	b.n	8015f8e <strncmp+0x1a>
 8015f98:	4610      	mov	r0, r2
 8015f9a:	e7f9      	b.n	8015f90 <strncmp+0x1c>

08015f9c <_strtoul_l.constprop.0>:
 8015f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015fa0:	4f36      	ldr	r7, [pc, #216]	; (801607c <_strtoul_l.constprop.0+0xe0>)
 8015fa2:	4686      	mov	lr, r0
 8015fa4:	460d      	mov	r5, r1
 8015fa6:	4628      	mov	r0, r5
 8015fa8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015fac:	5de6      	ldrb	r6, [r4, r7]
 8015fae:	f016 0608 	ands.w	r6, r6, #8
 8015fb2:	d1f8      	bne.n	8015fa6 <_strtoul_l.constprop.0+0xa>
 8015fb4:	2c2d      	cmp	r4, #45	; 0x2d
 8015fb6:	d12f      	bne.n	8016018 <_strtoul_l.constprop.0+0x7c>
 8015fb8:	782c      	ldrb	r4, [r5, #0]
 8015fba:	2601      	movs	r6, #1
 8015fbc:	1c85      	adds	r5, r0, #2
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d057      	beq.n	8016072 <_strtoul_l.constprop.0+0xd6>
 8015fc2:	2b10      	cmp	r3, #16
 8015fc4:	d109      	bne.n	8015fda <_strtoul_l.constprop.0+0x3e>
 8015fc6:	2c30      	cmp	r4, #48	; 0x30
 8015fc8:	d107      	bne.n	8015fda <_strtoul_l.constprop.0+0x3e>
 8015fca:	7828      	ldrb	r0, [r5, #0]
 8015fcc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8015fd0:	2858      	cmp	r0, #88	; 0x58
 8015fd2:	d149      	bne.n	8016068 <_strtoul_l.constprop.0+0xcc>
 8015fd4:	786c      	ldrb	r4, [r5, #1]
 8015fd6:	2310      	movs	r3, #16
 8015fd8:	3502      	adds	r5, #2
 8015fda:	f04f 38ff 	mov.w	r8, #4294967295
 8015fde:	2700      	movs	r7, #0
 8015fe0:	fbb8 f8f3 	udiv	r8, r8, r3
 8015fe4:	fb03 f908 	mul.w	r9, r3, r8
 8015fe8:	ea6f 0909 	mvn.w	r9, r9
 8015fec:	4638      	mov	r0, r7
 8015fee:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8015ff2:	f1bc 0f09 	cmp.w	ip, #9
 8015ff6:	d814      	bhi.n	8016022 <_strtoul_l.constprop.0+0x86>
 8015ff8:	4664      	mov	r4, ip
 8015ffa:	42a3      	cmp	r3, r4
 8015ffc:	dd22      	ble.n	8016044 <_strtoul_l.constprop.0+0xa8>
 8015ffe:	2f00      	cmp	r7, #0
 8016000:	db1d      	blt.n	801603e <_strtoul_l.constprop.0+0xa2>
 8016002:	4580      	cmp	r8, r0
 8016004:	d31b      	bcc.n	801603e <_strtoul_l.constprop.0+0xa2>
 8016006:	d101      	bne.n	801600c <_strtoul_l.constprop.0+0x70>
 8016008:	45a1      	cmp	r9, r4
 801600a:	db18      	blt.n	801603e <_strtoul_l.constprop.0+0xa2>
 801600c:	fb00 4003 	mla	r0, r0, r3, r4
 8016010:	2701      	movs	r7, #1
 8016012:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016016:	e7ea      	b.n	8015fee <_strtoul_l.constprop.0+0x52>
 8016018:	2c2b      	cmp	r4, #43	; 0x2b
 801601a:	bf04      	itt	eq
 801601c:	782c      	ldrbeq	r4, [r5, #0]
 801601e:	1c85      	addeq	r5, r0, #2
 8016020:	e7cd      	b.n	8015fbe <_strtoul_l.constprop.0+0x22>
 8016022:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8016026:	f1bc 0f19 	cmp.w	ip, #25
 801602a:	d801      	bhi.n	8016030 <_strtoul_l.constprop.0+0x94>
 801602c:	3c37      	subs	r4, #55	; 0x37
 801602e:	e7e4      	b.n	8015ffa <_strtoul_l.constprop.0+0x5e>
 8016030:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8016034:	f1bc 0f19 	cmp.w	ip, #25
 8016038:	d804      	bhi.n	8016044 <_strtoul_l.constprop.0+0xa8>
 801603a:	3c57      	subs	r4, #87	; 0x57
 801603c:	e7dd      	b.n	8015ffa <_strtoul_l.constprop.0+0x5e>
 801603e:	f04f 37ff 	mov.w	r7, #4294967295
 8016042:	e7e6      	b.n	8016012 <_strtoul_l.constprop.0+0x76>
 8016044:	2f00      	cmp	r7, #0
 8016046:	da07      	bge.n	8016058 <_strtoul_l.constprop.0+0xbc>
 8016048:	2322      	movs	r3, #34	; 0x22
 801604a:	f8ce 3000 	str.w	r3, [lr]
 801604e:	f04f 30ff 	mov.w	r0, #4294967295
 8016052:	b932      	cbnz	r2, 8016062 <_strtoul_l.constprop.0+0xc6>
 8016054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016058:	b106      	cbz	r6, 801605c <_strtoul_l.constprop.0+0xc0>
 801605a:	4240      	negs	r0, r0
 801605c:	2a00      	cmp	r2, #0
 801605e:	d0f9      	beq.n	8016054 <_strtoul_l.constprop.0+0xb8>
 8016060:	b107      	cbz	r7, 8016064 <_strtoul_l.constprop.0+0xc8>
 8016062:	1e69      	subs	r1, r5, #1
 8016064:	6011      	str	r1, [r2, #0]
 8016066:	e7f5      	b.n	8016054 <_strtoul_l.constprop.0+0xb8>
 8016068:	2430      	movs	r4, #48	; 0x30
 801606a:	2b00      	cmp	r3, #0
 801606c:	d1b5      	bne.n	8015fda <_strtoul_l.constprop.0+0x3e>
 801606e:	2308      	movs	r3, #8
 8016070:	e7b3      	b.n	8015fda <_strtoul_l.constprop.0+0x3e>
 8016072:	2c30      	cmp	r4, #48	; 0x30
 8016074:	d0a9      	beq.n	8015fca <_strtoul_l.constprop.0+0x2e>
 8016076:	230a      	movs	r3, #10
 8016078:	e7af      	b.n	8015fda <_strtoul_l.constprop.0+0x3e>
 801607a:	bf00      	nop
 801607c:	080175f5 	.word	0x080175f5

08016080 <_strtoul_r>:
 8016080:	f7ff bf8c 	b.w	8015f9c <_strtoul_l.constprop.0>

08016084 <strtoul>:
 8016084:	4613      	mov	r3, r2
 8016086:	460a      	mov	r2, r1
 8016088:	4601      	mov	r1, r0
 801608a:	4802      	ldr	r0, [pc, #8]	; (8016094 <strtoul+0x10>)
 801608c:	6800      	ldr	r0, [r0, #0]
 801608e:	f7ff bf85 	b.w	8015f9c <_strtoul_l.constprop.0>
 8016092:	bf00      	nop
 8016094:	200002b4 	.word	0x200002b4

08016098 <__swbuf_r>:
 8016098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801609a:	460e      	mov	r6, r1
 801609c:	4614      	mov	r4, r2
 801609e:	4605      	mov	r5, r0
 80160a0:	b118      	cbz	r0, 80160aa <__swbuf_r+0x12>
 80160a2:	6983      	ldr	r3, [r0, #24]
 80160a4:	b90b      	cbnz	r3, 80160aa <__swbuf_r+0x12>
 80160a6:	f7fe f901 	bl	80142ac <__sinit>
 80160aa:	4b21      	ldr	r3, [pc, #132]	; (8016130 <__swbuf_r+0x98>)
 80160ac:	429c      	cmp	r4, r3
 80160ae:	d12b      	bne.n	8016108 <__swbuf_r+0x70>
 80160b0:	686c      	ldr	r4, [r5, #4]
 80160b2:	69a3      	ldr	r3, [r4, #24]
 80160b4:	60a3      	str	r3, [r4, #8]
 80160b6:	89a3      	ldrh	r3, [r4, #12]
 80160b8:	071a      	lsls	r2, r3, #28
 80160ba:	d52f      	bpl.n	801611c <__swbuf_r+0x84>
 80160bc:	6923      	ldr	r3, [r4, #16]
 80160be:	b36b      	cbz	r3, 801611c <__swbuf_r+0x84>
 80160c0:	6923      	ldr	r3, [r4, #16]
 80160c2:	6820      	ldr	r0, [r4, #0]
 80160c4:	1ac0      	subs	r0, r0, r3
 80160c6:	6963      	ldr	r3, [r4, #20]
 80160c8:	b2f6      	uxtb	r6, r6
 80160ca:	4283      	cmp	r3, r0
 80160cc:	4637      	mov	r7, r6
 80160ce:	dc04      	bgt.n	80160da <__swbuf_r+0x42>
 80160d0:	4621      	mov	r1, r4
 80160d2:	4628      	mov	r0, r5
 80160d4:	f7ff fa0a 	bl	80154ec <_fflush_r>
 80160d8:	bb30      	cbnz	r0, 8016128 <__swbuf_r+0x90>
 80160da:	68a3      	ldr	r3, [r4, #8]
 80160dc:	3b01      	subs	r3, #1
 80160de:	60a3      	str	r3, [r4, #8]
 80160e0:	6823      	ldr	r3, [r4, #0]
 80160e2:	1c5a      	adds	r2, r3, #1
 80160e4:	6022      	str	r2, [r4, #0]
 80160e6:	701e      	strb	r6, [r3, #0]
 80160e8:	6963      	ldr	r3, [r4, #20]
 80160ea:	3001      	adds	r0, #1
 80160ec:	4283      	cmp	r3, r0
 80160ee:	d004      	beq.n	80160fa <__swbuf_r+0x62>
 80160f0:	89a3      	ldrh	r3, [r4, #12]
 80160f2:	07db      	lsls	r3, r3, #31
 80160f4:	d506      	bpl.n	8016104 <__swbuf_r+0x6c>
 80160f6:	2e0a      	cmp	r6, #10
 80160f8:	d104      	bne.n	8016104 <__swbuf_r+0x6c>
 80160fa:	4621      	mov	r1, r4
 80160fc:	4628      	mov	r0, r5
 80160fe:	f7ff f9f5 	bl	80154ec <_fflush_r>
 8016102:	b988      	cbnz	r0, 8016128 <__swbuf_r+0x90>
 8016104:	4638      	mov	r0, r7
 8016106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016108:	4b0a      	ldr	r3, [pc, #40]	; (8016134 <__swbuf_r+0x9c>)
 801610a:	429c      	cmp	r4, r3
 801610c:	d101      	bne.n	8016112 <__swbuf_r+0x7a>
 801610e:	68ac      	ldr	r4, [r5, #8]
 8016110:	e7cf      	b.n	80160b2 <__swbuf_r+0x1a>
 8016112:	4b09      	ldr	r3, [pc, #36]	; (8016138 <__swbuf_r+0xa0>)
 8016114:	429c      	cmp	r4, r3
 8016116:	bf08      	it	eq
 8016118:	68ec      	ldreq	r4, [r5, #12]
 801611a:	e7ca      	b.n	80160b2 <__swbuf_r+0x1a>
 801611c:	4621      	mov	r1, r4
 801611e:	4628      	mov	r0, r5
 8016120:	f000 f80c 	bl	801613c <__swsetup_r>
 8016124:	2800      	cmp	r0, #0
 8016126:	d0cb      	beq.n	80160c0 <__swbuf_r+0x28>
 8016128:	f04f 37ff 	mov.w	r7, #4294967295
 801612c:	e7ea      	b.n	8016104 <__swbuf_r+0x6c>
 801612e:	bf00      	nop
 8016130:	08017464 	.word	0x08017464
 8016134:	08017484 	.word	0x08017484
 8016138:	08017444 	.word	0x08017444

0801613c <__swsetup_r>:
 801613c:	4b32      	ldr	r3, [pc, #200]	; (8016208 <__swsetup_r+0xcc>)
 801613e:	b570      	push	{r4, r5, r6, lr}
 8016140:	681d      	ldr	r5, [r3, #0]
 8016142:	4606      	mov	r6, r0
 8016144:	460c      	mov	r4, r1
 8016146:	b125      	cbz	r5, 8016152 <__swsetup_r+0x16>
 8016148:	69ab      	ldr	r3, [r5, #24]
 801614a:	b913      	cbnz	r3, 8016152 <__swsetup_r+0x16>
 801614c:	4628      	mov	r0, r5
 801614e:	f7fe f8ad 	bl	80142ac <__sinit>
 8016152:	4b2e      	ldr	r3, [pc, #184]	; (801620c <__swsetup_r+0xd0>)
 8016154:	429c      	cmp	r4, r3
 8016156:	d10f      	bne.n	8016178 <__swsetup_r+0x3c>
 8016158:	686c      	ldr	r4, [r5, #4]
 801615a:	89a3      	ldrh	r3, [r4, #12]
 801615c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016160:	0719      	lsls	r1, r3, #28
 8016162:	d42c      	bmi.n	80161be <__swsetup_r+0x82>
 8016164:	06dd      	lsls	r5, r3, #27
 8016166:	d411      	bmi.n	801618c <__swsetup_r+0x50>
 8016168:	2309      	movs	r3, #9
 801616a:	6033      	str	r3, [r6, #0]
 801616c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016170:	81a3      	strh	r3, [r4, #12]
 8016172:	f04f 30ff 	mov.w	r0, #4294967295
 8016176:	e03e      	b.n	80161f6 <__swsetup_r+0xba>
 8016178:	4b25      	ldr	r3, [pc, #148]	; (8016210 <__swsetup_r+0xd4>)
 801617a:	429c      	cmp	r4, r3
 801617c:	d101      	bne.n	8016182 <__swsetup_r+0x46>
 801617e:	68ac      	ldr	r4, [r5, #8]
 8016180:	e7eb      	b.n	801615a <__swsetup_r+0x1e>
 8016182:	4b24      	ldr	r3, [pc, #144]	; (8016214 <__swsetup_r+0xd8>)
 8016184:	429c      	cmp	r4, r3
 8016186:	bf08      	it	eq
 8016188:	68ec      	ldreq	r4, [r5, #12]
 801618a:	e7e6      	b.n	801615a <__swsetup_r+0x1e>
 801618c:	0758      	lsls	r0, r3, #29
 801618e:	d512      	bpl.n	80161b6 <__swsetup_r+0x7a>
 8016190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016192:	b141      	cbz	r1, 80161a6 <__swsetup_r+0x6a>
 8016194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016198:	4299      	cmp	r1, r3
 801619a:	d002      	beq.n	80161a2 <__swsetup_r+0x66>
 801619c:	4630      	mov	r0, r6
 801619e:	f7fe fbe5 	bl	801496c <_free_r>
 80161a2:	2300      	movs	r3, #0
 80161a4:	6363      	str	r3, [r4, #52]	; 0x34
 80161a6:	89a3      	ldrh	r3, [r4, #12]
 80161a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80161ac:	81a3      	strh	r3, [r4, #12]
 80161ae:	2300      	movs	r3, #0
 80161b0:	6063      	str	r3, [r4, #4]
 80161b2:	6923      	ldr	r3, [r4, #16]
 80161b4:	6023      	str	r3, [r4, #0]
 80161b6:	89a3      	ldrh	r3, [r4, #12]
 80161b8:	f043 0308 	orr.w	r3, r3, #8
 80161bc:	81a3      	strh	r3, [r4, #12]
 80161be:	6923      	ldr	r3, [r4, #16]
 80161c0:	b94b      	cbnz	r3, 80161d6 <__swsetup_r+0x9a>
 80161c2:	89a3      	ldrh	r3, [r4, #12]
 80161c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80161c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80161cc:	d003      	beq.n	80161d6 <__swsetup_r+0x9a>
 80161ce:	4621      	mov	r1, r4
 80161d0:	4630      	mov	r0, r6
 80161d2:	f000 f85b 	bl	801628c <__smakebuf_r>
 80161d6:	89a0      	ldrh	r0, [r4, #12]
 80161d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80161dc:	f010 0301 	ands.w	r3, r0, #1
 80161e0:	d00a      	beq.n	80161f8 <__swsetup_r+0xbc>
 80161e2:	2300      	movs	r3, #0
 80161e4:	60a3      	str	r3, [r4, #8]
 80161e6:	6963      	ldr	r3, [r4, #20]
 80161e8:	425b      	negs	r3, r3
 80161ea:	61a3      	str	r3, [r4, #24]
 80161ec:	6923      	ldr	r3, [r4, #16]
 80161ee:	b943      	cbnz	r3, 8016202 <__swsetup_r+0xc6>
 80161f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80161f4:	d1ba      	bne.n	801616c <__swsetup_r+0x30>
 80161f6:	bd70      	pop	{r4, r5, r6, pc}
 80161f8:	0781      	lsls	r1, r0, #30
 80161fa:	bf58      	it	pl
 80161fc:	6963      	ldrpl	r3, [r4, #20]
 80161fe:	60a3      	str	r3, [r4, #8]
 8016200:	e7f4      	b.n	80161ec <__swsetup_r+0xb0>
 8016202:	2000      	movs	r0, #0
 8016204:	e7f7      	b.n	80161f6 <__swsetup_r+0xba>
 8016206:	bf00      	nop
 8016208:	200002b4 	.word	0x200002b4
 801620c:	08017464 	.word	0x08017464
 8016210:	08017484 	.word	0x08017484
 8016214:	08017444 	.word	0x08017444

08016218 <abort>:
 8016218:	b508      	push	{r3, lr}
 801621a:	2006      	movs	r0, #6
 801621c:	f000 fc44 	bl	8016aa8 <raise>
 8016220:	2001      	movs	r0, #1
 8016222:	f7ec fc1d 	bl	8002a60 <_exit>
	...

08016228 <__env_lock>:
 8016228:	4801      	ldr	r0, [pc, #4]	; (8016230 <__env_lock+0x8>)
 801622a:	f7fe b903 	b.w	8014434 <__retarget_lock_acquire_recursive>
 801622e:	bf00      	nop
 8016230:	2000daac 	.word	0x2000daac

08016234 <__env_unlock>:
 8016234:	4801      	ldr	r0, [pc, #4]	; (801623c <__env_unlock+0x8>)
 8016236:	f7fe b8ff 	b.w	8014438 <__retarget_lock_release_recursive>
 801623a:	bf00      	nop
 801623c:	2000daac 	.word	0x2000daac

08016240 <__swhatbuf_r>:
 8016240:	b570      	push	{r4, r5, r6, lr}
 8016242:	460e      	mov	r6, r1
 8016244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016248:	2900      	cmp	r1, #0
 801624a:	b096      	sub	sp, #88	; 0x58
 801624c:	4614      	mov	r4, r2
 801624e:	461d      	mov	r5, r3
 8016250:	da08      	bge.n	8016264 <__swhatbuf_r+0x24>
 8016252:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016256:	2200      	movs	r2, #0
 8016258:	602a      	str	r2, [r5, #0]
 801625a:	061a      	lsls	r2, r3, #24
 801625c:	d410      	bmi.n	8016280 <__swhatbuf_r+0x40>
 801625e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016262:	e00e      	b.n	8016282 <__swhatbuf_r+0x42>
 8016264:	466a      	mov	r2, sp
 8016266:	f000 fc75 	bl	8016b54 <_fstat_r>
 801626a:	2800      	cmp	r0, #0
 801626c:	dbf1      	blt.n	8016252 <__swhatbuf_r+0x12>
 801626e:	9a01      	ldr	r2, [sp, #4]
 8016270:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016274:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016278:	425a      	negs	r2, r3
 801627a:	415a      	adcs	r2, r3
 801627c:	602a      	str	r2, [r5, #0]
 801627e:	e7ee      	b.n	801625e <__swhatbuf_r+0x1e>
 8016280:	2340      	movs	r3, #64	; 0x40
 8016282:	2000      	movs	r0, #0
 8016284:	6023      	str	r3, [r4, #0]
 8016286:	b016      	add	sp, #88	; 0x58
 8016288:	bd70      	pop	{r4, r5, r6, pc}
	...

0801628c <__smakebuf_r>:
 801628c:	898b      	ldrh	r3, [r1, #12]
 801628e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016290:	079d      	lsls	r5, r3, #30
 8016292:	4606      	mov	r6, r0
 8016294:	460c      	mov	r4, r1
 8016296:	d507      	bpl.n	80162a8 <__smakebuf_r+0x1c>
 8016298:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801629c:	6023      	str	r3, [r4, #0]
 801629e:	6123      	str	r3, [r4, #16]
 80162a0:	2301      	movs	r3, #1
 80162a2:	6163      	str	r3, [r4, #20]
 80162a4:	b002      	add	sp, #8
 80162a6:	bd70      	pop	{r4, r5, r6, pc}
 80162a8:	ab01      	add	r3, sp, #4
 80162aa:	466a      	mov	r2, sp
 80162ac:	f7ff ffc8 	bl	8016240 <__swhatbuf_r>
 80162b0:	9900      	ldr	r1, [sp, #0]
 80162b2:	4605      	mov	r5, r0
 80162b4:	4630      	mov	r0, r6
 80162b6:	f7fe fbc5 	bl	8014a44 <_malloc_r>
 80162ba:	b948      	cbnz	r0, 80162d0 <__smakebuf_r+0x44>
 80162bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80162c0:	059a      	lsls	r2, r3, #22
 80162c2:	d4ef      	bmi.n	80162a4 <__smakebuf_r+0x18>
 80162c4:	f023 0303 	bic.w	r3, r3, #3
 80162c8:	f043 0302 	orr.w	r3, r3, #2
 80162cc:	81a3      	strh	r3, [r4, #12]
 80162ce:	e7e3      	b.n	8016298 <__smakebuf_r+0xc>
 80162d0:	4b0d      	ldr	r3, [pc, #52]	; (8016308 <__smakebuf_r+0x7c>)
 80162d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80162d4:	89a3      	ldrh	r3, [r4, #12]
 80162d6:	6020      	str	r0, [r4, #0]
 80162d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80162dc:	81a3      	strh	r3, [r4, #12]
 80162de:	9b00      	ldr	r3, [sp, #0]
 80162e0:	6163      	str	r3, [r4, #20]
 80162e2:	9b01      	ldr	r3, [sp, #4]
 80162e4:	6120      	str	r0, [r4, #16]
 80162e6:	b15b      	cbz	r3, 8016300 <__smakebuf_r+0x74>
 80162e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80162ec:	4630      	mov	r0, r6
 80162ee:	f000 fc43 	bl	8016b78 <_isatty_r>
 80162f2:	b128      	cbz	r0, 8016300 <__smakebuf_r+0x74>
 80162f4:	89a3      	ldrh	r3, [r4, #12]
 80162f6:	f023 0303 	bic.w	r3, r3, #3
 80162fa:	f043 0301 	orr.w	r3, r3, #1
 80162fe:	81a3      	strh	r3, [r4, #12]
 8016300:	89a0      	ldrh	r0, [r4, #12]
 8016302:	4305      	orrs	r5, r0
 8016304:	81a5      	strh	r5, [r4, #12]
 8016306:	e7cd      	b.n	80162a4 <__smakebuf_r+0x18>
 8016308:	08014245 	.word	0x08014245

0801630c <memmove>:
 801630c:	4288      	cmp	r0, r1
 801630e:	b510      	push	{r4, lr}
 8016310:	eb01 0402 	add.w	r4, r1, r2
 8016314:	d902      	bls.n	801631c <memmove+0x10>
 8016316:	4284      	cmp	r4, r0
 8016318:	4623      	mov	r3, r4
 801631a:	d807      	bhi.n	801632c <memmove+0x20>
 801631c:	1e43      	subs	r3, r0, #1
 801631e:	42a1      	cmp	r1, r4
 8016320:	d008      	beq.n	8016334 <memmove+0x28>
 8016322:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016326:	f803 2f01 	strb.w	r2, [r3, #1]!
 801632a:	e7f8      	b.n	801631e <memmove+0x12>
 801632c:	4402      	add	r2, r0
 801632e:	4601      	mov	r1, r0
 8016330:	428a      	cmp	r2, r1
 8016332:	d100      	bne.n	8016336 <memmove+0x2a>
 8016334:	bd10      	pop	{r4, pc}
 8016336:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801633a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801633e:	e7f7      	b.n	8016330 <memmove+0x24>

08016340 <_realloc_r>:
 8016340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016344:	4680      	mov	r8, r0
 8016346:	4614      	mov	r4, r2
 8016348:	460e      	mov	r6, r1
 801634a:	b921      	cbnz	r1, 8016356 <_realloc_r+0x16>
 801634c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016350:	4611      	mov	r1, r2
 8016352:	f7fe bb77 	b.w	8014a44 <_malloc_r>
 8016356:	b92a      	cbnz	r2, 8016364 <_realloc_r+0x24>
 8016358:	f7fe fb08 	bl	801496c <_free_r>
 801635c:	4625      	mov	r5, r4
 801635e:	4628      	mov	r0, r5
 8016360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016364:	f000 fc18 	bl	8016b98 <_malloc_usable_size_r>
 8016368:	4284      	cmp	r4, r0
 801636a:	4607      	mov	r7, r0
 801636c:	d802      	bhi.n	8016374 <_realloc_r+0x34>
 801636e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016372:	d812      	bhi.n	801639a <_realloc_r+0x5a>
 8016374:	4621      	mov	r1, r4
 8016376:	4640      	mov	r0, r8
 8016378:	f7fe fb64 	bl	8014a44 <_malloc_r>
 801637c:	4605      	mov	r5, r0
 801637e:	2800      	cmp	r0, #0
 8016380:	d0ed      	beq.n	801635e <_realloc_r+0x1e>
 8016382:	42bc      	cmp	r4, r7
 8016384:	4622      	mov	r2, r4
 8016386:	4631      	mov	r1, r6
 8016388:	bf28      	it	cs
 801638a:	463a      	movcs	r2, r7
 801638c:	f7fe f866 	bl	801445c <memcpy>
 8016390:	4631      	mov	r1, r6
 8016392:	4640      	mov	r0, r8
 8016394:	f7fe faea 	bl	801496c <_free_r>
 8016398:	e7e1      	b.n	801635e <_realloc_r+0x1e>
 801639a:	4635      	mov	r5, r6
 801639c:	e7df      	b.n	801635e <_realloc_r+0x1e>

0801639e <_sungetc_r>:
 801639e:	b538      	push	{r3, r4, r5, lr}
 80163a0:	1c4b      	adds	r3, r1, #1
 80163a2:	4614      	mov	r4, r2
 80163a4:	d103      	bne.n	80163ae <_sungetc_r+0x10>
 80163a6:	f04f 35ff 	mov.w	r5, #4294967295
 80163aa:	4628      	mov	r0, r5
 80163ac:	bd38      	pop	{r3, r4, r5, pc}
 80163ae:	8993      	ldrh	r3, [r2, #12]
 80163b0:	f023 0320 	bic.w	r3, r3, #32
 80163b4:	8193      	strh	r3, [r2, #12]
 80163b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80163b8:	6852      	ldr	r2, [r2, #4]
 80163ba:	b2cd      	uxtb	r5, r1
 80163bc:	b18b      	cbz	r3, 80163e2 <_sungetc_r+0x44>
 80163be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80163c0:	4293      	cmp	r3, r2
 80163c2:	dd08      	ble.n	80163d6 <_sungetc_r+0x38>
 80163c4:	6823      	ldr	r3, [r4, #0]
 80163c6:	1e5a      	subs	r2, r3, #1
 80163c8:	6022      	str	r2, [r4, #0]
 80163ca:	f803 5c01 	strb.w	r5, [r3, #-1]
 80163ce:	6863      	ldr	r3, [r4, #4]
 80163d0:	3301      	adds	r3, #1
 80163d2:	6063      	str	r3, [r4, #4]
 80163d4:	e7e9      	b.n	80163aa <_sungetc_r+0xc>
 80163d6:	4621      	mov	r1, r4
 80163d8:	f000 fb82 	bl	8016ae0 <__submore>
 80163dc:	2800      	cmp	r0, #0
 80163de:	d0f1      	beq.n	80163c4 <_sungetc_r+0x26>
 80163e0:	e7e1      	b.n	80163a6 <_sungetc_r+0x8>
 80163e2:	6921      	ldr	r1, [r4, #16]
 80163e4:	6823      	ldr	r3, [r4, #0]
 80163e6:	b151      	cbz	r1, 80163fe <_sungetc_r+0x60>
 80163e8:	4299      	cmp	r1, r3
 80163ea:	d208      	bcs.n	80163fe <_sungetc_r+0x60>
 80163ec:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80163f0:	42a9      	cmp	r1, r5
 80163f2:	d104      	bne.n	80163fe <_sungetc_r+0x60>
 80163f4:	3b01      	subs	r3, #1
 80163f6:	3201      	adds	r2, #1
 80163f8:	6023      	str	r3, [r4, #0]
 80163fa:	6062      	str	r2, [r4, #4]
 80163fc:	e7d5      	b.n	80163aa <_sungetc_r+0xc>
 80163fe:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016402:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016406:	6363      	str	r3, [r4, #52]	; 0x34
 8016408:	2303      	movs	r3, #3
 801640a:	63a3      	str	r3, [r4, #56]	; 0x38
 801640c:	4623      	mov	r3, r4
 801640e:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016412:	6023      	str	r3, [r4, #0]
 8016414:	2301      	movs	r3, #1
 8016416:	e7dc      	b.n	80163d2 <_sungetc_r+0x34>

08016418 <__ssrefill_r>:
 8016418:	b510      	push	{r4, lr}
 801641a:	460c      	mov	r4, r1
 801641c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801641e:	b169      	cbz	r1, 801643c <__ssrefill_r+0x24>
 8016420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016424:	4299      	cmp	r1, r3
 8016426:	d001      	beq.n	801642c <__ssrefill_r+0x14>
 8016428:	f7fe faa0 	bl	801496c <_free_r>
 801642c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801642e:	6063      	str	r3, [r4, #4]
 8016430:	2000      	movs	r0, #0
 8016432:	6360      	str	r0, [r4, #52]	; 0x34
 8016434:	b113      	cbz	r3, 801643c <__ssrefill_r+0x24>
 8016436:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016438:	6023      	str	r3, [r4, #0]
 801643a:	bd10      	pop	{r4, pc}
 801643c:	6923      	ldr	r3, [r4, #16]
 801643e:	6023      	str	r3, [r4, #0]
 8016440:	2300      	movs	r3, #0
 8016442:	6063      	str	r3, [r4, #4]
 8016444:	89a3      	ldrh	r3, [r4, #12]
 8016446:	f043 0320 	orr.w	r3, r3, #32
 801644a:	81a3      	strh	r3, [r4, #12]
 801644c:	f04f 30ff 	mov.w	r0, #4294967295
 8016450:	e7f3      	b.n	801643a <__ssrefill_r+0x22>
	...

08016454 <__ssvfiscanf_r>:
 8016454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016458:	460c      	mov	r4, r1
 801645a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801645e:	2100      	movs	r1, #0
 8016460:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8016464:	49a6      	ldr	r1, [pc, #664]	; (8016700 <__ssvfiscanf_r+0x2ac>)
 8016466:	91a0      	str	r1, [sp, #640]	; 0x280
 8016468:	f10d 0804 	add.w	r8, sp, #4
 801646c:	49a5      	ldr	r1, [pc, #660]	; (8016704 <__ssvfiscanf_r+0x2b0>)
 801646e:	4fa6      	ldr	r7, [pc, #664]	; (8016708 <__ssvfiscanf_r+0x2b4>)
 8016470:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801670c <__ssvfiscanf_r+0x2b8>
 8016474:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016478:	4606      	mov	r6, r0
 801647a:	91a1      	str	r1, [sp, #644]	; 0x284
 801647c:	9300      	str	r3, [sp, #0]
 801647e:	7813      	ldrb	r3, [r2, #0]
 8016480:	2b00      	cmp	r3, #0
 8016482:	f000 815a 	beq.w	801673a <__ssvfiscanf_r+0x2e6>
 8016486:	5dd9      	ldrb	r1, [r3, r7]
 8016488:	f011 0108 	ands.w	r1, r1, #8
 801648c:	f102 0501 	add.w	r5, r2, #1
 8016490:	d019      	beq.n	80164c6 <__ssvfiscanf_r+0x72>
 8016492:	6863      	ldr	r3, [r4, #4]
 8016494:	2b00      	cmp	r3, #0
 8016496:	dd0f      	ble.n	80164b8 <__ssvfiscanf_r+0x64>
 8016498:	6823      	ldr	r3, [r4, #0]
 801649a:	781a      	ldrb	r2, [r3, #0]
 801649c:	5cba      	ldrb	r2, [r7, r2]
 801649e:	0712      	lsls	r2, r2, #28
 80164a0:	d401      	bmi.n	80164a6 <__ssvfiscanf_r+0x52>
 80164a2:	462a      	mov	r2, r5
 80164a4:	e7eb      	b.n	801647e <__ssvfiscanf_r+0x2a>
 80164a6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80164a8:	3201      	adds	r2, #1
 80164aa:	9245      	str	r2, [sp, #276]	; 0x114
 80164ac:	6862      	ldr	r2, [r4, #4]
 80164ae:	3301      	adds	r3, #1
 80164b0:	3a01      	subs	r2, #1
 80164b2:	6062      	str	r2, [r4, #4]
 80164b4:	6023      	str	r3, [r4, #0]
 80164b6:	e7ec      	b.n	8016492 <__ssvfiscanf_r+0x3e>
 80164b8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80164ba:	4621      	mov	r1, r4
 80164bc:	4630      	mov	r0, r6
 80164be:	4798      	blx	r3
 80164c0:	2800      	cmp	r0, #0
 80164c2:	d0e9      	beq.n	8016498 <__ssvfiscanf_r+0x44>
 80164c4:	e7ed      	b.n	80164a2 <__ssvfiscanf_r+0x4e>
 80164c6:	2b25      	cmp	r3, #37	; 0x25
 80164c8:	d012      	beq.n	80164f0 <__ssvfiscanf_r+0x9c>
 80164ca:	469a      	mov	sl, r3
 80164cc:	6863      	ldr	r3, [r4, #4]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	f340 8091 	ble.w	80165f6 <__ssvfiscanf_r+0x1a2>
 80164d4:	6822      	ldr	r2, [r4, #0]
 80164d6:	7813      	ldrb	r3, [r2, #0]
 80164d8:	4553      	cmp	r3, sl
 80164da:	f040 812e 	bne.w	801673a <__ssvfiscanf_r+0x2e6>
 80164de:	6863      	ldr	r3, [r4, #4]
 80164e0:	3b01      	subs	r3, #1
 80164e2:	6063      	str	r3, [r4, #4]
 80164e4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80164e6:	3201      	adds	r2, #1
 80164e8:	3301      	adds	r3, #1
 80164ea:	6022      	str	r2, [r4, #0]
 80164ec:	9345      	str	r3, [sp, #276]	; 0x114
 80164ee:	e7d8      	b.n	80164a2 <__ssvfiscanf_r+0x4e>
 80164f0:	9141      	str	r1, [sp, #260]	; 0x104
 80164f2:	9143      	str	r1, [sp, #268]	; 0x10c
 80164f4:	7853      	ldrb	r3, [r2, #1]
 80164f6:	2b2a      	cmp	r3, #42	; 0x2a
 80164f8:	bf02      	ittt	eq
 80164fa:	2310      	moveq	r3, #16
 80164fc:	1c95      	addeq	r5, r2, #2
 80164fe:	9341      	streq	r3, [sp, #260]	; 0x104
 8016500:	220a      	movs	r2, #10
 8016502:	46aa      	mov	sl, r5
 8016504:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8016508:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801650c:	2b09      	cmp	r3, #9
 801650e:	d91d      	bls.n	801654c <__ssvfiscanf_r+0xf8>
 8016510:	487e      	ldr	r0, [pc, #504]	; (801670c <__ssvfiscanf_r+0x2b8>)
 8016512:	2203      	movs	r2, #3
 8016514:	f7e9 fe74 	bl	8000200 <memchr>
 8016518:	b140      	cbz	r0, 801652c <__ssvfiscanf_r+0xd8>
 801651a:	2301      	movs	r3, #1
 801651c:	eba0 0009 	sub.w	r0, r0, r9
 8016520:	fa03 f000 	lsl.w	r0, r3, r0
 8016524:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016526:	4318      	orrs	r0, r3
 8016528:	9041      	str	r0, [sp, #260]	; 0x104
 801652a:	4655      	mov	r5, sl
 801652c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016530:	2b78      	cmp	r3, #120	; 0x78
 8016532:	d806      	bhi.n	8016542 <__ssvfiscanf_r+0xee>
 8016534:	2b57      	cmp	r3, #87	; 0x57
 8016536:	d810      	bhi.n	801655a <__ssvfiscanf_r+0x106>
 8016538:	2b25      	cmp	r3, #37	; 0x25
 801653a:	d0c6      	beq.n	80164ca <__ssvfiscanf_r+0x76>
 801653c:	d856      	bhi.n	80165ec <__ssvfiscanf_r+0x198>
 801653e:	2b00      	cmp	r3, #0
 8016540:	d064      	beq.n	801660c <__ssvfiscanf_r+0x1b8>
 8016542:	2303      	movs	r3, #3
 8016544:	9347      	str	r3, [sp, #284]	; 0x11c
 8016546:	230a      	movs	r3, #10
 8016548:	9342      	str	r3, [sp, #264]	; 0x108
 801654a:	e071      	b.n	8016630 <__ssvfiscanf_r+0x1dc>
 801654c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801654e:	fb02 1103 	mla	r1, r2, r3, r1
 8016552:	3930      	subs	r1, #48	; 0x30
 8016554:	9143      	str	r1, [sp, #268]	; 0x10c
 8016556:	4655      	mov	r5, sl
 8016558:	e7d3      	b.n	8016502 <__ssvfiscanf_r+0xae>
 801655a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801655e:	2a20      	cmp	r2, #32
 8016560:	d8ef      	bhi.n	8016542 <__ssvfiscanf_r+0xee>
 8016562:	a101      	add	r1, pc, #4	; (adr r1, 8016568 <__ssvfiscanf_r+0x114>)
 8016564:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016568:	0801661b 	.word	0x0801661b
 801656c:	08016543 	.word	0x08016543
 8016570:	08016543 	.word	0x08016543
 8016574:	08016679 	.word	0x08016679
 8016578:	08016543 	.word	0x08016543
 801657c:	08016543 	.word	0x08016543
 8016580:	08016543 	.word	0x08016543
 8016584:	08016543 	.word	0x08016543
 8016588:	08016543 	.word	0x08016543
 801658c:	08016543 	.word	0x08016543
 8016590:	08016543 	.word	0x08016543
 8016594:	0801668f 	.word	0x0801668f
 8016598:	08016665 	.word	0x08016665
 801659c:	080165f3 	.word	0x080165f3
 80165a0:	080165f3 	.word	0x080165f3
 80165a4:	080165f3 	.word	0x080165f3
 80165a8:	08016543 	.word	0x08016543
 80165ac:	08016669 	.word	0x08016669
 80165b0:	08016543 	.word	0x08016543
 80165b4:	08016543 	.word	0x08016543
 80165b8:	08016543 	.word	0x08016543
 80165bc:	08016543 	.word	0x08016543
 80165c0:	0801669f 	.word	0x0801669f
 80165c4:	08016671 	.word	0x08016671
 80165c8:	08016613 	.word	0x08016613
 80165cc:	08016543 	.word	0x08016543
 80165d0:	08016543 	.word	0x08016543
 80165d4:	0801669b 	.word	0x0801669b
 80165d8:	08016543 	.word	0x08016543
 80165dc:	08016665 	.word	0x08016665
 80165e0:	08016543 	.word	0x08016543
 80165e4:	08016543 	.word	0x08016543
 80165e8:	0801661b 	.word	0x0801661b
 80165ec:	3b45      	subs	r3, #69	; 0x45
 80165ee:	2b02      	cmp	r3, #2
 80165f0:	d8a7      	bhi.n	8016542 <__ssvfiscanf_r+0xee>
 80165f2:	2305      	movs	r3, #5
 80165f4:	e01b      	b.n	801662e <__ssvfiscanf_r+0x1da>
 80165f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80165f8:	4621      	mov	r1, r4
 80165fa:	4630      	mov	r0, r6
 80165fc:	4798      	blx	r3
 80165fe:	2800      	cmp	r0, #0
 8016600:	f43f af68 	beq.w	80164d4 <__ssvfiscanf_r+0x80>
 8016604:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016606:	2800      	cmp	r0, #0
 8016608:	f040 808d 	bne.w	8016726 <__ssvfiscanf_r+0x2d2>
 801660c:	f04f 30ff 	mov.w	r0, #4294967295
 8016610:	e08f      	b.n	8016732 <__ssvfiscanf_r+0x2de>
 8016612:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016614:	f042 0220 	orr.w	r2, r2, #32
 8016618:	9241      	str	r2, [sp, #260]	; 0x104
 801661a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801661c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016620:	9241      	str	r2, [sp, #260]	; 0x104
 8016622:	2210      	movs	r2, #16
 8016624:	2b6f      	cmp	r3, #111	; 0x6f
 8016626:	9242      	str	r2, [sp, #264]	; 0x108
 8016628:	bf34      	ite	cc
 801662a:	2303      	movcc	r3, #3
 801662c:	2304      	movcs	r3, #4
 801662e:	9347      	str	r3, [sp, #284]	; 0x11c
 8016630:	6863      	ldr	r3, [r4, #4]
 8016632:	2b00      	cmp	r3, #0
 8016634:	dd42      	ble.n	80166bc <__ssvfiscanf_r+0x268>
 8016636:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016638:	0659      	lsls	r1, r3, #25
 801663a:	d404      	bmi.n	8016646 <__ssvfiscanf_r+0x1f2>
 801663c:	6823      	ldr	r3, [r4, #0]
 801663e:	781a      	ldrb	r2, [r3, #0]
 8016640:	5cba      	ldrb	r2, [r7, r2]
 8016642:	0712      	lsls	r2, r2, #28
 8016644:	d441      	bmi.n	80166ca <__ssvfiscanf_r+0x276>
 8016646:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016648:	2b02      	cmp	r3, #2
 801664a:	dc50      	bgt.n	80166ee <__ssvfiscanf_r+0x29a>
 801664c:	466b      	mov	r3, sp
 801664e:	4622      	mov	r2, r4
 8016650:	a941      	add	r1, sp, #260	; 0x104
 8016652:	4630      	mov	r0, r6
 8016654:	f000 f876 	bl	8016744 <_scanf_chars>
 8016658:	2801      	cmp	r0, #1
 801665a:	d06e      	beq.n	801673a <__ssvfiscanf_r+0x2e6>
 801665c:	2802      	cmp	r0, #2
 801665e:	f47f af20 	bne.w	80164a2 <__ssvfiscanf_r+0x4e>
 8016662:	e7cf      	b.n	8016604 <__ssvfiscanf_r+0x1b0>
 8016664:	220a      	movs	r2, #10
 8016666:	e7dd      	b.n	8016624 <__ssvfiscanf_r+0x1d0>
 8016668:	2300      	movs	r3, #0
 801666a:	9342      	str	r3, [sp, #264]	; 0x108
 801666c:	2303      	movs	r3, #3
 801666e:	e7de      	b.n	801662e <__ssvfiscanf_r+0x1da>
 8016670:	2308      	movs	r3, #8
 8016672:	9342      	str	r3, [sp, #264]	; 0x108
 8016674:	2304      	movs	r3, #4
 8016676:	e7da      	b.n	801662e <__ssvfiscanf_r+0x1da>
 8016678:	4629      	mov	r1, r5
 801667a:	4640      	mov	r0, r8
 801667c:	f000 f9b4 	bl	80169e8 <__sccl>
 8016680:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016686:	9341      	str	r3, [sp, #260]	; 0x104
 8016688:	4605      	mov	r5, r0
 801668a:	2301      	movs	r3, #1
 801668c:	e7cf      	b.n	801662e <__ssvfiscanf_r+0x1da>
 801668e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016694:	9341      	str	r3, [sp, #260]	; 0x104
 8016696:	2300      	movs	r3, #0
 8016698:	e7c9      	b.n	801662e <__ssvfiscanf_r+0x1da>
 801669a:	2302      	movs	r3, #2
 801669c:	e7c7      	b.n	801662e <__ssvfiscanf_r+0x1da>
 801669e:	9841      	ldr	r0, [sp, #260]	; 0x104
 80166a0:	06c3      	lsls	r3, r0, #27
 80166a2:	f53f aefe 	bmi.w	80164a2 <__ssvfiscanf_r+0x4e>
 80166a6:	9b00      	ldr	r3, [sp, #0]
 80166a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80166aa:	1d19      	adds	r1, r3, #4
 80166ac:	9100      	str	r1, [sp, #0]
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	f010 0f01 	tst.w	r0, #1
 80166b4:	bf14      	ite	ne
 80166b6:	801a      	strhne	r2, [r3, #0]
 80166b8:	601a      	streq	r2, [r3, #0]
 80166ba:	e6f2      	b.n	80164a2 <__ssvfiscanf_r+0x4e>
 80166bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80166be:	4621      	mov	r1, r4
 80166c0:	4630      	mov	r0, r6
 80166c2:	4798      	blx	r3
 80166c4:	2800      	cmp	r0, #0
 80166c6:	d0b6      	beq.n	8016636 <__ssvfiscanf_r+0x1e2>
 80166c8:	e79c      	b.n	8016604 <__ssvfiscanf_r+0x1b0>
 80166ca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80166cc:	3201      	adds	r2, #1
 80166ce:	9245      	str	r2, [sp, #276]	; 0x114
 80166d0:	6862      	ldr	r2, [r4, #4]
 80166d2:	3a01      	subs	r2, #1
 80166d4:	2a00      	cmp	r2, #0
 80166d6:	6062      	str	r2, [r4, #4]
 80166d8:	dd02      	ble.n	80166e0 <__ssvfiscanf_r+0x28c>
 80166da:	3301      	adds	r3, #1
 80166dc:	6023      	str	r3, [r4, #0]
 80166de:	e7ad      	b.n	801663c <__ssvfiscanf_r+0x1e8>
 80166e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80166e2:	4621      	mov	r1, r4
 80166e4:	4630      	mov	r0, r6
 80166e6:	4798      	blx	r3
 80166e8:	2800      	cmp	r0, #0
 80166ea:	d0a7      	beq.n	801663c <__ssvfiscanf_r+0x1e8>
 80166ec:	e78a      	b.n	8016604 <__ssvfiscanf_r+0x1b0>
 80166ee:	2b04      	cmp	r3, #4
 80166f0:	dc0e      	bgt.n	8016710 <__ssvfiscanf_r+0x2bc>
 80166f2:	466b      	mov	r3, sp
 80166f4:	4622      	mov	r2, r4
 80166f6:	a941      	add	r1, sp, #260	; 0x104
 80166f8:	4630      	mov	r0, r6
 80166fa:	f000 f87d 	bl	80167f8 <_scanf_i>
 80166fe:	e7ab      	b.n	8016658 <__ssvfiscanf_r+0x204>
 8016700:	0801639f 	.word	0x0801639f
 8016704:	08016419 	.word	0x08016419
 8016708:	080175f5 	.word	0x080175f5
 801670c:	0801775e 	.word	0x0801775e
 8016710:	4b0b      	ldr	r3, [pc, #44]	; (8016740 <__ssvfiscanf_r+0x2ec>)
 8016712:	2b00      	cmp	r3, #0
 8016714:	f43f aec5 	beq.w	80164a2 <__ssvfiscanf_r+0x4e>
 8016718:	466b      	mov	r3, sp
 801671a:	4622      	mov	r2, r4
 801671c:	a941      	add	r1, sp, #260	; 0x104
 801671e:	4630      	mov	r0, r6
 8016720:	f3af 8000 	nop.w
 8016724:	e798      	b.n	8016658 <__ssvfiscanf_r+0x204>
 8016726:	89a3      	ldrh	r3, [r4, #12]
 8016728:	f013 0f40 	tst.w	r3, #64	; 0x40
 801672c:	bf18      	it	ne
 801672e:	f04f 30ff 	movne.w	r0, #4294967295
 8016732:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8016736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801673a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801673c:	e7f9      	b.n	8016732 <__ssvfiscanf_r+0x2de>
 801673e:	bf00      	nop
 8016740:	00000000 	.word	0x00000000

08016744 <_scanf_chars>:
 8016744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016748:	4615      	mov	r5, r2
 801674a:	688a      	ldr	r2, [r1, #8]
 801674c:	4680      	mov	r8, r0
 801674e:	460c      	mov	r4, r1
 8016750:	b932      	cbnz	r2, 8016760 <_scanf_chars+0x1c>
 8016752:	698a      	ldr	r2, [r1, #24]
 8016754:	2a00      	cmp	r2, #0
 8016756:	bf0c      	ite	eq
 8016758:	2201      	moveq	r2, #1
 801675a:	f04f 32ff 	movne.w	r2, #4294967295
 801675e:	608a      	str	r2, [r1, #8]
 8016760:	6822      	ldr	r2, [r4, #0]
 8016762:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80167f4 <_scanf_chars+0xb0>
 8016766:	06d1      	lsls	r1, r2, #27
 8016768:	bf5f      	itttt	pl
 801676a:	681a      	ldrpl	r2, [r3, #0]
 801676c:	1d11      	addpl	r1, r2, #4
 801676e:	6019      	strpl	r1, [r3, #0]
 8016770:	6816      	ldrpl	r6, [r2, #0]
 8016772:	2700      	movs	r7, #0
 8016774:	69a0      	ldr	r0, [r4, #24]
 8016776:	b188      	cbz	r0, 801679c <_scanf_chars+0x58>
 8016778:	2801      	cmp	r0, #1
 801677a:	d107      	bne.n	801678c <_scanf_chars+0x48>
 801677c:	682a      	ldr	r2, [r5, #0]
 801677e:	7811      	ldrb	r1, [r2, #0]
 8016780:	6962      	ldr	r2, [r4, #20]
 8016782:	5c52      	ldrb	r2, [r2, r1]
 8016784:	b952      	cbnz	r2, 801679c <_scanf_chars+0x58>
 8016786:	2f00      	cmp	r7, #0
 8016788:	d031      	beq.n	80167ee <_scanf_chars+0xaa>
 801678a:	e022      	b.n	80167d2 <_scanf_chars+0x8e>
 801678c:	2802      	cmp	r0, #2
 801678e:	d120      	bne.n	80167d2 <_scanf_chars+0x8e>
 8016790:	682b      	ldr	r3, [r5, #0]
 8016792:	781b      	ldrb	r3, [r3, #0]
 8016794:	f813 3009 	ldrb.w	r3, [r3, r9]
 8016798:	071b      	lsls	r3, r3, #28
 801679a:	d41a      	bmi.n	80167d2 <_scanf_chars+0x8e>
 801679c:	6823      	ldr	r3, [r4, #0]
 801679e:	06da      	lsls	r2, r3, #27
 80167a0:	bf5e      	ittt	pl
 80167a2:	682b      	ldrpl	r3, [r5, #0]
 80167a4:	781b      	ldrbpl	r3, [r3, #0]
 80167a6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80167aa:	682a      	ldr	r2, [r5, #0]
 80167ac:	686b      	ldr	r3, [r5, #4]
 80167ae:	3201      	adds	r2, #1
 80167b0:	602a      	str	r2, [r5, #0]
 80167b2:	68a2      	ldr	r2, [r4, #8]
 80167b4:	3b01      	subs	r3, #1
 80167b6:	3a01      	subs	r2, #1
 80167b8:	606b      	str	r3, [r5, #4]
 80167ba:	3701      	adds	r7, #1
 80167bc:	60a2      	str	r2, [r4, #8]
 80167be:	b142      	cbz	r2, 80167d2 <_scanf_chars+0x8e>
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	dcd7      	bgt.n	8016774 <_scanf_chars+0x30>
 80167c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80167c8:	4629      	mov	r1, r5
 80167ca:	4640      	mov	r0, r8
 80167cc:	4798      	blx	r3
 80167ce:	2800      	cmp	r0, #0
 80167d0:	d0d0      	beq.n	8016774 <_scanf_chars+0x30>
 80167d2:	6823      	ldr	r3, [r4, #0]
 80167d4:	f013 0310 	ands.w	r3, r3, #16
 80167d8:	d105      	bne.n	80167e6 <_scanf_chars+0xa2>
 80167da:	68e2      	ldr	r2, [r4, #12]
 80167dc:	3201      	adds	r2, #1
 80167de:	60e2      	str	r2, [r4, #12]
 80167e0:	69a2      	ldr	r2, [r4, #24]
 80167e2:	b102      	cbz	r2, 80167e6 <_scanf_chars+0xa2>
 80167e4:	7033      	strb	r3, [r6, #0]
 80167e6:	6923      	ldr	r3, [r4, #16]
 80167e8:	443b      	add	r3, r7
 80167ea:	6123      	str	r3, [r4, #16]
 80167ec:	2000      	movs	r0, #0
 80167ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167f2:	bf00      	nop
 80167f4:	080175f5 	.word	0x080175f5

080167f8 <_scanf_i>:
 80167f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167fc:	4698      	mov	r8, r3
 80167fe:	4b76      	ldr	r3, [pc, #472]	; (80169d8 <_scanf_i+0x1e0>)
 8016800:	460c      	mov	r4, r1
 8016802:	4682      	mov	sl, r0
 8016804:	4616      	mov	r6, r2
 8016806:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801680a:	b087      	sub	sp, #28
 801680c:	ab03      	add	r3, sp, #12
 801680e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016812:	4b72      	ldr	r3, [pc, #456]	; (80169dc <_scanf_i+0x1e4>)
 8016814:	69a1      	ldr	r1, [r4, #24]
 8016816:	4a72      	ldr	r2, [pc, #456]	; (80169e0 <_scanf_i+0x1e8>)
 8016818:	2903      	cmp	r1, #3
 801681a:	bf18      	it	ne
 801681c:	461a      	movne	r2, r3
 801681e:	68a3      	ldr	r3, [r4, #8]
 8016820:	9201      	str	r2, [sp, #4]
 8016822:	1e5a      	subs	r2, r3, #1
 8016824:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016828:	bf88      	it	hi
 801682a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801682e:	4627      	mov	r7, r4
 8016830:	bf82      	ittt	hi
 8016832:	eb03 0905 	addhi.w	r9, r3, r5
 8016836:	f240 135d 	movwhi	r3, #349	; 0x15d
 801683a:	60a3      	strhi	r3, [r4, #8]
 801683c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016840:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016844:	bf98      	it	ls
 8016846:	f04f 0900 	movls.w	r9, #0
 801684a:	6023      	str	r3, [r4, #0]
 801684c:	463d      	mov	r5, r7
 801684e:	f04f 0b00 	mov.w	fp, #0
 8016852:	6831      	ldr	r1, [r6, #0]
 8016854:	ab03      	add	r3, sp, #12
 8016856:	7809      	ldrb	r1, [r1, #0]
 8016858:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801685c:	2202      	movs	r2, #2
 801685e:	f7e9 fccf 	bl	8000200 <memchr>
 8016862:	b328      	cbz	r0, 80168b0 <_scanf_i+0xb8>
 8016864:	f1bb 0f01 	cmp.w	fp, #1
 8016868:	d159      	bne.n	801691e <_scanf_i+0x126>
 801686a:	6862      	ldr	r2, [r4, #4]
 801686c:	b92a      	cbnz	r2, 801687a <_scanf_i+0x82>
 801686e:	6822      	ldr	r2, [r4, #0]
 8016870:	2308      	movs	r3, #8
 8016872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016876:	6063      	str	r3, [r4, #4]
 8016878:	6022      	str	r2, [r4, #0]
 801687a:	6822      	ldr	r2, [r4, #0]
 801687c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016880:	6022      	str	r2, [r4, #0]
 8016882:	68a2      	ldr	r2, [r4, #8]
 8016884:	1e51      	subs	r1, r2, #1
 8016886:	60a1      	str	r1, [r4, #8]
 8016888:	b192      	cbz	r2, 80168b0 <_scanf_i+0xb8>
 801688a:	6832      	ldr	r2, [r6, #0]
 801688c:	1c51      	adds	r1, r2, #1
 801688e:	6031      	str	r1, [r6, #0]
 8016890:	7812      	ldrb	r2, [r2, #0]
 8016892:	f805 2b01 	strb.w	r2, [r5], #1
 8016896:	6872      	ldr	r2, [r6, #4]
 8016898:	3a01      	subs	r2, #1
 801689a:	2a00      	cmp	r2, #0
 801689c:	6072      	str	r2, [r6, #4]
 801689e:	dc07      	bgt.n	80168b0 <_scanf_i+0xb8>
 80168a0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80168a4:	4631      	mov	r1, r6
 80168a6:	4650      	mov	r0, sl
 80168a8:	4790      	blx	r2
 80168aa:	2800      	cmp	r0, #0
 80168ac:	f040 8085 	bne.w	80169ba <_scanf_i+0x1c2>
 80168b0:	f10b 0b01 	add.w	fp, fp, #1
 80168b4:	f1bb 0f03 	cmp.w	fp, #3
 80168b8:	d1cb      	bne.n	8016852 <_scanf_i+0x5a>
 80168ba:	6863      	ldr	r3, [r4, #4]
 80168bc:	b90b      	cbnz	r3, 80168c2 <_scanf_i+0xca>
 80168be:	230a      	movs	r3, #10
 80168c0:	6063      	str	r3, [r4, #4]
 80168c2:	6863      	ldr	r3, [r4, #4]
 80168c4:	4947      	ldr	r1, [pc, #284]	; (80169e4 <_scanf_i+0x1ec>)
 80168c6:	6960      	ldr	r0, [r4, #20]
 80168c8:	1ac9      	subs	r1, r1, r3
 80168ca:	f000 f88d 	bl	80169e8 <__sccl>
 80168ce:	f04f 0b00 	mov.w	fp, #0
 80168d2:	68a3      	ldr	r3, [r4, #8]
 80168d4:	6822      	ldr	r2, [r4, #0]
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d03d      	beq.n	8016956 <_scanf_i+0x15e>
 80168da:	6831      	ldr	r1, [r6, #0]
 80168dc:	6960      	ldr	r0, [r4, #20]
 80168de:	f891 c000 	ldrb.w	ip, [r1]
 80168e2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80168e6:	2800      	cmp	r0, #0
 80168e8:	d035      	beq.n	8016956 <_scanf_i+0x15e>
 80168ea:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80168ee:	d124      	bne.n	801693a <_scanf_i+0x142>
 80168f0:	0510      	lsls	r0, r2, #20
 80168f2:	d522      	bpl.n	801693a <_scanf_i+0x142>
 80168f4:	f10b 0b01 	add.w	fp, fp, #1
 80168f8:	f1b9 0f00 	cmp.w	r9, #0
 80168fc:	d003      	beq.n	8016906 <_scanf_i+0x10e>
 80168fe:	3301      	adds	r3, #1
 8016900:	f109 39ff 	add.w	r9, r9, #4294967295
 8016904:	60a3      	str	r3, [r4, #8]
 8016906:	6873      	ldr	r3, [r6, #4]
 8016908:	3b01      	subs	r3, #1
 801690a:	2b00      	cmp	r3, #0
 801690c:	6073      	str	r3, [r6, #4]
 801690e:	dd1b      	ble.n	8016948 <_scanf_i+0x150>
 8016910:	6833      	ldr	r3, [r6, #0]
 8016912:	3301      	adds	r3, #1
 8016914:	6033      	str	r3, [r6, #0]
 8016916:	68a3      	ldr	r3, [r4, #8]
 8016918:	3b01      	subs	r3, #1
 801691a:	60a3      	str	r3, [r4, #8]
 801691c:	e7d9      	b.n	80168d2 <_scanf_i+0xda>
 801691e:	f1bb 0f02 	cmp.w	fp, #2
 8016922:	d1ae      	bne.n	8016882 <_scanf_i+0x8a>
 8016924:	6822      	ldr	r2, [r4, #0]
 8016926:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801692a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801692e:	d1bf      	bne.n	80168b0 <_scanf_i+0xb8>
 8016930:	2310      	movs	r3, #16
 8016932:	6063      	str	r3, [r4, #4]
 8016934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016938:	e7a2      	b.n	8016880 <_scanf_i+0x88>
 801693a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801693e:	6022      	str	r2, [r4, #0]
 8016940:	780b      	ldrb	r3, [r1, #0]
 8016942:	f805 3b01 	strb.w	r3, [r5], #1
 8016946:	e7de      	b.n	8016906 <_scanf_i+0x10e>
 8016948:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801694c:	4631      	mov	r1, r6
 801694e:	4650      	mov	r0, sl
 8016950:	4798      	blx	r3
 8016952:	2800      	cmp	r0, #0
 8016954:	d0df      	beq.n	8016916 <_scanf_i+0x11e>
 8016956:	6823      	ldr	r3, [r4, #0]
 8016958:	05db      	lsls	r3, r3, #23
 801695a:	d50d      	bpl.n	8016978 <_scanf_i+0x180>
 801695c:	42bd      	cmp	r5, r7
 801695e:	d909      	bls.n	8016974 <_scanf_i+0x17c>
 8016960:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016964:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016968:	4632      	mov	r2, r6
 801696a:	4650      	mov	r0, sl
 801696c:	4798      	blx	r3
 801696e:	f105 39ff 	add.w	r9, r5, #4294967295
 8016972:	464d      	mov	r5, r9
 8016974:	42bd      	cmp	r5, r7
 8016976:	d02d      	beq.n	80169d4 <_scanf_i+0x1dc>
 8016978:	6822      	ldr	r2, [r4, #0]
 801697a:	f012 0210 	ands.w	r2, r2, #16
 801697e:	d113      	bne.n	80169a8 <_scanf_i+0x1b0>
 8016980:	702a      	strb	r2, [r5, #0]
 8016982:	6863      	ldr	r3, [r4, #4]
 8016984:	9e01      	ldr	r6, [sp, #4]
 8016986:	4639      	mov	r1, r7
 8016988:	4650      	mov	r0, sl
 801698a:	47b0      	blx	r6
 801698c:	6821      	ldr	r1, [r4, #0]
 801698e:	f8d8 3000 	ldr.w	r3, [r8]
 8016992:	f011 0f20 	tst.w	r1, #32
 8016996:	d013      	beq.n	80169c0 <_scanf_i+0x1c8>
 8016998:	1d1a      	adds	r2, r3, #4
 801699a:	f8c8 2000 	str.w	r2, [r8]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	6018      	str	r0, [r3, #0]
 80169a2:	68e3      	ldr	r3, [r4, #12]
 80169a4:	3301      	adds	r3, #1
 80169a6:	60e3      	str	r3, [r4, #12]
 80169a8:	1bed      	subs	r5, r5, r7
 80169aa:	44ab      	add	fp, r5
 80169ac:	6925      	ldr	r5, [r4, #16]
 80169ae:	445d      	add	r5, fp
 80169b0:	6125      	str	r5, [r4, #16]
 80169b2:	2000      	movs	r0, #0
 80169b4:	b007      	add	sp, #28
 80169b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169ba:	f04f 0b00 	mov.w	fp, #0
 80169be:	e7ca      	b.n	8016956 <_scanf_i+0x15e>
 80169c0:	1d1a      	adds	r2, r3, #4
 80169c2:	f8c8 2000 	str.w	r2, [r8]
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	f011 0f01 	tst.w	r1, #1
 80169cc:	bf14      	ite	ne
 80169ce:	8018      	strhne	r0, [r3, #0]
 80169d0:	6018      	streq	r0, [r3, #0]
 80169d2:	e7e6      	b.n	80169a2 <_scanf_i+0x1aa>
 80169d4:	2001      	movs	r0, #1
 80169d6:	e7ed      	b.n	80169b4 <_scanf_i+0x1bc>
 80169d8:	08016fd8 	.word	0x08016fd8
 80169dc:	08016081 	.word	0x08016081
 80169e0:	08014ea9 	.word	0x08014ea9
 80169e4:	080177a4 	.word	0x080177a4

080169e8 <__sccl>:
 80169e8:	b570      	push	{r4, r5, r6, lr}
 80169ea:	780b      	ldrb	r3, [r1, #0]
 80169ec:	4604      	mov	r4, r0
 80169ee:	2b5e      	cmp	r3, #94	; 0x5e
 80169f0:	bf0b      	itete	eq
 80169f2:	784b      	ldrbeq	r3, [r1, #1]
 80169f4:	1c48      	addne	r0, r1, #1
 80169f6:	1c88      	addeq	r0, r1, #2
 80169f8:	2200      	movne	r2, #0
 80169fa:	bf08      	it	eq
 80169fc:	2201      	moveq	r2, #1
 80169fe:	1e61      	subs	r1, r4, #1
 8016a00:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8016a04:	f801 2f01 	strb.w	r2, [r1, #1]!
 8016a08:	42a9      	cmp	r1, r5
 8016a0a:	d1fb      	bne.n	8016a04 <__sccl+0x1c>
 8016a0c:	b90b      	cbnz	r3, 8016a12 <__sccl+0x2a>
 8016a0e:	3801      	subs	r0, #1
 8016a10:	bd70      	pop	{r4, r5, r6, pc}
 8016a12:	f082 0201 	eor.w	r2, r2, #1
 8016a16:	54e2      	strb	r2, [r4, r3]
 8016a18:	4605      	mov	r5, r0
 8016a1a:	4628      	mov	r0, r5
 8016a1c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8016a20:	292d      	cmp	r1, #45	; 0x2d
 8016a22:	d006      	beq.n	8016a32 <__sccl+0x4a>
 8016a24:	295d      	cmp	r1, #93	; 0x5d
 8016a26:	d0f3      	beq.n	8016a10 <__sccl+0x28>
 8016a28:	b909      	cbnz	r1, 8016a2e <__sccl+0x46>
 8016a2a:	4628      	mov	r0, r5
 8016a2c:	e7f0      	b.n	8016a10 <__sccl+0x28>
 8016a2e:	460b      	mov	r3, r1
 8016a30:	e7f1      	b.n	8016a16 <__sccl+0x2e>
 8016a32:	786e      	ldrb	r6, [r5, #1]
 8016a34:	2e5d      	cmp	r6, #93	; 0x5d
 8016a36:	d0fa      	beq.n	8016a2e <__sccl+0x46>
 8016a38:	42b3      	cmp	r3, r6
 8016a3a:	dcf8      	bgt.n	8016a2e <__sccl+0x46>
 8016a3c:	3502      	adds	r5, #2
 8016a3e:	4619      	mov	r1, r3
 8016a40:	3101      	adds	r1, #1
 8016a42:	428e      	cmp	r6, r1
 8016a44:	5462      	strb	r2, [r4, r1]
 8016a46:	dcfb      	bgt.n	8016a40 <__sccl+0x58>
 8016a48:	1af1      	subs	r1, r6, r3
 8016a4a:	3901      	subs	r1, #1
 8016a4c:	1c58      	adds	r0, r3, #1
 8016a4e:	42b3      	cmp	r3, r6
 8016a50:	bfa8      	it	ge
 8016a52:	2100      	movge	r1, #0
 8016a54:	1843      	adds	r3, r0, r1
 8016a56:	e7e0      	b.n	8016a1a <__sccl+0x32>

08016a58 <_raise_r>:
 8016a58:	291f      	cmp	r1, #31
 8016a5a:	b538      	push	{r3, r4, r5, lr}
 8016a5c:	4604      	mov	r4, r0
 8016a5e:	460d      	mov	r5, r1
 8016a60:	d904      	bls.n	8016a6c <_raise_r+0x14>
 8016a62:	2316      	movs	r3, #22
 8016a64:	6003      	str	r3, [r0, #0]
 8016a66:	f04f 30ff 	mov.w	r0, #4294967295
 8016a6a:	bd38      	pop	{r3, r4, r5, pc}
 8016a6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016a6e:	b112      	cbz	r2, 8016a76 <_raise_r+0x1e>
 8016a70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016a74:	b94b      	cbnz	r3, 8016a8a <_raise_r+0x32>
 8016a76:	4620      	mov	r0, r4
 8016a78:	f000 f830 	bl	8016adc <_getpid_r>
 8016a7c:	462a      	mov	r2, r5
 8016a7e:	4601      	mov	r1, r0
 8016a80:	4620      	mov	r0, r4
 8016a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a86:	f000 b817 	b.w	8016ab8 <_kill_r>
 8016a8a:	2b01      	cmp	r3, #1
 8016a8c:	d00a      	beq.n	8016aa4 <_raise_r+0x4c>
 8016a8e:	1c59      	adds	r1, r3, #1
 8016a90:	d103      	bne.n	8016a9a <_raise_r+0x42>
 8016a92:	2316      	movs	r3, #22
 8016a94:	6003      	str	r3, [r0, #0]
 8016a96:	2001      	movs	r0, #1
 8016a98:	e7e7      	b.n	8016a6a <_raise_r+0x12>
 8016a9a:	2400      	movs	r4, #0
 8016a9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016aa0:	4628      	mov	r0, r5
 8016aa2:	4798      	blx	r3
 8016aa4:	2000      	movs	r0, #0
 8016aa6:	e7e0      	b.n	8016a6a <_raise_r+0x12>

08016aa8 <raise>:
 8016aa8:	4b02      	ldr	r3, [pc, #8]	; (8016ab4 <raise+0xc>)
 8016aaa:	4601      	mov	r1, r0
 8016aac:	6818      	ldr	r0, [r3, #0]
 8016aae:	f7ff bfd3 	b.w	8016a58 <_raise_r>
 8016ab2:	bf00      	nop
 8016ab4:	200002b4 	.word	0x200002b4

08016ab8 <_kill_r>:
 8016ab8:	b538      	push	{r3, r4, r5, lr}
 8016aba:	4d07      	ldr	r5, [pc, #28]	; (8016ad8 <_kill_r+0x20>)
 8016abc:	2300      	movs	r3, #0
 8016abe:	4604      	mov	r4, r0
 8016ac0:	4608      	mov	r0, r1
 8016ac2:	4611      	mov	r1, r2
 8016ac4:	602b      	str	r3, [r5, #0]
 8016ac6:	f7eb ffbb 	bl	8002a40 <_kill>
 8016aca:	1c43      	adds	r3, r0, #1
 8016acc:	d102      	bne.n	8016ad4 <_kill_r+0x1c>
 8016ace:	682b      	ldr	r3, [r5, #0]
 8016ad0:	b103      	cbz	r3, 8016ad4 <_kill_r+0x1c>
 8016ad2:	6023      	str	r3, [r4, #0]
 8016ad4:	bd38      	pop	{r3, r4, r5, pc}
 8016ad6:	bf00      	nop
 8016ad8:	2000dabc 	.word	0x2000dabc

08016adc <_getpid_r>:
 8016adc:	f7eb bfa8 	b.w	8002a30 <_getpid>

08016ae0 <__submore>:
 8016ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ae4:	460c      	mov	r4, r1
 8016ae6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016aec:	4299      	cmp	r1, r3
 8016aee:	d11d      	bne.n	8016b2c <__submore+0x4c>
 8016af0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016af4:	f7fd ffa6 	bl	8014a44 <_malloc_r>
 8016af8:	b918      	cbnz	r0, 8016b02 <__submore+0x22>
 8016afa:	f04f 30ff 	mov.w	r0, #4294967295
 8016afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016b06:	63a3      	str	r3, [r4, #56]	; 0x38
 8016b08:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016b0c:	6360      	str	r0, [r4, #52]	; 0x34
 8016b0e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016b12:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016b16:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016b1a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016b1e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016b22:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016b26:	6020      	str	r0, [r4, #0]
 8016b28:	2000      	movs	r0, #0
 8016b2a:	e7e8      	b.n	8016afe <__submore+0x1e>
 8016b2c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016b2e:	0077      	lsls	r7, r6, #1
 8016b30:	463a      	mov	r2, r7
 8016b32:	f7ff fc05 	bl	8016340 <_realloc_r>
 8016b36:	4605      	mov	r5, r0
 8016b38:	2800      	cmp	r0, #0
 8016b3a:	d0de      	beq.n	8016afa <__submore+0x1a>
 8016b3c:	eb00 0806 	add.w	r8, r0, r6
 8016b40:	4601      	mov	r1, r0
 8016b42:	4632      	mov	r2, r6
 8016b44:	4640      	mov	r0, r8
 8016b46:	f7fd fc89 	bl	801445c <memcpy>
 8016b4a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8016b4e:	f8c4 8000 	str.w	r8, [r4]
 8016b52:	e7e9      	b.n	8016b28 <__submore+0x48>

08016b54 <_fstat_r>:
 8016b54:	b538      	push	{r3, r4, r5, lr}
 8016b56:	4d07      	ldr	r5, [pc, #28]	; (8016b74 <_fstat_r+0x20>)
 8016b58:	2300      	movs	r3, #0
 8016b5a:	4604      	mov	r4, r0
 8016b5c:	4608      	mov	r0, r1
 8016b5e:	4611      	mov	r1, r2
 8016b60:	602b      	str	r3, [r5, #0]
 8016b62:	f7eb ffcc 	bl	8002afe <_fstat>
 8016b66:	1c43      	adds	r3, r0, #1
 8016b68:	d102      	bne.n	8016b70 <_fstat_r+0x1c>
 8016b6a:	682b      	ldr	r3, [r5, #0]
 8016b6c:	b103      	cbz	r3, 8016b70 <_fstat_r+0x1c>
 8016b6e:	6023      	str	r3, [r4, #0]
 8016b70:	bd38      	pop	{r3, r4, r5, pc}
 8016b72:	bf00      	nop
 8016b74:	2000dabc 	.word	0x2000dabc

08016b78 <_isatty_r>:
 8016b78:	b538      	push	{r3, r4, r5, lr}
 8016b7a:	4d06      	ldr	r5, [pc, #24]	; (8016b94 <_isatty_r+0x1c>)
 8016b7c:	2300      	movs	r3, #0
 8016b7e:	4604      	mov	r4, r0
 8016b80:	4608      	mov	r0, r1
 8016b82:	602b      	str	r3, [r5, #0]
 8016b84:	f7eb ffcb 	bl	8002b1e <_isatty>
 8016b88:	1c43      	adds	r3, r0, #1
 8016b8a:	d102      	bne.n	8016b92 <_isatty_r+0x1a>
 8016b8c:	682b      	ldr	r3, [r5, #0]
 8016b8e:	b103      	cbz	r3, 8016b92 <_isatty_r+0x1a>
 8016b90:	6023      	str	r3, [r4, #0]
 8016b92:	bd38      	pop	{r3, r4, r5, pc}
 8016b94:	2000dabc 	.word	0x2000dabc

08016b98 <_malloc_usable_size_r>:
 8016b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b9c:	1f18      	subs	r0, r3, #4
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	bfbc      	itt	lt
 8016ba2:	580b      	ldrlt	r3, [r1, r0]
 8016ba4:	18c0      	addlt	r0, r0, r3
 8016ba6:	4770      	bx	lr

08016ba8 <_init>:
 8016ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016baa:	bf00      	nop
 8016bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016bae:	bc08      	pop	{r3}
 8016bb0:	469e      	mov	lr, r3
 8016bb2:	4770      	bx	lr

08016bb4 <_fini>:
 8016bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bb6:	bf00      	nop
 8016bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016bba:	bc08      	pop	{r3}
 8016bbc:	469e      	mov	lr, r3
 8016bbe:	4770      	bx	lr
